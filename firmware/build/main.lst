
build/main.elf:     file format elf32-littlearm


Disassembly of section .text:

08000000 <g_pfnVectors>:
 8000000:	00 00 03 20 1d 85 01 08 69 85 01 08 69 85 01 08     ... ....i...i...
 8000010:	69 85 01 08 69 85 01 08 69 85 01 08 00 00 00 00     i...i...i.......
	...
 800002c:	b9 7e 01 08 69 85 01 08 00 00 00 00 69 85 01 08     .~..i.......i...
 800003c:	99 7e 01 08 69 85 01 08 69 85 01 08 69 85 01 08     .~..i...i...i...
 800004c:	69 85 01 08 69 85 01 08 69 85 01 08 69 85 01 08     i...i...i...i...
 800005c:	69 85 01 08 69 85 01 08 69 85 01 08 69 85 01 08     i...i...i...i...
 800006c:	69 85 01 08 69 85 01 08 69 85 01 08 69 85 01 08     i...i...i...i...
 800007c:	69 85 01 08 69 85 01 08 69 85 01 08 69 85 01 08     i...i...i...i...
 800008c:	69 85 01 08 69 85 01 08 69 85 01 08 69 85 01 08     i...i...i...i...
 800009c:	69 85 01 08 69 85 01 08 69 85 01 08 69 85 01 08     i...i...i...i...
 80000ac:	69 85 01 08 69 85 01 08 69 85 01 08 69 85 01 08     i...i...i...i...
 80000bc:	69 85 01 08 69 85 01 08 69 85 01 08 69 85 01 08     i...i...i...i...
 80000cc:	69 85 01 08 69 85 01 08 69 85 01 08 99 7e 01 08     i...i...i....~..
 80000dc:	69 85 01 08 69 85 01 08 69 85 01 08 69 85 01 08     i...i...i...i...
 80000ec:	69 85 01 08 69 85 01 08 69 85 01 08 69 85 01 08     i...i...i...i...
 80000fc:	69 85 01 08 69 85 01 08 69 85 01 08 69 85 01 08     i...i...i...i...
 800010c:	69 85 01 08 69 85 01 08 69 85 01 08 69 85 01 08     i...i...i...i...
 800011c:	69 85 01 08 69 85 01 08 69 85 01 08 69 85 01 08     i...i...i...i...
 800012c:	69 85 01 08 69 85 01 08 69 85 01 08 69 85 01 08     i...i...i...i...
 800013c:	69 85 01 08 69 85 01 08 69 85 01 08 69 85 01 08     i...i...i...i...
 800014c:	69 85 01 08 69 85 01 08 69 85 01 08 69 85 01 08     i...i...i...i...
 800015c:	69 85 01 08 69 85 01 08 69 85 01 08 69 85 01 08     i...i...i...i...
 800016c:	69 85 01 08 69 85 01 08 69 85 01 08 69 85 01 08     i...i...i...i...
 800017c:	69 85 01 08 69 85 01 08 69 85 01 08 69 85 01 08     i...i...i...i...
 800018c:	69 85 01 08 69 85 01 08 69 85 01 08 69 85 01 08     i...i...i...i...
 800019c:	69 85 01 08 69 85 01 08 69 85 01 08 69 85 01 08     i...i...i...i...

080001ac <block_driver_readable>:
};


int block_driver_readable (struct block *block, struct file_request *request,
                           struct event_monitor *monitor)
{
 80001ac:	b480      	push	{r7}
 80001ae:	b085      	sub	sp, #20
 80001b0:	af00      	add	r7, sp, #0
 80001b2:	60f8      	str	r0, [r7, #12]
 80001b4:	60b9      	str	r1, [r7, #8]
 80001b6:	607a      	str	r2, [r7, #4]
    if (block->buzy)
 80001b8:	68fb      	ldr	r3, [r7, #12]
 80001ba:	699b      	ldr	r3, [r3, #24]
 80001bc:	2b00      	cmp	r3, #0
 80001be:	d001      	beq.n	80001c4 <block_driver_readable+0x18>
        return FILE_ACCESS_ACCEPT;
 80001c0:	2301      	movs	r3, #1
 80001c2:	e001      	b.n	80001c8 <block_driver_readable+0x1c>
    else
        return FILE_ACCESS_ERROR;
 80001c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80001c8:	4618      	mov	r0, r3
 80001ca:	3714      	adds	r7, #20
 80001cc:	46bd      	mov	sp, r7
 80001ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001d2:	4770      	bx	lr

080001d4 <block_driver_writable>:

int block_driver_writable (struct block *block, struct file_request *request,
                           struct event_monitor *monitor)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b085      	sub	sp, #20
 80001d8:	af00      	add	r7, sp, #0
 80001da:	60f8      	str	r0, [r7, #12]
 80001dc:	60b9      	str	r1, [r7, #8]
 80001de:	607a      	str	r2, [r7, #4]
    if (block->buzy)
 80001e0:	68fb      	ldr	r3, [r7, #12]
 80001e2:	699b      	ldr	r3, [r3, #24]
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d001      	beq.n	80001ec <block_driver_writable+0x18>
        return FILE_ACCESS_ACCEPT;
 80001e8:	2301      	movs	r3, #1
 80001ea:	e001      	b.n	80001f0 <block_driver_writable+0x1c>
    else
        return FILE_ACCESS_ERROR;
 80001ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80001f0:	4618      	mov	r0, r3
 80001f2:	3714      	adds	r7, #20
 80001f4:	46bd      	mov	sp, r7
 80001f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fa:	4770      	bx	lr

080001fc <block_driver_lseekable>:

int block_driver_lseekable (struct block *block, struct file_request *request,
                            struct event_monitor *monitor)
{
 80001fc:	b480      	push	{r7}
 80001fe:	b085      	sub	sp, #20
 8000200:	af00      	add	r7, sp, #0
 8000202:	60f8      	str	r0, [r7, #12]
 8000204:	60b9      	str	r1, [r7, #8]
 8000206:	607a      	str	r2, [r7, #4]
    if (block->buzy)
 8000208:	68fb      	ldr	r3, [r7, #12]
 800020a:	699b      	ldr	r3, [r3, #24]
 800020c:	2b00      	cmp	r3, #0
 800020e:	d001      	beq.n	8000214 <block_driver_lseekable+0x18>
        return FILE_ACCESS_ACCEPT;
 8000210:	2301      	movs	r3, #1
 8000212:	e001      	b.n	8000218 <block_driver_lseekable+0x1c>
    else
        return FILE_ACCESS_ERROR;
 8000214:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000218:	4618      	mov	r0, r3
 800021a:	3714      	adds	r7, #20
 800021c:	46bd      	mov	sp, r7
 800021e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000222:	4770      	bx	lr

08000224 <block_driver_read>:

int block_driver_read (struct block *block, struct file_request *request,
                       struct event_monitor *monitor)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b086      	sub	sp, #24
 8000228:	af00      	add	r7, sp, #0
 800022a:	60f8      	str	r0, [r7, #12]
 800022c:	60b9      	str	r1, [r7, #8]
 800022e:	607a      	str	r2, [r7, #4]
    int size = request->size;
 8000230:	68bb      	ldr	r3, [r7, #8]
 8000232:	689b      	ldr	r3, [r3, #8]
 8000234:	617b      	str	r3, [r7, #20]
    if (size > BLOCK_BUF)
 8000236:	697b      	ldr	r3, [r7, #20]
 8000238:	2b40      	cmp	r3, #64	; 0x40
 800023a:	dd01      	ble.n	8000240 <block_driver_read+0x1c>
        size = BLOCK_BUF;
 800023c:	2340      	movs	r3, #64	; 0x40
 800023e:	617b      	str	r3, [r7, #20]

    memcpy(request->buf, block->buf, size);
 8000240:	68bb      	ldr	r3, [r7, #8]
 8000242:	6859      	ldr	r1, [r3, #4]
 8000244:	68fb      	ldr	r3, [r7, #12]
 8000246:	f103 0220 	add.w	r2, r3, #32
 800024a:	697b      	ldr	r3, [r7, #20]
 800024c:	4608      	mov	r0, r1
 800024e:	4611      	mov	r1, r2
 8000250:	461a      	mov	r2, r3
 8000252:	f017 fe4d 	bl	8017ef0 <memcpy>

    /* still buzy until driver write response */
    return size;
 8000256:	697b      	ldr	r3, [r7, #20]
}
 8000258:	4618      	mov	r0, r3
 800025a:	3718      	adds	r7, #24
 800025c:	46bd      	mov	sp, r7
 800025e:	bd80      	pop	{r7, pc}

08000260 <block_driver_write>:

int block_driver_write (struct block *block, struct file_request *request,
                        struct event_monitor *monitor)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	b088      	sub	sp, #32
 8000264:	af00      	add	r7, sp, #0
 8000266:	60f8      	str	r0, [r7, #12]
 8000268:	60b9      	str	r1, [r7, #8]
 800026a:	607a      	str	r2, [r7, #4]
    struct block_response *response = (void *)request->buf;
 800026c:	68bb      	ldr	r3, [r7, #8]
 800026e:	685b      	ldr	r3, [r3, #4]
 8000270:	61bb      	str	r3, [r7, #24]
    char *data_buf = response->buf;
 8000272:	69bb      	ldr	r3, [r7, #24]
 8000274:	685b      	ldr	r3, [r3, #4]
 8000276:	617b      	str	r3, [r7, #20]
    int len = response->transfer_len;
 8000278:	69bb      	ldr	r3, [r7, #24]
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	61fb      	str	r3, [r7, #28]
    if (len > BLOCK_BUF)
 800027e:	69fb      	ldr	r3, [r7, #28]
 8000280:	2b40      	cmp	r3, #64	; 0x40
 8000282:	dd01      	ble.n	8000288 <block_driver_write+0x28>
        len = BLOCK_BUF;
 8000284:	2340      	movs	r3, #64	; 0x40
 8000286:	61fb      	str	r3, [r7, #28]

    if (len > 0) {
 8000288:	69fb      	ldr	r3, [r7, #28]
 800028a:	2b00      	cmp	r3, #0
 800028c:	dd08      	ble.n	80002a0 <block_driver_write+0x40>
        memcpy(block->buf, data_buf, len);
 800028e:	68fb      	ldr	r3, [r7, #12]
 8000290:	f103 0220 	add.w	r2, r3, #32
 8000294:	69fb      	ldr	r3, [r7, #28]
 8000296:	4610      	mov	r0, r2
 8000298:	6979      	ldr	r1, [r7, #20]
 800029a:	461a      	mov	r2, r3
 800029c:	f017 fe28 	bl	8017ef0 <memcpy>
    }
    block->transfer_len = len;
 80002a0:	68fb      	ldr	r3, [r7, #12]
 80002a2:	69fa      	ldr	r2, [r7, #28]
 80002a4:	661a      	str	r2, [r3, #96]	; 0x60
    block->buzy = 0;
 80002a6:	68fb      	ldr	r3, [r7, #12]
 80002a8:	2200      	movs	r2, #0
 80002aa:	619a      	str	r2, [r3, #24]
	event_monitor_release(monitor, block->event);
 80002ac:	68fb      	ldr	r3, [r7, #12]
 80002ae:	691b      	ldr	r3, [r3, #16]
 80002b0:	6878      	ldr	r0, [r7, #4]
 80002b2:	4619      	mov	r1, r3
 80002b4:	f000 fbd0 	bl	8000a58 <event_monitor_release>
    return len;
 80002b8:	69fb      	ldr	r3, [r7, #28]
}
 80002ba:	4618      	mov	r0, r3
 80002bc:	3720      	adds	r7, #32
 80002be:	46bd      	mov	sp, r7
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop

080002c4 <block_driver_lseek>:

int block_driver_lseek (struct block *block, struct file_request *request,
                        struct event_monitor *monitor)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b084      	sub	sp, #16
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	60f8      	str	r0, [r7, #12]
 80002cc:	60b9      	str	r1, [r7, #8]
 80002ce:	607a      	str	r2, [r7, #4]
    block->transfer_len = request->size;
 80002d0:	68bb      	ldr	r3, [r7, #8]
 80002d2:	689a      	ldr	r2, [r3, #8]
 80002d4:	68fb      	ldr	r3, [r7, #12]
 80002d6:	661a      	str	r2, [r3, #96]	; 0x60
    block->buzy = 0;
 80002d8:	68fb      	ldr	r3, [r7, #12]
 80002da:	2200      	movs	r2, #0
 80002dc:	619a      	str	r2, [r3, #24]
	event_monitor_release(monitor, block->event);
 80002de:	68fb      	ldr	r3, [r7, #12]
 80002e0:	691b      	ldr	r3, [r3, #16]
 80002e2:	6878      	ldr	r0, [r7, #4]
 80002e4:	4619      	mov	r1, r3
 80002e6:	f000 fbb7 	bl	8000a58 <event_monitor_release>
    return request->size;
 80002ea:	68bb      	ldr	r3, [r7, #8]
 80002ec:	689b      	ldr	r3, [r3, #8]
}
 80002ee:	4618      	mov	r0, r3
 80002f0:	3710      	adds	r7, #16
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bd80      	pop	{r7, pc}
 80002f6:	bf00      	nop

080002f8 <block_request_readable>:
 *  5. Get transfer_len
 *  6. Read data from buffer
 */
int block_request_readable (struct block *block, struct file_request *request,
                            struct event_monitor *monitor)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b090      	sub	sp, #64	; 0x40
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	60f8      	str	r0, [r7, #12]
 8000300:	60b9      	str	r1, [r7, #8]
 8000302:	607a      	str	r2, [r7, #4]
    struct task_control_block *task = request->task;
 8000304:	68bb      	ldr	r3, [r7, #8]
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	63bb      	str	r3, [r7, #56]	; 0x38

    if (block->request_pid == 0) {
 800030a:	68fb      	ldr	r3, [r7, #12]
 800030c:	695b      	ldr	r3, [r3, #20]
 800030e:	2b00      	cmp	r3, #0
 8000310:	d13d      	bne.n	800038e <block_request_readable+0x96>
        /* try to send request */
        struct file *driver = block->driver_file;
 8000312:	68fb      	ldr	r3, [r7, #12]
 8000314:	68db      	ldr	r3, [r3, #12]
 8000316:	637b      	str	r3, [r7, #52]	; 0x34
        int size = request->size;
 8000318:	68bb      	ldr	r3, [r7, #8]
 800031a:	689b      	ldr	r3, [r3, #8]
 800031c:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (size > BLOCK_BUF)
 800031e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000320:	2b40      	cmp	r3, #64	; 0x40
 8000322:	dd01      	ble.n	8000328 <block_request_readable+0x30>
            size = BLOCK_BUF;
 8000324:	2340      	movs	r3, #64	; 0x40
 8000326:	63fb      	str	r3, [r7, #60]	; 0x3c

        struct block_request block_request = {
 8000328:	2301      	movs	r3, #1
 800032a:	623b      	str	r3, [r7, #32]
            .cmd = BLOCK_CMD_READ,
            .task = task->pid,
 800032c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800032e:	685b      	ldr	r3, [r3, #4]
        struct file *driver = block->driver_file;
        int size = request->size;
        if (size > BLOCK_BUF)
            size = BLOCK_BUF;

        struct block_request block_request = {
 8000330:	627b      	str	r3, [r7, #36]	; 0x24
            .cmd = BLOCK_CMD_READ,
            .task = task->pid,
            .fd = block->file.fd,
 8000332:	68fb      	ldr	r3, [r7, #12]
 8000334:	681b      	ldr	r3, [r3, #0]
        struct file *driver = block->driver_file;
        int size = request->size;
        if (size > BLOCK_BUF)
            size = BLOCK_BUF;

        struct block_request block_request = {
 8000336:	62bb      	str	r3, [r7, #40]	; 0x28
 8000338:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800033a:	62fb      	str	r3, [r7, #44]	; 0x2c
            .cmd = BLOCK_CMD_READ,
            .task = task->pid,
            .fd = block->file.fd,
            .size = size,
            .pos = block->pos
 800033c:	68fb      	ldr	r3, [r7, #12]
 800033e:	69db      	ldr	r3, [r3, #28]
        struct file *driver = block->driver_file;
        int size = request->size;
        if (size > BLOCK_BUF)
            size = BLOCK_BUF;

        struct block_request block_request = {
 8000340:	633b      	str	r3, [r7, #48]	; 0x30
            .fd = block->file.fd,
            .size = size,
            .pos = block->pos
        };

        struct file_request file_request = {
 8000342:	f107 0310 	add.w	r3, r7, #16
 8000346:	2200      	movs	r2, #0
 8000348:	601a      	str	r2, [r3, #0]
 800034a:	3304      	adds	r3, #4
 800034c:	2200      	movs	r2, #0
 800034e:	601a      	str	r2, [r3, #0]
 8000350:	3304      	adds	r3, #4
 8000352:	2200      	movs	r2, #0
 8000354:	601a      	str	r2, [r3, #0]
 8000356:	3304      	adds	r3, #4
 8000358:	2200      	movs	r2, #0
 800035a:	601a      	str	r2, [r3, #0]
 800035c:	3304      	adds	r3, #4
 800035e:	f107 0320 	add.w	r3, r7, #32
 8000362:	617b      	str	r3, [r7, #20]
 8000364:	2314      	movs	r3, #20
 8000366:	61bb      	str	r3, [r7, #24]
            .task = NULL,
            .buf = (char *)&block_request,
            .size = sizeof(block_request),
        };
        if (file_write(driver, &file_request, monitor) == 1) {
 8000368:	f107 0310 	add.w	r3, r7, #16
 800036c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800036e:	4619      	mov	r1, r3
 8000370:	687a      	ldr	r2, [r7, #4]
 8000372:	f000 fe5b 	bl	800102c <file_write>
 8000376:	4603      	mov	r3, r0
 8000378:	2b01      	cmp	r3, #1
 800037a:	d107      	bne.n	800038c <block_request_readable+0x94>
            block->request_pid = task->pid;
 800037c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800037e:	685a      	ldr	r2, [r3, #4]
 8000380:	68fb      	ldr	r3, [r7, #12]
 8000382:	615a      	str	r2, [r3, #20]
            block->buzy = 1;
 8000384:	68fb      	ldr	r3, [r7, #12]
 8000386:	2201      	movs	r2, #1
 8000388:	619a      	str	r2, [r3, #24]
 800038a:	e00c      	b.n	80003a6 <block_request_readable+0xae>
 800038c:	e00b      	b.n	80003a6 <block_request_readable+0xae>
        }
    }
    else if (block->request_pid == task->pid && !block->buzy) {
 800038e:	68fb      	ldr	r3, [r7, #12]
 8000390:	695a      	ldr	r2, [r3, #20]
 8000392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000394:	685b      	ldr	r3, [r3, #4]
 8000396:	429a      	cmp	r2, r3
 8000398:	d105      	bne.n	80003a6 <block_request_readable+0xae>
 800039a:	68fb      	ldr	r3, [r7, #12]
 800039c:	699b      	ldr	r3, [r3, #24]
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d101      	bne.n	80003a6 <block_request_readable+0xae>
        return FILE_ACCESS_ACCEPT;
 80003a2:	2301      	movs	r3, #1
 80003a4:	e007      	b.n	80003b6 <block_request_readable+0xbe>
    }

	event_monitor_block(monitor, block->event, task);
 80003a6:	68fb      	ldr	r3, [r7, #12]
 80003a8:	691b      	ldr	r3, [r3, #16]
 80003aa:	6878      	ldr	r0, [r7, #4]
 80003ac:	4619      	mov	r1, r3
 80003ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80003b0:	f000 fb34 	bl	8000a1c <event_monitor_block>
    return FILE_ACCESS_BLOCK;
 80003b4:	2300      	movs	r3, #0
}
 80003b6:	4618      	mov	r0, r3
 80003b8:	3740      	adds	r7, #64	; 0x40
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bd80      	pop	{r7, pc}
 80003be:	bf00      	nop

080003c0 <block_request_writable>:
 *  6. Driver write empty data to buffer
 *  7. Get transfer_len
 */
int block_request_writable (struct block *block, struct file_request *request,
                            struct event_monitor *monitor)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b090      	sub	sp, #64	; 0x40
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	60f8      	str	r0, [r7, #12]
 80003c8:	60b9      	str	r1, [r7, #8]
 80003ca:	607a      	str	r2, [r7, #4]
    struct task_control_block *task = request->task;
 80003cc:	68bb      	ldr	r3, [r7, #8]
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	63bb      	str	r3, [r7, #56]	; 0x38

    if (block->request_pid == 0) {
 80003d2:	68fb      	ldr	r3, [r7, #12]
 80003d4:	695b      	ldr	r3, [r3, #20]
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d148      	bne.n	800046c <block_request_writable+0xac>
        /* try to send request */
        struct file *driver = block->driver_file;
 80003da:	68fb      	ldr	r3, [r7, #12]
 80003dc:	68db      	ldr	r3, [r3, #12]
 80003de:	637b      	str	r3, [r7, #52]	; 0x34
        int size = request->size;
 80003e0:	68bb      	ldr	r3, [r7, #8]
 80003e2:	689b      	ldr	r3, [r3, #8]
 80003e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (size > BLOCK_BUF)
 80003e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80003e8:	2b40      	cmp	r3, #64	; 0x40
 80003ea:	dd01      	ble.n	80003f0 <block_request_writable+0x30>
            size = BLOCK_BUF;
 80003ec:	2340      	movs	r3, #64	; 0x40
 80003ee:	63fb      	str	r3, [r7, #60]	; 0x3c

        struct block_request block_request = {
 80003f0:	2302      	movs	r3, #2
 80003f2:	623b      	str	r3, [r7, #32]
            .cmd = BLOCK_CMD_WRITE,
            .task = task->pid,
 80003f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80003f6:	685b      	ldr	r3, [r3, #4]
        struct file *driver = block->driver_file;
        int size = request->size;
        if (size > BLOCK_BUF)
            size = BLOCK_BUF;

        struct block_request block_request = {
 80003f8:	627b      	str	r3, [r7, #36]	; 0x24
            .cmd = BLOCK_CMD_WRITE,
            .task = task->pid,
            .fd = block->file.fd,
 80003fa:	68fb      	ldr	r3, [r7, #12]
 80003fc:	681b      	ldr	r3, [r3, #0]
        struct file *driver = block->driver_file;
        int size = request->size;
        if (size > BLOCK_BUF)
            size = BLOCK_BUF;

        struct block_request block_request = {
 80003fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8000400:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000402:	62fb      	str	r3, [r7, #44]	; 0x2c
            .cmd = BLOCK_CMD_WRITE,
            .task = task->pid,
            .fd = block->file.fd,
            .size = size,
            .pos = block->pos
 8000404:	68fb      	ldr	r3, [r7, #12]
 8000406:	69db      	ldr	r3, [r3, #28]
        struct file *driver = block->driver_file;
        int size = request->size;
        if (size > BLOCK_BUF)
            size = BLOCK_BUF;

        struct block_request block_request = {
 8000408:	633b      	str	r3, [r7, #48]	; 0x30
            .fd = block->file.fd,
            .size = size,
            .pos = block->pos
        };

        struct file_request file_request = {
 800040a:	f107 0310 	add.w	r3, r7, #16
 800040e:	2200      	movs	r2, #0
 8000410:	601a      	str	r2, [r3, #0]
 8000412:	3304      	adds	r3, #4
 8000414:	2200      	movs	r2, #0
 8000416:	601a      	str	r2, [r3, #0]
 8000418:	3304      	adds	r3, #4
 800041a:	2200      	movs	r2, #0
 800041c:	601a      	str	r2, [r3, #0]
 800041e:	3304      	adds	r3, #4
 8000420:	2200      	movs	r2, #0
 8000422:	601a      	str	r2, [r3, #0]
 8000424:	3304      	adds	r3, #4
 8000426:	f107 0320 	add.w	r3, r7, #32
 800042a:	617b      	str	r3, [r7, #20]
 800042c:	2314      	movs	r3, #20
 800042e:	61bb      	str	r3, [r7, #24]
            .task = NULL,
            .buf = (char *)&block_request,
            .size = sizeof(block_request),
        };

        if (file_write(driver, &file_request, monitor) == 1) {
 8000430:	f107 0310 	add.w	r3, r7, #16
 8000434:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000436:	4619      	mov	r1, r3
 8000438:	687a      	ldr	r2, [r7, #4]
 800043a:	f000 fdf7 	bl	800102c <file_write>
 800043e:	4603      	mov	r3, r0
 8000440:	2b01      	cmp	r3, #1
 8000442:	d112      	bne.n	800046a <block_request_writable+0xaa>

            memcpy(block->buf, request->buf, size);
 8000444:	68fb      	ldr	r3, [r7, #12]
 8000446:	f103 0120 	add.w	r1, r3, #32
 800044a:	68bb      	ldr	r3, [r7, #8]
 800044c:	685a      	ldr	r2, [r3, #4]
 800044e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000450:	4608      	mov	r0, r1
 8000452:	4611      	mov	r1, r2
 8000454:	461a      	mov	r2, r3
 8000456:	f017 fd4b 	bl	8017ef0 <memcpy>

            block->request_pid = task->pid;
 800045a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800045c:	685a      	ldr	r2, [r3, #4]
 800045e:	68fb      	ldr	r3, [r7, #12]
 8000460:	615a      	str	r2, [r3, #20]
            block->buzy = 1;
 8000462:	68fb      	ldr	r3, [r7, #12]
 8000464:	2201      	movs	r2, #1
 8000466:	619a      	str	r2, [r3, #24]
 8000468:	e00c      	b.n	8000484 <block_request_writable+0xc4>
 800046a:	e00b      	b.n	8000484 <block_request_writable+0xc4>
        }
    }
    else if (block->request_pid == task->pid && !block->buzy) {
 800046c:	68fb      	ldr	r3, [r7, #12]
 800046e:	695a      	ldr	r2, [r3, #20]
 8000470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000472:	685b      	ldr	r3, [r3, #4]
 8000474:	429a      	cmp	r2, r3
 8000476:	d105      	bne.n	8000484 <block_request_writable+0xc4>
 8000478:	68fb      	ldr	r3, [r7, #12]
 800047a:	699b      	ldr	r3, [r3, #24]
 800047c:	2b00      	cmp	r3, #0
 800047e:	d101      	bne.n	8000484 <block_request_writable+0xc4>
        return FILE_ACCESS_ACCEPT;
 8000480:	2301      	movs	r3, #1
 8000482:	e007      	b.n	8000494 <block_request_writable+0xd4>
    }

	event_monitor_block(monitor, block->event, task);
 8000484:	68fb      	ldr	r3, [r7, #12]
 8000486:	691b      	ldr	r3, [r3, #16]
 8000488:	6878      	ldr	r0, [r7, #4]
 800048a:	4619      	mov	r1, r3
 800048c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800048e:	f000 fac5 	bl	8000a1c <event_monitor_block>
    return FILE_ACCESS_BLOCK;
 8000492:	2300      	movs	r3, #0
}
 8000494:	4618      	mov	r0, r3
 8000496:	3740      	adds	r7, #64	; 0x40
 8000498:	46bd      	mov	sp, r7
 800049a:	bd80      	pop	{r7, pc}

0800049c <block_request_lseekable>:

int block_request_lseekable (struct block *block, struct file_request *request,
                             struct event_monitor *monitor)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b092      	sub	sp, #72	; 0x48
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	60f8      	str	r0, [r7, #12]
 80004a4:	60b9      	str	r1, [r7, #8]
 80004a6:	607a      	str	r2, [r7, #4]
    struct task_control_block *task = request->task;
 80004a8:	68bb      	ldr	r3, [r7, #8]
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	643b      	str	r3, [r7, #64]	; 0x40

    if (block->request_pid == 0) {
 80004ae:	68fb      	ldr	r3, [r7, #12]
 80004b0:	695b      	ldr	r3, [r3, #20]
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d153      	bne.n	800055e <block_request_lseekable+0xc2>
        /* try to send request */
        struct file *driver = block->driver_file;
 80004b6:	68fb      	ldr	r3, [r7, #12]
 80004b8:	68db      	ldr	r3, [r3, #12]
 80004ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        int size = request->size;
 80004bc:	68bb      	ldr	r3, [r7, #8]
 80004be:	689b      	ldr	r3, [r3, #8]
 80004c0:	63bb      	str	r3, [r7, #56]	; 0x38
        if (size > BLOCK_BUF)
 80004c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80004c4:	2b40      	cmp	r3, #64	; 0x40
 80004c6:	dd01      	ble.n	80004cc <block_request_lseekable+0x30>
            size = BLOCK_BUF;
 80004c8:	2340      	movs	r3, #64	; 0x40
 80004ca:	63bb      	str	r3, [r7, #56]	; 0x38

        int pos;
        switch(request->whence) {
 80004cc:	68bb      	ldr	r3, [r7, #8]
 80004ce:	68db      	ldr	r3, [r3, #12]
 80004d0:	2b02      	cmp	r3, #2
 80004d2:	d006      	beq.n	80004e2 <block_request_lseekable+0x46>
 80004d4:	2b03      	cmp	r3, #3
 80004d6:	d008      	beq.n	80004ea <block_request_lseekable+0x4e>
 80004d8:	2b01      	cmp	r3, #1
 80004da:	d10a      	bne.n	80004f2 <block_request_lseekable+0x56>
            case SEEK_SET:
                pos = 0;
 80004dc:	2300      	movs	r3, #0
 80004de:	647b      	str	r3, [r7, #68]	; 0x44
                break;
 80004e0:	e00a      	b.n	80004f8 <block_request_lseekable+0x5c>
            case SEEK_CUR:
                pos = block->pos;
 80004e2:	68fb      	ldr	r3, [r7, #12]
 80004e4:	69db      	ldr	r3, [r3, #28]
 80004e6:	647b      	str	r3, [r7, #68]	; 0x44
                break;
 80004e8:	e006      	b.n	80004f8 <block_request_lseekable+0x5c>
            case SEEK_END:
                pos = -1;
 80004ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80004ee:	647b      	str	r3, [r7, #68]	; 0x44
                break;
 80004f0:	e002      	b.n	80004f8 <block_request_lseekable+0x5c>
            default:
                return FILE_ACCESS_ERROR;
 80004f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80004f6:	e046      	b.n	8000586 <block_request_lseekable+0xea>
        }

        struct block_request block_request = {
 80004f8:	2303      	movs	r3, #3
 80004fa:	627b      	str	r3, [r7, #36]	; 0x24
            .cmd = BLOCK_CMD_SEEK,
            .task = task->pid,
 80004fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80004fe:	685b      	ldr	r3, [r3, #4]
                break;
            default:
                return FILE_ACCESS_ERROR;
        }

        struct block_request block_request = {
 8000500:	62bb      	str	r3, [r7, #40]	; 0x28
            .cmd = BLOCK_CMD_SEEK,
            .task = task->pid,
            .fd = block->file.fd,
 8000502:	68fb      	ldr	r3, [r7, #12]
 8000504:	681b      	ldr	r3, [r3, #0]
                break;
            default:
                return FILE_ACCESS_ERROR;
        }

        struct block_request block_request = {
 8000506:	62fb      	str	r3, [r7, #44]	; 0x2c
            .cmd = BLOCK_CMD_SEEK,
            .task = task->pid,
            .fd = block->file.fd,
            .size = request->size,
 8000508:	68bb      	ldr	r3, [r7, #8]
 800050a:	689b      	ldr	r3, [r3, #8]
                break;
            default:
                return FILE_ACCESS_ERROR;
        }

        struct block_request block_request = {
 800050c:	633b      	str	r3, [r7, #48]	; 0x30
 800050e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000510:	637b      	str	r3, [r7, #52]	; 0x34
            .fd = block->file.fd,
            .size = request->size,
            .pos = pos,
        };

        struct file_request file_request = {
 8000512:	f107 0314 	add.w	r3, r7, #20
 8000516:	2200      	movs	r2, #0
 8000518:	601a      	str	r2, [r3, #0]
 800051a:	3304      	adds	r3, #4
 800051c:	2200      	movs	r2, #0
 800051e:	601a      	str	r2, [r3, #0]
 8000520:	3304      	adds	r3, #4
 8000522:	2200      	movs	r2, #0
 8000524:	601a      	str	r2, [r3, #0]
 8000526:	3304      	adds	r3, #4
 8000528:	2200      	movs	r2, #0
 800052a:	601a      	str	r2, [r3, #0]
 800052c:	3304      	adds	r3, #4
 800052e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000532:	61bb      	str	r3, [r7, #24]
 8000534:	2314      	movs	r3, #20
 8000536:	61fb      	str	r3, [r7, #28]
            .task = NULL,
            .buf = (char *)&block_request,
            .size = sizeof(block_request),
        };

        if (file_write(driver, &file_request, monitor) == 1) {
 8000538:	f107 0314 	add.w	r3, r7, #20
 800053c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800053e:	4619      	mov	r1, r3
 8000540:	687a      	ldr	r2, [r7, #4]
 8000542:	f000 fd73 	bl	800102c <file_write>
 8000546:	4603      	mov	r3, r0
 8000548:	2b01      	cmp	r3, #1
 800054a:	d107      	bne.n	800055c <block_request_lseekable+0xc0>
            block->request_pid = task->pid;
 800054c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800054e:	685a      	ldr	r2, [r3, #4]
 8000550:	68fb      	ldr	r3, [r7, #12]
 8000552:	615a      	str	r2, [r3, #20]
            block->buzy = 1;
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	2201      	movs	r2, #1
 8000558:	619a      	str	r2, [r3, #24]
 800055a:	e00c      	b.n	8000576 <block_request_lseekable+0xda>
 800055c:	e00b      	b.n	8000576 <block_request_lseekable+0xda>
        }
    }
    else if (block->request_pid == task->pid && !block->buzy) {
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	695a      	ldr	r2, [r3, #20]
 8000562:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000564:	685b      	ldr	r3, [r3, #4]
 8000566:	429a      	cmp	r2, r3
 8000568:	d105      	bne.n	8000576 <block_request_lseekable+0xda>
 800056a:	68fb      	ldr	r3, [r7, #12]
 800056c:	699b      	ldr	r3, [r3, #24]
 800056e:	2b00      	cmp	r3, #0
 8000570:	d101      	bne.n	8000576 <block_request_lseekable+0xda>
        return FILE_ACCESS_ACCEPT;
 8000572:	2301      	movs	r3, #1
 8000574:	e007      	b.n	8000586 <block_request_lseekable+0xea>
    }

	event_monitor_block(monitor, block->event, task);
 8000576:	68fb      	ldr	r3, [r7, #12]
 8000578:	691b      	ldr	r3, [r3, #16]
 800057a:	6878      	ldr	r0, [r7, #4]
 800057c:	4619      	mov	r1, r3
 800057e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000580:	f000 fa4c 	bl	8000a1c <event_monitor_block>
    return FILE_ACCESS_BLOCK;
 8000584:	2300      	movs	r3, #0
}
 8000586:	4618      	mov	r0, r3
 8000588:	3748      	adds	r7, #72	; 0x48
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop

08000590 <block_request_read>:

int block_request_read (struct block *block, struct file_request *request,
                        struct event_monitor *monitor)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b084      	sub	sp, #16
 8000594:	af00      	add	r7, sp, #0
 8000596:	60f8      	str	r0, [r7, #12]
 8000598:	60b9      	str	r1, [r7, #8]
 800059a:	607a      	str	r2, [r7, #4]
    if (block->transfer_len > 0) {
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	dd12      	ble.n	80005ca <block_request_read+0x3a>
        memcpy(request->buf, block->buf, block->transfer_len);
 80005a4:	68bb      	ldr	r3, [r7, #8]
 80005a6:	6859      	ldr	r1, [r3, #4]
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	f103 0220 	add.w	r2, r3, #32
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005b2:	4608      	mov	r0, r1
 80005b4:	4611      	mov	r1, r2
 80005b6:	461a      	mov	r2, r3
 80005b8:	f017 fc9a 	bl	8017ef0 <memcpy>

        block->pos += block->transfer_len;
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	69da      	ldr	r2, [r3, #28]
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005c4:	441a      	add	r2, r3
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	61da      	str	r2, [r3, #28]
    }

    block->request_pid = 0;
 80005ca:	68fb      	ldr	r3, [r7, #12]
 80005cc:	2200      	movs	r2, #0
 80005ce:	615a      	str	r2, [r3, #20]
    return block->transfer_len;
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
}
 80005d4:	4618      	mov	r0, r3
 80005d6:	3710      	adds	r7, #16
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}

080005dc <block_request_write>:

int block_request_write (struct block *block, struct file_request *request,
                         struct event_monitor *monitor)
{
 80005dc:	b480      	push	{r7}
 80005de:	b085      	sub	sp, #20
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	60f8      	str	r0, [r7, #12]
 80005e4:	60b9      	str	r1, [r7, #8]
 80005e6:	607a      	str	r2, [r7, #4]
    if (block->transfer_len > 0) {
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	dd06      	ble.n	80005fe <block_request_write+0x22>
        block->pos += block->transfer_len;
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	69da      	ldr	r2, [r3, #28]
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005f8:	441a      	add	r2, r3
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	61da      	str	r2, [r3, #28]
    }

    block->request_pid = 0;
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	2200      	movs	r2, #0
 8000602:	615a      	str	r2, [r3, #20]
    return block->transfer_len;
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	6e1b      	ldr	r3, [r3, #96]	; 0x60
}
 8000608:	4618      	mov	r0, r3
 800060a:	3714      	adds	r7, #20
 800060c:	46bd      	mov	sp, r7
 800060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000612:	4770      	bx	lr

08000614 <block_request_lseek>:

int block_request_lseek (struct block *block, struct file_request *request,
                         struct event_monitor *monitor)
{
 8000614:	b480      	push	{r7}
 8000616:	b085      	sub	sp, #20
 8000618:	af00      	add	r7, sp, #0
 800061a:	60f8      	str	r0, [r7, #12]
 800061c:	60b9      	str	r1, [r7, #8]
 800061e:	607a      	str	r2, [r7, #4]
    if (block->transfer_len >= 0) {
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000624:	2b00      	cmp	r3, #0
 8000626:	db03      	blt.n	8000630 <block_request_lseek+0x1c>
        block->pos = block->transfer_len;
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	61da      	str	r2, [r3, #28]
    }

    block->request_pid = 0;
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	2200      	movs	r2, #0
 8000634:	615a      	str	r2, [r3, #20]
    return block->transfer_len;
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	6e1b      	ldr	r3, [r3, #96]	; 0x60
}
 800063a:	4618      	mov	r0, r3
 800063c:	3714      	adds	r7, #20
 800063e:	46bd      	mov	sp, r7
 8000640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop

08000648 <block_event_release>:

int block_event_release(struct event_monitor *monitor, int event,
                        struct task_control_block *task, void *data)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b086      	sub	sp, #24
 800064c:	af00      	add	r7, sp, #0
 800064e:	60f8      	str	r0, [r7, #12]
 8000650:	60b9      	str	r1, [r7, #8]
 8000652:	607a      	str	r2, [r7, #4]
 8000654:	603b      	str	r3, [r7, #0]
    struct file *file = data;
 8000656:	683b      	ldr	r3, [r7, #0]
 8000658:	617b      	str	r3, [r7, #20]
    struct file_request *request = (void*)task->stack->r0;
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000660:	613b      	str	r3, [r7, #16]

    switch (task->stack->r7) {
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	68db      	ldr	r3, [r3, #12]
 8000668:	2b04      	cmp	r3, #4
 800066a:	d004      	beq.n	8000676 <block_event_release+0x2e>
 800066c:	2b0a      	cmp	r3, #10
 800066e:	d010      	beq.n	8000692 <block_event_release+0x4a>
 8000670:	2b03      	cmp	r3, #3
 8000672:	d007      	beq.n	8000684 <block_event_release+0x3c>
 8000674:	e014      	b.n	80006a0 <block_event_release+0x58>
        case 0x04:
            return file_read(file, request, monitor);
 8000676:	6978      	ldr	r0, [r7, #20]
 8000678:	6939      	ldr	r1, [r7, #16]
 800067a:	68fa      	ldr	r2, [r7, #12]
 800067c:	f000 fc8c 	bl	8000f98 <file_read>
 8000680:	4603      	mov	r3, r0
 8000682:	e00e      	b.n	80006a2 <block_event_release+0x5a>
        case 0x03:
            return file_write(file, request, monitor);
 8000684:	6978      	ldr	r0, [r7, #20]
 8000686:	6939      	ldr	r1, [r7, #16]
 8000688:	68fa      	ldr	r2, [r7, #12]
 800068a:	f000 fccf 	bl	800102c <file_write>
 800068e:	4603      	mov	r3, r0
 8000690:	e007      	b.n	80006a2 <block_event_release+0x5a>
        case 0x0a:
            return file_lseek(file, request, monitor);
 8000692:	6978      	ldr	r0, [r7, #20]
 8000694:	6939      	ldr	r1, [r7, #16]
 8000696:	68fa      	ldr	r2, [r7, #12]
 8000698:	f000 fd6a 	bl	8001170 <file_lseek>
 800069c:	4603      	mov	r3, r0
 800069e:	e000      	b.n	80006a2 <block_event_release+0x5a>
        default:
            return 0;
 80006a0:	2300      	movs	r3, #0
    }
}
 80006a2:	4618      	mov	r0, r3
 80006a4:	3718      	adds	r7, #24
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop

080006ac <block_init>:

int block_init(int fd, int driver_pid, struct file *files[],
               struct memory_pool *memory_pool, struct event_monitor *monitor)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b086      	sub	sp, #24
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	60f8      	str	r0, [r7, #12]
 80006b4:	60b9      	str	r1, [r7, #8]
 80006b6:	607a      	str	r2, [r7, #4]
 80006b8:	603b      	str	r3, [r7, #0]
    struct block *block;

    block = memory_pool_alloc(memory_pool, sizeof(*block));
 80006ba:	6838      	ldr	r0, [r7, #0]
 80006bc:	2164      	movs	r1, #100	; 0x64
 80006be:	f002 fd85 	bl	80031cc <memory_pool_alloc>
 80006c2:	6178      	str	r0, [r7, #20]

    if (!block)
 80006c4:	697b      	ldr	r3, [r7, #20]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d102      	bne.n	80006d0 <block_init+0x24>
        return -1;
 80006ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006ce:	e02f      	b.n	8000730 <block_init+0x84>

    block->driver_pid = driver_pid;
 80006d0:	697b      	ldr	r3, [r7, #20]
 80006d2:	68ba      	ldr	r2, [r7, #8]
 80006d4:	609a      	str	r2, [r3, #8]
    block->driver_file = files[driver_pid + 3];
 80006d6:	68bb      	ldr	r3, [r7, #8]
 80006d8:	3303      	adds	r3, #3
 80006da:	009b      	lsls	r3, r3, #2
 80006dc:	687a      	ldr	r2, [r7, #4]
 80006de:	4413      	add	r3, r2
 80006e0:	681a      	ldr	r2, [r3, #0]
 80006e2:	697b      	ldr	r3, [r7, #20]
 80006e4:	60da      	str	r2, [r3, #12]
    block->request_pid = 0;
 80006e6:	697b      	ldr	r3, [r7, #20]
 80006e8:	2200      	movs	r2, #0
 80006ea:	615a      	str	r2, [r3, #20]
    block->buzy = 0;
 80006ec:	697b      	ldr	r3, [r7, #20]
 80006ee:	2200      	movs	r2, #0
 80006f0:	619a      	str	r2, [r3, #24]
    block->pos = 0;
 80006f2:	697b      	ldr	r3, [r7, #20]
 80006f4:	2200      	movs	r2, #0
 80006f6:	61da      	str	r2, [r3, #28]
	block->file.ops = &block_ops;
 80006f8:	697b      	ldr	r3, [r7, #20]
 80006fa:	4a0f      	ldr	r2, [pc, #60]	; (8000738 <block_init+0x8c>)
 80006fc:	605a      	str	r2, [r3, #4]
    block->event = event_monitor_find_free(monitor);
 80006fe:	6a38      	ldr	r0, [r7, #32]
 8000700:	f000 f93c 	bl	800097c <event_monitor_find_free>
 8000704:	4602      	mov	r2, r0
 8000706:	697b      	ldr	r3, [r7, #20]
 8000708:	611a      	str	r2, [r3, #16]
    files[fd] = &block->file;
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	009b      	lsls	r3, r3, #2
 800070e:	687a      	ldr	r2, [r7, #4]
 8000710:	4413      	add	r3, r2
 8000712:	697a      	ldr	r2, [r7, #20]
 8000714:	601a      	str	r2, [r3, #0]

    event_monitor_register(monitor, block->event, block_event_release, files[fd]);
 8000716:	697b      	ldr	r3, [r7, #20]
 8000718:	691a      	ldr	r2, [r3, #16]
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	009b      	lsls	r3, r3, #2
 800071e:	6879      	ldr	r1, [r7, #4]
 8000720:	440b      	add	r3, r1
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	6a38      	ldr	r0, [r7, #32]
 8000726:	4611      	mov	r1, r2
 8000728:	4a04      	ldr	r2, [pc, #16]	; (800073c <block_init+0x90>)
 800072a:	f000 f94d 	bl	80009c8 <event_monitor_register>

    return 0;
 800072e:	2300      	movs	r3, #0
}
 8000730:	4618      	mov	r0, r3
 8000732:	3718      	adds	r7, #24
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	20000000 	.word	0x20000000
 800073c:	08000649 	.word	0x08000649

08000740 <block_response>:

int block_response(int fd, char *buf, int len)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b086      	sub	sp, #24
 8000744:	af00      	add	r7, sp, #0
 8000746:	60f8      	str	r0, [r7, #12]
 8000748:	60b9      	str	r1, [r7, #8]
 800074a:	607a      	str	r2, [r7, #4]
    struct block_response response = {
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	613b      	str	r3, [r7, #16]
 8000750:	68bb      	ldr	r3, [r7, #8]
 8000752:	617b      	str	r3, [r7, #20]
        .transfer_len = len,
        .buf = buf
    };
    return write(fd, &response, sizeof(response));
 8000754:	f107 0310 	add.w	r3, r7, #16
 8000758:	68f8      	ldr	r0, [r7, #12]
 800075a:	4619      	mov	r1, r3
 800075c:	2208      	movs	r2, #8
 800075e:	f017 fc1d 	bl	8017f9c <write>
 8000762:	4603      	mov	r3, r0
}
 8000764:	4618      	mov	r0, r3
 8000766:	3718      	adds	r7, #24
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}

0800076c <block_readable>:

int block_readable (struct file *file, struct file_request *request,
                    struct event_monitor *monitor)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b086      	sub	sp, #24
 8000770:	af00      	add	r7, sp, #0
 8000772:	60f8      	str	r0, [r7, #12]
 8000774:	60b9      	str	r1, [r7, #8]
 8000776:	607a      	str	r2, [r7, #4]
    struct block *block = container_of(file, struct block, file);
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	617b      	str	r3, [r7, #20]
    if (block->driver_pid == request->task->pid) {
 800077c:	697b      	ldr	r3, [r7, #20]
 800077e:	689a      	ldr	r2, [r3, #8]
 8000780:	68bb      	ldr	r3, [r7, #8]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	685b      	ldr	r3, [r3, #4]
 8000786:	429a      	cmp	r2, r3
 8000788:	d106      	bne.n	8000798 <block_readable+0x2c>
        return block_driver_readable(block, request, monitor);
 800078a:	6978      	ldr	r0, [r7, #20]
 800078c:	68b9      	ldr	r1, [r7, #8]
 800078e:	687a      	ldr	r2, [r7, #4]
 8000790:	f7ff fd0c 	bl	80001ac <block_driver_readable>
 8000794:	4603      	mov	r3, r0
 8000796:	e005      	b.n	80007a4 <block_readable+0x38>
    }
    else {
        return block_request_readable(block, request, monitor);
 8000798:	6978      	ldr	r0, [r7, #20]
 800079a:	68b9      	ldr	r1, [r7, #8]
 800079c:	687a      	ldr	r2, [r7, #4]
 800079e:	f7ff fdab 	bl	80002f8 <block_request_readable>
 80007a2:	4603      	mov	r3, r0
    }
}
 80007a4:	4618      	mov	r0, r3
 80007a6:	3718      	adds	r7, #24
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}

080007ac <block_writable>:

int block_writable (struct file *file, struct file_request *request,
                    struct event_monitor *monitor)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b086      	sub	sp, #24
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	60f8      	str	r0, [r7, #12]
 80007b4:	60b9      	str	r1, [r7, #8]
 80007b6:	607a      	str	r2, [r7, #4]
    struct block *block = container_of(file, struct block, file);
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	617b      	str	r3, [r7, #20]
    if (block->driver_pid == request->task->pid) {
 80007bc:	697b      	ldr	r3, [r7, #20]
 80007be:	689a      	ldr	r2, [r3, #8]
 80007c0:	68bb      	ldr	r3, [r7, #8]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	685b      	ldr	r3, [r3, #4]
 80007c6:	429a      	cmp	r2, r3
 80007c8:	d106      	bne.n	80007d8 <block_writable+0x2c>
        return block_driver_writable(block, request, monitor);
 80007ca:	6978      	ldr	r0, [r7, #20]
 80007cc:	68b9      	ldr	r1, [r7, #8]
 80007ce:	687a      	ldr	r2, [r7, #4]
 80007d0:	f7ff fd00 	bl	80001d4 <block_driver_writable>
 80007d4:	4603      	mov	r3, r0
 80007d6:	e005      	b.n	80007e4 <block_writable+0x38>
    }
    else {
        return block_request_writable(block, request, monitor);
 80007d8:	6978      	ldr	r0, [r7, #20]
 80007da:	68b9      	ldr	r1, [r7, #8]
 80007dc:	687a      	ldr	r2, [r7, #4]
 80007de:	f7ff fdef 	bl	80003c0 <block_request_writable>
 80007e2:	4603      	mov	r3, r0
    }
}
 80007e4:	4618      	mov	r0, r3
 80007e6:	3718      	adds	r7, #24
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}

080007ec <block_read>:

int block_read (struct file *file, struct file_request *request,
                struct event_monitor *monitor)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b086      	sub	sp, #24
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	60f8      	str	r0, [r7, #12]
 80007f4:	60b9      	str	r1, [r7, #8]
 80007f6:	607a      	str	r2, [r7, #4]
    struct block *block = container_of(file, struct block, file);
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	617b      	str	r3, [r7, #20]
    if (block->driver_pid == request->task->pid) {
 80007fc:	697b      	ldr	r3, [r7, #20]
 80007fe:	689a      	ldr	r2, [r3, #8]
 8000800:	68bb      	ldr	r3, [r7, #8]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	685b      	ldr	r3, [r3, #4]
 8000806:	429a      	cmp	r2, r3
 8000808:	d106      	bne.n	8000818 <block_read+0x2c>
        return block_driver_read(block, request, monitor);
 800080a:	6978      	ldr	r0, [r7, #20]
 800080c:	68b9      	ldr	r1, [r7, #8]
 800080e:	687a      	ldr	r2, [r7, #4]
 8000810:	f7ff fd08 	bl	8000224 <block_driver_read>
 8000814:	4603      	mov	r3, r0
 8000816:	e005      	b.n	8000824 <block_read+0x38>
    }
    else {
        return block_request_read(block, request, monitor);
 8000818:	6978      	ldr	r0, [r7, #20]
 800081a:	68b9      	ldr	r1, [r7, #8]
 800081c:	687a      	ldr	r2, [r7, #4]
 800081e:	f7ff feb7 	bl	8000590 <block_request_read>
 8000822:	4603      	mov	r3, r0
    }
}
 8000824:	4618      	mov	r0, r3
 8000826:	3718      	adds	r7, #24
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}

0800082c <block_write>:

int block_write (struct file *file, struct file_request *request,
                 struct event_monitor *monitor)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b086      	sub	sp, #24
 8000830:	af00      	add	r7, sp, #0
 8000832:	60f8      	str	r0, [r7, #12]
 8000834:	60b9      	str	r1, [r7, #8]
 8000836:	607a      	str	r2, [r7, #4]
    struct block *block = container_of(file, struct block, file);
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	617b      	str	r3, [r7, #20]
    if (block->driver_pid == request->task->pid) {
 800083c:	697b      	ldr	r3, [r7, #20]
 800083e:	689a      	ldr	r2, [r3, #8]
 8000840:	68bb      	ldr	r3, [r7, #8]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	685b      	ldr	r3, [r3, #4]
 8000846:	429a      	cmp	r2, r3
 8000848:	d106      	bne.n	8000858 <block_write+0x2c>
        return block_driver_write(block, request, monitor);
 800084a:	6978      	ldr	r0, [r7, #20]
 800084c:	68b9      	ldr	r1, [r7, #8]
 800084e:	687a      	ldr	r2, [r7, #4]
 8000850:	f7ff fd06 	bl	8000260 <block_driver_write>
 8000854:	4603      	mov	r3, r0
 8000856:	e005      	b.n	8000864 <block_write+0x38>
    }
    else {
        return block_request_write(block, request, monitor);
 8000858:	6978      	ldr	r0, [r7, #20]
 800085a:	68b9      	ldr	r1, [r7, #8]
 800085c:	687a      	ldr	r2, [r7, #4]
 800085e:	f7ff febd 	bl	80005dc <block_request_write>
 8000862:	4603      	mov	r3, r0
    }
}
 8000864:	4618      	mov	r0, r3
 8000866:	3718      	adds	r7, #24
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}

0800086c <block_lseekable>:

int block_lseekable (struct file *file, struct file_request *request,
                     struct event_monitor *monitor)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b086      	sub	sp, #24
 8000870:	af00      	add	r7, sp, #0
 8000872:	60f8      	str	r0, [r7, #12]
 8000874:	60b9      	str	r1, [r7, #8]
 8000876:	607a      	str	r2, [r7, #4]
    struct block *block = container_of(file, struct block, file);
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	617b      	str	r3, [r7, #20]
    if (block->driver_pid == request->task->pid) {
 800087c:	697b      	ldr	r3, [r7, #20]
 800087e:	689a      	ldr	r2, [r3, #8]
 8000880:	68bb      	ldr	r3, [r7, #8]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	685b      	ldr	r3, [r3, #4]
 8000886:	429a      	cmp	r2, r3
 8000888:	d106      	bne.n	8000898 <block_lseekable+0x2c>
        return block_driver_lseekable(block, request, monitor);
 800088a:	6978      	ldr	r0, [r7, #20]
 800088c:	68b9      	ldr	r1, [r7, #8]
 800088e:	687a      	ldr	r2, [r7, #4]
 8000890:	f7ff fcb4 	bl	80001fc <block_driver_lseekable>
 8000894:	4603      	mov	r3, r0
 8000896:	e005      	b.n	80008a4 <block_lseekable+0x38>
    }
    else {
        return block_request_lseekable(block, request, monitor);
 8000898:	6978      	ldr	r0, [r7, #20]
 800089a:	68b9      	ldr	r1, [r7, #8]
 800089c:	687a      	ldr	r2, [r7, #4]
 800089e:	f7ff fdfd 	bl	800049c <block_request_lseekable>
 80008a2:	4603      	mov	r3, r0
    }
}
 80008a4:	4618      	mov	r0, r3
 80008a6:	3718      	adds	r7, #24
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}

080008ac <block_lseek>:

int block_lseek (struct file *file, struct file_request *request,
                 struct event_monitor *monitor)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b086      	sub	sp, #24
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	60f8      	str	r0, [r7, #12]
 80008b4:	60b9      	str	r1, [r7, #8]
 80008b6:	607a      	str	r2, [r7, #4]
    struct block *block = container_of(file, struct block, file);
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	617b      	str	r3, [r7, #20]
    if (block->driver_pid == request->task->pid) {
 80008bc:	697b      	ldr	r3, [r7, #20]
 80008be:	689a      	ldr	r2, [r3, #8]
 80008c0:	68bb      	ldr	r3, [r7, #8]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	685b      	ldr	r3, [r3, #4]
 80008c6:	429a      	cmp	r2, r3
 80008c8:	d106      	bne.n	80008d8 <block_lseek+0x2c>
        return block_driver_lseek(block, request, monitor);
 80008ca:	6978      	ldr	r0, [r7, #20]
 80008cc:	68b9      	ldr	r1, [r7, #8]
 80008ce:	687a      	ldr	r2, [r7, #4]
 80008d0:	f7ff fcf8 	bl	80002c4 <block_driver_lseek>
 80008d4:	4603      	mov	r3, r0
 80008d6:	e005      	b.n	80008e4 <block_lseek+0x38>
    }
    else {
        return block_request_lseek(block, request, monitor);
 80008d8:	6978      	ldr	r0, [r7, #20]
 80008da:	68b9      	ldr	r1, [r7, #8]
 80008dc:	687a      	ldr	r2, [r7, #4]
 80008de:	f7ff fe99 	bl	8000614 <block_request_lseek>
 80008e2:	4603      	mov	r3, r0
    }
}
 80008e4:	4618      	mov	r0, r3
 80008e6:	3718      	adds	r7, #24
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}

080008ec <event_monitor_init>:


void event_monitor_init(struct event_monitor *monitor,
                        struct event *events,
                        struct list *ready_list)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b086      	sub	sp, #24
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	60f8      	str	r0, [r7, #12]
 80008f4:	60b9      	str	r1, [r7, #8]
 80008f6:	607a      	str	r2, [r7, #4]
    int i;

    monitor->events = events;
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	68ba      	ldr	r2, [r7, #8]
 80008fc:	601a      	str	r2, [r3, #0]
    monitor->ready_list = ready_list;
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	687a      	ldr	r2, [r7, #4]
 8000902:	605a      	str	r2, [r3, #4]

    for (i = 0; i < EVENT_LIMIT; i++) {
 8000904:	2300      	movs	r3, #0
 8000906:	617b      	str	r3, [r7, #20]
 8000908:	e031      	b.n	800096e <event_monitor_init+0x82>
        events[i].registerd = 0;
 800090a:	697a      	ldr	r2, [r7, #20]
 800090c:	4613      	mov	r3, r2
 800090e:	005b      	lsls	r3, r3, #1
 8000910:	4413      	add	r3, r2
 8000912:	00db      	lsls	r3, r3, #3
 8000914:	68ba      	ldr	r2, [r7, #8]
 8000916:	4413      	add	r3, r2
 8000918:	2200      	movs	r2, #0
 800091a:	601a      	str	r2, [r3, #0]
        events[i].pending = 0;
 800091c:	697a      	ldr	r2, [r7, #20]
 800091e:	4613      	mov	r3, r2
 8000920:	005b      	lsls	r3, r3, #1
 8000922:	4413      	add	r3, r2
 8000924:	00db      	lsls	r3, r3, #3
 8000926:	68ba      	ldr	r2, [r7, #8]
 8000928:	4413      	add	r3, r2
 800092a:	2200      	movs	r2, #0
 800092c:	605a      	str	r2, [r3, #4]
        events[i].handler = 0;
 800092e:	697a      	ldr	r2, [r7, #20]
 8000930:	4613      	mov	r3, r2
 8000932:	005b      	lsls	r3, r3, #1
 8000934:	4413      	add	r3, r2
 8000936:	00db      	lsls	r3, r3, #3
 8000938:	68ba      	ldr	r2, [r7, #8]
 800093a:	4413      	add	r3, r2
 800093c:	2200      	movs	r2, #0
 800093e:	609a      	str	r2, [r3, #8]
        events[i].data = 0;
 8000940:	697a      	ldr	r2, [r7, #20]
 8000942:	4613      	mov	r3, r2
 8000944:	005b      	lsls	r3, r3, #1
 8000946:	4413      	add	r3, r2
 8000948:	00db      	lsls	r3, r3, #3
 800094a:	68ba      	ldr	r2, [r7, #8]
 800094c:	4413      	add	r3, r2
 800094e:	2200      	movs	r2, #0
 8000950:	60da      	str	r2, [r3, #12]
        list_init(&events[i].list);
 8000952:	697a      	ldr	r2, [r7, #20]
 8000954:	4613      	mov	r3, r2
 8000956:	005b      	lsls	r3, r3, #1
 8000958:	4413      	add	r3, r2
 800095a:	00db      	lsls	r3, r3, #3
 800095c:	68ba      	ldr	r2, [r7, #8]
 800095e:	4413      	add	r3, r2
 8000960:	3310      	adds	r3, #16
 8000962:	4618      	mov	r0, r3
 8000964:	f002 fb80 	bl	8003068 <list_init>
    int i;

    monitor->events = events;
    monitor->ready_list = ready_list;

    for (i = 0; i < EVENT_LIMIT; i++) {
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	3301      	adds	r3, #1
 800096c:	617b      	str	r3, [r7, #20]
 800096e:	697b      	ldr	r3, [r7, #20]
 8000970:	2baa      	cmp	r3, #170	; 0xaa
 8000972:	ddca      	ble.n	800090a <event_monitor_init+0x1e>
        events[i].pending = 0;
        events[i].handler = 0;
        events[i].data = 0;
        list_init(&events[i].list);
    }
}
 8000974:	3718      	adds	r7, #24
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop

0800097c <event_monitor_find_free>:

int event_monitor_find_free(struct event_monitor *monitor)
{
 800097c:	b480      	push	{r7}
 800097e:	b085      	sub	sp, #20
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
    int i;
    for (i = 0; i < EVENT_LIMIT && monitor->events[i].registerd; i++);
 8000984:	2300      	movs	r3, #0
 8000986:	60fb      	str	r3, [r7, #12]
 8000988:	e002      	b.n	8000990 <event_monitor_find_free+0x14>
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	3301      	adds	r3, #1
 800098e:	60fb      	str	r3, [r7, #12]
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	2baa      	cmp	r3, #170	; 0xaa
 8000994:	dc0a      	bgt.n	80009ac <event_monitor_find_free+0x30>
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	6819      	ldr	r1, [r3, #0]
 800099a:	68fa      	ldr	r2, [r7, #12]
 800099c:	4613      	mov	r3, r2
 800099e:	005b      	lsls	r3, r3, #1
 80009a0:	4413      	add	r3, r2
 80009a2:	00db      	lsls	r3, r3, #3
 80009a4:	440b      	add	r3, r1
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d1ee      	bne.n	800098a <event_monitor_find_free+0xe>

    if (i == EVENT_LIMIT)
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	2bab      	cmp	r3, #171	; 0xab
 80009b0:	d102      	bne.n	80009b8 <event_monitor_find_free+0x3c>
        return -1;
 80009b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80009b6:	e000      	b.n	80009ba <event_monitor_find_free+0x3e>

    return i;
 80009b8:	68fb      	ldr	r3, [r7, #12]
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	3714      	adds	r7, #20
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop

080009c8 <event_monitor_register>:

void event_monitor_register(struct event_monitor *monitor, int event,
                            event_monitor_handler handler, void *data)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b085      	sub	sp, #20
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	60f8      	str	r0, [r7, #12]
 80009d0:	60b9      	str	r1, [r7, #8]
 80009d2:	607a      	str	r2, [r7, #4]
 80009d4:	603b      	str	r3, [r7, #0]
    monitor->events[event].registerd = 1;
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	6819      	ldr	r1, [r3, #0]
 80009da:	68ba      	ldr	r2, [r7, #8]
 80009dc:	4613      	mov	r3, r2
 80009de:	005b      	lsls	r3, r3, #1
 80009e0:	4413      	add	r3, r2
 80009e2:	00db      	lsls	r3, r3, #3
 80009e4:	440b      	add	r3, r1
 80009e6:	2201      	movs	r2, #1
 80009e8:	601a      	str	r2, [r3, #0]
    monitor->events[event].handler = handler;
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	6819      	ldr	r1, [r3, #0]
 80009ee:	68ba      	ldr	r2, [r7, #8]
 80009f0:	4613      	mov	r3, r2
 80009f2:	005b      	lsls	r3, r3, #1
 80009f4:	4413      	add	r3, r2
 80009f6:	00db      	lsls	r3, r3, #3
 80009f8:	440b      	add	r3, r1
 80009fa:	687a      	ldr	r2, [r7, #4]
 80009fc:	609a      	str	r2, [r3, #8]
    monitor->events[event].data = data;
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	6819      	ldr	r1, [r3, #0]
 8000a02:	68ba      	ldr	r2, [r7, #8]
 8000a04:	4613      	mov	r3, r2
 8000a06:	005b      	lsls	r3, r3, #1
 8000a08:	4413      	add	r3, r2
 8000a0a:	00db      	lsls	r3, r3, #3
 8000a0c:	440b      	add	r3, r1
 8000a0e:	683a      	ldr	r2, [r7, #0]
 8000a10:	60da      	str	r2, [r3, #12]
}
 8000a12:	3714      	adds	r7, #20
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr

08000a1c <event_monitor_block>:

void event_monitor_block(struct event_monitor *monitor, int event,
                         struct task_control_block *task)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b084      	sub	sp, #16
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	60f8      	str	r0, [r7, #12]
 8000a24:	60b9      	str	r1, [r7, #8]
 8000a26:	607a      	str	r2, [r7, #4]
    if (task->status == TASK_READY)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	689b      	ldr	r3, [r3, #8]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d10f      	bne.n	8000a50 <event_monitor_block+0x34>
        list_push(&monitor->events[event].list, &task->list);
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	6819      	ldr	r1, [r3, #0]
 8000a34:	68ba      	ldr	r2, [r7, #8]
 8000a36:	4613      	mov	r3, r2
 8000a38:	005b      	lsls	r3, r3, #1
 8000a3a:	4413      	add	r3, r2
 8000a3c:	00db      	lsls	r3, r3, #3
 8000a3e:	440b      	add	r3, r1
 8000a40:	f103 0210 	add.w	r2, r3, #16
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	3310      	adds	r3, #16
 8000a48:	4610      	mov	r0, r2
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	f002 fb66 	bl	800311c <list_push>
}
 8000a50:	3710      	adds	r7, #16
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop

08000a58 <event_monitor_release>:

void event_monitor_release(struct event_monitor *monitor, int event)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
 8000a60:	6039      	str	r1, [r7, #0]
    monitor->events[event].pending = 1;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	6819      	ldr	r1, [r3, #0]
 8000a66:	683a      	ldr	r2, [r7, #0]
 8000a68:	4613      	mov	r3, r2
 8000a6a:	005b      	lsls	r3, r3, #1
 8000a6c:	4413      	add	r3, r2
 8000a6e:	00db      	lsls	r3, r3, #3
 8000a70:	440b      	add	r3, r1
 8000a72:	2201      	movs	r2, #1
 8000a74:	605a      	str	r2, [r3, #4]
}
 8000a76:	370c      	adds	r7, #12
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr

08000a80 <event_monitor_serve>:

void event_monitor_serve(struct event_monitor *monitor)
{
 8000a80:	b590      	push	{r4, r7, lr}
 8000a82:	b089      	sub	sp, #36	; 0x24
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
    int i;
    for (i = 0; i < EVENT_LIMIT; i++) {
 8000a88:	2300      	movs	r3, #0
 8000a8a:	61fb      	str	r3, [r7, #28]
 8000a8c:	e04e      	b.n	8000b2c <event_monitor_serve+0xac>
        if (monitor->events[i].pending) {
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	6819      	ldr	r1, [r3, #0]
 8000a92:	69fa      	ldr	r2, [r7, #28]
 8000a94:	4613      	mov	r3, r2
 8000a96:	005b      	lsls	r3, r3, #1
 8000a98:	4413      	add	r3, r2
 8000a9a:	00db      	lsls	r3, r3, #3
 8000a9c:	440b      	add	r3, r1
 8000a9e:	685b      	ldr	r3, [r3, #4]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d040      	beq.n	8000b26 <event_monitor_serve+0xa6>
            struct event *event = &monitor->events[i];
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	6819      	ldr	r1, [r3, #0]
 8000aa8:	69fa      	ldr	r2, [r7, #28]
 8000aaa:	4613      	mov	r3, r2
 8000aac:	005b      	lsls	r3, r3, #1
 8000aae:	4413      	add	r3, r2
 8000ab0:	00db      	lsls	r3, r3, #3
 8000ab2:	440b      	add	r3, r1
 8000ab4:	613b      	str	r3, [r7, #16]
            struct task_control_block *task;
            struct list *curr, *next;

            list_for_each_safe (curr, next, &event->list) {
 8000ab6:	693b      	ldr	r3, [r7, #16]
 8000ab8:	695b      	ldr	r3, [r3, #20]
 8000aba:	61bb      	str	r3, [r7, #24]
 8000abc:	69bb      	ldr	r3, [r7, #24]
 8000abe:	685b      	ldr	r3, [r3, #4]
 8000ac0:	617b      	str	r3, [r7, #20]
 8000ac2:	e025      	b.n	8000b10 <event_monitor_serve+0x90>
                task = list_entry(curr, struct task_control_block, list);
 8000ac4:	69bb      	ldr	r3, [r7, #24]
 8000ac6:	3b10      	subs	r3, #16
 8000ac8:	60fb      	str	r3, [r7, #12]
                if (event->handler
 8000aca:	693b      	ldr	r3, [r7, #16]
 8000acc:	689b      	ldr	r3, [r3, #8]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d019      	beq.n	8000b06 <event_monitor_serve+0x86>
                        && event->handler(monitor, i, task, event->data)) {
 8000ad2:	693b      	ldr	r3, [r7, #16]
 8000ad4:	689c      	ldr	r4, [r3, #8]
 8000ad6:	693b      	ldr	r3, [r7, #16]
 8000ad8:	68db      	ldr	r3, [r3, #12]
 8000ada:	6878      	ldr	r0, [r7, #4]
 8000adc:	69f9      	ldr	r1, [r7, #28]
 8000ade:	68fa      	ldr	r2, [r7, #12]
 8000ae0:	47a0      	blx	r4
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d00e      	beq.n	8000b06 <event_monitor_serve+0x86>
                    list_push(&monitor->ready_list[task->priority], &task->list);
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	685a      	ldr	r2, [r3, #4]
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	68db      	ldr	r3, [r3, #12]
 8000af0:	00db      	lsls	r3, r3, #3
 8000af2:	441a      	add	r2, r3
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	3310      	adds	r3, #16
 8000af8:	4610      	mov	r0, r2
 8000afa:	4619      	mov	r1, r3
 8000afc:	f002 fb0e 	bl	800311c <list_push>
                    task->status = TASK_READY;
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	2200      	movs	r2, #0
 8000b04:	609a      	str	r2, [r3, #8]
        if (monitor->events[i].pending) {
            struct event *event = &monitor->events[i];
            struct task_control_block *task;
            struct list *curr, *next;

            list_for_each_safe (curr, next, &event->list) {
 8000b06:	697b      	ldr	r3, [r7, #20]
 8000b08:	61bb      	str	r3, [r7, #24]
 8000b0a:	69bb      	ldr	r3, [r7, #24]
 8000b0c:	685b      	ldr	r3, [r3, #4]
 8000b0e:	617b      	str	r3, [r7, #20]
 8000b10:	693b      	ldr	r3, [r7, #16]
 8000b12:	f103 0210 	add.w	r2, r3, #16
 8000b16:	69bb      	ldr	r3, [r7, #24]
 8000b18:	429a      	cmp	r2, r3
 8000b1a:	d1d3      	bne.n	8000ac4 <event_monitor_serve+0x44>
                    list_push(&monitor->ready_list[task->priority], &task->list);
                    task->status = TASK_READY;
                }
            }

            event->pending = 0;
 8000b1c:	693b      	ldr	r3, [r7, #16]
 8000b1e:	2200      	movs	r2, #0
 8000b20:	605a      	str	r2, [r3, #4]

            /* If someone pending events, rescan events */
            i = 0;
 8000b22:	2300      	movs	r3, #0
 8000b24:	61fb      	str	r3, [r7, #28]
}

void event_monitor_serve(struct event_monitor *monitor)
{
    int i;
    for (i = 0; i < EVENT_LIMIT; i++) {
 8000b26:	69fb      	ldr	r3, [r7, #28]
 8000b28:	3301      	adds	r3, #1
 8000b2a:	61fb      	str	r3, [r7, #28]
 8000b2c:	69fb      	ldr	r3, [r7, #28]
 8000b2e:	2baa      	cmp	r3, #170	; 0xaa
 8000b30:	ddad      	ble.n	8000a8e <event_monitor_serve+0xe>

            /* If someone pending events, rescan events */
            i = 0;
        }
    }
}
 8000b32:	3724      	adds	r7, #36	; 0x24
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd90      	pop	{r4, r7, pc}

08000b38 <mkfifo>:
	.lseekable = NULL,
	.lseek = NULL,
};

int mkfifo(const char *pathname, int mode)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
 8000b40:	6039      	str	r1, [r7, #0]
	mkfile(pathname, mode, S_IFIFO);
 8000b42:	6878      	ldr	r0, [r7, #4]
 8000b44:	6839      	ldr	r1, [r7, #0]
 8000b46:	2201      	movs	r2, #1
 8000b48:	f000 f92a 	bl	8000da0 <mkfile>
	return 0;
 8000b4c:	2300      	movs	r3, #0
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop

08000b58 <fifo_init>:

int
fifo_init(int fd, int driver_pid, struct file *files[],
          struct memory_pool *memory_pool, struct event_monitor *monitor)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b086      	sub	sp, #24
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	60f8      	str	r0, [r7, #12]
 8000b60:	60b9      	str	r1, [r7, #8]
 8000b62:	607a      	str	r2, [r7, #4]
 8000b64:	603b      	str	r3, [r7, #0]
    struct pipe_ringbuffer *pipe;

    pipe = memory_pool_alloc(memory_pool, sizeof(struct pipe_ringbuffer));
 8000b66:	6838      	ldr	r0, [r7, #0]
 8000b68:	2158      	movs	r1, #88	; 0x58
 8000b6a:	f002 fb2f 	bl	80031cc <memory_pool_alloc>
 8000b6e:	6178      	str	r0, [r7, #20]

    if (!pipe)
 8000b70:	697b      	ldr	r3, [r7, #20]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d102      	bne.n	8000b7c <fifo_init+0x24>
        return -1;
 8000b76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b7a:	e033      	b.n	8000be4 <fifo_init+0x8c>

    pipe->start = 0;
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	2200      	movs	r2, #0
 8000b80:	609a      	str	r2, [r3, #8]
    pipe->end = 0;
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	2200      	movs	r2, #0
 8000b86:	60da      	str	r2, [r3, #12]
	pipe->file.ops = &fifo_ops;
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	4a18      	ldr	r2, [pc, #96]	; (8000bec <fifo_init+0x94>)
 8000b8c:	605a      	str	r2, [r3, #4]
    files[fd] = &pipe->file;
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	009b      	lsls	r3, r3, #2
 8000b92:	687a      	ldr	r2, [r7, #4]
 8000b94:	4413      	add	r3, r2
 8000b96:	697a      	ldr	r2, [r7, #20]
 8000b98:	601a      	str	r2, [r3, #0]

    pipe->read_event = event_monitor_find_free(monitor);
 8000b9a:	6a38      	ldr	r0, [r7, #32]
 8000b9c:	f7ff feee 	bl	800097c <event_monitor_find_free>
 8000ba0:	4602      	mov	r2, r0
 8000ba2:	697b      	ldr	r3, [r7, #20]
 8000ba4:	611a      	str	r2, [r3, #16]
    event_monitor_register(monitor, pipe->read_event, pipe_read_release, files[fd]);
 8000ba6:	697b      	ldr	r3, [r7, #20]
 8000ba8:	691a      	ldr	r2, [r3, #16]
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	009b      	lsls	r3, r3, #2
 8000bae:	6879      	ldr	r1, [r7, #4]
 8000bb0:	440b      	add	r3, r1
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	6a38      	ldr	r0, [r7, #32]
 8000bb6:	4611      	mov	r1, r2
 8000bb8:	4a0d      	ldr	r2, [pc, #52]	; (8000bf0 <fifo_init+0x98>)
 8000bba:	f7ff ff05 	bl	80009c8 <event_monitor_register>

    pipe->write_event = event_monitor_find_free(monitor);
 8000bbe:	6a38      	ldr	r0, [r7, #32]
 8000bc0:	f7ff fedc 	bl	800097c <event_monitor_find_free>
 8000bc4:	4602      	mov	r2, r0
 8000bc6:	697b      	ldr	r3, [r7, #20]
 8000bc8:	615a      	str	r2, [r3, #20]
    event_monitor_register(monitor, pipe->write_event, pipe_write_release, files[fd]);
 8000bca:	697b      	ldr	r3, [r7, #20]
 8000bcc:	695a      	ldr	r2, [r3, #20]
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	009b      	lsls	r3, r3, #2
 8000bd2:	6879      	ldr	r1, [r7, #4]
 8000bd4:	440b      	add	r3, r1
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	6a38      	ldr	r0, [r7, #32]
 8000bda:	4611      	mov	r1, r2
 8000bdc:	4a05      	ldr	r2, [pc, #20]	; (8000bf4 <fifo_init+0x9c>)
 8000bde:	f7ff fef3 	bl	80009c8 <event_monitor_register>
    return 0;
 8000be2:	2300      	movs	r3, #0
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	3718      	adds	r7, #24
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	20000018 	.word	0x20000018
 8000bf0:	08003eed 	.word	0x08003eed
 8000bf4:	08003f1d 	.word	0x08003f1d

08000bf8 <fifo_readable>:

int
fifo_readable (struct file *file, struct file_request *request,
               struct event_monitor *monitor)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b086      	sub	sp, #24
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	60f8      	str	r0, [r7, #12]
 8000c00:	60b9      	str	r1, [r7, #8]
 8000c02:	607a      	str	r2, [r7, #4]
	/* Trying to read too much */
	if (request->size > PIPE_BUF) {
 8000c04:	68bb      	ldr	r3, [r7, #8]
 8000c06:	689b      	ldr	r3, [r3, #8]
 8000c08:	2b40      	cmp	r3, #64	; 0x40
 8000c0a:	dd02      	ble.n	8000c12 <fifo_readable+0x1a>
		return FILE_ACCESS_ERROR;
 8000c0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c10:	e021      	b.n	8000c56 <fifo_readable+0x5e>
	}

	struct pipe_ringbuffer *pipe =
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	617b      	str	r3, [r7, #20]
	    container_of(file, struct pipe_ringbuffer, file);

	if ((size_t)PIPE_LEN(*pipe) < request->size) {
 8000c16:	697b      	ldr	r3, [r7, #20]
 8000c18:	68da      	ldr	r2, [r3, #12]
 8000c1a:	697b      	ldr	r3, [r7, #20]
 8000c1c:	689b      	ldr	r3, [r3, #8]
 8000c1e:	1ad2      	subs	r2, r2, r3
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	68d9      	ldr	r1, [r3, #12]
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	689b      	ldr	r3, [r3, #8]
 8000c28:	4299      	cmp	r1, r3
 8000c2a:	da01      	bge.n	8000c30 <fifo_readable+0x38>
 8000c2c:	2340      	movs	r3, #64	; 0x40
 8000c2e:	e000      	b.n	8000c32 <fifo_readable+0x3a>
 8000c30:	2300      	movs	r3, #0
 8000c32:	4413      	add	r3, r2
 8000c34:	461a      	mov	r2, r3
 8000c36:	68bb      	ldr	r3, [r7, #8]
 8000c38:	689b      	ldr	r3, [r3, #8]
 8000c3a:	429a      	cmp	r2, r3
 8000c3c:	d20a      	bcs.n	8000c54 <fifo_readable+0x5c>
		/* Trying to read more than there is: block */
		event_monitor_block(monitor, pipe->read_event, request->task);
 8000c3e:	697b      	ldr	r3, [r7, #20]
 8000c40:	691a      	ldr	r2, [r3, #16]
 8000c42:	68bb      	ldr	r3, [r7, #8]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	6878      	ldr	r0, [r7, #4]
 8000c48:	4611      	mov	r1, r2
 8000c4a:	461a      	mov	r2, r3
 8000c4c:	f7ff fee6 	bl	8000a1c <event_monitor_block>
		return FILE_ACCESS_BLOCK;
 8000c50:	2300      	movs	r3, #0
 8000c52:	e000      	b.n	8000c56 <fifo_readable+0x5e>
	}
	return FILE_ACCESS_ACCEPT;
 8000c54:	2301      	movs	r3, #1
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	3718      	adds	r7, #24
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop

08000c60 <fifo_writable>:

int
fifo_writable (struct file *file, struct file_request *request,
               struct event_monitor *monitor)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b086      	sub	sp, #24
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	60f8      	str	r0, [r7, #12]
 8000c68:	60b9      	str	r1, [r7, #8]
 8000c6a:	607a      	str	r2, [r7, #4]
	struct pipe_ringbuffer *pipe =
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	617b      	str	r3, [r7, #20]
	    container_of(file, struct pipe_ringbuffer, file);

	/* If the write would be non-atomic */
	if (request->size > PIPE_BUF) {
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	689b      	ldr	r3, [r3, #8]
 8000c74:	2b40      	cmp	r3, #64	; 0x40
 8000c76:	dd02      	ble.n	8000c7e <fifo_writable+0x1e>
		return FILE_ACCESS_ERROR;
 8000c78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c7c:	e020      	b.n	8000cc0 <fifo_writable+0x60>
	}
	/* Preserve 1 byte to distiguish empty or full */
	if ((size_t)PIPE_BUF - PIPE_LEN(*pipe) - 1 < request->size) {
 8000c7e:	697b      	ldr	r3, [r7, #20]
 8000c80:	689a      	ldr	r2, [r3, #8]
 8000c82:	697b      	ldr	r3, [r7, #20]
 8000c84:	68db      	ldr	r3, [r3, #12]
 8000c86:	1ad2      	subs	r2, r2, r3
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	68d9      	ldr	r1, [r3, #12]
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	689b      	ldr	r3, [r3, #8]
 8000c90:	4299      	cmp	r1, r3
 8000c92:	da01      	bge.n	8000c98 <fifo_writable+0x38>
 8000c94:	2340      	movs	r3, #64	; 0x40
 8000c96:	e000      	b.n	8000c9a <fifo_writable+0x3a>
 8000c98:	2300      	movs	r3, #0
 8000c9a:	1ad3      	subs	r3, r2, r3
 8000c9c:	f103 023f 	add.w	r2, r3, #63	; 0x3f
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	689b      	ldr	r3, [r3, #8]
 8000ca4:	429a      	cmp	r2, r3
 8000ca6:	d20a      	bcs.n	8000cbe <fifo_writable+0x5e>
		/* Trying to write more than we have space for: block */
	    event_monitor_block(monitor, pipe->write_event, request->task);
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	695a      	ldr	r2, [r3, #20]
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	6878      	ldr	r0, [r7, #4]
 8000cb2:	4611      	mov	r1, r2
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	f7ff feb1 	bl	8000a1c <event_monitor_block>
		return FILE_ACCESS_BLOCK;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	e000      	b.n	8000cc0 <fifo_writable+0x60>
	}
	return FILE_ACCESS_ACCEPT;
 8000cbe:	2301      	movs	r3, #1
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	3718      	adds	r7, #24
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}

08000cc8 <fifo_read>:

int
fifo_read (struct file *file, struct file_request *request,
               struct event_monitor *monitor)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b086      	sub	sp, #24
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	60f8      	str	r0, [r7, #12]
 8000cd0:	60b9      	str	r1, [r7, #8]
 8000cd2:	607a      	str	r2, [r7, #4]
	size_t i;
	struct pipe_ringbuffer *pipe =
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	613b      	str	r3, [r7, #16]
	    container_of(file, struct pipe_ringbuffer, file);

	/* Copy data into buf */
	for (i = 0; i < request->size; i++) {
 8000cd8:	2300      	movs	r3, #0
 8000cda:	617b      	str	r3, [r7, #20]
 8000cdc:	e018      	b.n	8000d10 <fifo_read+0x48>
		PIPE_POP(*pipe, request->buf[i]);
 8000cde:	68bb      	ldr	r3, [r7, #8]
 8000ce0:	685a      	ldr	r2, [r3, #4]
 8000ce2:	697b      	ldr	r3, [r7, #20]
 8000ce4:	4413      	add	r3, r2
 8000ce6:	693a      	ldr	r2, [r7, #16]
 8000ce8:	6892      	ldr	r2, [r2, #8]
 8000cea:	6939      	ldr	r1, [r7, #16]
 8000cec:	440a      	add	r2, r1
 8000cee:	7e12      	ldrb	r2, [r2, #24]
 8000cf0:	701a      	strb	r2, [r3, #0]
 8000cf2:	693b      	ldr	r3, [r7, #16]
 8000cf4:	689b      	ldr	r3, [r3, #8]
 8000cf6:	1c5a      	adds	r2, r3, #1
 8000cf8:	693b      	ldr	r3, [r7, #16]
 8000cfa:	609a      	str	r2, [r3, #8]
 8000cfc:	693b      	ldr	r3, [r7, #16]
 8000cfe:	689b      	ldr	r3, [r3, #8]
 8000d00:	2b3f      	cmp	r3, #63	; 0x3f
 8000d02:	dd02      	ble.n	8000d0a <fifo_read+0x42>
 8000d04:	693b      	ldr	r3, [r7, #16]
 8000d06:	2200      	movs	r2, #0
 8000d08:	609a      	str	r2, [r3, #8]
	size_t i;
	struct pipe_ringbuffer *pipe =
	    container_of(file, struct pipe_ringbuffer, file);

	/* Copy data into buf */
	for (i = 0; i < request->size; i++) {
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	617b      	str	r3, [r7, #20]
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	689b      	ldr	r3, [r3, #8]
 8000d14:	461a      	mov	r2, r3
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	429a      	cmp	r2, r3
 8000d1a:	d8e0      	bhi.n	8000cde <fifo_read+0x16>
		PIPE_POP(*pipe, request->buf[i]);
	}

    /* Prepared to write */
	event_monitor_release(monitor, pipe->write_event);
 8000d1c:	693b      	ldr	r3, [r7, #16]
 8000d1e:	695b      	ldr	r3, [r3, #20]
 8000d20:	6878      	ldr	r0, [r7, #4]
 8000d22:	4619      	mov	r1, r3
 8000d24:	f7ff fe98 	bl	8000a58 <event_monitor_release>
	return request->size;
 8000d28:	68bb      	ldr	r3, [r7, #8]
 8000d2a:	689b      	ldr	r3, [r3, #8]
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	3718      	adds	r7, #24
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}

08000d34 <fifo_write>:

int
fifo_write (struct file *file, struct file_request *request,
               struct event_monitor *monitor)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b086      	sub	sp, #24
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	60f8      	str	r0, [r7, #12]
 8000d3c:	60b9      	str	r1, [r7, #8]
 8000d3e:	607a      	str	r2, [r7, #4]
	size_t i;
	struct pipe_ringbuffer *pipe =
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	613b      	str	r3, [r7, #16]
	    container_of(file, struct pipe_ringbuffer, file);

	/* Copy data into pipe */
	for (i = 0; i < request->size; i++)
 8000d44:	2300      	movs	r3, #0
 8000d46:	617b      	str	r3, [r7, #20]
 8000d48:	e018      	b.n	8000d7c <fifo_write+0x48>
		PIPE_PUSH(*pipe, request->buf[i]);
 8000d4a:	693b      	ldr	r3, [r7, #16]
 8000d4c:	68db      	ldr	r3, [r3, #12]
 8000d4e:	68ba      	ldr	r2, [r7, #8]
 8000d50:	6851      	ldr	r1, [r2, #4]
 8000d52:	697a      	ldr	r2, [r7, #20]
 8000d54:	440a      	add	r2, r1
 8000d56:	7812      	ldrb	r2, [r2, #0]
 8000d58:	6939      	ldr	r1, [r7, #16]
 8000d5a:	440b      	add	r3, r1
 8000d5c:	761a      	strb	r2, [r3, #24]
 8000d5e:	693b      	ldr	r3, [r7, #16]
 8000d60:	68db      	ldr	r3, [r3, #12]
 8000d62:	1c5a      	adds	r2, r3, #1
 8000d64:	693b      	ldr	r3, [r7, #16]
 8000d66:	60da      	str	r2, [r3, #12]
 8000d68:	693b      	ldr	r3, [r7, #16]
 8000d6a:	68db      	ldr	r3, [r3, #12]
 8000d6c:	2b3f      	cmp	r3, #63	; 0x3f
 8000d6e:	dd02      	ble.n	8000d76 <fifo_write+0x42>
 8000d70:	693b      	ldr	r3, [r7, #16]
 8000d72:	2200      	movs	r2, #0
 8000d74:	60da      	str	r2, [r3, #12]
	size_t i;
	struct pipe_ringbuffer *pipe =
	    container_of(file, struct pipe_ringbuffer, file);

	/* Copy data into pipe */
	for (i = 0; i < request->size; i++)
 8000d76:	697b      	ldr	r3, [r7, #20]
 8000d78:	3301      	adds	r3, #1
 8000d7a:	617b      	str	r3, [r7, #20]
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	689b      	ldr	r3, [r3, #8]
 8000d80:	461a      	mov	r2, r3
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	429a      	cmp	r2, r3
 8000d86:	d8e0      	bhi.n	8000d4a <fifo_write+0x16>
		PIPE_PUSH(*pipe, request->buf[i]);

    /* Prepared to read */
	event_monitor_release(monitor, pipe->read_event);
 8000d88:	693b      	ldr	r3, [r7, #16]
 8000d8a:	691b      	ldr	r3, [r3, #16]
 8000d8c:	6878      	ldr	r0, [r7, #4]
 8000d8e:	4619      	mov	r1, r3
 8000d90:	f7ff fe62 	bl	8000a58 <event_monitor_release>
	return request->size;
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	689b      	ldr	r3, [r3, #8]
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	3718      	adds	r7, #24
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}

08000da0 <mkfile>:
#include "block.h"
#include "regfile.h"
#include "path.h"

int mkfile(const char *pathname, int mode, int dev)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b096      	sub	sp, #88	; 0x58
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	60f8      	str	r0, [r7, #12]
 8000da8:	60b9      	str	r1, [r7, #8]
 8000daa:	607a      	str	r2, [r7, #4]
    int cmd = PATH_CMD_MKFILE;
 8000dac:	2301      	movs	r3, #1
 8000dae:	653b      	str	r3, [r7, #80]	; 0x50
	unsigned int replyfd = getpid() + 3;
 8000db0:	f017 f8ed 	bl	8017f8e <getpid>
 8000db4:	4603      	mov	r3, r0
 8000db6:	3303      	adds	r3, #3
 8000db8:	64fb      	str	r3, [r7, #76]	; 0x4c
	size_t plen = strlen(pathname)+1;
 8000dba:	68f8      	ldr	r0, [r7, #12]
 8000dbc:	f004 f808 	bl	8004dd0 <strlen>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	64bb      	str	r3, [r7, #72]	; 0x48
	char buf[4 + 4 + 4 + PATH_MAX + 4];
	(void) mode;
	int pos = 0;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	657b      	str	r3, [r7, #84]	; 0x54
	int status = 0;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	617b      	str	r3, [r7, #20]

	path_write_data(buf, &cmd, 4, pos);
 8000dce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000dd0:	f107 0218 	add.w	r2, r7, #24
 8000dd4:	441a      	add	r2, r3
 8000dd6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000dda:	4610      	mov	r0, r2
 8000ddc:	4619      	mov	r1, r3
 8000dde:	2204      	movs	r2, #4
 8000de0:	f017 f886 	bl	8017ef0 <memcpy>
 8000de4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000de6:	3304      	adds	r3, #4
 8000de8:	657b      	str	r3, [r7, #84]	; 0x54
	path_write_data(buf, &replyfd, 4, pos);
 8000dea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000dec:	f107 0218 	add.w	r2, r7, #24
 8000df0:	441a      	add	r2, r3
 8000df2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000df6:	4610      	mov	r0, r2
 8000df8:	4619      	mov	r1, r3
 8000dfa:	2204      	movs	r2, #4
 8000dfc:	f017 f878 	bl	8017ef0 <memcpy>
 8000e00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000e02:	3304      	adds	r3, #4
 8000e04:	657b      	str	r3, [r7, #84]	; 0x54
	path_write_data(buf, &plen, 4, pos);
 8000e06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000e08:	f107 0218 	add.w	r2, r7, #24
 8000e0c:	441a      	add	r2, r3
 8000e0e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000e12:	4610      	mov	r0, r2
 8000e14:	4619      	mov	r1, r3
 8000e16:	2204      	movs	r2, #4
 8000e18:	f017 f86a 	bl	8017ef0 <memcpy>
 8000e1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000e1e:	3304      	adds	r3, #4
 8000e20:	657b      	str	r3, [r7, #84]	; 0x54
	path_write_data(buf, pathname, plen, pos);
 8000e22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000e24:	f107 0218 	add.w	r2, r7, #24
 8000e28:	441a      	add	r2, r3
 8000e2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000e2c:	4610      	mov	r0, r2
 8000e2e:	68f9      	ldr	r1, [r7, #12]
 8000e30:	461a      	mov	r2, r3
 8000e32:	f017 f85d 	bl	8017ef0 <memcpy>
 8000e36:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000e38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000e3a:	4413      	add	r3, r2
 8000e3c:	657b      	str	r3, [r7, #84]	; 0x54
	path_write_data(buf, &dev, 4, pos);
 8000e3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000e40:	f107 0218 	add.w	r2, r7, #24
 8000e44:	441a      	add	r2, r3
 8000e46:	1d3b      	adds	r3, r7, #4
 8000e48:	4610      	mov	r0, r2
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	2204      	movs	r2, #4
 8000e4e:	f017 f84f 	bl	8017ef0 <memcpy>
 8000e52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000e54:	3304      	adds	r3, #4
 8000e56:	657b      	str	r3, [r7, #84]	; 0x54

	write(PATHSERVER_FD, buf, pos);
 8000e58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000e5a:	f107 0218 	add.w	r2, r7, #24
 8000e5e:	200b      	movs	r0, #11
 8000e60:	4611      	mov	r1, r2
 8000e62:	461a      	mov	r2, r3
 8000e64:	f017 f89a 	bl	8017f9c <write>
	read(replyfd, &status, 4);
 8000e68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e6a:	461a      	mov	r2, r3
 8000e6c:	f107 0314 	add.w	r3, r7, #20
 8000e70:	4610      	mov	r0, r2
 8000e72:	4619      	mov	r1, r3
 8000e74:	2204      	movs	r2, #4
 8000e76:	f017 f898 	bl	8017faa <read>

	return status;
 8000e7a:	697b      	ldr	r3, [r7, #20]
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	3758      	adds	r7, #88	; 0x58
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}

08000e84 <open>:

int open(const char *pathname, int flags)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b092      	sub	sp, #72	; 0x48
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
 8000e8c:	6039      	str	r1, [r7, #0]
    int cmd = PATH_CMD_OPEN;
 8000e8e:	2302      	movs	r3, #2
 8000e90:	643b      	str	r3, [r7, #64]	; 0x40
	unsigned int replyfd = getpid() + 3;
 8000e92:	f017 f87c 	bl	8017f8e <getpid>
 8000e96:	4603      	mov	r3, r0
 8000e98:	3303      	adds	r3, #3
 8000e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
	size_t plen = strlen(pathname) + 1;
 8000e9c:	6878      	ldr	r0, [r7, #4]
 8000e9e:	f003 ff97 	bl	8004dd0 <strlen>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	63bb      	str	r3, [r7, #56]	; 0x38
	unsigned int fd = -1;
 8000ea8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000eac:	637b      	str	r3, [r7, #52]	; 0x34
	char buf[4 + 4 + 4 + PATH_MAX];
	(void) flags;
	int pos = 0;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	647b      	str	r3, [r7, #68]	; 0x44

	path_write_data(buf, &cmd, 4, pos);
 8000eb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000eb4:	f107 0208 	add.w	r2, r7, #8
 8000eb8:	441a      	add	r2, r3
 8000eba:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000ebe:	4610      	mov	r0, r2
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	2204      	movs	r2, #4
 8000ec4:	f017 f814 	bl	8017ef0 <memcpy>
 8000ec8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000eca:	3304      	adds	r3, #4
 8000ecc:	647b      	str	r3, [r7, #68]	; 0x44
	path_write_data(buf, &replyfd, 4, pos);
 8000ece:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000ed0:	f107 0208 	add.w	r2, r7, #8
 8000ed4:	441a      	add	r2, r3
 8000ed6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000eda:	4610      	mov	r0, r2
 8000edc:	4619      	mov	r1, r3
 8000ede:	2204      	movs	r2, #4
 8000ee0:	f017 f806 	bl	8017ef0 <memcpy>
 8000ee4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000ee6:	3304      	adds	r3, #4
 8000ee8:	647b      	str	r3, [r7, #68]	; 0x44
	path_write_data(buf, &plen, 4, pos);
 8000eea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000eec:	f107 0208 	add.w	r2, r7, #8
 8000ef0:	441a      	add	r2, r3
 8000ef2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ef6:	4610      	mov	r0, r2
 8000ef8:	4619      	mov	r1, r3
 8000efa:	2204      	movs	r2, #4
 8000efc:	f016 fff8 	bl	8017ef0 <memcpy>
 8000f00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f02:	3304      	adds	r3, #4
 8000f04:	647b      	str	r3, [r7, #68]	; 0x44
	path_write_data(buf, pathname, plen, pos);
 8000f06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f08:	f107 0208 	add.w	r2, r7, #8
 8000f0c:	441a      	add	r2, r3
 8000f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f10:	4610      	mov	r0, r2
 8000f12:	6879      	ldr	r1, [r7, #4]
 8000f14:	461a      	mov	r2, r3
 8000f16:	f016 ffeb 	bl	8017ef0 <memcpy>
 8000f1a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f1e:	4413      	add	r3, r2
 8000f20:	647b      	str	r3, [r7, #68]	; 0x44

	write(PATHSERVER_FD, buf, pos);
 8000f22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f24:	f107 0208 	add.w	r2, r7, #8
 8000f28:	200b      	movs	r0, #11
 8000f2a:	4611      	mov	r1, r2
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	f017 f835 	bl	8017f9c <write>
	read(replyfd, &fd, 4);
 8000f32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f34:	461a      	mov	r2, r3
 8000f36:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000f3a:	4610      	mov	r0, r2
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	2204      	movs	r2, #4
 8000f40:	f017 f833 	bl	8017faa <read>

	return fd;
 8000f44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	3748      	adds	r7, #72	; 0x48
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop

08000f50 <file_release>:

int file_release(struct event_monitor *monitor, int event,
                  struct task_control_block *task, void *data)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b086      	sub	sp, #24
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	60f8      	str	r0, [r7, #12]
 8000f58:	60b9      	str	r1, [r7, #8]
 8000f5a:	607a      	str	r2, [r7, #4]
 8000f5c:	603b      	str	r3, [r7, #0]
    struct file *file = data;
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	617b      	str	r3, [r7, #20]
    struct file_request *request = (void*)task->stack->r0;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f68:	613b      	str	r3, [r7, #16]

    if (FILE_EVENT_IS_READ(event))
 8000f6a:	68bb      	ldr	r3, [r7, #8]
 8000f6c:	f003 0301 	and.w	r3, r3, #1
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d106      	bne.n	8000f82 <file_release+0x32>
        return file_read(file, request, monitor);
 8000f74:	6978      	ldr	r0, [r7, #20]
 8000f76:	6939      	ldr	r1, [r7, #16]
 8000f78:	68fa      	ldr	r2, [r7, #12]
 8000f7a:	f000 f80d 	bl	8000f98 <file_read>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	e005      	b.n	8000f8e <file_release+0x3e>
    else
        return file_write(file, request, monitor);
 8000f82:	6978      	ldr	r0, [r7, #20]
 8000f84:	6939      	ldr	r1, [r7, #16]
 8000f86:	68fa      	ldr	r2, [r7, #12]
 8000f88:	f000 f850 	bl	800102c <file_write>
 8000f8c:	4603      	mov	r3, r0
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3718      	adds	r7, #24
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop

08000f98 <file_read>:

int file_read(struct file *file, struct file_request *request,
              struct event_monitor *monitor)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b086      	sub	sp, #24
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	60f8      	str	r0, [r7, #12]
 8000fa0:	60b9      	str	r1, [r7, #8]
 8000fa2:	607a      	str	r2, [r7, #4]
    struct task_control_block *task = request->task;
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	617b      	str	r3, [r7, #20]

	if (file) {
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d02b      	beq.n	8001008 <file_read+0x70>
	    switch (file->ops->readable(file, request, monitor)) {
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	68f8      	ldr	r0, [r7, #12]
 8000fb8:	68b9      	ldr	r1, [r7, #8]
 8000fba:	687a      	ldr	r2, [r7, #4]
 8000fbc:	4798      	blx	r3
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d015      	beq.n	8000ff0 <file_read+0x58>
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	d11f      	bne.n	8001008 <file_read+0x70>
		    case FILE_ACCESS_ACCEPT: {
			    int size = file->ops->read(file, request, monitor);
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	689b      	ldr	r3, [r3, #8]
 8000fce:	68f8      	ldr	r0, [r7, #12]
 8000fd0:	68b9      	ldr	r1, [r7, #8]
 8000fd2:	687a      	ldr	r2, [r7, #4]
 8000fd4:	4798      	blx	r3
 8000fd6:	6138      	str	r0, [r7, #16]

			    if (task) {
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d006      	beq.n	8000fec <file_read+0x54>
			        task->stack->r0 = size;
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	693a      	ldr	r2, [r7, #16]
 8000fe4:	629a      	str	r2, [r3, #40]	; 0x28
	                task->status = TASK_READY;
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	2200      	movs	r2, #0
 8000fea:	609a      	str	r2, [r3, #8]
	            }

			    return 1;
 8000fec:	2301      	movs	r3, #1
 8000fee:	e018      	b.n	8001022 <file_read+0x8a>
		    }
		    case FILE_ACCESS_BLOCK:
			    if (task && task->status == TASK_READY) {
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d006      	beq.n	8001004 <file_read+0x6c>
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	689b      	ldr	r3, [r3, #8]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d102      	bne.n	8001004 <file_read+0x6c>
	                task->status = TASK_WAIT_READ;
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	2201      	movs	r2, #1
 8001002:	609a      	str	r2, [r3, #8]
	            }

	            return 0;
 8001004:	2300      	movs	r3, #0
 8001006:	e00c      	b.n	8001022 <file_read+0x8a>
		    default:
		        ;
		}
	}

    if (task) {
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d007      	beq.n	800101e <file_read+0x86>
        task->stack->r0 = -1;
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001016:	629a      	str	r2, [r3, #40]	; 0x28
        task->status = TASK_READY;
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	2200      	movs	r2, #0
 800101c:	609a      	str	r2, [r3, #8]
    }

    return -1;
 800101e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001022:	4618      	mov	r0, r3
 8001024:	3718      	adds	r7, #24
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop

0800102c <file_write>:

int file_write(struct file *file, struct file_request *request,
               struct event_monitor *monitor)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b086      	sub	sp, #24
 8001030:	af00      	add	r7, sp, #0
 8001032:	60f8      	str	r0, [r7, #12]
 8001034:	60b9      	str	r1, [r7, #8]
 8001036:	607a      	str	r2, [r7, #4]
    struct task_control_block *task = request->task;
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	617b      	str	r3, [r7, #20]

	if (file) {
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d02c      	beq.n	800109e <file_write+0x72>
	    switch (file->ops->writable(file, request, monitor)) {
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	68f8      	ldr	r0, [r7, #12]
 800104c:	68b9      	ldr	r1, [r7, #8]
 800104e:	687a      	ldr	r2, [r7, #4]
 8001050:	4798      	blx	r3
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d015      	beq.n	8001084 <file_write+0x58>
 8001058:	2b01      	cmp	r3, #1
 800105a:	d120      	bne.n	800109e <file_write+0x72>
	        case FILE_ACCESS_ACCEPT: {
	            int size = file->ops->write(file, request, monitor);
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	68db      	ldr	r3, [r3, #12]
 8001062:	68f8      	ldr	r0, [r7, #12]
 8001064:	68b9      	ldr	r1, [r7, #8]
 8001066:	687a      	ldr	r2, [r7, #4]
 8001068:	4798      	blx	r3
 800106a:	6138      	str	r0, [r7, #16]

	            if (task) {
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d006      	beq.n	8001080 <file_write+0x54>
	                task->stack->r0 = size;
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	629a      	str	r2, [r3, #40]	; 0x28
	                task->status = TASK_READY;
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	2200      	movs	r2, #0
 800107e:	609a      	str	r2, [r3, #8]
	            }

			    return 1;
 8001080:	2301      	movs	r3, #1
 8001082:	e019      	b.n	80010b8 <file_write+0x8c>
		    }
		    case FILE_ACCESS_BLOCK:
		        if (task && task->status == TASK_READY) {
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d007      	beq.n	800109a <file_write+0x6e>
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	689b      	ldr	r3, [r3, #8]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d103      	bne.n	800109a <file_write+0x6e>
		            request->task->status = TASK_WAIT_WRITE;
 8001092:	68bb      	ldr	r3, [r7, #8]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	2202      	movs	r2, #2
 8001098:	609a      	str	r2, [r3, #8]
		        }

		        return 0;
 800109a:	2300      	movs	r3, #0
 800109c:	e00c      	b.n	80010b8 <file_write+0x8c>
		    default:
		        ;
		}
	}

	if (task) {
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d007      	beq.n	80010b4 <file_write+0x88>
	    task->stack->r0 = -1;
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010ac:	629a      	str	r2, [r3, #40]	; 0x28
	    task->status = TASK_READY;
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	2200      	movs	r2, #0
 80010b2:	609a      	str	r2, [r3, #8]
	}

	return -1;
 80010b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3718      	adds	r7, #24
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}

080010c0 <file_mknod>:

int
file_mknod(int fd, int driver_pid, struct file *files[], int dev,
           struct memory_pool *memory_pool, struct event_monitor *event_monitor)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b088      	sub	sp, #32
 80010c4:	af02      	add	r7, sp, #8
 80010c6:	60f8      	str	r0, [r7, #12]
 80010c8:	60b9      	str	r1, [r7, #8]
 80010ca:	607a      	str	r2, [r7, #4]
 80010cc:	603b      	str	r3, [r7, #0]
    int result;
	switch(dev) {
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	3b01      	subs	r3, #1
 80010d2:	2b07      	cmp	r3, #7
 80010d4:	d83a      	bhi.n	800114c <file_mknod+0x8c>
 80010d6:	a201      	add	r2, pc, #4	; (adr r2, 80010dc <file_mknod+0x1c>)
 80010d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010dc:	080010fd 	.word	0x080010fd
 80010e0:	08001111 	.word	0x08001111
 80010e4:	0800114d 	.word	0x0800114d
 80010e8:	0800114d 	.word	0x0800114d
 80010ec:	0800114d 	.word	0x0800114d
 80010f0:	08001125 	.word	0x08001125
 80010f4:	0800114d 	.word	0x0800114d
 80010f8:	08001139 	.word	0x08001139
	case S_IFIFO:
		result = fifo_init(fd, driver_pid, files, memory_pool, event_monitor);
 80010fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010fe:	9300      	str	r3, [sp, #0]
 8001100:	68f8      	ldr	r0, [r7, #12]
 8001102:	68b9      	ldr	r1, [r7, #8]
 8001104:	687a      	ldr	r2, [r7, #4]
 8001106:	6a3b      	ldr	r3, [r7, #32]
 8001108:	f7ff fd26 	bl	8000b58 <fifo_init>
 800110c:	6178      	str	r0, [r7, #20]
		break;
 800110e:	e020      	b.n	8001152 <file_mknod+0x92>
	case S_IMSGQ:
		result = mq_init(fd, driver_pid, files, memory_pool, event_monitor);
 8001110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001112:	9300      	str	r3, [sp, #0]
 8001114:	68f8      	ldr	r0, [r7, #12]
 8001116:	68b9      	ldr	r1, [r7, #8]
 8001118:	687a      	ldr	r2, [r7, #4]
 800111a:	6a3b      	ldr	r3, [r7, #32]
 800111c:	f002 f894 	bl	8003248 <mq_init>
 8001120:	6178      	str	r0, [r7, #20]
		break;
 8001122:	e016      	b.n	8001152 <file_mknod+0x92>
	case S_IFBLK:
	    result = block_init(fd, driver_pid, files, memory_pool, event_monitor);
 8001124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001126:	9300      	str	r3, [sp, #0]
 8001128:	68f8      	ldr	r0, [r7, #12]
 800112a:	68b9      	ldr	r1, [r7, #8]
 800112c:	687a      	ldr	r2, [r7, #4]
 800112e:	6a3b      	ldr	r3, [r7, #32]
 8001130:	f7ff fabc 	bl	80006ac <block_init>
 8001134:	6178      	str	r0, [r7, #20]
	    break;
 8001136:	e00c      	b.n	8001152 <file_mknod+0x92>
	case S_IFREG:
	    result = regfile_init(fd, driver_pid, files, memory_pool, event_monitor);
 8001138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800113a:	9300      	str	r3, [sp, #0]
 800113c:	68f8      	ldr	r0, [r7, #12]
 800113e:	68b9      	ldr	r1, [r7, #8]
 8001140:	687a      	ldr	r2, [r7, #4]
 8001142:	6a3b      	ldr	r3, [r7, #32]
 8001144:	f003 fa02 	bl	800454c <regfile_init>
 8001148:	6178      	str	r0, [r7, #20]
	    break;
 800114a:	e002      	b.n	8001152 <file_mknod+0x92>
	default:
		result = -1;
 800114c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001150:	617b      	str	r3, [r7, #20]
	}

	if (result == 0) {
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d106      	bne.n	8001166 <file_mknod+0xa6>
	    files[fd]->fd = fd;
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	687a      	ldr	r2, [r7, #4]
 800115e:	4413      	add	r3, r2
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	68fa      	ldr	r2, [r7, #12]
 8001164:	601a      	str	r2, [r3, #0]
    }

	return result;
 8001166:	697b      	ldr	r3, [r7, #20]
}
 8001168:	4618      	mov	r0, r3
 800116a:	3718      	adds	r7, #24
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}

08001170 <file_lseek>:

int file_lseek(struct file *file, struct file_request *request,
               struct event_monitor *monitor)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b086      	sub	sp, #24
 8001174:	af00      	add	r7, sp, #0
 8001176:	60f8      	str	r0, [r7, #12]
 8001178:	60b9      	str	r1, [r7, #8]
 800117a:	607a      	str	r2, [r7, #4]
    struct task_control_block *task = request->task;
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	617b      	str	r3, [r7, #20]

    if (file && file->ops->lseekable && file->ops->lseek) {
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d036      	beq.n	80011f6 <file_lseek+0x86>
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	691b      	ldr	r3, [r3, #16]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d031      	beq.n	80011f6 <file_lseek+0x86>
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	695b      	ldr	r3, [r3, #20]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d02c      	beq.n	80011f6 <file_lseek+0x86>
        switch (file->ops->lseekable(file, request, monitor)) {
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	691b      	ldr	r3, [r3, #16]
 80011a2:	68f8      	ldr	r0, [r7, #12]
 80011a4:	68b9      	ldr	r1, [r7, #8]
 80011a6:	687a      	ldr	r2, [r7, #4]
 80011a8:	4798      	blx	r3
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d015      	beq.n	80011dc <file_lseek+0x6c>
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	d120      	bne.n	80011f6 <file_lseek+0x86>
            case FILE_ACCESS_ACCEPT: {
                int status = file->ops->lseek(file, request, monitor);
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	695b      	ldr	r3, [r3, #20]
 80011ba:	68f8      	ldr	r0, [r7, #12]
 80011bc:	68b9      	ldr	r1, [r7, #8]
 80011be:	687a      	ldr	r2, [r7, #4]
 80011c0:	4798      	blx	r3
 80011c2:	6138      	str	r0, [r7, #16]

	            if (task) {
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d006      	beq.n	80011d8 <file_lseek+0x68>
	                task->stack->r0 = status;
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	693a      	ldr	r2, [r7, #16]
 80011d0:	629a      	str	r2, [r3, #40]	; 0x28
	                task->status = TASK_READY;
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	2200      	movs	r2, #0
 80011d6:	609a      	str	r2, [r3, #8]
	            }

			    return 1;
 80011d8:	2301      	movs	r3, #1
 80011da:	e019      	b.n	8001210 <file_lseek+0xa0>
		    }
		    case FILE_ACCESS_BLOCK:
		        if (task && task->status == TASK_READY) {
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d007      	beq.n	80011f2 <file_lseek+0x82>
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	689b      	ldr	r3, [r3, #8]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d103      	bne.n	80011f2 <file_lseek+0x82>
		            request->task->status = TASK_WAIT_WRITE;
 80011ea:	68bb      	ldr	r3, [r7, #8]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	2202      	movs	r2, #2
 80011f0:	609a      	str	r2, [r3, #8]
		        }

		        return 0;
 80011f2:	2300      	movs	r3, #0
 80011f4:	e00c      	b.n	8001210 <file_lseek+0xa0>
		    default:
		        ;
        }
    }

	if (task) {
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d007      	beq.n	800120c <file_lseek+0x9c>
	    task->stack->r0 = -1;
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001204:	629a      	str	r2, [r3, #40]	; 0x28
	    task->status = TASK_READY;
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	2200      	movs	r2, #0
 800120a:	609a      	str	r2, [r3, #8]
	}

	return -1;
 800120c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001210:	4618      	mov	r0, r3
 8001212:	3718      	adds	r7, #24
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}

08001218 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	4603      	mov	r3, r0
 8001220:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8001222:	4b08      	ldr	r3, [pc, #32]	; (8001244 <NVIC_EnableIRQ+0x2c>)
 8001224:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8001228:	0952      	lsrs	r2, r2, #5
 800122a:	79f9      	ldrb	r1, [r7, #7]
 800122c:	f001 011f 	and.w	r1, r1, #31
 8001230:	2001      	movs	r0, #1
 8001232:	fa00 f101 	lsl.w	r1, r0, r1
 8001236:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800123a:	370c      	adds	r7, #12
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr
 8001244:	e000e100 	.word	0xe000e100

08001248 <NVIC_DisableIRQ>:
    The function disables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	4603      	mov	r3, r0
 8001250:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
 8001252:	4b09      	ldr	r3, [pc, #36]	; (8001278 <NVIC_DisableIRQ+0x30>)
 8001254:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8001258:	0952      	lsrs	r2, r2, #5
 800125a:	79f9      	ldrb	r1, [r7, #7]
 800125c:	f001 011f 	and.w	r1, r1, #31
 8001260:	2001      	movs	r0, #1
 8001262:	fa00 f101 	lsl.w	r1, r0, r1
 8001266:	3220      	adds	r2, #32
 8001268:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800126c:	370c      	adds	r7, #12
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	e000e100 	.word	0xe000e100

0800127c <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	4603      	mov	r3, r0
 8001284:	6039      	str	r1, [r7, #0]
 8001286:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8001288:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128c:	2b00      	cmp	r3, #0
 800128e:	da0b      	bge.n	80012a8 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8001290:	490d      	ldr	r1, [pc, #52]	; (80012c8 <NVIC_SetPriority+0x4c>)
 8001292:	79fb      	ldrb	r3, [r7, #7]
 8001294:	f003 030f 	and.w	r3, r3, #15
 8001298:	3b04      	subs	r3, #4
 800129a:	683a      	ldr	r2, [r7, #0]
 800129c:	b2d2      	uxtb	r2, r2
 800129e:	0112      	lsls	r2, r2, #4
 80012a0:	b2d2      	uxtb	r2, r2
 80012a2:	440b      	add	r3, r1
 80012a4:	761a      	strb	r2, [r3, #24]
 80012a6:	e009      	b.n	80012bc <NVIC_SetPriority+0x40>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 80012a8:	4908      	ldr	r1, [pc, #32]	; (80012cc <NVIC_SetPriority+0x50>)
 80012aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ae:	683a      	ldr	r2, [r7, #0]
 80012b0:	b2d2      	uxtb	r2, r2
 80012b2:	0112      	lsls	r2, r2, #4
 80012b4:	b2d2      	uxtb	r2, r2
 80012b6:	440b      	add	r3, r1
 80012b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80012bc:	370c      	adds	r7, #12
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	e000ed00 	.word	0xe000ed00
 80012cc:	e000e100 	.word	0xe000e100

080012d0 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	3b01      	subs	r3, #1
 80012dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012e0:	d301      	bcc.n	80012e6 <SysTick_Config+0x16>
 80012e2:	2301      	movs	r3, #1
 80012e4:	e00f      	b.n	8001306 <SysTick_Config+0x36>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 80012e6:	4b0a      	ldr	r3, [pc, #40]	; (8001310 <SysTick_Config+0x40>)
 80012e8:	687a      	ldr	r2, [r7, #4]
 80012ea:	3a01      	subs	r2, #1
 80012ec:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
 80012ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012f2:	210f      	movs	r1, #15
 80012f4:	f7ff ffc2 	bl	800127c <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 80012f8:	4b05      	ldr	r3, [pc, #20]	; (8001310 <SysTick_Config+0x40>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012fe:	4b04      	ldr	r3, [pc, #16]	; (8001310 <SysTick_Config+0x40>)
 8001300:	2207      	movs	r2, #7
 8001302:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 8001304:	2300      	movs	r3, #0
}
 8001306:	4618      	mov	r0, r3
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	e000e010 	.word	0xe000e010

08001314 <serialout>:

struct task_control_block tasks[TASK_LIMIT];


void serialout(USART_TypeDef* uart, unsigned int intr)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	6039      	str	r1, [r7, #0]
	int fd;
	char c;
	mkfifo("/dev/tty0/out", 0);
 800131e:	4817      	ldr	r0, [pc, #92]	; (800137c <serialout+0x68>)
 8001320:	2100      	movs	r1, #0
 8001322:	f7ff fc09 	bl	8000b38 <mkfifo>
	fd = open("/dev/tty0/out", 0);
 8001326:	4815      	ldr	r0, [pc, #84]	; (800137c <serialout+0x68>)
 8001328:	2100      	movs	r1, #0
 800132a:	f7ff fdab 	bl	8000e84 <open>
 800132e:	60f8      	str	r0, [r7, #12]

	while (1) {
		read(fd, &c, 1);
 8001330:	f107 030b 	add.w	r3, r7, #11
 8001334:	68f8      	ldr	r0, [r7, #12]
 8001336:	4619      	mov	r1, r3
 8001338:	2201      	movs	r2, #1
 800133a:	f016 fe36 	bl	8017faa <read>
    	
		USART_ITConfig(USART2, USART_IT_TXE, ENABLE);
 800133e:	4810      	ldr	r0, [pc, #64]	; (8001380 <serialout+0x6c>)
 8001340:	f240 7127 	movw	r1, #1831	; 0x727
 8001344:	2201      	movs	r2, #1
 8001346:	f013 fd5d 	bl	8014e04 <USART_ITConfig>
		while (USART_GetFlagStatus(uart, USART_FLAG_TXE) != SET) {
 800134a:	e003      	b.n	8001354 <serialout+0x40>
    		interrupt_wait(intr);
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	4618      	mov	r0, r3
 8001350:	f016 fe32 	bl	8017fb8 <interrupt_wait>

	while (1) {
		read(fd, &c, 1);
    	
		USART_ITConfig(USART2, USART_IT_TXE, ENABLE);
		while (USART_GetFlagStatus(uart, USART_FLAG_TXE) != SET) {
 8001354:	6878      	ldr	r0, [r7, #4]
 8001356:	2180      	movs	r1, #128	; 0x80
 8001358:	f013 fd9c 	bl	8014e94 <USART_GetFlagStatus>
 800135c:	4603      	mov	r3, r0
 800135e:	2b01      	cmp	r3, #1
 8001360:	d1f4      	bne.n	800134c <serialout+0x38>
    		interrupt_wait(intr);
    	}
		USART_ITConfig(USART2, USART_IT_TXE, DISABLE);
 8001362:	4807      	ldr	r0, [pc, #28]	; (8001380 <serialout+0x6c>)
 8001364:	f240 7127 	movw	r1, #1831	; 0x727
 8001368:	2200      	movs	r2, #0
 800136a:	f013 fd4b 	bl	8014e04 <USART_ITConfig>
    	
    	USART_SendData(USART2, c);
 800136e:	7afb      	ldrb	r3, [r7, #11]
 8001370:	4803      	ldr	r0, [pc, #12]	; (8001380 <serialout+0x6c>)
 8001372:	4619      	mov	r1, r3
 8001374:	f013 fba0 	bl	8014ab8 <USART_SendData>
	}
 8001378:	e7da      	b.n	8001330 <serialout+0x1c>
 800137a:	bf00      	nop
 800137c:	0801a3b0 	.word	0x0801a3b0
 8001380:	40004400 	.word	0x40004400

08001384 <serialin>:
}

void serialin(USART_TypeDef* uart, unsigned int intr)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
 800138c:	6039      	str	r1, [r7, #0]
	int fd;
	char c;
	mkfifo("/dev/tty0/in", 0);
 800138e:	4814      	ldr	r0, [pc, #80]	; (80013e0 <serialin+0x5c>)
 8001390:	2100      	movs	r1, #0
 8001392:	f7ff fbd1 	bl	8000b38 <mkfifo>
	fd = open("/dev/tty0/in", 0);
 8001396:	4812      	ldr	r0, [pc, #72]	; (80013e0 <serialin+0x5c>)
 8001398:	2100      	movs	r1, #0
 800139a:	f7ff fd73 	bl	8000e84 <open>
 800139e:	60f8      	str	r0, [r7, #12]

    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 80013a0:	4810      	ldr	r0, [pc, #64]	; (80013e4 <serialin+0x60>)
 80013a2:	f240 5125 	movw	r1, #1317	; 0x525
 80013a6:	2201      	movs	r2, #1
 80013a8:	f013 fd2c 	bl	8014e04 <USART_ITConfig>

	while (1) {
		interrupt_wait(intr);
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	4618      	mov	r0, r3
 80013b0:	f016 fe02 	bl	8017fb8 <interrupt_wait>
		if (USART_GetFlagStatus(uart, USART_FLAG_RXNE) == SET) {
 80013b4:	6878      	ldr	r0, [r7, #4]
 80013b6:	2120      	movs	r1, #32
 80013b8:	f013 fd6c 	bl	8014e94 <USART_GetFlagStatus>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b01      	cmp	r3, #1
 80013c0:	d10d      	bne.n	80013de <serialin+0x5a>
			c = USART_ReceiveData(uart);
 80013c2:	6878      	ldr	r0, [r7, #4]
 80013c4:	f013 fb8a 	bl	8014adc <USART_ReceiveData>
 80013c8:	4603      	mov	r3, r0
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	72fb      	strb	r3, [r7, #11]
			write(fd, &c, 1);
 80013ce:	f107 030b 	add.w	r3, r7, #11
 80013d2:	68f8      	ldr	r0, [r7, #12]
 80013d4:	4619      	mov	r1, r3
 80013d6:	2201      	movs	r2, #1
 80013d8:	f016 fde0 	bl	8017f9c <write>
		}
	}
 80013dc:	e7e6      	b.n	80013ac <serialin+0x28>
 80013de:	e7e5      	b.n	80013ac <serialin+0x28>
 80013e0:	0801a3c0 	.word	0x0801a3c0
 80013e4:	40004400 	.word	0x40004400

080013e8 <greeting>:
}

void greeting()
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
	int fdout = open("/dev/tty0/out", 0);
 80013ee:	480b      	ldr	r0, [pc, #44]	; (800141c <greeting+0x34>)
 80013f0:	2100      	movs	r1, #0
 80013f2:	f7ff fd47 	bl	8000e84 <open>
 80013f6:	6038      	str	r0, [r7, #0]
	char *string = "Hello, World!\n";
 80013f8:	4b09      	ldr	r3, [pc, #36]	; (8001420 <greeting+0x38>)
 80013fa:	607b      	str	r3, [r7, #4]
	while (*string) {
 80013fc:	e007      	b.n	800140e <greeting+0x26>
		write(fdout, string, 1);
 80013fe:	6838      	ldr	r0, [r7, #0]
 8001400:	6879      	ldr	r1, [r7, #4]
 8001402:	2201      	movs	r2, #1
 8001404:	f016 fdca 	bl	8017f9c <write>
		string++;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	3301      	adds	r3, #1
 800140c:	607b      	str	r3, [r7, #4]

void greeting()
{
	int fdout = open("/dev/tty0/out", 0);
	char *string = "Hello, World!\n";
	while (*string) {
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d1f3      	bne.n	80013fe <greeting+0x16>
		write(fdout, string, 1);
		string++;
	}
}
 8001416:	3708      	adds	r7, #8
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	0801a3b0 	.word	0x0801a3b0
 8001420:	0801a3d0 	.word	0x0801a3d0

08001424 <echo>:

void echo()
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
	int fdout;
	int fdin;
	char c;

	fdout = open("/dev/tty0/out", 0);
 800142a:	480b      	ldr	r0, [pc, #44]	; (8001458 <echo+0x34>)
 800142c:	2100      	movs	r1, #0
 800142e:	f7ff fd29 	bl	8000e84 <open>
 8001432:	60f8      	str	r0, [r7, #12]
	fdin = open("/dev/tty0/in", 0);
 8001434:	4809      	ldr	r0, [pc, #36]	; (800145c <echo+0x38>)
 8001436:	2100      	movs	r1, #0
 8001438:	f7ff fd24 	bl	8000e84 <open>
 800143c:	60b8      	str	r0, [r7, #8]

	while (1) {
		read(fdin, &c, 1);
 800143e:	1dfb      	adds	r3, r7, #7
 8001440:	68b8      	ldr	r0, [r7, #8]
 8001442:	4619      	mov	r1, r3
 8001444:	2201      	movs	r2, #1
 8001446:	f016 fdb0 	bl	8017faa <read>
		write(fdout, &c, 1);
 800144a:	1dfb      	adds	r3, r7, #7
 800144c:	68f8      	ldr	r0, [r7, #12]
 800144e:	4619      	mov	r1, r3
 8001450:	2201      	movs	r2, #1
 8001452:	f016 fda3 	bl	8017f9c <write>
	}
 8001456:	e7f2      	b.n	800143e <echo+0x1a>
 8001458:	0801a3b0 	.word	0x0801a3b0
 800145c:	0801a3c0 	.word	0x0801a3c0

08001460 <rs232_xmit_msg_task>:
}

void rs232_xmit_msg_task()
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b09c      	sub	sp, #112	; 0x70
 8001464:	af00      	add	r7, sp, #0
	int fdout;
	int fdin;
	char str[100];
	int curr_char;

	fdout = open("/dev/tty0/out", 0);
 8001466:	4814      	ldr	r0, [pc, #80]	; (80014b8 <rs232_xmit_msg_task+0x58>)
 8001468:	2100      	movs	r1, #0
 800146a:	f7ff fd0b 	bl	8000e84 <open>
 800146e:	66b8      	str	r0, [r7, #104]	; 0x68
	fdin = mq_open("/tmp/mqueue/out", O_CREAT);
 8001470:	4812      	ldr	r0, [pc, #72]	; (80014bc <rs232_xmit_msg_task+0x5c>)
 8001472:	2104      	movs	r1, #4
 8001474:	f001 fed0 	bl	8003218 <mq_open>
 8001478:	6678      	str	r0, [r7, #100]	; 0x64
	setpriority(0, PRIORITY_DEFAULT - 2);
 800147a:	2000      	movs	r0, #0
 800147c:	2112      	movs	r1, #18
 800147e:	f016 fda9 	bl	8017fd4 <setpriority>

	while (1) {
		/* Read from the queue.  Keep trying until a message is
		 * received.  This will block for a period of time (specified
		 * by portMAX_DELAY). */
		read(fdin, str, 100);
 8001482:	463b      	mov	r3, r7
 8001484:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8001486:	4619      	mov	r1, r3
 8001488:	2264      	movs	r2, #100	; 0x64
 800148a:	f016 fd8e 	bl	8017faa <read>

		/* Write each character of the message to the RS232 port. */
		curr_char = 0;
 800148e:	2300      	movs	r3, #0
 8001490:	66fb      	str	r3, [r7, #108]	; 0x6c
		while (str[curr_char] != '\0') {
 8001492:	e00a      	b.n	80014aa <rs232_xmit_msg_task+0x4a>
			write(fdout, &str[curr_char], 1);
 8001494:	463a      	mov	r2, r7
 8001496:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001498:	4413      	add	r3, r2
 800149a:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800149c:	4619      	mov	r1, r3
 800149e:	2201      	movs	r2, #1
 80014a0:	f016 fd7c 	bl	8017f9c <write>
			curr_char++;
 80014a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80014a6:	3301      	adds	r3, #1
 80014a8:	66fb      	str	r3, [r7, #108]	; 0x6c
		 * by portMAX_DELAY). */
		read(fdin, str, 100);

		/* Write each character of the message to the RS232 port. */
		curr_char = 0;
		while (str[curr_char] != '\0') {
 80014aa:	463a      	mov	r2, r7
 80014ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80014ae:	4413      	add	r3, r2
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d1ee      	bne.n	8001494 <rs232_xmit_msg_task+0x34>
			write(fdout, &str[curr_char], 1);
			curr_char++;
		}
	}
 80014b6:	e7e4      	b.n	8001482 <rs232_xmit_msg_task+0x22>
 80014b8:	0801a3b0 	.word	0x0801a3b0
 80014bc:	0801a3e0 	.word	0x0801a3e0

080014c0 <queue_str_task>:
}

void queue_str_task(const char *str, int delay)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b084      	sub	sp, #16
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	6039      	str	r1, [r7, #0]
	int fdout = mq_open("/tmp/mqueue/out", 0);
 80014ca:	480b      	ldr	r0, [pc, #44]	; (80014f8 <queue_str_task+0x38>)
 80014cc:	2100      	movs	r1, #0
 80014ce:	f001 fea3 	bl	8003218 <mq_open>
 80014d2:	60f8      	str	r0, [r7, #12]
	int msg_len = strlen(str) + 1;
 80014d4:	6878      	ldr	r0, [r7, #4]
 80014d6:	f003 fc7b 	bl	8004dd0 <strlen>
 80014da:	4603      	mov	r3, r0
 80014dc:	3301      	adds	r3, #1
 80014de:	60bb      	str	r3, [r7, #8]

	while (1) {
		/* Post the message.  Keep on trying until it is successful. */
		write(fdout, str, msg_len);
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	68f8      	ldr	r0, [r7, #12]
 80014e4:	6879      	ldr	r1, [r7, #4]
 80014e6:	461a      	mov	r2, r3
 80014e8:	f016 fd58 	bl	8017f9c <write>

		/* Wait. */
		sleep(delay);
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	4618      	mov	r0, r3
 80014f0:	f016 fd7e 	bl	8017ff0 <sleep>
	}
 80014f4:	e7f4      	b.n	80014e0 <queue_str_task+0x20>
 80014f6:	bf00      	nop
 80014f8:	0801a3e0 	.word	0x0801a3e0

080014fc <queue_str_task1>:
}

void queue_str_task1()
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
	queue_str_task("Hello 1\n", 200);
 8001500:	4802      	ldr	r0, [pc, #8]	; (800150c <queue_str_task1+0x10>)
 8001502:	21c8      	movs	r1, #200	; 0xc8
 8001504:	f7ff ffdc 	bl	80014c0 <queue_str_task>
}
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	0801a3f0 	.word	0x0801a3f0

08001510 <queue_str_task2>:

void queue_str_task2()
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
	queue_str_task("Hello 2\n", 50);
 8001514:	4802      	ldr	r0, [pc, #8]	; (8001520 <queue_str_task2+0x10>)
 8001516:	2132      	movs	r1, #50	; 0x32
 8001518:	f7ff ffd2 	bl	80014c0 <queue_str_task>
}
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	0801a3fc 	.word	0x0801a3fc

08001524 <serial_readwrite_task>:

void serial_readwrite_task()
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b09e      	sub	sp, #120	; 0x78
 8001528:	af00      	add	r7, sp, #0
	char str[100];
	char ch;
	int curr_char;
	int done;

	fdout = mq_open("/tmp/mqueue/out", 0);
 800152a:	4824      	ldr	r0, [pc, #144]	; (80015bc <serial_readwrite_task+0x98>)
 800152c:	2100      	movs	r1, #0
 800152e:	f001 fe73 	bl	8003218 <mq_open>
 8001532:	66f8      	str	r0, [r7, #108]	; 0x6c
	fdin = open("/dev/tty0/in", 0);
 8001534:	4822      	ldr	r0, [pc, #136]	; (80015c0 <serial_readwrite_task+0x9c>)
 8001536:	2100      	movs	r1, #0
 8001538:	f7ff fca4 	bl	8000e84 <open>
 800153c:	66b8      	str	r0, [r7, #104]	; 0x68

	/* Prepare the response message to be queued. */
	memcpy(str, "Got:", 4);
 800153e:	1d3b      	adds	r3, r7, #4
 8001540:	4618      	mov	r0, r3
 8001542:	4920      	ldr	r1, [pc, #128]	; (80015c4 <serial_readwrite_task+0xa0>)
 8001544:	2204      	movs	r2, #4
 8001546:	f016 fcd3 	bl	8017ef0 <memcpy>

	while (1) {
		curr_char = 4;
 800154a:	2304      	movs	r3, #4
 800154c:	677b      	str	r3, [r7, #116]	; 0x74
		done = 0;
 800154e:	2300      	movs	r3, #0
 8001550:	673b      	str	r3, [r7, #112]	; 0x70
		do {
			/* Receive a byte from the RS232 port (this call will
			 * block). */
			read(fdin, &ch, 1);
 8001552:	1cfb      	adds	r3, r7, #3
 8001554:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8001556:	4619      	mov	r1, r3
 8001558:	2201      	movs	r2, #1
 800155a:	f016 fd26 	bl	8017faa <read>

			/* If the byte is an end-of-line type character, then
			 * finish the string and inidcate we are done.
			 */
			if (curr_char >= 98 || ch == '\r' || ch == '\n') {
 800155e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001560:	2b61      	cmp	r3, #97	; 0x61
 8001562:	dc05      	bgt.n	8001570 <serial_readwrite_task+0x4c>
 8001564:	78fb      	ldrb	r3, [r7, #3]
 8001566:	2b0d      	cmp	r3, #13
 8001568:	d002      	beq.n	8001570 <serial_readwrite_task+0x4c>
 800156a:	78fb      	ldrb	r3, [r7, #3]
 800156c:	2b0a      	cmp	r3, #10
 800156e:	d110      	bne.n	8001592 <serial_readwrite_task+0x6e>
				str[curr_char] = '\n';
 8001570:	1d3a      	adds	r2, r7, #4
 8001572:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001574:	4413      	add	r3, r2
 8001576:	220a      	movs	r2, #10
 8001578:	701a      	strb	r2, [r3, #0]
				str[curr_char+1] = '\0';
 800157a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800157c:	3301      	adds	r3, #1
 800157e:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8001582:	440b      	add	r3, r1
 8001584:	2200      	movs	r2, #0
 8001586:	f803 2c74 	strb.w	r2, [r3, #-116]
				done = -1;
 800158a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800158e:	673b      	str	r3, [r7, #112]	; 0x70
 8001590:	e008      	b.n	80015a4 <serial_readwrite_task+0x80>
			}
			/* Otherwise, add the character to the
			 * response string. */
			else
				str[curr_char++] = ch;
 8001592:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001594:	1c5a      	adds	r2, r3, #1
 8001596:	677a      	str	r2, [r7, #116]	; 0x74
 8001598:	78fa      	ldrb	r2, [r7, #3]
 800159a:	f107 0178 	add.w	r1, r7, #120	; 0x78
 800159e:	440b      	add	r3, r1
 80015a0:	f803 2c74 	strb.w	r2, [r3, #-116]
		} while (!done);
 80015a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d0d3      	beq.n	8001552 <serial_readwrite_task+0x2e>

		/* Once we are done building the response string, queue the
		 * response to be sent to the RS232 port.
		 */
		write(fdout, str, curr_char+1 + 1);
 80015aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80015ac:	3302      	adds	r3, #2
 80015ae:	1d3a      	adds	r2, r7, #4
 80015b0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80015b2:	4611      	mov	r1, r2
 80015b4:	461a      	mov	r2, r3
 80015b6:	f016 fcf1 	bl	8017f9c <write>
	}
 80015ba:	e7c6      	b.n	800154a <serial_readwrite_task+0x26>
 80015bc:	0801a3e0 	.word	0x0801a3e0
 80015c0:	0801a3c0 	.word	0x0801a3c0
 80015c4:	0801a408 	.word	0x0801a408

080015c8 <serial_test_task>:
}

void serial_test_task()
{
 80015c8:	b5b0      	push	{r4, r5, r7, lr}
 80015ca:	b08a      	sub	sp, #40	; 0x28
 80015cc:	af00      	add	r7, sp, #0
	char put_ch[2]={'0','\0'};
 80015ce:	2330      	movs	r3, #48	; 0x30
 80015d0:	773b      	strb	r3, [r7, #28]
 80015d2:	2300      	movs	r3, #0
 80015d4:	777b      	strb	r3, [r7, #29]
	char hint[] =  USER_NAME "@" USER_NAME "-STM32:~$ ";
 80015d6:	4b44      	ldr	r3, [pc, #272]	; (80016e8 <serial_test_task+0x120>)
 80015d8:	463c      	mov	r4, r7
 80015da:	461d      	mov	r5, r3
 80015dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015e0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80015e4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	int hint_length = sizeof(hint);
 80015e8:	231c      	movs	r3, #28
 80015ea:	623b      	str	r3, [r7, #32]
	char *p = NULL;
 80015ec:	2300      	movs	r3, #0
 80015ee:	627b      	str	r3, [r7, #36]	; 0x24

	fdout = mq_open("/tmp/mqueue/out", 0);
 80015f0:	483e      	ldr	r0, [pc, #248]	; (80016ec <serial_test_task+0x124>)
 80015f2:	2100      	movs	r1, #0
 80015f4:	f001 fe10 	bl	8003218 <mq_open>
 80015f8:	4602      	mov	r2, r0
 80015fa:	4b3d      	ldr	r3, [pc, #244]	; (80016f0 <serial_test_task+0x128>)
 80015fc:	601a      	str	r2, [r3, #0]
	fdin = open("/dev/tty0/in", 0);
 80015fe:	483d      	ldr	r0, [pc, #244]	; (80016f4 <serial_test_task+0x12c>)
 8001600:	2100      	movs	r1, #0
 8001602:	f7ff fc3f 	bl	8000e84 <open>
 8001606:	4602      	mov	r2, r0
 8001608:	4b3b      	ldr	r3, [pc, #236]	; (80016f8 <serial_test_task+0x130>)
 800160a:	601a      	str	r2, [r3, #0]

	for (;; cur_his = (cur_his + 1) % HISTORY_COUNT) {
		p = cmd[cur_his];
 800160c:	4b3b      	ldr	r3, [pc, #236]	; (80016fc <serial_test_task+0x134>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	019a      	lsls	r2, r3, #6
 8001612:	4b3b      	ldr	r3, [pc, #236]	; (8001700 <serial_test_task+0x138>)
 8001614:	4413      	add	r3, r2
 8001616:	627b      	str	r3, [r7, #36]	; 0x24
		write(fdout, hint, hint_length);
 8001618:	4b35      	ldr	r3, [pc, #212]	; (80016f0 <serial_test_task+0x128>)
 800161a:	6819      	ldr	r1, [r3, #0]
 800161c:	6a3b      	ldr	r3, [r7, #32]
 800161e:	463a      	mov	r2, r7
 8001620:	4608      	mov	r0, r1
 8001622:	4611      	mov	r1, r2
 8001624:	461a      	mov	r2, r3
 8001626:	f016 fcb9 	bl	8017f9c <write>

		while (1) {
			read(fdin, put_ch, 1);
 800162a:	4b33      	ldr	r3, [pc, #204]	; (80016f8 <serial_test_task+0x130>)
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	f107 031c 	add.w	r3, r7, #28
 8001632:	4610      	mov	r0, r2
 8001634:	4619      	mov	r1, r3
 8001636:	2201      	movs	r2, #1
 8001638:	f016 fcb7 	bl	8017faa <read>

			if (put_ch[0] == '\r' || put_ch[0] == '\n') {
 800163c:	7f3b      	ldrb	r3, [r7, #28]
 800163e:	2b0d      	cmp	r3, #13
 8001640:	d002      	beq.n	8001648 <serial_test_task+0x80>
 8001642:	7f3b      	ldrb	r3, [r7, #28]
 8001644:	2b0a      	cmp	r3, #10
 8001646:	d114      	bne.n	8001672 <serial_test_task+0xaa>
				*p = '\0';
 8001648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164a:	2200      	movs	r2, #0
 800164c:	701a      	strb	r2, [r3, #0]
				write(fdout, next_line, 3);
 800164e:	4b28      	ldr	r3, [pc, #160]	; (80016f0 <serial_test_task+0x128>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4618      	mov	r0, r3
 8001654:	492b      	ldr	r1, [pc, #172]	; (8001704 <serial_test_task+0x13c>)
 8001656:	2203      	movs	r2, #3
 8001658:	f016 fca0 	bl	8017f9c <write>
				break;
 800165c:	bf00      	nop
			else if (p - cmd[cur_his] < CMDBUF_SIZE - 1) {
				*p++ = put_ch[0];
				write(fdout, put_ch, 2);
			}
		}
		check_keyword();	
 800165e:	f000 f8d7 	bl	8001810 <check_keyword>
	char *p = NULL;

	fdout = mq_open("/tmp/mqueue/out", 0);
	fdin = open("/dev/tty0/in", 0);

	for (;; cur_his = (cur_his + 1) % HISTORY_COUNT) {
 8001662:	4b26      	ldr	r3, [pc, #152]	; (80016fc <serial_test_task+0x134>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	1c5a      	adds	r2, r3, #1
 8001668:	4b27      	ldr	r3, [pc, #156]	; (8001708 <serial_test_task+0x140>)
 800166a:	4013      	ands	r3, r2
 800166c:	2b00      	cmp	r3, #0
 800166e:	da37      	bge.n	80016e0 <serial_test_task+0x118>
 8001670:	e032      	b.n	80016d8 <serial_test_task+0x110>
			if (put_ch[0] == '\r' || put_ch[0] == '\n') {
				*p = '\0';
				write(fdout, next_line, 3);
				break;
			}
			else if (put_ch[0] == 127 || put_ch[0] == '\b') {
 8001672:	7f3b      	ldrb	r3, [r7, #28]
 8001674:	2b7f      	cmp	r3, #127	; 0x7f
 8001676:	d002      	beq.n	800167e <serial_test_task+0xb6>
 8001678:	7f3b      	ldrb	r3, [r7, #28]
 800167a:	2b08      	cmp	r3, #8
 800167c:	d113      	bne.n	80016a6 <serial_test_task+0xde>
				if (p > cmd[cur_his]) {
 800167e:	4b1f      	ldr	r3, [pc, #124]	; (80016fc <serial_test_task+0x134>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	019a      	lsls	r2, r3, #6
 8001684:	4b1e      	ldr	r3, [pc, #120]	; (8001700 <serial_test_task+0x138>)
 8001686:	441a      	add	r2, r3
 8001688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168a:	429a      	cmp	r2, r3
 800168c:	d20a      	bcs.n	80016a4 <serial_test_task+0xdc>
					p--;
 800168e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001690:	3b01      	subs	r3, #1
 8001692:	627b      	str	r3, [r7, #36]	; 0x24
					write(fdout, "\b \b", 4);
 8001694:	4b16      	ldr	r3, [pc, #88]	; (80016f0 <serial_test_task+0x128>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4618      	mov	r0, r3
 800169a:	491c      	ldr	r1, [pc, #112]	; (800170c <serial_test_task+0x144>)
 800169c:	2204      	movs	r2, #4
 800169e:	f016 fc7d 	bl	8017f9c <write>
				*p = '\0';
				write(fdout, next_line, 3);
				break;
			}
			else if (put_ch[0] == 127 || put_ch[0] == '\b') {
				if (p > cmd[cur_his]) {
 80016a2:	e018      	b.n	80016d6 <serial_test_task+0x10e>
 80016a4:	e017      	b.n	80016d6 <serial_test_task+0x10e>
					p--;
					write(fdout, "\b \b", 4);
				}
			}
			else if (p - cmd[cur_his] < CMDBUF_SIZE - 1) {
 80016a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016a8:	4b14      	ldr	r3, [pc, #80]	; (80016fc <serial_test_task+0x134>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	0199      	lsls	r1, r3, #6
 80016ae:	4b14      	ldr	r3, [pc, #80]	; (8001700 <serial_test_task+0x138>)
 80016b0:	440b      	add	r3, r1
 80016b2:	1ad3      	subs	r3, r2, r3
 80016b4:	2b3e      	cmp	r3, #62	; 0x3e
 80016b6:	dc0e      	bgt.n	80016d6 <serial_test_task+0x10e>
				*p++ = put_ch[0];
 80016b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ba:	1c5a      	adds	r2, r3, #1
 80016bc:	627a      	str	r2, [r7, #36]	; 0x24
 80016be:	7f3a      	ldrb	r2, [r7, #28]
 80016c0:	701a      	strb	r2, [r3, #0]
				write(fdout, put_ch, 2);
 80016c2:	4b0b      	ldr	r3, [pc, #44]	; (80016f0 <serial_test_task+0x128>)
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	f107 031c 	add.w	r3, r7, #28
 80016ca:	4610      	mov	r0, r2
 80016cc:	4619      	mov	r1, r3
 80016ce:	2202      	movs	r2, #2
 80016d0:	f016 fc64 	bl	8017f9c <write>
			}
		}
 80016d4:	e7a9      	b.n	800162a <serial_test_task+0x62>
 80016d6:	e7a8      	b.n	800162a <serial_test_task+0x62>
	char *p = NULL;

	fdout = mq_open("/tmp/mqueue/out", 0);
	fdin = open("/dev/tty0/in", 0);

	for (;; cur_his = (cur_his + 1) % HISTORY_COUNT) {
 80016d8:	3b01      	subs	r3, #1
 80016da:	f063 0307 	orn	r3, r3, #7
 80016de:	3301      	adds	r3, #1
 80016e0:	461a      	mov	r2, r3
 80016e2:	4b06      	ldr	r3, [pc, #24]	; (80016fc <serial_test_task+0x134>)
 80016e4:	601a      	str	r2, [r3, #0]
				*p++ = put_ch[0];
				write(fdout, put_ch, 2);
			}
		}
		check_keyword();	
	}
 80016e6:	e791      	b.n	800160c <serial_test_task+0x44>
 80016e8:	0801a414 	.word	0x0801a414
 80016ec:	0801a3e0 	.word	0x0801a3e0
 80016f0:	200002dc 	.word	0x200002dc
 80016f4:	0801a3c0 	.word	0x0801a3c0
 80016f8:	200002e0 	.word	0x200002e0
 80016fc:	200002d8 	.word	0x200002d8
 8001700:	200000d8 	.word	0x200000d8
 8001704:	20000030 	.word	0x20000030
 8001708:	80000007 	.word	0x80000007
 800170c:	0801a410 	.word	0x0801a410

08001710 <UI_task>:
}

void UI_task()
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
    ui_init();
 8001714:	f003 fd16 	bl	8005144 <ui_init>
}
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop

0800171c <cmdtok>:

/* Split command into tokens. */
char *cmdtok(char *cmd)
{
 800171c:	b480      	push	{r7}
 800171e:	b085      	sub	sp, #20
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
	static char *cur = NULL;
	static char *end = NULL;
	if (cmd) {
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d045      	beq.n	80017b6 <cmdtok+0x9a>
		char quo = '\0';
 800172a:	2300      	movs	r3, #0
 800172c:	73fb      	strb	r3, [r7, #15]
		cur = cmd;
 800172e:	4b35      	ldr	r3, [pc, #212]	; (8001804 <cmdtok+0xe8>)
 8001730:	687a      	ldr	r2, [r7, #4]
 8001732:	601a      	str	r2, [r3, #0]
		for (end = cmd; *end; end++) {
 8001734:	4b34      	ldr	r3, [pc, #208]	; (8001808 <cmdtok+0xec>)
 8001736:	687a      	ldr	r2, [r7, #4]
 8001738:	601a      	str	r2, [r3, #0]
 800173a:	e036      	b.n	80017aa <cmdtok+0x8e>
			if (*end == '\'' || *end == '\"') {
 800173c:	4b32      	ldr	r3, [pc, #200]	; (8001808 <cmdtok+0xec>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	2b27      	cmp	r3, #39	; 0x27
 8001744:	d004      	beq.n	8001750 <cmdtok+0x34>
 8001746:	4b30      	ldr	r3, [pc, #192]	; (8001808 <cmdtok+0xec>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	2b22      	cmp	r3, #34	; 0x22
 800174e:	d114      	bne.n	800177a <cmdtok+0x5e>
				if (quo == *end)
 8001750:	4b2d      	ldr	r3, [pc, #180]	; (8001808 <cmdtok+0xec>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	7bfa      	ldrb	r2, [r7, #15]
 8001758:	429a      	cmp	r2, r3
 800175a:	d102      	bne.n	8001762 <cmdtok+0x46>
					quo = '\0';
 800175c:	2300      	movs	r3, #0
 800175e:	73fb      	strb	r3, [r7, #15]
 8001760:	e006      	b.n	8001770 <cmdtok+0x54>
				else if (quo == '\0')
 8001762:	7bfb      	ldrb	r3, [r7, #15]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d103      	bne.n	8001770 <cmdtok+0x54>
					quo = *end;
 8001768:	4b27      	ldr	r3, [pc, #156]	; (8001808 <cmdtok+0xec>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	73fb      	strb	r3, [r7, #15]
				*end = '\0';
 8001770:	4b25      	ldr	r3, [pc, #148]	; (8001808 <cmdtok+0xec>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	2200      	movs	r2, #0
 8001776:	701a      	strb	r2, [r3, #0]
 8001778:	e012      	b.n	80017a0 <cmdtok+0x84>
			}
			else if (isspace((int)*end) && !quo)
 800177a:	4b24      	ldr	r3, [pc, #144]	; (800180c <cmdtok+0xf0>)
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	4b22      	ldr	r3, [pc, #136]	; (8001808 <cmdtok+0xec>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	3301      	adds	r3, #1
 8001786:	4413      	add	r3, r2
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	f003 0308 	and.w	r3, r3, #8
 800178e:	2b00      	cmp	r3, #0
 8001790:	d006      	beq.n	80017a0 <cmdtok+0x84>
 8001792:	7bfb      	ldrb	r3, [r7, #15]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d103      	bne.n	80017a0 <cmdtok+0x84>
				*end = '\0';
 8001798:	4b1b      	ldr	r3, [pc, #108]	; (8001808 <cmdtok+0xec>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	2200      	movs	r2, #0
 800179e:	701a      	strb	r2, [r3, #0]
	static char *cur = NULL;
	static char *end = NULL;
	if (cmd) {
		char quo = '\0';
		cur = cmd;
		for (end = cmd; *end; end++) {
 80017a0:	4b19      	ldr	r3, [pc, #100]	; (8001808 <cmdtok+0xec>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	1c5a      	adds	r2, r3, #1
 80017a6:	4b18      	ldr	r3, [pc, #96]	; (8001808 <cmdtok+0xec>)
 80017a8:	601a      	str	r2, [r3, #0]
 80017aa:	4b17      	ldr	r3, [pc, #92]	; (8001808 <cmdtok+0xec>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d1c3      	bne.n	800173c <cmdtok+0x20>
 80017b4:	e00a      	b.n	80017cc <cmdtok+0xb0>
			else if (isspace((int)*end) && !quo)
				*end = '\0';
		}
	}
	else
		for (; *cur; cur++)
 80017b6:	e004      	b.n	80017c2 <cmdtok+0xa6>
 80017b8:	4b12      	ldr	r3, [pc, #72]	; (8001804 <cmdtok+0xe8>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	1c5a      	adds	r2, r3, #1
 80017be:	4b11      	ldr	r3, [pc, #68]	; (8001804 <cmdtok+0xe8>)
 80017c0:	601a      	str	r2, [r3, #0]
 80017c2:	4b10      	ldr	r3, [pc, #64]	; (8001804 <cmdtok+0xe8>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d1f5      	bne.n	80017b8 <cmdtok+0x9c>
			;

	for (; *cur == '\0'; cur++)
 80017cc:	e00c      	b.n	80017e8 <cmdtok+0xcc>
		if (cur == end) return NULL;
 80017ce:	4b0d      	ldr	r3, [pc, #52]	; (8001804 <cmdtok+0xe8>)
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	4b0d      	ldr	r3, [pc, #52]	; (8001808 <cmdtok+0xec>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	429a      	cmp	r2, r3
 80017d8:	d101      	bne.n	80017de <cmdtok+0xc2>
 80017da:	2300      	movs	r3, #0
 80017dc:	e00b      	b.n	80017f6 <cmdtok+0xda>
	}
	else
		for (; *cur; cur++)
			;

	for (; *cur == '\0'; cur++)
 80017de:	4b09      	ldr	r3, [pc, #36]	; (8001804 <cmdtok+0xe8>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	1c5a      	adds	r2, r3, #1
 80017e4:	4b07      	ldr	r3, [pc, #28]	; (8001804 <cmdtok+0xe8>)
 80017e6:	601a      	str	r2, [r3, #0]
 80017e8:	4b06      	ldr	r3, [pc, #24]	; (8001804 <cmdtok+0xe8>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d0ed      	beq.n	80017ce <cmdtok+0xb2>
		if (cur == end) return NULL;
	return cur;
 80017f2:	4b04      	ldr	r3, [pc, #16]	; (8001804 <cmdtok+0xe8>)
 80017f4:	681b      	ldr	r3, [r3, #0]
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3714      	adds	r7, #20
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	200052f4 	.word	0x200052f4
 8001808:	200052f8 	.word	0x200052f8
 800180c:	200000d0 	.word	0x200000d0

08001810 <check_keyword>:

void check_keyword()
{
 8001810:	b5b0      	push	{r4, r5, r7, lr}
 8001812:	b0a6      	sub	sp, #152	; 0x98
 8001814:	af00      	add	r7, sp, #0
	char *argv[MAX_ARGC + 1] = {NULL};
 8001816:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800181a:	2350      	movs	r3, #80	; 0x50
 800181c:	4610      	mov	r0, r2
 800181e:	2100      	movs	r1, #0
 8001820:	461a      	mov	r2, r3
 8001822:	f016 fea3 	bl	801856c <memset>
	char cmdstr[CMDBUF_SIZE];
	int argc = 1;
 8001826:	2301      	movs	r3, #1
 8001828:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	int i;

	find_events();
 800182c:	f000 f892 	bl	8001954 <find_events>
	fill_arg(cmdstr, cmd[cur_his]);
 8001830:	4b42      	ldr	r3, [pc, #264]	; (800193c <check_keyword+0x12c>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	019a      	lsls	r2, r3, #6
 8001836:	4b42      	ldr	r3, [pc, #264]	; (8001940 <check_keyword+0x130>)
 8001838:	4413      	add	r3, r2
 800183a:	463a      	mov	r2, r7
 800183c:	4610      	mov	r0, r2
 800183e:	4619      	mov	r1, r3
 8001840:	f000 f93a 	bl	8001ab8 <fill_arg>
	argv[0] = cmdtok(cmdstr);
 8001844:	463b      	mov	r3, r7
 8001846:	4618      	mov	r0, r3
 8001848:	f7ff ff68 	bl	800171c <cmdtok>
 800184c:	4603      	mov	r3, r0
 800184e:	643b      	str	r3, [r7, #64]	; 0x40
	if (!argv[0])
 8001850:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001852:	2b00      	cmp	r3, #0
 8001854:	d06f      	beq.n	8001936 <check_keyword+0x126>
		return;

	while (1) {
		argv[argc] = cmdtok(NULL);
 8001856:	2000      	movs	r0, #0
 8001858:	f7ff ff60 	bl	800171c <cmdtok>
 800185c:	4602      	mov	r2, r0
 800185e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8001868:	440b      	add	r3, r1
 800186a:	f843 2c58 	str.w	r2, [r3, #-88]
		if (!argv[argc])
 800186e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8001878:	4413      	add	r3, r2
 800187a:	f853 3c58 	ldr.w	r3, [r3, #-88]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d100      	bne.n	8001884 <check_keyword+0x74>
			break;
 8001882:	e00a      	b.n	800189a <check_keyword+0x8a>
		argc++;
 8001884:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001888:	3301      	adds	r3, #1
 800188a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		if (argc >= MAX_ARGC)
 800188e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001892:	2b12      	cmp	r3, #18
 8001894:	dd00      	ble.n	8001898 <check_keyword+0x88>
			break;
 8001896:	e000      	b.n	800189a <check_keyword+0x8a>
	}
 8001898:	e7dd      	b.n	8001856 <check_keyword+0x46>

	for (i = 0; i < CMD_COUNT; i++) {
 800189a:	2300      	movs	r3, #0
 800189c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80018a0:	e025      	b.n	80018ee <check_keyword+0xde>
		if (!strcmp(argv[0], cmd_data[i].cmd)) {
 80018a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80018a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80018a8:	f44f 6183 	mov.w	r1, #1048	; 0x418
 80018ac:	fb01 f103 	mul.w	r1, r1, r3
 80018b0:	4b24      	ldr	r3, [pc, #144]	; (8001944 <check_keyword+0x134>)
 80018b2:	440b      	add	r3, r1
 80018b4:	4610      	mov	r0, r2
 80018b6:	4619      	mov	r1, r3
 80018b8:	f003 fa50 	bl	8004d5c <strcmp>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d110      	bne.n	80018e4 <check_keyword+0xd4>
			cmd_data[i].func(argc, argv);
 80018c2:	4a20      	ldr	r2, [pc, #128]	; (8001944 <check_keyword+0x134>)
 80018c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80018c8:	f44f 6183 	mov.w	r1, #1048	; 0x418
 80018cc:	fb01 f303 	mul.w	r3, r1, r3
 80018d0:	4413      	add	r3, r2
 80018d2:	3314      	adds	r3, #20
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80018da:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 80018de:	4611      	mov	r1, r2
 80018e0:	4798      	blx	r3
			break;
 80018e2:	e008      	b.n	80018f6 <check_keyword+0xe6>
		argc++;
		if (argc >= MAX_ARGC)
			break;
	}

	for (i = 0; i < CMD_COUNT; i++) {
 80018e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80018e8:	3301      	adds	r3, #1
 80018ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80018ee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80018f2:	2b06      	cmp	r3, #6
 80018f4:	ddd5      	ble.n	80018a2 <check_keyword+0x92>
		if (!strcmp(argv[0], cmd_data[i].cmd)) {
			cmd_data[i].func(argc, argv);
			break;
		}
	}
	if (i == CMD_COUNT) {
 80018f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80018fa:	2b07      	cmp	r3, #7
 80018fc:	d11b      	bne.n	8001936 <check_keyword+0x126>
		write(fdout, argv[0], strlen(argv[0]) + 1);
 80018fe:	4b12      	ldr	r3, [pc, #72]	; (8001948 <check_keyword+0x138>)
 8001900:	681d      	ldr	r5, [r3, #0]
 8001902:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 8001904:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001906:	4618      	mov	r0, r3
 8001908:	f003 fa62 	bl	8004dd0 <strlen>
 800190c:	4603      	mov	r3, r0
 800190e:	3301      	adds	r3, #1
 8001910:	4628      	mov	r0, r5
 8001912:	4621      	mov	r1, r4
 8001914:	461a      	mov	r2, r3
 8001916:	f016 fb41 	bl	8017f9c <write>
		write(fdout, ": command not found", 20);
 800191a:	4b0b      	ldr	r3, [pc, #44]	; (8001948 <check_keyword+0x138>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4618      	mov	r0, r3
 8001920:	490a      	ldr	r1, [pc, #40]	; (800194c <check_keyword+0x13c>)
 8001922:	2214      	movs	r2, #20
 8001924:	f016 fb3a 	bl	8017f9c <write>
		write(fdout, next_line, 3);
 8001928:	4b07      	ldr	r3, [pc, #28]	; (8001948 <check_keyword+0x138>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4618      	mov	r0, r3
 800192e:	4908      	ldr	r1, [pc, #32]	; (8001950 <check_keyword+0x140>)
 8001930:	2203      	movs	r2, #3
 8001932:	f016 fb33 	bl	8017f9c <write>
	}
}
 8001936:	3798      	adds	r7, #152	; 0x98
 8001938:	46bd      	mov	sp, r7
 800193a:	bdb0      	pop	{r4, r5, r7, pc}
 800193c:	200002d8 	.word	0x200002d8
 8001940:	200000d8 	.word	0x200000d8
 8001944:	08018708 	.word	0x08018708
 8001948:	200002dc 	.word	0x200002dc
 800194c:	0801a430 	.word	0x0801a430
 8001950:	20000030 	.word	0x20000030

08001954 <find_events>:

void find_events()
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b094      	sub	sp, #80	; 0x50
 8001958:	af00      	add	r7, sp, #0
	char buf[CMDBUF_SIZE];
	char *p = cmd[cur_his];
 800195a:	4b3b      	ldr	r3, [pc, #236]	; (8001a48 <find_events+0xf4>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	019a      	lsls	r2, r3, #6
 8001960:	4b3a      	ldr	r3, [pc, #232]	; (8001a4c <find_events+0xf8>)
 8001962:	4413      	add	r3, r2
 8001964:	64fb      	str	r3, [r7, #76]	; 0x4c
	char *q;
	int i;

	for (; *p; p++) {
 8001966:	e067      	b.n	8001a38 <find_events+0xe4>
		if (*p == '!') {
 8001968:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	2b21      	cmp	r3, #33	; 0x21
 800196e:	d160      	bne.n	8001a32 <find_events+0xde>
			q = p;
 8001970:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001972:	64bb      	str	r3, [r7, #72]	; 0x48
			while (*q && !isspace((int)*q))
 8001974:	e002      	b.n	800197c <find_events+0x28>
				q++;
 8001976:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001978:	3301      	adds	r3, #1
 800197a:	64bb      	str	r3, [r7, #72]	; 0x48
	int i;

	for (; *p; p++) {
		if (*p == '!') {
			q = p;
			while (*q && !isspace((int)*q))
 800197c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d00a      	beq.n	800199a <find_events+0x46>
 8001984:	4b32      	ldr	r3, [pc, #200]	; (8001a50 <find_events+0xfc>)
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	3301      	adds	r3, #1
 800198e:	4413      	add	r3, r2
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	f003 0308 	and.w	r3, r3, #8
 8001996:	2b00      	cmp	r3, #0
 8001998:	d0ed      	beq.n	8001976 <find_events+0x22>
				q++;
			for (i = cur_his + HISTORY_COUNT - 1; i > cur_his; i--) {
 800199a:	4b2b      	ldr	r3, [pc, #172]	; (8001a48 <find_events+0xf4>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	3307      	adds	r3, #7
 80019a0:	647b      	str	r3, [r7, #68]	; 0x44
 80019a2:	e041      	b.n	8001a28 <find_events+0xd4>
				if (!strncmp(cmd[i % HISTORY_COUNT], p + 1, q - p - 1)) {
 80019a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80019a6:	4b2b      	ldr	r3, [pc, #172]	; (8001a54 <find_events+0x100>)
 80019a8:	4013      	ands	r3, r2
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	da03      	bge.n	80019b6 <find_events+0x62>
 80019ae:	3b01      	subs	r3, #1
 80019b0:	f063 0307 	orn	r3, r3, #7
 80019b4:	3301      	adds	r3, #1
 80019b6:	019a      	lsls	r2, r3, #6
 80019b8:	4b24      	ldr	r3, [pc, #144]	; (8001a4c <find_events+0xf8>)
 80019ba:	18d1      	adds	r1, r2, r3
 80019bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019be:	1c5a      	adds	r2, r3, #1
 80019c0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80019c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019c4:	1ac3      	subs	r3, r0, r3
 80019c6:	3b01      	subs	r3, #1
 80019c8:	4608      	mov	r0, r1
 80019ca:	4611      	mov	r1, r2
 80019cc:	461a      	mov	r2, r3
 80019ce:	f003 f9d3 	bl	8004d78 <strncmp>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d124      	bne.n	8001a22 <find_events+0xce>
					strcpy(buf, q);
 80019d8:	1d3b      	adds	r3, r7, #4
 80019da:	4618      	mov	r0, r3
 80019dc:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80019de:	f016 fe35 	bl	801864c <strcpy>
					strcpy(p, cmd[i % HISTORY_COUNT]);
 80019e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80019e4:	4b1b      	ldr	r3, [pc, #108]	; (8001a54 <find_events+0x100>)
 80019e6:	4013      	ands	r3, r2
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	da03      	bge.n	80019f4 <find_events+0xa0>
 80019ec:	3b01      	subs	r3, #1
 80019ee:	f063 0307 	orn	r3, r3, #7
 80019f2:	3301      	adds	r3, #1
 80019f4:	019a      	lsls	r2, r3, #6
 80019f6:	4b15      	ldr	r3, [pc, #84]	; (8001a4c <find_events+0xf8>)
 80019f8:	4413      	add	r3, r2
 80019fa:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80019fc:	4619      	mov	r1, r3
 80019fe:	f016 fe25 	bl	801864c <strcpy>
					p += strlen(p);
 8001a02:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001a04:	f003 f9e4 	bl	8004dd0 <strlen>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001a0c:	4413      	add	r3, r2
 8001a0e:	64fb      	str	r3, [r7, #76]	; 0x4c
					strcpy(p--, buf);
 8001a10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a12:	1e5a      	subs	r2, r3, #1
 8001a14:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001a16:	1d3a      	adds	r2, r7, #4
 8001a18:	4618      	mov	r0, r3
 8001a1a:	4611      	mov	r1, r2
 8001a1c:	f016 fe16 	bl	801864c <strcpy>
					break;
 8001a20:	e007      	b.n	8001a32 <find_events+0xde>
	for (; *p; p++) {
		if (*p == '!') {
			q = p;
			while (*q && !isspace((int)*q))
				q++;
			for (i = cur_his + HISTORY_COUNT - 1; i > cur_his; i--) {
 8001a22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a24:	3b01      	subs	r3, #1
 8001a26:	647b      	str	r3, [r7, #68]	; 0x44
 8001a28:	4b07      	ldr	r3, [pc, #28]	; (8001a48 <find_events+0xf4>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	dcb8      	bgt.n	80019a4 <find_events+0x50>
	char buf[CMDBUF_SIZE];
	char *p = cmd[cur_his];
	char *q;
	int i;

	for (; *p; p++) {
 8001a32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a34:	3301      	adds	r3, #1
 8001a36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d193      	bne.n	8001968 <find_events+0x14>
					break;
				}
			}
		}
	}
}
 8001a40:	3750      	adds	r7, #80	; 0x50
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	200002d8 	.word	0x200002d8
 8001a4c:	200000d8 	.word	0x200000d8
 8001a50:	200000d0 	.word	0x200000d0
 8001a54:	80000007 	.word	0x80000007

08001a58 <find_envvar>:

char *find_envvar(const char *name)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
	int i;

	for (i = 0; i < env_count; i++) {
 8001a60:	2300      	movs	r3, #0
 8001a62:	60fb      	str	r3, [r7, #12]
 8001a64:	e01a      	b.n	8001a9c <find_envvar+0x44>
		if (!strcmp(env_var[i].name, name))
 8001a66:	68fa      	ldr	r2, [r7, #12]
 8001a68:	4613      	mov	r3, r2
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	4413      	add	r3, r2
 8001a6e:	011b      	lsls	r3, r3, #4
 8001a70:	4a0f      	ldr	r2, [pc, #60]	; (8001ab0 <find_envvar+0x58>)
 8001a72:	4413      	add	r3, r2
 8001a74:	4618      	mov	r0, r3
 8001a76:	6879      	ldr	r1, [r7, #4]
 8001a78:	f003 f970 	bl	8004d5c <strcmp>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d109      	bne.n	8001a96 <find_envvar+0x3e>
			return env_var[i].value;
 8001a82:	68fa      	ldr	r2, [r7, #12]
 8001a84:	4613      	mov	r3, r2
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	4413      	add	r3, r2
 8001a8a:	011b      	lsls	r3, r3, #4
 8001a8c:	f103 0210 	add.w	r2, r3, #16
 8001a90:	4b07      	ldr	r3, [pc, #28]	; (8001ab0 <find_envvar+0x58>)
 8001a92:	4413      	add	r3, r2
 8001a94:	e008      	b.n	8001aa8 <find_envvar+0x50>

char *find_envvar(const char *name)
{
	int i;

	for (i = 0; i < env_count; i++) {
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	3301      	adds	r3, #1
 8001a9a:	60fb      	str	r3, [r7, #12]
 8001a9c:	4b05      	ldr	r3, [pc, #20]	; (8001ab4 <find_envvar+0x5c>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	68fa      	ldr	r2, [r7, #12]
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	dbdf      	blt.n	8001a66 <find_envvar+0xe>
		if (!strcmp(env_var[i].name, name))
			return env_var[i].value;
	}

	return NULL;
 8001aa6:	2300      	movs	r3, #0
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3710      	adds	r7, #16
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	200002e8 	.word	0x200002e8
 8001ab4:	200007e8 	.word	0x200007e8

08001ab8 <fill_arg>:

/* Fill in entire value of argument. */
int fill_arg(char *const dest, const char *argv)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b088      	sub	sp, #32
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	6039      	str	r1, [r7, #0]
	char env_name[MAX_ENVNAME + 1];
	char *buf = dest;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	61fb      	str	r3, [r7, #28]
	char *p = NULL;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	61bb      	str	r3, [r7, #24]

	for (; *argv; argv++) {
 8001aca:	e04c      	b.n	8001b66 <fill_arg+0xae>
		if (isalnum((int)*argv) || *argv == '_') {
 8001acc:	4b3a      	ldr	r3, [pc, #232]	; (8001bb8 <fill_arg+0x100>)
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	3301      	adds	r3, #1
 8001ad6:	4413      	add	r3, r2
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	f003 0307 	and.w	r3, r3, #7
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d103      	bne.n	8001aea <fill_arg+0x32>
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	2b5f      	cmp	r3, #95	; 0x5f
 8001ae8:	d110      	bne.n	8001b0c <fill_arg+0x54>
			if (p)
 8001aea:	69bb      	ldr	r3, [r7, #24]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d006      	beq.n	8001afe <fill_arg+0x46>
				*p++ = *argv;
 8001af0:	69bb      	ldr	r3, [r7, #24]
 8001af2:	1c5a      	adds	r2, r3, #1
 8001af4:	61ba      	str	r2, [r7, #24]
 8001af6:	683a      	ldr	r2, [r7, #0]
 8001af8:	7812      	ldrb	r2, [r2, #0]
 8001afa:	701a      	strb	r2, [r3, #0]
	char *buf = dest;
	char *p = NULL;

	for (; *argv; argv++) {
		if (isalnum((int)*argv) || *argv == '_') {
			if (p)
 8001afc:	e030      	b.n	8001b60 <fill_arg+0xa8>
				*p++ = *argv;
			else
				*buf++ = *argv;
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	1c5a      	adds	r2, r3, #1
 8001b02:	61fa      	str	r2, [r7, #28]
 8001b04:	683a      	ldr	r2, [r7, #0]
 8001b06:	7812      	ldrb	r2, [r2, #0]
 8001b08:	701a      	strb	r2, [r3, #0]
	char *buf = dest;
	char *p = NULL;

	for (; *argv; argv++) {
		if (isalnum((int)*argv) || *argv == '_') {
			if (p)
 8001b0a:	e029      	b.n	8001b60 <fill_arg+0xa8>
				*p++ = *argv;
			else
				*buf++ = *argv;
		}
		else { /* Symbols. */
			if (p) {
 8001b0c:	69bb      	ldr	r3, [r7, #24]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d018      	beq.n	8001b44 <fill_arg+0x8c>
				*p = '\0';
 8001b12:	69bb      	ldr	r3, [r7, #24]
 8001b14:	2200      	movs	r2, #0
 8001b16:	701a      	strb	r2, [r3, #0]
				p = find_envvar(env_name);
 8001b18:	f107 0308 	add.w	r3, r7, #8
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7ff ff9b 	bl	8001a58 <find_envvar>
 8001b22:	61b8      	str	r0, [r7, #24]
				if (p) {
 8001b24:	69bb      	ldr	r3, [r7, #24]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d00c      	beq.n	8001b44 <fill_arg+0x8c>
					strcpy(buf, p);
 8001b2a:	69f8      	ldr	r0, [r7, #28]
 8001b2c:	69b9      	ldr	r1, [r7, #24]
 8001b2e:	f016 fd8d 	bl	801864c <strcpy>
					buf += strlen(p);
 8001b32:	69b8      	ldr	r0, [r7, #24]
 8001b34:	f003 f94c 	bl	8004dd0 <strlen>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	69fa      	ldr	r2, [r7, #28]
 8001b3c:	4413      	add	r3, r2
 8001b3e:	61fb      	str	r3, [r7, #28]
					p = NULL;
 8001b40:	2300      	movs	r3, #0
 8001b42:	61bb      	str	r3, [r7, #24]
				}
			}
			if (*argv == '$')
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	2b24      	cmp	r3, #36	; 0x24
 8001b4a:	d103      	bne.n	8001b54 <fill_arg+0x9c>
				p = env_name;
 8001b4c:	f107 0308 	add.w	r3, r7, #8
 8001b50:	61bb      	str	r3, [r7, #24]
 8001b52:	e005      	b.n	8001b60 <fill_arg+0xa8>
			else
				*buf++ = *argv;
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	1c5a      	adds	r2, r3, #1
 8001b58:	61fa      	str	r2, [r7, #28]
 8001b5a:	683a      	ldr	r2, [r7, #0]
 8001b5c:	7812      	ldrb	r2, [r2, #0]
 8001b5e:	701a      	strb	r2, [r3, #0]
{
	char env_name[MAX_ENVNAME + 1];
	char *buf = dest;
	char *p = NULL;

	for (; *argv; argv++) {
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	3301      	adds	r3, #1
 8001b64:	603b      	str	r3, [r7, #0]
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d1ae      	bne.n	8001acc <fill_arg+0x14>
				p = env_name;
			else
				*buf++ = *argv;
		}
	}
	if (p) {
 8001b6e:	69bb      	ldr	r3, [r7, #24]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d016      	beq.n	8001ba2 <fill_arg+0xea>
		*p = '\0';
 8001b74:	69bb      	ldr	r3, [r7, #24]
 8001b76:	2200      	movs	r2, #0
 8001b78:	701a      	strb	r2, [r3, #0]
		p = find_envvar(env_name);
 8001b7a:	f107 0308 	add.w	r3, r7, #8
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f7ff ff6a 	bl	8001a58 <find_envvar>
 8001b84:	61b8      	str	r0, [r7, #24]
		if (p) {
 8001b86:	69bb      	ldr	r3, [r7, #24]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d00a      	beq.n	8001ba2 <fill_arg+0xea>
			strcpy(buf, p);
 8001b8c:	69f8      	ldr	r0, [r7, #28]
 8001b8e:	69b9      	ldr	r1, [r7, #24]
 8001b90:	f016 fd5c 	bl	801864c <strcpy>
			buf += strlen(p);
 8001b94:	69b8      	ldr	r0, [r7, #24]
 8001b96:	f003 f91b 	bl	8004dd0 <strlen>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	69fa      	ldr	r2, [r7, #28]
 8001b9e:	4413      	add	r3, r2
 8001ba0:	61fb      	str	r3, [r7, #28]
		}
	}
	*buf = '\0';
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	701a      	strb	r2, [r3, #0]

	return buf - dest;
 8001ba8:	69fa      	ldr	r2, [r7, #28]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	1ad3      	subs	r3, r2, r3
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3720      	adds	r7, #32
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	200000d0 	.word	0x200000d0

08001bbc <export_envvar>:

//export
void export_envvar(int argc, char *argv[])
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b086      	sub	sp, #24
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	6039      	str	r1, [r7, #0]
	char *found;
	char *value;
	int i;

	for (i = 1; i < argc; i++) {
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	613b      	str	r3, [r7, #16]
 8001bca:	e056      	b.n	8001c7a <export_envvar+0xbe>
		value = argv[i];
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	683a      	ldr	r2, [r7, #0]
 8001bd2:	4413      	add	r3, r2
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	617b      	str	r3, [r7, #20]
		while (*value && *value != '=')
 8001bd8:	e002      	b.n	8001be0 <export_envvar+0x24>
			value++;
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	3301      	adds	r3, #1
 8001bde:	617b      	str	r3, [r7, #20]
	char *value;
	int i;

	for (i = 1; i < argc; i++) {
		value = argv[i];
		while (*value && *value != '=')
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d003      	beq.n	8001bf0 <export_envvar+0x34>
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	2b3d      	cmp	r3, #61	; 0x3d
 8001bee:	d1f4      	bne.n	8001bda <export_envvar+0x1e>
			value++;
		if (*value)
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d004      	beq.n	8001c02 <export_envvar+0x46>
			*value++ = '\0';
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	1c5a      	adds	r2, r3, #1
 8001bfc:	617a      	str	r2, [r7, #20]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	701a      	strb	r2, [r3, #0]
		found = find_envvar(argv[i]);
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	683a      	ldr	r2, [r7, #0]
 8001c08:	4413      	add	r3, r2
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f7ff ff23 	bl	8001a58 <find_envvar>
 8001c12:	60f8      	str	r0, [r7, #12]
		if (found)
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d004      	beq.n	8001c24 <export_envvar+0x68>
			strcpy(found, value);
 8001c1a:	68f8      	ldr	r0, [r7, #12]
 8001c1c:	6979      	ldr	r1, [r7, #20]
 8001c1e:	f016 fd15 	bl	801864c <strcpy>
 8001c22:	e027      	b.n	8001c74 <export_envvar+0xb8>
		else if (env_count < MAX_ENVCOUNT) {
 8001c24:	4b18      	ldr	r3, [pc, #96]	; (8001c88 <export_envvar+0xcc>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	2b0f      	cmp	r3, #15
 8001c2a:	dc23      	bgt.n	8001c74 <export_envvar+0xb8>
			strcpy(env_var[env_count].name, argv[i]);
 8001c2c:	4b16      	ldr	r3, [pc, #88]	; (8001c88 <export_envvar+0xcc>)
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	4613      	mov	r3, r2
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	4413      	add	r3, r2
 8001c36:	011b      	lsls	r3, r3, #4
 8001c38:	4a14      	ldr	r2, [pc, #80]	; (8001c8c <export_envvar+0xd0>)
 8001c3a:	441a      	add	r2, r3
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	6839      	ldr	r1, [r7, #0]
 8001c42:	440b      	add	r3, r1
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4610      	mov	r0, r2
 8001c48:	4619      	mov	r1, r3
 8001c4a:	f016 fcff 	bl	801864c <strcpy>
			strcpy(env_var[env_count].value, value);
 8001c4e:	4b0e      	ldr	r3, [pc, #56]	; (8001c88 <export_envvar+0xcc>)
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	4613      	mov	r3, r2
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	4413      	add	r3, r2
 8001c58:	011b      	lsls	r3, r3, #4
 8001c5a:	f103 0210 	add.w	r2, r3, #16
 8001c5e:	4b0b      	ldr	r3, [pc, #44]	; (8001c8c <export_envvar+0xd0>)
 8001c60:	4413      	add	r3, r2
 8001c62:	4618      	mov	r0, r3
 8001c64:	6979      	ldr	r1, [r7, #20]
 8001c66:	f016 fcf1 	bl	801864c <strcpy>
			env_count++;
 8001c6a:	4b07      	ldr	r3, [pc, #28]	; (8001c88 <export_envvar+0xcc>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	1c5a      	adds	r2, r3, #1
 8001c70:	4b05      	ldr	r3, [pc, #20]	; (8001c88 <export_envvar+0xcc>)
 8001c72:	601a      	str	r2, [r3, #0]
{
	char *found;
	char *value;
	int i;

	for (i = 1; i < argc; i++) {
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	3301      	adds	r3, #1
 8001c78:	613b      	str	r3, [r7, #16]
 8001c7a:	693a      	ldr	r2, [r7, #16]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	dba4      	blt.n	8001bcc <export_envvar+0x10>
			strcpy(env_var[env_count].name, argv[i]);
			strcpy(env_var[env_count].value, value);
			env_count++;
		}
	}
}
 8001c82:	3718      	adds	r7, #24
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	200007e8 	.word	0x200007e8
 8001c8c:	200002e8 	.word	0x200002e8

08001c90 <show_task_info>:

//ps
void show_task_info(int argc, char* argv[])
{
 8001c90:	b5b0      	push	{r4, r5, r7, lr}
 8001c92:	b08c      	sub	sp, #48	; 0x30
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	6039      	str	r1, [r7, #0]
	char ps_message[]="PID STATUS PRIORITY";
 8001c9a:	4b3f      	ldr	r3, [pc, #252]	; (8001d98 <show_task_info+0x108>)
 8001c9c:	f107 0414 	add.w	r4, r7, #20
 8001ca0:	461d      	mov	r5, r3
 8001ca2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ca4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ca6:	682b      	ldr	r3, [r5, #0]
 8001ca8:	6023      	str	r3, [r4, #0]
	int ps_message_length = sizeof(ps_message);
 8001caa:	2314      	movs	r3, #20
 8001cac:	62bb      	str	r3, [r7, #40]	; 0x28
	int task_i;

	write(fdout, &ps_message , ps_message_length);
 8001cae:	4b3b      	ldr	r3, [pc, #236]	; (8001d9c <show_task_info+0x10c>)
 8001cb0:	6819      	ldr	r1, [r3, #0]
 8001cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cb4:	f107 0214 	add.w	r2, r7, #20
 8001cb8:	4608      	mov	r0, r1
 8001cba:	4611      	mov	r1, r2
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	f016 f96d 	bl	8017f9c <write>
	write(fdout, &next_line , 3);
 8001cc2:	4b36      	ldr	r3, [pc, #216]	; (8001d9c <show_task_info+0x10c>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	4935      	ldr	r1, [pc, #212]	; (8001da0 <show_task_info+0x110>)
 8001cca:	2203      	movs	r2, #3
 8001ccc:	f016 f966 	bl	8017f9c <write>

	for (task_i = 0; task_i < task_count; task_i++) {
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cd4:	e058      	b.n	8001d88 <show_task_info+0xf8>
		char task_info_pid[2];
		char task_info_status[2];
		char task_info_priority[3];

		task_info_pid[0]='0'+tasks[task_i].pid;
 8001cd6:	4933      	ldr	r1, [pc, #204]	; (8001da4 <show_task_info+0x114>)
 8001cd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001cda:	4613      	mov	r3, r2
 8001cdc:	005b      	lsls	r3, r3, #1
 8001cde:	4413      	add	r3, r2
 8001ce0:	00db      	lsls	r3, r3, #3
 8001ce2:	440b      	add	r3, r1
 8001ce4:	3304      	adds	r3, #4
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	3330      	adds	r3, #48	; 0x30
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	743b      	strb	r3, [r7, #16]
		task_info_pid[1]='\0';
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	747b      	strb	r3, [r7, #17]
		task_info_status[0]='0'+tasks[task_i].status;
 8001cf4:	492b      	ldr	r1, [pc, #172]	; (8001da4 <show_task_info+0x114>)
 8001cf6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	005b      	lsls	r3, r3, #1
 8001cfc:	4413      	add	r3, r2
 8001cfe:	00db      	lsls	r3, r3, #3
 8001d00:	440b      	add	r3, r1
 8001d02:	3308      	adds	r3, #8
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	3330      	adds	r3, #48	; 0x30
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	733b      	strb	r3, [r7, #12]
		task_info_status[1]='\0';			
 8001d0e:	2300      	movs	r3, #0
 8001d10:	737b      	strb	r3, [r7, #13]

		itoa(tasks[task_i].priority, task_info_priority, 10);
 8001d12:	4924      	ldr	r1, [pc, #144]	; (8001da4 <show_task_info+0x114>)
 8001d14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d16:	4613      	mov	r3, r2
 8001d18:	005b      	lsls	r3, r3, #1
 8001d1a:	4413      	add	r3, r2
 8001d1c:	00db      	lsls	r3, r3, #3
 8001d1e:	440b      	add	r3, r1
 8001d20:	330c      	adds	r3, #12
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	f107 0308 	add.w	r3, r7, #8
 8001d28:	4610      	mov	r0, r2
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	220a      	movs	r2, #10
 8001d2e:	f000 f83d 	bl	8001dac <itoa>

		write(fdout, &task_info_pid , 2);
 8001d32:	4b1a      	ldr	r3, [pc, #104]	; (8001d9c <show_task_info+0x10c>)
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	f107 0310 	add.w	r3, r7, #16
 8001d3a:	4610      	mov	r0, r2
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	2202      	movs	r2, #2
 8001d40:	f016 f92c 	bl	8017f9c <write>
		write_blank(3);
 8001d44:	2003      	movs	r0, #3
 8001d46:	f000 fa55 	bl	80021f4 <write_blank>
			write(fdout, &task_info_status , 2);
 8001d4a:	4b14      	ldr	r3, [pc, #80]	; (8001d9c <show_task_info+0x10c>)
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	f107 030c 	add.w	r3, r7, #12
 8001d52:	4610      	mov	r0, r2
 8001d54:	4619      	mov	r1, r3
 8001d56:	2202      	movs	r2, #2
 8001d58:	f016 f920 	bl	8017f9c <write>
		write_blank(5);
 8001d5c:	2005      	movs	r0, #5
 8001d5e:	f000 fa49 	bl	80021f4 <write_blank>
		write(fdout, &task_info_priority , 3);
 8001d62:	4b0e      	ldr	r3, [pc, #56]	; (8001d9c <show_task_info+0x10c>)
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	f107 0308 	add.w	r3, r7, #8
 8001d6a:	4610      	mov	r0, r2
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	2203      	movs	r2, #3
 8001d70:	f016 f914 	bl	8017f9c <write>

		write(fdout, &next_line , 3);
 8001d74:	4b09      	ldr	r3, [pc, #36]	; (8001d9c <show_task_info+0x10c>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	4909      	ldr	r1, [pc, #36]	; (8001da0 <show_task_info+0x110>)
 8001d7c:	2203      	movs	r2, #3
 8001d7e:	f016 f90d 	bl	8017f9c <write>
	int task_i;

	write(fdout, &ps_message , ps_message_length);
	write(fdout, &next_line , 3);

	for (task_i = 0; task_i < task_count; task_i++) {
 8001d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d84:	3301      	adds	r3, #1
 8001d86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d8a:	4b07      	ldr	r3, [pc, #28]	; (8001da8 <show_task_info+0x118>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	d3a1      	bcc.n	8001cd6 <show_task_info+0x46>
		write_blank(5);
		write(fdout, &task_info_priority , 3);

		write(fdout, &next_line , 3);
	}
}
 8001d92:	3730      	adds	r7, #48	; 0x30
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bdb0      	pop	{r4, r5, r7, pc}
 8001d98:	0801a444 	.word	0x0801a444
 8001d9c:	200002dc 	.word	0x200002dc
 8001da0:	20000030 	.word	0x20000030
 8001da4:	200007ec 	.word	0x200007ec
 8001da8:	200000d4 	.word	0x200000d4

08001dac <itoa>:

//this function helps to show int

void itoa(int n, char *dst, int base)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b090      	sub	sp, #64	; 0x40
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	60f8      	str	r0, [r7, #12]
 8001db4:	60b9      	str	r1, [r7, #8]
 8001db6:	607a      	str	r2, [r7, #4]
	char buf[33] = {0};
 8001db8:	f107 0314 	add.w	r3, r7, #20
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	601a      	str	r2, [r3, #0]
 8001dc0:	3304      	adds	r3, #4
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	601a      	str	r2, [r3, #0]
 8001dc6:	3304      	adds	r3, #4
 8001dc8:	2200      	movs	r2, #0
 8001dca:	601a      	str	r2, [r3, #0]
 8001dcc:	3304      	adds	r3, #4
 8001dce:	2200      	movs	r2, #0
 8001dd0:	601a      	str	r2, [r3, #0]
 8001dd2:	3304      	adds	r3, #4
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	601a      	str	r2, [r3, #0]
 8001dd8:	3304      	adds	r3, #4
 8001dda:	2200      	movs	r2, #0
 8001ddc:	601a      	str	r2, [r3, #0]
 8001dde:	3304      	adds	r3, #4
 8001de0:	2200      	movs	r2, #0
 8001de2:	601a      	str	r2, [r3, #0]
 8001de4:	3304      	adds	r3, #4
 8001de6:	2200      	movs	r2, #0
 8001de8:	601a      	str	r2, [r3, #0]
 8001dea:	3304      	adds	r3, #4
 8001dec:	2200      	movs	r2, #0
 8001dee:	701a      	strb	r2, [r3, #0]
 8001df0:	3301      	adds	r3, #1
	char *p = &buf[32];
 8001df2:	f107 0314 	add.w	r3, r7, #20
 8001df6:	3320      	adds	r3, #32
 8001df8:	63fb      	str	r3, [r7, #60]	; 0x3c

	if (n == 0)
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d106      	bne.n	8001e0e <itoa+0x62>
		*--p = '0';
 8001e00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e02:	3b01      	subs	r3, #1
 8001e04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e08:	2230      	movs	r2, #48	; 0x30
 8001e0a:	701a      	strb	r2, [r3, #0]
 8001e0c:	e024      	b.n	8001e58 <itoa+0xac>
	else {
		unsigned int num = (base == 10 && num < 0) ? -n : n;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	63bb      	str	r3, [r7, #56]	; 0x38

		for (; num; num/=base)
 8001e12:	e012      	b.n	8001e3a <itoa+0x8e>
			*--p = "0123456789ABCDEF" [num % base];
 8001e14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e16:	3b01      	subs	r3, #1
 8001e18:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e1e:	fbb3 f1f2 	udiv	r1, r3, r2
 8001e22:	fb02 f201 	mul.w	r2, r2, r1
 8001e26:	1a9b      	subs	r3, r3, r2
 8001e28:	4a0f      	ldr	r2, [pc, #60]	; (8001e68 <itoa+0xbc>)
 8001e2a:	5cd2      	ldrb	r2, [r2, r3]
 8001e2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e2e:	701a      	strb	r2, [r3, #0]
	if (n == 0)
		*--p = '0';
	else {
		unsigned int num = (base == 10 && num < 0) ? -n : n;

		for (; num; num/=base)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001e34:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e38:	63bb      	str	r3, [r7, #56]	; 0x38
 8001e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d1e9      	bne.n	8001e14 <itoa+0x68>
			*--p = "0123456789ABCDEF" [num % base];
		if (base == 10 && n < 0)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2b0a      	cmp	r3, #10
 8001e44:	d108      	bne.n	8001e58 <itoa+0xac>
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	da05      	bge.n	8001e58 <itoa+0xac>
			*--p = '-';
 8001e4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e4e:	3b01      	subs	r3, #1
 8001e50:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e54:	222d      	movs	r2, #45	; 0x2d
 8001e56:	701a      	strb	r2, [r3, #0]
	}

	strcpy(dst, p);
 8001e58:	68b8      	ldr	r0, [r7, #8]
 8001e5a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001e5c:	f016 fbf6 	bl	801864c <strcpy>
}
 8001e60:	3740      	adds	r7, #64	; 0x40
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	0801a458 	.word	0x0801a458

08001e6c <show_cmd_info>:

//help

void show_cmd_info(int argc, char* argv[])
{
 8001e6c:	b5b0      	push	{r4, r5, r7, lr}
 8001e6e:	b08e      	sub	sp, #56	; 0x38
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	6039      	str	r1, [r7, #0]
	const char help_desp[] = "This system has commands as follow\n\r\0";
 8001e76:	4b34      	ldr	r3, [pc, #208]	; (8001f48 <show_cmd_info+0xdc>)
 8001e78:	f107 040c 	add.w	r4, r7, #12
 8001e7c:	461d      	mov	r5, r3
 8001e7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e86:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001e8a:	6020      	str	r0, [r4, #0]
 8001e8c:	3404      	adds	r4, #4
 8001e8e:	8021      	strh	r1, [r4, #0]
	int i;

	write(fdout, &help_desp, sizeof(help_desp));
 8001e90:	4b2e      	ldr	r3, [pc, #184]	; (8001f4c <show_cmd_info+0xe0>)
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	f107 030c 	add.w	r3, r7, #12
 8001e98:	4610      	mov	r0, r2
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	2226      	movs	r2, #38	; 0x26
 8001e9e:	f016 f87d 	bl	8017f9c <write>
	for (i = 0; i < CMD_COUNT; i++) {
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	637b      	str	r3, [r7, #52]	; 0x34
 8001ea6:	e048      	b.n	8001f3a <show_cmd_info+0xce>
		write(fdout, cmd_data[i].cmd, strlen(cmd_data[i].cmd) + 1);
 8001ea8:	4b28      	ldr	r3, [pc, #160]	; (8001f4c <show_cmd_info+0xe0>)
 8001eaa:	681d      	ldr	r5, [r3, #0]
 8001eac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001eae:	f44f 6283 	mov.w	r2, #1048	; 0x418
 8001eb2:	fb02 f203 	mul.w	r2, r2, r3
 8001eb6:	4b26      	ldr	r3, [pc, #152]	; (8001f50 <show_cmd_info+0xe4>)
 8001eb8:	18d4      	adds	r4, r2, r3
 8001eba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ebc:	f44f 6283 	mov.w	r2, #1048	; 0x418
 8001ec0:	fb02 f203 	mul.w	r2, r2, r3
 8001ec4:	4b22      	ldr	r3, [pc, #136]	; (8001f50 <show_cmd_info+0xe4>)
 8001ec6:	4413      	add	r3, r2
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f002 ff81 	bl	8004dd0 <strlen>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	3301      	adds	r3, #1
 8001ed2:	4628      	mov	r0, r5
 8001ed4:	4621      	mov	r1, r4
 8001ed6:	461a      	mov	r2, r3
 8001ed8:	f016 f860 	bl	8017f9c <write>
		write(fdout, ": ", 3);
 8001edc:	4b1b      	ldr	r3, [pc, #108]	; (8001f4c <show_cmd_info+0xe0>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	491c      	ldr	r1, [pc, #112]	; (8001f54 <show_cmd_info+0xe8>)
 8001ee4:	2203      	movs	r2, #3
 8001ee6:	f016 f859 	bl	8017f9c <write>
		write(fdout, cmd_data[i].description, strlen(cmd_data[i].description) + 1);
 8001eea:	4b18      	ldr	r3, [pc, #96]	; (8001f4c <show_cmd_info+0xe0>)
 8001eec:	681d      	ldr	r5, [r3, #0]
 8001eee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ef0:	f44f 6283 	mov.w	r2, #1048	; 0x418
 8001ef4:	fb02 f303 	mul.w	r3, r2, r3
 8001ef8:	f103 0218 	add.w	r2, r3, #24
 8001efc:	4b14      	ldr	r3, [pc, #80]	; (8001f50 <show_cmd_info+0xe4>)
 8001efe:	18d4      	adds	r4, r2, r3
 8001f00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f02:	f44f 6283 	mov.w	r2, #1048	; 0x418
 8001f06:	fb02 f303 	mul.w	r3, r2, r3
 8001f0a:	f103 0218 	add.w	r2, r3, #24
 8001f0e:	4b10      	ldr	r3, [pc, #64]	; (8001f50 <show_cmd_info+0xe4>)
 8001f10:	4413      	add	r3, r2
 8001f12:	4618      	mov	r0, r3
 8001f14:	f002 ff5c 	bl	8004dd0 <strlen>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	3301      	adds	r3, #1
 8001f1c:	4628      	mov	r0, r5
 8001f1e:	4621      	mov	r1, r4
 8001f20:	461a      	mov	r2, r3
 8001f22:	f016 f83b 	bl	8017f9c <write>
		write(fdout, next_line, 3);
 8001f26:	4b09      	ldr	r3, [pc, #36]	; (8001f4c <show_cmd_info+0xe0>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	490a      	ldr	r1, [pc, #40]	; (8001f58 <show_cmd_info+0xec>)
 8001f2e:	2203      	movs	r2, #3
 8001f30:	f016 f834 	bl	8017f9c <write>
{
	const char help_desp[] = "This system has commands as follow\n\r\0";
	int i;

	write(fdout, &help_desp, sizeof(help_desp));
	for (i = 0; i < CMD_COUNT; i++) {
 8001f34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f36:	3301      	adds	r3, #1
 8001f38:	637b      	str	r3, [r7, #52]	; 0x34
 8001f3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f3c:	2b06      	cmp	r3, #6
 8001f3e:	ddb3      	ble.n	8001ea8 <show_cmd_info+0x3c>
		write(fdout, cmd_data[i].cmd, strlen(cmd_data[i].cmd) + 1);
		write(fdout, ": ", 3);
		write(fdout, cmd_data[i].description, strlen(cmd_data[i].description) + 1);
		write(fdout, next_line, 3);
	}
}
 8001f40:	3738      	adds	r7, #56	; 0x38
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bdb0      	pop	{r4, r5, r7, pc}
 8001f46:	bf00      	nop
 8001f48:	0801a470 	.word	0x0801a470
 8001f4c:	200002dc 	.word	0x200002dc
 8001f50:	08018708 	.word	0x08018708
 8001f54:	0801a46c 	.word	0x0801a46c
 8001f58:	20000030 	.word	0x20000030

08001f5c <show_echo>:

//echo
void show_echo(int argc, char* argv[])
{
 8001f5c:	b5b0      	push	{r4, r5, r7, lr}
 8001f5e:	b086      	sub	sp, #24
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	6039      	str	r1, [r7, #0]
	const int _n = 1; /* Flag for "-n" option. */
 8001f66:	2301      	movs	r3, #1
 8001f68:	60fb      	str	r3, [r7, #12]
	int flag = 0;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	617b      	str	r3, [r7, #20]
	int i;

	for (i = 1; i < argc; i++) {
 8001f6e:	2301      	movs	r3, #1
 8001f70:	613b      	str	r3, [r7, #16]
 8001f72:	e014      	b.n	8001f9e <show_echo+0x42>
		if (!strcmp(argv[i], "-n"))
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	683a      	ldr	r2, [r7, #0]
 8001f7a:	4413      	add	r3, r2
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4618      	mov	r0, r3
 8001f80:	4926      	ldr	r1, [pc, #152]	; (800201c <show_echo+0xc0>)
 8001f82:	f002 feeb 	bl	8004d5c <strcmp>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d107      	bne.n	8001f9c <show_echo+0x40>
			flag |= _n;
 8001f8c:	697a      	ldr	r2, [r7, #20]
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	4313      	orrs	r3, r2
 8001f92:	617b      	str	r3, [r7, #20]
{
	const int _n = 1; /* Flag for "-n" option. */
	int flag = 0;
	int i;

	for (i = 1; i < argc; i++) {
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	3301      	adds	r3, #1
 8001f98:	613b      	str	r3, [r7, #16]
 8001f9a:	e000      	b.n	8001f9e <show_echo+0x42>
		if (!strcmp(argv[i], "-n"))
			flag |= _n;
		else
			break;
 8001f9c:	e003      	b.n	8001fa6 <show_echo+0x4a>
{
	const int _n = 1; /* Flag for "-n" option. */
	int flag = 0;
	int i;

	for (i = 1; i < argc; i++) {
 8001f9e:	693a      	ldr	r2, [r7, #16]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	dbe6      	blt.n	8001f74 <show_echo+0x18>
			flag |= _n;
		else
			break;
	}

	for (; i < argc; i++) {
 8001fa6:	e024      	b.n	8001ff2 <show_echo+0x96>
		write(fdout, argv[i], strlen(argv[i]) + 1);
 8001fa8:	4b1d      	ldr	r3, [pc, #116]	; (8002020 <show_echo+0xc4>)
 8001faa:	681d      	ldr	r5, [r3, #0]
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	683a      	ldr	r2, [r7, #0]
 8001fb2:	4413      	add	r3, r2
 8001fb4:	681c      	ldr	r4, [r3, #0]
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	683a      	ldr	r2, [r7, #0]
 8001fbc:	4413      	add	r3, r2
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f002 ff05 	bl	8004dd0 <strlen>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	3301      	adds	r3, #1
 8001fca:	4628      	mov	r0, r5
 8001fcc:	4621      	mov	r1, r4
 8001fce:	461a      	mov	r2, r3
 8001fd0:	f015 ffe4 	bl	8017f9c <write>
		if (i < argc - 1)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	1e5a      	subs	r2, r3, #1
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	dd06      	ble.n	8001fec <show_echo+0x90>
			write(fdout, " ", 2);
 8001fde:	4b10      	ldr	r3, [pc, #64]	; (8002020 <show_echo+0xc4>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	490f      	ldr	r1, [pc, #60]	; (8002024 <show_echo+0xc8>)
 8001fe6:	2202      	movs	r2, #2
 8001fe8:	f015 ffd8 	bl	8017f9c <write>
			flag |= _n;
		else
			break;
	}

	for (; i < argc; i++) {
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	3301      	adds	r3, #1
 8001ff0:	613b      	str	r3, [r7, #16]
 8001ff2:	693a      	ldr	r2, [r7, #16]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	dbd6      	blt.n	8001fa8 <show_echo+0x4c>
		write(fdout, argv[i], strlen(argv[i]) + 1);
		if (i < argc - 1)
			write(fdout, " ", 2);
	}

	if (~flag & _n)
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	43da      	mvns	r2, r3
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	4013      	ands	r3, r2
 8002002:	2b00      	cmp	r3, #0
 8002004:	d006      	beq.n	8002014 <show_echo+0xb8>
		write(fdout, next_line, 3);
 8002006:	4b06      	ldr	r3, [pc, #24]	; (8002020 <show_echo+0xc4>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4618      	mov	r0, r3
 800200c:	4906      	ldr	r1, [pc, #24]	; (8002028 <show_echo+0xcc>)
 800200e:	2203      	movs	r2, #3
 8002010:	f015 ffc4 	bl	8017f9c <write>
}
 8002014:	3718      	adds	r7, #24
 8002016:	46bd      	mov	sp, r7
 8002018:	bdb0      	pop	{r4, r5, r7, pc}
 800201a:	bf00      	nop
 800201c:	0801a498 	.word	0x0801a498
 8002020:	200002dc 	.word	0x200002dc
 8002024:	0801a49c 	.word	0x0801a49c
 8002028:	20000030 	.word	0x20000030

0800202c <show_man_page>:

//man
void show_man_page(int argc, char *argv[])
{
 800202c:	b5b0      	push	{r4, r5, r7, lr}
 800202e:	b084      	sub	sp, #16
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	6039      	str	r1, [r7, #0]
	int i;

	if (argc < 2)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2b01      	cmp	r3, #1
 800203a:	dc00      	bgt.n	800203e <show_man_page+0x12>
		return;
 800203c:	e071      	b.n	8002122 <show_man_page+0xf6>

	for (i = 0; i < CMD_COUNT && strcmp(cmd_data[i].cmd, argv[1]); i++)
 800203e:	2300      	movs	r3, #0
 8002040:	60fb      	str	r3, [r7, #12]
 8002042:	e002      	b.n	800204a <show_man_page+0x1e>
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	3301      	adds	r3, #1
 8002048:	60fb      	str	r3, [r7, #12]
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	2b06      	cmp	r3, #6
 800204e:	dc10      	bgt.n	8002072 <show_man_page+0x46>
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	f44f 6283 	mov.w	r2, #1048	; 0x418
 8002056:	fb02 f203 	mul.w	r2, r2, r3
 800205a:	4b33      	ldr	r3, [pc, #204]	; (8002128 <show_man_page+0xfc>)
 800205c:	441a      	add	r2, r3
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	3304      	adds	r3, #4
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4610      	mov	r0, r2
 8002066:	4619      	mov	r1, r3
 8002068:	f002 fe78 	bl	8004d5c <strcmp>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d1e8      	bne.n	8002044 <show_man_page+0x18>
		;

	if (i >= CMD_COUNT)
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2b06      	cmp	r3, #6
 8002076:	dd00      	ble.n	800207a <show_man_page+0x4e>
		return;
 8002078:	e053      	b.n	8002122 <show_man_page+0xf6>

	write(fdout, "NAME: ", 7);
 800207a:	4b2c      	ldr	r3, [pc, #176]	; (800212c <show_man_page+0x100>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4618      	mov	r0, r3
 8002080:	492b      	ldr	r1, [pc, #172]	; (8002130 <show_man_page+0x104>)
 8002082:	2207      	movs	r2, #7
 8002084:	f015 ff8a 	bl	8017f9c <write>
	write(fdout, cmd_data[i].cmd, strlen(cmd_data[i].cmd) + 1);
 8002088:	4b28      	ldr	r3, [pc, #160]	; (800212c <show_man_page+0x100>)
 800208a:	681d      	ldr	r5, [r3, #0]
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	f44f 6283 	mov.w	r2, #1048	; 0x418
 8002092:	fb02 f203 	mul.w	r2, r2, r3
 8002096:	4b24      	ldr	r3, [pc, #144]	; (8002128 <show_man_page+0xfc>)
 8002098:	18d4      	adds	r4, r2, r3
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	f44f 6283 	mov.w	r2, #1048	; 0x418
 80020a0:	fb02 f203 	mul.w	r2, r2, r3
 80020a4:	4b20      	ldr	r3, [pc, #128]	; (8002128 <show_man_page+0xfc>)
 80020a6:	4413      	add	r3, r2
 80020a8:	4618      	mov	r0, r3
 80020aa:	f002 fe91 	bl	8004dd0 <strlen>
 80020ae:	4603      	mov	r3, r0
 80020b0:	3301      	adds	r3, #1
 80020b2:	4628      	mov	r0, r5
 80020b4:	4621      	mov	r1, r4
 80020b6:	461a      	mov	r2, r3
 80020b8:	f015 ff70 	bl	8017f9c <write>
	write(fdout, next_line, 3);
 80020bc:	4b1b      	ldr	r3, [pc, #108]	; (800212c <show_man_page+0x100>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4618      	mov	r0, r3
 80020c2:	491c      	ldr	r1, [pc, #112]	; (8002134 <show_man_page+0x108>)
 80020c4:	2203      	movs	r2, #3
 80020c6:	f015 ff69 	bl	8017f9c <write>
	write(fdout, "DESCRIPTION: ", 14);
 80020ca:	4b18      	ldr	r3, [pc, #96]	; (800212c <show_man_page+0x100>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4618      	mov	r0, r3
 80020d0:	4919      	ldr	r1, [pc, #100]	; (8002138 <show_man_page+0x10c>)
 80020d2:	220e      	movs	r2, #14
 80020d4:	f015 ff62 	bl	8017f9c <write>
	write(fdout, cmd_data[i].description, strlen(cmd_data[i].description) + 1);
 80020d8:	4b14      	ldr	r3, [pc, #80]	; (800212c <show_man_page+0x100>)
 80020da:	681d      	ldr	r5, [r3, #0]
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	f44f 6283 	mov.w	r2, #1048	; 0x418
 80020e2:	fb02 f303 	mul.w	r3, r2, r3
 80020e6:	f103 0218 	add.w	r2, r3, #24
 80020ea:	4b0f      	ldr	r3, [pc, #60]	; (8002128 <show_man_page+0xfc>)
 80020ec:	18d4      	adds	r4, r2, r3
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	f44f 6283 	mov.w	r2, #1048	; 0x418
 80020f4:	fb02 f303 	mul.w	r3, r2, r3
 80020f8:	f103 0218 	add.w	r2, r3, #24
 80020fc:	4b0a      	ldr	r3, [pc, #40]	; (8002128 <show_man_page+0xfc>)
 80020fe:	4413      	add	r3, r2
 8002100:	4618      	mov	r0, r3
 8002102:	f002 fe65 	bl	8004dd0 <strlen>
 8002106:	4603      	mov	r3, r0
 8002108:	3301      	adds	r3, #1
 800210a:	4628      	mov	r0, r5
 800210c:	4621      	mov	r1, r4
 800210e:	461a      	mov	r2, r3
 8002110:	f015 ff44 	bl	8017f9c <write>
	write(fdout, next_line, 3);
 8002114:	4b05      	ldr	r3, [pc, #20]	; (800212c <show_man_page+0x100>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4618      	mov	r0, r3
 800211a:	4906      	ldr	r1, [pc, #24]	; (8002134 <show_man_page+0x108>)
 800211c:	2203      	movs	r2, #3
 800211e:	f015 ff3d 	bl	8017f9c <write>
}
 8002122:	3710      	adds	r7, #16
 8002124:	46bd      	mov	sp, r7
 8002126:	bdb0      	pop	{r4, r5, r7, pc}
 8002128:	08018708 	.word	0x08018708
 800212c:	200002dc 	.word	0x200002dc
 8002130:	0801a4a0 	.word	0x0801a4a0
 8002134:	20000030 	.word	0x20000030
 8002138:	0801a4a8 	.word	0x0801a4a8

0800213c <show_history>:

void show_history(int argc, char *argv[])
{
 800213c:	b5b0      	push	{r4, r5, r7, lr}
 800213e:	b084      	sub	sp, #16
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	6039      	str	r1, [r7, #0]
	int i;

	for (i = cur_his + 1; i <= cur_his + HISTORY_COUNT; i++) {
 8002146:	4b26      	ldr	r3, [pc, #152]	; (80021e0 <show_history+0xa4>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	3301      	adds	r3, #1
 800214c:	60fb      	str	r3, [r7, #12]
 800214e:	e03c      	b.n	80021ca <show_history+0x8e>
		if (cmd[i % HISTORY_COUNT][0]) {
 8002150:	68fa      	ldr	r2, [r7, #12]
 8002152:	4b24      	ldr	r3, [pc, #144]	; (80021e4 <show_history+0xa8>)
 8002154:	4013      	ands	r3, r2
 8002156:	2b00      	cmp	r3, #0
 8002158:	da03      	bge.n	8002162 <show_history+0x26>
 800215a:	3b01      	subs	r3, #1
 800215c:	f063 0307 	orn	r3, r3, #7
 8002160:	3301      	adds	r3, #1
 8002162:	4a21      	ldr	r2, [pc, #132]	; (80021e8 <show_history+0xac>)
 8002164:	019b      	lsls	r3, r3, #6
 8002166:	4413      	add	r3, r2
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d02a      	beq.n	80021c4 <show_history+0x88>
			write(fdout, cmd[i % HISTORY_COUNT], strlen(cmd[i % HISTORY_COUNT]) + 1);
 800216e:	4b1f      	ldr	r3, [pc, #124]	; (80021ec <show_history+0xb0>)
 8002170:	681d      	ldr	r5, [r3, #0]
 8002172:	68fa      	ldr	r2, [r7, #12]
 8002174:	4b1b      	ldr	r3, [pc, #108]	; (80021e4 <show_history+0xa8>)
 8002176:	4013      	ands	r3, r2
 8002178:	2b00      	cmp	r3, #0
 800217a:	da03      	bge.n	8002184 <show_history+0x48>
 800217c:	3b01      	subs	r3, #1
 800217e:	f063 0307 	orn	r3, r3, #7
 8002182:	3301      	adds	r3, #1
 8002184:	019a      	lsls	r2, r3, #6
 8002186:	4b18      	ldr	r3, [pc, #96]	; (80021e8 <show_history+0xac>)
 8002188:	18d4      	adds	r4, r2, r3
 800218a:	68fa      	ldr	r2, [r7, #12]
 800218c:	4b15      	ldr	r3, [pc, #84]	; (80021e4 <show_history+0xa8>)
 800218e:	4013      	ands	r3, r2
 8002190:	2b00      	cmp	r3, #0
 8002192:	da03      	bge.n	800219c <show_history+0x60>
 8002194:	3b01      	subs	r3, #1
 8002196:	f063 0307 	orn	r3, r3, #7
 800219a:	3301      	adds	r3, #1
 800219c:	019a      	lsls	r2, r3, #6
 800219e:	4b12      	ldr	r3, [pc, #72]	; (80021e8 <show_history+0xac>)
 80021a0:	4413      	add	r3, r2
 80021a2:	4618      	mov	r0, r3
 80021a4:	f002 fe14 	bl	8004dd0 <strlen>
 80021a8:	4603      	mov	r3, r0
 80021aa:	3301      	adds	r3, #1
 80021ac:	4628      	mov	r0, r5
 80021ae:	4621      	mov	r1, r4
 80021b0:	461a      	mov	r2, r3
 80021b2:	f015 fef3 	bl	8017f9c <write>
			write(fdout, next_line, 3);
 80021b6:	4b0d      	ldr	r3, [pc, #52]	; (80021ec <show_history+0xb0>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4618      	mov	r0, r3
 80021bc:	490c      	ldr	r1, [pc, #48]	; (80021f0 <show_history+0xb4>)
 80021be:	2203      	movs	r2, #3
 80021c0:	f015 feec 	bl	8017f9c <write>

void show_history(int argc, char *argv[])
{
	int i;

	for (i = cur_his + 1; i <= cur_his + HISTORY_COUNT; i++) {
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	3301      	adds	r3, #1
 80021c8:	60fb      	str	r3, [r7, #12]
 80021ca:	4b05      	ldr	r3, [pc, #20]	; (80021e0 <show_history+0xa4>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f103 0208 	add.w	r2, r3, #8
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	429a      	cmp	r2, r3
 80021d6:	dabb      	bge.n	8002150 <show_history+0x14>
		if (cmd[i % HISTORY_COUNT][0]) {
			write(fdout, cmd[i % HISTORY_COUNT], strlen(cmd[i % HISTORY_COUNT]) + 1);
			write(fdout, next_line, 3);
		}
	}
}
 80021d8:	3710      	adds	r7, #16
 80021da:	46bd      	mov	sp, r7
 80021dc:	bdb0      	pop	{r4, r5, r7, pc}
 80021de:	bf00      	nop
 80021e0:	200002d8 	.word	0x200002d8
 80021e4:	80000007 	.word	0x80000007
 80021e8:	200000d8 	.word	0x200000d8
 80021ec:	200002dc 	.word	0x200002dc
 80021f0:	20000030 	.word	0x20000030

080021f4 <write_blank>:

void write_blank(int blank_num)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
	char blank[] = " ";
 80021fc:	2320      	movs	r3, #32
 80021fe:	813b      	strh	r3, [r7, #8]
	int blank_count = 0;
 8002200:	2300      	movs	r3, #0
 8002202:	60fb      	str	r3, [r7, #12]

	while (blank_count <= blank_num) {
 8002204:	e00b      	b.n	800221e <write_blank+0x2a>
		write(fdout, blank, sizeof(blank));
 8002206:	4b09      	ldr	r3, [pc, #36]	; (800222c <write_blank+0x38>)
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	f107 0308 	add.w	r3, r7, #8
 800220e:	4610      	mov	r0, r2
 8002210:	4619      	mov	r1, r3
 8002212:	2202      	movs	r2, #2
 8002214:	f015 fec2 	bl	8017f9c <write>
		blank_count++;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	3301      	adds	r3, #1
 800221c:	60fb      	str	r3, [r7, #12]
void write_blank(int blank_num)
{
	char blank[] = " ";
	int blank_count = 0;

	while (blank_count <= blank_num) {
 800221e:	68fa      	ldr	r2, [r7, #12]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	429a      	cmp	r2, r3
 8002224:	ddef      	ble.n	8002206 <write_blank+0x12>
		write(fdout, blank, sizeof(blank));
		blank_count++;
	}
}
 8002226:	3710      	adds	r7, #16
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	200002dc 	.word	0x200002dc

08002230 <hexof>:

char hexof(int dec)
{
 8002230:	b4b0      	push	{r4, r5, r7}
 8002232:	b089      	sub	sp, #36	; 0x24
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
    const char hextab[] = "0123456789abcdef";
 8002238:	4b0c      	ldr	r3, [pc, #48]	; (800226c <hexof+0x3c>)
 800223a:	f107 040c 	add.w	r4, r7, #12
 800223e:	461d      	mov	r5, r3
 8002240:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002242:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002244:	682b      	ldr	r3, [r5, #0]
 8002246:	7023      	strb	r3, [r4, #0]

    if (dec < 0 || dec > 15)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2b00      	cmp	r3, #0
 800224c:	db02      	blt.n	8002254 <hexof+0x24>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2b0f      	cmp	r3, #15
 8002252:	dd01      	ble.n	8002258 <hexof+0x28>
        return -1;
 8002254:	23ff      	movs	r3, #255	; 0xff
 8002256:	e004      	b.n	8002262 <hexof+0x32>

    return hextab[dec];
 8002258:	f107 020c 	add.w	r2, r7, #12
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	4413      	add	r3, r2
 8002260:	781b      	ldrb	r3, [r3, #0]
}
 8002262:	4618      	mov	r0, r3
 8002264:	3724      	adds	r7, #36	; 0x24
 8002266:	46bd      	mov	sp, r7
 8002268:	bcb0      	pop	{r4, r5, r7}
 800226a:	4770      	bx	lr
 800226c:	0801a4b8 	.word	0x0801a4b8

08002270 <char_filter>:

char char_filter(char c, char fallback)
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	4602      	mov	r2, r0
 8002278:	460b      	mov	r3, r1
 800227a:	71fa      	strb	r2, [r7, #7]
 800227c:	71bb      	strb	r3, [r7, #6]
    if (c < 0x20 || c > 0x7E)
 800227e:	79fb      	ldrb	r3, [r7, #7]
 8002280:	2b1f      	cmp	r3, #31
 8002282:	d902      	bls.n	800228a <char_filter+0x1a>
 8002284:	79fb      	ldrb	r3, [r7, #7]
 8002286:	2b7e      	cmp	r3, #126	; 0x7e
 8002288:	d901      	bls.n	800228e <char_filter+0x1e>
        return fallback;
 800228a:	79bb      	ldrb	r3, [r7, #6]
 800228c:	e000      	b.n	8002290 <char_filter+0x20>

    return c;
 800228e:	79fb      	ldrb	r3, [r7, #7]
}
 8002290:	4618      	mov	r0, r3
 8002292:	370c      	adds	r7, #12
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr

0800229c <show_xxd>:

#define XXD_WIDTH 0x10

//xxd
void show_xxd(int argc, char *argv[])
{
 800229c:	b5b0      	push	{r4, r5, r7, lr}
 800229e:	b08c      	sub	sp, #48	; 0x30
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	6039      	str	r1, [r7, #0]
    int readfd = -1;
 80022a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80022aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    char buf[XXD_WIDTH];
    char ch;
    char chout[2] = {0};
 80022ac:	2300      	movs	r3, #0
 80022ae:	81bb      	strh	r3, [r7, #12]
    int pos = 0;
 80022b0:	2300      	movs	r3, #0
 80022b2:	62bb      	str	r3, [r7, #40]	; 0x28
    int size;
    int i;

    if (argc == 1) { /* fallback to stdin */
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d103      	bne.n	80022c2 <show_xxd+0x26>
        readfd = fdin;
 80022ba:	4ba3      	ldr	r3, [pc, #652]	; (8002548 <show_xxd+0x2ac>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022c0:	e02b      	b.n	800231a <show_xxd+0x7e>
    }
    else { /* open file of argv[1] */
        readfd = open(argv[1], 0);
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	3304      	adds	r3, #4
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4618      	mov	r0, r3
 80022ca:	2100      	movs	r1, #0
 80022cc:	f7fe fdda 	bl	8000e84 <open>
 80022d0:	62f8      	str	r0, [r7, #44]	; 0x2c

        if (readfd < 0) { /* Open error */
 80022d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	da20      	bge.n	800231a <show_xxd+0x7e>
            write(fdout, "xxd: ", 6);
 80022d8:	4b9c      	ldr	r3, [pc, #624]	; (800254c <show_xxd+0x2b0>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4618      	mov	r0, r3
 80022de:	499c      	ldr	r1, [pc, #624]	; (8002550 <show_xxd+0x2b4>)
 80022e0:	2206      	movs	r2, #6
 80022e2:	f015 fe5b 	bl	8017f9c <write>
            write(fdout, argv[1], strlen(argv[1]) + 1);
 80022e6:	4b99      	ldr	r3, [pc, #612]	; (800254c <show_xxd+0x2b0>)
 80022e8:	681d      	ldr	r5, [r3, #0]
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	3304      	adds	r3, #4
 80022ee:	681c      	ldr	r4, [r3, #0]
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	3304      	adds	r3, #4
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4618      	mov	r0, r3
 80022f8:	f002 fd6a 	bl	8004dd0 <strlen>
 80022fc:	4603      	mov	r3, r0
 80022fe:	3301      	adds	r3, #1
 8002300:	4628      	mov	r0, r5
 8002302:	4621      	mov	r1, r4
 8002304:	461a      	mov	r2, r3
 8002306:	f015 fe49 	bl	8017f9c <write>
            write(fdout, ": No such file or directory\r\n", 31);
 800230a:	4b90      	ldr	r3, [pc, #576]	; (800254c <show_xxd+0x2b0>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4618      	mov	r0, r3
 8002310:	4990      	ldr	r1, [pc, #576]	; (8002554 <show_xxd+0x2b8>)
 8002312:	221f      	movs	r2, #31
 8002314:	f015 fe42 	bl	8017f9c <write>
 8002318:	e112      	b.n	8002540 <show_xxd+0x2a4>
            return;
        }
    }

    lseek(readfd, 0, SEEK_SET);
 800231a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800231c:	2100      	movs	r1, #0
 800231e:	2201      	movs	r2, #1
 8002320:	f015 fe6d 	bl	8017ffe <lseek>
    while ((size = read(readfd, &ch, sizeof(ch))) && size != -1) {
 8002324:	e09e      	b.n	8002464 <show_xxd+0x1c8>
        if (ch != -1 && ch != 0x04) { /* has something read */
 8002326:	7bfb      	ldrb	r3, [r7, #15]
 8002328:	2b04      	cmp	r3, #4
 800232a:	f000 809a 	beq.w	8002462 <show_xxd+0x1c6>

            if (pos % XXD_WIDTH == 0) { /* new line, print address */
 800232e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002330:	f003 030f 	and.w	r3, r3, #15
 8002334:	2b00      	cmp	r3, #0
 8002336:	d123      	bne.n	8002380 <show_xxd+0xe4>
                for (i = sizeof(pos) * 8 - 4; i >= 0; i -= 4) {
 8002338:	231c      	movs	r3, #28
 800233a:	627b      	str	r3, [r7, #36]	; 0x24
 800233c:	e016      	b.n	800236c <show_xxd+0xd0>
                    chout[0] = hexof((pos >> i) & 0xF);
 800233e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002342:	fa42 f303 	asr.w	r3, r2, r3
 8002346:	f003 030f 	and.w	r3, r3, #15
 800234a:	4618      	mov	r0, r3
 800234c:	f7ff ff70 	bl	8002230 <hexof>
 8002350:	4603      	mov	r3, r0
 8002352:	733b      	strb	r3, [r7, #12]
                    write(fdout, chout, 2);
 8002354:	4b7d      	ldr	r3, [pc, #500]	; (800254c <show_xxd+0x2b0>)
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	f107 030c 	add.w	r3, r7, #12
 800235c:	4610      	mov	r0, r2
 800235e:	4619      	mov	r1, r3
 8002360:	2202      	movs	r2, #2
 8002362:	f015 fe1b 	bl	8017f9c <write>
    lseek(readfd, 0, SEEK_SET);
    while ((size = read(readfd, &ch, sizeof(ch))) && size != -1) {
        if (ch != -1 && ch != 0x04) { /* has something read */

            if (pos % XXD_WIDTH == 0) { /* new line, print address */
                for (i = sizeof(pos) * 8 - 4; i >= 0; i -= 4) {
 8002366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002368:	3b04      	subs	r3, #4
 800236a:	627b      	str	r3, [r7, #36]	; 0x24
 800236c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236e:	2b00      	cmp	r3, #0
 8002370:	dae5      	bge.n	800233e <show_xxd+0xa2>
                    chout[0] = hexof((pos >> i) & 0xF);
                    write(fdout, chout, 2);
                }

                write(fdout, ":", 2);
 8002372:	4b76      	ldr	r3, [pc, #472]	; (800254c <show_xxd+0x2b0>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4618      	mov	r0, r3
 8002378:	4977      	ldr	r1, [pc, #476]	; (8002558 <show_xxd+0x2bc>)
 800237a:	2202      	movs	r2, #2
 800237c:	f015 fe0e 	bl	8017f9c <write>
            }

            if (pos % 2 == 0) { /* whitespace for each 2 bytes */
 8002380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002382:	f003 0301 	and.w	r3, r3, #1
 8002386:	2b00      	cmp	r3, #0
 8002388:	d106      	bne.n	8002398 <show_xxd+0xfc>
                write(fdout, " ", 2);
 800238a:	4b70      	ldr	r3, [pc, #448]	; (800254c <show_xxd+0x2b0>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4618      	mov	r0, r3
 8002390:	4972      	ldr	r1, [pc, #456]	; (800255c <show_xxd+0x2c0>)
 8002392:	2202      	movs	r2, #2
 8002394:	f015 fe02 	bl	8017f9c <write>
            }

            /* higher bits */
            chout[0] = hexof(ch >> 4);
 8002398:	7bfb      	ldrb	r3, [r7, #15]
 800239a:	091b      	lsrs	r3, r3, #4
 800239c:	b2db      	uxtb	r3, r3
 800239e:	4618      	mov	r0, r3
 80023a0:	f7ff ff46 	bl	8002230 <hexof>
 80023a4:	4603      	mov	r3, r0
 80023a6:	733b      	strb	r3, [r7, #12]
            write(fdout, chout, 2);
 80023a8:	4b68      	ldr	r3, [pc, #416]	; (800254c <show_xxd+0x2b0>)
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	f107 030c 	add.w	r3, r7, #12
 80023b0:	4610      	mov	r0, r2
 80023b2:	4619      	mov	r1, r3
 80023b4:	2202      	movs	r2, #2
 80023b6:	f015 fdf1 	bl	8017f9c <write>

            /* lower bits*/
            chout[0] = hexof(ch & 0xF);
 80023ba:	7bfb      	ldrb	r3, [r7, #15]
 80023bc:	f003 030f 	and.w	r3, r3, #15
 80023c0:	4618      	mov	r0, r3
 80023c2:	f7ff ff35 	bl	8002230 <hexof>
 80023c6:	4603      	mov	r3, r0
 80023c8:	733b      	strb	r3, [r7, #12]
            write(fdout, chout, 2);
 80023ca:	4b60      	ldr	r3, [pc, #384]	; (800254c <show_xxd+0x2b0>)
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	f107 030c 	add.w	r3, r7, #12
 80023d2:	4610      	mov	r0, r2
 80023d4:	4619      	mov	r1, r3
 80023d6:	2202      	movs	r2, #2
 80023d8:	f015 fde0 	bl	8017f9c <write>

            /* store in buffer */
            buf[pos % XXD_WIDTH] = ch;
 80023dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80023de:	4b60      	ldr	r3, [pc, #384]	; (8002560 <show_xxd+0x2c4>)
 80023e0:	4013      	ands	r3, r2
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	da03      	bge.n	80023ee <show_xxd+0x152>
 80023e6:	3b01      	subs	r3, #1
 80023e8:	f063 030f 	orn	r3, r3, #15
 80023ec:	3301      	adds	r3, #1
 80023ee:	7bfa      	ldrb	r2, [r7, #15]
 80023f0:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80023f4:	440b      	add	r3, r1
 80023f6:	f803 2c20 	strb.w	r2, [r3, #-32]

            pos++;
 80023fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023fc:	3301      	adds	r3, #1
 80023fe:	62bb      	str	r3, [r7, #40]	; 0x28

            if (pos % XXD_WIDTH == 0) { /* end of line */
 8002400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002402:	f003 030f 	and.w	r3, r3, #15
 8002406:	2b00      	cmp	r3, #0
 8002408:	d12c      	bne.n	8002464 <show_xxd+0x1c8>
                write(fdout, "  ", 3);
 800240a:	4b50      	ldr	r3, [pc, #320]	; (800254c <show_xxd+0x2b0>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4618      	mov	r0, r3
 8002410:	4954      	ldr	r1, [pc, #336]	; (8002564 <show_xxd+0x2c8>)
 8002412:	2203      	movs	r2, #3
 8002414:	f015 fdc2 	bl	8017f9c <write>

                for (i = 0; i < XXD_WIDTH; i++) {
 8002418:	2300      	movs	r3, #0
 800241a:	627b      	str	r3, [r7, #36]	; 0x24
 800241c:	e016      	b.n	800244c <show_xxd+0x1b0>
                    chout[0] = char_filter(buf[i], '.');
 800241e:	f107 0210 	add.w	r2, r7, #16
 8002422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002424:	4413      	add	r3, r2
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	4618      	mov	r0, r3
 800242a:	212e      	movs	r1, #46	; 0x2e
 800242c:	f7ff ff20 	bl	8002270 <char_filter>
 8002430:	4603      	mov	r3, r0
 8002432:	733b      	strb	r3, [r7, #12]
                    write(fdout, chout, 2);
 8002434:	4b45      	ldr	r3, [pc, #276]	; (800254c <show_xxd+0x2b0>)
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	f107 030c 	add.w	r3, r7, #12
 800243c:	4610      	mov	r0, r2
 800243e:	4619      	mov	r1, r3
 8002440:	2202      	movs	r2, #2
 8002442:	f015 fdab 	bl	8017f9c <write>
            pos++;

            if (pos % XXD_WIDTH == 0) { /* end of line */
                write(fdout, "  ", 3);

                for (i = 0; i < XXD_WIDTH; i++) {
 8002446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002448:	3301      	adds	r3, #1
 800244a:	627b      	str	r3, [r7, #36]	; 0x24
 800244c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244e:	2b0f      	cmp	r3, #15
 8002450:	dde5      	ble.n	800241e <show_xxd+0x182>
                    chout[0] = char_filter(buf[i], '.');
                    write(fdout, chout, 2);
                }

                write(fdout, "\r\n", 3);
 8002452:	4b3e      	ldr	r3, [pc, #248]	; (800254c <show_xxd+0x2b0>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4618      	mov	r0, r3
 8002458:	4943      	ldr	r1, [pc, #268]	; (8002568 <show_xxd+0x2cc>)
 800245a:	2203      	movs	r2, #3
 800245c:	f015 fd9e 	bl	8017f9c <write>
 8002460:	e000      	b.n	8002464 <show_xxd+0x1c8>
            }
        }
        else { /* EOF */
            break;
 8002462:	e00f      	b.n	8002484 <show_xxd+0x1e8>
            return;
        }
    }

    lseek(readfd, 0, SEEK_SET);
    while ((size = read(readfd, &ch, sizeof(ch))) && size != -1) {
 8002464:	f107 030f 	add.w	r3, r7, #15
 8002468:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800246a:	4619      	mov	r1, r3
 800246c:	2201      	movs	r2, #1
 800246e:	f015 fd9c 	bl	8017faa <read>
 8002472:	6238      	str	r0, [r7, #32]
 8002474:	6a3b      	ldr	r3, [r7, #32]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d004      	beq.n	8002484 <show_xxd+0x1e8>
 800247a:	6a3b      	ldr	r3, [r7, #32]
 800247c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002480:	f47f af51 	bne.w	8002326 <show_xxd+0x8a>
        else { /* EOF */
            break;
        }
    }

    if (pos % XXD_WIDTH != 0) { /* rest */
 8002484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002486:	f003 030f 	and.w	r3, r3, #15
 800248a:	2b00      	cmp	r3, #0
 800248c:	d058      	beq.n	8002540 <show_xxd+0x2a4>
        /* align */
        for (i = pos % XXD_WIDTH; i < XXD_WIDTH; i++) {
 800248e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002490:	4b33      	ldr	r3, [pc, #204]	; (8002560 <show_xxd+0x2c4>)
 8002492:	4013      	ands	r3, r2
 8002494:	2b00      	cmp	r3, #0
 8002496:	da03      	bge.n	80024a0 <show_xxd+0x204>
 8002498:	3b01      	subs	r3, #1
 800249a:	f063 030f 	orn	r3, r3, #15
 800249e:	3301      	adds	r3, #1
 80024a0:	627b      	str	r3, [r7, #36]	; 0x24
 80024a2:	e015      	b.n	80024d0 <show_xxd+0x234>
            if (i % 2 == 0) { /* whitespace for each 2 bytes */
 80024a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a6:	f003 0301 	and.w	r3, r3, #1
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d106      	bne.n	80024bc <show_xxd+0x220>
                write(fdout, " ", 2);
 80024ae:	4b27      	ldr	r3, [pc, #156]	; (800254c <show_xxd+0x2b0>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4618      	mov	r0, r3
 80024b4:	4929      	ldr	r1, [pc, #164]	; (800255c <show_xxd+0x2c0>)
 80024b6:	2202      	movs	r2, #2
 80024b8:	f015 fd70 	bl	8017f9c <write>
            }
            write(fdout, "  ", 3);
 80024bc:	4b23      	ldr	r3, [pc, #140]	; (800254c <show_xxd+0x2b0>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4618      	mov	r0, r3
 80024c2:	4928      	ldr	r1, [pc, #160]	; (8002564 <show_xxd+0x2c8>)
 80024c4:	2203      	movs	r2, #3
 80024c6:	f015 fd69 	bl	8017f9c <write>
        }
    }

    if (pos % XXD_WIDTH != 0) { /* rest */
        /* align */
        for (i = pos % XXD_WIDTH; i < XXD_WIDTH; i++) {
 80024ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024cc:	3301      	adds	r3, #1
 80024ce:	627b      	str	r3, [r7, #36]	; 0x24
 80024d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d2:	2b0f      	cmp	r3, #15
 80024d4:	dde6      	ble.n	80024a4 <show_xxd+0x208>
                write(fdout, " ", 2);
            }
            write(fdout, "  ", 3);
        }

        write(fdout, "  ", 3);
 80024d6:	4b1d      	ldr	r3, [pc, #116]	; (800254c <show_xxd+0x2b0>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4618      	mov	r0, r3
 80024dc:	4921      	ldr	r1, [pc, #132]	; (8002564 <show_xxd+0x2c8>)
 80024de:	2203      	movs	r2, #3
 80024e0:	f015 fd5c 	bl	8017f9c <write>

        for (i = 0; i < pos % XXD_WIDTH; i++) {
 80024e4:	2300      	movs	r3, #0
 80024e6:	627b      	str	r3, [r7, #36]	; 0x24
 80024e8:	e016      	b.n	8002518 <show_xxd+0x27c>
            chout[0] = char_filter(buf[i], '.');
 80024ea:	f107 0210 	add.w	r2, r7, #16
 80024ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f0:	4413      	add	r3, r2
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	4618      	mov	r0, r3
 80024f6:	212e      	movs	r1, #46	; 0x2e
 80024f8:	f7ff feba 	bl	8002270 <char_filter>
 80024fc:	4603      	mov	r3, r0
 80024fe:	733b      	strb	r3, [r7, #12]
            write(fdout, chout, 2);
 8002500:	4b12      	ldr	r3, [pc, #72]	; (800254c <show_xxd+0x2b0>)
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	f107 030c 	add.w	r3, r7, #12
 8002508:	4610      	mov	r0, r2
 800250a:	4619      	mov	r1, r3
 800250c:	2202      	movs	r2, #2
 800250e:	f015 fd45 	bl	8017f9c <write>
            write(fdout, "  ", 3);
        }

        write(fdout, "  ", 3);

        for (i = 0; i < pos % XXD_WIDTH; i++) {
 8002512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002514:	3301      	adds	r3, #1
 8002516:	627b      	str	r3, [r7, #36]	; 0x24
 8002518:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800251a:	4b11      	ldr	r3, [pc, #68]	; (8002560 <show_xxd+0x2c4>)
 800251c:	4013      	ands	r3, r2
 800251e:	2b00      	cmp	r3, #0
 8002520:	da03      	bge.n	800252a <show_xxd+0x28e>
 8002522:	3b01      	subs	r3, #1
 8002524:	f063 030f 	orn	r3, r3, #15
 8002528:	3301      	adds	r3, #1
 800252a:	461a      	mov	r2, r3
 800252c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252e:	429a      	cmp	r2, r3
 8002530:	dcdb      	bgt.n	80024ea <show_xxd+0x24e>
            chout[0] = char_filter(buf[i], '.');
            write(fdout, chout, 2);
        }

        write(fdout, "\r\n", 3);
 8002532:	4b06      	ldr	r3, [pc, #24]	; (800254c <show_xxd+0x2b0>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4618      	mov	r0, r3
 8002538:	490b      	ldr	r1, [pc, #44]	; (8002568 <show_xxd+0x2cc>)
 800253a:	2203      	movs	r2, #3
 800253c:	f015 fd2e 	bl	8017f9c <write>
    }
}
 8002540:	3730      	adds	r7, #48	; 0x30
 8002542:	46bd      	mov	sp, r7
 8002544:	bdb0      	pop	{r4, r5, r7, pc}
 8002546:	bf00      	nop
 8002548:	200002e0 	.word	0x200002e0
 800254c:	200002dc 	.word	0x200002dc
 8002550:	0801a4cc 	.word	0x0801a4cc
 8002554:	0801a4d4 	.word	0x0801a4d4
 8002558:	0801a4f4 	.word	0x0801a4f4
 800255c:	0801a49c 	.word	0x0801a49c
 8002560:	8000000f 	.word	0x8000000f
 8002564:	0801a4f8 	.word	0x0801a4f8
 8002568:	0801a4fc 	.word	0x0801a4fc

0800256c <first>:


void first()
{
 800256c:	b580      	push	{r7, lr}
 800256e:	af00      	add	r7, sp, #0
	if (!fork()) setpriority(0, 0), pathserver();
 8002570:	f015 fd06 	bl	8017f80 <fork>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d105      	bne.n	8002586 <first+0x1a>
 800257a:	2000      	movs	r0, #0
 800257c:	2100      	movs	r1, #0
 800257e:	f015 fd29 	bl	8017fd4 <setpriority>
 8002582:	f000 ffe1 	bl	8003548 <pathserver>
	if (!fork()) setpriority(0, 0), UI_task();
 8002586:	f015 fcfb 	bl	8017f80 <fork>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d105      	bne.n	800259c <first+0x30>
 8002590:	2000      	movs	r0, #0
 8002592:	2100      	movs	r1, #0
 8002594:	f015 fd1e 	bl	8017fd4 <setpriority>
 8002598:	f7ff f8ba 	bl	8001710 <UI_task>

	setpriority(0, PRIORITY_LIMIT);
 800259c:	2000      	movs	r0, #0
 800259e:	2127      	movs	r1, #39	; 0x27
 80025a0:	f015 fd18 	bl	8017fd4 <setpriority>

	mount("/dev/rom0", "/", ROMFS_TYPE, 0);
 80025a4:	4803      	ldr	r0, [pc, #12]	; (80025b4 <first+0x48>)
 80025a6:	4904      	ldr	r1, [pc, #16]	; (80025b8 <first+0x4c>)
 80025a8:	4a04      	ldr	r2, [pc, #16]	; (80025bc <first+0x50>)
 80025aa:	2300      	movs	r3, #0
 80025ac:	f001 fbda 	bl	8003d64 <mount>

	while(1);
 80025b0:	e7fe      	b.n	80025b0 <first+0x44>
 80025b2:	bf00      	nop
 80025b4:	0801a500 	.word	0x0801a500
 80025b8:	0801a50c 	.word	0x0801a50c
 80025bc:	0801a510 	.word	0x0801a510

080025c0 <intr_release>:
#define INTR_EVENT_REVERSE(event) ((event) - FILE_LIMIT - 15)
#define TIME_EVENT (FILE_LIMIT + INTR_LIMIT)

int intr_release(struct event_monitor *monitor, int event,
                 struct task_control_block *task, void *data)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b085      	sub	sp, #20
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	60f8      	str	r0, [r7, #12]
 80025c8:	60b9      	str	r1, [r7, #8]
 80025ca:	607a      	str	r2, [r7, #4]
 80025cc:	603b      	str	r3, [r7, #0]
    return 1;
 80025ce:	2301      	movs	r3, #1
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3714      	adds	r7, #20
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr

080025dc <time_release>:

int time_release(struct event_monitor *monitor, int event,
                 struct task_control_block *task, void *data)
{
 80025dc:	b480      	push	{r7}
 80025de:	b087      	sub	sp, #28
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	60f8      	str	r0, [r7, #12]
 80025e4:	60b9      	str	r1, [r7, #8]
 80025e6:	607a      	str	r2, [r7, #4]
 80025e8:	603b      	str	r3, [r7, #0]
    int *tick_count = data;
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	617b      	str	r3, [r7, #20]
    return task->stack->r0 == *tick_count;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	429a      	cmp	r2, r3
 80025fa:	bf14      	ite	ne
 80025fc:	2300      	movne	r3, #0
 80025fe:	2301      	moveq	r3, #1
 8002600:	b2db      	uxtb	r3, r3
}
 8002602:	4618      	mov	r0, r3
 8002604:	371c      	adds	r7, #28
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr
 800260e:	bf00      	nop

08002610 <main>:
struct list ready_list[PRIORITY_LIMIT + 1];  /* [0 ... 39] */
struct event events[EVENT_LIMIT];


int main()
{
 8002610:	b5b0      	push	{r4, r5, r7, lr}
 8002612:	b096      	sub	sp, #88	; 0x58
 8002614:	af02      	add	r7, sp, #8
	//struct task_control_block tasks[TASK_LIMIT];
	struct memory_pool memory_pool;
	struct event_monitor event_monitor;
	//size_t task_count = 0;
	size_t current_task = 0;
 8002616:	2300      	movs	r3, #0
 8002618:	64fb      	str	r3, [r7, #76]	; 0x4c
	int i;
	struct list *list;
	struct task_control_block *task;
	int timeup;
	unsigned int tick_count = 0;
 800261a:	2300      	movs	r3, #0
 800261c:	607b      	str	r3, [r7, #4]

	SysTick_Config(configCPU_CLOCK_HZ / configTICK_RATE_HZ);
 800261e:	4889      	ldr	r0, [pc, #548]	; (8002844 <main+0x234>)
 8002620:	f7fe fe56 	bl	80012d0 <SysTick_Config>

	init_rs232();
 8002624:	f002 fc74 	bl	8004f10 <init_rs232>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8002628:	b662      	cpsie	i
	__enable_irq();

    /* Initialize memory pool */
    memory_pool_init(&memory_pool, MEM_LIMIT, memory_space);
 800262a:	f107 0310 	add.w	r3, r7, #16
 800262e:	4618      	mov	r0, r3
 8002630:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002634:	4a84      	ldr	r2, [pc, #528]	; (8002848 <main+0x238>)
 8002636:	f000 fdb5 	bl	80031a4 <memory_pool_init>

	/* Initialize all files */
	for (i = 0; i < FILE_LIMIT; i++)
 800263a:	2300      	movs	r3, #0
 800263c:	64bb      	str	r3, [r7, #72]	; 0x48
 800263e:	e007      	b.n	8002650 <main+0x40>
		files[i] = NULL;
 8002640:	4b82      	ldr	r3, [pc, #520]	; (800284c <main+0x23c>)
 8002642:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002644:	2100      	movs	r1, #0
 8002646:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Initialize memory pool */
    memory_pool_init(&memory_pool, MEM_LIMIT, memory_space);

	/* Initialize all files */
	for (i = 0; i < FILE_LIMIT; i++)
 800264a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800264c:	3301      	adds	r3, #1
 800264e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002650:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002652:	2b1f      	cmp	r3, #31
 8002654:	ddf4      	ble.n	8002640 <main+0x30>
		files[i] = NULL;

	/* Initialize ready lists */
	for (i = 0; i <= PRIORITY_LIMIT; i++)
 8002656:	2300      	movs	r3, #0
 8002658:	64bb      	str	r3, [r7, #72]	; 0x48
 800265a:	e009      	b.n	8002670 <main+0x60>
		list_init(&ready_list[i]);
 800265c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800265e:	00da      	lsls	r2, r3, #3
 8002660:	4b7b      	ldr	r3, [pc, #492]	; (8002850 <main+0x240>)
 8002662:	4413      	add	r3, r2
 8002664:	4618      	mov	r0, r3
 8002666:	f000 fcff 	bl	8003068 <list_init>
	/* Initialize all files */
	for (i = 0; i < FILE_LIMIT; i++)
		files[i] = NULL;

	/* Initialize ready lists */
	for (i = 0; i <= PRIORITY_LIMIT; i++)
 800266a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800266c:	3301      	adds	r3, #1
 800266e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002670:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002672:	2b27      	cmp	r3, #39	; 0x27
 8002674:	ddf2      	ble.n	800265c <main+0x4c>
		list_init(&ready_list[i]);

    /* Initialise event monitor */
    event_monitor_init(&event_monitor, events, ready_list);
 8002676:	f107 0308 	add.w	r3, r7, #8
 800267a:	4618      	mov	r0, r3
 800267c:	4975      	ldr	r1, [pc, #468]	; (8002854 <main+0x244>)
 800267e:	4a74      	ldr	r2, [pc, #464]	; (8002850 <main+0x240>)
 8002680:	f7fe f934 	bl	80008ec <event_monitor_init>

	/* Initialize fifos */
	for (i = 0; i <= PATHSERVER_FD; i++)
 8002684:	2300      	movs	r3, #0
 8002686:	64bb      	str	r3, [r7, #72]	; 0x48
 8002688:	e00f      	b.n	80026aa <main+0x9a>
		file_mknod(i, -1, files, S_IFIFO, &memory_pool, &event_monitor);
 800268a:	f107 0310 	add.w	r3, r7, #16
 800268e:	9300      	str	r3, [sp, #0]
 8002690:	f107 0308 	add.w	r3, r7, #8
 8002694:	9301      	str	r3, [sp, #4]
 8002696:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002698:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800269c:	4a6b      	ldr	r2, [pc, #428]	; (800284c <main+0x23c>)
 800269e:	2301      	movs	r3, #1
 80026a0:	f7fe fd0e 	bl	80010c0 <file_mknod>

    /* Initialise event monitor */
    event_monitor_init(&event_monitor, events, ready_list);

	/* Initialize fifos */
	for (i = 0; i <= PATHSERVER_FD; i++)
 80026a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026a6:	3301      	adds	r3, #1
 80026a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80026aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026ac:	2b0b      	cmp	r3, #11
 80026ae:	ddec      	ble.n	800268a <main+0x7a>
		file_mknod(i, -1, files, S_IFIFO, &memory_pool, &event_monitor);

    /* Register IRQ events, see INTR_LIMIT */
	for (i = -15; i < INTR_LIMIT - 15; i++)
 80026b0:	f06f 030e 	mvn.w	r3, #14
 80026b4:	64bb      	str	r3, [r7, #72]	; 0x48
 80026b6:	e00c      	b.n	80026d2 <main+0xc2>
	    event_monitor_register(&event_monitor, INTR_EVENT(i), intr_release, 0);
 80026b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026ba:	332f      	adds	r3, #47	; 0x2f
 80026bc:	f107 0208 	add.w	r2, r7, #8
 80026c0:	4610      	mov	r0, r2
 80026c2:	4619      	mov	r1, r3
 80026c4:	4a64      	ldr	r2, [pc, #400]	; (8002858 <main+0x248>)
 80026c6:	2300      	movs	r3, #0
 80026c8:	f7fe f97e 	bl	80009c8 <event_monitor_register>
	/* Initialize fifos */
	for (i = 0; i <= PATHSERVER_FD; i++)
		file_mknod(i, -1, files, S_IFIFO, &memory_pool, &event_monitor);

    /* Register IRQ events, see INTR_LIMIT */
	for (i = -15; i < INTR_LIMIT - 15; i++)
 80026cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026ce:	3301      	adds	r3, #1
 80026d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80026d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026d4:	2b5a      	cmp	r3, #90	; 0x5a
 80026d6:	ddef      	ble.n	80026b8 <main+0xa8>
	    event_monitor_register(&event_monitor, INTR_EVENT(i), intr_release, 0);

	event_monitor_register(&event_monitor, TIME_EVENT, time_release, &tick_count);
 80026d8:	f107 0208 	add.w	r2, r7, #8
 80026dc:	1d3b      	adds	r3, r7, #4
 80026de:	4610      	mov	r0, r2
 80026e0:	218a      	movs	r1, #138	; 0x8a
 80026e2:	4a5e      	ldr	r2, [pc, #376]	; (800285c <main+0x24c>)
 80026e4:	f7fe f970 	bl	80009c8 <event_monitor_register>

    /* Initialize first thread */
	tasks[task_count].stack = (void*)init_task(stacks[task_count], &first);
 80026e8:	4b5d      	ldr	r3, [pc, #372]	; (8002860 <main+0x250>)
 80026ea:	681c      	ldr	r4, [r3, #0]
 80026ec:	4b5c      	ldr	r3, [pc, #368]	; (8002860 <main+0x250>)
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	4613      	mov	r3, r2
 80026f2:	005b      	lsls	r3, r3, #1
 80026f4:	4413      	add	r3, r2
 80026f6:	025b      	lsls	r3, r3, #9
 80026f8:	4a5a      	ldr	r2, [pc, #360]	; (8002864 <main+0x254>)
 80026fa:	4413      	add	r3, r2
 80026fc:	4618      	mov	r0, r3
 80026fe:	495a      	ldr	r1, [pc, #360]	; (8002868 <main+0x258>)
 8002700:	f002 fb92 	bl	8004e28 <init_task>
 8002704:	4602      	mov	r2, r0
 8002706:	4959      	ldr	r1, [pc, #356]	; (800286c <main+0x25c>)
 8002708:	4623      	mov	r3, r4
 800270a:	005b      	lsls	r3, r3, #1
 800270c:	4423      	add	r3, r4
 800270e:	00db      	lsls	r3, r3, #3
 8002710:	440b      	add	r3, r1
 8002712:	601a      	str	r2, [r3, #0]
	tasks[task_count].pid = 0;
 8002714:	4b52      	ldr	r3, [pc, #328]	; (8002860 <main+0x250>)
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	4954      	ldr	r1, [pc, #336]	; (800286c <main+0x25c>)
 800271a:	4613      	mov	r3, r2
 800271c:	005b      	lsls	r3, r3, #1
 800271e:	4413      	add	r3, r2
 8002720:	00db      	lsls	r3, r3, #3
 8002722:	440b      	add	r3, r1
 8002724:	3304      	adds	r3, #4
 8002726:	2200      	movs	r2, #0
 8002728:	601a      	str	r2, [r3, #0]
	tasks[task_count].priority = PRIORITY_DEFAULT;
 800272a:	4b4d      	ldr	r3, [pc, #308]	; (8002860 <main+0x250>)
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	494f      	ldr	r1, [pc, #316]	; (800286c <main+0x25c>)
 8002730:	4613      	mov	r3, r2
 8002732:	005b      	lsls	r3, r3, #1
 8002734:	4413      	add	r3, r2
 8002736:	00db      	lsls	r3, r3, #3
 8002738:	440b      	add	r3, r1
 800273a:	330c      	adds	r3, #12
 800273c:	2214      	movs	r2, #20
 800273e:	601a      	str	r2, [r3, #0]
	list_init(&tasks[task_count].list);
 8002740:	4b47      	ldr	r3, [pc, #284]	; (8002860 <main+0x250>)
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	4613      	mov	r3, r2
 8002746:	005b      	lsls	r3, r3, #1
 8002748:	4413      	add	r3, r2
 800274a:	00db      	lsls	r3, r3, #3
 800274c:	f103 0210 	add.w	r2, r3, #16
 8002750:	4b46      	ldr	r3, [pc, #280]	; (800286c <main+0x25c>)
 8002752:	4413      	add	r3, r2
 8002754:	4618      	mov	r0, r3
 8002756:	f000 fc87 	bl	8003068 <list_init>
	list_push(&ready_list[tasks[task_count].priority], &tasks[task_count].list);
 800275a:	4b41      	ldr	r3, [pc, #260]	; (8002860 <main+0x250>)
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	4943      	ldr	r1, [pc, #268]	; (800286c <main+0x25c>)
 8002760:	4613      	mov	r3, r2
 8002762:	005b      	lsls	r3, r3, #1
 8002764:	4413      	add	r3, r2
 8002766:	00db      	lsls	r3, r3, #3
 8002768:	440b      	add	r3, r1
 800276a:	330c      	adds	r3, #12
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	00da      	lsls	r2, r3, #3
 8002770:	4b37      	ldr	r3, [pc, #220]	; (8002850 <main+0x240>)
 8002772:	18d1      	adds	r1, r2, r3
 8002774:	4b3a      	ldr	r3, [pc, #232]	; (8002860 <main+0x250>)
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	4613      	mov	r3, r2
 800277a:	005b      	lsls	r3, r3, #1
 800277c:	4413      	add	r3, r2
 800277e:	00db      	lsls	r3, r3, #3
 8002780:	f103 0210 	add.w	r2, r3, #16
 8002784:	4b39      	ldr	r3, [pc, #228]	; (800286c <main+0x25c>)
 8002786:	4413      	add	r3, r2
 8002788:	4608      	mov	r0, r1
 800278a:	4619      	mov	r1, r3
 800278c:	f000 fcc6 	bl	800311c <list_push>
	task_count++;
 8002790:	4b33      	ldr	r3, [pc, #204]	; (8002860 <main+0x250>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	1c5a      	adds	r2, r3, #1
 8002796:	4b32      	ldr	r3, [pc, #200]	; (8002860 <main+0x250>)
 8002798:	601a      	str	r2, [r3, #0]

	while (1) {
		tasks[current_task].stack = activate(tasks[current_task].stack);
 800279a:	4934      	ldr	r1, [pc, #208]	; (800286c <main+0x25c>)
 800279c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800279e:	4613      	mov	r3, r2
 80027a0:	005b      	lsls	r3, r3, #1
 80027a2:	4413      	add	r3, r2
 80027a4:	00db      	lsls	r3, r3, #3
 80027a6:	440b      	add	r3, r1
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4618      	mov	r0, r3
 80027ac:	f015 fb8f 	bl	8017ece <activate>
 80027b0:	4601      	mov	r1, r0
 80027b2:	482e      	ldr	r0, [pc, #184]	; (800286c <main+0x25c>)
 80027b4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80027b6:	4613      	mov	r3, r2
 80027b8:	005b      	lsls	r3, r3, #1
 80027ba:	4413      	add	r3, r2
 80027bc:	00db      	lsls	r3, r3, #3
 80027be:	4403      	add	r3, r0
 80027c0:	6019      	str	r1, [r3, #0]
		tasks[current_task].status = TASK_READY;
 80027c2:	492a      	ldr	r1, [pc, #168]	; (800286c <main+0x25c>)
 80027c4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80027c6:	4613      	mov	r3, r2
 80027c8:	005b      	lsls	r3, r3, #1
 80027ca:	4413      	add	r3, r2
 80027cc:	00db      	lsls	r3, r3, #3
 80027ce:	440b      	add	r3, r1
 80027d0:	3308      	adds	r3, #8
 80027d2:	2200      	movs	r2, #0
 80027d4:	601a      	str	r2, [r3, #0]
		timeup = 0;
 80027d6:	2300      	movs	r3, #0
 80027d8:	647b      	str	r3, [r7, #68]	; 0x44

		switch (tasks[current_task].stack->r7) {
 80027da:	4924      	ldr	r1, [pc, #144]	; (800286c <main+0x25c>)
 80027dc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80027de:	4613      	mov	r3, r2
 80027e0:	005b      	lsls	r3, r3, #1
 80027e2:	4413      	add	r3, r2
 80027e4:	00db      	lsls	r3, r3, #3
 80027e6:	440b      	add	r3, r1
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	3b01      	subs	r3, #1
 80027ee:	2b09      	cmp	r3, #9
 80027f0:	f200 83ae 	bhi.w	8002f50 <main+0x940>
 80027f4:	a201      	add	r2, pc, #4	; (adr r2, 80027fc <main+0x1ec>)
 80027f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027fa:	bf00      	nop
 80027fc:	08002825 	.word	0x08002825
 8002800:	080029bd 	.word	0x080029bd
 8002804:	080029d3 	.word	0x080029d3
 8002808:	08002abd 	.word	0x08002abd
 800280c:	08002b8d 	.word	0x08002b8d
 8002810:	08002bef 	.word	0x08002bef
 8002814:	08002c81 	.word	0x08002c81
 8002818:	08002da1 	.word	0x08002da1
 800281c:	08002e01 	.word	0x08002e01
 8002820:	08002e73 	.word	0x08002e73
		case 0x1: /* fork */
			if (task_count == TASK_LIMIT) {
 8002824:	4b0e      	ldr	r3, [pc, #56]	; (8002860 <main+0x250>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	2b08      	cmp	r3, #8
 800282a:	d121      	bne.n	8002870 <main+0x260>
				/* Cannot create a new task, return error */
				tasks[current_task].stack->r0 = -1;
 800282c:	490f      	ldr	r1, [pc, #60]	; (800286c <main+0x25c>)
 800282e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002830:	4613      	mov	r3, r2
 8002832:	005b      	lsls	r3, r3, #1
 8002834:	4413      	add	r3, r2
 8002836:	00db      	lsls	r3, r3, #3
 8002838:	440b      	add	r3, r1
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002840:	629a      	str	r2, [r3, #40]	; 0x28
				list_init(&tasks[task_count].list);
				list_push(&ready_list[tasks[task_count].priority], &tasks[task_count].list);
				/* There is now one more task */
				task_count++;
			}
			break;
 8002842:	e3c3      	b.n	8002fcc <main+0x9bc>
 8002844:	000afc80 	.word	0x000afc80
 8002848:	200038ac 	.word	0x200038ac
 800284c:	200040ac 	.word	0x200040ac
 8002850:	200041ac 	.word	0x200041ac
 8002854:	200042ec 	.word	0x200042ec
 8002858:	080025c1 	.word	0x080025c1
 800285c:	080025dd 	.word	0x080025dd
 8002860:	200000d4 	.word	0x200000d4
 8002864:	200008ac 	.word	0x200008ac
 8002868:	0800256d 	.word	0x0800256d
 800286c:	200007ec 	.word	0x200007ec
				/* Cannot create a new task, return error */
				tasks[current_task].stack->r0 = -1;
			}
			else {
				/* Compute how much of the stack is used */
				size_t used = stacks[current_task] + STACK_SIZE
 8002870:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002872:	1c5a      	adds	r2, r3, #1
 8002874:	4613      	mov	r3, r2
 8002876:	005b      	lsls	r3, r3, #1
 8002878:	4413      	add	r3, r2
 800287a:	025b      	lsls	r3, r3, #9
 800287c:	4a89      	ldr	r2, [pc, #548]	; (8002aa4 <main+0x494>)
 800287e:	4413      	add	r3, r2
					      - (unsigned int*)tasks[current_task].stack;
 8002880:	4619      	mov	r1, r3
 8002882:	4889      	ldr	r0, [pc, #548]	; (8002aa8 <main+0x498>)
 8002884:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002886:	4613      	mov	r3, r2
 8002888:	005b      	lsls	r3, r3, #1
 800288a:	4413      	add	r3, r2
 800288c:	00db      	lsls	r3, r3, #3
 800288e:	4403      	add	r3, r0
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	1acb      	subs	r3, r1, r3
 8002894:	109b      	asrs	r3, r3, #2
				/* Cannot create a new task, return error */
				tasks[current_task].stack->r0 = -1;
			}
			else {
				/* Compute how much of the stack is used */
				size_t used = stacks[current_task] + STACK_SIZE
 8002896:	643b      	str	r3, [r7, #64]	; 0x40
					      - (unsigned int*)tasks[current_task].stack;
				/* New stack is END - used */
				tasks[task_count].stack = (void*)(stacks[task_count] + STACK_SIZE - used);
 8002898:	4b84      	ldr	r3, [pc, #528]	; (8002aac <main+0x49c>)
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	4b83      	ldr	r3, [pc, #524]	; (8002aac <main+0x49c>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	1c59      	adds	r1, r3, #1
 80028a2:	460b      	mov	r3, r1
 80028a4:	005b      	lsls	r3, r3, #1
 80028a6:	440b      	add	r3, r1
 80028a8:	025b      	lsls	r3, r3, #9
 80028aa:	497e      	ldr	r1, [pc, #504]	; (8002aa4 <main+0x494>)
 80028ac:	4419      	add	r1, r3
 80028ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	425b      	negs	r3, r3
 80028b4:	4419      	add	r1, r3
 80028b6:	487c      	ldr	r0, [pc, #496]	; (8002aa8 <main+0x498>)
 80028b8:	4613      	mov	r3, r2
 80028ba:	005b      	lsls	r3, r3, #1
 80028bc:	4413      	add	r3, r2
 80028be:	00db      	lsls	r3, r3, #3
 80028c0:	4403      	add	r3, r0
 80028c2:	6019      	str	r1, [r3, #0]
				/* Copy only the used part of the stack */
				memcpy(tasks[task_count].stack, tasks[current_task].stack,
 80028c4:	4b79      	ldr	r3, [pc, #484]	; (8002aac <main+0x49c>)
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	4977      	ldr	r1, [pc, #476]	; (8002aa8 <main+0x498>)
 80028ca:	4613      	mov	r3, r2
 80028cc:	005b      	lsls	r3, r3, #1
 80028ce:	4413      	add	r3, r2
 80028d0:	00db      	lsls	r3, r3, #3
 80028d2:	440b      	add	r3, r1
 80028d4:	6819      	ldr	r1, [r3, #0]
 80028d6:	4874      	ldr	r0, [pc, #464]	; (8002aa8 <main+0x498>)
 80028d8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80028da:	4613      	mov	r3, r2
 80028dc:	005b      	lsls	r3, r3, #1
 80028de:	4413      	add	r3, r2
 80028e0:	00db      	lsls	r3, r3, #3
 80028e2:	4403      	add	r3, r0
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	4608      	mov	r0, r1
 80028ec:	4611      	mov	r1, r2
 80028ee:	461a      	mov	r2, r3
 80028f0:	f015 fafe 	bl	8017ef0 <memcpy>
				       used * sizeof(unsigned int));
				/* Set PID */
				tasks[task_count].pid = task_count;
 80028f4:	4b6d      	ldr	r3, [pc, #436]	; (8002aac <main+0x49c>)
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	4b6c      	ldr	r3, [pc, #432]	; (8002aac <main+0x49c>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4619      	mov	r1, r3
 80028fe:	486a      	ldr	r0, [pc, #424]	; (8002aa8 <main+0x498>)
 8002900:	4613      	mov	r3, r2
 8002902:	005b      	lsls	r3, r3, #1
 8002904:	4413      	add	r3, r2
 8002906:	00db      	lsls	r3, r3, #3
 8002908:	4403      	add	r3, r0
 800290a:	3304      	adds	r3, #4
 800290c:	6019      	str	r1, [r3, #0]
				/* Set priority, inherited from forked task */
				tasks[task_count].priority = tasks[current_task].priority;
 800290e:	4b67      	ldr	r3, [pc, #412]	; (8002aac <main+0x49c>)
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	4865      	ldr	r0, [pc, #404]	; (8002aa8 <main+0x498>)
 8002914:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002916:	460b      	mov	r3, r1
 8002918:	005b      	lsls	r3, r3, #1
 800291a:	440b      	add	r3, r1
 800291c:	00db      	lsls	r3, r3, #3
 800291e:	4403      	add	r3, r0
 8002920:	330c      	adds	r3, #12
 8002922:	6819      	ldr	r1, [r3, #0]
 8002924:	4860      	ldr	r0, [pc, #384]	; (8002aa8 <main+0x498>)
 8002926:	4613      	mov	r3, r2
 8002928:	005b      	lsls	r3, r3, #1
 800292a:	4413      	add	r3, r2
 800292c:	00db      	lsls	r3, r3, #3
 800292e:	4403      	add	r3, r0
 8002930:	330c      	adds	r3, #12
 8002932:	6019      	str	r1, [r3, #0]
				/* Set return values in each process */
				tasks[current_task].stack->r0 = task_count;
 8002934:	495c      	ldr	r1, [pc, #368]	; (8002aa8 <main+0x498>)
 8002936:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002938:	4613      	mov	r3, r2
 800293a:	005b      	lsls	r3, r3, #1
 800293c:	4413      	add	r3, r2
 800293e:	00db      	lsls	r3, r3, #3
 8002940:	440b      	add	r3, r1
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a59      	ldr	r2, [pc, #356]	; (8002aac <main+0x49c>)
 8002946:	6812      	ldr	r2, [r2, #0]
 8002948:	629a      	str	r2, [r3, #40]	; 0x28
				tasks[task_count].stack->r0 = 0;
 800294a:	4b58      	ldr	r3, [pc, #352]	; (8002aac <main+0x49c>)
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	4956      	ldr	r1, [pc, #344]	; (8002aa8 <main+0x498>)
 8002950:	4613      	mov	r3, r2
 8002952:	005b      	lsls	r3, r3, #1
 8002954:	4413      	add	r3, r2
 8002956:	00db      	lsls	r3, r3, #3
 8002958:	440b      	add	r3, r1
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	2200      	movs	r2, #0
 800295e:	629a      	str	r2, [r3, #40]	; 0x28
				list_init(&tasks[task_count].list);
 8002960:	4b52      	ldr	r3, [pc, #328]	; (8002aac <main+0x49c>)
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	4613      	mov	r3, r2
 8002966:	005b      	lsls	r3, r3, #1
 8002968:	4413      	add	r3, r2
 800296a:	00db      	lsls	r3, r3, #3
 800296c:	f103 0210 	add.w	r2, r3, #16
 8002970:	4b4d      	ldr	r3, [pc, #308]	; (8002aa8 <main+0x498>)
 8002972:	4413      	add	r3, r2
 8002974:	4618      	mov	r0, r3
 8002976:	f000 fb77 	bl	8003068 <list_init>
				list_push(&ready_list[tasks[task_count].priority], &tasks[task_count].list);
 800297a:	4b4c      	ldr	r3, [pc, #304]	; (8002aac <main+0x49c>)
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	494a      	ldr	r1, [pc, #296]	; (8002aa8 <main+0x498>)
 8002980:	4613      	mov	r3, r2
 8002982:	005b      	lsls	r3, r3, #1
 8002984:	4413      	add	r3, r2
 8002986:	00db      	lsls	r3, r3, #3
 8002988:	440b      	add	r3, r1
 800298a:	330c      	adds	r3, #12
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	00da      	lsls	r2, r3, #3
 8002990:	4b47      	ldr	r3, [pc, #284]	; (8002ab0 <main+0x4a0>)
 8002992:	18d1      	adds	r1, r2, r3
 8002994:	4b45      	ldr	r3, [pc, #276]	; (8002aac <main+0x49c>)
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	4613      	mov	r3, r2
 800299a:	005b      	lsls	r3, r3, #1
 800299c:	4413      	add	r3, r2
 800299e:	00db      	lsls	r3, r3, #3
 80029a0:	f103 0210 	add.w	r2, r3, #16
 80029a4:	4b40      	ldr	r3, [pc, #256]	; (8002aa8 <main+0x498>)
 80029a6:	4413      	add	r3, r2
 80029a8:	4608      	mov	r0, r1
 80029aa:	4619      	mov	r1, r3
 80029ac:	f000 fbb6 	bl	800311c <list_push>
				/* There is now one more task */
				task_count++;
 80029b0:	4b3e      	ldr	r3, [pc, #248]	; (8002aac <main+0x49c>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	1c5a      	adds	r2, r3, #1
 80029b6:	4b3d      	ldr	r3, [pc, #244]	; (8002aac <main+0x49c>)
 80029b8:	601a      	str	r2, [r3, #0]
			}
			break;
 80029ba:	e307      	b.n	8002fcc <main+0x9bc>
		case 0x2: /* getpid */
			tasks[current_task].stack->r0 = current_task;
 80029bc:	493a      	ldr	r1, [pc, #232]	; (8002aa8 <main+0x498>)
 80029be:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80029c0:	4613      	mov	r3, r2
 80029c2:	005b      	lsls	r3, r3, #1
 80029c4:	4413      	add	r3, r2
 80029c6:	00db      	lsls	r3, r3, #3
 80029c8:	440b      	add	r3, r1
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80029ce:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 80029d0:	e2fc      	b.n	8002fcc <main+0x9bc>
		case 0x3: /* write */
		    {
		        /* Check fd is valid */
		        int fd = tasks[current_task].stack->r0;
 80029d2:	4935      	ldr	r1, [pc, #212]	; (8002aa8 <main+0x498>)
 80029d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80029d6:	4613      	mov	r3, r2
 80029d8:	005b      	lsls	r3, r3, #1
 80029da:	4413      	add	r3, r2
 80029dc:	00db      	lsls	r3, r3, #3
 80029de:	440b      	add	r3, r1
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029e4:	63fb      	str	r3, [r7, #60]	; 0x3c
		        if (fd < FILE_LIMIT && files[fd]) {
 80029e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029e8:	2b1f      	cmp	r3, #31
 80029ea:	dc4e      	bgt.n	8002a8a <main+0x47a>
 80029ec:	4b31      	ldr	r3, [pc, #196]	; (8002ab4 <main+0x4a4>)
 80029ee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80029f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d048      	beq.n	8002a8a <main+0x47a>
		            /* Prepare file request, store reference in r0 */
		            requests[current_task].task = &tasks[current_task];
 80029f8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80029fa:	4613      	mov	r3, r2
 80029fc:	005b      	lsls	r3, r3, #1
 80029fe:	4413      	add	r3, r2
 8002a00:	00db      	lsls	r3, r3, #3
 8002a02:	4a29      	ldr	r2, [pc, #164]	; (8002aa8 <main+0x498>)
 8002a04:	441a      	add	r2, r3
 8002a06:	492c      	ldr	r1, [pc, #176]	; (8002ab8 <main+0x4a8>)
 8002a08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a0a:	011b      	lsls	r3, r3, #4
 8002a0c:	440b      	add	r3, r1
 8002a0e:	601a      	str	r2, [r3, #0]
		            requests[current_task].buf =
		                (void*)tasks[current_task].stack->r1;
 8002a10:	4925      	ldr	r1, [pc, #148]	; (8002aa8 <main+0x498>)
 8002a12:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002a14:	4613      	mov	r3, r2
 8002a16:	005b      	lsls	r3, r3, #1
 8002a18:	4413      	add	r3, r2
 8002a1a:	00db      	lsls	r3, r3, #3
 8002a1c:	440b      	add	r3, r1
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a22:	461a      	mov	r2, r3
		        /* Check fd is valid */
		        int fd = tasks[current_task].stack->r0;
		        if (fd < FILE_LIMIT && files[fd]) {
		            /* Prepare file request, store reference in r0 */
		            requests[current_task].task = &tasks[current_task];
		            requests[current_task].buf =
 8002a24:	4924      	ldr	r1, [pc, #144]	; (8002ab8 <main+0x4a8>)
 8002a26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a28:	011b      	lsls	r3, r3, #4
 8002a2a:	440b      	add	r3, r1
 8002a2c:	3304      	adds	r3, #4
 8002a2e:	601a      	str	r2, [r3, #0]
		                (void*)tasks[current_task].stack->r1;
		            requests[current_task].size = tasks[current_task].stack->r2;
 8002a30:	491d      	ldr	r1, [pc, #116]	; (8002aa8 <main+0x498>)
 8002a32:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002a34:	4613      	mov	r3, r2
 8002a36:	005b      	lsls	r3, r3, #1
 8002a38:	4413      	add	r3, r2
 8002a3a:	00db      	lsls	r3, r3, #3
 8002a3c:	440b      	add	r3, r1
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a42:	461a      	mov	r2, r3
 8002a44:	491c      	ldr	r1, [pc, #112]	; (8002ab8 <main+0x4a8>)
 8002a46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a48:	011b      	lsls	r3, r3, #4
 8002a4a:	440b      	add	r3, r1
 8002a4c:	3308      	adds	r3, #8
 8002a4e:	601a      	str	r2, [r3, #0]
		            tasks[current_task].stack->r0 =
 8002a50:	4915      	ldr	r1, [pc, #84]	; (8002aa8 <main+0x498>)
 8002a52:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002a54:	4613      	mov	r3, r2
 8002a56:	005b      	lsls	r3, r3, #1
 8002a58:	4413      	add	r3, r2
 8002a5a:	00db      	lsls	r3, r3, #3
 8002a5c:	440b      	add	r3, r1
 8002a5e:	681b      	ldr	r3, [r3, #0]
		                (int)&requests[current_task];
 8002a60:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002a62:	0111      	lsls	r1, r2, #4
 8002a64:	4a14      	ldr	r2, [pc, #80]	; (8002ab8 <main+0x4a8>)
 8002a66:	440a      	add	r2, r1
		            /* Prepare file request, store reference in r0 */
		            requests[current_task].task = &tasks[current_task];
		            requests[current_task].buf =
		                (void*)tasks[current_task].stack->r1;
		            requests[current_task].size = tasks[current_task].stack->r2;
		            tasks[current_task].stack->r0 =
 8002a68:	629a      	str	r2, [r3, #40]	; 0x28
		                (int)&requests[current_task];

                    /* Write */
			        file_write(files[fd], &requests[current_task],
 8002a6a:	4b12      	ldr	r3, [pc, #72]	; (8002ab4 <main+0x4a4>)
 8002a6c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002a6e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002a72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a74:	011a      	lsls	r2, r3, #4
 8002a76:	4b10      	ldr	r3, [pc, #64]	; (8002ab8 <main+0x4a8>)
 8002a78:	441a      	add	r2, r3
 8002a7a:	f107 0308 	add.w	r3, r7, #8
 8002a7e:	4608      	mov	r0, r1
 8002a80:	4611      	mov	r1, r2
 8002a82:	461a      	mov	r2, r3
 8002a84:	f7fe fad2 	bl	800102c <file_write>
			                   &event_monitor);
			    }
			    else {
			        tasks[current_task].stack->r0 = -1;
			    }
			} break;
 8002a88:	e2a0      	b.n	8002fcc <main+0x9bc>
                    /* Write */
			        file_write(files[fd], &requests[current_task],
			                   &event_monitor);
			    }
			    else {
			        tasks[current_task].stack->r0 = -1;
 8002a8a:	4907      	ldr	r1, [pc, #28]	; (8002aa8 <main+0x498>)
 8002a8c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002a8e:	4613      	mov	r3, r2
 8002a90:	005b      	lsls	r3, r3, #1
 8002a92:	4413      	add	r3, r2
 8002a94:	00db      	lsls	r3, r3, #3
 8002a96:	440b      	add	r3, r1
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a9e:	629a      	str	r2, [r3, #40]	; 0x28
			    }
			} break;
 8002aa0:	e294      	b.n	8002fcc <main+0x9bc>
 8002aa2:	bf00      	nop
 8002aa4:	200008ac 	.word	0x200008ac
 8002aa8:	200007ec 	.word	0x200007ec
 8002aac:	200000d4 	.word	0x200000d4
 8002ab0:	200041ac 	.word	0x200041ac
 8002ab4:	200040ac 	.word	0x200040ac
 8002ab8:	2000412c 	.word	0x2000412c
		case 0x4: /* read */
            {
		        /* Check fd is valid */
		        int fd = tasks[current_task].stack->r0;
 8002abc:	4998      	ldr	r1, [pc, #608]	; (8002d20 <main+0x710>)
 8002abe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	005b      	lsls	r3, r3, #1
 8002ac4:	4413      	add	r3, r2
 8002ac6:	00db      	lsls	r3, r3, #3
 8002ac8:	440b      	add	r3, r1
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ace:	63bb      	str	r3, [r7, #56]	; 0x38
		        if (fd < FILE_LIMIT && files[fd]) {
 8002ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ad2:	2b1f      	cmp	r3, #31
 8002ad4:	dc4e      	bgt.n	8002b74 <main+0x564>
 8002ad6:	4b93      	ldr	r3, [pc, #588]	; (8002d24 <main+0x714>)
 8002ad8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002ada:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d048      	beq.n	8002b74 <main+0x564>
		            /* Prepare file request, store reference in r0 */
		            requests[current_task].task = &tasks[current_task];
 8002ae2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	005b      	lsls	r3, r3, #1
 8002ae8:	4413      	add	r3, r2
 8002aea:	00db      	lsls	r3, r3, #3
 8002aec:	4a8c      	ldr	r2, [pc, #560]	; (8002d20 <main+0x710>)
 8002aee:	441a      	add	r2, r3
 8002af0:	498d      	ldr	r1, [pc, #564]	; (8002d28 <main+0x718>)
 8002af2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002af4:	011b      	lsls	r3, r3, #4
 8002af6:	440b      	add	r3, r1
 8002af8:	601a      	str	r2, [r3, #0]
		            requests[current_task].buf =
		                (void*)tasks[current_task].stack->r1;
 8002afa:	4989      	ldr	r1, [pc, #548]	; (8002d20 <main+0x710>)
 8002afc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002afe:	4613      	mov	r3, r2
 8002b00:	005b      	lsls	r3, r3, #1
 8002b02:	4413      	add	r3, r2
 8002b04:	00db      	lsls	r3, r3, #3
 8002b06:	440b      	add	r3, r1
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b0c:	461a      	mov	r2, r3
		        /* Check fd is valid */
		        int fd = tasks[current_task].stack->r0;
		        if (fd < FILE_LIMIT && files[fd]) {
		            /* Prepare file request, store reference in r0 */
		            requests[current_task].task = &tasks[current_task];
		            requests[current_task].buf =
 8002b0e:	4986      	ldr	r1, [pc, #536]	; (8002d28 <main+0x718>)
 8002b10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b12:	011b      	lsls	r3, r3, #4
 8002b14:	440b      	add	r3, r1
 8002b16:	3304      	adds	r3, #4
 8002b18:	601a      	str	r2, [r3, #0]
		                (void*)tasks[current_task].stack->r1;
		            requests[current_task].size = tasks[current_task].stack->r2;
 8002b1a:	4981      	ldr	r1, [pc, #516]	; (8002d20 <main+0x710>)
 8002b1c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002b1e:	4613      	mov	r3, r2
 8002b20:	005b      	lsls	r3, r3, #1
 8002b22:	4413      	add	r3, r2
 8002b24:	00db      	lsls	r3, r3, #3
 8002b26:	440b      	add	r3, r1
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	497e      	ldr	r1, [pc, #504]	; (8002d28 <main+0x718>)
 8002b30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b32:	011b      	lsls	r3, r3, #4
 8002b34:	440b      	add	r3, r1
 8002b36:	3308      	adds	r3, #8
 8002b38:	601a      	str	r2, [r3, #0]
		            tasks[current_task].stack->r0 =
 8002b3a:	4979      	ldr	r1, [pc, #484]	; (8002d20 <main+0x710>)
 8002b3c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002b3e:	4613      	mov	r3, r2
 8002b40:	005b      	lsls	r3, r3, #1
 8002b42:	4413      	add	r3, r2
 8002b44:	00db      	lsls	r3, r3, #3
 8002b46:	440b      	add	r3, r1
 8002b48:	681b      	ldr	r3, [r3, #0]
		                (int)&requests[current_task];
 8002b4a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002b4c:	0111      	lsls	r1, r2, #4
 8002b4e:	4a76      	ldr	r2, [pc, #472]	; (8002d28 <main+0x718>)
 8002b50:	440a      	add	r2, r1
		            /* Prepare file request, store reference in r0 */
		            requests[current_task].task = &tasks[current_task];
		            requests[current_task].buf =
		                (void*)tasks[current_task].stack->r1;
		            requests[current_task].size = tasks[current_task].stack->r2;
		            tasks[current_task].stack->r0 =
 8002b52:	629a      	str	r2, [r3, #40]	; 0x28
		                (int)&requests[current_task];

                    /* Read */
			        file_read(files[fd], &requests[current_task],
 8002b54:	4b73      	ldr	r3, [pc, #460]	; (8002d24 <main+0x714>)
 8002b56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002b58:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002b5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b5e:	011a      	lsls	r2, r3, #4
 8002b60:	4b71      	ldr	r3, [pc, #452]	; (8002d28 <main+0x718>)
 8002b62:	441a      	add	r2, r3
 8002b64:	f107 0308 	add.w	r3, r7, #8
 8002b68:	4608      	mov	r0, r1
 8002b6a:	4611      	mov	r1, r2
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	f7fe fa13 	bl	8000f98 <file_read>
			                  &event_monitor);
			    }
			    else {
			        tasks[current_task].stack->r0 = -1;
			    }
			} break;
 8002b72:	e22b      	b.n	8002fcc <main+0x9bc>
                    /* Read */
			        file_read(files[fd], &requests[current_task],
			                  &event_monitor);
			    }
			    else {
			        tasks[current_task].stack->r0 = -1;
 8002b74:	496a      	ldr	r1, [pc, #424]	; (8002d20 <main+0x710>)
 8002b76:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002b78:	4613      	mov	r3, r2
 8002b7a:	005b      	lsls	r3, r3, #1
 8002b7c:	4413      	add	r3, r2
 8002b7e:	00db      	lsls	r3, r3, #3
 8002b80:	440b      	add	r3, r1
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002b88:	629a      	str	r2, [r3, #40]	; 0x28
			    }
			} break;
 8002b8a:	e21f      	b.n	8002fcc <main+0x9bc>
		case 0x5: /* interrupt_wait */
			/* Enable interrupt */
			NVIC_EnableIRQ(tasks[current_task].stack->r0);
 8002b8c:	4964      	ldr	r1, [pc, #400]	; (8002d20 <main+0x710>)
 8002b8e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002b90:	4613      	mov	r3, r2
 8002b92:	005b      	lsls	r3, r3, #1
 8002b94:	4413      	add	r3, r2
 8002b96:	00db      	lsls	r3, r3, #3
 8002b98:	440b      	add	r3, r1
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	b25b      	sxtb	r3, r3
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f7fe fb38 	bl	8001218 <NVIC_EnableIRQ>
			/* Block task waiting for interrupt to happen */
			event_monitor_block(&event_monitor,
			                    INTR_EVENT(tasks[current_task].stack->r0),
 8002ba8:	495d      	ldr	r1, [pc, #372]	; (8002d20 <main+0x710>)
 8002baa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002bac:	4613      	mov	r3, r2
 8002bae:	005b      	lsls	r3, r3, #1
 8002bb0:	4413      	add	r3, r2
 8002bb2:	00db      	lsls	r3, r3, #3
 8002bb4:	440b      	add	r3, r1
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bba:	332f      	adds	r3, #47	; 0x2f
			} break;
		case 0x5: /* interrupt_wait */
			/* Enable interrupt */
			NVIC_EnableIRQ(tasks[current_task].stack->r0);
			/* Block task waiting for interrupt to happen */
			event_monitor_block(&event_monitor,
 8002bbc:	4619      	mov	r1, r3
 8002bbe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	005b      	lsls	r3, r3, #1
 8002bc4:	4413      	add	r3, r2
 8002bc6:	00db      	lsls	r3, r3, #3
 8002bc8:	4a55      	ldr	r2, [pc, #340]	; (8002d20 <main+0x710>)
 8002bca:	4413      	add	r3, r2
 8002bcc:	f107 0208 	add.w	r2, r7, #8
 8002bd0:	4610      	mov	r0, r2
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	f7fd ff22 	bl	8000a1c <event_monitor_block>
			                    INTR_EVENT(tasks[current_task].stack->r0),
			                    &tasks[current_task]);
			tasks[current_task].status = TASK_WAIT_INTR;
 8002bd8:	4951      	ldr	r1, [pc, #324]	; (8002d20 <main+0x710>)
 8002bda:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002bdc:	4613      	mov	r3, r2
 8002bde:	005b      	lsls	r3, r3, #1
 8002be0:	4413      	add	r3, r2
 8002be2:	00db      	lsls	r3, r3, #3
 8002be4:	440b      	add	r3, r1
 8002be6:	3308      	adds	r3, #8
 8002be8:	2203      	movs	r2, #3
 8002bea:	601a      	str	r2, [r3, #0]
			break;
 8002bec:	e1ee      	b.n	8002fcc <main+0x9bc>
		case 0x6: /* getpriority */
			{
				int who = tasks[current_task].stack->r0;
 8002bee:	494c      	ldr	r1, [pc, #304]	; (8002d20 <main+0x710>)
 8002bf0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	005b      	lsls	r3, r3, #1
 8002bf6:	4413      	add	r3, r2
 8002bf8:	00db      	lsls	r3, r3, #3
 8002bfa:	440b      	add	r3, r1
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c00:	637b      	str	r3, [r7, #52]	; 0x34
				if (who > 0 && who < (int)task_count)
 8002c02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	dd18      	ble.n	8002c3a <main+0x62a>
 8002c08:	4b48      	ldr	r3, [pc, #288]	; (8002d2c <main+0x71c>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c10:	429a      	cmp	r2, r3
 8002c12:	dd12      	ble.n	8002c3a <main+0x62a>
					tasks[current_task].stack->r0 = tasks[who].priority;
 8002c14:	4942      	ldr	r1, [pc, #264]	; (8002d20 <main+0x710>)
 8002c16:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002c18:	4613      	mov	r3, r2
 8002c1a:	005b      	lsls	r3, r3, #1
 8002c1c:	4413      	add	r3, r2
 8002c1e:	00db      	lsls	r3, r3, #3
 8002c20:	440b      	add	r3, r1
 8002c22:	6819      	ldr	r1, [r3, #0]
 8002c24:	483e      	ldr	r0, [pc, #248]	; (8002d20 <main+0x710>)
 8002c26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c28:	4613      	mov	r3, r2
 8002c2a:	005b      	lsls	r3, r3, #1
 8002c2c:	4413      	add	r3, r2
 8002c2e:	00db      	lsls	r3, r3, #3
 8002c30:	4403      	add	r3, r0
 8002c32:	330c      	adds	r3, #12
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	628b      	str	r3, [r1, #40]	; 0x28
 8002c38:	e021      	b.n	8002c7e <main+0x66e>
				else if (who == 0)
 8002c3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d112      	bne.n	8002c66 <main+0x656>
					tasks[current_task].stack->r0 = tasks[current_task].priority;
 8002c40:	4937      	ldr	r1, [pc, #220]	; (8002d20 <main+0x710>)
 8002c42:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002c44:	4613      	mov	r3, r2
 8002c46:	005b      	lsls	r3, r3, #1
 8002c48:	4413      	add	r3, r2
 8002c4a:	00db      	lsls	r3, r3, #3
 8002c4c:	440b      	add	r3, r1
 8002c4e:	6819      	ldr	r1, [r3, #0]
 8002c50:	4833      	ldr	r0, [pc, #204]	; (8002d20 <main+0x710>)
 8002c52:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002c54:	4613      	mov	r3, r2
 8002c56:	005b      	lsls	r3, r3, #1
 8002c58:	4413      	add	r3, r2
 8002c5a:	00db      	lsls	r3, r3, #3
 8002c5c:	4403      	add	r3, r0
 8002c5e:	330c      	adds	r3, #12
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	628b      	str	r3, [r1, #40]	; 0x28
 8002c64:	e00b      	b.n	8002c7e <main+0x66e>
				else
					tasks[current_task].stack->r0 = -1;
 8002c66:	492e      	ldr	r1, [pc, #184]	; (8002d20 <main+0x710>)
 8002c68:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002c6a:	4613      	mov	r3, r2
 8002c6c:	005b      	lsls	r3, r3, #1
 8002c6e:	4413      	add	r3, r2
 8002c70:	00db      	lsls	r3, r3, #3
 8002c72:	440b      	add	r3, r1
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c7a:	629a      	str	r2, [r3, #40]	; 0x28
			} break;
 8002c7c:	e1a6      	b.n	8002fcc <main+0x9bc>
 8002c7e:	e1a5      	b.n	8002fcc <main+0x9bc>
		case 0x7: /* setpriority */
			{
				int who = tasks[current_task].stack->r0;
 8002c80:	4927      	ldr	r1, [pc, #156]	; (8002d20 <main+0x710>)
 8002c82:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002c84:	4613      	mov	r3, r2
 8002c86:	005b      	lsls	r3, r3, #1
 8002c88:	4413      	add	r3, r2
 8002c8a:	00db      	lsls	r3, r3, #3
 8002c8c:	440b      	add	r3, r1
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c92:	633b      	str	r3, [r7, #48]	; 0x30
				int value = tasks[current_task].stack->r1;
 8002c94:	4922      	ldr	r1, [pc, #136]	; (8002d20 <main+0x710>)
 8002c96:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002c98:	4613      	mov	r3, r2
 8002c9a:	005b      	lsls	r3, r3, #1
 8002c9c:	4413      	add	r3, r2
 8002c9e:	00db      	lsls	r3, r3, #3
 8002ca0:	440b      	add	r3, r1
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
				value = (value < 0) ? 0 : ((value > PRIORITY_LIMIT) ? PRIORITY_LIMIT : value);
 8002ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	db04      	blt.n	8002cb8 <main+0x6a8>
 8002cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cb0:	2b27      	cmp	r3, #39	; 0x27
 8002cb2:	bfa8      	it	ge
 8002cb4:	2327      	movge	r3, #39	; 0x27
 8002cb6:	e000      	b.n	8002cba <main+0x6aa>
 8002cb8:	2300      	movs	r3, #0
 8002cba:	62fb      	str	r3, [r7, #44]	; 0x2c
				if (who > 0 && who < (int)task_count) {
 8002cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	dd38      	ble.n	8002d34 <main+0x724>
 8002cc2:	4b1a      	ldr	r3, [pc, #104]	; (8002d2c <main+0x71c>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	dd32      	ble.n	8002d34 <main+0x724>
					tasks[who].priority = value;
 8002cce:	4914      	ldr	r1, [pc, #80]	; (8002d20 <main+0x710>)
 8002cd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002cd2:	4613      	mov	r3, r2
 8002cd4:	005b      	lsls	r3, r3, #1
 8002cd6:	4413      	add	r3, r2
 8002cd8:	00db      	lsls	r3, r3, #3
 8002cda:	440b      	add	r3, r1
 8002cdc:	330c      	adds	r3, #12
 8002cde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ce0:	601a      	str	r2, [r3, #0]
					if (tasks[who].status == TASK_READY)
 8002ce2:	490f      	ldr	r1, [pc, #60]	; (8002d20 <main+0x710>)
 8002ce4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ce6:	4613      	mov	r3, r2
 8002ce8:	005b      	lsls	r3, r3, #1
 8002cea:	4413      	add	r3, r2
 8002cec:	00db      	lsls	r3, r3, #3
 8002cee:	440b      	add	r3, r1
 8002cf0:	3308      	adds	r3, #8
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d111      	bne.n	8002d1c <main+0x70c>
					    list_push(&ready_list[value], &tasks[who].list);
 8002cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cfa:	00da      	lsls	r2, r3, #3
 8002cfc:	4b0c      	ldr	r3, [pc, #48]	; (8002d30 <main+0x720>)
 8002cfe:	18d1      	adds	r1, r2, r3
 8002d00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d02:	4613      	mov	r3, r2
 8002d04:	005b      	lsls	r3, r3, #1
 8002d06:	4413      	add	r3, r2
 8002d08:	00db      	lsls	r3, r3, #3
 8002d0a:	f103 0210 	add.w	r2, r3, #16
 8002d0e:	4b04      	ldr	r3, [pc, #16]	; (8002d20 <main+0x710>)
 8002d10:	4413      	add	r3, r2
 8002d12:	4608      	mov	r0, r1
 8002d14:	4619      	mov	r1, r3
 8002d16:	f000 fa01 	bl	800311c <list_push>
				int who = tasks[current_task].stack->r0;
				int value = tasks[current_task].stack->r1;
				value = (value < 0) ? 0 : ((value > PRIORITY_LIMIT) ? PRIORITY_LIMIT : value);
				if (who > 0 && who < (int)task_count) {
					tasks[who].priority = value;
					if (tasks[who].status == TASK_READY)
 8002d1a:	e036      	b.n	8002d8a <main+0x77a>
 8002d1c:	e035      	b.n	8002d8a <main+0x77a>
 8002d1e:	bf00      	nop
 8002d20:	200007ec 	.word	0x200007ec
 8002d24:	200040ac 	.word	0x200040ac
 8002d28:	2000412c 	.word	0x2000412c
 8002d2c:	200000d4 	.word	0x200000d4
 8002d30:	200041ac 	.word	0x200041ac
					    list_push(&ready_list[value], &tasks[who].list);
				}
				else if (who == 0) {
 8002d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d11b      	bne.n	8002d72 <main+0x762>
					tasks[current_task].priority = value;
 8002d3a:	4999      	ldr	r1, [pc, #612]	; (8002fa0 <main+0x990>)
 8002d3c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002d3e:	4613      	mov	r3, r2
 8002d40:	005b      	lsls	r3, r3, #1
 8002d42:	4413      	add	r3, r2
 8002d44:	00db      	lsls	r3, r3, #3
 8002d46:	440b      	add	r3, r1
 8002d48:	330c      	adds	r3, #12
 8002d4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d4c:	601a      	str	r2, [r3, #0]
				    list_unshift(&ready_list[value], &tasks[current_task].list);
 8002d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d50:	00da      	lsls	r2, r3, #3
 8002d52:	4b94      	ldr	r3, [pc, #592]	; (8002fa4 <main+0x994>)
 8002d54:	18d1      	adds	r1, r2, r3
 8002d56:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002d58:	4613      	mov	r3, r2
 8002d5a:	005b      	lsls	r3, r3, #1
 8002d5c:	4413      	add	r3, r2
 8002d5e:	00db      	lsls	r3, r3, #3
 8002d60:	f103 0210 	add.w	r2, r3, #16
 8002d64:	4b8e      	ldr	r3, [pc, #568]	; (8002fa0 <main+0x990>)
 8002d66:	4413      	add	r3, r2
 8002d68:	4608      	mov	r0, r1
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	f000 f9b6 	bl	80030dc <list_unshift>
 8002d70:	e00b      	b.n	8002d8a <main+0x77a>
				}
				else {
					tasks[current_task].stack->r0 = -1;
 8002d72:	498b      	ldr	r1, [pc, #556]	; (8002fa0 <main+0x990>)
 8002d74:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002d76:	4613      	mov	r3, r2
 8002d78:	005b      	lsls	r3, r3, #1
 8002d7a:	4413      	add	r3, r2
 8002d7c:	00db      	lsls	r3, r3, #3
 8002d7e:	440b      	add	r3, r1
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002d86:	629a      	str	r2, [r3, #40]	; 0x28
					break;
 8002d88:	e120      	b.n	8002fcc <main+0x9bc>
				}
				tasks[current_task].stack->r0 = 0;
 8002d8a:	4985      	ldr	r1, [pc, #532]	; (8002fa0 <main+0x990>)
 8002d8c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002d8e:	4613      	mov	r3, r2
 8002d90:	005b      	lsls	r3, r3, #1
 8002d92:	4413      	add	r3, r2
 8002d94:	00db      	lsls	r3, r3, #3
 8002d96:	440b      	add	r3, r1
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	629a      	str	r2, [r3, #40]	; 0x28
			} break;
 8002d9e:	e115      	b.n	8002fcc <main+0x9bc>
		case 0x8: /* mknod */
			tasks[current_task].stack->r0 =
 8002da0:	497f      	ldr	r1, [pc, #508]	; (8002fa0 <main+0x990>)
 8002da2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002da4:	4613      	mov	r3, r2
 8002da6:	005b      	lsls	r3, r3, #1
 8002da8:	4413      	add	r3, r2
 8002daa:	00db      	lsls	r3, r3, #3
 8002dac:	440b      	add	r3, r1
 8002dae:	681c      	ldr	r4, [r3, #0]
				file_mknod(tasks[current_task].stack->r0,
 8002db0:	497b      	ldr	r1, [pc, #492]	; (8002fa0 <main+0x990>)
 8002db2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002db4:	4613      	mov	r3, r2
 8002db6:	005b      	lsls	r3, r3, #1
 8002db8:	4413      	add	r3, r2
 8002dba:	00db      	lsls	r3, r3, #3
 8002dbc:	440b      	add	r3, r1
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	4976      	ldr	r1, [pc, #472]	; (8002fa0 <main+0x990>)
 8002dc6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002dc8:	4613      	mov	r3, r2
 8002dca:	005b      	lsls	r3, r3, #1
 8002dcc:	4413      	add	r3, r2
 8002dce:	00db      	lsls	r3, r3, #3
 8002dd0:	440b      	add	r3, r1
 8002dd2:	3304      	adds	r3, #4
 8002dd4:	6819      	ldr	r1, [r3, #0]
				           tasks[current_task].pid,
				           files,
					       tasks[current_task].stack->r2,
 8002dd6:	4d72      	ldr	r5, [pc, #456]	; (8002fa0 <main+0x990>)
 8002dd8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002dda:	4613      	mov	r3, r2
 8002ddc:	005b      	lsls	r3, r3, #1
 8002dde:	4413      	add	r3, r2
 8002de0:	00db      	lsls	r3, r3, #3
 8002de2:	442b      	add	r3, r5
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
				}
				tasks[current_task].stack->r0 = 0;
			} break;
		case 0x8: /* mknod */
			tasks[current_task].stack->r0 =
				file_mknod(tasks[current_task].stack->r0,
 8002de8:	f107 0210 	add.w	r2, r7, #16
 8002dec:	9200      	str	r2, [sp, #0]
 8002dee:	f107 0208 	add.w	r2, r7, #8
 8002df2:	9201      	str	r2, [sp, #4]
 8002df4:	4a6c      	ldr	r2, [pc, #432]	; (8002fa8 <main+0x998>)
 8002df6:	f7fe f963 	bl	80010c0 <file_mknod>
 8002dfa:	4603      	mov	r3, r0
					break;
				}
				tasks[current_task].stack->r0 = 0;
			} break;
		case 0x8: /* mknod */
			tasks[current_task].stack->r0 =
 8002dfc:	62a3      	str	r3, [r4, #40]	; 0x28
				           tasks[current_task].pid,
				           files,
					       tasks[current_task].stack->r2,
					       &memory_pool,
					       &event_monitor);
			break;
 8002dfe:	e0e5      	b.n	8002fcc <main+0x9bc>
		case 0x9: /* sleep */
			if (tasks[current_task].stack->r0 != 0) {
 8002e00:	4967      	ldr	r1, [pc, #412]	; (8002fa0 <main+0x990>)
 8002e02:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e04:	4613      	mov	r3, r2
 8002e06:	005b      	lsls	r3, r3, #1
 8002e08:	4413      	add	r3, r2
 8002e0a:	00db      	lsls	r3, r3, #3
 8002e0c:	440b      	add	r3, r1
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d02c      	beq.n	8002e70 <main+0x860>
				tasks[current_task].stack->r0 += tick_count;
 8002e16:	4962      	ldr	r1, [pc, #392]	; (8002fa0 <main+0x990>)
 8002e18:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e1a:	4613      	mov	r3, r2
 8002e1c:	005b      	lsls	r3, r3, #1
 8002e1e:	4413      	add	r3, r2
 8002e20:	00db      	lsls	r3, r3, #3
 8002e22:	440b      	add	r3, r1
 8002e24:	6819      	ldr	r1, [r3, #0]
 8002e26:	485e      	ldr	r0, [pc, #376]	; (8002fa0 <main+0x990>)
 8002e28:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	005b      	lsls	r3, r3, #1
 8002e2e:	4413      	add	r3, r2
 8002e30:	00db      	lsls	r3, r3, #3
 8002e32:	4403      	add	r3, r0
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	4413      	add	r3, r2
 8002e3c:	628b      	str	r3, [r1, #40]	; 0x28
			    event_monitor_block(&event_monitor, TIME_EVENT,
 8002e3e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e40:	4613      	mov	r3, r2
 8002e42:	005b      	lsls	r3, r3, #1
 8002e44:	4413      	add	r3, r2
 8002e46:	00db      	lsls	r3, r3, #3
 8002e48:	4a55      	ldr	r2, [pc, #340]	; (8002fa0 <main+0x990>)
 8002e4a:	4413      	add	r3, r2
 8002e4c:	f107 0208 	add.w	r2, r7, #8
 8002e50:	4610      	mov	r0, r2
 8002e52:	218a      	movs	r1, #138	; 0x8a
 8002e54:	461a      	mov	r2, r3
 8002e56:	f7fd fde1 	bl	8000a1c <event_monitor_block>
			                        &tasks[current_task]);
				tasks[current_task].status = TASK_WAIT_TIME;
 8002e5a:	4951      	ldr	r1, [pc, #324]	; (8002fa0 <main+0x990>)
 8002e5c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e5e:	4613      	mov	r3, r2
 8002e60:	005b      	lsls	r3, r3, #1
 8002e62:	4413      	add	r3, r2
 8002e64:	00db      	lsls	r3, r3, #3
 8002e66:	440b      	add	r3, r1
 8002e68:	3308      	adds	r3, #8
 8002e6a:	2204      	movs	r2, #4
 8002e6c:	601a      	str	r2, [r3, #0]
			}
			break;
 8002e6e:	e0ad      	b.n	8002fcc <main+0x9bc>
 8002e70:	e0ac      	b.n	8002fcc <main+0x9bc>
		case 0xa: /* lseek */
            {
		        /* Check fd is valid */
		        int fd = tasks[current_task].stack->r0;
 8002e72:	494b      	ldr	r1, [pc, #300]	; (8002fa0 <main+0x990>)
 8002e74:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e76:	4613      	mov	r3, r2
 8002e78:	005b      	lsls	r3, r3, #1
 8002e7a:	4413      	add	r3, r2
 8002e7c:	00db      	lsls	r3, r3, #3
 8002e7e:	440b      	add	r3, r1
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e84:	62bb      	str	r3, [r7, #40]	; 0x28
		        if (fd < FILE_LIMIT && files[fd]) {
 8002e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e88:	2b1f      	cmp	r3, #31
 8002e8a:	dc55      	bgt.n	8002f38 <main+0x928>
 8002e8c:	4b46      	ldr	r3, [pc, #280]	; (8002fa8 <main+0x998>)
 8002e8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d04f      	beq.n	8002f38 <main+0x928>
		            /* Prepare file request, store reference in r0 */
		            requests[current_task].task = &tasks[current_task];
 8002e98:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e9a:	4613      	mov	r3, r2
 8002e9c:	005b      	lsls	r3, r3, #1
 8002e9e:	4413      	add	r3, r2
 8002ea0:	00db      	lsls	r3, r3, #3
 8002ea2:	4a3f      	ldr	r2, [pc, #252]	; (8002fa0 <main+0x990>)
 8002ea4:	441a      	add	r2, r3
 8002ea6:	4941      	ldr	r1, [pc, #260]	; (8002fac <main+0x99c>)
 8002ea8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002eaa:	011b      	lsls	r3, r3, #4
 8002eac:	440b      	add	r3, r1
 8002eae:	601a      	str	r2, [r3, #0]
		            requests[current_task].buf = NULL;
 8002eb0:	4a3e      	ldr	r2, [pc, #248]	; (8002fac <main+0x99c>)
 8002eb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002eb4:	011b      	lsls	r3, r3, #4
 8002eb6:	4413      	add	r3, r2
 8002eb8:	3304      	adds	r3, #4
 8002eba:	2200      	movs	r2, #0
 8002ebc:	601a      	str	r2, [r3, #0]
		            requests[current_task].size = tasks[current_task].stack->r1;
 8002ebe:	4938      	ldr	r1, [pc, #224]	; (8002fa0 <main+0x990>)
 8002ec0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002ec2:	4613      	mov	r3, r2
 8002ec4:	005b      	lsls	r3, r3, #1
 8002ec6:	4413      	add	r3, r2
 8002ec8:	00db      	lsls	r3, r3, #3
 8002eca:	440b      	add	r3, r1
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	4936      	ldr	r1, [pc, #216]	; (8002fac <main+0x99c>)
 8002ed4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ed6:	011b      	lsls	r3, r3, #4
 8002ed8:	440b      	add	r3, r1
 8002eda:	3308      	adds	r3, #8
 8002edc:	601a      	str	r2, [r3, #0]
		            requests[current_task].whence = tasks[current_task].stack->r2;
 8002ede:	4930      	ldr	r1, [pc, #192]	; (8002fa0 <main+0x990>)
 8002ee0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002ee2:	4613      	mov	r3, r2
 8002ee4:	005b      	lsls	r3, r3, #1
 8002ee6:	4413      	add	r3, r2
 8002ee8:	00db      	lsls	r3, r3, #3
 8002eea:	440b      	add	r3, r1
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef0:	461a      	mov	r2, r3
 8002ef2:	492e      	ldr	r1, [pc, #184]	; (8002fac <main+0x99c>)
 8002ef4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ef6:	011b      	lsls	r3, r3, #4
 8002ef8:	440b      	add	r3, r1
 8002efa:	330c      	adds	r3, #12
 8002efc:	601a      	str	r2, [r3, #0]
		            tasks[current_task].stack->r0 =
 8002efe:	4928      	ldr	r1, [pc, #160]	; (8002fa0 <main+0x990>)
 8002f00:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002f02:	4613      	mov	r3, r2
 8002f04:	005b      	lsls	r3, r3, #1
 8002f06:	4413      	add	r3, r2
 8002f08:	00db      	lsls	r3, r3, #3
 8002f0a:	440b      	add	r3, r1
 8002f0c:	681b      	ldr	r3, [r3, #0]
		                (int)&requests[current_task];
 8002f0e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002f10:	0111      	lsls	r1, r2, #4
 8002f12:	4a26      	ldr	r2, [pc, #152]	; (8002fac <main+0x99c>)
 8002f14:	440a      	add	r2, r1
		            /* Prepare file request, store reference in r0 */
		            requests[current_task].task = &tasks[current_task];
		            requests[current_task].buf = NULL;
		            requests[current_task].size = tasks[current_task].stack->r1;
		            requests[current_task].whence = tasks[current_task].stack->r2;
		            tasks[current_task].stack->r0 =
 8002f16:	629a      	str	r2, [r3, #40]	; 0x28
		                (int)&requests[current_task];

                    /* Read */
			        file_lseek(files[fd], &requests[current_task],
 8002f18:	4b23      	ldr	r3, [pc, #140]	; (8002fa8 <main+0x998>)
 8002f1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f1c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002f20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f22:	011a      	lsls	r2, r3, #4
 8002f24:	4b21      	ldr	r3, [pc, #132]	; (8002fac <main+0x99c>)
 8002f26:	441a      	add	r2, r3
 8002f28:	f107 0308 	add.w	r3, r7, #8
 8002f2c:	4608      	mov	r0, r1
 8002f2e:	4611      	mov	r1, r2
 8002f30:	461a      	mov	r2, r3
 8002f32:	f7fe f91d 	bl	8001170 <file_lseek>
			                   &event_monitor);
			    }
			    else {
			        tasks[current_task].stack->r0 = -1;
			    }
			} break;
 8002f36:	e049      	b.n	8002fcc <main+0x9bc>
                    /* Read */
			        file_lseek(files[fd], &requests[current_task],
			                   &event_monitor);
			    }
			    else {
			        tasks[current_task].stack->r0 = -1;
 8002f38:	4919      	ldr	r1, [pc, #100]	; (8002fa0 <main+0x990>)
 8002f3a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	005b      	lsls	r3, r3, #1
 8002f40:	4413      	add	r3, r2
 8002f42:	00db      	lsls	r3, r3, #3
 8002f44:	440b      	add	r3, r1
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002f4c:	629a      	str	r2, [r3, #40]	; 0x28
			    }
			} break;
 8002f4e:	e03d      	b.n	8002fcc <main+0x9bc>
		default: /* Catch all interrupts */
			if ((int)tasks[current_task].stack->r7 < 0) {
 8002f50:	4913      	ldr	r1, [pc, #76]	; (8002fa0 <main+0x990>)
 8002f52:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002f54:	4613      	mov	r3, r2
 8002f56:	005b      	lsls	r3, r3, #1
 8002f58:	4413      	add	r3, r2
 8002f5a:	00db      	lsls	r3, r3, #3
 8002f5c:	440b      	add	r3, r1
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	68db      	ldr	r3, [r3, #12]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	da32      	bge.n	8002fcc <main+0x9bc>
				unsigned int intr = -tasks[current_task].stack->r7 - 16;
 8002f66:	490e      	ldr	r1, [pc, #56]	; (8002fa0 <main+0x990>)
 8002f68:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	005b      	lsls	r3, r3, #1
 8002f6e:	4413      	add	r3, r2
 8002f70:	00db      	lsls	r3, r3, #3
 8002f72:	440b      	add	r3, r1
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	68da      	ldr	r2, [r3, #12]
 8002f78:	f06f 030f 	mvn.w	r3, #15
 8002f7c:	1a9b      	subs	r3, r3, r2
 8002f7e:	627b      	str	r3, [r7, #36]	; 0x24

				if (intr == SysTick_IRQn) {
 8002f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f86:	d113      	bne.n	8002fb0 <main+0x9a0>
					/* Never disable timer. We need it for pre-emption */
					timeup = 1;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	647b      	str	r3, [r7, #68]	; 0x44
					tick_count++;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	3301      	adds	r3, #1
 8002f90:	607b      	str	r3, [r7, #4]
					event_monitor_release(&event_monitor, TIME_EVENT);
 8002f92:	f107 0308 	add.w	r3, r7, #8
 8002f96:	4618      	mov	r0, r3
 8002f98:	218a      	movs	r1, #138	; 0x8a
 8002f9a:	f7fd fd5d 	bl	8000a58 <event_monitor_release>
 8002f9e:	e00d      	b.n	8002fbc <main+0x9ac>
 8002fa0:	200007ec 	.word	0x200007ec
 8002fa4:	200041ac 	.word	0x200041ac
 8002fa8:	200040ac 	.word	0x200040ac
 8002fac:	2000412c 	.word	0x2000412c
				}
				else {
					/* Disable interrupt, interrupt_wait re-enables */
					NVIC_DisableIRQ(intr);
 8002fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	b25b      	sxtb	r3, r3
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f7fe f946 	bl	8001248 <NVIC_DisableIRQ>
				}
				event_monitor_release(&event_monitor, INTR_EVENT(intr));
 8002fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fbe:	332f      	adds	r3, #47	; 0x2f
 8002fc0:	f107 0208 	add.w	r2, r7, #8
 8002fc4:	4610      	mov	r0, r2
 8002fc6:	4619      	mov	r1, r3
 8002fc8:	f7fd fd46 	bl	8000a58 <event_monitor_release>
			}
		}

        /* Rearrange ready list and event list */
		event_monitor_serve(&event_monitor);
 8002fcc:	f107 0308 	add.w	r3, r7, #8
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f7fd fd55 	bl	8000a80 <event_monitor_serve>

		/* Check whether to context switch */
		task = &tasks[current_task];
 8002fd6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002fd8:	4613      	mov	r3, r2
 8002fda:	005b      	lsls	r3, r3, #1
 8002fdc:	4413      	add	r3, r2
 8002fde:	00db      	lsls	r3, r3, #3
 8002fe0:	4a1f      	ldr	r2, [pc, #124]	; (8003060 <main+0xa50>)
 8002fe2:	4413      	add	r3, r2
 8002fe4:	623b      	str	r3, [r7, #32]
		if (timeup && ready_list[task->priority].next == &task->list)
 8002fe6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d01b      	beq.n	8003024 <main+0xa14>
 8002fec:	6a3b      	ldr	r3, [r7, #32]
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	4a1c      	ldr	r2, [pc, #112]	; (8003064 <main+0xa54>)
 8002ff2:	00db      	lsls	r3, r3, #3
 8002ff4:	4413      	add	r3, r2
 8002ff6:	685a      	ldr	r2, [r3, #4]
 8002ff8:	6a3b      	ldr	r3, [r7, #32]
 8002ffa:	3310      	adds	r3, #16
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d111      	bne.n	8003024 <main+0xa14>
		    list_push(&ready_list[task->priority], &tasks[current_task].list);
 8003000:	6a3b      	ldr	r3, [r7, #32]
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	00da      	lsls	r2, r3, #3
 8003006:	4b17      	ldr	r3, [pc, #92]	; (8003064 <main+0xa54>)
 8003008:	18d1      	adds	r1, r2, r3
 800300a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800300c:	4613      	mov	r3, r2
 800300e:	005b      	lsls	r3, r3, #1
 8003010:	4413      	add	r3, r2
 8003012:	00db      	lsls	r3, r3, #3
 8003014:	f103 0210 	add.w	r2, r3, #16
 8003018:	4b11      	ldr	r3, [pc, #68]	; (8003060 <main+0xa50>)
 800301a:	4413      	add	r3, r2
 800301c:	4608      	mov	r0, r1
 800301e:	4619      	mov	r1, r3
 8003020:	f000 f87c 	bl	800311c <list_push>

		/* Select next TASK_READY task */
		for (i = 0; list_empty(&ready_list[i]); i++);
 8003024:	2300      	movs	r3, #0
 8003026:	64bb      	str	r3, [r7, #72]	; 0x48
 8003028:	e002      	b.n	8003030 <main+0xa20>
 800302a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800302c:	3301      	adds	r3, #1
 800302e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003030:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003032:	00da      	lsls	r2, r3, #3
 8003034:	4b0b      	ldr	r3, [pc, #44]	; (8003064 <main+0xa54>)
 8003036:	4413      	add	r3, r2
 8003038:	4618      	mov	r0, r3
 800303a:	f000 f827 	bl	800308c <list_empty>
 800303e:	4603      	mov	r3, r0
 8003040:	2b00      	cmp	r3, #0
 8003042:	d1f2      	bne.n	800302a <main+0xa1a>

		list = ready_list[i].next;
 8003044:	4a07      	ldr	r2, [pc, #28]	; (8003064 <main+0xa54>)
 8003046:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003048:	00db      	lsls	r3, r3, #3
 800304a:	4413      	add	r3, r2
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	61fb      	str	r3, [r7, #28]
		task = list_entry(list, struct task_control_block, list);
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	3b10      	subs	r3, #16
 8003054:	623b      	str	r3, [r7, #32]
		current_task = task->pid;
 8003056:	6a3b      	ldr	r3, [r7, #32]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	64fb      	str	r3, [r7, #76]	; 0x4c
	}
 800305c:	f7ff bb9d 	b.w	800279a <main+0x18a>
 8003060:	200007ec 	.word	0x200007ec
 8003064:	200041ac 	.word	0x200041ac

08003068 <list_init>:
#include "list.h"

void list_init(struct list* list)
{
 8003068:	b480      	push	{r7}
 800306a:	b083      	sub	sp, #12
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
    if (list) {
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d005      	beq.n	8003082 <list_init+0x1a>
        list->prev = list;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	601a      	str	r2, [r3, #0]
        list->next = list;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	605a      	str	r2, [r3, #4]
    }
}
 8003082:	370c      	adds	r7, #12
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr

0800308c <list_empty>:

int list_empty(struct list *list)
{
 800308c:	b480      	push	{r7}
 800308e:	b083      	sub	sp, #12
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
    return list->next == list;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	685a      	ldr	r2, [r3, #4]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	429a      	cmp	r2, r3
 800309c:	bf14      	ite	ne
 800309e:	2300      	movne	r3, #0
 80030a0:	2301      	moveq	r3, #1
 80030a2:	b2db      	uxtb	r3, r3
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	370c      	adds	r7, #12
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr

080030b0 <list_remove>:

void list_remove(struct list *list)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b083      	sub	sp, #12
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
    if (list) {
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d009      	beq.n	80030d2 <list_remove+0x22>
        list->next->prev = list->prev;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	6812      	ldr	r2, [r2, #0]
 80030c6:	601a      	str	r2, [r3, #0]
        list->prev->next = list->next;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	687a      	ldr	r2, [r7, #4]
 80030ce:	6852      	ldr	r2, [r2, #4]
 80030d0:	605a      	str	r2, [r3, #4]
    }
}
 80030d2:	370c      	adds	r7, #12
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr

080030dc <list_unshift>:

void list_unshift(struct list *list, struct list *new)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b082      	sub	sp, #8
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
 80030e4:	6039      	str	r1, [r7, #0]
    if (list && new) {
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d013      	beq.n	8003114 <list_unshift+0x38>
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d010      	beq.n	8003114 <list_unshift+0x38>
        list_remove(new);
 80030f2:	6838      	ldr	r0, [r7, #0]
 80030f4:	f7ff ffdc 	bl	80030b0 <list_remove>

        list->next->prev = new;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	683a      	ldr	r2, [r7, #0]
 80030fe:	601a      	str	r2, [r3, #0]
        new->next = list->next;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	685a      	ldr	r2, [r3, #4]
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	605a      	str	r2, [r3, #4]
        new->prev = list;
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	601a      	str	r2, [r3, #0]
        list->next = new;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	683a      	ldr	r2, [r7, #0]
 8003112:	605a      	str	r2, [r3, #4]
    }
}
 8003114:	3708      	adds	r7, #8
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop

0800311c <list_push>:

void list_push(struct list *list, struct list *new)
{
 800311c:	b480      	push	{r7}
 800311e:	b083      	sub	sp, #12
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
 8003124:	6039      	str	r1, [r7, #0]
    if (list && new) {
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d01a      	beq.n	8003162 <list_push+0x46>
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d017      	beq.n	8003162 <list_push+0x46>
        /* Remove new from origin list */
        new->prev->next = new->next;
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	683a      	ldr	r2, [r7, #0]
 8003138:	6852      	ldr	r2, [r2, #4]
 800313a:	605a      	str	r2, [r3, #4]
        new->next->prev = new->prev;
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	683a      	ldr	r2, [r7, #0]
 8003142:	6812      	ldr	r2, [r2, #0]
 8003144:	601a      	str	r2, [r3, #0]

        list->prev->next = new;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	683a      	ldr	r2, [r7, #0]
 800314c:	605a      	str	r2, [r3, #4]
        new->next = list;
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	605a      	str	r2, [r3, #4]
        new->prev = list->prev;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	601a      	str	r2, [r3, #0]
        list->prev = new;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	683a      	ldr	r2, [r7, #0]
 8003160:	601a      	str	r2, [r3, #0]
    }
}
 8003162:	370c      	adds	r7, #12
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr

0800316c <list_shift>:

struct list* list_shift(struct list *list)
{
 800316c:	b480      	push	{r7}
 800316e:	b085      	sub	sp, #20
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
    struct list *first = list->next;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	60fb      	str	r3, [r7, #12]

    if (first == list)
 800317a:	68fa      	ldr	r2, [r7, #12]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	429a      	cmp	r2, r3
 8003180:	d101      	bne.n	8003186 <list_shift+0x1a>
        return 0;
 8003182:	2300      	movs	r3, #0
 8003184:	e008      	b.n	8003198 <list_shift+0x2c>

    list->next = first->next;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	685a      	ldr	r2, [r3, #4]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	605a      	str	r2, [r3, #4]
    list->next->prev = list;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	687a      	ldr	r2, [r7, #4]
 8003194:	601a      	str	r2, [r3, #0]

    return first;
 8003196:	68fb      	ldr	r3, [r7, #12]
}
 8003198:	4618      	mov	r0, r3
 800319a:	3714      	adds	r7, #20
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr

080031a4 <memory_pool_init>:
#include "memory-pool.h"



void memory_pool_init(struct memory_pool *pool, size_t size, char *memory)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b085      	sub	sp, #20
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	60f8      	str	r0, [r7, #12]
 80031ac:	60b9      	str	r1, [r7, #8]
 80031ae:	607a      	str	r2, [r7, #4]
    pool->offset = 0;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2200      	movs	r2, #0
 80031b4:	601a      	str	r2, [r3, #0]
    pool->size = size;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	68ba      	ldr	r2, [r7, #8]
 80031ba:	605a      	str	r2, [r3, #4]
    pool->memory = memory;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	609a      	str	r2, [r3, #8]
}
 80031c2:	3714      	adds	r7, #20
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr

080031cc <memory_pool_alloc>:

void *memory_pool_alloc(struct memory_pool *pool, size_t size)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b085      	sub	sp, #20
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	6039      	str	r1, [r7, #0]
    if (pool->offset + size <= pool->size) {
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	461a      	mov	r2, r3
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	441a      	add	r2, r3
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d80f      	bhi.n	8003208 <memory_pool_alloc+0x3c>
        char *alloc = pool->memory + pool->offset;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	689a      	ldr	r2, [r3, #8]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4413      	add	r3, r2
 80031f2:	60fb      	str	r3, [r7, #12]
        pool->offset += size;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	461a      	mov	r2, r3
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	4413      	add	r3, r2
 80031fe:	461a      	mov	r2, r3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	601a      	str	r2, [r3, #0]
        return alloc;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	e000      	b.n	800320a <memory_pool_alloc+0x3e>
    }

    return NULL;
 8003208:	2300      	movs	r3, #0
}
 800320a:	4618      	mov	r0, r3
 800320c:	3714      	adds	r7, #20
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr
 8003216:	bf00      	nop

08003218 <mq_open>:
	.lseekable = NULL,
	.lseek = NULL,
};

int mq_open(const char *name, int oflag)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b082      	sub	sp, #8
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	6039      	str	r1, [r7, #0]
	if (oflag & O_CREAT)
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	f003 0304 	and.w	r3, r3, #4
 8003228:	2b00      	cmp	r3, #0
 800322a:	d004      	beq.n	8003236 <mq_open+0x1e>
		mkfile(name, 0, S_IMSGQ);
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	2100      	movs	r1, #0
 8003230:	2202      	movs	r2, #2
 8003232:	f7fd fdb5 	bl	8000da0 <mkfile>
	return open(name, 0);
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	2100      	movs	r1, #0
 800323a:	f7fd fe23 	bl	8000e84 <open>
 800323e:	4603      	mov	r3, r0
}
 8003240:	4618      	mov	r0, r3
 8003242:	3708      	adds	r7, #8
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}

08003248 <mq_init>:

int
mq_init(int fd, int driver_pid, struct file *files[],
        struct memory_pool *memory_pool, struct event_monitor *monitor)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b086      	sub	sp, #24
 800324c:	af00      	add	r7, sp, #0
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	60b9      	str	r1, [r7, #8]
 8003252:	607a      	str	r2, [r7, #4]
 8003254:	603b      	str	r3, [r7, #0]
    struct pipe_ringbuffer *pipe;

    pipe = memory_pool_alloc(memory_pool, sizeof(struct pipe_ringbuffer));
 8003256:	6838      	ldr	r0, [r7, #0]
 8003258:	2158      	movs	r1, #88	; 0x58
 800325a:	f7ff ffb7 	bl	80031cc <memory_pool_alloc>
 800325e:	6178      	str	r0, [r7, #20]

    if (!pipe)
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d102      	bne.n	800326c <mq_init+0x24>
        return -1;
 8003266:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800326a:	e033      	b.n	80032d4 <mq_init+0x8c>

    pipe->start = 0;
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	2200      	movs	r2, #0
 8003270:	609a      	str	r2, [r3, #8]
    pipe->end = 0;
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	2200      	movs	r2, #0
 8003276:	60da      	str	r2, [r3, #12]
	pipe->file.ops = &mq_ops;
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	4a18      	ldr	r2, [pc, #96]	; (80032dc <mq_init+0x94>)
 800327c:	605a      	str	r2, [r3, #4]
    files[fd] = &pipe->file;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	687a      	ldr	r2, [r7, #4]
 8003284:	4413      	add	r3, r2
 8003286:	697a      	ldr	r2, [r7, #20]
 8003288:	601a      	str	r2, [r3, #0]

    pipe->read_event = event_monitor_find_free(monitor);
 800328a:	6a38      	ldr	r0, [r7, #32]
 800328c:	f7fd fb76 	bl	800097c <event_monitor_find_free>
 8003290:	4602      	mov	r2, r0
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	611a      	str	r2, [r3, #16]
    event_monitor_register(monitor, pipe->read_event, pipe_read_release, files[fd]);
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	691a      	ldr	r2, [r3, #16]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	6879      	ldr	r1, [r7, #4]
 80032a0:	440b      	add	r3, r1
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	6a38      	ldr	r0, [r7, #32]
 80032a6:	4611      	mov	r1, r2
 80032a8:	4a0d      	ldr	r2, [pc, #52]	; (80032e0 <mq_init+0x98>)
 80032aa:	f7fd fb8d 	bl	80009c8 <event_monitor_register>

    pipe->write_event = event_monitor_find_free(monitor);
 80032ae:	6a38      	ldr	r0, [r7, #32]
 80032b0:	f7fd fb64 	bl	800097c <event_monitor_find_free>
 80032b4:	4602      	mov	r2, r0
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	615a      	str	r2, [r3, #20]
    event_monitor_register(monitor, pipe->write_event, pipe_write_release, files[fd]);
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	695a      	ldr	r2, [r3, #20]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	6879      	ldr	r1, [r7, #4]
 80032c4:	440b      	add	r3, r1
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	6a38      	ldr	r0, [r7, #32]
 80032ca:	4611      	mov	r1, r2
 80032cc:	4a05      	ldr	r2, [pc, #20]	; (80032e4 <mq_init+0x9c>)
 80032ce:	f7fd fb7b 	bl	80009c8 <event_monitor_register>
    return 0;
 80032d2:	2300      	movs	r3, #0
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3718      	adds	r7, #24
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	20000034 	.word	0x20000034
 80032e0:	08003eed 	.word	0x08003eed
 80032e4:	08003f1d 	.word	0x08003f1d

080032e8 <mq_readable>:

int
mq_readable (struct file *file, struct file_request *request,
             struct event_monitor *monitor)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b08a      	sub	sp, #40	; 0x28
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	60f8      	str	r0, [r7, #12]
 80032f0:	60b9      	str	r1, [r7, #8]
 80032f2:	607a      	str	r2, [r7, #4]
	size_t msg_len;

	struct pipe_ringbuffer *pipe =
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	61bb      	str	r3, [r7, #24]
	    container_of(file, struct pipe_ringbuffer, file);

	/* Trying to read too much */
	if ((size_t)PIPE_LEN(*pipe) < sizeof(size_t)) {
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	68da      	ldr	r2, [r3, #12]
 80032fc:	69bb      	ldr	r3, [r7, #24]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	1ad2      	subs	r2, r2, r3
 8003302:	69bb      	ldr	r3, [r7, #24]
 8003304:	68d9      	ldr	r1, [r3, #12]
 8003306:	69bb      	ldr	r3, [r7, #24]
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	4299      	cmp	r1, r3
 800330c:	da01      	bge.n	8003312 <mq_readable+0x2a>
 800330e:	2340      	movs	r3, #64	; 0x40
 8003310:	e000      	b.n	8003314 <mq_readable+0x2c>
 8003312:	2300      	movs	r3, #0
 8003314:	4413      	add	r3, r2
 8003316:	2b03      	cmp	r3, #3
 8003318:	d80a      	bhi.n	8003330 <mq_readable+0x48>
		/* Nothing to read */
	    event_monitor_block(monitor, pipe->read_event, request->task);
 800331a:	69bb      	ldr	r3, [r7, #24]
 800331c:	691a      	ldr	r2, [r3, #16]
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	4611      	mov	r1, r2
 8003326:	461a      	mov	r2, r3
 8003328:	f7fd fb78 	bl	8000a1c <event_monitor_block>
		return FILE_ACCESS_BLOCK;
 800332c:	2300      	movs	r3, #0
 800332e:	e028      	b.n	8003382 <mq_readable+0x9a>
	}

	PIPE_PEEK(*pipe, msg_len, 4);
 8003330:	2304      	movs	r3, #4
 8003332:	627b      	str	r3, [r7, #36]	; 0x24
 8003334:	69bb      	ldr	r3, [r7, #24]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	623b      	str	r3, [r7, #32]
 800333a:	2300      	movs	r3, #0
 800333c:	61fb      	str	r3, [r7, #28]
 800333e:	e011      	b.n	8003364 <mq_readable+0x7c>
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	1c5a      	adds	r2, r3, #1
 8003344:	61fa      	str	r2, [r7, #28]
 8003346:	f107 0214 	add.w	r2, r7, #20
 800334a:	441a      	add	r2, r3
 800334c:	6a3b      	ldr	r3, [r7, #32]
 800334e:	1c59      	adds	r1, r3, #1
 8003350:	6239      	str	r1, [r7, #32]
 8003352:	69b9      	ldr	r1, [r7, #24]
 8003354:	440b      	add	r3, r1
 8003356:	7e1b      	ldrb	r3, [r3, #24]
 8003358:	7013      	strb	r3, [r2, #0]
 800335a:	6a3b      	ldr	r3, [r7, #32]
 800335c:	2b3f      	cmp	r3, #63	; 0x3f
 800335e:	dd01      	ble.n	8003364 <mq_readable+0x7c>
 8003360:	2300      	movs	r3, #0
 8003362:	623b      	str	r3, [r7, #32]
 8003364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003366:	1e5a      	subs	r2, r3, #1
 8003368:	627a      	str	r2, [r7, #36]	; 0x24
 800336a:	2b00      	cmp	r3, #0
 800336c:	d1e8      	bne.n	8003340 <mq_readable+0x58>

	if (msg_len > request->size) {
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	461a      	mov	r2, r3
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	429a      	cmp	r2, r3
 8003378:	d202      	bcs.n	8003380 <mq_readable+0x98>
		/* Trying to read more than buffer size */
		return FILE_ACCESS_ERROR;
 800337a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800337e:	e000      	b.n	8003382 <mq_readable+0x9a>
	}
	return FILE_ACCESS_ACCEPT;
 8003380:	2301      	movs	r3, #1
}
 8003382:	4618      	mov	r0, r3
 8003384:	3728      	adds	r7, #40	; 0x28
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop

0800338c <mq_writable>:

int
mq_writable (struct file *file, struct file_request *request,
             struct event_monitor *monitor)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b086      	sub	sp, #24
 8003390:	af00      	add	r7, sp, #0
 8003392:	60f8      	str	r0, [r7, #12]
 8003394:	60b9      	str	r1, [r7, #8]
 8003396:	607a      	str	r2, [r7, #4]
	size_t total_len = sizeof(size_t) + request->size;
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	3304      	adds	r3, #4
 800339e:	617b      	str	r3, [r7, #20]
	struct pipe_ringbuffer *pipe =
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	613b      	str	r3, [r7, #16]
	    container_of(file, struct pipe_ringbuffer, file);

	/* If the write would be non-atomic */
	if (total_len > PIPE_BUF) {
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	2b40      	cmp	r3, #64	; 0x40
 80033a8:	d902      	bls.n	80033b0 <mq_writable+0x24>
		return FILE_ACCESS_ERROR;
 80033aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80033ae:	e01f      	b.n	80033f0 <mq_writable+0x64>
	}
	/* Preserve 1 byte to distiguish empty or full */
	if ((size_t)PIPE_BUF - PIPE_LEN(*pipe) - 1 < total_len) {
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	689a      	ldr	r2, [r3, #8]
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	1ad2      	subs	r2, r2, r3
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	68d9      	ldr	r1, [r3, #12]
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	4299      	cmp	r1, r3
 80033c4:	da01      	bge.n	80033ca <mq_writable+0x3e>
 80033c6:	2340      	movs	r3, #64	; 0x40
 80033c8:	e000      	b.n	80033cc <mq_writable+0x40>
 80033ca:	2300      	movs	r3, #0
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	f103 023f 	add.w	r2, r3, #63	; 0x3f
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d20a      	bcs.n	80033ee <mq_writable+0x62>
		/* Trying to write more than we have space for: block */
	    event_monitor_block(monitor, pipe->write_event, request->task);
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	695a      	ldr	r2, [r3, #20]
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	4611      	mov	r1, r2
 80033e4:	461a      	mov	r2, r3
 80033e6:	f7fd fb19 	bl	8000a1c <event_monitor_block>
		return FILE_ACCESS_BLOCK;
 80033ea:	2300      	movs	r3, #0
 80033ec:	e000      	b.n	80033f0 <mq_writable+0x64>
	}
	return FILE_ACCESS_ACCEPT;
 80033ee:	2301      	movs	r3, #1
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	3718      	adds	r7, #24
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}

080033f8 <mq_read>:

int
mq_read (struct file *file, struct file_request *request,
         struct event_monitor *monitor)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b088      	sub	sp, #32
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	60f8      	str	r0, [r7, #12]
 8003400:	60b9      	str	r1, [r7, #8]
 8003402:	607a      	str	r2, [r7, #4]
	size_t msg_len;
	size_t i;
	struct pipe_ringbuffer *pipe =
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	61bb      	str	r3, [r7, #24]
	    container_of(file, struct pipe_ringbuffer, file);

	/* Get length */
	for (i = 0; i < 4; i++) {
 8003408:	2300      	movs	r3, #0
 800340a:	61fb      	str	r3, [r7, #28]
 800340c:	e018      	b.n	8003440 <mq_read+0x48>
		PIPE_POP(*pipe, *(((char*)&msg_len)+i));
 800340e:	f107 0214 	add.w	r2, r7, #20
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	4413      	add	r3, r2
 8003416:	69ba      	ldr	r2, [r7, #24]
 8003418:	6892      	ldr	r2, [r2, #8]
 800341a:	69b9      	ldr	r1, [r7, #24]
 800341c:	440a      	add	r2, r1
 800341e:	7e12      	ldrb	r2, [r2, #24]
 8003420:	701a      	strb	r2, [r3, #0]
 8003422:	69bb      	ldr	r3, [r7, #24]
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	1c5a      	adds	r2, r3, #1
 8003428:	69bb      	ldr	r3, [r7, #24]
 800342a:	609a      	str	r2, [r3, #8]
 800342c:	69bb      	ldr	r3, [r7, #24]
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	2b3f      	cmp	r3, #63	; 0x3f
 8003432:	dd02      	ble.n	800343a <mq_read+0x42>
 8003434:	69bb      	ldr	r3, [r7, #24]
 8003436:	2200      	movs	r2, #0
 8003438:	609a      	str	r2, [r3, #8]
	size_t i;
	struct pipe_ringbuffer *pipe =
	    container_of(file, struct pipe_ringbuffer, file);

	/* Get length */
	for (i = 0; i < 4; i++) {
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	3301      	adds	r3, #1
 800343e:	61fb      	str	r3, [r7, #28]
 8003440:	69fb      	ldr	r3, [r7, #28]
 8003442:	2b03      	cmp	r3, #3
 8003444:	d9e3      	bls.n	800340e <mq_read+0x16>
		PIPE_POP(*pipe, *(((char*)&msg_len)+i));
	}
	/* Copy data into buf */
	for (i = 0; i < msg_len; i++) {
 8003446:	2300      	movs	r3, #0
 8003448:	61fb      	str	r3, [r7, #28]
 800344a:	e018      	b.n	800347e <mq_read+0x86>
		PIPE_POP(*pipe, request->buf[i]);
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	685a      	ldr	r2, [r3, #4]
 8003450:	69fb      	ldr	r3, [r7, #28]
 8003452:	4413      	add	r3, r2
 8003454:	69ba      	ldr	r2, [r7, #24]
 8003456:	6892      	ldr	r2, [r2, #8]
 8003458:	69b9      	ldr	r1, [r7, #24]
 800345a:	440a      	add	r2, r1
 800345c:	7e12      	ldrb	r2, [r2, #24]
 800345e:	701a      	strb	r2, [r3, #0]
 8003460:	69bb      	ldr	r3, [r7, #24]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	1c5a      	adds	r2, r3, #1
 8003466:	69bb      	ldr	r3, [r7, #24]
 8003468:	609a      	str	r2, [r3, #8]
 800346a:	69bb      	ldr	r3, [r7, #24]
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	2b3f      	cmp	r3, #63	; 0x3f
 8003470:	dd02      	ble.n	8003478 <mq_read+0x80>
 8003472:	69bb      	ldr	r3, [r7, #24]
 8003474:	2200      	movs	r2, #0
 8003476:	609a      	str	r2, [r3, #8]
	/* Get length */
	for (i = 0; i < 4; i++) {
		PIPE_POP(*pipe, *(((char*)&msg_len)+i));
	}
	/* Copy data into buf */
	for (i = 0; i < msg_len; i++) {
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	3301      	adds	r3, #1
 800347c:	61fb      	str	r3, [r7, #28]
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	69fa      	ldr	r2, [r7, #28]
 8003482:	429a      	cmp	r2, r3
 8003484:	d3e2      	bcc.n	800344c <mq_read+0x54>
		PIPE_POP(*pipe, request->buf[i]);
	}

    /* Prepared to write */
	event_monitor_release(monitor, pipe->write_event);
 8003486:	69bb      	ldr	r3, [r7, #24]
 8003488:	695b      	ldr	r3, [r3, #20]
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	4619      	mov	r1, r3
 800348e:	f7fd fae3 	bl	8000a58 <event_monitor_release>
	return msg_len;
 8003492:	697b      	ldr	r3, [r7, #20]
}
 8003494:	4618      	mov	r0, r3
 8003496:	3720      	adds	r7, #32
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}

0800349c <mq_write>:

int
mq_write (struct file *file, struct file_request *request,
          struct event_monitor *monitor)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b086      	sub	sp, #24
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	60f8      	str	r0, [r7, #12]
 80034a4:	60b9      	str	r1, [r7, #8]
 80034a6:	607a      	str	r2, [r7, #4]
	size_t i;
	struct pipe_ringbuffer *pipe =
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	613b      	str	r3, [r7, #16]
	    container_of(file, struct pipe_ringbuffer, file);

	/* Copy count into pipe */
	for (i = 0; i < sizeof(size_t); i++)
 80034ac:	2300      	movs	r3, #0
 80034ae:	617b      	str	r3, [r7, #20]
 80034b0:	e019      	b.n	80034e6 <mq_write+0x4a>
		PIPE_PUSH(*pipe,*(((char*)&request->size)+i));
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	68db      	ldr	r3, [r3, #12]
 80034b6:	68ba      	ldr	r2, [r7, #8]
 80034b8:	f102 0108 	add.w	r1, r2, #8
 80034bc:	697a      	ldr	r2, [r7, #20]
 80034be:	440a      	add	r2, r1
 80034c0:	7812      	ldrb	r2, [r2, #0]
 80034c2:	6939      	ldr	r1, [r7, #16]
 80034c4:	440b      	add	r3, r1
 80034c6:	761a      	strb	r2, [r3, #24]
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	1c5a      	adds	r2, r3, #1
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	60da      	str	r2, [r3, #12]
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	68db      	ldr	r3, [r3, #12]
 80034d6:	2b3f      	cmp	r3, #63	; 0x3f
 80034d8:	dd02      	ble.n	80034e0 <mq_write+0x44>
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	2200      	movs	r2, #0
 80034de:	60da      	str	r2, [r3, #12]
	size_t i;
	struct pipe_ringbuffer *pipe =
	    container_of(file, struct pipe_ringbuffer, file);

	/* Copy count into pipe */
	for (i = 0; i < sizeof(size_t); i++)
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	3301      	adds	r3, #1
 80034e4:	617b      	str	r3, [r7, #20]
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	2b03      	cmp	r3, #3
 80034ea:	d9e2      	bls.n	80034b2 <mq_write+0x16>
		PIPE_PUSH(*pipe,*(((char*)&request->size)+i));
	/* Copy data into pipe */
	for (i = 0; i < request->size; i++)
 80034ec:	2300      	movs	r3, #0
 80034ee:	617b      	str	r3, [r7, #20]
 80034f0:	e018      	b.n	8003524 <mq_write+0x88>
		PIPE_PUSH(*pipe,request->buf[i]);
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	68db      	ldr	r3, [r3, #12]
 80034f6:	68ba      	ldr	r2, [r7, #8]
 80034f8:	6851      	ldr	r1, [r2, #4]
 80034fa:	697a      	ldr	r2, [r7, #20]
 80034fc:	440a      	add	r2, r1
 80034fe:	7812      	ldrb	r2, [r2, #0]
 8003500:	6939      	ldr	r1, [r7, #16]
 8003502:	440b      	add	r3, r1
 8003504:	761a      	strb	r2, [r3, #24]
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	68db      	ldr	r3, [r3, #12]
 800350a:	1c5a      	adds	r2, r3, #1
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	60da      	str	r2, [r3, #12]
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	2b3f      	cmp	r3, #63	; 0x3f
 8003516:	dd02      	ble.n	800351e <mq_write+0x82>
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	2200      	movs	r2, #0
 800351c:	60da      	str	r2, [r3, #12]

	/* Copy count into pipe */
	for (i = 0; i < sizeof(size_t); i++)
		PIPE_PUSH(*pipe,*(((char*)&request->size)+i));
	/* Copy data into pipe */
	for (i = 0; i < request->size; i++)
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	3301      	adds	r3, #1
 8003522:	617b      	str	r3, [r7, #20]
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	461a      	mov	r2, r3
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	429a      	cmp	r2, r3
 800352e:	d8e0      	bhi.n	80034f2 <mq_write+0x56>
		PIPE_PUSH(*pipe,request->buf[i]);

    /* Prepared to read */
	event_monitor_release(monitor, pipe->read_event);
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	691b      	ldr	r3, [r3, #16]
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	4619      	mov	r1, r3
 8003538:	f7fd fa8e 	bl	8000a58 <event_monitor_release>
	return request->size;
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	689b      	ldr	r3, [r3, #8]
}
 8003540:	4618      	mov	r0, r3
 8003542:	3718      	adds	r7, #24
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}

08003548 <pathserver>:
 * The first TASK_LIMIT FDs are reserved for use by their respective tasks.
 * 0-2 are reserved FDs and are skipped.
 * The server registers itself at /sys/pathserver
 */
void pathserver()
{
 8003548:	b590      	push	{r4, r7, lr}
 800354a:	f2ad 4d64 	subw	sp, sp, #1124	; 0x464
 800354e:	af00      	add	r7, sp, #0
	char paths[FILE_LIMIT - TASK_LIMIT - 3][PATH_MAX];
	int npaths = 0;
 8003550:	2300      	movs	r3, #0
 8003552:	f8c7 345c 	str.w	r3, [r7, #1116]	; 0x45c
	int fs_fds[FS_LIMIT];
	char fs_types[FS_LIMIT][FS_TYPE_MAX];
	int nfs_types = 0;
 8003556:	2300      	movs	r3, #0
 8003558:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
	struct mount mounts[MOUNT_LIMIT];
	int nmounts = 0;
 800355c:	2300      	movs	r3, #0
 800355e:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
	int i = 0;
 8003562:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003566:	2200      	movs	r2, #0
 8003568:	601a      	str	r2, [r3, #0]
	int cmd = 0;
 800356a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800356e:	2200      	movs	r2, #0
 8003570:	601a      	str	r2, [r3, #0]
	unsigned int plen = 0;
 8003572:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003576:	2200      	movs	r2, #0
 8003578:	601a      	str	r2, [r3, #0]
	unsigned int replyfd = 0;
 800357a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800357e:	2200      	movs	r2, #0
 8003580:	601a      	str	r2, [r3, #0]
	char path[PATH_MAX];
	int dev = 0;
 8003582:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003586:	2200      	movs	r2, #0
 8003588:	601a      	str	r2, [r3, #0]
	int newfd = 0;
 800358a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800358e:	2200      	movs	r2, #0
 8003590:	601a      	str	r2, [r3, #0]
	char fs_type[FS_TYPE_MAX];
	int status;

	memcpy(paths[npaths++], PATH_SERVER_NAME, sizeof(PATH_SERVER_NAME));
 8003592:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 8003596:	1c5a      	adds	r2, r3, #1
 8003598:	f8c7 245c 	str.w	r2, [r7, #1116]	; 0x45c
 800359c:	f507 72d8 	add.w	r2, r7, #432	; 0x1b0
 80035a0:	015b      	lsls	r3, r3, #5
 80035a2:	4413      	add	r3, r2
 80035a4:	4618      	mov	r0, r3
 80035a6:	49b6      	ldr	r1, [pc, #728]	; (8003880 <pathserver+0x338>)
 80035a8:	2210      	movs	r2, #16
 80035aa:	f014 fca1 	bl	8017ef0 <memcpy>
 80035ae:	e000      	b.n	80035b2 <pathserver+0x6a>
		    }   break;

		    default:
		        ;
		}
	}
 80035b0:	bf00      	nop
	int status;

	memcpy(paths[npaths++], PATH_SERVER_NAME, sizeof(PATH_SERVER_NAME));

	while (1) {
		read(PATHSERVER_FD, &cmd, 4);
 80035b2:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80035b6:	200b      	movs	r0, #11
 80035b8:	4619      	mov	r1, r3
 80035ba:	2204      	movs	r2, #4
 80035bc:	f014 fcf5 	bl	8017faa <read>
		read(PATHSERVER_FD, &replyfd, 4);
 80035c0:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80035c4:	200b      	movs	r0, #11
 80035c6:	4619      	mov	r1, r3
 80035c8:	2204      	movs	r2, #4
 80035ca:	f014 fcee 	bl	8017faa <read>

		switch (cmd) {
 80035ce:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	3b01      	subs	r3, #1
 80035d6:	2b04      	cmp	r3, #4
 80035d8:	d8ea      	bhi.n	80035b0 <pathserver+0x68>
 80035da:	a201      	add	r2, pc, #4	; (adr r2, 80035e0 <pathserver+0x98>)
 80035dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035e0:	080035f5 	.word	0x080035f5
 80035e4:	0800369d 	.word	0x0800369d
 80035e8:	080038d5 	.word	0x080038d5
 80035ec:	08003947 	.word	0x08003947
 80035f0:	080039c7 	.word	0x080039c7
		    case PATH_CMD_MKFILE:
		        read(PATHSERVER_FD, &plen, 4);
 80035f4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80035f8:	200b      	movs	r0, #11
 80035fa:	4619      	mov	r1, r3
 80035fc:	2204      	movs	r2, #4
 80035fe:	f014 fcd4 	bl	8017faa <read>
		        read(PATHSERVER_FD, path, plen);
 8003602:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800360c:	200b      	movs	r0, #11
 800360e:	4611      	mov	r1, r2
 8003610:	461a      	mov	r2, r3
 8003612:	f014 fcca 	bl	8017faa <read>
			    read(PATHSERVER_FD, &dev, 4);
 8003616:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800361a:	200b      	movs	r0, #11
 800361c:	4619      	mov	r1, r3
 800361e:	2204      	movs	r2, #4
 8003620:	f014 fcc3 	bl	8017faa <read>
			    newfd = npaths + 3 + TASK_LIMIT;
 8003624:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 8003628:	f103 020b 	add.w	r2, r3, #11
 800362c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003630:	601a      	str	r2, [r3, #0]
			    if (mknod(newfd, 0, dev) == 0) {
 8003632:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4610      	mov	r0, r2
 8003640:	2100      	movs	r1, #0
 8003642:	461a      	mov	r2, r3
 8003644:	f014 fccd 	bl	8017fe2 <mknod>
 8003648:	4603      	mov	r3, r0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d115      	bne.n	800367a <pathserver+0x132>
			        memcpy(paths[npaths], path, plen);
 800364e:	f507 72d8 	add.w	r2, r7, #432	; 0x1b0
 8003652:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 8003656:	015b      	lsls	r3, r3, #5
 8003658:	18d1      	adds	r1, r2, r3
 800365a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8003664:	4608      	mov	r0, r1
 8003666:	4611      	mov	r1, r2
 8003668:	461a      	mov	r2, r3
 800366a:	f014 fc41 	bl	8017ef0 <memcpy>
			        npaths++;
 800366e:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 8003672:	3301      	adds	r3, #1
 8003674:	f8c7 345c 	str.w	r3, [r7, #1116]	; 0x45c
 8003678:	e004      	b.n	8003684 <pathserver+0x13c>
			    }
			    else {
			        newfd = -1;
 800367a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800367e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003682:	601a      	str	r2, [r3, #0]
			    }
			    write(replyfd, &newfd, 4);
 8003684:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	461a      	mov	r2, r3
 800368c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003690:	4610      	mov	r0, r2
 8003692:	4619      	mov	r1, r3
 8003694:	2204      	movs	r2, #4
 8003696:	f014 fc81 	bl	8017f9c <write>
		        break;
 800369a:	e299      	b.n	8003bd0 <pathserver+0x688>

		    case PATH_CMD_OPEN:
		        read(PATHSERVER_FD, &plen, 4);
 800369c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80036a0:	200b      	movs	r0, #11
 80036a2:	4619      	mov	r1, r3
 80036a4:	2204      	movs	r2, #4
 80036a6:	f014 fc80 	bl	8017faa <read>
		        read(PATHSERVER_FD, path, plen);
 80036aa:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80036b4:	200b      	movs	r0, #11
 80036b6:	4611      	mov	r1, r2
 80036b8:	461a      	mov	r2, r3
 80036ba:	f014 fc76 	bl	8017faa <read>
		        /* Search for path */
			    for (i = 0; i < npaths; i++) {
 80036be:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80036c2:	2200      	movs	r2, #0
 80036c4:	601a      	str	r2, [r3, #0]
 80036c6:	e03f      	b.n	8003748 <pathserver+0x200>
				    if (*paths[i] && strcmp(path, paths[i]) == 0) {
 80036c8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f507 72d8 	add.w	r2, r7, #432	; 0x1b0
 80036d2:	015b      	lsls	r3, r3, #5
 80036d4:	4413      	add	r3, r2
 80036d6:	781b      	ldrb	r3, [r3, #0]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d02e      	beq.n	800373a <pathserver+0x1f2>
 80036dc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f507 72d8 	add.w	r2, r7, #432	; 0x1b0
 80036e6:	015b      	lsls	r3, r3, #5
 80036e8:	4413      	add	r3, r2
 80036ea:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80036ee:	4610      	mov	r0, r2
 80036f0:	4619      	mov	r1, r3
 80036f2:	f001 fb33 	bl	8004d5c <strcmp>
 80036f6:	4603      	mov	r3, r0
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d11e      	bne.n	800373a <pathserver+0x1f2>
					    i += 3; /* 0-2 are reserved */
 80036fc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	1cda      	adds	r2, r3, #3
 8003704:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003708:	601a      	str	r2, [r3, #0]
					    i += TASK_LIMIT; /* FDs reserved for tasks */
 800370a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f103 0208 	add.w	r2, r3, #8
 8003714:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003718:	601a      	str	r2, [r3, #0]
					    write(replyfd, &i, 4);
 800371a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	461a      	mov	r2, r3
 8003722:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003726:	4610      	mov	r0, r2
 8003728:	4619      	mov	r1, r3
 800372a:	2204      	movs	r2, #4
 800372c:	f014 fc36 	bl	8017f9c <write>
					    i = 0;
 8003730:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003734:	2200      	movs	r2, #0
 8003736:	601a      	str	r2, [r3, #0]
					    break;
 8003738:	e00d      	b.n	8003756 <pathserver+0x20e>

		    case PATH_CMD_OPEN:
		        read(PATHSERVER_FD, &plen, 4);
		        read(PATHSERVER_FD, path, plen);
		        /* Search for path */
			    for (i = 0; i < npaths; i++) {
 800373a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	1c5a      	adds	r2, r3, #1
 8003742:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003746:	601a      	str	r2, [r3, #0]
 8003748:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 8003752:	429a      	cmp	r2, r3
 8003754:	dbb8      	blt.n	80036c8 <pathserver+0x180>
					    i = 0;
					    break;
				    }
			    }

			    if (i < npaths) {
 8003756:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 8003760:	429a      	cmp	r2, r3
 8003762:	da00      	bge.n	8003766 <pathserver+0x21e>
				    break;
 8003764:	e234      	b.n	8003bd0 <pathserver+0x688>
			    }

		        /* Search for mount point */
			    for (i = 0; i < nmounts; i++) {
 8003766:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800376a:	2200      	movs	r2, #0
 800376c:	601a      	str	r2, [r3, #0]
 800376e:	e090      	b.n	8003892 <pathserver+0x34a>
				    if (*mounts[i].path
 8003770:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 800377a:	4613      	mov	r3, r2
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	4413      	add	r3, r2
 8003780:	00db      	lsls	r3, r3, #3
 8003782:	440b      	add	r3, r1
 8003784:	3308      	adds	r3, #8
 8003786:	781b      	ldrb	r3, [r3, #0]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d07b      	beq.n	8003884 <pathserver+0x33c>
				            && strncmp(path, mounts[i].path,
 800378c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8003796:	4613      	mov	r3, r2
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	4413      	add	r3, r2
 800379c:	00db      	lsls	r3, r3, #3
 800379e:	3308      	adds	r3, #8
 80037a0:	18cc      	adds	r4, r1, r3
				                       strlen(mounts[i].path)) == 0) {
 80037a2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 80037ac:	4613      	mov	r3, r2
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	4413      	add	r3, r2
 80037b2:	00db      	lsls	r3, r3, #3
 80037b4:	3308      	adds	r3, #8
 80037b6:	440b      	add	r3, r1
			    }

		        /* Search for mount point */
			    for (i = 0; i < nmounts; i++) {
				    if (*mounts[i].path
				            && strncmp(path, mounts[i].path,
 80037b8:	4618      	mov	r0, r3
 80037ba:	f001 fb09 	bl	8004dd0 <strlen>
 80037be:	4603      	mov	r3, r0
 80037c0:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80037c4:	4610      	mov	r0, r2
 80037c6:	4621      	mov	r1, r4
 80037c8:	461a      	mov	r2, r3
 80037ca:	f001 fad5 	bl	8004d78 <strncmp>
 80037ce:	4603      	mov	r3, r0
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d157      	bne.n	8003884 <pathserver+0x33c>
				                       strlen(mounts[i].path)) == 0) {
				        int mlen = strlen(mounts[i].path);
 80037d4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 80037de:	4613      	mov	r3, r2
 80037e0:	009b      	lsls	r3, r3, #2
 80037e2:	4413      	add	r3, r2
 80037e4:	00db      	lsls	r3, r3, #3
 80037e6:	3308      	adds	r3, #8
 80037e8:	440b      	add	r3, r1
 80037ea:	4618      	mov	r0, r3
 80037ec:	f001 faf0 	bl	8004dd0 <strlen>
 80037f0:	4603      	mov	r3, r0
 80037f2:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450
					    struct fs_request request;
					    request.cmd = FS_CMD_OPEN;
 80037f6:	f107 0320 	add.w	r3, r7, #32
 80037fa:	2201      	movs	r2, #1
 80037fc:	601a      	str	r2, [r3, #0]
					    request.from = replyfd;
 80037fe:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	461a      	mov	r2, r3
 8003806:	f107 0320 	add.w	r3, r7, #32
 800380a:	605a      	str	r2, [r3, #4]
					    request.device = mounts[i].dev;
 800380c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8003816:	4613      	mov	r3, r2
 8003818:	009b      	lsls	r3, r3, #2
 800381a:	4413      	add	r3, r2
 800381c:	00db      	lsls	r3, r3, #3
 800381e:	440b      	add	r3, r1
 8003820:	685a      	ldr	r2, [r3, #4]
 8003822:	f107 0320 	add.w	r3, r7, #32
 8003826:	609a      	str	r2, [r3, #8]
					    request.pos = mlen; /* search starting position */
 8003828:	f107 0320 	add.w	r3, r7, #32
 800382c:	f8d7 2450 	ldr.w	r2, [r7, #1104]	; 0x450
 8003830:	635a      	str	r2, [r3, #52]	; 0x34
					    memcpy(request.path, &path, plen);
 8003832:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f107 0220 	add.w	r2, r7, #32
 800383c:	f102 0110 	add.w	r1, r2, #16
 8003840:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8003844:	4608      	mov	r0, r1
 8003846:	4611      	mov	r1, r2
 8003848:	461a      	mov	r2, r3
 800384a:	f014 fb51 	bl	8017ef0 <memcpy>
					    write(mounts[i].fs, &request, sizeof(request));
 800384e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8003858:	4613      	mov	r3, r2
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	4413      	add	r3, r2
 800385e:	00db      	lsls	r3, r3, #3
 8003860:	440b      	add	r3, r1
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	f107 0320 	add.w	r3, r7, #32
 8003868:	4610      	mov	r0, r2
 800386a:	4619      	mov	r1, r3
 800386c:	2238      	movs	r2, #56	; 0x38
 800386e:	f014 fb95 	bl	8017f9c <write>
					    i = 0;
 8003872:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003876:	2200      	movs	r2, #0
 8003878:	601a      	str	r2, [r3, #0]
					    break;
 800387a:	bf00      	nop
 800387c:	e011      	b.n	80038a2 <pathserver+0x35a>
 800387e:	bf00      	nop
 8003880:	0801a518 	.word	0x0801a518
			    if (i < npaths) {
				    break;
			    }

		        /* Search for mount point */
			    for (i = 0; i < nmounts; i++) {
 8003884:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	1c5a      	adds	r2, r3, #1
 800388c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003890:	601a      	str	r2, [r3, #0]
 8003892:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 800389c:	429a      	cmp	r2, r3
 800389e:	f6ff af67 	blt.w	8003770 <pathserver+0x228>
					    i = 0;
					    break;
				    }
			    }

			    if (i >= nmounts) {
 80038a2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 80038ac:	429a      	cmp	r2, r3
 80038ae:	db10      	blt.n	80038d2 <pathserver+0x38a>
				    i = -1; /* Error: not found */
 80038b0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80038b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80038b8:	601a      	str	r2, [r3, #0]
				    write(replyfd, &i, 4);
 80038ba:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	461a      	mov	r2, r3
 80038c2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80038c6:	4610      	mov	r0, r2
 80038c8:	4619      	mov	r1, r3
 80038ca:	2204      	movs	r2, #4
 80038cc:	f014 fb66 	bl	8017f9c <write>
			    }
		        break;
 80038d0:	e17e      	b.n	8003bd0 <pathserver+0x688>
 80038d2:	e17d      	b.n	8003bd0 <pathserver+0x688>

		    case PATH_CMD_REGISTER_PATH:
		        read(PATHSERVER_FD, &plen, 4);
 80038d4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80038d8:	200b      	movs	r0, #11
 80038da:	4619      	mov	r1, r3
 80038dc:	2204      	movs	r2, #4
 80038de:	f014 fb64 	bl	8017faa <read>
		        read(PATHSERVER_FD, path, plen);
 80038e2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80038ec:	200b      	movs	r0, #11
 80038ee:	4611      	mov	r1, r2
 80038f0:	461a      	mov	r2, r3
 80038f2:	f014 fb5a 	bl	8017faa <read>
			    newfd = npaths + 3 + TASK_LIMIT;
 80038f6:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 80038fa:	f103 020b 	add.w	r2, r3, #11
 80038fe:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003902:	601a      	str	r2, [r3, #0]
			    memcpy(paths[npaths], path, plen);
 8003904:	f507 72d8 	add.w	r2, r7, #432	; 0x1b0
 8003908:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 800390c:	015b      	lsls	r3, r3, #5
 800390e:	18d1      	adds	r1, r2, r3
 8003910:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800391a:	4608      	mov	r0, r1
 800391c:	4611      	mov	r1, r2
 800391e:	461a      	mov	r2, r3
 8003920:	f014 fae6 	bl	8017ef0 <memcpy>
		        npaths++;
 8003924:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 8003928:	3301      	adds	r3, #1
 800392a:	f8c7 345c 	str.w	r3, [r7, #1116]	; 0x45c
				write(replyfd, &newfd, 4);
 800392e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	461a      	mov	r2, r3
 8003936:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800393a:	4610      	mov	r0, r2
 800393c:	4619      	mov	r1, r3
 800393e:	2204      	movs	r2, #4
 8003940:	f014 fb2c 	bl	8017f9c <write>
		        break;
 8003944:	e144      	b.n	8003bd0 <pathserver+0x688>

		    case PATH_CMD_REGISTER_FS:
		        read(PATHSERVER_FD, &plen, 4);
 8003946:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800394a:	200b      	movs	r0, #11
 800394c:	4619      	mov	r1, r3
 800394e:	2204      	movs	r2, #4
 8003950:	f014 fb2b 	bl	8017faa <read>
		        read(PATHSERVER_FD, fs_type, plen);
 8003954:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800395e:	200b      	movs	r0, #11
 8003960:	4611      	mov	r1, r2
 8003962:	461a      	mov	r2, r3
 8003964:	f014 fb21 	bl	8017faa <read>
		        fs_fds[nfs_types] = replyfd;
 8003968:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4619      	mov	r1, r3
 8003970:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8003974:	f8d7 2458 	ldr.w	r2, [r7, #1112]	; 0x458
 8003978:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			    memcpy(fs_types[nfs_types], fs_type, plen);
 800397c:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 8003980:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 8003984:	00db      	lsls	r3, r3, #3
 8003986:	18d1      	adds	r1, r2, r3
 8003988:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8003992:	4608      	mov	r0, r1
 8003994:	4611      	mov	r1, r2
 8003996:	461a      	mov	r2, r3
 8003998:	f014 faaa 	bl	8017ef0 <memcpy>
		        nfs_types++;
 800399c:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 80039a0:	3301      	adds	r3, #1
 80039a2:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
		        i = 0;
 80039a6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80039aa:	2200      	movs	r2, #0
 80039ac:	601a      	str	r2, [r3, #0]
				write(replyfd, &i, 4);
 80039ae:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	461a      	mov	r2, r3
 80039b6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80039ba:	4610      	mov	r0, r2
 80039bc:	4619      	mov	r1, r3
 80039be:	2204      	movs	r2, #4
 80039c0:	f014 faec 	bl	8017f9c <write>
				break;
 80039c4:	e104      	b.n	8003bd0 <pathserver+0x688>
			    int dlen;
			    int tlen;
			    char src[PATH_MAX];
			    char dst[PATH_MAX];
			    char type[FS_TYPE_MAX];
		        read(PATHSERVER_FD, &slen, 4);
 80039c6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80039ca:	200b      	movs	r0, #11
 80039cc:	4619      	mov	r1, r3
 80039ce:	2204      	movs	r2, #4
 80039d0:	f014 faeb 	bl	8017faa <read>
		        read(PATHSERVER_FD, src, slen);
 80039d4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	463a      	mov	r2, r7
 80039dc:	200b      	movs	r0, #11
 80039de:	4611      	mov	r1, r2
 80039e0:	461a      	mov	r2, r3
 80039e2:	f014 fae2 	bl	8017faa <read>
		        read(PATHSERVER_FD, &dlen, 4);
 80039e6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80039ea:	200b      	movs	r0, #11
 80039ec:	4619      	mov	r1, r3
 80039ee:	2204      	movs	r2, #4
 80039f0:	f014 fadb 	bl	8017faa <read>
		        read(PATHSERVER_FD, dst, dlen);
 80039f4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f107 0220 	add.w	r2, r7, #32
 80039fe:	200b      	movs	r0, #11
 8003a00:	4611      	mov	r1, r2
 8003a02:	461a      	mov	r2, r3
 8003a04:	f014 fad1 	bl	8017faa <read>
		        read(PATHSERVER_FD, &tlen, 4);
 8003a08:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003a0c:	200b      	movs	r0, #11
 8003a0e:	4619      	mov	r1, r3
 8003a10:	2204      	movs	r2, #4
 8003a12:	f014 faca 	bl	8017faa <read>
		        read(PATHSERVER_FD, type, tlen);
 8003a16:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8003a20:	200b      	movs	r0, #11
 8003a22:	4611      	mov	r1, r2
 8003a24:	461a      	mov	r2, r3
 8003a26:	f014 fac0 	bl	8017faa <read>

		        /* Search for filesystem types */
			    for (i = 0; i < nfs_types; i++) {
 8003a2a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003a2e:	2200      	movs	r2, #0
 8003a30:	601a      	str	r2, [r3, #0]
 8003a32:	e020      	b.n	8003a76 <pathserver+0x52e>
				    if (*fs_types[i] && strcmp(type, fs_types[i]) == 0) {
 8003a34:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8003a3e:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d010      	beq.n	8003a68 <pathserver+0x520>
 8003a46:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 8003a50:	00db      	lsls	r3, r3, #3
 8003a52:	4413      	add	r3, r2
 8003a54:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8003a58:	4610      	mov	r0, r2
 8003a5a:	4619      	mov	r1, r3
 8003a5c:	f001 f97e 	bl	8004d5c <strcmp>
 8003a60:	4603      	mov	r3, r0
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d100      	bne.n	8003a68 <pathserver+0x520>
					    break;
 8003a66:	e00d      	b.n	8003a84 <pathserver+0x53c>
		        read(PATHSERVER_FD, dst, dlen);
		        read(PATHSERVER_FD, &tlen, 4);
		        read(PATHSERVER_FD, type, tlen);

		        /* Search for filesystem types */
			    for (i = 0; i < nfs_types; i++) {
 8003a68:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	1c5a      	adds	r2, r3, #1
 8003a70:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003a74:	601a      	str	r2, [r3, #0]
 8003a76:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 8003a80:	429a      	cmp	r2, r3
 8003a82:	dbd7      	blt.n	8003a34 <pathserver+0x4ec>
				    if (*fs_types[i] && strcmp(type, fs_types[i]) == 0) {
					    break;
				    }
			    }

			    if (i >= nfs_types) {
 8003a84:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	db10      	blt.n	8003ab4 <pathserver+0x56c>
				    status = -1; /* Error: not found */
 8003a92:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003a96:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003a9a:	601a      	str	r2, [r3, #0]
				    write(replyfd, &status, 4);
 8003a9c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003aa8:	4610      	mov	r0, r2
 8003aaa:	4619      	mov	r1, r3
 8003aac:	2204      	movs	r2, #4
 8003aae:	f014 fa75 	bl	8017f9c <write>
				    break;
 8003ab2:	e08d      	b.n	8003bd0 <pathserver+0x688>
			    }

                mounts[nmounts].fs = fs_fds[i];
 8003ab4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8003abe:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003ac2:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8003ac6:	f8d7 2454 	ldr.w	r2, [r7, #1108]	; 0x454
 8003aca:	4613      	mov	r3, r2
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	4413      	add	r3, r2
 8003ad0:	00db      	lsls	r3, r3, #3
 8003ad2:	4403      	add	r3, r0
 8003ad4:	6019      	str	r1, [r3, #0]

		        /* Search for device */
			    for (i = 0; i < npaths; i++) {
 8003ad6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003ada:	2200      	movs	r2, #0
 8003adc:	601a      	str	r2, [r3, #0]
 8003ade:	e020      	b.n	8003b22 <pathserver+0x5da>
				    if (*paths[i] && strcmp(src, paths[i]) == 0) {
 8003ae0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f507 72d8 	add.w	r2, r7, #432	; 0x1b0
 8003aea:	015b      	lsls	r3, r3, #5
 8003aec:	4413      	add	r3, r2
 8003aee:	781b      	ldrb	r3, [r3, #0]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d00f      	beq.n	8003b14 <pathserver+0x5cc>
 8003af4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f507 72d8 	add.w	r2, r7, #432	; 0x1b0
 8003afe:	015b      	lsls	r3, r3, #5
 8003b00:	4413      	add	r3, r2
 8003b02:	463a      	mov	r2, r7
 8003b04:	4610      	mov	r0, r2
 8003b06:	4619      	mov	r1, r3
 8003b08:	f001 f928 	bl	8004d5c <strcmp>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d100      	bne.n	8003b14 <pathserver+0x5cc>
					    break;
 8003b12:	e00d      	b.n	8003b30 <pathserver+0x5e8>
			    }

                mounts[nmounts].fs = fs_fds[i];

		        /* Search for device */
			    for (i = 0; i < npaths; i++) {
 8003b14:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	1c5a      	adds	r2, r3, #1
 8003b1c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003b20:	601a      	str	r2, [r3, #0]
 8003b22:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	dbd7      	blt.n	8003ae0 <pathserver+0x598>
				    if (*paths[i] && strcmp(src, paths[i]) == 0) {
					    break;
				    }
			    }

			    if (i >= npaths) {
 8003b30:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	db10      	blt.n	8003b60 <pathserver+0x618>
				    status = -1; /* Error: not found */
 8003b3e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003b42:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003b46:	601a      	str	r2, [r3, #0]
				    write(replyfd, &status, 4);
 8003b48:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	461a      	mov	r2, r3
 8003b50:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003b54:	4610      	mov	r0, r2
 8003b56:	4619      	mov	r1, r3
 8003b58:	2204      	movs	r2, #4
 8003b5a:	f014 fa1f 	bl	8017f9c <write>
				    break;
 8003b5e:	e037      	b.n	8003bd0 <pathserver+0x688>
			    }

                /* Store mount point */
                mounts[nmounts].dev = i + 3 + TASK_LIMIT;
 8003b60:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f103 010b 	add.w	r1, r3, #11
 8003b6a:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8003b6e:	f8d7 2454 	ldr.w	r2, [r7, #1108]	; 0x454
 8003b72:	4613      	mov	r3, r2
 8003b74:	009b      	lsls	r3, r3, #2
 8003b76:	4413      	add	r3, r2
 8003b78:	00db      	lsls	r3, r3, #3
 8003b7a:	4403      	add	r3, r0
 8003b7c:	6059      	str	r1, [r3, #4]
			    memcpy(mounts[nmounts].path, dst, dlen);
 8003b7e:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8003b82:	f8d7 2454 	ldr.w	r2, [r7, #1108]	; 0x454
 8003b86:	4613      	mov	r3, r2
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	4413      	add	r3, r2
 8003b8c:	00db      	lsls	r3, r3, #3
 8003b8e:	3308      	adds	r3, #8
 8003b90:	4419      	add	r1, r3
 8003b92:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f107 0220 	add.w	r2, r7, #32
 8003b9c:	4608      	mov	r0, r1
 8003b9e:	4611      	mov	r1, r2
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	f014 f9a5 	bl	8017ef0 <memcpy>
			    nmounts++;
 8003ba6:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 8003baa:	3301      	adds	r3, #1
 8003bac:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454

                status = 0;
 8003bb0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	601a      	str	r2, [r3, #0]
                write(replyfd, &status, 4);
 8003bb8:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	461a      	mov	r2, r3
 8003bc0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003bc4:	4610      	mov	r0, r2
 8003bc6:	4619      	mov	r1, r3
 8003bc8:	2204      	movs	r2, #4
 8003bca:	f014 f9e7 	bl	8017f9c <write>
		    }   break;
 8003bce:	bf00      	nop

		    default:
		        ;
		}
	}
 8003bd0:	e4ee      	b.n	80035b0 <pathserver+0x68>
 8003bd2:	bf00      	nop

08003bd4 <path_register>:
}

int path_register(const char *pathname)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b092      	sub	sp, #72	; 0x48
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
    int cmd = PATH_CMD_REGISTER_PATH;
 8003bdc:	2303      	movs	r3, #3
 8003bde:	643b      	str	r3, [r7, #64]	; 0x40
	unsigned int replyfd = getpid() + 3;
 8003be0:	f014 f9d5 	bl	8017f8e <getpid>
 8003be4:	4603      	mov	r3, r0
 8003be6:	3303      	adds	r3, #3
 8003be8:	63fb      	str	r3, [r7, #60]	; 0x3c
	size_t plen = strlen(pathname)+1;
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f001 f8f0 	bl	8004dd0 <strlen>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	3301      	adds	r3, #1
 8003bf4:	63bb      	str	r3, [r7, #56]	; 0x38
	int fd = -1;
 8003bf6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003bfa:	637b      	str	r3, [r7, #52]	; 0x34
	char buf[4+4+4+PATH_MAX];
	int pos = 0;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	647b      	str	r3, [r7, #68]	; 0x44

	path_write_data(buf, &cmd, 4, pos);
 8003c00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c02:	f107 0208 	add.w	r2, r7, #8
 8003c06:	441a      	add	r2, r3
 8003c08:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003c0c:	4610      	mov	r0, r2
 8003c0e:	4619      	mov	r1, r3
 8003c10:	2204      	movs	r2, #4
 8003c12:	f014 f96d 	bl	8017ef0 <memcpy>
 8003c16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c18:	3304      	adds	r3, #4
 8003c1a:	647b      	str	r3, [r7, #68]	; 0x44
	path_write_data(buf, &replyfd, 4, pos);
 8003c1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c1e:	f107 0208 	add.w	r2, r7, #8
 8003c22:	441a      	add	r2, r3
 8003c24:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003c28:	4610      	mov	r0, r2
 8003c2a:	4619      	mov	r1, r3
 8003c2c:	2204      	movs	r2, #4
 8003c2e:	f014 f95f 	bl	8017ef0 <memcpy>
 8003c32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c34:	3304      	adds	r3, #4
 8003c36:	647b      	str	r3, [r7, #68]	; 0x44
	path_write_data(buf, &plen, 4, pos);
 8003c38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c3a:	f107 0208 	add.w	r2, r7, #8
 8003c3e:	441a      	add	r2, r3
 8003c40:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003c44:	4610      	mov	r0, r2
 8003c46:	4619      	mov	r1, r3
 8003c48:	2204      	movs	r2, #4
 8003c4a:	f014 f951 	bl	8017ef0 <memcpy>
 8003c4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c50:	3304      	adds	r3, #4
 8003c52:	647b      	str	r3, [r7, #68]	; 0x44
	path_write_data(buf, pathname, plen, pos);
 8003c54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c56:	f107 0208 	add.w	r2, r7, #8
 8003c5a:	441a      	add	r2, r3
 8003c5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c5e:	4610      	mov	r0, r2
 8003c60:	6879      	ldr	r1, [r7, #4]
 8003c62:	461a      	mov	r2, r3
 8003c64:	f014 f944 	bl	8017ef0 <memcpy>
 8003c68:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c6c:	4413      	add	r3, r2
 8003c6e:	647b      	str	r3, [r7, #68]	; 0x44

	write(PATHSERVER_FD, buf, pos);
 8003c70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c72:	f107 0208 	add.w	r2, r7, #8
 8003c76:	200b      	movs	r0, #11
 8003c78:	4611      	mov	r1, r2
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	f014 f98e 	bl	8017f9c <write>
	read(replyfd, &fd, 4);
 8003c80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c82:	461a      	mov	r2, r3
 8003c84:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003c88:	4610      	mov	r0, r2
 8003c8a:	4619      	mov	r1, r3
 8003c8c:	2204      	movs	r2, #4
 8003c8e:	f014 f98c 	bl	8017faa <read>

	return fd;
 8003c92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3748      	adds	r7, #72	; 0x48
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}

08003c9c <path_register_fs>:

int path_register_fs(const char *type)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b092      	sub	sp, #72	; 0x48
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
    int cmd = PATH_CMD_REGISTER_FS;
 8003ca4:	2304      	movs	r3, #4
 8003ca6:	643b      	str	r3, [r7, #64]	; 0x40
	unsigned int replyfd = getpid() + 3;
 8003ca8:	f014 f971 	bl	8017f8e <getpid>
 8003cac:	4603      	mov	r3, r0
 8003cae:	3303      	adds	r3, #3
 8003cb0:	63fb      	str	r3, [r7, #60]	; 0x3c
	size_t plen = strlen(type)+1;
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f001 f88c 	bl	8004dd0 <strlen>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	3301      	adds	r3, #1
 8003cbc:	63bb      	str	r3, [r7, #56]	; 0x38
	int fd = -1;
 8003cbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003cc2:	637b      	str	r3, [r7, #52]	; 0x34
	char buf[4+4+4+PATH_MAX];
	int pos = 0;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	647b      	str	r3, [r7, #68]	; 0x44

	path_write_data(buf, &cmd, 4, pos);
 8003cc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cca:	f107 0208 	add.w	r2, r7, #8
 8003cce:	441a      	add	r2, r3
 8003cd0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003cd4:	4610      	mov	r0, r2
 8003cd6:	4619      	mov	r1, r3
 8003cd8:	2204      	movs	r2, #4
 8003cda:	f014 f909 	bl	8017ef0 <memcpy>
 8003cde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ce0:	3304      	adds	r3, #4
 8003ce2:	647b      	str	r3, [r7, #68]	; 0x44
	path_write_data(buf, &replyfd, 4, pos);
 8003ce4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ce6:	f107 0208 	add.w	r2, r7, #8
 8003cea:	441a      	add	r2, r3
 8003cec:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003cf0:	4610      	mov	r0, r2
 8003cf2:	4619      	mov	r1, r3
 8003cf4:	2204      	movs	r2, #4
 8003cf6:	f014 f8fb 	bl	8017ef0 <memcpy>
 8003cfa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cfc:	3304      	adds	r3, #4
 8003cfe:	647b      	str	r3, [r7, #68]	; 0x44
	path_write_data(buf, &plen, 4, pos);
 8003d00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d02:	f107 0208 	add.w	r2, r7, #8
 8003d06:	441a      	add	r2, r3
 8003d08:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003d0c:	4610      	mov	r0, r2
 8003d0e:	4619      	mov	r1, r3
 8003d10:	2204      	movs	r2, #4
 8003d12:	f014 f8ed 	bl	8017ef0 <memcpy>
 8003d16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d18:	3304      	adds	r3, #4
 8003d1a:	647b      	str	r3, [r7, #68]	; 0x44
	path_write_data(buf, type, plen, pos);
 8003d1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d1e:	f107 0208 	add.w	r2, r7, #8
 8003d22:	441a      	add	r2, r3
 8003d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d26:	4610      	mov	r0, r2
 8003d28:	6879      	ldr	r1, [r7, #4]
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	f014 f8e0 	bl	8017ef0 <memcpy>
 8003d30:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d34:	4413      	add	r3, r2
 8003d36:	647b      	str	r3, [r7, #68]	; 0x44

	write(PATHSERVER_FD, buf, pos);
 8003d38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d3a:	f107 0208 	add.w	r2, r7, #8
 8003d3e:	200b      	movs	r0, #11
 8003d40:	4611      	mov	r1, r2
 8003d42:	461a      	mov	r2, r3
 8003d44:	f014 f92a 	bl	8017f9c <write>
	read(replyfd, &fd, 4);
 8003d48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003d50:	4610      	mov	r0, r2
 8003d52:	4619      	mov	r1, r3
 8003d54:	2204      	movs	r2, #4
 8003d56:	f014 f928 	bl	8017faa <read>

	return fd;
 8003d5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3748      	adds	r7, #72	; 0x48
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}

08003d64 <mount>:

int mount(const char *src, const char *dst, const char *type, int flags)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b0a2      	sub	sp, #136	; 0x88
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	60f8      	str	r0, [r7, #12]
 8003d6c:	60b9      	str	r1, [r7, #8]
 8003d6e:	607a      	str	r2, [r7, #4]
 8003d70:	603b      	str	r3, [r7, #0]
    int cmd = PATH_CMD_MOUNT;
 8003d72:	2305      	movs	r3, #5
 8003d74:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	unsigned int replyfd = getpid() + 3;
 8003d78:	f014 f909 	bl	8017f8e <getpid>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	3303      	adds	r3, #3
 8003d80:	67fb      	str	r3, [r7, #124]	; 0x7c
	size_t slen = strlen(src)+1;
 8003d82:	68f8      	ldr	r0, [r7, #12]
 8003d84:	f001 f824 	bl	8004dd0 <strlen>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	3301      	adds	r3, #1
 8003d8c:	67bb      	str	r3, [r7, #120]	; 0x78
	size_t dlen = strlen(dst) + 1;
 8003d8e:	68b8      	ldr	r0, [r7, #8]
 8003d90:	f001 f81e 	bl	8004dd0 <strlen>
 8003d94:	4603      	mov	r3, r0
 8003d96:	3301      	adds	r3, #1
 8003d98:	677b      	str	r3, [r7, #116]	; 0x74
	size_t tlen = strlen(type) + 1;
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f001 f818 	bl	8004dd0 <strlen>
 8003da0:	4603      	mov	r3, r0
 8003da2:	3301      	adds	r3, #1
 8003da4:	673b      	str	r3, [r7, #112]	; 0x70
	int status;
	char buf[4 + 4 + 4 + PATH_MAX + 4 + PATH_MAX + 4 + FS_TYPE_MAX];
	int pos = 0;
 8003da6:	2300      	movs	r3, #0
 8003da8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

	path_write_data(buf, &cmd, 4, pos);
 8003dac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003db0:	f107 0210 	add.w	r2, r7, #16
 8003db4:	441a      	add	r2, r3
 8003db6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003dba:	4610      	mov	r0, r2
 8003dbc:	4619      	mov	r1, r3
 8003dbe:	2204      	movs	r2, #4
 8003dc0:	f014 f896 	bl	8017ef0 <memcpy>
 8003dc4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003dc8:	3304      	adds	r3, #4
 8003dca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	path_write_data(buf, &replyfd, 4, pos);
 8003dce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003dd2:	f107 0210 	add.w	r2, r7, #16
 8003dd6:	441a      	add	r2, r3
 8003dd8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003ddc:	4610      	mov	r0, r2
 8003dde:	4619      	mov	r1, r3
 8003de0:	2204      	movs	r2, #4
 8003de2:	f014 f885 	bl	8017ef0 <memcpy>
 8003de6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003dea:	3304      	adds	r3, #4
 8003dec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	path_write_data(buf, &slen, 4, pos);
 8003df0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003df4:	f107 0210 	add.w	r2, r7, #16
 8003df8:	441a      	add	r2, r3
 8003dfa:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003dfe:	4610      	mov	r0, r2
 8003e00:	4619      	mov	r1, r3
 8003e02:	2204      	movs	r2, #4
 8003e04:	f014 f874 	bl	8017ef0 <memcpy>
 8003e08:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e0c:	3304      	adds	r3, #4
 8003e0e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	path_write_data(buf, src, slen, pos);
 8003e12:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e16:	f107 0210 	add.w	r2, r7, #16
 8003e1a:	441a      	add	r2, r3
 8003e1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e1e:	4610      	mov	r0, r2
 8003e20:	68f9      	ldr	r1, [r7, #12]
 8003e22:	461a      	mov	r2, r3
 8003e24:	f014 f864 	bl	8017ef0 <memcpy>
 8003e28:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8003e2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e2e:	4413      	add	r3, r2
 8003e30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	path_write_data(buf, &dlen, 4, pos);
 8003e34:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e38:	f107 0210 	add.w	r2, r7, #16
 8003e3c:	441a      	add	r2, r3
 8003e3e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003e42:	4610      	mov	r0, r2
 8003e44:	4619      	mov	r1, r3
 8003e46:	2204      	movs	r2, #4
 8003e48:	f014 f852 	bl	8017ef0 <memcpy>
 8003e4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e50:	3304      	adds	r3, #4
 8003e52:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	path_write_data(buf, dst, dlen, pos);
 8003e56:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e5a:	f107 0210 	add.w	r2, r7, #16
 8003e5e:	441a      	add	r2, r3
 8003e60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e62:	4610      	mov	r0, r2
 8003e64:	68b9      	ldr	r1, [r7, #8]
 8003e66:	461a      	mov	r2, r3
 8003e68:	f014 f842 	bl	8017ef0 <memcpy>
 8003e6c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8003e70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e72:	4413      	add	r3, r2
 8003e74:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	path_write_data(buf, &tlen, 4, pos);
 8003e78:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e7c:	f107 0210 	add.w	r2, r7, #16
 8003e80:	441a      	add	r2, r3
 8003e82:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003e86:	4610      	mov	r0, r2
 8003e88:	4619      	mov	r1, r3
 8003e8a:	2204      	movs	r2, #4
 8003e8c:	f014 f830 	bl	8017ef0 <memcpy>
 8003e90:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e94:	3304      	adds	r3, #4
 8003e96:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	path_write_data(buf, type, tlen, pos);
 8003e9a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e9e:	f107 0210 	add.w	r2, r7, #16
 8003ea2:	441a      	add	r2, r3
 8003ea4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ea6:	4610      	mov	r0, r2
 8003ea8:	6879      	ldr	r1, [r7, #4]
 8003eaa:	461a      	mov	r2, r3
 8003eac:	f014 f820 	bl	8017ef0 <memcpy>
 8003eb0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8003eb4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003eb6:	4413      	add	r3, r2
 8003eb8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

	write(PATHSERVER_FD, buf, pos);
 8003ebc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003ec0:	f107 0210 	add.w	r2, r7, #16
 8003ec4:	200b      	movs	r0, #11
 8003ec6:	4611      	mov	r1, r2
 8003ec8:	461a      	mov	r2, r3
 8003eca:	f014 f867 	bl	8017f9c <write>
	read(replyfd, &status, 4);
 8003ece:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003ed0:	461a      	mov	r2, r3
 8003ed2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003ed6:	4610      	mov	r0, r2
 8003ed8:	4619      	mov	r1, r3
 8003eda:	2204      	movs	r2, #4
 8003edc:	f014 f865 	bl	8017faa <read>

	return status;
 8003ee0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3788      	adds	r7, #136	; 0x88
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}
 8003eea:	bf00      	nop

08003eec <pipe_read_release>:



int pipe_read_release(struct event_monitor *monitor, int event,
                      struct task_control_block *task, void *data)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b086      	sub	sp, #24
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	60f8      	str	r0, [r7, #12]
 8003ef4:	60b9      	str	r1, [r7, #8]
 8003ef6:	607a      	str	r2, [r7, #4]
 8003ef8:	603b      	str	r3, [r7, #0]
    struct file *file = data;
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	617b      	str	r3, [r7, #20]
    struct file_request *request = (void*)task->stack->r0;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f04:	613b      	str	r3, [r7, #16]

    return file_read(file, request, monitor);
 8003f06:	6978      	ldr	r0, [r7, #20]
 8003f08:	6939      	ldr	r1, [r7, #16]
 8003f0a:	68fa      	ldr	r2, [r7, #12]
 8003f0c:	f7fd f844 	bl	8000f98 <file_read>
 8003f10:	4603      	mov	r3, r0
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3718      	adds	r7, #24
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	bf00      	nop

08003f1c <pipe_write_release>:

int pipe_write_release(struct event_monitor *monitor, int event,
                       struct task_control_block *task, void *data)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b086      	sub	sp, #24
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	60f8      	str	r0, [r7, #12]
 8003f24:	60b9      	str	r1, [r7, #8]
 8003f26:	607a      	str	r2, [r7, #4]
 8003f28:	603b      	str	r3, [r7, #0]
    struct file *file = data;
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	617b      	str	r3, [r7, #20]
    struct file_request *request = (void*)task->stack->r0;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f34:	613b      	str	r3, [r7, #16]

    return file_write(file, request, monitor);
 8003f36:	6978      	ldr	r0, [r7, #20]
 8003f38:	6939      	ldr	r1, [r7, #16]
 8003f3a:	68fa      	ldr	r2, [r7, #12]
 8003f3c:	f7fd f876 	bl	800102c <file_write>
 8003f40:	4603      	mov	r3, r0
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3718      	adds	r7, #24
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	bf00      	nop

08003f4c <regfile_driver_readable>:
};


int regfile_driver_readable (struct regfile *regfile, struct file_request *request,
                           struct event_monitor *monitor)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b085      	sub	sp, #20
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	60f8      	str	r0, [r7, #12]
 8003f54:	60b9      	str	r1, [r7, #8]
 8003f56:	607a      	str	r2, [r7, #4]
    if (regfile->buzy)
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	699b      	ldr	r3, [r3, #24]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d001      	beq.n	8003f64 <regfile_driver_readable+0x18>
        return FILE_ACCESS_ACCEPT;
 8003f60:	2301      	movs	r3, #1
 8003f62:	e001      	b.n	8003f68 <regfile_driver_readable+0x1c>
    else
        return FILE_ACCESS_ERROR;
 8003f64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3714      	adds	r7, #20
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr

08003f74 <regfile_driver_writable>:

int regfile_driver_writable (struct regfile *regfile, struct file_request *request,
                           struct event_monitor *monitor)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b085      	sub	sp, #20
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	60f8      	str	r0, [r7, #12]
 8003f7c:	60b9      	str	r1, [r7, #8]
 8003f7e:	607a      	str	r2, [r7, #4]
    if (regfile->buzy)
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	699b      	ldr	r3, [r3, #24]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d001      	beq.n	8003f8c <regfile_driver_writable+0x18>
        return FILE_ACCESS_ACCEPT;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e001      	b.n	8003f90 <regfile_driver_writable+0x1c>
    else
        return FILE_ACCESS_ERROR;
 8003f8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	3714      	adds	r7, #20
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr

08003f9c <regfile_driver_lseekable>:

int regfile_driver_lseekable (struct regfile *regfile, struct file_request *request,
                            struct event_monitor *monitor)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b085      	sub	sp, #20
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	60f8      	str	r0, [r7, #12]
 8003fa4:	60b9      	str	r1, [r7, #8]
 8003fa6:	607a      	str	r2, [r7, #4]
    if (regfile->buzy)
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	699b      	ldr	r3, [r3, #24]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d001      	beq.n	8003fb4 <regfile_driver_lseekable+0x18>
        return FILE_ACCESS_ACCEPT;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	e001      	b.n	8003fb8 <regfile_driver_lseekable+0x1c>
    else
        return FILE_ACCESS_ERROR;
 8003fb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	3714      	adds	r7, #20
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr

08003fc4 <regfile_driver_read>:

int regfile_driver_read (struct regfile *regfile, struct file_request *request,
                       struct event_monitor *monitor)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b086      	sub	sp, #24
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	60f8      	str	r0, [r7, #12]
 8003fcc:	60b9      	str	r1, [r7, #8]
 8003fce:	607a      	str	r2, [r7, #4]
    int size = request->size;
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	617b      	str	r3, [r7, #20]
    if (size > REGFILE_BUF)
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	2b40      	cmp	r3, #64	; 0x40
 8003fda:	dd01      	ble.n	8003fe0 <regfile_driver_read+0x1c>
        size = REGFILE_BUF;
 8003fdc:	2340      	movs	r3, #64	; 0x40
 8003fde:	617b      	str	r3, [r7, #20]

    memcpy(request->buf, regfile->buf, size);
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	6859      	ldr	r1, [r3, #4]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f103 0220 	add.w	r2, r3, #32
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	4608      	mov	r0, r1
 8003fee:	4611      	mov	r1, r2
 8003ff0:	461a      	mov	r2, r3
 8003ff2:	f013 ff7d 	bl	8017ef0 <memcpy>

    /* still buzy until driver write response */
    return size;
 8003ff6:	697b      	ldr	r3, [r7, #20]
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	3718      	adds	r7, #24
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}

08004000 <regfile_driver_write>:

int regfile_driver_write (struct regfile *regfile, struct file_request *request,
                        struct event_monitor *monitor)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b086      	sub	sp, #24
 8004004:	af00      	add	r7, sp, #0
 8004006:	60f8      	str	r0, [r7, #12]
 8004008:	60b9      	str	r1, [r7, #8]
 800400a:	607a      	str	r2, [r7, #4]
    char *data_buf = request->buf;
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	613b      	str	r3, [r7, #16]
    int len = request->size;
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	617b      	str	r3, [r7, #20]
    if (len > REGFILE_BUF)
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	2b40      	cmp	r3, #64	; 0x40
 800401c:	dd01      	ble.n	8004022 <regfile_driver_write+0x22>
        len = REGFILE_BUF;
 800401e:	2340      	movs	r3, #64	; 0x40
 8004020:	617b      	str	r3, [r7, #20]

    if (len > 0) {
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	2b00      	cmp	r3, #0
 8004026:	dd08      	ble.n	800403a <regfile_driver_write+0x3a>
        memcpy(regfile->buf, data_buf, len);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f103 0220 	add.w	r2, r3, #32
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	4610      	mov	r0, r2
 8004032:	6939      	ldr	r1, [r7, #16]
 8004034:	461a      	mov	r2, r3
 8004036:	f013 ff5b 	bl	8017ef0 <memcpy>
    }
    regfile->transfer_len = len;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	697a      	ldr	r2, [r7, #20]
 800403e:	661a      	str	r2, [r3, #96]	; 0x60
    regfile->buzy = 0;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2200      	movs	r2, #0
 8004044:	619a      	str	r2, [r3, #24]
	event_monitor_release(monitor, regfile->event);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	691b      	ldr	r3, [r3, #16]
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	4619      	mov	r1, r3
 800404e:	f7fc fd03 	bl	8000a58 <event_monitor_release>
    return len;
 8004052:	697b      	ldr	r3, [r7, #20]
}
 8004054:	4618      	mov	r0, r3
 8004056:	3718      	adds	r7, #24
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}

0800405c <regfile_driver_lseek>:

int regfile_driver_lseek (struct regfile *regfile, struct file_request *request,
                        struct event_monitor *monitor)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b084      	sub	sp, #16
 8004060:	af00      	add	r7, sp, #0
 8004062:	60f8      	str	r0, [r7, #12]
 8004064:	60b9      	str	r1, [r7, #8]
 8004066:	607a      	str	r2, [r7, #4]
    regfile->transfer_len = request->size;
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	689a      	ldr	r2, [r3, #8]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	661a      	str	r2, [r3, #96]	; 0x60
    regfile->buzy = 0;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2200      	movs	r2, #0
 8004074:	619a      	str	r2, [r3, #24]
	event_monitor_release(monitor, regfile->event);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	691b      	ldr	r3, [r3, #16]
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	4619      	mov	r1, r3
 800407e:	f7fc fceb 	bl	8000a58 <event_monitor_release>
    return request->size;
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	689b      	ldr	r3, [r3, #8]
}
 8004086:	4618      	mov	r0, r3
 8004088:	3710      	adds	r7, #16
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}
 800408e:	bf00      	nop

08004090 <regfile_request_readable>:
 *  5. Get transfer_len
 *  6. Read data from buffer
 */
int regfile_request_readable (struct regfile *regfile, struct file_request *request,
                            struct event_monitor *monitor)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b09a      	sub	sp, #104	; 0x68
 8004094:	af00      	add	r7, sp, #0
 8004096:	60f8      	str	r0, [r7, #12]
 8004098:	60b9      	str	r1, [r7, #8]
 800409a:	607a      	str	r2, [r7, #4]
    struct task_control_block *task = request->task;
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	663b      	str	r3, [r7, #96]	; 0x60

    if (regfile->request_pid == 0) {
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	695b      	ldr	r3, [r3, #20]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d169      	bne.n	800417e <regfile_request_readable+0xee>
        /* try to send request */
        struct file *driver = regfile->driver_file;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	68db      	ldr	r3, [r3, #12]
 80040ae:	65fb      	str	r3, [r7, #92]	; 0x5c
        int size = request->size;
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	667b      	str	r3, [r7, #100]	; 0x64
        if (size > REGFILE_BUF)
 80040b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80040b8:	2b40      	cmp	r3, #64	; 0x40
 80040ba:	dd01      	ble.n	80040c0 <regfile_request_readable+0x30>
            size = REGFILE_BUF;
 80040bc:	2340      	movs	r3, #64	; 0x40
 80040be:	667b      	str	r3, [r7, #100]	; 0x64

        struct fs_request fs_request = {
 80040c0:	f107 0314 	add.w	r3, r7, #20
 80040c4:	2200      	movs	r2, #0
 80040c6:	601a      	str	r2, [r3, #0]
 80040c8:	3304      	adds	r3, #4
 80040ca:	2200      	movs	r2, #0
 80040cc:	601a      	str	r2, [r3, #0]
 80040ce:	3304      	adds	r3, #4
 80040d0:	2200      	movs	r2, #0
 80040d2:	601a      	str	r2, [r3, #0]
 80040d4:	3304      	adds	r3, #4
 80040d6:	2200      	movs	r2, #0
 80040d8:	601a      	str	r2, [r3, #0]
 80040da:	3304      	adds	r3, #4
 80040dc:	2200      	movs	r2, #0
 80040de:	601a      	str	r2, [r3, #0]
 80040e0:	3304      	adds	r3, #4
 80040e2:	2200      	movs	r2, #0
 80040e4:	601a      	str	r2, [r3, #0]
 80040e6:	3304      	adds	r3, #4
 80040e8:	2200      	movs	r2, #0
 80040ea:	601a      	str	r2, [r3, #0]
 80040ec:	3304      	adds	r3, #4
 80040ee:	2200      	movs	r2, #0
 80040f0:	601a      	str	r2, [r3, #0]
 80040f2:	3304      	adds	r3, #4
 80040f4:	2200      	movs	r2, #0
 80040f6:	601a      	str	r2, [r3, #0]
 80040f8:	3304      	adds	r3, #4
 80040fa:	2200      	movs	r2, #0
 80040fc:	601a      	str	r2, [r3, #0]
 80040fe:	3304      	adds	r3, #4
 8004100:	2200      	movs	r2, #0
 8004102:	601a      	str	r2, [r3, #0]
 8004104:	3304      	adds	r3, #4
 8004106:	2200      	movs	r2, #0
 8004108:	601a      	str	r2, [r3, #0]
 800410a:	3304      	adds	r3, #4
 800410c:	2200      	movs	r2, #0
 800410e:	601a      	str	r2, [r3, #0]
 8004110:	3304      	adds	r3, #4
 8004112:	2200      	movs	r2, #0
 8004114:	601a      	str	r2, [r3, #0]
 8004116:	3304      	adds	r3, #4
 8004118:	2302      	movs	r3, #2
 800411a:	617b      	str	r3, [r7, #20]
            .cmd = FS_CMD_READ,
            .from = task->pid,
 800411c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800411e:	685b      	ldr	r3, [r3, #4]
        struct file *driver = regfile->driver_file;
        int size = request->size;
        if (size > REGFILE_BUF)
            size = REGFILE_BUF;

        struct fs_request fs_request = {
 8004120:	61bb      	str	r3, [r7, #24]
            .cmd = FS_CMD_READ,
            .from = task->pid,
            .target = regfile->file.fd,
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
        struct file *driver = regfile->driver_file;
        int size = request->size;
        if (size > REGFILE_BUF)
            size = REGFILE_BUF;

        struct fs_request fs_request = {
 8004126:	623b      	str	r3, [r7, #32]
 8004128:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800412a:	647b      	str	r3, [r7, #68]	; 0x44
            .cmd = FS_CMD_READ,
            .from = task->pid,
            .target = regfile->file.fd,
            .size = size,
            .pos = regfile->pos
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	69db      	ldr	r3, [r3, #28]
        struct file *driver = regfile->driver_file;
        int size = request->size;
        if (size > REGFILE_BUF)
            size = REGFILE_BUF;

        struct fs_request fs_request = {
 8004130:	64bb      	str	r3, [r7, #72]	; 0x48
            .target = regfile->file.fd,
            .size = size,
            .pos = regfile->pos
        };

        struct file_request file_request = {
 8004132:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004136:	2200      	movs	r2, #0
 8004138:	601a      	str	r2, [r3, #0]
 800413a:	3304      	adds	r3, #4
 800413c:	2200      	movs	r2, #0
 800413e:	601a      	str	r2, [r3, #0]
 8004140:	3304      	adds	r3, #4
 8004142:	2200      	movs	r2, #0
 8004144:	601a      	str	r2, [r3, #0]
 8004146:	3304      	adds	r3, #4
 8004148:	2200      	movs	r2, #0
 800414a:	601a      	str	r2, [r3, #0]
 800414c:	3304      	adds	r3, #4
 800414e:	f107 0314 	add.w	r3, r7, #20
 8004152:	653b      	str	r3, [r7, #80]	; 0x50
 8004154:	2338      	movs	r3, #56	; 0x38
 8004156:	657b      	str	r3, [r7, #84]	; 0x54
            .task = NULL,
            .buf = (char *)&fs_request,
            .size = sizeof(fs_request),
        };
        if (file_write(driver, &file_request, monitor) == 1) {
 8004158:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800415c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800415e:	4619      	mov	r1, r3
 8004160:	687a      	ldr	r2, [r7, #4]
 8004162:	f7fc ff63 	bl	800102c <file_write>
 8004166:	4603      	mov	r3, r0
 8004168:	2b01      	cmp	r3, #1
 800416a:	d107      	bne.n	800417c <regfile_request_readable+0xec>
            regfile->request_pid = task->pid;
 800416c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800416e:	685a      	ldr	r2, [r3, #4]
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	615a      	str	r2, [r3, #20]
            regfile->buzy = 1;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2201      	movs	r2, #1
 8004178:	619a      	str	r2, [r3, #24]
 800417a:	e00c      	b.n	8004196 <regfile_request_readable+0x106>
 800417c:	e00b      	b.n	8004196 <regfile_request_readable+0x106>
        }
    }
    else if (regfile->request_pid == task->pid && !regfile->buzy) {
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	695a      	ldr	r2, [r3, #20]
 8004182:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	429a      	cmp	r2, r3
 8004188:	d105      	bne.n	8004196 <regfile_request_readable+0x106>
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	699b      	ldr	r3, [r3, #24]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d101      	bne.n	8004196 <regfile_request_readable+0x106>
        return FILE_ACCESS_ACCEPT;
 8004192:	2301      	movs	r3, #1
 8004194:	e007      	b.n	80041a6 <regfile_request_readable+0x116>
    }

	event_monitor_block(monitor, regfile->event, task);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	691b      	ldr	r3, [r3, #16]
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	4619      	mov	r1, r3
 800419e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80041a0:	f7fc fc3c 	bl	8000a1c <event_monitor_block>
    return FILE_ACCESS_BLOCK;
 80041a4:	2300      	movs	r3, #0
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3768      	adds	r7, #104	; 0x68
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}
 80041ae:	bf00      	nop

080041b0 <regfile_request_writable>:
 *  6. Driver write empty data to buffer
 *  7. Get transfer_len
 */
int regfile_request_writable (struct regfile *regfile, struct file_request *request,
                            struct event_monitor *monitor)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b09a      	sub	sp, #104	; 0x68
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	60f8      	str	r0, [r7, #12]
 80041b8:	60b9      	str	r1, [r7, #8]
 80041ba:	607a      	str	r2, [r7, #4]
    struct task_control_block *task = request->task;
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	663b      	str	r3, [r7, #96]	; 0x60

    if (regfile->request_pid == 0) {
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	695b      	ldr	r3, [r3, #20]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d174      	bne.n	80042b4 <regfile_request_writable+0x104>
        /* try to send request */
        struct file *driver = regfile->driver_file;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	68db      	ldr	r3, [r3, #12]
 80041ce:	65fb      	str	r3, [r7, #92]	; 0x5c
        int size = request->size;
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	667b      	str	r3, [r7, #100]	; 0x64
        if (size > REGFILE_BUF)
 80041d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80041d8:	2b40      	cmp	r3, #64	; 0x40
 80041da:	dd01      	ble.n	80041e0 <regfile_request_writable+0x30>
            size = REGFILE_BUF;
 80041dc:	2340      	movs	r3, #64	; 0x40
 80041de:	667b      	str	r3, [r7, #100]	; 0x64

        struct fs_request fs_request = {
 80041e0:	f107 0314 	add.w	r3, r7, #20
 80041e4:	2200      	movs	r2, #0
 80041e6:	601a      	str	r2, [r3, #0]
 80041e8:	3304      	adds	r3, #4
 80041ea:	2200      	movs	r2, #0
 80041ec:	601a      	str	r2, [r3, #0]
 80041ee:	3304      	adds	r3, #4
 80041f0:	2200      	movs	r2, #0
 80041f2:	601a      	str	r2, [r3, #0]
 80041f4:	3304      	adds	r3, #4
 80041f6:	2200      	movs	r2, #0
 80041f8:	601a      	str	r2, [r3, #0]
 80041fa:	3304      	adds	r3, #4
 80041fc:	2200      	movs	r2, #0
 80041fe:	601a      	str	r2, [r3, #0]
 8004200:	3304      	adds	r3, #4
 8004202:	2200      	movs	r2, #0
 8004204:	601a      	str	r2, [r3, #0]
 8004206:	3304      	adds	r3, #4
 8004208:	2200      	movs	r2, #0
 800420a:	601a      	str	r2, [r3, #0]
 800420c:	3304      	adds	r3, #4
 800420e:	2200      	movs	r2, #0
 8004210:	601a      	str	r2, [r3, #0]
 8004212:	3304      	adds	r3, #4
 8004214:	2200      	movs	r2, #0
 8004216:	601a      	str	r2, [r3, #0]
 8004218:	3304      	adds	r3, #4
 800421a:	2200      	movs	r2, #0
 800421c:	601a      	str	r2, [r3, #0]
 800421e:	3304      	adds	r3, #4
 8004220:	2200      	movs	r2, #0
 8004222:	601a      	str	r2, [r3, #0]
 8004224:	3304      	adds	r3, #4
 8004226:	2200      	movs	r2, #0
 8004228:	601a      	str	r2, [r3, #0]
 800422a:	3304      	adds	r3, #4
 800422c:	2200      	movs	r2, #0
 800422e:	601a      	str	r2, [r3, #0]
 8004230:	3304      	adds	r3, #4
 8004232:	2200      	movs	r2, #0
 8004234:	601a      	str	r2, [r3, #0]
 8004236:	3304      	adds	r3, #4
 8004238:	2303      	movs	r3, #3
 800423a:	617b      	str	r3, [r7, #20]
            .cmd = FS_CMD_WRITE,
            .from = task->pid,
 800423c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800423e:	685b      	ldr	r3, [r3, #4]
        struct file *driver = regfile->driver_file;
        int size = request->size;
        if (size > REGFILE_BUF)
            size = REGFILE_BUF;

        struct fs_request fs_request = {
 8004240:	61bb      	str	r3, [r7, #24]
            .cmd = FS_CMD_WRITE,
            .from = task->pid,
            .target = regfile->file.fd,
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
        struct file *driver = regfile->driver_file;
        int size = request->size;
        if (size > REGFILE_BUF)
            size = REGFILE_BUF;

        struct fs_request fs_request = {
 8004246:	623b      	str	r3, [r7, #32]
 8004248:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800424a:	647b      	str	r3, [r7, #68]	; 0x44
            .cmd = FS_CMD_WRITE,
            .from = task->pid,
            .target = regfile->file.fd,
            .size = size,
            .pos = regfile->pos
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	69db      	ldr	r3, [r3, #28]
        struct file *driver = regfile->driver_file;
        int size = request->size;
        if (size > REGFILE_BUF)
            size = REGFILE_BUF;

        struct fs_request fs_request = {
 8004250:	64bb      	str	r3, [r7, #72]	; 0x48
            .target = regfile->file.fd,
            .size = size,
            .pos = regfile->pos
        };

        struct file_request file_request = {
 8004252:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004256:	2200      	movs	r2, #0
 8004258:	601a      	str	r2, [r3, #0]
 800425a:	3304      	adds	r3, #4
 800425c:	2200      	movs	r2, #0
 800425e:	601a      	str	r2, [r3, #0]
 8004260:	3304      	adds	r3, #4
 8004262:	2200      	movs	r2, #0
 8004264:	601a      	str	r2, [r3, #0]
 8004266:	3304      	adds	r3, #4
 8004268:	2200      	movs	r2, #0
 800426a:	601a      	str	r2, [r3, #0]
 800426c:	3304      	adds	r3, #4
 800426e:	f107 0314 	add.w	r3, r7, #20
 8004272:	653b      	str	r3, [r7, #80]	; 0x50
 8004274:	2338      	movs	r3, #56	; 0x38
 8004276:	657b      	str	r3, [r7, #84]	; 0x54
            .task = NULL,
            .buf = (char *)&fs_request,
            .size = sizeof(fs_request),
        };

        if (file_write(driver, &file_request, monitor) == 1) {
 8004278:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800427c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800427e:	4619      	mov	r1, r3
 8004280:	687a      	ldr	r2, [r7, #4]
 8004282:	f7fc fed3 	bl	800102c <file_write>
 8004286:	4603      	mov	r3, r0
 8004288:	2b01      	cmp	r3, #1
 800428a:	d112      	bne.n	80042b2 <regfile_request_writable+0x102>

            memcpy(regfile->buf, request->buf, size);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f103 0120 	add.w	r1, r3, #32
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	685a      	ldr	r2, [r3, #4]
 8004296:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004298:	4608      	mov	r0, r1
 800429a:	4611      	mov	r1, r2
 800429c:	461a      	mov	r2, r3
 800429e:	f013 fe27 	bl	8017ef0 <memcpy>

            regfile->request_pid = task->pid;
 80042a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80042a4:	685a      	ldr	r2, [r3, #4]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	615a      	str	r2, [r3, #20]
            regfile->buzy = 1;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2201      	movs	r2, #1
 80042ae:	619a      	str	r2, [r3, #24]
 80042b0:	e00c      	b.n	80042cc <regfile_request_writable+0x11c>
 80042b2:	e00b      	b.n	80042cc <regfile_request_writable+0x11c>
        }
    }
    else if (regfile->request_pid == task->pid && !regfile->buzy) {
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	695a      	ldr	r2, [r3, #20]
 80042b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	429a      	cmp	r2, r3
 80042be:	d105      	bne.n	80042cc <regfile_request_writable+0x11c>
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	699b      	ldr	r3, [r3, #24]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d101      	bne.n	80042cc <regfile_request_writable+0x11c>
        return FILE_ACCESS_ACCEPT;
 80042c8:	2301      	movs	r3, #1
 80042ca:	e007      	b.n	80042dc <regfile_request_writable+0x12c>
    }

	event_monitor_block(monitor, regfile->event, task);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	691b      	ldr	r3, [r3, #16]
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	4619      	mov	r1, r3
 80042d4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80042d6:	f7fc fba1 	bl	8000a1c <event_monitor_block>
    return FILE_ACCESS_BLOCK;
 80042da:	2300      	movs	r3, #0
}
 80042dc:	4618      	mov	r0, r3
 80042de:	3768      	adds	r7, #104	; 0x68
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}

080042e4 <regfile_request_lseekable>:

int regfile_request_lseekable (struct regfile *regfile, struct file_request *request,
                             struct event_monitor *monitor)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b09a      	sub	sp, #104	; 0x68
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	60f8      	str	r0, [r7, #12]
 80042ec:	60b9      	str	r1, [r7, #8]
 80042ee:	607a      	str	r2, [r7, #4]
    struct task_control_block *task = request->task;
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	663b      	str	r3, [r7, #96]	; 0x60

    if (regfile->request_pid == 0) {
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	695b      	ldr	r3, [r3, #20]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d17f      	bne.n	80043fe <regfile_request_lseekable+0x11a>
        /* try to send request */
        struct file *driver = regfile->driver_file;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	68db      	ldr	r3, [r3, #12]
 8004302:	65fb      	str	r3, [r7, #92]	; 0x5c
        int size = request->size;
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	65bb      	str	r3, [r7, #88]	; 0x58
        if (size > REGFILE_BUF)
 800430a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800430c:	2b40      	cmp	r3, #64	; 0x40
 800430e:	dd01      	ble.n	8004314 <regfile_request_lseekable+0x30>
            size = REGFILE_BUF;
 8004310:	2340      	movs	r3, #64	; 0x40
 8004312:	65bb      	str	r3, [r7, #88]	; 0x58

        int pos;
        switch(request->whence) {
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	2b02      	cmp	r3, #2
 800431a:	d006      	beq.n	800432a <regfile_request_lseekable+0x46>
 800431c:	2b03      	cmp	r3, #3
 800431e:	d008      	beq.n	8004332 <regfile_request_lseekable+0x4e>
 8004320:	2b01      	cmp	r3, #1
 8004322:	d10a      	bne.n	800433a <regfile_request_lseekable+0x56>
            case SEEK_SET:
                pos = 0;
 8004324:	2300      	movs	r3, #0
 8004326:	667b      	str	r3, [r7, #100]	; 0x64
                break;
 8004328:	e00a      	b.n	8004340 <regfile_request_lseekable+0x5c>
            case SEEK_CUR:
                pos = regfile->pos;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	69db      	ldr	r3, [r3, #28]
 800432e:	667b      	str	r3, [r7, #100]	; 0x64
                break;
 8004330:	e006      	b.n	8004340 <regfile_request_lseekable+0x5c>
            case SEEK_END:
                pos = -1;
 8004332:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004336:	667b      	str	r3, [r7, #100]	; 0x64
                break;
 8004338:	e002      	b.n	8004340 <regfile_request_lseekable+0x5c>
            default:
                return FILE_ACCESS_ERROR;
 800433a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800433e:	e072      	b.n	8004426 <regfile_request_lseekable+0x142>
        }

        struct fs_request fs_request = {
 8004340:	f107 0310 	add.w	r3, r7, #16
 8004344:	2200      	movs	r2, #0
 8004346:	601a      	str	r2, [r3, #0]
 8004348:	3304      	adds	r3, #4
 800434a:	2200      	movs	r2, #0
 800434c:	601a      	str	r2, [r3, #0]
 800434e:	3304      	adds	r3, #4
 8004350:	2200      	movs	r2, #0
 8004352:	601a      	str	r2, [r3, #0]
 8004354:	3304      	adds	r3, #4
 8004356:	2200      	movs	r2, #0
 8004358:	601a      	str	r2, [r3, #0]
 800435a:	3304      	adds	r3, #4
 800435c:	2200      	movs	r2, #0
 800435e:	601a      	str	r2, [r3, #0]
 8004360:	3304      	adds	r3, #4
 8004362:	2200      	movs	r2, #0
 8004364:	601a      	str	r2, [r3, #0]
 8004366:	3304      	adds	r3, #4
 8004368:	2200      	movs	r2, #0
 800436a:	601a      	str	r2, [r3, #0]
 800436c:	3304      	adds	r3, #4
 800436e:	2200      	movs	r2, #0
 8004370:	601a      	str	r2, [r3, #0]
 8004372:	3304      	adds	r3, #4
 8004374:	2200      	movs	r2, #0
 8004376:	601a      	str	r2, [r3, #0]
 8004378:	3304      	adds	r3, #4
 800437a:	2200      	movs	r2, #0
 800437c:	601a      	str	r2, [r3, #0]
 800437e:	3304      	adds	r3, #4
 8004380:	2200      	movs	r2, #0
 8004382:	601a      	str	r2, [r3, #0]
 8004384:	3304      	adds	r3, #4
 8004386:	2200      	movs	r2, #0
 8004388:	601a      	str	r2, [r3, #0]
 800438a:	3304      	adds	r3, #4
 800438c:	2200      	movs	r2, #0
 800438e:	601a      	str	r2, [r3, #0]
 8004390:	3304      	adds	r3, #4
 8004392:	2200      	movs	r2, #0
 8004394:	601a      	str	r2, [r3, #0]
 8004396:	3304      	adds	r3, #4
 8004398:	2304      	movs	r3, #4
 800439a:	613b      	str	r3, [r7, #16]
            .cmd = FS_CMD_SEEK,
            .from = task->pid,
 800439c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800439e:	685b      	ldr	r3, [r3, #4]
                break;
            default:
                return FILE_ACCESS_ERROR;
        }

        struct fs_request fs_request = {
 80043a0:	617b      	str	r3, [r7, #20]
            .cmd = FS_CMD_SEEK,
            .from = task->pid,
            .target = regfile->file.fd,
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
                break;
            default:
                return FILE_ACCESS_ERROR;
        }

        struct fs_request fs_request = {
 80043a6:	61fb      	str	r3, [r7, #28]
            .cmd = FS_CMD_SEEK,
            .from = task->pid,
            .target = regfile->file.fd,
            .size = request->size,
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	689b      	ldr	r3, [r3, #8]
                break;
            default:
                return FILE_ACCESS_ERROR;
        }

        struct fs_request fs_request = {
 80043ac:	643b      	str	r3, [r7, #64]	; 0x40
 80043ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80043b0:	647b      	str	r3, [r7, #68]	; 0x44
            .target = regfile->file.fd,
            .size = request->size,
            .pos = pos,
        };

        struct file_request file_request = {
 80043b2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80043b6:	2200      	movs	r2, #0
 80043b8:	601a      	str	r2, [r3, #0]
 80043ba:	3304      	adds	r3, #4
 80043bc:	2200      	movs	r2, #0
 80043be:	601a      	str	r2, [r3, #0]
 80043c0:	3304      	adds	r3, #4
 80043c2:	2200      	movs	r2, #0
 80043c4:	601a      	str	r2, [r3, #0]
 80043c6:	3304      	adds	r3, #4
 80043c8:	2200      	movs	r2, #0
 80043ca:	601a      	str	r2, [r3, #0]
 80043cc:	3304      	adds	r3, #4
 80043ce:	f107 0310 	add.w	r3, r7, #16
 80043d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043d4:	2338      	movs	r3, #56	; 0x38
 80043d6:	653b      	str	r3, [r7, #80]	; 0x50
            .task = NULL,
            .buf = (char *)&fs_request,
            .size = sizeof(fs_request),
        };

        if (file_write(driver, &file_request, monitor) == 1) {
 80043d8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80043dc:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80043de:	4619      	mov	r1, r3
 80043e0:	687a      	ldr	r2, [r7, #4]
 80043e2:	f7fc fe23 	bl	800102c <file_write>
 80043e6:	4603      	mov	r3, r0
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d107      	bne.n	80043fc <regfile_request_lseekable+0x118>
            regfile->request_pid = task->pid;
 80043ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80043ee:	685a      	ldr	r2, [r3, #4]
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	615a      	str	r2, [r3, #20]
            regfile->buzy = 1;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2201      	movs	r2, #1
 80043f8:	619a      	str	r2, [r3, #24]
 80043fa:	e00c      	b.n	8004416 <regfile_request_lseekable+0x132>
 80043fc:	e00b      	b.n	8004416 <regfile_request_lseekable+0x132>
        }
    }
    else if (regfile->request_pid == task->pid && !regfile->buzy) {
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	695a      	ldr	r2, [r3, #20]
 8004402:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	429a      	cmp	r2, r3
 8004408:	d105      	bne.n	8004416 <regfile_request_lseekable+0x132>
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	699b      	ldr	r3, [r3, #24]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d101      	bne.n	8004416 <regfile_request_lseekable+0x132>
        return FILE_ACCESS_ACCEPT;
 8004412:	2301      	movs	r3, #1
 8004414:	e007      	b.n	8004426 <regfile_request_lseekable+0x142>
    }

	event_monitor_block(monitor, regfile->event, task);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	691b      	ldr	r3, [r3, #16]
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	4619      	mov	r1, r3
 800441e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004420:	f7fc fafc 	bl	8000a1c <event_monitor_block>
    return FILE_ACCESS_BLOCK;
 8004424:	2300      	movs	r3, #0
}
 8004426:	4618      	mov	r0, r3
 8004428:	3768      	adds	r7, #104	; 0x68
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}
 800442e:	bf00      	nop

08004430 <regfile_request_read>:

int regfile_request_read (struct regfile *regfile, struct file_request *request,
                        struct event_monitor *monitor)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b084      	sub	sp, #16
 8004434:	af00      	add	r7, sp, #0
 8004436:	60f8      	str	r0, [r7, #12]
 8004438:	60b9      	str	r1, [r7, #8]
 800443a:	607a      	str	r2, [r7, #4]
    if (regfile->transfer_len > 0) {
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004440:	2b00      	cmp	r3, #0
 8004442:	dd12      	ble.n	800446a <regfile_request_read+0x3a>
        memcpy(request->buf, regfile->buf, regfile->transfer_len);
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	6859      	ldr	r1, [r3, #4]
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f103 0220 	add.w	r2, r3, #32
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004452:	4608      	mov	r0, r1
 8004454:	4611      	mov	r1, r2
 8004456:	461a      	mov	r2, r3
 8004458:	f013 fd4a 	bl	8017ef0 <memcpy>

        regfile->pos += regfile->transfer_len;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	69da      	ldr	r2, [r3, #28]
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004464:	441a      	add	r2, r3
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	61da      	str	r2, [r3, #28]
    }

    regfile->request_pid = 0;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2200      	movs	r2, #0
 800446e:	615a      	str	r2, [r3, #20]
    return regfile->transfer_len;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	6e1b      	ldr	r3, [r3, #96]	; 0x60
}
 8004474:	4618      	mov	r0, r3
 8004476:	3710      	adds	r7, #16
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}

0800447c <regfile_request_write>:

int regfile_request_write (struct regfile *regfile, struct file_request *request,
                         struct event_monitor *monitor)
{
 800447c:	b480      	push	{r7}
 800447e:	b085      	sub	sp, #20
 8004480:	af00      	add	r7, sp, #0
 8004482:	60f8      	str	r0, [r7, #12]
 8004484:	60b9      	str	r1, [r7, #8]
 8004486:	607a      	str	r2, [r7, #4]
    if (regfile->transfer_len > 0) {
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800448c:	2b00      	cmp	r3, #0
 800448e:	dd06      	ble.n	800449e <regfile_request_write+0x22>
        regfile->pos += regfile->transfer_len;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	69da      	ldr	r2, [r3, #28]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004498:	441a      	add	r2, r3
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	61da      	str	r2, [r3, #28]
    }

    regfile->request_pid = 0;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2200      	movs	r2, #0
 80044a2:	615a      	str	r2, [r3, #20]
    return regfile->transfer_len;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	3714      	adds	r7, #20
 80044ac:	46bd      	mov	sp, r7
 80044ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b2:	4770      	bx	lr

080044b4 <regfile_request_lseek>:

int regfile_request_lseek (struct regfile *regfile, struct file_request *request,
                         struct event_monitor *monitor)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b085      	sub	sp, #20
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	60f8      	str	r0, [r7, #12]
 80044bc:	60b9      	str	r1, [r7, #8]
 80044be:	607a      	str	r2, [r7, #4]
    if (regfile->transfer_len >= 0) {
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	db03      	blt.n	80044d0 <regfile_request_lseek+0x1c>
        regfile->pos = regfile->transfer_len;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	61da      	str	r2, [r3, #28]
    }

    regfile->request_pid = 0;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2200      	movs	r2, #0
 80044d4:	615a      	str	r2, [r3, #20]
    return regfile->transfer_len;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3714      	adds	r7, #20
 80044de:	46bd      	mov	sp, r7
 80044e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e4:	4770      	bx	lr
 80044e6:	bf00      	nop

080044e8 <regfile_event_release>:

int regfile_event_release(struct event_monitor *monitor, int event,
                        struct task_control_block *task, void *data)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b086      	sub	sp, #24
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	60f8      	str	r0, [r7, #12]
 80044f0:	60b9      	str	r1, [r7, #8]
 80044f2:	607a      	str	r2, [r7, #4]
 80044f4:	603b      	str	r3, [r7, #0]
    struct file *file = data;
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	617b      	str	r3, [r7, #20]
    struct file_request *request = (void*)task->stack->r0;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004500:	613b      	str	r3, [r7, #16]

    switch (task->stack->r7) {
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	2b04      	cmp	r3, #4
 800450a:	d004      	beq.n	8004516 <regfile_event_release+0x2e>
 800450c:	2b0a      	cmp	r3, #10
 800450e:	d010      	beq.n	8004532 <regfile_event_release+0x4a>
 8004510:	2b03      	cmp	r3, #3
 8004512:	d007      	beq.n	8004524 <regfile_event_release+0x3c>
 8004514:	e014      	b.n	8004540 <regfile_event_release+0x58>
        case 0x04:
            return file_read(file, request, monitor);
 8004516:	6978      	ldr	r0, [r7, #20]
 8004518:	6939      	ldr	r1, [r7, #16]
 800451a:	68fa      	ldr	r2, [r7, #12]
 800451c:	f7fc fd3c 	bl	8000f98 <file_read>
 8004520:	4603      	mov	r3, r0
 8004522:	e00e      	b.n	8004542 <regfile_event_release+0x5a>
        case 0x03:
            return file_write(file, request, monitor);
 8004524:	6978      	ldr	r0, [r7, #20]
 8004526:	6939      	ldr	r1, [r7, #16]
 8004528:	68fa      	ldr	r2, [r7, #12]
 800452a:	f7fc fd7f 	bl	800102c <file_write>
 800452e:	4603      	mov	r3, r0
 8004530:	e007      	b.n	8004542 <regfile_event_release+0x5a>
        case 0x0a:
            return file_lseek(file, request, monitor);
 8004532:	6978      	ldr	r0, [r7, #20]
 8004534:	6939      	ldr	r1, [r7, #16]
 8004536:	68fa      	ldr	r2, [r7, #12]
 8004538:	f7fc fe1a 	bl	8001170 <file_lseek>
 800453c:	4603      	mov	r3, r0
 800453e:	e000      	b.n	8004542 <regfile_event_release+0x5a>
        default:
            return 0;
 8004540:	2300      	movs	r3, #0
    }
}
 8004542:	4618      	mov	r0, r3
 8004544:	3718      	adds	r7, #24
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}
 800454a:	bf00      	nop

0800454c <regfile_init>:

int regfile_init(int fd, int driver_pid, struct file *files[],
               struct memory_pool *memory_pool, struct event_monitor *monitor)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b086      	sub	sp, #24
 8004550:	af00      	add	r7, sp, #0
 8004552:	60f8      	str	r0, [r7, #12]
 8004554:	60b9      	str	r1, [r7, #8]
 8004556:	607a      	str	r2, [r7, #4]
 8004558:	603b      	str	r3, [r7, #0]
    struct regfile *regfile;

    regfile = memory_pool_alloc(memory_pool, sizeof(*regfile));
 800455a:	6838      	ldr	r0, [r7, #0]
 800455c:	2164      	movs	r1, #100	; 0x64
 800455e:	f7fe fe35 	bl	80031cc <memory_pool_alloc>
 8004562:	6178      	str	r0, [r7, #20]

    if (!regfile)
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d102      	bne.n	8004570 <regfile_init+0x24>
        return -1;
 800456a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800456e:	e02f      	b.n	80045d0 <regfile_init+0x84>

    regfile->driver_pid = driver_pid;
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	68ba      	ldr	r2, [r7, #8]
 8004574:	609a      	str	r2, [r3, #8]
    regfile->driver_file = files[driver_pid + 3];
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	3303      	adds	r3, #3
 800457a:	009b      	lsls	r3, r3, #2
 800457c:	687a      	ldr	r2, [r7, #4]
 800457e:	4413      	add	r3, r2
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	60da      	str	r2, [r3, #12]
    regfile->request_pid = 0;
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	2200      	movs	r2, #0
 800458a:	615a      	str	r2, [r3, #20]
    regfile->buzy = 0;
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	2200      	movs	r2, #0
 8004590:	619a      	str	r2, [r3, #24]
    regfile->pos = 0;
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	2200      	movs	r2, #0
 8004596:	61da      	str	r2, [r3, #28]
	regfile->file.ops = &regfile_ops;
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	4a0f      	ldr	r2, [pc, #60]	; (80045d8 <regfile_init+0x8c>)
 800459c:	605a      	str	r2, [r3, #4]
    regfile->event = event_monitor_find_free(monitor);
 800459e:	6a38      	ldr	r0, [r7, #32]
 80045a0:	f7fc f9ec 	bl	800097c <event_monitor_find_free>
 80045a4:	4602      	mov	r2, r0
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	611a      	str	r2, [r3, #16]
    files[fd] = &regfile->file;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	009b      	lsls	r3, r3, #2
 80045ae:	687a      	ldr	r2, [r7, #4]
 80045b0:	4413      	add	r3, r2
 80045b2:	697a      	ldr	r2, [r7, #20]
 80045b4:	601a      	str	r2, [r3, #0]

    event_monitor_register(monitor, regfile->event, regfile_event_release, files[fd]);
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	691a      	ldr	r2, [r3, #16]
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	009b      	lsls	r3, r3, #2
 80045be:	6879      	ldr	r1, [r7, #4]
 80045c0:	440b      	add	r3, r1
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	6a38      	ldr	r0, [r7, #32]
 80045c6:	4611      	mov	r1, r2
 80045c8:	4a04      	ldr	r2, [pc, #16]	; (80045dc <regfile_init+0x90>)
 80045ca:	f7fc f9fd 	bl	80009c8 <event_monitor_register>

    return 0;
 80045ce:	2300      	movs	r3, #0
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	3718      	adds	r7, #24
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}
 80045d8:	2000004c 	.word	0x2000004c
 80045dc:	080044e9 	.word	0x080044e9

080045e0 <regfile_response>:

int regfile_response(int fd, char *buf, int len)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b086      	sub	sp, #24
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	60f8      	str	r0, [r7, #12]
 80045e8:	60b9      	str	r1, [r7, #8]
 80045ea:	607a      	str	r2, [r7, #4]
    struct regfile_response response = {
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	613b      	str	r3, [r7, #16]
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	617b      	str	r3, [r7, #20]
        .transfer_len = len,
        .buf = buf
    };
    return write(fd, &response, sizeof(response));
 80045f4:	f107 0310 	add.w	r3, r7, #16
 80045f8:	68f8      	ldr	r0, [r7, #12]
 80045fa:	4619      	mov	r1, r3
 80045fc:	2208      	movs	r2, #8
 80045fe:	f013 fccd 	bl	8017f9c <write>
 8004602:	4603      	mov	r3, r0
}
 8004604:	4618      	mov	r0, r3
 8004606:	3718      	adds	r7, #24
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}

0800460c <regfile_readable>:

int regfile_readable (struct file *file, struct file_request *request,
                    struct event_monitor *monitor)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b086      	sub	sp, #24
 8004610:	af00      	add	r7, sp, #0
 8004612:	60f8      	str	r0, [r7, #12]
 8004614:	60b9      	str	r1, [r7, #8]
 8004616:	607a      	str	r2, [r7, #4]
    struct regfile *regfile = container_of(file, struct regfile, file);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	617b      	str	r3, [r7, #20]
    if (regfile->driver_pid == request->task->pid) {
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	689a      	ldr	r2, [r3, #8]
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	429a      	cmp	r2, r3
 8004628:	d106      	bne.n	8004638 <regfile_readable+0x2c>
        return regfile_driver_readable(regfile, request, monitor);
 800462a:	6978      	ldr	r0, [r7, #20]
 800462c:	68b9      	ldr	r1, [r7, #8]
 800462e:	687a      	ldr	r2, [r7, #4]
 8004630:	f7ff fc8c 	bl	8003f4c <regfile_driver_readable>
 8004634:	4603      	mov	r3, r0
 8004636:	e005      	b.n	8004644 <regfile_readable+0x38>
    }
    else {
        return regfile_request_readable(regfile, request, monitor);
 8004638:	6978      	ldr	r0, [r7, #20]
 800463a:	68b9      	ldr	r1, [r7, #8]
 800463c:	687a      	ldr	r2, [r7, #4]
 800463e:	f7ff fd27 	bl	8004090 <regfile_request_readable>
 8004642:	4603      	mov	r3, r0
    }
}
 8004644:	4618      	mov	r0, r3
 8004646:	3718      	adds	r7, #24
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}

0800464c <regfile_writable>:

int regfile_writable (struct file *file, struct file_request *request,
                    struct event_monitor *monitor)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b086      	sub	sp, #24
 8004650:	af00      	add	r7, sp, #0
 8004652:	60f8      	str	r0, [r7, #12]
 8004654:	60b9      	str	r1, [r7, #8]
 8004656:	607a      	str	r2, [r7, #4]
    struct regfile *regfile = container_of(file, struct regfile, file);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	617b      	str	r3, [r7, #20]
    if (regfile->driver_pid == request->task->pid) {
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	689a      	ldr	r2, [r3, #8]
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	429a      	cmp	r2, r3
 8004668:	d106      	bne.n	8004678 <regfile_writable+0x2c>
        return regfile_driver_writable(regfile, request, monitor);
 800466a:	6978      	ldr	r0, [r7, #20]
 800466c:	68b9      	ldr	r1, [r7, #8]
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	f7ff fc80 	bl	8003f74 <regfile_driver_writable>
 8004674:	4603      	mov	r3, r0
 8004676:	e005      	b.n	8004684 <regfile_writable+0x38>
    }
    else {
        return regfile_request_writable(regfile, request, monitor);
 8004678:	6978      	ldr	r0, [r7, #20]
 800467a:	68b9      	ldr	r1, [r7, #8]
 800467c:	687a      	ldr	r2, [r7, #4]
 800467e:	f7ff fd97 	bl	80041b0 <regfile_request_writable>
 8004682:	4603      	mov	r3, r0
    }
}
 8004684:	4618      	mov	r0, r3
 8004686:	3718      	adds	r7, #24
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}

0800468c <regfile_read>:

int regfile_read (struct file *file, struct file_request *request,
                struct event_monitor *monitor)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b086      	sub	sp, #24
 8004690:	af00      	add	r7, sp, #0
 8004692:	60f8      	str	r0, [r7, #12]
 8004694:	60b9      	str	r1, [r7, #8]
 8004696:	607a      	str	r2, [r7, #4]
    struct regfile *regfile = container_of(file, struct regfile, file);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	617b      	str	r3, [r7, #20]
    if (regfile->driver_pid == request->task->pid) {
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	689a      	ldr	r2, [r3, #8]
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	429a      	cmp	r2, r3
 80046a8:	d106      	bne.n	80046b8 <regfile_read+0x2c>
        return regfile_driver_read(regfile, request, monitor);
 80046aa:	6978      	ldr	r0, [r7, #20]
 80046ac:	68b9      	ldr	r1, [r7, #8]
 80046ae:	687a      	ldr	r2, [r7, #4]
 80046b0:	f7ff fc88 	bl	8003fc4 <regfile_driver_read>
 80046b4:	4603      	mov	r3, r0
 80046b6:	e005      	b.n	80046c4 <regfile_read+0x38>
    }
    else {
        return regfile_request_read(regfile, request, monitor);
 80046b8:	6978      	ldr	r0, [r7, #20]
 80046ba:	68b9      	ldr	r1, [r7, #8]
 80046bc:	687a      	ldr	r2, [r7, #4]
 80046be:	f7ff feb7 	bl	8004430 <regfile_request_read>
 80046c2:	4603      	mov	r3, r0
    }
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	3718      	adds	r7, #24
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}

080046cc <regfile_write>:

int regfile_write (struct file *file, struct file_request *request,
                 struct event_monitor *monitor)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b086      	sub	sp, #24
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	60f8      	str	r0, [r7, #12]
 80046d4:	60b9      	str	r1, [r7, #8]
 80046d6:	607a      	str	r2, [r7, #4]
    struct regfile *regfile = container_of(file, struct regfile, file);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	617b      	str	r3, [r7, #20]
    if (regfile->driver_pid == request->task->pid) {
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	689a      	ldr	r2, [r3, #8]
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	429a      	cmp	r2, r3
 80046e8:	d106      	bne.n	80046f8 <regfile_write+0x2c>
        return regfile_driver_write(regfile, request, monitor);
 80046ea:	6978      	ldr	r0, [r7, #20]
 80046ec:	68b9      	ldr	r1, [r7, #8]
 80046ee:	687a      	ldr	r2, [r7, #4]
 80046f0:	f7ff fc86 	bl	8004000 <regfile_driver_write>
 80046f4:	4603      	mov	r3, r0
 80046f6:	e005      	b.n	8004704 <regfile_write+0x38>
    }
    else {
        return regfile_request_write(regfile, request, monitor);
 80046f8:	6978      	ldr	r0, [r7, #20]
 80046fa:	68b9      	ldr	r1, [r7, #8]
 80046fc:	687a      	ldr	r2, [r7, #4]
 80046fe:	f7ff febd 	bl	800447c <regfile_request_write>
 8004702:	4603      	mov	r3, r0
    }
}
 8004704:	4618      	mov	r0, r3
 8004706:	3718      	adds	r7, #24
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}

0800470c <regfile_lseekable>:

int regfile_lseekable (struct file *file, struct file_request *request,
                     struct event_monitor *monitor)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b086      	sub	sp, #24
 8004710:	af00      	add	r7, sp, #0
 8004712:	60f8      	str	r0, [r7, #12]
 8004714:	60b9      	str	r1, [r7, #8]
 8004716:	607a      	str	r2, [r7, #4]
    struct regfile *regfile = container_of(file, struct regfile, file);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	617b      	str	r3, [r7, #20]

    if (regfile->driver_pid == request->task->pid) {
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	689a      	ldr	r2, [r3, #8]
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	429a      	cmp	r2, r3
 8004728:	d106      	bne.n	8004738 <regfile_lseekable+0x2c>
        return regfile_driver_lseekable(regfile, request, monitor);
 800472a:	6978      	ldr	r0, [r7, #20]
 800472c:	68b9      	ldr	r1, [r7, #8]
 800472e:	687a      	ldr	r2, [r7, #4]
 8004730:	f7ff fc34 	bl	8003f9c <regfile_driver_lseekable>
 8004734:	4603      	mov	r3, r0
 8004736:	e005      	b.n	8004744 <regfile_lseekable+0x38>
    }
    else {
        return regfile_request_lseekable(regfile, request, monitor);
 8004738:	6978      	ldr	r0, [r7, #20]
 800473a:	68b9      	ldr	r1, [r7, #8]
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	f7ff fdd1 	bl	80042e4 <regfile_request_lseekable>
 8004742:	4603      	mov	r3, r0
    }
}
 8004744:	4618      	mov	r0, r3
 8004746:	3718      	adds	r7, #24
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}

0800474c <regfile_lseek>:

int regfile_lseek (struct file *file, struct file_request *request,
                 struct event_monitor *monitor)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b086      	sub	sp, #24
 8004750:	af00      	add	r7, sp, #0
 8004752:	60f8      	str	r0, [r7, #12]
 8004754:	60b9      	str	r1, [r7, #8]
 8004756:	607a      	str	r2, [r7, #4]
    struct regfile *regfile = container_of(file, struct regfile, file);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	617b      	str	r3, [r7, #20]

    if (regfile->driver_pid == request->task->pid) {
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	689a      	ldr	r2, [r3, #8]
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	429a      	cmp	r2, r3
 8004768:	d106      	bne.n	8004778 <regfile_lseek+0x2c>
        return regfile_driver_lseek(regfile, request, monitor);
 800476a:	6978      	ldr	r0, [r7, #20]
 800476c:	68b9      	ldr	r1, [r7, #8]
 800476e:	687a      	ldr	r2, [r7, #4]
 8004770:	f7ff fc74 	bl	800405c <regfile_driver_lseek>
 8004774:	4603      	mov	r3, r0
 8004776:	e005      	b.n	8004784 <regfile_lseek+0x38>
    }
    else {
        return regfile_request_lseek(regfile, request, monitor);
 8004778:	6978      	ldr	r0, [r7, #20]
 800477a:	68b9      	ldr	r1, [r7, #8]
 800477c:	687a      	ldr	r2, [r7, #4]
 800477e:	f7ff fe99 	bl	80044b4 <regfile_request_lseek>
 8004782:	4603      	mov	r3, r0
    }
}
 8004784:	4618      	mov	r0, r3
 8004786:	3718      	adds	r7, #24
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}

0800478c <romdev_driver>:
#include "block.h"
#include "path.h"


void romdev_driver()
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b08e      	sub	sp, #56	; 0x38
 8004790:	af00      	add	r7, sp, #0
    const char *request_start;
    const char *request_end;
    size_t request_len;

    /* Register path for device */
    self = getpid() + 3;
 8004792:	f013 fbfc 	bl	8017f8e <getpid>
 8004796:	4603      	mov	r3, r0
 8004798:	3303      	adds	r3, #3
 800479a:	627b      	str	r3, [r7, #36]	; 0x24
	fd = path_register(ROMDEV_PATH);
 800479c:	4838      	ldr	r0, [pc, #224]	; (8004880 <romdev_driver+0xf4>)
 800479e:	f7ff fa19 	bl	8003bd4 <path_register>
 80047a2:	6378      	str	r0, [r7, #52]	; 0x34
	mknod(fd, 0, S_IFBLK);
 80047a4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80047a6:	2100      	movs	r1, #0
 80047a8:	2206      	movs	r2, #6
 80047aa:	f013 fc1a 	bl	8017fe2 <mknod>

    /* Service routine */
	while (1) {
	    if (read(self, &request, sizeof(request)) == sizeof(request)) {
 80047ae:	1d3b      	adds	r3, r7, #4
 80047b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80047b2:	4619      	mov	r1, r3
 80047b4:	2214      	movs	r2, #20
 80047b6:	f013 fbf8 	bl	8017faa <read>
 80047ba:	4603      	mov	r3, r0
 80047bc:	2b14      	cmp	r3, #20
 80047be:	d15e      	bne.n	800487e <romdev_driver+0xf2>
	        cmd = request.cmd;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	623b      	str	r3, [r7, #32]

	        switch (cmd) {
 80047c4:	6a3b      	ldr	r3, [r7, #32]
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d002      	beq.n	80047d0 <romdev_driver+0x44>
 80047ca:	2b03      	cmp	r3, #3
 80047cc:	d02f      	beq.n	800482e <romdev_driver+0xa2>
 80047ce:	e04f      	b.n	8004870 <romdev_driver+0xe4>
	            case BLOCK_CMD_READ:
	                fd = request.fd;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	637b      	str	r3, [r7, #52]	; 0x34
	                size = request.size;
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	61fb      	str	r3, [r7, #28]
	                pos = request.pos;
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	61bb      	str	r3, [r7, #24]

                    /* Check boundary */
                    request_start = &_sromdev + pos;
 80047dc:	69ba      	ldr	r2, [r7, #24]
 80047de:	4b29      	ldr	r3, [pc, #164]	; (8004884 <romdev_driver+0xf8>)
 80047e0:	4413      	add	r3, r2
 80047e2:	633b      	str	r3, [r7, #48]	; 0x30
                    if (request_start < &_sromdev)
 80047e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047e6:	4b27      	ldr	r3, [pc, #156]	; (8004884 <romdev_driver+0xf8>)
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d205      	bcs.n	80047f8 <romdev_driver+0x6c>
	                    block_response(fd, NULL, -1);
 80047ec:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80047ee:	2100      	movs	r1, #0
 80047f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80047f4:	f7fb ffa4 	bl	8000740 <block_response>
                    if (request_start > &_eromdev)
 80047f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047fa:	4b23      	ldr	r3, [pc, #140]	; (8004888 <romdev_driver+0xfc>)
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d901      	bls.n	8004804 <romdev_driver+0x78>
                        request_start = &_eromdev;
 8004800:	4b21      	ldr	r3, [pc, #132]	; (8004888 <romdev_driver+0xfc>)
 8004802:	633b      	str	r3, [r7, #48]	; 0x30

                    request_end = request_start + size;
 8004804:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004806:	69fb      	ldr	r3, [r7, #28]
 8004808:	4413      	add	r3, r2
 800480a:	62fb      	str	r3, [r7, #44]	; 0x2c
                    if (request_end > &_eromdev)
 800480c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800480e:	4b1e      	ldr	r3, [pc, #120]	; (8004888 <romdev_driver+0xfc>)
 8004810:	429a      	cmp	r2, r3
 8004812:	d901      	bls.n	8004818 <romdev_driver+0x8c>
                        request_end = &_eromdev;
 8004814:	4b1c      	ldr	r3, [pc, #112]	; (8004888 <romdev_driver+0xfc>)
 8004816:	62fb      	str	r3, [r7, #44]	; 0x2c

                    /* Response */
                    request_len = request_end - request_start;
 8004818:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800481a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800481c:	1ad3      	subs	r3, r2, r3
 800481e:	62bb      	str	r3, [r7, #40]	; 0x28
	                block_response(fd, (char *)request_start, request_len);
 8004820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004822:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004824:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004826:	461a      	mov	r2, r3
 8004828:	f7fb ff8a 	bl	8000740 <block_response>
	                break;
 800482c:	e027      	b.n	800487e <romdev_driver+0xf2>

	            case BLOCK_CMD_SEEK:
	                fd = request.fd;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	637b      	str	r3, [r7, #52]	; 0x34
	                size = request.size;
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	61fb      	str	r3, [r7, #28]
	                pos = request.pos;
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	61bb      	str	r3, [r7, #24]

	                if (pos == 0) { /* SEEK_SET */
 800483a:	69bb      	ldr	r3, [r7, #24]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d102      	bne.n	8004846 <romdev_driver+0xba>
	                    request_len = size;
 8004840:	69fb      	ldr	r3, [r7, #28]
 8004842:	62bb      	str	r3, [r7, #40]	; 0x28
 8004844:	e00d      	b.n	8004862 <romdev_driver+0xd6>
	                }
	                else if (pos < 0) { /* SEEK_END */
 8004846:	69bb      	ldr	r3, [r7, #24]
 8004848:	2b00      	cmp	r3, #0
 800484a:	da06      	bge.n	800485a <romdev_driver+0xce>
	                    request_len = (&_eromdev - &_sromdev) + size;
 800484c:	4b0d      	ldr	r3, [pc, #52]	; (8004884 <romdev_driver+0xf8>)
 800484e:	69fa      	ldr	r2, [r7, #28]
 8004850:	1ad2      	subs	r2, r2, r3
 8004852:	4b0d      	ldr	r3, [pc, #52]	; (8004888 <romdev_driver+0xfc>)
 8004854:	4413      	add	r3, r2
 8004856:	62bb      	str	r3, [r7, #40]	; 0x28
 8004858:	e003      	b.n	8004862 <romdev_driver+0xd6>
	                }
	                else { /* SEEK_CUR */
	                    request_len = pos + size;
 800485a:	69ba      	ldr	r2, [r7, #24]
 800485c:	69fb      	ldr	r3, [r7, #28]
 800485e:	4413      	add	r3, r2
 8004860:	62bb      	str	r3, [r7, #40]	; 0x28
	                }
	                lseek(fd, request_len, SEEK_SET);
 8004862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004864:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004866:	4619      	mov	r1, r3
 8004868:	2201      	movs	r2, #1
 800486a:	f013 fbc8 	bl	8017ffe <lseek>
	                break;
 800486e:	e006      	b.n	800487e <romdev_driver+0xf2>

	            case BLOCK_CMD_WRITE: /* readonly */
	            default:
	                block_response(fd, NULL, -1);
 8004870:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004872:	2100      	movs	r1, #0
 8004874:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004878:	f7fb ff62 	bl	8000740 <block_response>
	        }
	    }
	}
 800487c:	e797      	b.n	80047ae <romdev_driver+0x22>
 800487e:	e796      	b.n	80047ae <romdev_driver+0x22>
 8004880:	0801a528 	.word	0x0801a528
 8004884:	0801d07c 	.word	0x0801d07c
 8004888:	0801d0b0 	.word	0x0801d0b0

0800488c <romfs_open_recur>:
    uint32_t len;
    uint8_t name[PATH_MAX];
};

int romfs_open_recur(int device, char *path, int this, struct romfs_entry *entry)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b086      	sub	sp, #24
 8004890:	af00      	add	r7, sp, #0
 8004892:	60f8      	str	r0, [r7, #12]
 8004894:	60b9      	str	r1, [r7, #8]
 8004896:	607a      	str	r2, [r7, #4]
 8004898:	603b      	str	r3, [r7, #0]
    if (entry->isdir) {
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	68db      	ldr	r3, [r3, #12]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d040      	beq.n	8004924 <romfs_open_recur+0x98>
        /* Iterate through children */
        int pos = this + sizeof(*entry);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	3334      	adds	r3, #52	; 0x34
 80048a6:	617b      	str	r3, [r7, #20]
        while (pos) {
 80048a8:	e039      	b.n	800491e <romfs_open_recur+0x92>
            /* Get entry */
            lseek(device, pos, SEEK_SET);
 80048aa:	68f8      	ldr	r0, [r7, #12]
 80048ac:	6979      	ldr	r1, [r7, #20]
 80048ae:	2201      	movs	r2, #1
 80048b0:	f013 fba5 	bl	8017ffe <lseek>
            read(device, entry, sizeof(*entry));
 80048b4:	68f8      	ldr	r0, [r7, #12]
 80048b6:	6839      	ldr	r1, [r7, #0]
 80048b8:	2234      	movs	r2, #52	; 0x34
 80048ba:	f013 fb76 	bl	8017faa <read>

            /* Compare path */
            int len = strlen((char *)entry->name);
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	3314      	adds	r3, #20
 80048c2:	4618      	mov	r0, r3
 80048c4:	f000 fa84 	bl	8004dd0 <strlen>
 80048c8:	4603      	mov	r3, r0
 80048ca:	613b      	str	r3, [r7, #16]
            if (strncmp((char *)entry->name, path, len) == 0) {
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	f103 0214 	add.w	r2, r3, #20
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	4610      	mov	r0, r2
 80048d6:	68b9      	ldr	r1, [r7, #8]
 80048d8:	461a      	mov	r2, r3
 80048da:	f000 fa4d 	bl	8004d78 <strncmp>
 80048de:	4603      	mov	r3, r0
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d119      	bne.n	8004918 <romfs_open_recur+0x8c>
                if (path[len] == '/') { /* Match directory */
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	68ba      	ldr	r2, [r7, #8]
 80048e8:	4413      	add	r3, r2
 80048ea:	781b      	ldrb	r3, [r3, #0]
 80048ec:	2b2f      	cmp	r3, #47	; 0x2f
 80048ee:	d10b      	bne.n	8004908 <romfs_open_recur+0x7c>
                    return romfs_open_recur(device, path + len + 1, pos, entry);
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	3301      	adds	r3, #1
 80048f4:	68ba      	ldr	r2, [r7, #8]
 80048f6:	4413      	add	r3, r2
 80048f8:	68f8      	ldr	r0, [r7, #12]
 80048fa:	4619      	mov	r1, r3
 80048fc:	697a      	ldr	r2, [r7, #20]
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	f7ff ffc4 	bl	800488c <romfs_open_recur>
 8004904:	4603      	mov	r3, r0
 8004906:	e00f      	b.n	8004928 <romfs_open_recur+0x9c>
                }
                else if (path[len] == 0) { /* Match file */
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	68ba      	ldr	r2, [r7, #8]
 800490c:	4413      	add	r3, r2
 800490e:	781b      	ldrb	r3, [r3, #0]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d101      	bne.n	8004918 <romfs_open_recur+0x8c>
                    return pos;
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	e007      	b.n	8004928 <romfs_open_recur+0x9c>
                }
            }

            /* Next entry */
            pos = entry->next;
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	617b      	str	r3, [r7, #20]
int romfs_open_recur(int device, char *path, int this, struct romfs_entry *entry)
{
    if (entry->isdir) {
        /* Iterate through children */
        int pos = this + sizeof(*entry);
        while (pos) {
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d1c2      	bne.n	80048aa <romfs_open_recur+0x1e>
            /* Next entry */
            pos = entry->next;
        }
    }

    return -1;
 8004924:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004928:	4618      	mov	r0, r3
 800492a:	3718      	adds	r7, #24
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}

08004930 <romfs_open>:

/*
 * return entry position
 */
int romfs_open(int device, char *path, struct romfs_entry *entry)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b084      	sub	sp, #16
 8004934:	af00      	add	r7, sp, #0
 8004936:	60f8      	str	r0, [r7, #12]
 8004938:	60b9      	str	r1, [r7, #8]
 800493a:	607a      	str	r2, [r7, #4]
    /* Get root entry */
    lseek(device, 0, SEEK_SET);
 800493c:	68f8      	ldr	r0, [r7, #12]
 800493e:	2100      	movs	r1, #0
 8004940:	2201      	movs	r2, #1
 8004942:	f013 fb5c 	bl	8017ffe <lseek>
    read(device, entry, sizeof(*entry));
 8004946:	68f8      	ldr	r0, [r7, #12]
 8004948:	6879      	ldr	r1, [r7, #4]
 800494a:	2234      	movs	r2, #52	; 0x34
 800494c:	f013 fb2d 	bl	8017faa <read>

    return romfs_open_recur(device, path, 0, entry);
 8004950:	68f8      	ldr	r0, [r7, #12]
 8004952:	68b9      	ldr	r1, [r7, #8]
 8004954:	2200      	movs	r2, #0
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	f7ff ff98 	bl	800488c <romfs_open_recur>
 800495c:	4603      	mov	r3, r0
}
 800495e:	4618      	mov	r0, r3
 8004960:	3710      	adds	r7, #16
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}
 8004966:	bf00      	nop

08004968 <romfs_server>:

void romfs_server()
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b0d8      	sub	sp, #352	; 0x160
 800496c:	af00      	add	r7, sp, #0
    struct romfs_file files[ROMFS_FILE_LIMIT];
    int nfiles = 0;
 800496e:	2300      	movs	r3, #0
 8004970:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
    int self = getpid() + 3;
 8004974:	f013 fb0b 	bl	8017f8e <getpid>
 8004978:	4603      	mov	r3, r0
 800497a:	3303      	adds	r3, #3
 800497c:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
    int i;
    int data_start;
    int data_end;
    char data[REGFILE_BUF];

    path_register_fs(ROMFS_TYPE);
 8004980:	48d1      	ldr	r0, [pc, #836]	; (8004cc8 <romfs_server+0x360>)
 8004982:	f7ff f98b 	bl	8003c9c <path_register_fs>

    while (1) {
        if (read(self, &request, sizeof(request)) == sizeof(request)) {
 8004986:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800498a:	f8d7 0140 	ldr.w	r0, [r7, #320]	; 0x140
 800498e:	4619      	mov	r1, r3
 8004990:	2238      	movs	r2, #56	; 0x38
 8004992:	f013 fb0a 	bl	8017faa <read>
 8004996:	4603      	mov	r3, r0
 8004998:	2b38      	cmp	r3, #56	; 0x38
 800499a:	f040 81dd 	bne.w	8004d58 <romfs_server+0x3f0>
            cmd = request.cmd;
 800499e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
	        switch (cmd) {
 80049a8:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80049ac:	2b02      	cmp	r3, #2
 80049ae:	f000 8083 	beq.w	8004ab8 <romfs_server+0x150>
 80049b2:	2b04      	cmp	r3, #4
 80049b4:	f000 8167 	beq.w	8004c86 <romfs_server+0x31e>
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	f040 81c5 	bne.w	8004d48 <romfs_server+0x3e0>
	            case FS_CMD_OPEN:
	                device = request.device;
 80049be:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
	                from = request.from;
 80049c8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	                pos = request.pos; /* searching starting position */
 80049d2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80049d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049d8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
	                pos = romfs_open(request.device, request.path + pos, &entry);
 80049dc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80049e0:	6899      	ldr	r1, [r3, #8]
 80049e2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80049e6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80049ea:	3310      	adds	r3, #16
 80049ec:	441a      	add	r2, r3
 80049ee:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80049f2:	4608      	mov	r0, r1
 80049f4:	4611      	mov	r1, r2
 80049f6:	461a      	mov	r2, r3
 80049f8:	f7ff ff9a 	bl	8004930 <romfs_open>
 80049fc:	f8c7 0134 	str.w	r0, [r7, #308]	; 0x134

	                if (pos >= 0) { /* Found */
 8004a00:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	db49      	blt.n	8004a9c <romfs_server+0x134>
	                    /* Register */
	                    status = path_register(request.path);
 8004a08:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004a0c:	3310      	adds	r3, #16
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f7ff f8e0 	bl	8003bd4 <path_register>
 8004a14:	4602      	mov	r2, r0
 8004a16:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004a1a:	601a      	str	r2, [r3, #0]

                        if (status != -1) {
 8004a1c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a26:	d03e      	beq.n	8004aa6 <romfs_server+0x13e>
                            mknod(status, 0, S_IFREG);
 8004a28:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4618      	mov	r0, r3
 8004a30:	2100      	movs	r1, #0
 8004a32:	2208      	movs	r2, #8
 8004a34:	f013 fad5 	bl	8017fe2 <mknod>
	                        files[nfiles].fd = status;
 8004a38:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004a42:	011b      	lsls	r3, r3, #4
 8004a44:	f507 70b0 	add.w	r0, r7, #352	; 0x160
 8004a48:	4403      	add	r3, r0
 8004a4a:	3bac      	subs	r3, #172	; 0xac
 8004a4c:	601a      	str	r2, [r3, #0]
	                        files[nfiles].device = request.device;
 8004a4e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004a52:	689a      	ldr	r2, [r3, #8]
 8004a54:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004a58:	011b      	lsls	r3, r3, #4
 8004a5a:	f507 71b0 	add.w	r1, r7, #352	; 0x160
 8004a5e:	440b      	add	r3, r1
 8004a60:	3ba8      	subs	r3, #168	; 0xa8
 8004a62:	601a      	str	r2, [r3, #0]
	                        files[nfiles].start = pos + sizeof(entry);
 8004a64:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004a68:	3334      	adds	r3, #52	; 0x34
 8004a6a:	461a      	mov	r2, r3
 8004a6c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004a70:	011b      	lsls	r3, r3, #4
 8004a72:	f507 70b0 	add.w	r0, r7, #352	; 0x160
 8004a76:	4403      	add	r3, r0
 8004a78:	3ba4      	subs	r3, #164	; 0xa4
 8004a7a:	601a      	str	r2, [r3, #0]
	                        files[nfiles].len = entry.len;
 8004a7c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8004a80:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004a84:	011b      	lsls	r3, r3, #4
 8004a86:	f507 71b0 	add.w	r1, r7, #352	; 0x160
 8004a8a:	440b      	add	r3, r1
 8004a8c:	3ba0      	subs	r3, #160	; 0xa0
 8004a8e:	601a      	str	r2, [r3, #0]
	                        nfiles++;
 8004a90:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004a94:	3301      	adds	r3, #1
 8004a96:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8004a9a:	e004      	b.n	8004aa6 <romfs_server+0x13e>
	                    }
	                }
	                else {
	                    status = -1;
 8004a9c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004aa0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004aa4:	601a      	str	r2, [r3, #0]
	                }

                    /* Response */
	                write(from, &status, sizeof(status));
 8004aa6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004aaa:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
 8004aae:	4619      	mov	r1, r3
 8004ab0:	2204      	movs	r2, #4
 8004ab2:	f013 fa73 	bl	8017f9c <write>
	                break;
 8004ab6:	e14f      	b.n	8004d58 <romfs_server+0x3f0>
	            case FS_CMD_READ:
	                from = request.from;
 8004ab8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	                target = request.target;
 8004ac2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004ac6:	68db      	ldr	r3, [r3, #12]
 8004ac8:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
	                size = request.size;
 8004acc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ad2:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
	                pos = request.pos;
 8004ad6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004ada:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004adc:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134

                    /* Find fd */
                    for (i = 0; i < nfiles; i++) {
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8004ae6:	e096      	b.n	8004c16 <romfs_server+0x2ae>
                        if (files[i].fd == target) {
 8004ae8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004aec:	011b      	lsls	r3, r3, #4
 8004aee:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8004af2:	4413      	add	r3, r2
 8004af4:	3bac      	subs	r3, #172	; 0xac
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8004afc:	429a      	cmp	r2, r3
 8004afe:	f040 8085 	bne.w	8004c0c <romfs_server+0x2a4>
                            device = files[i].device;
 8004b02:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004b06:	011b      	lsls	r3, r3, #4
 8004b08:	f507 70b0 	add.w	r0, r7, #352	; 0x160
 8004b0c:	4403      	add	r3, r0
 8004b0e:	3ba8      	subs	r3, #168	; 0xa8
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158

                            /* Check boundary */
                            data_start = files[i].start + pos;
 8004b16:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004b1a:	011b      	lsls	r3, r3, #4
 8004b1c:	f507 71b0 	add.w	r1, r7, #352	; 0x160
 8004b20:	440b      	add	r3, r1
 8004b22:	3ba4      	subs	r3, #164	; 0xa4
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004b2a:	4413      	add	r3, r2
 8004b2c:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
                            if (data_start < files[i].start) {
 8004b30:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004b34:	011b      	lsls	r3, r3, #4
 8004b36:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8004b3a:	4413      	add	r3, r2
 8004b3c:	3ba4      	subs	r3, #164	; 0xa4
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8004b44:	429a      	cmp	r2, r3
 8004b46:	dd04      	ble.n	8004b52 <romfs_server+0x1ea>
                                i = nfiles;
 8004b48:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004b4c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
	                            break;
 8004b50:	e068      	b.n	8004c24 <romfs_server+0x2bc>
	                        }
                            if (data_start > files[i].start + files[i].len)
 8004b52:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004b56:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004b5a:	011b      	lsls	r3, r3, #4
 8004b5c:	f507 70b0 	add.w	r0, r7, #352	; 0x160
 8004b60:	4403      	add	r3, r0
 8004b62:	3ba4      	subs	r3, #164	; 0xa4
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4619      	mov	r1, r3
 8004b68:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004b6c:	011b      	lsls	r3, r3, #4
 8004b6e:	f507 70b0 	add.w	r0, r7, #352	; 0x160
 8004b72:	4403      	add	r3, r0
 8004b74:	3ba0      	subs	r3, #160	; 0xa0
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	440b      	add	r3, r1
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d913      	bls.n	8004ba6 <romfs_server+0x23e>
                                data_start = files[i].start + files[i].len;
 8004b7e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004b82:	011b      	lsls	r3, r3, #4
 8004b84:	f507 71b0 	add.w	r1, r7, #352	; 0x160
 8004b88:	440b      	add	r3, r1
 8004b8a:	3ba4      	subs	r3, #164	; 0xa4
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	461a      	mov	r2, r3
 8004b90:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004b94:	011b      	lsls	r3, r3, #4
 8004b96:	f507 70b0 	add.w	r0, r7, #352	; 0x160
 8004b9a:	4403      	add	r3, r0
 8004b9c:	3ba0      	subs	r3, #160	; 0xa0
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4413      	add	r3, r2
 8004ba2:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148

                            data_end = data_start + size;
 8004ba6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004baa:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004bae:	4413      	add	r3, r2
 8004bb0:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
                            if (data_end > files[i].start + files[i].len)
 8004bb4:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8004bb8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004bbc:	011b      	lsls	r3, r3, #4
 8004bbe:	f507 71b0 	add.w	r1, r7, #352	; 0x160
 8004bc2:	440b      	add	r3, r1
 8004bc4:	3ba4      	subs	r3, #164	; 0xa4
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4619      	mov	r1, r3
 8004bca:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004bce:	011b      	lsls	r3, r3, #4
 8004bd0:	f507 70b0 	add.w	r0, r7, #352	; 0x160
 8004bd4:	4403      	add	r3, r0
 8004bd6:	3ba0      	subs	r3, #160	; 0xa0
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	440b      	add	r3, r1
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d914      	bls.n	8004c0a <romfs_server+0x2a2>
                                data_end = files[i].start + files[i].len;
 8004be0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004be4:	011b      	lsls	r3, r3, #4
 8004be6:	f507 71b0 	add.w	r1, r7, #352	; 0x160
 8004bea:	440b      	add	r3, r1
 8004bec:	3ba4      	subs	r3, #164	; 0xa4
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	461a      	mov	r2, r3
 8004bf2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004bf6:	011b      	lsls	r3, r3, #4
 8004bf8:	f507 70b0 	add.w	r0, r7, #352	; 0x160
 8004bfc:	4403      	add	r3, r0
 8004bfe:	3ba0      	subs	r3, #160	; 0xa0
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4413      	add	r3, r2
 8004c04:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
                            break;
 8004c08:	e00c      	b.n	8004c24 <romfs_server+0x2bc>
 8004c0a:	e00b      	b.n	8004c24 <romfs_server+0x2bc>
	                target = request.target;
	                size = request.size;
	                pos = request.pos;

                    /* Find fd */
                    for (i = 0; i < nfiles; i++) {
 8004c0c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004c10:	3301      	adds	r3, #1
 8004c12:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8004c16:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8004c1a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	f6ff af62 	blt.w	8004ae8 <romfs_server+0x180>
                            if (data_end > files[i].start + files[i].len)
                                data_end = files[i].start + files[i].len;
                            break;
                        }
                    }
                    if (i >= nfiles) {
 8004c24:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8004c28:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	db07      	blt.n	8004c40 <romfs_server+0x2d8>
                        write(target, NULL, -1);
 8004c30:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 8004c34:	2100      	movs	r1, #0
 8004c36:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004c3a:	f013 f9af 	bl	8017f9c <write>
                        break;
 8004c3e:	e08b      	b.n	8004d58 <romfs_server+0x3f0>
                    }

                    /* Get data from device */
                    lseek(device, data_start, SEEK_SET);
 8004c40:	f8d7 0158 	ldr.w	r0, [r7, #344]	; 0x158
 8004c44:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 8004c48:	2201      	movs	r2, #1
 8004c4a:	f013 f9d8 	bl	8017ffe <lseek>
                    size = data_end - data_start;
 8004c4e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8004c52:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8004c56:	1ad3      	subs	r3, r2, r3
 8004c58:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
                    size = read(device, data, size);
 8004c5c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004c60:	1d3a      	adds	r2, r7, #4
 8004c62:	f8d7 0158 	ldr.w	r0, [r7, #344]	; 0x158
 8004c66:	4611      	mov	r1, r2
 8004c68:	461a      	mov	r2, r3
 8004c6a:	f013 f99e 	bl	8017faa <read>
 8004c6e:	f8c7 0150 	str.w	r0, [r7, #336]	; 0x150

                    /* Response */
	                write(target, data, size);
 8004c72:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004c76:	1d3a      	adds	r2, r7, #4
 8004c78:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 8004c7c:	4611      	mov	r1, r2
 8004c7e:	461a      	mov	r2, r3
 8004c80:	f013 f98c 	bl	8017f9c <write>
	                break;
 8004c84:	e068      	b.n	8004d58 <romfs_server+0x3f0>

	            case FS_CMD_SEEK:
	                target = request.target;
 8004c86:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004c8a:	68db      	ldr	r3, [r3, #12]
 8004c8c:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
	                size = request.size;
 8004c90:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c96:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
	                pos = request.pos;
 8004c9a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004c9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ca0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134

                    /* Find fd */
                    for (i = 0; i < nfiles; i++) {
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8004caa:	e014      	b.n	8004cd6 <romfs_server+0x36e>
                        if (files[i].fd == target) {
 8004cac:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004cb0:	011b      	lsls	r3, r3, #4
 8004cb2:	f507 71b0 	add.w	r1, r7, #352	; 0x160
 8004cb6:	440b      	add	r3, r1
 8004cb8:	3bac      	subs	r3, #172	; 0xac
 8004cba:	681a      	ldr	r2, [r3, #0]
 8004cbc:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d103      	bne.n	8004ccc <romfs_server+0x364>
                            break;
 8004cc4:	e00d      	b.n	8004ce2 <romfs_server+0x37a>
 8004cc6:	bf00      	nop
 8004cc8:	0801a534 	.word	0x0801a534
	                target = request.target;
	                size = request.size;
	                pos = request.pos;

                    /* Find fd */
                    for (i = 0; i < nfiles; i++) {
 8004ccc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004cd0:	3301      	adds	r3, #1
 8004cd2:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8004cd6:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8004cda:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	dbe4      	blt.n	8004cac <romfs_server+0x344>
                        if (files[i].fd == target) {
                            break;
                        }
                    }
                    if (i >= nfiles) {
 8004ce2:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8004ce6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004cea:	429a      	cmp	r2, r3
 8004cec:	db07      	blt.n	8004cfe <romfs_server+0x396>
                        lseek(target, -1, SEEK_SET);
 8004cee:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 8004cf2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	f013 f981 	bl	8017ffe <lseek>
                        break;
 8004cfc:	e02c      	b.n	8004d58 <romfs_server+0x3f0>
                    }

	                if (pos == 0) { /* SEEK_SET */
 8004cfe:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d018      	beq.n	8004d38 <romfs_server+0x3d0>
	                }
	                else if (pos < 0) { /* SEEK_END */
 8004d06:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	da0d      	bge.n	8004d2a <romfs_server+0x3c2>
	                    size = (files[i].len) + size;
 8004d0e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004d12:	011b      	lsls	r3, r3, #4
 8004d14:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8004d18:	4413      	add	r3, r2
 8004d1a:	3ba0      	subs	r3, #160	; 0xa0
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004d22:	4413      	add	r3, r2
 8004d24:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004d28:	e006      	b.n	8004d38 <romfs_server+0x3d0>
	                }
	                else { /* SEEK_CUR */
	                    size = pos + size;
 8004d2a:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8004d2e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004d32:	4413      	add	r3, r2
 8004d34:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
	                }
	                lseek(target, size, SEEK_SET);
 8004d38:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 8004d3c:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8004d40:	2201      	movs	r2, #1
 8004d42:	f013 f95c 	bl	8017ffe <lseek>
	                break;
 8004d46:	e007      	b.n	8004d58 <romfs_server+0x3f0>

	            case FS_CMD_WRITE: /* readonly */
	            default:
	                write(target, NULL, -1);
 8004d48:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 8004d4c:	2100      	movs	r1, #0
 8004d4e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004d52:	f013 f923 	bl	8017f9c <write>
	        }
        }
    }
 8004d56:	e616      	b.n	8004986 <romfs_server+0x1e>
 8004d58:	e615      	b.n	8004986 <romfs_server+0x1e>
 8004d5a:	bf00      	nop

08004d5c <strcmp>:
#include "string.h"
#include "stm32f4xx.h"
int strcmp(const char *a, const char *b)
{
	asm(
 8004d5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004d60:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004d64:	2a01      	cmp	r2, #1
 8004d66:	bf88      	it	hi
 8004d68:	429a      	cmphi	r2, r3
 8004d6a:	f43f aff7 	beq.w	8004d5c <strcmp>
 8004d6e:	eba2 0003 	sub.w	r0, r2, r3
 8004d72:	4770      	bx	lr
        "   beq     strcmp_lop      \n"
		"	sub     r0, r2, r3  	\n"
        "   bx      lr              \n"
		:::
	);
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	bf00      	nop

08004d78 <strncmp>:

int strncmp(const char *a, const char *b, size_t n)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b087      	sub	sp, #28
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	60f8      	str	r0, [r7, #12]
 8004d80:	60b9      	str	r1, [r7, #8]
 8004d82:	607a      	str	r2, [r7, #4]
	size_t i;

	for (i = 0; i < n; i++)
 8004d84:	2300      	movs	r3, #0
 8004d86:	617b      	str	r3, [r7, #20]
 8004d88:	e017      	b.n	8004dba <strncmp+0x42>
		if (a[i] != b[i])
 8004d8a:	68fa      	ldr	r2, [r7, #12]
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	4413      	add	r3, r2
 8004d90:	781a      	ldrb	r2, [r3, #0]
 8004d92:	68b9      	ldr	r1, [r7, #8]
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	440b      	add	r3, r1
 8004d98:	781b      	ldrb	r3, [r3, #0]
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	d00a      	beq.n	8004db4 <strncmp+0x3c>
			return a[i] - b[i];
 8004d9e:	68fa      	ldr	r2, [r7, #12]
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	4413      	add	r3, r2
 8004da4:	781b      	ldrb	r3, [r3, #0]
 8004da6:	461a      	mov	r2, r3
 8004da8:	68b9      	ldr	r1, [r7, #8]
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	440b      	add	r3, r1
 8004dae:	781b      	ldrb	r3, [r3, #0]
 8004db0:	1ad3      	subs	r3, r2, r3
 8004db2:	e007      	b.n	8004dc4 <strncmp+0x4c>

int strncmp(const char *a, const char *b, size_t n)
{
	size_t i;

	for (i = 0; i < n; i++)
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	3301      	adds	r3, #1
 8004db8:	617b      	str	r3, [r7, #20]
 8004dba:	697a      	ldr	r2, [r7, #20]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	429a      	cmp	r2, r3
 8004dc0:	d3e3      	bcc.n	8004d8a <strncmp+0x12>
		if (a[i] != b[i])
			return a[i] - b[i];

	return 0;
 8004dc2:	2300      	movs	r3, #0
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	371c      	adds	r7, #28
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dce:	4770      	bx	lr

08004dd0 <strlen>:

size_t strlen(const char *s)
{
	asm(
 8004dd0:	f1a0 0301 	sub.w	r3, r0, #1

08004dd4 <strlen_loop>:
 8004dd4:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8004dd8:	2a00      	cmp	r2, #0
 8004dda:	f47f affb 	bne.w	8004dd4 <strlen_loop>
 8004dde:	eba3 0000 	sub.w	r0, r3, r0
 8004de2:	4770      	bx	lr
        "   bne  strlen_loop        \n"
		"	sub  r0, r3, r0			\n"
		"	bx   lr					\n"
		:::
	);
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	bf00      	nop

08004de8 <puts>:

void puts(char *s)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b082      	sub	sp, #8
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
	while (*s) {
 8004df0:	e010      	b.n	8004e14 <puts+0x2c>
		while (USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET)
 8004df2:	bf00      	nop
 8004df4:	480b      	ldr	r0, [pc, #44]	; (8004e24 <puts+0x3c>)
 8004df6:	2180      	movs	r1, #128	; 0x80
 8004df8:	f010 f84c 	bl	8014e94 <USART_GetFlagStatus>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d0f8      	beq.n	8004df4 <puts+0xc>
			/* wait */ ;
		USART_SendData(USART2, *s);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	781b      	ldrb	r3, [r3, #0]
 8004e06:	4807      	ldr	r0, [pc, #28]	; (8004e24 <puts+0x3c>)
 8004e08:	4619      	mov	r1, r3
 8004e0a:	f00f fe55 	bl	8014ab8 <USART_SendData>
		s++;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	3301      	adds	r3, #1
 8004e12:	607b      	str	r3, [r7, #4]
	);
}

void puts(char *s)
{
	while (*s) {
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	781b      	ldrb	r3, [r3, #0]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d1ea      	bne.n	8004df2 <puts+0xa>
		while (USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET)
			/* wait */ ;
		USART_SendData(USART2, *s);
		s++;
	}
}
 8004e1c:	3708      	adds	r7, #8
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}
 8004e22:	bf00      	nop
 8004e24:	40004400 	.word	0x40004400

08004e28 <init_task>:
#include "task.h"

#include <stddef.h>

unsigned int *init_task(unsigned int *stack, void (*start)())
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b083      	sub	sp, #12
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
 8004e30:	6039      	str	r1, [r7, #0]
	stack += STACK_SIZE - 9; /* End of stack, minus what we're about to push */
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 8004e38:	607b      	str	r3, [r7, #4]
	stack[8] = (unsigned int)start;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	3320      	adds	r3, #32
 8004e3e:	683a      	ldr	r2, [r7, #0]
 8004e40:	601a      	str	r2, [r3, #0]
	return stack;
 8004e42:	687b      	ldr	r3, [r7, #4]
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	370c      	adds	r7, #12
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4e:	4770      	bx	lr

08004e50 <init_led>:
#include "stm32f4xx_exti.h"
#include "stm32f4xx_syscfg.h"
#include "misc.h"

void init_led(void)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b082      	sub	sp, #8
 8004e54:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable GPIO C clock. */
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8004e56:	2004      	movs	r0, #4
 8004e58:	2101      	movs	r1, #1
 8004e5a:	f00a fee5 	bl	800fc28 <RCC_AHB1PeriphClockCmd>

    /* Set the LED pin state such that the LED is off.  The LED is connected
     * between power and the microcontroller pin, which makes it turn on when
     * the pin is low.
     */
    GPIO_WriteBit(GPIOC,GPIO_Pin_12,Bit_SET);
 8004e5e:	480b      	ldr	r0, [pc, #44]	; (8004e8c <init_led+0x3c>)
 8004e60:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004e64:	2201      	movs	r2, #1
 8004e66:	f008 f96d 	bl	800d144 <GPIO_WriteBit>

    /* Configure the LED pin as push-pull output. */
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_12;
 8004e6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004e6e:	603b      	str	r3, [r7, #0]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8004e70:	2301      	movs	r3, #1
 8004e72:	713b      	strb	r3, [r7, #4]
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8004e74:	2300      	movs	r3, #0
 8004e76:	71bb      	strb	r3, [r7, #6]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8004e78:	2302      	movs	r3, #2
 8004e7a:	717b      	strb	r3, [r7, #5]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
 8004e7c:	463b      	mov	r3, r7
 8004e7e:	4803      	ldr	r0, [pc, #12]	; (8004e8c <init_led+0x3c>)
 8004e80:	4619      	mov	r1, r3
 8004e82:	f008 f829 	bl	800ced8 <GPIO_Init>
}
 8004e86:	3708      	adds	r7, #8
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}
 8004e8c:	40020800 	.word	0x40020800

08004e90 <init_button>:

void init_button(void)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b082      	sub	sp, #8
 8004e94:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable GPIO A clock */
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8004e96:	2001      	movs	r0, #1
 8004e98:	2101      	movs	r1, #1
 8004e9a:	f00a fec5 	bl	800fc28 <RCC_AHB1PeriphClockCmd>

    /* Configure the button pin as a floating input. */
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_0;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	603b      	str	r3, [r7, #0]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	713b      	strb	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8004ea6:	2302      	movs	r3, #2
 8004ea8:	717b      	strb	r3, [r7, #5]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
 8004eaa:	463b      	mov	r3, r7
 8004eac:	4803      	ldr	r0, [pc, #12]	; (8004ebc <init_button+0x2c>)
 8004eae:	4619      	mov	r1, r3
 8004eb0:	f008 f812 	bl	800ced8 <GPIO_Init>
}
 8004eb4:	3708      	adds	r7, #8
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}
 8004eba:	bf00      	nop
 8004ebc:	40020800 	.word	0x40020800

08004ec0 <enable_button_interrupts>:

void enable_button_interrupts(void)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b084      	sub	sp, #16
 8004ec4:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef NVIC_InitStructure;

    /* Enable the AFIO clock.  GPIO_EXTILineConfig sets registers in
     * the AFIO.
     */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 8004ec6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004eca:	2101      	movs	r1, #1
 8004ecc:	f00a ff24 	bl	800fd18 <RCC_APB2PeriphClockCmd>

    /* Connect EXTI Line 0 to the button GPIO Pin */
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOA, EXTI_PinSource0);
 8004ed0:	2000      	movs	r0, #0
 8004ed2:	2100      	movs	r1, #0
 8004ed4:	f00d fd9c 	bl	8012a10 <SYSCFG_EXTILineConfig>

    /* Configure the EXTI line to generate an interrupt when the button is
     * pressed.  The button pin is high when pressed, so it needs to trigger
     * when rising from low to high. */
    EXTI_InitStructure.EXTI_Line = EXTI_Line0;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	60bb      	str	r3, [r7, #8]
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 8004edc:	2300      	movs	r3, #0
 8004ede:	733b      	strb	r3, [r7, #12]
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
 8004ee0:	2308      	movs	r3, #8
 8004ee2:	737b      	strb	r3, [r7, #13]
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	73bb      	strb	r3, [r7, #14]
    EXTI_Init(&EXTI_InitStructure);
 8004ee8:	f107 0308 	add.w	r3, r7, #8
 8004eec:	4618      	mov	r0, r3
 8004eee:	f006 fa3b 	bl	800b368 <EXTI_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQn;
 8004ef2:	2306      	movs	r3, #6
 8004ef4:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
 8004ef6:	230f      	movs	r3, #15
 8004ef8:	717b      	strb	r3, [r7, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
 8004efa:	230f      	movs	r3, #15
 8004efc:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8004efe:	2301      	movs	r3, #1
 8004f00:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
 8004f02:	1d3b      	adds	r3, r7, #4
 8004f04:	4618      	mov	r0, r3
 8004f06:	f000 f941 	bl	800518c <NVIC_Init>
}
 8004f0a:	3710      	adds	r7, #16
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}

08004f10 <init_rs232>:

void init_rs232(void)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b086      	sub	sp, #24
 8004f14:	af00      	add	r7, sp, #0
    /* --------------------------- System Clocks Configuration -----------------*/
    /* USART2 clock enable */
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
 8004f16:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8004f1a:	2101      	movs	r1, #1
 8004f1c:	f00a fede 	bl	800fcdc <RCC_APB1PeriphClockCmd>
    /* GPIOA clock enable */
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 8004f20:	2008      	movs	r0, #8
 8004f22:	2101      	movs	r1, #1
 8004f24:	f00a fe80 	bl	800fc28 <RCC_AHB1PeriphClockCmd>
    GPIO_InitTypeDef GPIO_InitStructure;

    /*-------------------------- GPIO Configuration ----------------------------*/
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5 | GPIO_Pin_6;
 8004f28:	2360      	movs	r3, #96	; 0x60
 8004f2a:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8004f2c:	2302      	movs	r3, #2
 8004f2e:	753b      	strb	r3, [r7, #20]
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8004f30:	2300      	movs	r3, #0
 8004f32:	75bb      	strb	r3, [r7, #22]
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8004f34:	2300      	movs	r3, #0
 8004f36:	75fb      	strb	r3, [r7, #23]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8004f38:	2302      	movs	r3, #2
 8004f3a:	757b      	strb	r3, [r7, #21]
    GPIO_Init(GPIOD, &GPIO_InitStructure);
 8004f3c:	f107 0310 	add.w	r3, r7, #16
 8004f40:	4813      	ldr	r0, [pc, #76]	; (8004f90 <init_rs232+0x80>)
 8004f42:	4619      	mov	r1, r3
 8004f44:	f007 ffc8 	bl	800ced8 <GPIO_Init>
    
    /* Connect USART pins to AF */
    GPIO_PinAFConfig(GPIOD, GPIO_PinSource5, GPIO_AF_USART2);   // USART2_TX
 8004f48:	4811      	ldr	r0, [pc, #68]	; (8004f90 <init_rs232+0x80>)
 8004f4a:	2105      	movs	r1, #5
 8004f4c:	2207      	movs	r2, #7
 8004f4e:	f008 f931 	bl	800d1b4 <GPIO_PinAFConfig>
    GPIO_PinAFConfig(GPIOD, GPIO_PinSource6, GPIO_AF_USART2);   // USART2_RX
 8004f52:	480f      	ldr	r0, [pc, #60]	; (8004f90 <init_rs232+0x80>)
 8004f54:	2106      	movs	r1, #6
 8004f56:	2207      	movs	r2, #7
 8004f58:	f008 f92c 	bl	800d1b4 <GPIO_PinAFConfig>
     *  - One Stop Bit
     *  - No parity
     *  - Hardware flow control disabled (RTS and CTS signals)
     *  - Receive and transmit enabled
     */
    USART_InitStructure.USART_BaudRate = 9600;
 8004f5c:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8004f60:	603b      	str	r3, [r7, #0]
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 8004f62:	2300      	movs	r3, #0
 8004f64:	80bb      	strh	r3, [r7, #4]
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
 8004f66:	2300      	movs	r3, #0
 8004f68:	80fb      	strh	r3, [r7, #6]
    USART_InitStructure.USART_Parity = USART_Parity_No;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	813b      	strh	r3, [r7, #8]
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	81bb      	strh	r3, [r7, #12]
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8004f72:	230c      	movs	r3, #12
 8004f74:	817b      	strh	r3, [r7, #10]
    USART_Init(USART2, &USART_InitStructure);
 8004f76:	463b      	mov	r3, r7
 8004f78:	4806      	ldr	r0, [pc, #24]	; (8004f94 <init_rs232+0x84>)
 8004f7a:	4619      	mov	r1, r3
 8004f7c:	f00f fc08 	bl	8014790 <USART_Init>
    USART_Cmd(USART2, ENABLE);
 8004f80:	4804      	ldr	r0, [pc, #16]	; (8004f94 <init_rs232+0x84>)
 8004f82:	2101      	movs	r1, #1
 8004f84:	f00f fd1a 	bl	80149bc <USART_Cmd>
}
 8004f88:	3718      	adds	r7, #24
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}
 8004f8e:	bf00      	nop
 8004f90:	40020c00 	.word	0x40020c00
 8004f94:	40004400 	.word	0x40004400

08004f98 <enable_rs232_interrupts>:

void enable_rs232_interrupts(void)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b082      	sub	sp, #8
 8004f9c:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef NVIC_InitStructure;

    /* Enable transmit and receive interrupts for the USART2. */
    USART_ITConfig(USART2, USART_IT_TXE, DISABLE);
 8004f9e:	480c      	ldr	r0, [pc, #48]	; (8004fd0 <enable_rs232_interrupts+0x38>)
 8004fa0:	f240 7127 	movw	r1, #1831	; 0x727
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	f00f ff2d 	bl	8014e04 <USART_ITConfig>
    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 8004faa:	4809      	ldr	r0, [pc, #36]	; (8004fd0 <enable_rs232_interrupts+0x38>)
 8004fac:	f240 5125 	movw	r1, #1317	; 0x525
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	f00f ff27 	bl	8014e04 <USART_ITConfig>

    /* Enable the USART2 IRQ in the NVIC module (so that the USART2 interrupt
     * handler is enabled). */
    NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
 8004fb6:	2326      	movs	r3, #38	; 0x26
 8004fb8:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
 8004fc2:	1d3b      	adds	r3, r7, #4
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f000 f8e1 	bl	800518c <NVIC_Init>
}
 8004fca:	3708      	adds	r7, #8
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}
 8004fd0:	40004400 	.word	0x40004400

08004fd4 <enable_rs232>:

void enable_rs232(void)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	af00      	add	r7, sp, #0
    /* Enable the RS232 port. */
    USART_Cmd(USART2, ENABLE);
 8004fd8:	4802      	ldr	r0, [pc, #8]	; (8004fe4 <enable_rs232+0x10>)
 8004fda:	2101      	movs	r1, #1
 8004fdc:	f00f fcee 	bl	80149bc <USART_Cmd>
}
 8004fe0:	bd80      	pop	{r7, pc}
 8004fe2:	bf00      	nop
 8004fe4:	40004400 	.word	0x40004400

08004fe8 <itoa>:
static uint8_t hz_str[3] = "Hz";
static uint8_t frequency_str[10];


static uint8_t* itoa(int value, uint8_t* result, int base)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b089      	sub	sp, #36	; 0x24
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	60f8      	str	r0, [r7, #12]
 8004ff0:	60b9      	str	r1, [r7, #8]
 8004ff2:	607a      	str	r2, [r7, #4]
	if (base < 2 || base > 36) {
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2b01      	cmp	r3, #1
 8004ff8:	dd02      	ble.n	8005000 <itoa+0x18>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2b24      	cmp	r3, #36	; 0x24
 8004ffe:	dd04      	ble.n	800500a <itoa+0x22>
		*result = '\0';
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	2200      	movs	r2, #0
 8005004:	701a      	strb	r2, [r3, #0]
		return result;
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	e03b      	b.n	8005082 <itoa+0x9a>
	}
	uint8_t *ptr = result, *ptr1 = result, tmp_char;
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	61fb      	str	r3, [r7, #28]
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	61bb      	str	r3, [r7, #24]
	int tmp_value;

	do {
		tmp_value = value;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	617b      	str	r3, [r7, #20]
		value /= base;
 8005016:	68fa      	ldr	r2, [r7, #12]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	fb92 f3f3 	sdiv	r3, r2, r3
 800501e:	60fb      	str	r3, [r7, #12]
		*ptr++ = "zyxwvutsrqponmlkjihgfedcba9876543210123456789abcdefghijklmnopqrstuvwxyz" [35 + (tmp_value - value * base)];
 8005020:	69fb      	ldr	r3, [r7, #28]
 8005022:	1c5a      	adds	r2, r3, #1
 8005024:	61fa      	str	r2, [r7, #28]
 8005026:	68fa      	ldr	r2, [r7, #12]
 8005028:	6879      	ldr	r1, [r7, #4]
 800502a:	fb01 f202 	mul.w	r2, r1, r2
 800502e:	6979      	ldr	r1, [r7, #20]
 8005030:	1a8a      	subs	r2, r1, r2
 8005032:	3223      	adds	r2, #35	; 0x23
 8005034:	4916      	ldr	r1, [pc, #88]	; (8005090 <itoa+0xa8>)
 8005036:	5c8a      	ldrb	r2, [r1, r2]
 8005038:	701a      	strb	r2, [r3, #0]
	} while (value);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d1e8      	bne.n	8005012 <itoa+0x2a>

	if (tmp_value < 0) *ptr++ = '-';
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	2b00      	cmp	r3, #0
 8005044:	da04      	bge.n	8005050 <itoa+0x68>
 8005046:	69fb      	ldr	r3, [r7, #28]
 8005048:	1c5a      	adds	r2, r3, #1
 800504a:	61fa      	str	r2, [r7, #28]
 800504c:	222d      	movs	r2, #45	; 0x2d
 800504e:	701a      	strb	r2, [r3, #0]
	*ptr-- = '\0';
 8005050:	69fb      	ldr	r3, [r7, #28]
 8005052:	1e5a      	subs	r2, r3, #1
 8005054:	61fa      	str	r2, [r7, #28]
 8005056:	2200      	movs	r2, #0
 8005058:	701a      	strb	r2, [r3, #0]
	while (ptr1 < ptr) {
 800505a:	e00d      	b.n	8005078 <itoa+0x90>
		tmp_char = *ptr;
 800505c:	69fb      	ldr	r3, [r7, #28]
 800505e:	781b      	ldrb	r3, [r3, #0]
 8005060:	74fb      	strb	r3, [r7, #19]
		*ptr-- = *ptr1;
 8005062:	69fb      	ldr	r3, [r7, #28]
 8005064:	1e5a      	subs	r2, r3, #1
 8005066:	61fa      	str	r2, [r7, #28]
 8005068:	69ba      	ldr	r2, [r7, #24]
 800506a:	7812      	ldrb	r2, [r2, #0]
 800506c:	701a      	strb	r2, [r3, #0]
		*ptr1++ = tmp_char;
 800506e:	69bb      	ldr	r3, [r7, #24]
 8005070:	1c5a      	adds	r2, r3, #1
 8005072:	61ba      	str	r2, [r7, #24]
 8005074:	7cfa      	ldrb	r2, [r7, #19]
 8005076:	701a      	strb	r2, [r3, #0]
		*ptr++ = "zyxwvutsrqponmlkjihgfedcba9876543210123456789abcdefghijklmnopqrstuvwxyz" [35 + (tmp_value - value * base)];
	} while (value);

	if (tmp_value < 0) *ptr++ = '-';
	*ptr-- = '\0';
	while (ptr1 < ptr) {
 8005078:	69ba      	ldr	r2, [r7, #24]
 800507a:	69fb      	ldr	r3, [r7, #28]
 800507c:	429a      	cmp	r2, r3
 800507e:	d3ed      	bcc.n	800505c <itoa+0x74>
		tmp_char = *ptr;
		*ptr-- = *ptr1;
		*ptr1++ = tmp_char;
	}
	return result;
 8005080:	68bb      	ldr	r3, [r7, #8]
}
 8005082:	4618      	mov	r0, r3
 8005084:	3724      	adds	r7, #36	; 0x24
 8005086:	46bd      	mov	sp, r7
 8005088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508c:	4770      	bx	lr
 800508e:	bf00      	nop
 8005090:	0801a53c 	.word	0x0801a53c

08005094 <ui_bfclear>:

void ui_bfclear()
{
 8005094:	b580      	push	{r7, lr}
 8005096:	af00      	add	r7, sp, #0
	memset((void *) LCD_FRAME_BUFFER + BUFFER_OFFSET, 0xff, BUFFER_OFFSET);
 8005098:	4803      	ldr	r0, [pc, #12]	; (80050a8 <ui_bfclear+0x14>)
 800509a:	21ff      	movs	r1, #255	; 0xff
 800509c:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 80050a0:	f013 fa64 	bl	801856c <memset>
	//memset((void *) LCD_FRAME_BUFFER, 0xff, BUFFER_OFFSET);
}
 80050a4:	bd80      	pop	{r7, pc}
 80050a6:	bf00      	nop
 80050a8:	d0050000 	.word	0xd0050000

080050ac <ui_start_tuner>:


void ui_start_tuner()
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b082      	sub	sp, #8
 80050b0:	af00      	add	r7, sp, #0
    int hz = 332;
 80050b2:	f44f 73a6 	mov.w	r3, #332	; 0x14c
 80050b6:	607b      	str	r3, [r7, #4]

    itoa(hz, frequency_str, 10);
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	491f      	ldr	r1, [pc, #124]	; (8005138 <ui_start_tuner+0x8c>)
 80050bc:	220a      	movs	r2, #10
 80050be:	f7ff ff93 	bl	8004fe8 <itoa>
    strcat((char *)frequency_str, (char *)hz_str);
 80050c2:	481d      	ldr	r0, [pc, #116]	; (8005138 <ui_start_tuner+0x8c>)
 80050c4:	491d      	ldr	r1, [pc, #116]	; (800513c <ui_start_tuner+0x90>)
 80050c6:	f013 fa9b 	bl	8018600 <strcat>

    LCD_SetColors(LCD_COLOR_MAGENTA , LCD_COLOR_WHITE);
 80050ca:	f64f 001f 	movw	r0, #63519	; 0xf81f
 80050ce:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80050d2:	f010 fc45 	bl	8015960 <LCD_SetColors>

    while(1){

        ui_bfclear();
 80050d6:	f7ff ffdd 	bl	8005094 <ui_bfclear>
    
        LCD_DisplayStringLine(LCD_LINE_3, sound[3]);
 80050da:	f010 fcbb 	bl	8015a54 <LCD_GetFont>
 80050de:	4603      	mov	r3, r0
 80050e0:	88db      	ldrh	r3, [r3, #6]
 80050e2:	461a      	mov	r2, r3
 80050e4:	0052      	lsls	r2, r2, #1
 80050e6:	4413      	add	r3, r2
 80050e8:	b29b      	uxth	r3, r3
 80050ea:	4618      	mov	r0, r3
 80050ec:	4914      	ldr	r1, [pc, #80]	; (8005140 <ui_start_tuner+0x94>)
 80050ee:	f010 fe2d 	bl	8015d4c <LCD_DisplayStringLine>
        LCD_DisplayStringLine(LCD_LINE_5, frequency_str);
 80050f2:	f010 fcaf 	bl	8015a54 <LCD_GetFont>
 80050f6:	4603      	mov	r3, r0
 80050f8:	88db      	ldrh	r3, [r3, #6]
 80050fa:	461a      	mov	r2, r3
 80050fc:	0092      	lsls	r2, r2, #2
 80050fe:	4413      	add	r3, r2
 8005100:	b29b      	uxth	r3, r3
 8005102:	4618      	mov	r0, r3
 8005104:	490c      	ldr	r1, [pc, #48]	; (8005138 <ui_start_tuner+0x8c>)
 8005106:	f010 fe21 	bl	8015d4c <LCD_DisplayStringLine>

        LCD_DrawLine(20, 200, 200, LCD_DIR_HORIZONTAL);
 800510a:	2014      	movs	r0, #20
 800510c:	21c8      	movs	r1, #200	; 0xc8
 800510e:	22c8      	movs	r2, #200	; 0xc8
 8005110:	2300      	movs	r3, #0
 8005112:	f010 fe9f 	bl	8015e54 <LCD_DrawLine>
        LCD_DrawLine(20, 180, 40, LCD_DIR_VERTICAL);
 8005116:	2014      	movs	r0, #20
 8005118:	21b4      	movs	r1, #180	; 0xb4
 800511a:	2228      	movs	r2, #40	; 0x28
 800511c:	2301      	movs	r3, #1
 800511e:	f010 fe99 	bl	8015e54 <LCD_DrawLine>
        LCD_DrawLine(220, 180, 40, LCD_DIR_VERTICAL);
 8005122:	20dc      	movs	r0, #220	; 0xdc
 8005124:	21b4      	movs	r1, #180	; 0xb4
 8005126:	2228      	movs	r2, #40	; 0x28
 8005128:	2301      	movs	r3, #1
 800512a:	f010 fe93 	bl	8015e54 <LCD_DrawLine>

        sleep(1220);
 800512e:	f240 40c4 	movw	r0, #1220	; 0x4c4
 8005132:	f012 ff5d 	bl	8017ff0 <sleep>
    }
 8005136:	e7ce      	b.n	80050d6 <ui_start_tuner+0x2a>
 8005138:	200052fc 	.word	0x200052fc
 800513c:	20000074 	.word	0x20000074
 8005140:	2000006a 	.word	0x2000006a

08005144 <ui_init>:
}

void ui_init()
{
 8005144:	b580      	push	{r7, lr}
 8005146:	af00      	add	r7, sp, #0

    LCD_Init();
 8005148:	f010 fb20 	bl	801578c <LCD_Init>

    LCD_LayerInit();
 800514c:	f010 fb78 	bl	8015840 <LCD_LayerInit>

    LTDC_Cmd(ENABLE);
 8005150:	2001      	movs	r0, #1
 8005152:	f009 fbd1 	bl	800e8f8 <LTDC_Cmd>

    LCD_DisplayOn();
 8005156:	f012 f999 	bl	801748c <LCD_DisplayOn>

    LCD_SetLayer(LCD_FOREGROUND_LAYER);
 800515a:	2001      	movs	r0, #1
 800515c:	f010 fbe0 	bl	8015920 <LCD_SetLayer>

    ui_start_tuner();
 8005160:	f7ff ffa4 	bl	80050ac <ui_start_tuner>
}
 8005164:	bd80      	pop	{r7, pc}
 8005166:	bf00      	nop

08005168 <NVIC_PriorityGroupConfig>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 8005168:	b480      	push	{r7}
 800516a:	b083      	sub	sp, #12
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8005170:	4a05      	ldr	r2, [pc, #20]	; (8005188 <NVIC_PriorityGroupConfig+0x20>)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005178:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800517c:	60d3      	str	r3, [r2, #12]
}
 800517e:	370c      	adds	r7, #12
 8005180:	46bd      	mov	sp, r7
 8005182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005186:	4770      	bx	lr
 8005188:	e000ed00 	.word	0xe000ed00

0800518c <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 800518c:	b480      	push	{r7}
 800518e:	b085      	sub	sp, #20
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8005194:	2300      	movs	r3, #0
 8005196:	73fb      	strb	r3, [r7, #15]
 8005198:	2300      	movs	r3, #0
 800519a:	73bb      	strb	r3, [r7, #14]
 800519c:	230f      	movs	r3, #15
 800519e:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	78db      	ldrb	r3, [r3, #3]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d037      	beq.n	8005218 <NVIC_Init+0x8c>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80051a8:	4b25      	ldr	r3, [pc, #148]	; (8005240 <NVIC_Init+0xb4>)
 80051aa:	68db      	ldr	r3, [r3, #12]
 80051ac:	43db      	mvns	r3, r3
 80051ae:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80051b2:	0a1b      	lsrs	r3, r3, #8
 80051b4:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 80051b6:	7bfb      	ldrb	r3, [r7, #15]
 80051b8:	f1c3 0304 	rsb	r3, r3, #4
 80051bc:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 80051be:	7b7a      	ldrb	r2, [r7, #13]
 80051c0:	7bfb      	ldrb	r3, [r7, #15]
 80051c2:	fa42 f303 	asr.w	r3, r2, r3
 80051c6:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	785b      	ldrb	r3, [r3, #1]
 80051cc:	461a      	mov	r2, r3
 80051ce:	7bbb      	ldrb	r3, [r7, #14]
 80051d0:	fa02 f303 	lsl.w	r3, r2, r3
 80051d4:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	789a      	ldrb	r2, [r3, #2]
 80051da:	7b7b      	ldrb	r3, [r7, #13]
 80051dc:	4013      	ands	r3, r2
 80051de:	b2da      	uxtb	r2, r3
 80051e0:	7bfb      	ldrb	r3, [r7, #15]
 80051e2:	4313      	orrs	r3, r2
 80051e4:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 80051e6:	7bfb      	ldrb	r3, [r7, #15]
 80051e8:	011b      	lsls	r3, r3, #4
 80051ea:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80051ec:	4a15      	ldr	r2, [pc, #84]	; (8005244 <NVIC_Init+0xb8>)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	781b      	ldrb	r3, [r3, #0]
 80051f2:	4413      	add	r3, r2
 80051f4:	7bfa      	ldrb	r2, [r7, #15]
 80051f6:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80051fa:	4b12      	ldr	r3, [pc, #72]	; (8005244 <NVIC_Init+0xb8>)
 80051fc:	687a      	ldr	r2, [r7, #4]
 80051fe:	7812      	ldrb	r2, [r2, #0]
 8005200:	0952      	lsrs	r2, r2, #5
 8005202:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8005204:	6879      	ldr	r1, [r7, #4]
 8005206:	7809      	ldrb	r1, [r1, #0]
 8005208:	f001 011f 	and.w	r1, r1, #31
 800520c:	2001      	movs	r0, #1
 800520e:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8005212:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8005216:	e00e      	b.n	8005236 <NVIC_Init+0xaa>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8005218:	4b0a      	ldr	r3, [pc, #40]	; (8005244 <NVIC_Init+0xb8>)
 800521a:	687a      	ldr	r2, [r7, #4]
 800521c:	7812      	ldrb	r2, [r2, #0]
 800521e:	0952      	lsrs	r2, r2, #5
 8005220:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8005222:	6879      	ldr	r1, [r7, #4]
 8005224:	7809      	ldrb	r1, [r1, #0]
 8005226:	f001 011f 	and.w	r1, r1, #31
 800522a:	2001      	movs	r0, #1
 800522c:	fa00 f101 	lsl.w	r1, r0, r1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8005230:	3220      	adds	r2, #32
 8005232:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8005236:	3714      	adds	r7, #20
 8005238:	46bd      	mov	sp, r7
 800523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523e:	4770      	bx	lr
 8005240:	e000ed00 	.word	0xe000ed00
 8005244:	e000e100 	.word	0xe000e100

08005248 <NVIC_SetVectorTable>:
  *     @arg NVIC_VectTab_FLASH: Vector Table in internal FLASH.
  * @param  Offset: Vector Table base offset field. This value must be a multiple of 0x200.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{ 
 8005248:	b480      	push	{r7}
 800524a:	b083      	sub	sp, #12
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
 8005250:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
 8005252:	4a07      	ldr	r2, [pc, #28]	; (8005270 <NVIC_SetVectorTable+0x28>)
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 800525a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800525e:	6879      	ldr	r1, [r7, #4]
 8005260:	430b      	orrs	r3, r1
 8005262:	6093      	str	r3, [r2, #8]
}
 8005264:	370c      	adds	r7, #12
 8005266:	46bd      	mov	sp, r7
 8005268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526c:	4770      	bx	lr
 800526e:	bf00      	nop
 8005270:	e000ed00 	.word	0xe000ed00

08005274 <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT: Low Power Sleep on Exit.
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
 8005274:	b480      	push	{r7}
 8005276:	b083      	sub	sp, #12
 8005278:	af00      	add	r7, sp, #0
 800527a:	4602      	mov	r2, r0
 800527c:	460b      	mov	r3, r1
 800527e:	71fa      	strb	r2, [r7, #7]
 8005280:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
 8005282:	79bb      	ldrb	r3, [r7, #6]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d006      	beq.n	8005296 <NVIC_SystemLPConfig+0x22>
  {
    SCB->SCR |= LowPowerMode;
 8005288:	4b09      	ldr	r3, [pc, #36]	; (80052b0 <NVIC_SystemLPConfig+0x3c>)
 800528a:	4a09      	ldr	r2, [pc, #36]	; (80052b0 <NVIC_SystemLPConfig+0x3c>)
 800528c:	6911      	ldr	r1, [r2, #16]
 800528e:	79fa      	ldrb	r2, [r7, #7]
 8005290:	430a      	orrs	r2, r1
 8005292:	611a      	str	r2, [r3, #16]
 8005294:	e006      	b.n	80052a4 <NVIC_SystemLPConfig+0x30>
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
 8005296:	4b06      	ldr	r3, [pc, #24]	; (80052b0 <NVIC_SystemLPConfig+0x3c>)
 8005298:	4a05      	ldr	r2, [pc, #20]	; (80052b0 <NVIC_SystemLPConfig+0x3c>)
 800529a:	6911      	ldr	r1, [r2, #16]
 800529c:	79fa      	ldrb	r2, [r7, #7]
 800529e:	43d2      	mvns	r2, r2
 80052a0:	400a      	ands	r2, r1
 80052a2:	611a      	str	r2, [r3, #16]
  }
}
 80052a4:	370c      	adds	r7, #12
 80052a6:	46bd      	mov	sp, r7
 80052a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ac:	4770      	bx	lr
 80052ae:	bf00      	nop
 80052b0:	e000ed00 	.word	0xe000ed00

080052b4 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b083      	sub	sp, #12
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2b04      	cmp	r3, #4
 80052c0:	d106      	bne.n	80052d0 <SysTick_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 80052c2:	4b09      	ldr	r3, [pc, #36]	; (80052e8 <SysTick_CLKSourceConfig+0x34>)
 80052c4:	4a08      	ldr	r2, [pc, #32]	; (80052e8 <SysTick_CLKSourceConfig+0x34>)
 80052c6:	6812      	ldr	r2, [r2, #0]
 80052c8:	f042 0204 	orr.w	r2, r2, #4
 80052cc:	601a      	str	r2, [r3, #0]
 80052ce:	e005      	b.n	80052dc <SysTick_CLKSourceConfig+0x28>
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 80052d0:	4b05      	ldr	r3, [pc, #20]	; (80052e8 <SysTick_CLKSourceConfig+0x34>)
 80052d2:	4a05      	ldr	r2, [pc, #20]	; (80052e8 <SysTick_CLKSourceConfig+0x34>)
 80052d4:	6812      	ldr	r2, [r2, #0]
 80052d6:	f022 0204 	bic.w	r2, r2, #4
 80052da:	601a      	str	r2, [r3, #0]
  }
}
 80052dc:	370c      	adds	r7, #12
 80052de:	46bd      	mov	sp, r7
 80052e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e4:	4770      	bx	lr
 80052e6:	bf00      	nop
 80052e8:	e000e010 	.word	0xe000e010

080052ec <ADC_DeInit>:
  *         values.
  * @param  None
  * @retval None
  */
void ADC_DeInit(void)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	af00      	add	r7, sp, #0
  /* Enable all ADCs reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, ENABLE);
 80052f0:	f44f 7080 	mov.w	r0, #256	; 0x100
 80052f4:	2101      	movs	r1, #1
 80052f6:	f00a fda5 	bl	800fe44 <RCC_APB2PeriphResetCmd>
  
  /* Release all ADCs from reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, DISABLE);
 80052fa:	f44f 7080 	mov.w	r0, #256	; 0x100
 80052fe:	2100      	movs	r1, #0
 8005300:	f00a fda0 	bl	800fe44 <RCC_APB2PeriphResetCmd>
}
 8005304:	bd80      	pop	{r7, pc}
 8005306:	bf00      	nop

08005308 <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 8005308:	b480      	push	{r7}
 800530a:	b085      	sub	sp, #20
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
 8005310:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 8005312:	2300      	movs	r3, #0
 8005314:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
 8005316:	2300      	movs	r3, #0
 8005318:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
  
  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	60fb      	str	r3, [r7, #12]
  
  /* Clear RES and SCAN bits */
  tmpreg1 &= CR1_CLEAR_MASK;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8005326:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800532a:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	791b      	ldrb	r3, [r3, #4]
 8005330:	021a      	lsls	r2, r3, #8
                                   ADC_InitStruct->ADC_Resolution);
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	681b      	ldr	r3, [r3, #0]
  tmpreg1 &= CR1_CLEAR_MASK;
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 8005336:	4313      	orrs	r3, r2
 8005338:	68fa      	ldr	r2, [r7, #12]
 800533a:	4313      	orrs	r3, r2
 800533c:	60fb      	str	r3, [r7, #12]
                                   ADC_InitStruct->ADC_Resolution);
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	68fa      	ldr	r2, [r7, #12]
 8005342:	605a      	str	r2, [r3, #4]
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	689b      	ldr	r3, [r3, #8]
 8005348:	60fb      	str	r3, [r7, #12]
  
  /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_MASK;
 800534a:	68fa      	ldr	r2, [r7, #12]
 800534c:	4b17      	ldr	r3, [pc, #92]	; (80053ac <ADC_Init+0xa4>)
 800534e:	4013      	ands	r3, r2
 8005350:	60fb      	str	r3, [r7, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	691a      	ldr	r2, [r3, #16]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	68db      	ldr	r3, [r3, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 800535a:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConv | 
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	689b      	ldr	r3, [r3, #8]
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 8005360:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	795b      	ldrb	r3, [r3, #5]
 8005366:	005b      	lsls	r3, r3, #1
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8005368:	4313      	orrs	r3, r2
 800536a:	68fa      	ldr	r2, [r7, #12]
 800536c:	4313      	orrs	r3, r2
 800536e:	60fb      	str	r3, [r7, #12]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
                        
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	68fa      	ldr	r2, [r7, #12]
 8005374:	609a      	str	r2, [r3, #8]
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800537a:	60fb      	str	r3, [r7, #12]
  
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005382:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	7d1b      	ldrb	r3, [r3, #20]
 8005388:	3b01      	subs	r3, #1
 800538a:	b2da      	uxtb	r2, r3
 800538c:	7afb      	ldrb	r3, [r7, #11]
 800538e:	4313      	orrs	r3, r2
 8005390:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 8005392:	7afb      	ldrb	r3, [r7, #11]
 8005394:	051b      	lsls	r3, r3, #20
 8005396:	68fa      	ldr	r2, [r7, #12]
 8005398:	4313      	orrs	r3, r2
 800539a:	60fb      	str	r3, [r7, #12]
  
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	68fa      	ldr	r2, [r7, #12]
 80053a0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80053a2:	3714      	adds	r7, #20
 80053a4:	46bd      	mov	sp, r7
 80053a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053aa:	4770      	bx	lr
 80053ac:	c0fff7fd 	.word	0xc0fff7fd

080053b0 <ADC_StructInit>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b083      	sub	sp, #12
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  /* Initialize the ADC_Mode member */
  ADC_InitStruct->ADC_Resolution = ADC_Resolution_12b;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2200      	movs	r2, #0
 80053bc:	601a      	str	r2, [r3, #0]

  /* initialize the ADC_ScanConvMode member */
  ADC_InitStruct->ADC_ScanConvMode = DISABLE;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	711a      	strb	r2, [r3, #4]

  /* Initialize the ADC_ContinuousConvMode member */
  ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2200      	movs	r2, #0
 80053c8:	715a      	strb	r2, [r3, #5]

  /* Initialize the ADC_ExternalTrigConvEdge member */
  ADC_InitStruct->ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2200      	movs	r2, #0
 80053ce:	609a      	str	r2, [r3, #8]

  /* Initialize the ADC_ExternalTrigConv member */
  ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2200      	movs	r2, #0
 80053d4:	60da      	str	r2, [r3, #12]

  /* Initialize the ADC_DataAlign member */
  ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2200      	movs	r2, #0
 80053da:	611a      	str	r2, [r3, #16]

  /* Initialize the ADC_NbrOfConversion member */
  ADC_InitStruct->ADC_NbrOfConversion = 1;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2201      	movs	r2, #1
 80053e0:	751a      	strb	r2, [r3, #20]
}
 80053e2:	370c      	adds	r7, #12
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr

080053ec <ADC_CommonInit>:
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure 
  *         that contains the configuration information for  All ADCs peripherals.
  * @retval None
  */
void ADC_CommonInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b085      	sub	sp, #20
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0;
 80053f4:	2300      	movs	r3, #0
 80053f6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_PRESCALER(ADC_CommonInitStruct->ADC_Prescaler));
  assert_param(IS_ADC_DMA_ACCESS_MODE(ADC_CommonInitStruct->ADC_DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(ADC_CommonInitStruct->ADC_TwoSamplingDelay));
  /*---------------------------- ADC CCR Configuration -----------------*/
  /* Get the ADC CCR value */
  tmpreg1 = ADC->CCR;
 80053f8:	4b0e      	ldr	r3, [pc, #56]	; (8005434 <ADC_CommonInit+0x48>)
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	60fb      	str	r3, [r7, #12]
  
  /* Clear MULTI, DELAY, DMA and ADCPRE bits */
  tmpreg1 &= CR_CLEAR_MASK;
 80053fe:	68fa      	ldr	r2, [r7, #12]
 8005400:	4b0d      	ldr	r3, [pc, #52]	; (8005438 <ADC_CommonInit+0x4c>)
 8005402:	4013      	ands	r3, r2
 8005404:	60fb      	str	r3, [r7, #12]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681a      	ldr	r2, [r3, #0]
                        ADC_CommonInitStruct->ADC_Prescaler | 
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	685b      	ldr	r3, [r3, #4]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 800540e:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	689b      	ldr	r3, [r3, #8]
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
                        ADC_CommonInitStruct->ADC_Prescaler | 
 8005414:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	68db      	ldr	r3, [r3, #12]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 800541a:	4313      	orrs	r3, r2
 800541c:	68fa      	ldr	r2, [r7, #12]
 800541e:	4313      	orrs	r3, r2
 8005420:	60fb      	str	r3, [r7, #12]
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
                        
  /* Write to ADC CCR */
  ADC->CCR = tmpreg1;
 8005422:	4b04      	ldr	r3, [pc, #16]	; (8005434 <ADC_CommonInit+0x48>)
 8005424:	68fa      	ldr	r2, [r7, #12]
 8005426:	605a      	str	r2, [r3, #4]
}
 8005428:	3714      	adds	r7, #20
 800542a:	46bd      	mov	sp, r7
 800542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005430:	4770      	bx	lr
 8005432:	bf00      	nop
 8005434:	40012300 	.word	0x40012300
 8005438:	fffc30e0 	.word	0xfffc30e0

0800543c <ADC_CommonStructInit>:
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void ADC_CommonStructInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 800543c:	b480      	push	{r7}
 800543e:	b083      	sub	sp, #12
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  /* Initialize the ADC_Mode member */
  ADC_CommonInitStruct->ADC_Mode = ADC_Mode_Independent;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2200      	movs	r2, #0
 8005448:	601a      	str	r2, [r3, #0]

  /* initialize the ADC_Prescaler member */
  ADC_CommonInitStruct->ADC_Prescaler = ADC_Prescaler_Div2;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2200      	movs	r2, #0
 800544e:	605a      	str	r2, [r3, #4]

  /* Initialize the ADC_DMAAccessMode member */
  ADC_CommonInitStruct->ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2200      	movs	r2, #0
 8005454:	609a      	str	r2, [r3, #8]

  /* Initialize the ADC_TwoSamplingDelay member */
  ADC_CommonInitStruct->ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2200      	movs	r2, #0
 800545a:	60da      	str	r2, [r3, #12]
}
 800545c:	370c      	adds	r7, #12
 800545e:	46bd      	mov	sp, r7
 8005460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005464:	4770      	bx	lr
 8005466:	bf00      	nop

08005468 <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8005468:	b480      	push	{r7}
 800546a:	b083      	sub	sp, #12
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
 8005470:	460b      	mov	r3, r1
 8005472:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8005474:	78fb      	ldrb	r3, [r7, #3]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d006      	beq.n	8005488 <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	689b      	ldr	r3, [r3, #8]
 800547e:	f043 0201 	orr.w	r2, r3, #1
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	609a      	str	r2, [r3, #8]
 8005486:	e005      	b.n	8005494 <ADC_Cmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	f023 0201 	bic.w	r2, r3, #1
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	609a      	str	r2, [r3, #8]
  }
}
 8005494:	370c      	adds	r7, #12
 8005496:	46bd      	mov	sp, r7
 8005498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549c:	4770      	bx	lr
 800549e:	bf00      	nop

080054a0 <ADC_AnalogWatchdogCmd>:
  *            @arg ADC_AnalogWatchdog_AllRegAllInjecEnable: Analog watchdog on all regular and injected channels
  *            @arg ADC_AnalogWatchdog_None: No channel guarded by the analog watchdog
  * @retval None	  
  */
void ADC_AnalogWatchdogCmd(ADC_TypeDef* ADCx, uint32_t ADC_AnalogWatchdog)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b085      	sub	sp, #20
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
 80054a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80054aa:	2300      	movs	r3, #0
 80054ac:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_ANALOG_WATCHDOG(ADC_AnalogWatchdog));
  
  /* Get the old register value */
  tmpreg = ADCx->CR1;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	60fb      	str	r3, [r7, #12]
  
  /* Clear AWDEN, JAWDEN and AWDSGL bits */
  tmpreg &= CR1_AWDMode_RESET;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80054ba:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80054be:	60fb      	str	r3, [r7, #12]
  
  /* Set the analog watchdog enable mode */
  tmpreg |= ADC_AnalogWatchdog;
 80054c0:	68fa      	ldr	r2, [r7, #12]
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	4313      	orrs	r3, r2
 80054c6:	60fb      	str	r3, [r7, #12]
  
  /* Store the new register value */
  ADCx->CR1 = tmpreg;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	68fa      	ldr	r2, [r7, #12]
 80054cc:	605a      	str	r2, [r3, #4]
}
 80054ce:	3714      	adds	r7, #20
 80054d0:	46bd      	mov	sp, r7
 80054d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d6:	4770      	bx	lr

080054d8 <ADC_AnalogWatchdogThresholdsConfig>:
  *          This parameter must be a 12-bit value.
  * @retval None
  */
void ADC_AnalogWatchdogThresholdsConfig(ADC_TypeDef* ADCx, uint16_t HighThreshold,
                                        uint16_t LowThreshold)
{
 80054d8:	b480      	push	{r7}
 80054da:	b083      	sub	sp, #12
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	4613      	mov	r3, r2
 80054e2:	460a      	mov	r2, r1
 80054e4:	807a      	strh	r2, [r7, #2]
 80054e6:	803b      	strh	r3, [r7, #0]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_THRESHOLD(HighThreshold));
  assert_param(IS_ADC_THRESHOLD(LowThreshold));
  
  /* Set the ADCx high threshold */
  ADCx->HTR = HighThreshold;
 80054e8:	887a      	ldrh	r2, [r7, #2]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Set the ADCx low threshold */
  ADCx->LTR = LowThreshold;
 80054ee:	883a      	ldrh	r2, [r7, #0]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80054f4:	370c      	adds	r7, #12
 80054f6:	46bd      	mov	sp, r7
 80054f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fc:	4770      	bx	lr
 80054fe:	bf00      	nop

08005500 <ADC_AnalogWatchdogSingleChannelConfig>:
  *            @arg ADC_Channel_17: ADC Channel17 selected
  *            @arg ADC_Channel_18: ADC Channel18 selected
  * @retval None
  */
void ADC_AnalogWatchdogSingleChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel)
{
 8005500:	b480      	push	{r7}
 8005502:	b085      	sub	sp, #20
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
 8005508:	460b      	mov	r3, r1
 800550a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg = 0;
 800550c:	2300      	movs	r3, #0
 800550e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  
  /* Get the old register value */
  tmpreg = ADCx->CR1;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	60fb      	str	r3, [r7, #12]
  
  /* Clear the Analog watchdog channel select bits */
  tmpreg &= CR1_AWDCH_RESET;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	f023 031f 	bic.w	r3, r3, #31
 800551c:	60fb      	str	r3, [r7, #12]
  
  /* Set the Analog watchdog channel */
  tmpreg |= ADC_Channel;
 800551e:	78fb      	ldrb	r3, [r7, #3]
 8005520:	68fa      	ldr	r2, [r7, #12]
 8005522:	4313      	orrs	r3, r2
 8005524:	60fb      	str	r3, [r7, #12]
  
  /* Store the new register value */
  ADCx->CR1 = tmpreg;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	68fa      	ldr	r2, [r7, #12]
 800552a:	605a      	str	r2, [r3, #4]
}
 800552c:	3714      	adds	r7, #20
 800552e:	46bd      	mov	sp, r7
 8005530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005534:	4770      	bx	lr
 8005536:	bf00      	nop

08005538 <ADC_TempSensorVrefintCmd>:
  * @param  NewState: new state of the temperature sensor and Vrefint channels.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_TempSensorVrefintCmd(FunctionalState NewState)                
{
 8005538:	b480      	push	{r7}
 800553a:	b083      	sub	sp, #12
 800553c:	af00      	add	r7, sp, #0
 800553e:	4603      	mov	r3, r0
 8005540:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8005542:	79fb      	ldrb	r3, [r7, #7]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d006      	beq.n	8005556 <ADC_TempSensorVrefintCmd+0x1e>
  {
    /* Enable the temperature sensor and Vrefint channel*/
    ADC->CCR |= (uint32_t)ADC_CCR_TSVREFE;
 8005548:	4b08      	ldr	r3, [pc, #32]	; (800556c <ADC_TempSensorVrefintCmd+0x34>)
 800554a:	4a08      	ldr	r2, [pc, #32]	; (800556c <ADC_TempSensorVrefintCmd+0x34>)
 800554c:	6852      	ldr	r2, [r2, #4]
 800554e:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8005552:	605a      	str	r2, [r3, #4]
 8005554:	e005      	b.n	8005562 <ADC_TempSensorVrefintCmd+0x2a>
  }
  else
  {
    /* Disable the temperature sensor and Vrefint channel*/
    ADC->CCR &= (uint32_t)(~ADC_CCR_TSVREFE);
 8005556:	4b05      	ldr	r3, [pc, #20]	; (800556c <ADC_TempSensorVrefintCmd+0x34>)
 8005558:	4a04      	ldr	r2, [pc, #16]	; (800556c <ADC_TempSensorVrefintCmd+0x34>)
 800555a:	6852      	ldr	r2, [r2, #4]
 800555c:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8005560:	605a      	str	r2, [r3, #4]
  }
}
 8005562:	370c      	adds	r7, #12
 8005564:	46bd      	mov	sp, r7
 8005566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556a:	4770      	bx	lr
 800556c:	40012300 	.word	0x40012300

08005570 <ADC_VBATCmd>:
  * @param  NewState: new state of the VBAT channel.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_VBATCmd(FunctionalState NewState)                             
{
 8005570:	b480      	push	{r7}
 8005572:	b083      	sub	sp, #12
 8005574:	af00      	add	r7, sp, #0
 8005576:	4603      	mov	r3, r0
 8005578:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800557a:	79fb      	ldrb	r3, [r7, #7]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d006      	beq.n	800558e <ADC_VBATCmd+0x1e>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= (uint32_t)ADC_CCR_VBATE;
 8005580:	4b08      	ldr	r3, [pc, #32]	; (80055a4 <ADC_VBATCmd+0x34>)
 8005582:	4a08      	ldr	r2, [pc, #32]	; (80055a4 <ADC_VBATCmd+0x34>)
 8005584:	6852      	ldr	r2, [r2, #4]
 8005586:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800558a:	605a      	str	r2, [r3, #4]
 800558c:	e005      	b.n	800559a <ADC_VBATCmd+0x2a>
  }
  else
  {
    /* Disable the VBAT channel*/
    ADC->CCR &= (uint32_t)(~ADC_CCR_VBATE);
 800558e:	4b05      	ldr	r3, [pc, #20]	; (80055a4 <ADC_VBATCmd+0x34>)
 8005590:	4a04      	ldr	r2, [pc, #16]	; (80055a4 <ADC_VBATCmd+0x34>)
 8005592:	6852      	ldr	r2, [r2, #4]
 8005594:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 8005598:	605a      	str	r2, [r3, #4]
  }
}
 800559a:	370c      	adds	r7, #12
 800559c:	46bd      	mov	sp, r7
 800559e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a2:	4770      	bx	lr
 80055a4:	40012300 	.word	0x40012300

080055a8 <ADC_RegularChannelConfig>:
  *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
  *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b085      	sub	sp, #20
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
 80055b0:	70f9      	strb	r1, [r7, #3]
 80055b2:	70ba      	strb	r2, [r7, #2]
 80055b4:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 80055b6:	2300      	movs	r3, #0
 80055b8:	60fb      	str	r3, [r7, #12]
 80055ba:	2300      	movs	r3, #0
 80055bc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 80055be:	78fb      	ldrb	r3, [r7, #3]
 80055c0:	2b09      	cmp	r3, #9
 80055c2:	d923      	bls.n	800560c <ADC_RegularChannelConfig+0x64>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	68db      	ldr	r3, [r3, #12]
 80055c8:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
 80055ca:	78fb      	ldrb	r3, [r7, #3]
 80055cc:	f1a3 020a 	sub.w	r2, r3, #10
 80055d0:	4613      	mov	r3, r2
 80055d2:	005b      	lsls	r3, r3, #1
 80055d4:	4413      	add	r3, r2
 80055d6:	2207      	movs	r2, #7
 80055d8:	fa02 f303 	lsl.w	r3, r2, r3
 80055dc:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	43db      	mvns	r3, r3
 80055e2:	68fa      	ldr	r2, [r7, #12]
 80055e4:	4013      	ands	r3, r2
 80055e6:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 80055e8:	7879      	ldrb	r1, [r7, #1]
 80055ea:	78fb      	ldrb	r3, [r7, #3]
 80055ec:	f1a3 020a 	sub.w	r2, r3, #10
 80055f0:	4613      	mov	r3, r2
 80055f2:	005b      	lsls	r3, r3, #1
 80055f4:	4413      	add	r3, r2
 80055f6:	fa01 f303 	lsl.w	r3, r1, r3
 80055fa:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 80055fc:	68fa      	ldr	r2, [r7, #12]
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	4313      	orrs	r3, r2
 8005602:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	68fa      	ldr	r2, [r7, #12]
 8005608:	60da      	str	r2, [r3, #12]
 800560a:	e01e      	b.n	800564a <ADC_RegularChannelConfig+0xa2>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	691b      	ldr	r3, [r3, #16]
 8005610:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 8005612:	78fa      	ldrb	r2, [r7, #3]
 8005614:	4613      	mov	r3, r2
 8005616:	005b      	lsls	r3, r3, #1
 8005618:	4413      	add	r3, r2
 800561a:	2207      	movs	r2, #7
 800561c:	fa02 f303 	lsl.w	r3, r2, r3
 8005620:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	43db      	mvns	r3, r3
 8005626:	68fa      	ldr	r2, [r7, #12]
 8005628:	4013      	ands	r3, r2
 800562a:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 800562c:	7879      	ldrb	r1, [r7, #1]
 800562e:	78fa      	ldrb	r2, [r7, #3]
 8005630:	4613      	mov	r3, r2
 8005632:	005b      	lsls	r3, r3, #1
 8005634:	4413      	add	r3, r2
 8005636:	fa01 f303 	lsl.w	r3, r1, r3
 800563a:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 800563c:	68fa      	ldr	r2, [r7, #12]
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	4313      	orrs	r3, r2
 8005642:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	68fa      	ldr	r2, [r7, #12]
 8005648:	611a      	str	r2, [r3, #16]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 800564a:	78bb      	ldrb	r3, [r7, #2]
 800564c:	2b06      	cmp	r3, #6
 800564e:	d821      	bhi.n	8005694 <ADC_RegularChannelConfig+0xec>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005654:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
 8005656:	78bb      	ldrb	r3, [r7, #2]
 8005658:	1e5a      	subs	r2, r3, #1
 800565a:	4613      	mov	r3, r2
 800565c:	009b      	lsls	r3, r3, #2
 800565e:	4413      	add	r3, r2
 8005660:	221f      	movs	r2, #31
 8005662:	fa02 f303 	lsl.w	r3, r2, r3
 8005666:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	43db      	mvns	r3, r3
 800566c:	68fa      	ldr	r2, [r7, #12]
 800566e:	4013      	ands	r3, r2
 8005670:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 8005672:	78f9      	ldrb	r1, [r7, #3]
 8005674:	78bb      	ldrb	r3, [r7, #2]
 8005676:	1e5a      	subs	r2, r3, #1
 8005678:	4613      	mov	r3, r2
 800567a:	009b      	lsls	r3, r3, #2
 800567c:	4413      	add	r3, r2
 800567e:	fa01 f303 	lsl.w	r3, r1, r3
 8005682:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8005684:	68fa      	ldr	r2, [r7, #12]
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	4313      	orrs	r3, r2
 800568a:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	68fa      	ldr	r2, [r7, #12]
 8005690:	635a      	str	r2, [r3, #52]	; 0x34
 8005692:	e047      	b.n	8005724 <ADC_RegularChannelConfig+0x17c>
  }
  /* For Rank 7 to 12 */
  else if (Rank < 13)
 8005694:	78bb      	ldrb	r3, [r7, #2]
 8005696:	2b0c      	cmp	r3, #12
 8005698:	d821      	bhi.n	80056de <ADC_RegularChannelConfig+0x136>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800569e:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
 80056a0:	78bb      	ldrb	r3, [r7, #2]
 80056a2:	1fda      	subs	r2, r3, #7
 80056a4:	4613      	mov	r3, r2
 80056a6:	009b      	lsls	r3, r3, #2
 80056a8:	4413      	add	r3, r2
 80056aa:	221f      	movs	r2, #31
 80056ac:	fa02 f303 	lsl.w	r3, r2, r3
 80056b0:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	43db      	mvns	r3, r3
 80056b6:	68fa      	ldr	r2, [r7, #12]
 80056b8:	4013      	ands	r3, r2
 80056ba:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 80056bc:	78f9      	ldrb	r1, [r7, #3]
 80056be:	78bb      	ldrb	r3, [r7, #2]
 80056c0:	1fda      	subs	r2, r3, #7
 80056c2:	4613      	mov	r3, r2
 80056c4:	009b      	lsls	r3, r3, #2
 80056c6:	4413      	add	r3, r2
 80056c8:	fa01 f303 	lsl.w	r3, r1, r3
 80056cc:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 80056ce:	68fa      	ldr	r2, [r7, #12]
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	4313      	orrs	r3, r2
 80056d4:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR2 = tmpreg1;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	68fa      	ldr	r2, [r7, #12]
 80056da:	631a      	str	r2, [r3, #48]	; 0x30
 80056dc:	e022      	b.n	8005724 <ADC_RegularChannelConfig+0x17c>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056e2:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
 80056e4:	78bb      	ldrb	r3, [r7, #2]
 80056e6:	f1a3 020d 	sub.w	r2, r3, #13
 80056ea:	4613      	mov	r3, r2
 80056ec:	009b      	lsls	r3, r3, #2
 80056ee:	4413      	add	r3, r2
 80056f0:	221f      	movs	r2, #31
 80056f2:	fa02 f303 	lsl.w	r3, r2, r3
 80056f6:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	43db      	mvns	r3, r3
 80056fc:	68fa      	ldr	r2, [r7, #12]
 80056fe:	4013      	ands	r3, r2
 8005700:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 8005702:	78f9      	ldrb	r1, [r7, #3]
 8005704:	78bb      	ldrb	r3, [r7, #2]
 8005706:	f1a3 020d 	sub.w	r2, r3, #13
 800570a:	4613      	mov	r3, r2
 800570c:	009b      	lsls	r3, r3, #2
 800570e:	4413      	add	r3, r2
 8005710:	fa01 f303 	lsl.w	r3, r1, r3
 8005714:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8005716:	68fa      	ldr	r2, [r7, #12]
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	4313      	orrs	r3, r2
 800571c:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	68fa      	ldr	r2, [r7, #12]
 8005722:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8005724:	3714      	adds	r7, #20
 8005726:	46bd      	mov	sp, r7
 8005728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572c:	4770      	bx	lr
 800572e:	bf00      	nop

08005730 <ADC_SoftwareStartConv>:
  * @brief  Enables the selected ADC software start conversion of the regular channels.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_SoftwareStartConv(ADC_TypeDef* ADCx)
{
 8005730:	b480      	push	{r7}
 8005732:	b083      	sub	sp, #12
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Enable the selected ADC conversion for regular group */
  ADCx->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	609a      	str	r2, [r3, #8]
}
 8005744:	370c      	adds	r7, #12
 8005746:	46bd      	mov	sp, r7
 8005748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574c:	4770      	bx	lr
 800574e:	bf00      	nop

08005750 <ADC_GetSoftwareStartConvStatus>:
  * @brief  Gets the selected ADC Software start regular conversion Status.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The new state of ADC software start conversion (SET or RESET).
  */
FlagStatus ADC_GetSoftwareStartConvStatus(ADC_TypeDef* ADCx)
{
 8005750:	b480      	push	{r7}
 8005752:	b085      	sub	sp, #20
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8005758:	2300      	movs	r3, #0
 800575a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Check the status of SWSTART bit */
  if ((ADCx->CR2 & ADC_CR2_SWSTART) != (uint32_t)RESET)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	689b      	ldr	r3, [r3, #8]
 8005760:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005764:	2b00      	cmp	r3, #0
 8005766:	d002      	beq.n	800576e <ADC_GetSoftwareStartConvStatus+0x1e>
  {
    /* SWSTART bit is set */
    bitstatus = SET;
 8005768:	2301      	movs	r3, #1
 800576a:	73fb      	strb	r3, [r7, #15]
 800576c:	e001      	b.n	8005772 <ADC_GetSoftwareStartConvStatus+0x22>
  }
  else
  {
    /* SWSTART bit is reset */
    bitstatus = RESET;
 800576e:	2300      	movs	r3, #0
 8005770:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return the SWSTART bit status */
  return  bitstatus;
 8005772:	7bfb      	ldrb	r3, [r7, #15]
}
 8005774:	4618      	mov	r0, r3
 8005776:	3714      	adds	r7, #20
 8005778:	46bd      	mov	sp, r7
 800577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577e:	4770      	bx	lr

08005780 <ADC_EOCOnEachRegularChannelCmd>:
  * @param  NewState: new state of the selected ADC EOC flag rising
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_EOCOnEachRegularChannelCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8005780:	b480      	push	{r7}
 8005782:	b083      	sub	sp, #12
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
 8005788:	460b      	mov	r3, r1
 800578a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800578c:	78fb      	ldrb	r3, [r7, #3]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d006      	beq.n	80057a0 <ADC_EOCOnEachRegularChannelCmd+0x20>
  {
    /* Enable the selected ADC EOC rising on each regular channel conversion */
    ADCx->CR2 |= (uint32_t)ADC_CR2_EOCS;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	609a      	str	r2, [r3, #8]
 800579e:	e005      	b.n	80057ac <ADC_EOCOnEachRegularChannelCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC EOC rising on each regular channel conversion */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_EOCS);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	609a      	str	r2, [r3, #8]
  }
}
 80057ac:	370c      	adds	r7, #12
 80057ae:	46bd      	mov	sp, r7
 80057b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b4:	4770      	bx	lr
 80057b6:	bf00      	nop

080057b8 <ADC_ContinuousModeCmd>:
  * @param  NewState: new state of the selected ADC continuous conversion mode
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_ContinuousModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b083      	sub	sp, #12
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
 80057c0:	460b      	mov	r3, r1
 80057c2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80057c4:	78fb      	ldrb	r3, [r7, #3]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d006      	beq.n	80057d8 <ADC_ContinuousModeCmd+0x20>
  {
    /* Enable the selected ADC continuous conversion mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_CONT;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	689b      	ldr	r3, [r3, #8]
 80057ce:	f043 0202 	orr.w	r2, r3, #2
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	609a      	str	r2, [r3, #8]
 80057d6:	e005      	b.n	80057e4 <ADC_ContinuousModeCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC continuous conversion mode */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_CONT);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	689b      	ldr	r3, [r3, #8]
 80057dc:	f023 0202 	bic.w	r2, r3, #2
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	609a      	str	r2, [r3, #8]
  }
}
 80057e4:	370c      	adds	r7, #12
 80057e6:	46bd      	mov	sp, r7
 80057e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ec:	4770      	bx	lr
 80057ee:	bf00      	nop

080057f0 <ADC_DiscModeChannelCountConfig>:
  * @param  Number: specifies the discontinuous mode regular channel count value.
  *          This number must be between 1 and 8.
  * @retval None
  */
void ADC_DiscModeChannelCountConfig(ADC_TypeDef* ADCx, uint8_t Number)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b085      	sub	sp, #20
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
 80057f8:	460b      	mov	r3, r1
 80057fa:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg1 = 0;
 80057fc:	2300      	movs	r3, #0
 80057fe:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg2 = 0;
 8005800:	2300      	movs	r3, #0
 8005802:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_REGULAR_DISC_NUMBER(Number));
  
  /* Get the old register value */
  tmpreg1 = ADCx->CR1;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	60fb      	str	r3, [r7, #12]
  
  /* Clear the old discontinuous mode channel count */
  tmpreg1 &= CR1_DISCNUM_RESET;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8005810:	60fb      	str	r3, [r7, #12]
  
  /* Set the discontinuous mode channel count */
  tmpreg2 = Number - 1;
 8005812:	78fb      	ldrb	r3, [r7, #3]
 8005814:	3b01      	subs	r3, #1
 8005816:	60bb      	str	r3, [r7, #8]
  tmpreg1 |= tmpreg2 << 13;
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	035b      	lsls	r3, r3, #13
 800581c:	68fa      	ldr	r2, [r7, #12]
 800581e:	4313      	orrs	r3, r2
 8005820:	60fb      	str	r3, [r7, #12]
  
  /* Store the new register value */
  ADCx->CR1 = tmpreg1;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	68fa      	ldr	r2, [r7, #12]
 8005826:	605a      	str	r2, [r3, #4]
}
 8005828:	3714      	adds	r7, #20
 800582a:	46bd      	mov	sp, r7
 800582c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005830:	4770      	bx	lr
 8005832:	bf00      	nop

08005834 <ADC_DiscModeCmd>:
  *         regular group channel.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8005834:	b480      	push	{r7}
 8005836:	b083      	sub	sp, #12
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
 800583c:	460b      	mov	r3, r1
 800583e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8005840:	78fb      	ldrb	r3, [r7, #3]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d006      	beq.n	8005854 <ADC_DiscModeCmd+0x20>
  {
    /* Enable the selected ADC regular discontinuous mode */
    ADCx->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	605a      	str	r2, [r3, #4]
 8005852:	e005      	b.n	8005860 <ADC_DiscModeCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    ADCx->CR1 &= (uint32_t)(~ADC_CR1_DISCEN);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	605a      	str	r2, [r3, #4]
  }
}
 8005860:	370c      	adds	r7, #12
 8005862:	46bd      	mov	sp, r7
 8005864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005868:	4770      	bx	lr
 800586a:	bf00      	nop

0800586c <ADC_GetConversionValue>:
  * @brief  Returns the last ADCx conversion result data for regular channel.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The Data conversion value.
  */
uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
{
 800586c:	b480      	push	{r7}
 800586e:	b083      	sub	sp, #12
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Return the selected ADC conversion value */
  return (uint16_t) ADCx->DR;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005878:	b29b      	uxth	r3, r3
}
 800587a:	4618      	mov	r0, r3
 800587c:	370c      	adds	r7, #12
 800587e:	46bd      	mov	sp, r7
 8005880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005884:	4770      	bx	lr
 8005886:	bf00      	nop

08005888 <ADC_GetMultiModeConversionValue>:
  * @note   In triple mode, the value returned by this function is as following
  *           Data[15:0] : these bits contain alternatively the regular data of ADC1, ADC3 and ADC2.
  *           Data[31:16]: these bits contain alternatively the regular data of ADC2, ADC1 and ADC3.           
  */
uint32_t ADC_GetMultiModeConversionValue(void)
{
 8005888:	b480      	push	{r7}
 800588a:	af00      	add	r7, sp, #0
  /* Return the multi mode conversion value */
  return (*(__IO uint32_t *) CDR_ADDRESS);
 800588c:	4b03      	ldr	r3, [pc, #12]	; (800589c <ADC_GetMultiModeConversionValue+0x14>)
 800588e:	681b      	ldr	r3, [r3, #0]
}
 8005890:	4618      	mov	r0, r3
 8005892:	46bd      	mov	sp, r7
 8005894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005898:	4770      	bx	lr
 800589a:	bf00      	nop
 800589c:	40012308 	.word	0x40012308

080058a0 <ADC_DMACmd>:
  * @param  NewState: new state of the selected ADC DMA transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMACmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b083      	sub	sp, #12
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
 80058a8:	460b      	mov	r3, r1
 80058aa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80058ac:	78fb      	ldrb	r3, [r7, #3]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d006      	beq.n	80058c0 <ADC_DMACmd+0x20>
  {
    /* Enable the selected ADC DMA request */
    ADCx->CR2 |= (uint32_t)ADC_CR2_DMA;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	689b      	ldr	r3, [r3, #8]
 80058b6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	609a      	str	r2, [r3, #8]
 80058be:	e005      	b.n	80058cc <ADC_DMACmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC DMA request */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DMA);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	689b      	ldr	r3, [r3, #8]
 80058c4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	609a      	str	r2, [r3, #8]
  }
}
 80058cc:	370c      	adds	r7, #12
 80058ce:	46bd      	mov	sp, r7
 80058d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d4:	4770      	bx	lr
 80058d6:	bf00      	nop

080058d8 <ADC_DMARequestAfterLastTransferCmd>:
  * @param  NewState: new state of the selected ADC DMA request after last transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMARequestAfterLastTransferCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 80058d8:	b480      	push	{r7}
 80058da:	b083      	sub	sp, #12
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
 80058e0:	460b      	mov	r3, r1
 80058e2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80058e4:	78fb      	ldrb	r3, [r7, #3]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d006      	beq.n	80058f8 <ADC_DMARequestAfterLastTransferCmd+0x20>
  {
    /* Enable the selected ADC DMA request after last transfer */
    ADCx->CR2 |= (uint32_t)ADC_CR2_DDS;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	689b      	ldr	r3, [r3, #8]
 80058ee:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	609a      	str	r2, [r3, #8]
 80058f6:	e005      	b.n	8005904 <ADC_DMARequestAfterLastTransferCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC DMA request after last transfer */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DDS);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	689b      	ldr	r3, [r3, #8]
 80058fc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	609a      	str	r2, [r3, #8]
  }
}
 8005904:	370c      	adds	r7, #12
 8005906:	46bd      	mov	sp, r7
 8005908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590c:	4770      	bx	lr
 800590e:	bf00      	nop

08005910 <ADC_MultiModeDMARequestAfterLastTransferCmd>:
  *         by ADC_CommonInitStruct.ADC_DMAAccessMode structure member) is 
  *          ADC_DMAAccessMode_1, ADC_DMAAccessMode_2 or ADC_DMAAccessMode_3.     
  * @retval None
  */
void ADC_MultiModeDMARequestAfterLastTransferCmd(FunctionalState NewState)
{
 8005910:	b480      	push	{r7}
 8005912:	b083      	sub	sp, #12
 8005914:	af00      	add	r7, sp, #0
 8005916:	4603      	mov	r3, r0
 8005918:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800591a:	79fb      	ldrb	r3, [r7, #7]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d006      	beq.n	800592e <ADC_MultiModeDMARequestAfterLastTransferCmd+0x1e>
  {
    /* Enable the selected ADC DMA request after last transfer */
    ADC->CCR |= (uint32_t)ADC_CCR_DDS;
 8005920:	4b08      	ldr	r3, [pc, #32]	; (8005944 <ADC_MultiModeDMARequestAfterLastTransferCmd+0x34>)
 8005922:	4a08      	ldr	r2, [pc, #32]	; (8005944 <ADC_MultiModeDMARequestAfterLastTransferCmd+0x34>)
 8005924:	6852      	ldr	r2, [r2, #4]
 8005926:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800592a:	605a      	str	r2, [r3, #4]
 800592c:	e005      	b.n	800593a <ADC_MultiModeDMARequestAfterLastTransferCmd+0x2a>
  }
  else
  {
    /* Disable the selected ADC DMA request after last transfer */
    ADC->CCR &= (uint32_t)(~ADC_CCR_DDS);
 800592e:	4b05      	ldr	r3, [pc, #20]	; (8005944 <ADC_MultiModeDMARequestAfterLastTransferCmd+0x34>)
 8005930:	4a04      	ldr	r2, [pc, #16]	; (8005944 <ADC_MultiModeDMARequestAfterLastTransferCmd+0x34>)
 8005932:	6852      	ldr	r2, [r2, #4]
 8005934:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005938:	605a      	str	r2, [r3, #4]
  }
}
 800593a:	370c      	adds	r7, #12
 800593c:	46bd      	mov	sp, r7
 800593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005942:	4770      	bx	lr
 8005944:	40012300 	.word	0x40012300

08005948 <ADC_InjectedChannelConfig>:
  *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
  *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
  * @retval None
  */
void ADC_InjectedChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 8005948:	b480      	push	{r7}
 800594a:	b087      	sub	sp, #28
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
 8005950:	70f9      	strb	r1, [r7, #3]
 8005952:	70ba      	strb	r2, [r7, #2]
 8005954:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0, tmpreg3 = 0;
 8005956:	2300      	movs	r3, #0
 8005958:	617b      	str	r3, [r7, #20]
 800595a:	2300      	movs	r3, #0
 800595c:	613b      	str	r3, [r7, #16]
 800595e:	2300      	movs	r3, #0
 8005960:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_INJECTED_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 8005962:	78fb      	ldrb	r3, [r7, #3]
 8005964:	2b09      	cmp	r3, #9
 8005966:	d923      	bls.n	80059b0 <ADC_InjectedChannelConfig+0x68>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	68db      	ldr	r3, [r3, #12]
 800596c:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3*(ADC_Channel - 10));
 800596e:	78fb      	ldrb	r3, [r7, #3]
 8005970:	f1a3 020a 	sub.w	r2, r3, #10
 8005974:	4613      	mov	r3, r2
 8005976:	005b      	lsls	r3, r3, #1
 8005978:	4413      	add	r3, r2
 800597a:	2207      	movs	r2, #7
 800597c:	fa02 f303 	lsl.w	r3, r2, r3
 8005980:	613b      	str	r3, [r7, #16]
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	43db      	mvns	r3, r3
 8005986:	697a      	ldr	r2, [r7, #20]
 8005988:	4013      	ands	r3, r2
 800598a:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3*(ADC_Channel - 10));
 800598c:	7879      	ldrb	r1, [r7, #1]
 800598e:	78fb      	ldrb	r3, [r7, #3]
 8005990:	f1a3 020a 	sub.w	r2, r3, #10
 8005994:	4613      	mov	r3, r2
 8005996:	005b      	lsls	r3, r3, #1
 8005998:	4413      	add	r3, r2
 800599a:	fa01 f303 	lsl.w	r3, r1, r3
 800599e:	613b      	str	r3, [r7, #16]
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 80059a0:	697a      	ldr	r2, [r7, #20]
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	4313      	orrs	r3, r2
 80059a6:	617b      	str	r3, [r7, #20]
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	697a      	ldr	r2, [r7, #20]
 80059ac:	60da      	str	r2, [r3, #12]
 80059ae:	e01e      	b.n	80059ee <ADC_InjectedChannelConfig+0xa6>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	691b      	ldr	r3, [r3, #16]
 80059b4:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 80059b6:	78fa      	ldrb	r2, [r7, #3]
 80059b8:	4613      	mov	r3, r2
 80059ba:	005b      	lsls	r3, r3, #1
 80059bc:	4413      	add	r3, r2
 80059be:	2207      	movs	r2, #7
 80059c0:	fa02 f303 	lsl.w	r3, r2, r3
 80059c4:	613b      	str	r3, [r7, #16]
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	43db      	mvns	r3, r3
 80059ca:	697a      	ldr	r2, [r7, #20]
 80059cc:	4013      	ands	r3, r2
 80059ce:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 80059d0:	7879      	ldrb	r1, [r7, #1]
 80059d2:	78fa      	ldrb	r2, [r7, #3]
 80059d4:	4613      	mov	r3, r2
 80059d6:	005b      	lsls	r3, r3, #1
 80059d8:	4413      	add	r3, r2
 80059da:	fa01 f303 	lsl.w	r3, r1, r3
 80059de:	613b      	str	r3, [r7, #16]
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 80059e0:	697a      	ldr	r2, [r7, #20]
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	4313      	orrs	r3, r2
 80059e6:	617b      	str	r3, [r7, #20]
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	697a      	ldr	r2, [r7, #20]
 80059ec:	611a      	str	r2, [r3, #16]
  }
  /* Rank configuration */
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059f2:	617b      	str	r3, [r7, #20]
  /* Get JL value: Number = JL+1 */
  tmpreg3 =  (tmpreg1 & JSQR_JL_SET)>> 20;
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80059fa:	0d1b      	lsrs	r3, r3, #20
 80059fc:	60fb      	str	r3, [r7, #12]
  /* Calculate the mask to clear: ((Rank-1)+(4-JL-1)) */
  tmpreg2 = JSQR_JSQ_SET << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	b2db      	uxtb	r3, r3
 8005a02:	78ba      	ldrb	r2, [r7, #2]
 8005a04:	1ad3      	subs	r3, r2, r3
 8005a06:	b2db      	uxtb	r3, r3
 8005a08:	3302      	adds	r3, #2
 8005a0a:	b2db      	uxtb	r3, r3
 8005a0c:	461a      	mov	r2, r3
 8005a0e:	4613      	mov	r3, r2
 8005a10:	009b      	lsls	r3, r3, #2
 8005a12:	4413      	add	r3, r2
 8005a14:	221f      	movs	r2, #31
 8005a16:	fa02 f303 	lsl.w	r3, r2, r3
 8005a1a:	613b      	str	r3, [r7, #16]
  /* Clear the old JSQx bits for the selected rank */
  tmpreg1 &= ~tmpreg2;
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	43db      	mvns	r3, r3
 8005a20:	697a      	ldr	r2, [r7, #20]
 8005a22:	4013      	ands	r3, r2
 8005a24:	617b      	str	r3, [r7, #20]
  /* Calculate the mask to set: ((Rank-1)+(4-JL-1)) */
  tmpreg2 = (uint32_t)ADC_Channel << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
 8005a26:	78f9      	ldrb	r1, [r7, #3]
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	b2db      	uxtb	r3, r3
 8005a2c:	78ba      	ldrb	r2, [r7, #2]
 8005a2e:	1ad3      	subs	r3, r2, r3
 8005a30:	b2db      	uxtb	r3, r3
 8005a32:	3302      	adds	r3, #2
 8005a34:	b2db      	uxtb	r3, r3
 8005a36:	461a      	mov	r2, r3
 8005a38:	4613      	mov	r3, r2
 8005a3a:	009b      	lsls	r3, r3, #2
 8005a3c:	4413      	add	r3, r2
 8005a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8005a42:	613b      	str	r3, [r7, #16]
  /* Set the JSQx bits for the selected rank */
  tmpreg1 |= tmpreg2;
 8005a44:	697a      	ldr	r2, [r7, #20]
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	617b      	str	r3, [r7, #20]
  /* Store the new register value */
  ADCx->JSQR = tmpreg1;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	697a      	ldr	r2, [r7, #20]
 8005a50:	639a      	str	r2, [r3, #56]	; 0x38
}
 8005a52:	371c      	adds	r7, #28
 8005a54:	46bd      	mov	sp, r7
 8005a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5a:	4770      	bx	lr

08005a5c <ADC_InjectedSequencerLengthConfig>:
  * @param  Length: The sequencer length. 
  *          This parameter must be a number between 1 to 4.
  * @retval None
  */
void ADC_InjectedSequencerLengthConfig(ADC_TypeDef* ADCx, uint8_t Length)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b085      	sub	sp, #20
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
 8005a64:	460b      	mov	r3, r1
 8005a66:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg1 = 0;
 8005a68:	2300      	movs	r3, #0
 8005a6a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg2 = 0;
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_LENGTH(Length));
  
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a74:	60fb      	str	r3, [r7, #12]
  
  /* Clear the old injected sequence length JL bits */
  tmpreg1 &= JSQR_JL_RESET;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005a7c:	60fb      	str	r3, [r7, #12]
  
  /* Set the injected sequence length JL bits */
  tmpreg2 = Length - 1; 
 8005a7e:	78fb      	ldrb	r3, [r7, #3]
 8005a80:	3b01      	subs	r3, #1
 8005a82:	60bb      	str	r3, [r7, #8]
  tmpreg1 |= tmpreg2 << 20;
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	051b      	lsls	r3, r3, #20
 8005a88:	68fa      	ldr	r2, [r7, #12]
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	60fb      	str	r3, [r7, #12]
  
  /* Store the new register value */
  ADCx->JSQR = tmpreg1;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	68fa      	ldr	r2, [r7, #12]
 8005a92:	639a      	str	r2, [r3, #56]	; 0x38
}
 8005a94:	3714      	adds	r7, #20
 8005a96:	46bd      	mov	sp, r7
 8005a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9c:	4770      	bx	lr
 8005a9e:	bf00      	nop

08005aa0 <ADC_SetInjectedOffset>:
  * @param  Offset: the offset value for the selected ADC injected channel
  *          This parameter must be a 12bit value.
  * @retval None
  */
void ADC_SetInjectedOffset(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel, uint16_t Offset)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b085      	sub	sp, #20
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
 8005aa8:	4613      	mov	r3, r2
 8005aaa:	460a      	mov	r2, r1
 8005aac:	70fa      	strb	r2, [r7, #3]
 8005aae:	803b      	strh	r3, [r7, #0]
    __IO uint32_t tmp = 0;
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));
  assert_param(IS_ADC_OFFSET(Offset));
  
  tmp = (uint32_t)ADCx;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	60fb      	str	r3, [r7, #12]
  tmp += ADC_InjectedChannel;
 8005ab8:	78fa      	ldrb	r2, [r7, #3]
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	4413      	add	r3, r2
 8005abe:	60fb      	str	r3, [r7, #12]
  
  /* Set the selected injected channel data offset */
 *(__IO uint32_t *) tmp = (uint32_t)Offset;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	883a      	ldrh	r2, [r7, #0]
 8005ac4:	601a      	str	r2, [r3, #0]
}
 8005ac6:	3714      	adds	r7, #20
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ace:	4770      	bx	lr

08005ad0 <ADC_ExternalTrigInjectedConvConfig>:
  *            @arg ADC_ExternalTrigInjecConv_T8_CC4: Timer8 capture compare4 selected 
  *            @arg ADC_ExternalTrigInjecConv_Ext_IT15: External interrupt line 15 event selected                          
  * @retval None
  */
void ADC_ExternalTrigInjectedConvConfig(ADC_TypeDef* ADCx, uint32_t ADC_ExternalTrigInjecConv)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b085      	sub	sp, #20
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
 8005ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005ada:	2300      	movs	r3, #0
 8005adc:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_EXT_INJEC_TRIG(ADC_ExternalTrigInjecConv));
  
  /* Get the old register value */
  tmpreg = ADCx->CR2;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	689b      	ldr	r3, [r3, #8]
 8005ae2:	60fb      	str	r3, [r7, #12]
  
  /* Clear the old external event selection for injected group */
  tmpreg &= CR2_JEXTSEL_RESET;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8005aea:	60fb      	str	r3, [r7, #12]
  
  /* Set the external event selection for injected group */
  tmpreg |= ADC_ExternalTrigInjecConv;
 8005aec:	68fa      	ldr	r2, [r7, #12]
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	4313      	orrs	r3, r2
 8005af2:	60fb      	str	r3, [r7, #12]
  
  /* Store the new register value */
  ADCx->CR2 = tmpreg;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	68fa      	ldr	r2, [r7, #12]
 8005af8:	609a      	str	r2, [r3, #8]
}
 8005afa:	3714      	adds	r7, #20
 8005afc:	46bd      	mov	sp, r7
 8005afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b02:	4770      	bx	lr

08005b04 <ADC_ExternalTrigInjectedConvEdgeConfig>:
  *            @arg ADC_ExternalTrigInjecConvEdge_RisingFalling: detection on both rising 
  *                                                               and falling edge
  * @retval None
  */
void ADC_ExternalTrigInjectedConvEdgeConfig(ADC_TypeDef* ADCx, uint32_t ADC_ExternalTrigInjecConvEdge)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b085      	sub	sp, #20
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
 8005b0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(ADC_ExternalTrigInjecConvEdge));
  /* Get the old register value */
  tmpreg = ADCx->CR2;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	689b      	ldr	r3, [r3, #8]
 8005b16:	60fb      	str	r3, [r7, #12]
  /* Clear the old external trigger edge for injected group */
  tmpreg &= CR2_JEXTEN_RESET;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005b1e:	60fb      	str	r3, [r7, #12]
  /* Set the new external trigger edge for injected group */
  tmpreg |= ADC_ExternalTrigInjecConvEdge;
 8005b20:	68fa      	ldr	r2, [r7, #12]
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	4313      	orrs	r3, r2
 8005b26:	60fb      	str	r3, [r7, #12]
  /* Store the new register value */
  ADCx->CR2 = tmpreg;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	68fa      	ldr	r2, [r7, #12]
 8005b2c:	609a      	str	r2, [r3, #8]
}
 8005b2e:	3714      	adds	r7, #20
 8005b30:	46bd      	mov	sp, r7
 8005b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b36:	4770      	bx	lr

08005b38 <ADC_SoftwareStartInjectedConv>:
  * @brief  Enables the selected ADC software start conversion of the injected channels.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_SoftwareStartInjectedConv(ADC_TypeDef* ADCx)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b083      	sub	sp, #12
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Enable the selected ADC conversion for injected group */
  ADCx->CR2 |= (uint32_t)ADC_CR2_JSWSTART;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	609a      	str	r2, [r3, #8]
}
 8005b4c:	370c      	adds	r7, #12
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b54:	4770      	bx	lr
 8005b56:	bf00      	nop

08005b58 <ADC_GetSoftwareStartInjectedConvCmdStatus>:
  * @brief  Gets the selected ADC Software start injected conversion Status.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The new state of ADC software start injected conversion (SET or RESET).
  */
FlagStatus ADC_GetSoftwareStartInjectedConvCmdStatus(ADC_TypeDef* ADCx)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b085      	sub	sp, #20
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8005b60:	2300      	movs	r3, #0
 8005b62:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Check the status of JSWSTART bit */
  if ((ADCx->CR2 & ADC_CR2_JSWSTART) != (uint32_t)RESET)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	689b      	ldr	r3, [r3, #8]
 8005b68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d002      	beq.n	8005b76 <ADC_GetSoftwareStartInjectedConvCmdStatus+0x1e>
  {
    /* JSWSTART bit is set */
    bitstatus = SET;
 8005b70:	2301      	movs	r3, #1
 8005b72:	73fb      	strb	r3, [r7, #15]
 8005b74:	e001      	b.n	8005b7a <ADC_GetSoftwareStartInjectedConvCmdStatus+0x22>
  }
  else
  {
    /* JSWSTART bit is reset */
    bitstatus = RESET;
 8005b76:	2300      	movs	r3, #0
 8005b78:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the JSWSTART bit status */
  return  bitstatus;
 8005b7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3714      	adds	r7, #20
 8005b80:	46bd      	mov	sp, r7
 8005b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b86:	4770      	bx	lr

08005b88 <ADC_AutoInjectedConvCmd>:
  * @param  NewState: new state of the selected ADC auto injected conversion
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_AutoInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b083      	sub	sp, #12
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
 8005b90:	460b      	mov	r3, r1
 8005b92:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8005b94:	78fb      	ldrb	r3, [r7, #3]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d006      	beq.n	8005ba8 <ADC_AutoInjectedConvCmd+0x20>
  {
    /* Enable the selected ADC automatic injected group conversion */
    ADCx->CR1 |= (uint32_t)ADC_CR1_JAUTO;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	605a      	str	r2, [r3, #4]
 8005ba6:	e005      	b.n	8005bb4 <ADC_AutoInjectedConvCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    ADCx->CR1 &= (uint32_t)(~ADC_CR1_JAUTO);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	605a      	str	r2, [r3, #4]
  }
}
 8005bb4:	370c      	adds	r7, #12
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbc:	4770      	bx	lr
 8005bbe:	bf00      	nop

08005bc0 <ADC_InjectedDiscModeCmd>:
  *         group channel.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_InjectedDiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b083      	sub	sp, #12
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
 8005bc8:	460b      	mov	r3, r1
 8005bca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8005bcc:	78fb      	ldrb	r3, [r7, #3]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d006      	beq.n	8005be0 <ADC_InjectedDiscModeCmd+0x20>
  {
    /* Enable the selected ADC injected discontinuous mode */
    ADCx->CR1 |= (uint32_t)ADC_CR1_JDISCEN;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	605a      	str	r2, [r3, #4]
 8005bde:	e005      	b.n	8005bec <ADC_InjectedDiscModeCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    ADCx->CR1 &= (uint32_t)(~ADC_CR1_JDISCEN);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	605a      	str	r2, [r3, #4]
  }
}
 8005bec:	370c      	adds	r7, #12
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf4:	4770      	bx	lr
 8005bf6:	bf00      	nop

08005bf8 <ADC_GetInjectedConversionValue>:
  *            @arg ADC_InjectedChannel_3: Injected Channel3 selected
  *            @arg ADC_InjectedChannel_4: Injected Channel4 selected
  * @retval The Data conversion value.
  */
uint16_t ADC_GetInjectedConversionValue(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b085      	sub	sp, #20
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
 8005c00:	460b      	mov	r3, r1
 8005c02:	70fb      	strb	r3, [r7, #3]
  __IO uint32_t tmp = 0;
 8005c04:	2300      	movs	r3, #0
 8005c06:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));

  tmp = (uint32_t)ADCx;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	60fb      	str	r3, [r7, #12]
  tmp += ADC_InjectedChannel + JDR_OFFSET;
 8005c0c:	78fa      	ldrb	r2, [r7, #3]
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	4413      	add	r3, r2
 8005c12:	3328      	adds	r3, #40	; 0x28
 8005c14:	60fb      	str	r3, [r7, #12]
  
  /* Returns the selected injected channel conversion data value */
  return (uint16_t) (*(__IO uint32_t*)  tmp); 
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	b29b      	uxth	r3, r3
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	3714      	adds	r7, #20
 8005c20:	46bd      	mov	sp, r7
 8005c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c26:	4770      	bx	lr

08005c28 <ADC_ITConfig>:
  * @param  NewState: new state of the specified ADC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_ITConfig(ADC_TypeDef* ADCx, uint16_t ADC_IT, FunctionalState NewState)  
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b085      	sub	sp, #20
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
 8005c30:	4613      	mov	r3, r2
 8005c32:	460a      	mov	r2, r1
 8005c34:	807a      	strh	r2, [r7, #2]
 8005c36:	707b      	strb	r3, [r7, #1]
  uint32_t itmask = 0;
 8005c38:	2300      	movs	r3, #0
 8005c3a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_ADC_IT(ADC_IT)); 

  /* Get the ADC IT index */
  itmask = (uint8_t)ADC_IT;
 8005c3c:	887b      	ldrh	r3, [r7, #2]
 8005c3e:	b2db      	uxtb	r3, r3
 8005c40:	60fb      	str	r3, [r7, #12]
  itmask = (uint32_t)0x01 << itmask;    
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2201      	movs	r2, #1
 8005c46:	fa02 f303 	lsl.w	r3, r2, r3
 8005c4a:	60fb      	str	r3, [r7, #12]

  if (NewState != DISABLE)
 8005c4c:	787b      	ldrb	r3, [r7, #1]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d006      	beq.n	8005c60 <ADC_ITConfig+0x38>
  {
    /* Enable the selected ADC interrupts */
    ADCx->CR1 |= itmask;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	685a      	ldr	r2, [r3, #4]
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	431a      	orrs	r2, r3
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	605a      	str	r2, [r3, #4]
 8005c5e:	e006      	b.n	8005c6e <ADC_ITConfig+0x46>
  }
  else
  {
    /* Disable the selected ADC interrupts */
    ADCx->CR1 &= (~(uint32_t)itmask);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	685a      	ldr	r2, [r3, #4]
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	43db      	mvns	r3, r3
 8005c68:	401a      	ands	r2, r3
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	605a      	str	r2, [r3, #4]
  }
}
 8005c6e:	3714      	adds	r7, #20
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr

08005c78 <ADC_GetFlagStatus>:
  *            @arg ADC_FLAG_STRT: Start of regular group conversion flag
  *            @arg ADC_FLAG_OVR: Overrun flag                                                 
  * @retval The new state of ADC_FLAG (SET or RESET).
  */
FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b085      	sub	sp, #20
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	460b      	mov	r3, r1
 8005c82:	70fb      	strb	r3, [r7, #3]
  FlagStatus bitstatus = RESET;
 8005c84:	2300      	movs	r3, #0
 8005c86:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_FLAG(ADC_FLAG));

  /* Check the status of the specified ADC flag */
  if ((ADCx->SR & ADC_FLAG) != (uint8_t)RESET)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681a      	ldr	r2, [r3, #0]
 8005c8c:	78fb      	ldrb	r3, [r7, #3]
 8005c8e:	4013      	ands	r3, r2
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d002      	beq.n	8005c9a <ADC_GetFlagStatus+0x22>
  {
    /* ADC_FLAG is set */
    bitstatus = SET;
 8005c94:	2301      	movs	r3, #1
 8005c96:	73fb      	strb	r3, [r7, #15]
 8005c98:	e001      	b.n	8005c9e <ADC_GetFlagStatus+0x26>
  }
  else
  {
    /* ADC_FLAG is reset */
    bitstatus = RESET;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
 8005c9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	3714      	adds	r7, #20
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005caa:	4770      	bx	lr

08005cac <ADC_ClearFlag>:
  *            @arg ADC_FLAG_STRT: Start of regular group conversion flag
  *            @arg ADC_FLAG_OVR: Overrun flag                          
  * @retval None
  */
void ADC_ClearFlag(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b083      	sub	sp, #12
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
 8005cb4:	460b      	mov	r3, r1
 8005cb6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CLEAR_FLAG(ADC_FLAG));

  /* Clear the selected ADC flags */
  ADCx->SR = ~(uint32_t)ADC_FLAG;
 8005cb8:	78fb      	ldrb	r3, [r7, #3]
 8005cba:	43da      	mvns	r2, r3
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	601a      	str	r2, [r3, #0]
}
 8005cc0:	370c      	adds	r7, #12
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc8:	4770      	bx	lr
 8005cca:	bf00      	nop

08005ccc <ADC_GetITStatus>:
  *            @arg ADC_IT_JEOC: End of injected conversion interrupt mask
  *            @arg ADC_IT_OVR: Overrun interrupt mask                        
  * @retval The new state of ADC_IT (SET or RESET).
  */
ITStatus ADC_GetITStatus(ADC_TypeDef* ADCx, uint16_t ADC_IT)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b087      	sub	sp, #28
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
 8005cd4:	460b      	mov	r3, r1
 8005cd6:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	75fb      	strb	r3, [r7, #23]
  uint32_t itmask = 0, enablestatus = 0;
 8005cdc:	2300      	movs	r3, #0
 8005cde:	613b      	str	r3, [r7, #16]
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_IT(ADC_IT));

  /* Get the ADC IT index */
  itmask = ADC_IT >> 8;
 8005ce4:	887b      	ldrh	r3, [r7, #2]
 8005ce6:	0a1b      	lsrs	r3, r3, #8
 8005ce8:	b29b      	uxth	r3, r3
 8005cea:	613b      	str	r3, [r7, #16]

  /* Get the ADC_IT enable bit status */
  enablestatus = (ADCx->CR1 & ((uint32_t)0x01 << (uint8_t)ADC_IT)) ;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	685a      	ldr	r2, [r3, #4]
 8005cf0:	887b      	ldrh	r3, [r7, #2]
 8005cf2:	b2db      	uxtb	r3, r3
 8005cf4:	2101      	movs	r1, #1
 8005cf6:	fa01 f303 	lsl.w	r3, r1, r3
 8005cfa:	4013      	ands	r3, r2
 8005cfc:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified ADC interrupt */
  if (((ADCx->SR & itmask) != (uint32_t)RESET) && enablestatus)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681a      	ldr	r2, [r3, #0]
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	4013      	ands	r3, r2
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d005      	beq.n	8005d16 <ADC_GetITStatus+0x4a>
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d002      	beq.n	8005d16 <ADC_GetITStatus+0x4a>
  {
    /* ADC_IT is set */
    bitstatus = SET;
 8005d10:	2301      	movs	r3, #1
 8005d12:	75fb      	strb	r3, [r7, #23]
 8005d14:	e001      	b.n	8005d1a <ADC_GetITStatus+0x4e>
  }
  else
  {
    /* ADC_IT is reset */
    bitstatus = RESET;
 8005d16:	2300      	movs	r3, #0
 8005d18:	75fb      	strb	r3, [r7, #23]
  }
  /* Return the ADC_IT status */
  return  bitstatus;
 8005d1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	371c      	adds	r7, #28
 8005d20:	46bd      	mov	sp, r7
 8005d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d26:	4770      	bx	lr

08005d28 <ADC_ClearITPendingBit>:
  *            @arg ADC_IT_JEOC: End of injected conversion interrupt mask
  *            @arg ADC_IT_OVR: Overrun interrupt mask                         
  * @retval None
  */
void ADC_ClearITPendingBit(ADC_TypeDef* ADCx, uint16_t ADC_IT)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b085      	sub	sp, #20
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
 8005d30:	460b      	mov	r3, r1
 8005d32:	807b      	strh	r3, [r7, #2]
  uint8_t itmask = 0;
 8005d34:	2300      	movs	r3, #0
 8005d36:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_IT(ADC_IT)); 
  /* Get the ADC IT index */
  itmask = (uint8_t)(ADC_IT >> 8);
 8005d38:	887b      	ldrh	r3, [r7, #2]
 8005d3a:	0a1b      	lsrs	r3, r3, #8
 8005d3c:	b29b      	uxth	r3, r3
 8005d3e:	73fb      	strb	r3, [r7, #15]
  /* Clear the selected ADC interrupt pending bits */
  ADCx->SR = ~(uint32_t)itmask;
 8005d40:	7bfb      	ldrb	r3, [r7, #15]
 8005d42:	43da      	mvns	r2, r3
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	601a      	str	r2, [r3, #0]
}                    
 8005d48:	3714      	adds	r7, #20
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d50:	4770      	bx	lr
 8005d52:	bf00      	nop

08005d54 <CAN_DeInit>:
  * @brief  Deinitializes the CAN peripheral registers to their default reset values.
  * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
  * @retval None.
  */
void CAN_DeInit(CAN_TypeDef* CANx)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b082      	sub	sp, #8
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
 
  if (CANx == CAN1)
 8005d5c:	687a      	ldr	r2, [r7, #4]
 8005d5e:	4b0d      	ldr	r3, [pc, #52]	; (8005d94 <CAN_DeInit+0x40>)
 8005d60:	429a      	cmp	r2, r3
 8005d62:	d10a      	bne.n	8005d7a <CAN_DeInit+0x26>
  {
    /* Enable CAN1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, ENABLE);
 8005d64:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8005d68:	2101      	movs	r1, #1
 8005d6a:	f00a f84d 	bl	800fe08 <RCC_APB1PeriphResetCmd>
    /* Release CAN1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, DISABLE);
 8005d6e:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8005d72:	2100      	movs	r1, #0
 8005d74:	f00a f848 	bl	800fe08 <RCC_APB1PeriphResetCmd>
 8005d78:	e009      	b.n	8005d8e <CAN_DeInit+0x3a>
  }
  else
  {  
    /* Enable CAN2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, ENABLE);
 8005d7a:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8005d7e:	2101      	movs	r1, #1
 8005d80:	f00a f842 	bl	800fe08 <RCC_APB1PeriphResetCmd>
    /* Release CAN2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, DISABLE);
 8005d84:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8005d88:	2100      	movs	r1, #0
 8005d8a:	f00a f83d 	bl	800fe08 <RCC_APB1PeriphResetCmd>
  }
}
 8005d8e:	3708      	adds	r7, #8
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}
 8005d94:	40006400 	.word	0x40006400

08005d98 <CAN_Init>:
  *         the configuration information for the CAN peripheral.
  * @retval Constant indicates initialization succeed which will be 
  *         CAN_InitStatus_Failed or CAN_InitStatus_Success.
  */
uint8_t CAN_Init(CAN_TypeDef* CANx, CAN_InitTypeDef* CAN_InitStruct)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b085      	sub	sp, #20
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
 8005da0:	6039      	str	r1, [r7, #0]
  uint8_t InitStatus = CAN_InitStatus_Failed;
 8005da2:	2300      	movs	r3, #0
 8005da4:	73fb      	strb	r3, [r7, #15]
  uint32_t wait_ack = 0x00000000;
 8005da6:	2300      	movs	r3, #0
 8005da8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_CAN_BS1(CAN_InitStruct->CAN_BS1));
  assert_param(IS_CAN_BS2(CAN_InitStruct->CAN_BS2));
  assert_param(IS_CAN_PRESCALER(CAN_InitStruct->CAN_Prescaler));

  /* Exit from sleep mode */
  CANx->MCR &= (~(uint32_t)CAN_MCR_SLEEP);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f023 0202 	bic.w	r2, r3, #2
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	601a      	str	r2, [r3, #0]

  /* Request initialisation */
  CANx->MCR |= CAN_MCR_INRQ ;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f043 0201 	orr.w	r2, r3, #1
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	601a      	str	r2, [r3, #0]

  /* Wait the acknowledge */
  while (((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 8005dc2:	e002      	b.n	8005dca <CAN_Init+0x32>
  {
    wait_ack++;
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	3301      	adds	r3, #1
 8005dc8:	60bb      	str	r3, [r7, #8]

  /* Request initialisation */
  CANx->MCR |= CAN_MCR_INRQ ;

  /* Wait the acknowledge */
  while (((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	f003 0301 	and.w	r3, r3, #1
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d104      	bne.n	8005de0 <CAN_Init+0x48>
 8005dd6:	68ba      	ldr	r2, [r7, #8]
 8005dd8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	d1f1      	bne.n	8005dc4 <CAN_Init+0x2c>
  {
    wait_ack++;
  }

  /* Check acknowledge */
  if ((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	f003 0301 	and.w	r3, r3, #1
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d102      	bne.n	8005df2 <CAN_Init+0x5a>
  {
    InitStatus = CAN_InitStatus_Failed;
 8005dec:	2300      	movs	r3, #0
 8005dee:	73fb      	strb	r3, [r7, #15]
 8005df0:	e09c      	b.n	8005f2c <CAN_Init+0x194>
  }
  else 
  {
    /* Set the time triggered communication mode */
    if (CAN_InitStruct->CAN_TTCM == ENABLE)
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	799b      	ldrb	r3, [r3, #6]
 8005df6:	2b01      	cmp	r3, #1
 8005df8:	d106      	bne.n	8005e08 <CAN_Init+0x70>
    {
      CANx->MCR |= CAN_MCR_TTCM;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	601a      	str	r2, [r3, #0]
 8005e06:	e005      	b.n	8005e14 <CAN_Init+0x7c>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_TTCM;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	601a      	str	r2, [r3, #0]
    }

    /* Set the automatic bus-off management */
    if (CAN_InitStruct->CAN_ABOM == ENABLE)
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	79db      	ldrb	r3, [r3, #7]
 8005e18:	2b01      	cmp	r3, #1
 8005e1a:	d106      	bne.n	8005e2a <CAN_Init+0x92>
    {
      CANx->MCR |= CAN_MCR_ABOM;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	601a      	str	r2, [r3, #0]
 8005e28:	e005      	b.n	8005e36 <CAN_Init+0x9e>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_ABOM;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	601a      	str	r2, [r3, #0]
    }

    /* Set the automatic wake-up mode */
    if (CAN_InitStruct->CAN_AWUM == ENABLE)
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	7a1b      	ldrb	r3, [r3, #8]
 8005e3a:	2b01      	cmp	r3, #1
 8005e3c:	d106      	bne.n	8005e4c <CAN_Init+0xb4>
    {
      CANx->MCR |= CAN_MCR_AWUM;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f043 0220 	orr.w	r2, r3, #32
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	601a      	str	r2, [r3, #0]
 8005e4a:	e005      	b.n	8005e58 <CAN_Init+0xc0>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_AWUM;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f023 0220 	bic.w	r2, r3, #32
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	601a      	str	r2, [r3, #0]
    }

    /* Set the no automatic retransmission */
    if (CAN_InitStruct->CAN_NART == ENABLE)
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	7a5b      	ldrb	r3, [r3, #9]
 8005e5c:	2b01      	cmp	r3, #1
 8005e5e:	d106      	bne.n	8005e6e <CAN_Init+0xd6>
    {
      CANx->MCR |= CAN_MCR_NART;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f043 0210 	orr.w	r2, r3, #16
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	601a      	str	r2, [r3, #0]
 8005e6c:	e005      	b.n	8005e7a <CAN_Init+0xe2>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_NART;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f023 0210 	bic.w	r2, r3, #16
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	601a      	str	r2, [r3, #0]
    }

    /* Set the receive FIFO locked mode */
    if (CAN_InitStruct->CAN_RFLM == ENABLE)
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	7a9b      	ldrb	r3, [r3, #10]
 8005e7e:	2b01      	cmp	r3, #1
 8005e80:	d106      	bne.n	8005e90 <CAN_Init+0xf8>
    {
      CANx->MCR |= CAN_MCR_RFLM;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f043 0208 	orr.w	r2, r3, #8
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	601a      	str	r2, [r3, #0]
 8005e8e:	e005      	b.n	8005e9c <CAN_Init+0x104>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_RFLM;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f023 0208 	bic.w	r2, r3, #8
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	601a      	str	r2, [r3, #0]
    }

    /* Set the transmit FIFO priority */
    if (CAN_InitStruct->CAN_TXFP == ENABLE)
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	7adb      	ldrb	r3, [r3, #11]
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	d106      	bne.n	8005eb2 <CAN_Init+0x11a>
    {
      CANx->MCR |= CAN_MCR_TXFP;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f043 0204 	orr.w	r2, r3, #4
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	601a      	str	r2, [r3, #0]
 8005eb0:	e005      	b.n	8005ebe <CAN_Init+0x126>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_TXFP;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f023 0204 	bic.w	r2, r3, #4
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	601a      	str	r2, [r3, #0]
    }

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	789b      	ldrb	r3, [r3, #2]
 8005ec2:	079a      	lsls	r2, r3, #30
                ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	78db      	ldrb	r3, [r3, #3]
 8005ec8:	061b      	lsls	r3, r3, #24
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_TXFP;
    }

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
 8005eca:	431a      	orrs	r2, r3
                ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	791b      	ldrb	r3, [r3, #4]
 8005ed0:	041b      	lsls	r3, r3, #16
      CANx->MCR &= ~(uint32_t)CAN_MCR_TXFP;
    }

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
                ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
 8005ed2:	431a      	orrs	r2, r3
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
                ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	795b      	ldrb	r3, [r3, #5]
 8005ed8:	051b      	lsls	r3, r3, #20
    }

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
                ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
 8005eda:	431a      	orrs	r2, r3
                ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
               ((uint32_t)CAN_InitStruct->CAN_Prescaler - 1);
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	881b      	ldrh	r3, [r3, #0]
 8005ee0:	3b01      	subs	r3, #1

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
                ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
                ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
 8005ee2:	431a      	orrs	r2, r3
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_TXFP;
    }

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	61da      	str	r2, [r3, #28]
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
                ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
               ((uint32_t)CAN_InitStruct->CAN_Prescaler - 1);

    /* Request leave initialisation */
    CANx->MCR &= ~(uint32_t)CAN_MCR_INRQ;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f023 0201 	bic.w	r2, r3, #1
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	601a      	str	r2, [r3, #0]

   /* Wait the acknowledge */
   wait_ack = 0;
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	60bb      	str	r3, [r7, #8]

   while (((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 8005ef8:	e002      	b.n	8005f00 <CAN_Init+0x168>
   {
     wait_ack++;
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	3301      	adds	r3, #1
 8005efe:	60bb      	str	r3, [r7, #8]
    CANx->MCR &= ~(uint32_t)CAN_MCR_INRQ;

   /* Wait the acknowledge */
   wait_ack = 0;

   while (((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	685b      	ldr	r3, [r3, #4]
 8005f04:	f003 0301 	and.w	r3, r3, #1
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d004      	beq.n	8005f16 <CAN_Init+0x17e>
 8005f0c:	68ba      	ldr	r2, [r7, #8]
 8005f0e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005f12:	429a      	cmp	r2, r3
 8005f14:	d1f1      	bne.n	8005efa <CAN_Init+0x162>
   {
     wait_ack++;
   }

    /* ...and check acknowledged */
    if ((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	f003 0301 	and.w	r3, r3, #1
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d002      	beq.n	8005f28 <CAN_Init+0x190>
    {
      InitStatus = CAN_InitStatus_Failed;
 8005f22:	2300      	movs	r3, #0
 8005f24:	73fb      	strb	r3, [r7, #15]
 8005f26:	e001      	b.n	8005f2c <CAN_Init+0x194>
    }
    else
    {
      InitStatus = CAN_InitStatus_Success ;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* At this step, return the status of initialization */
  return InitStatus;
 8005f2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3714      	adds	r7, #20
 8005f32:	46bd      	mov	sp, r7
 8005f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f38:	4770      	bx	lr
 8005f3a:	bf00      	nop

08005f3c <CAN_FilterInit>:
  * @param  CAN_FilterInitStruct: pointer to a CAN_FilterInitTypeDef structure that
  *         contains the configuration information.
  * @retval None
  */
void CAN_FilterInit(CAN_FilterInitTypeDef* CAN_FilterInitStruct)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b085      	sub	sp, #20
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  uint32_t filter_number_bit_pos = 0;
 8005f44:	2300      	movs	r3, #0
 8005f46:	60fb      	str	r3, [r7, #12]
  assert_param(IS_CAN_FILTER_MODE(CAN_FilterInitStruct->CAN_FilterMode));
  assert_param(IS_CAN_FILTER_SCALE(CAN_FilterInitStruct->CAN_FilterScale));
  assert_param(IS_CAN_FILTER_FIFO(CAN_FilterInitStruct->CAN_FilterFIFOAssignment));
  assert_param(IS_FUNCTIONAL_STATE(CAN_FilterInitStruct->CAN_FilterActivation));

  filter_number_bit_pos = ((uint32_t)1) << CAN_FilterInitStruct->CAN_FilterNumber;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	7a9b      	ldrb	r3, [r3, #10]
 8005f4c:	2201      	movs	r2, #1
 8005f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f52:	60fb      	str	r3, [r7, #12]

  /* Initialisation mode for the filter */
  CAN1->FMR |= FMR_FINIT;
 8005f54:	4b51      	ldr	r3, [pc, #324]	; (800609c <CAN_FilterInit+0x160>)
 8005f56:	4a51      	ldr	r2, [pc, #324]	; (800609c <CAN_FilterInit+0x160>)
 8005f58:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8005f5c:	f042 0201 	orr.w	r2, r2, #1
 8005f60:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  /* Filter Deactivation */
  CAN1->FA1R &= ~(uint32_t)filter_number_bit_pos;
 8005f64:	4b4d      	ldr	r3, [pc, #308]	; (800609c <CAN_FilterInit+0x160>)
 8005f66:	4a4d      	ldr	r2, [pc, #308]	; (800609c <CAN_FilterInit+0x160>)
 8005f68:	f8d2 121c 	ldr.w	r1, [r2, #540]	; 0x21c
 8005f6c:	68fa      	ldr	r2, [r7, #12]
 8005f6e:	43d2      	mvns	r2, r2
 8005f70:	400a      	ands	r2, r1
 8005f72:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

  /* Filter Scale */
  if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_16bit)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	7b1b      	ldrb	r3, [r3, #12]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d121      	bne.n	8005fc2 <CAN_FilterInit+0x86>
  {
    /* 16-bit scale for the filter */
    CAN1->FS1R &= ~(uint32_t)filter_number_bit_pos;
 8005f7e:	4b47      	ldr	r3, [pc, #284]	; (800609c <CAN_FilterInit+0x160>)
 8005f80:	4a46      	ldr	r2, [pc, #280]	; (800609c <CAN_FilterInit+0x160>)
 8005f82:	f8d2 120c 	ldr.w	r1, [r2, #524]	; 0x20c
 8005f86:	68fa      	ldr	r2, [r7, #12]
 8005f88:	43d2      	mvns	r2, r2
 8005f8a:	400a      	ands	r2, r1
 8005f8c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 8005f90:	4b42      	ldr	r3, [pc, #264]	; (800609c <CAN_FilterInit+0x160>)
 8005f92:	687a      	ldr	r2, [r7, #4]
 8005f94:	7a92      	ldrb	r2, [r2, #10]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
 8005f96:	6879      	ldr	r1, [r7, #4]
 8005f98:	88c9      	ldrh	r1, [r1, #6]
 8005f9a:	0408      	lsls	r0, r1, #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 8005f9c:	6879      	ldr	r1, [r7, #4]
 8005f9e:	8849      	ldrh	r1, [r1, #2]
    CAN1->FS1R &= ~(uint32_t)filter_number_bit_pos;

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
 8005fa0:	4301      	orrs	r1, r0
    /* 16-bit scale for the filter */
    CAN1->FS1R &= ~(uint32_t)filter_number_bit_pos;

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 8005fa2:	3248      	adds	r2, #72	; 0x48
 8005fa4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);

    /* Second 16-bit identifier and Second 16-bit mask */
    /* Or Third 16-bit identifier and Fourth 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 8005fa8:	493c      	ldr	r1, [pc, #240]	; (800609c <CAN_FilterInit+0x160>)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	7a9b      	ldrb	r3, [r3, #10]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 8005fae:	687a      	ldr	r2, [r7, #4]
 8005fb0:	8892      	ldrh	r2, [r2, #4]
 8005fb2:	0410      	lsls	r0, r2, #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh);
 8005fb4:	687a      	ldr	r2, [r7, #4]
 8005fb6:	8812      	ldrh	r2, [r2, #0]
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);

    /* Second 16-bit identifier and Second 16-bit mask */
    /* Or Third 16-bit identifier and Fourth 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 8005fb8:	4302      	orrs	r2, r0
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);

    /* Second 16-bit identifier and Second 16-bit mask */
    /* Or Third 16-bit identifier and Fourth 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 8005fba:	3348      	adds	r3, #72	; 0x48
 8005fbc:	00db      	lsls	r3, r3, #3
 8005fbe:	440b      	add	r3, r1
 8005fc0:	605a      	str	r2, [r3, #4]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh);
  }

  if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_32bit)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	7b1b      	ldrb	r3, [r3, #12]
 8005fc6:	2b01      	cmp	r3, #1
 8005fc8:	d120      	bne.n	800600c <CAN_FilterInit+0xd0>
  {
    /* 32-bit scale for the filter */
    CAN1->FS1R |= filter_number_bit_pos;
 8005fca:	4b34      	ldr	r3, [pc, #208]	; (800609c <CAN_FilterInit+0x160>)
 8005fcc:	4a33      	ldr	r2, [pc, #204]	; (800609c <CAN_FilterInit+0x160>)
 8005fce:	f8d2 120c 	ldr.w	r1, [r2, #524]	; 0x20c
 8005fd2:	68fa      	ldr	r2, [r7, #12]
 8005fd4:	430a      	orrs	r2, r1
 8005fd6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
    /* 32-bit identifier or First 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 8005fda:	4b30      	ldr	r3, [pc, #192]	; (800609c <CAN_FilterInit+0x160>)
 8005fdc:	687a      	ldr	r2, [r7, #4]
 8005fde:	7a92      	ldrb	r2, [r2, #10]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
 8005fe0:	6879      	ldr	r1, [r7, #4]
 8005fe2:	8809      	ldrh	r1, [r1, #0]
 8005fe4:	0408      	lsls	r0, r1, #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 8005fe6:	6879      	ldr	r1, [r7, #4]
 8005fe8:	8849      	ldrh	r1, [r1, #2]
  {
    /* 32-bit scale for the filter */
    CAN1->FS1R |= filter_number_bit_pos;
    /* 32-bit identifier or First 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
 8005fea:	4301      	orrs	r1, r0
  if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_32bit)
  {
    /* 32-bit scale for the filter */
    CAN1->FS1R |= filter_number_bit_pos;
    /* 32-bit identifier or First 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 8005fec:	3248      	adds	r2, #72	; 0x48
 8005fee:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
    /* 32-bit mask or Second 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 8005ff2:	492a      	ldr	r1, [pc, #168]	; (800609c <CAN_FilterInit+0x160>)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	7a9b      	ldrb	r3, [r3, #10]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 8005ff8:	687a      	ldr	r2, [r7, #4]
 8005ffa:	8892      	ldrh	r2, [r2, #4]
 8005ffc:	0410      	lsls	r0, r2, #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow);
 8005ffe:	687a      	ldr	r2, [r7, #4]
 8006000:	88d2      	ldrh	r2, [r2, #6]
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
    /* 32-bit mask or Second 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 8006002:	4302      	orrs	r2, r0
    /* 32-bit identifier or First 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
    /* 32-bit mask or Second 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 8006004:	3348      	adds	r3, #72	; 0x48
 8006006:	00db      	lsls	r3, r3, #3
 8006008:	440b      	add	r3, r1
 800600a:	605a      	str	r2, [r3, #4]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow);
  }

  /* Filter Mode */
  if (CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdMask)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	7adb      	ldrb	r3, [r3, #11]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d109      	bne.n	8006028 <CAN_FilterInit+0xec>
  {
    /*Id/Mask mode for the filter*/
    CAN1->FM1R &= ~(uint32_t)filter_number_bit_pos;
 8006014:	4b21      	ldr	r3, [pc, #132]	; (800609c <CAN_FilterInit+0x160>)
 8006016:	4a21      	ldr	r2, [pc, #132]	; (800609c <CAN_FilterInit+0x160>)
 8006018:	f8d2 1204 	ldr.w	r1, [r2, #516]	; 0x204
 800601c:	68fa      	ldr	r2, [r7, #12]
 800601e:	43d2      	mvns	r2, r2
 8006020:	400a      	ands	r2, r1
 8006022:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8006026:	e007      	b.n	8006038 <CAN_FilterInit+0xfc>
  }
  else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
  {
    /*Identifier list mode for the filter*/
    CAN1->FM1R |= (uint32_t)filter_number_bit_pos;
 8006028:	4b1c      	ldr	r3, [pc, #112]	; (800609c <CAN_FilterInit+0x160>)
 800602a:	4a1c      	ldr	r2, [pc, #112]	; (800609c <CAN_FilterInit+0x160>)
 800602c:	f8d2 1204 	ldr.w	r1, [r2, #516]	; 0x204
 8006030:	68fa      	ldr	r2, [r7, #12]
 8006032:	430a      	orrs	r2, r1
 8006034:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
  }

  /* Filter FIFO assignment */
  if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO0)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	891b      	ldrh	r3, [r3, #8]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d108      	bne.n	8006052 <CAN_FilterInit+0x116>
  {
    /* FIFO 0 assignation for the filter */
    CAN1->FFA1R &= ~(uint32_t)filter_number_bit_pos;
 8006040:	4b16      	ldr	r3, [pc, #88]	; (800609c <CAN_FilterInit+0x160>)
 8006042:	4a16      	ldr	r2, [pc, #88]	; (800609c <CAN_FilterInit+0x160>)
 8006044:	f8d2 1214 	ldr.w	r1, [r2, #532]	; 0x214
 8006048:	68fa      	ldr	r2, [r7, #12]
 800604a:	43d2      	mvns	r2, r2
 800604c:	400a      	ands	r2, r1
 800604e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  }

  if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO1)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	891b      	ldrh	r3, [r3, #8]
 8006056:	2b01      	cmp	r3, #1
 8006058:	d107      	bne.n	800606a <CAN_FilterInit+0x12e>
  {
    /* FIFO 1 assignation for the filter */
    CAN1->FFA1R |= (uint32_t)filter_number_bit_pos;
 800605a:	4b10      	ldr	r3, [pc, #64]	; (800609c <CAN_FilterInit+0x160>)
 800605c:	4a0f      	ldr	r2, [pc, #60]	; (800609c <CAN_FilterInit+0x160>)
 800605e:	f8d2 1214 	ldr.w	r1, [r2, #532]	; 0x214
 8006062:	68fa      	ldr	r2, [r7, #12]
 8006064:	430a      	orrs	r2, r1
 8006066:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  }
  
  /* Filter activation */
  if (CAN_FilterInitStruct->CAN_FilterActivation == ENABLE)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	7b5b      	ldrb	r3, [r3, #13]
 800606e:	2b01      	cmp	r3, #1
 8006070:	d107      	bne.n	8006082 <CAN_FilterInit+0x146>
  {
    CAN1->FA1R |= filter_number_bit_pos;
 8006072:	4b0a      	ldr	r3, [pc, #40]	; (800609c <CAN_FilterInit+0x160>)
 8006074:	4a09      	ldr	r2, [pc, #36]	; (800609c <CAN_FilterInit+0x160>)
 8006076:	f8d2 121c 	ldr.w	r1, [r2, #540]	; 0x21c
 800607a:	68fa      	ldr	r2, [r7, #12]
 800607c:	430a      	orrs	r2, r1
 800607e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
  }

  /* Leave the initialisation mode for the filter */
  CAN1->FMR &= ~FMR_FINIT;
 8006082:	4b06      	ldr	r3, [pc, #24]	; (800609c <CAN_FilterInit+0x160>)
 8006084:	4a05      	ldr	r2, [pc, #20]	; (800609c <CAN_FilterInit+0x160>)
 8006086:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 800608a:	f022 0201 	bic.w	r2, r2, #1
 800608e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8006092:	3714      	adds	r7, #20
 8006094:	46bd      	mov	sp, r7
 8006096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609a:	4770      	bx	lr
 800609c:	40006400 	.word	0x40006400

080060a0 <CAN_StructInit>:
  * @brief  Fills each CAN_InitStruct member with its default value.
  * @param  CAN_InitStruct: pointer to a CAN_InitTypeDef structure which ill be initialized.
  * @retval None
  */
void CAN_StructInit(CAN_InitTypeDef* CAN_InitStruct)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b083      	sub	sp, #12
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
  /* Reset CAN init structure parameters values */
  
  /* Initialize the time triggered communication mode */
  CAN_InitStruct->CAN_TTCM = DISABLE;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2200      	movs	r2, #0
 80060ac:	719a      	strb	r2, [r3, #6]
  
  /* Initialize the automatic bus-off management */
  CAN_InitStruct->CAN_ABOM = DISABLE;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2200      	movs	r2, #0
 80060b2:	71da      	strb	r2, [r3, #7]
  
  /* Initialize the automatic wake-up mode */
  CAN_InitStruct->CAN_AWUM = DISABLE;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2200      	movs	r2, #0
 80060b8:	721a      	strb	r2, [r3, #8]
  
  /* Initialize the no automatic retransmission */
  CAN_InitStruct->CAN_NART = DISABLE;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2200      	movs	r2, #0
 80060be:	725a      	strb	r2, [r3, #9]
  
  /* Initialize the receive FIFO locked mode */
  CAN_InitStruct->CAN_RFLM = DISABLE;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2200      	movs	r2, #0
 80060c4:	729a      	strb	r2, [r3, #10]
  
  /* Initialize the transmit FIFO priority */
  CAN_InitStruct->CAN_TXFP = DISABLE;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2200      	movs	r2, #0
 80060ca:	72da      	strb	r2, [r3, #11]
  
  /* Initialize the CAN_Mode member */
  CAN_InitStruct->CAN_Mode = CAN_Mode_Normal;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2200      	movs	r2, #0
 80060d0:	709a      	strb	r2, [r3, #2]
  
  /* Initialize the CAN_SJW member */
  CAN_InitStruct->CAN_SJW = CAN_SJW_1tq;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2200      	movs	r2, #0
 80060d6:	70da      	strb	r2, [r3, #3]
  
  /* Initialize the CAN_BS1 member */
  CAN_InitStruct->CAN_BS1 = CAN_BS1_4tq;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2203      	movs	r2, #3
 80060dc:	711a      	strb	r2, [r3, #4]
  
  /* Initialize the CAN_BS2 member */
  CAN_InitStruct->CAN_BS2 = CAN_BS2_3tq;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2202      	movs	r2, #2
 80060e2:	715a      	strb	r2, [r3, #5]
  
  /* Initialize the CAN_Prescaler member */
  CAN_InitStruct->CAN_Prescaler = 1;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2201      	movs	r2, #1
 80060e8:	801a      	strh	r2, [r3, #0]
}
 80060ea:	370c      	adds	r7, #12
 80060ec:	46bd      	mov	sp, r7
 80060ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f2:	4770      	bx	lr

080060f4 <CAN_SlaveStartBank>:
  * @brief  Select the start bank filter for slave CAN.
  * @param  CAN_BankNumber: Select the start slave bank filter from 1..27.
  * @retval None
  */
void CAN_SlaveStartBank(uint8_t CAN_BankNumber) 
{
 80060f4:	b480      	push	{r7}
 80060f6:	b083      	sub	sp, #12
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	4603      	mov	r3, r0
 80060fc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_CAN_BANKNUMBER(CAN_BankNumber));
  
  /* Enter Initialisation mode for the filter */
  CAN1->FMR |= FMR_FINIT;
 80060fe:	4b14      	ldr	r3, [pc, #80]	; (8006150 <CAN_SlaveStartBank+0x5c>)
 8006100:	4a13      	ldr	r2, [pc, #76]	; (8006150 <CAN_SlaveStartBank+0x5c>)
 8006102:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8006106:	f042 0201 	orr.w	r2, r2, #1
 800610a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  
  /* Select the start slave bank */
  CAN1->FMR &= (uint32_t)0xFFFFC0F1 ;
 800610e:	4a10      	ldr	r2, [pc, #64]	; (8006150 <CAN_SlaveStartBank+0x5c>)
 8006110:	4b0f      	ldr	r3, [pc, #60]	; (8006150 <CAN_SlaveStartBank+0x5c>)
 8006112:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006116:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800611a:	f023 030e 	bic.w	r3, r3, #14
 800611e:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
  CAN1->FMR |= (uint32_t)(CAN_BankNumber)<<8;
 8006122:	4b0b      	ldr	r3, [pc, #44]	; (8006150 <CAN_SlaveStartBank+0x5c>)
 8006124:	4a0a      	ldr	r2, [pc, #40]	; (8006150 <CAN_SlaveStartBank+0x5c>)
 8006126:	f8d2 1200 	ldr.w	r1, [r2, #512]	; 0x200
 800612a:	79fa      	ldrb	r2, [r7, #7]
 800612c:	0212      	lsls	r2, r2, #8
 800612e:	430a      	orrs	r2, r1
 8006130:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  
  /* Leave Initialisation mode for the filter */
  CAN1->FMR &= ~FMR_FINIT;
 8006134:	4b06      	ldr	r3, [pc, #24]	; (8006150 <CAN_SlaveStartBank+0x5c>)
 8006136:	4a06      	ldr	r2, [pc, #24]	; (8006150 <CAN_SlaveStartBank+0x5c>)
 8006138:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 800613c:	f022 0201 	bic.w	r2, r2, #1
 8006140:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8006144:	370c      	adds	r7, #12
 8006146:	46bd      	mov	sp, r7
 8006148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614c:	4770      	bx	lr
 800614e:	bf00      	nop
 8006150:	40006400 	.word	0x40006400

08006154 <CAN_DBGFreeze>:
  *          during debug. Reception FIFOs can still be accessed/controlled normally) 
  *          or DISABLE (CAN is working during debug).
  * @retval None
  */
void CAN_DBGFreeze(CAN_TypeDef* CANx, FunctionalState NewState)
{
 8006154:	b480      	push	{r7}
 8006156:	b083      	sub	sp, #12
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
 800615c:	460b      	mov	r3, r1
 800615e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8006160:	78fb      	ldrb	r3, [r7, #3]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d006      	beq.n	8006174 <CAN_DBGFreeze+0x20>
  {
    /* Enable Debug Freeze  */
    CANx->MCR |= MCR_DBF;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	601a      	str	r2, [r3, #0]
 8006172:	e005      	b.n	8006180 <CAN_DBGFreeze+0x2c>
  }
  else
  {
    /* Disable Debug Freeze */
    CANx->MCR &= ~MCR_DBF;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	601a      	str	r2, [r3, #0]
  }
}
 8006180:	370c      	adds	r7, #12
 8006182:	46bd      	mov	sp, r7
 8006184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006188:	4770      	bx	lr
 800618a:	bf00      	nop

0800618c <CAN_TTComModeCmd>:
  *         data bytes of the 8-byte message: TIME[7:0] in data byte 6 and TIME[15:8] 
  *         in data byte 7. 
  * @retval None
  */
void CAN_TTComModeCmd(CAN_TypeDef* CANx, FunctionalState NewState)
{
 800618c:	b480      	push	{r7}
 800618e:	b083      	sub	sp, #12
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
 8006194:	460b      	mov	r3, r1
 8006196:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8006198:	78fb      	ldrb	r3, [r7, #3]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d01e      	beq.n	80061dc <CAN_TTComModeCmd+0x50>
  {
    /* Enable the TTCM mode */
    CANx->MCR |= CAN_MCR_TTCM;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	601a      	str	r2, [r3, #0]

    /* Set TGT bits */
    CANx->sTxMailBox[0].TDTR |= ((uint32_t)CAN_TDT0R_TGT);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 80061b0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    CANx->sTxMailBox[1].TDTR |= ((uint32_t)CAN_TDT1R_TGT);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 80061c0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    CANx->sTxMailBox[2].TDTR |= ((uint32_t)CAN_TDT2R_TGT);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80061d0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
 80061da:	e01d      	b.n	8006218 <CAN_TTComModeCmd+0x8c>
  }
  else
  {
    /* Disable the TTCM mode */
    CANx->MCR &= (uint32_t)(~(uint32_t)CAN_MCR_TTCM);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	601a      	str	r2, [r3, #0]

    /* Reset TGT bits */
    CANx->sTxMailBox[0].TDTR &= ((uint32_t)~CAN_TDT0R_TGT);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 80061ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    CANx->sTxMailBox[1].TDTR &= ((uint32_t)~CAN_TDT1R_TGT);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 80061fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    CANx->sTxMailBox[2].TDTR &= ((uint32_t)~CAN_TDT2R_TGT);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800620e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
  }
}
 8006218:	370c      	adds	r7, #12
 800621a:	46bd      	mov	sp, r7
 800621c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006220:	4770      	bx	lr
 8006222:	bf00      	nop

08006224 <CAN_Transmit>:
  * @param  TxMessage: pointer to a structure which contains CAN Id, CAN DLC and CAN data.
  * @retval The number of the mailbox that is used for transmission or
  *         CAN_TxStatus_NoMailBox if there is no empty mailbox.
  */
uint8_t CAN_Transmit(CAN_TypeDef* CANx, CanTxMsg* TxMessage)
{
 8006224:	b480      	push	{r7}
 8006226:	b085      	sub	sp, #20
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
 800622c:	6039      	str	r1, [r7, #0]
  uint8_t transmit_mailbox = 0;
 800622e:	2300      	movs	r3, #0
 8006230:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_CAN_IDTYPE(TxMessage->IDE));
  assert_param(IS_CAN_RTR(TxMessage->RTR));
  assert_param(IS_CAN_DLC(TxMessage->DLC));

  /* Select one empty transmit mailbox */
  if ((CANx->TSR&CAN_TSR_TME0) == CAN_TSR_TME0)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	689b      	ldr	r3, [r3, #8]
 8006236:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800623a:	2b00      	cmp	r3, #0
 800623c:	d002      	beq.n	8006244 <CAN_Transmit+0x20>
  {
    transmit_mailbox = 0;
 800623e:	2300      	movs	r3, #0
 8006240:	73fb      	strb	r3, [r7, #15]
 8006242:	e013      	b.n	800626c <CAN_Transmit+0x48>
  }
  else if ((CANx->TSR&CAN_TSR_TME1) == CAN_TSR_TME1)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	689b      	ldr	r3, [r3, #8]
 8006248:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800624c:	2b00      	cmp	r3, #0
 800624e:	d002      	beq.n	8006256 <CAN_Transmit+0x32>
  {
    transmit_mailbox = 1;
 8006250:	2301      	movs	r3, #1
 8006252:	73fb      	strb	r3, [r7, #15]
 8006254:	e00a      	b.n	800626c <CAN_Transmit+0x48>
  }
  else if ((CANx->TSR&CAN_TSR_TME2) == CAN_TSR_TME2)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	689b      	ldr	r3, [r3, #8]
 800625a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800625e:	2b00      	cmp	r3, #0
 8006260:	d002      	beq.n	8006268 <CAN_Transmit+0x44>
  {
    transmit_mailbox = 2;
 8006262:	2302      	movs	r3, #2
 8006264:	73fb      	strb	r3, [r7, #15]
 8006266:	e001      	b.n	800626c <CAN_Transmit+0x48>
  }
  else
  {
    transmit_mailbox = CAN_TxStatus_NoMailBox;
 8006268:	2304      	movs	r3, #4
 800626a:	73fb      	strb	r3, [r7, #15]
  }

  if (transmit_mailbox != CAN_TxStatus_NoMailBox)
 800626c:	7bfb      	ldrb	r3, [r7, #15]
 800626e:	2b04      	cmp	r3, #4
 8006270:	f000 8098 	beq.w	80063a4 <CAN_Transmit+0x180>
  {
    /* Set up the Id */
    CANx->sTxMailBox[transmit_mailbox].TIR &= TMIDxR_TXRQ;
 8006274:	7bfb      	ldrb	r3, [r7, #15]
 8006276:	7bfa      	ldrb	r2, [r7, #15]
 8006278:	6879      	ldr	r1, [r7, #4]
 800627a:	3218      	adds	r2, #24
 800627c:	0112      	lsls	r2, r2, #4
 800627e:	440a      	add	r2, r1
 8006280:	6812      	ldr	r2, [r2, #0]
 8006282:	f002 0201 	and.w	r2, r2, #1
 8006286:	6879      	ldr	r1, [r7, #4]
 8006288:	3318      	adds	r3, #24
 800628a:	011b      	lsls	r3, r3, #4
 800628c:	440b      	add	r3, r1
 800628e:	601a      	str	r2, [r3, #0]
    if (TxMessage->IDE == CAN_Id_Standard)
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	7a1b      	ldrb	r3, [r3, #8]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d113      	bne.n	80062c0 <CAN_Transmit+0x9c>
    {
      assert_param(IS_CAN_STDID(TxMessage->StdId));  
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->StdId << 21) | \
 8006298:	7bfb      	ldrb	r3, [r7, #15]
 800629a:	7bfa      	ldrb	r2, [r7, #15]
 800629c:	6879      	ldr	r1, [r7, #4]
 800629e:	3218      	adds	r2, #24
 80062a0:	0112      	lsls	r2, r2, #4
 80062a2:	440a      	add	r2, r1
 80062a4:	6811      	ldr	r1, [r2, #0]
 80062a6:	683a      	ldr	r2, [r7, #0]
 80062a8:	6812      	ldr	r2, [r2, #0]
 80062aa:	0550      	lsls	r0, r2, #21
                                                  TxMessage->RTR);
 80062ac:	683a      	ldr	r2, [r7, #0]
 80062ae:	7a52      	ldrb	r2, [r2, #9]
    /* Set up the Id */
    CANx->sTxMailBox[transmit_mailbox].TIR &= TMIDxR_TXRQ;
    if (TxMessage->IDE == CAN_Id_Standard)
    {
      assert_param(IS_CAN_STDID(TxMessage->StdId));  
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->StdId << 21) | \
 80062b0:	4302      	orrs	r2, r0
 80062b2:	430a      	orrs	r2, r1
 80062b4:	6879      	ldr	r1, [r7, #4]
 80062b6:	3318      	adds	r3, #24
 80062b8:	011b      	lsls	r3, r3, #4
 80062ba:	440b      	add	r3, r1
 80062bc:	601a      	str	r2, [r3, #0]
 80062be:	e015      	b.n	80062ec <CAN_Transmit+0xc8>
                                                  TxMessage->RTR);
    }
    else
    {
      assert_param(IS_CAN_EXTID(TxMessage->ExtId));
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
 80062c0:	7bfb      	ldrb	r3, [r7, #15]
 80062c2:	7bfa      	ldrb	r2, [r7, #15]
 80062c4:	6879      	ldr	r1, [r7, #4]
 80062c6:	3218      	adds	r2, #24
 80062c8:	0112      	lsls	r2, r2, #4
 80062ca:	440a      	add	r2, r1
 80062cc:	6811      	ldr	r1, [r2, #0]
 80062ce:	683a      	ldr	r2, [r7, #0]
 80062d0:	6852      	ldr	r2, [r2, #4]
 80062d2:	00d0      	lsls	r0, r2, #3
                                                  TxMessage->IDE | \
 80062d4:	683a      	ldr	r2, [r7, #0]
 80062d6:	7a12      	ldrb	r2, [r2, #8]
                                                  TxMessage->RTR);
    }
    else
    {
      assert_param(IS_CAN_EXTID(TxMessage->ExtId));
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
 80062d8:	4310      	orrs	r0, r2
                                                  TxMessage->IDE | \
                                                  TxMessage->RTR);
 80062da:	683a      	ldr	r2, [r7, #0]
 80062dc:	7a52      	ldrb	r2, [r2, #9]
    }
    else
    {
      assert_param(IS_CAN_EXTID(TxMessage->ExtId));
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
                                                  TxMessage->IDE | \
 80062de:	4302      	orrs	r2, r0
                                                  TxMessage->RTR);
    }
    else
    {
      assert_param(IS_CAN_EXTID(TxMessage->ExtId));
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
 80062e0:	430a      	orrs	r2, r1
 80062e2:	6879      	ldr	r1, [r7, #4]
 80062e4:	3318      	adds	r3, #24
 80062e6:	011b      	lsls	r3, r3, #4
 80062e8:	440b      	add	r3, r1
 80062ea:	601a      	str	r2, [r3, #0]
                                                  TxMessage->IDE | \
                                                  TxMessage->RTR);
    }
    
    /* Set up the DLC */
    TxMessage->DLC &= (uint8_t)0x0000000F;
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	7a9b      	ldrb	r3, [r3, #10]
 80062f0:	f003 030f 	and.w	r3, r3, #15
 80062f4:	b2da      	uxtb	r2, r3
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	729a      	strb	r2, [r3, #10]
    CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
 80062fa:	7bfb      	ldrb	r3, [r7, #15]
 80062fc:	7bfa      	ldrb	r2, [r7, #15]
 80062fe:	6879      	ldr	r1, [r7, #4]
 8006300:	3218      	adds	r2, #24
 8006302:	0112      	lsls	r2, r2, #4
 8006304:	440a      	add	r2, r1
 8006306:	6852      	ldr	r2, [r2, #4]
 8006308:	f022 020f 	bic.w	r2, r2, #15
 800630c:	6879      	ldr	r1, [r7, #4]
 800630e:	3318      	adds	r3, #24
 8006310:	011b      	lsls	r3, r3, #4
 8006312:	440b      	add	r3, r1
 8006314:	605a      	str	r2, [r3, #4]
    CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;
 8006316:	7bfb      	ldrb	r3, [r7, #15]
 8006318:	7bfa      	ldrb	r2, [r7, #15]
 800631a:	6879      	ldr	r1, [r7, #4]
 800631c:	3218      	adds	r2, #24
 800631e:	0112      	lsls	r2, r2, #4
 8006320:	440a      	add	r2, r1
 8006322:	6851      	ldr	r1, [r2, #4]
 8006324:	683a      	ldr	r2, [r7, #0]
 8006326:	7a92      	ldrb	r2, [r2, #10]
 8006328:	430a      	orrs	r2, r1
 800632a:	6879      	ldr	r1, [r7, #4]
 800632c:	3318      	adds	r3, #24
 800632e:	011b      	lsls	r3, r3, #4
 8006330:	440b      	add	r3, r1
 8006332:	605a      	str	r2, [r3, #4]

    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 8006334:	7bfb      	ldrb	r3, [r7, #15]
 8006336:	683a      	ldr	r2, [r7, #0]
 8006338:	7b92      	ldrb	r2, [r2, #14]
 800633a:	0611      	lsls	r1, r2, #24
                                             ((uint32_t)TxMessage->Data[2] << 16) |
 800633c:	683a      	ldr	r2, [r7, #0]
 800633e:	7b52      	ldrb	r2, [r2, #13]
 8006340:	0412      	lsls	r2, r2, #16
    TxMessage->DLC &= (uint8_t)0x0000000F;
    CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
    CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;

    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 8006342:	4311      	orrs	r1, r2
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
 8006344:	683a      	ldr	r2, [r7, #0]
 8006346:	7b12      	ldrb	r2, [r2, #12]
 8006348:	0212      	lsls	r2, r2, #8
    CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
    CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;

    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
                                             ((uint32_t)TxMessage->Data[2] << 16) |
 800634a:	4311      	orrs	r1, r2
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
                                             ((uint32_t)TxMessage->Data[0]));
 800634c:	683a      	ldr	r2, [r7, #0]
 800634e:	7ad2      	ldrb	r2, [r2, #11]
    CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;

    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
 8006350:	430a      	orrs	r2, r1
    TxMessage->DLC &= (uint8_t)0x0000000F;
    CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
    CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;

    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 8006352:	6879      	ldr	r1, [r7, #4]
 8006354:	011b      	lsls	r3, r3, #4
 8006356:	440b      	add	r3, r1
 8006358:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800635c:	601a      	str	r2, [r3, #0]
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
                                             ((uint32_t)TxMessage->Data[0]));
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 800635e:	7bfb      	ldrb	r3, [r7, #15]
 8006360:	683a      	ldr	r2, [r7, #0]
 8006362:	7c92      	ldrb	r2, [r2, #18]
 8006364:	0611      	lsls	r1, r2, #24
                                             ((uint32_t)TxMessage->Data[6] << 16) |
 8006366:	683a      	ldr	r2, [r7, #0]
 8006368:	7c52      	ldrb	r2, [r2, #17]
 800636a:	0412      	lsls	r2, r2, #16
    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
                                             ((uint32_t)TxMessage->Data[0]));
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 800636c:	4311      	orrs	r1, r2
                                             ((uint32_t)TxMessage->Data[6] << 16) |
                                             ((uint32_t)TxMessage->Data[5] << 8) |
 800636e:	683a      	ldr	r2, [r7, #0]
 8006370:	7c12      	ldrb	r2, [r2, #16]
 8006372:	0212      	lsls	r2, r2, #8
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
                                             ((uint32_t)TxMessage->Data[0]));
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
                                             ((uint32_t)TxMessage->Data[6] << 16) |
 8006374:	4311      	orrs	r1, r2
                                             ((uint32_t)TxMessage->Data[5] << 8) |
                                             ((uint32_t)TxMessage->Data[4]));
 8006376:	683a      	ldr	r2, [r7, #0]
 8006378:	7bd2      	ldrb	r2, [r2, #15]
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
                                             ((uint32_t)TxMessage->Data[0]));
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
                                             ((uint32_t)TxMessage->Data[6] << 16) |
                                             ((uint32_t)TxMessage->Data[5] << 8) |
 800637a:	430a      	orrs	r2, r1
    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
                                             ((uint32_t)TxMessage->Data[0]));
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 800637c:	6879      	ldr	r1, [r7, #4]
 800637e:	011b      	lsls	r3, r3, #4
 8006380:	440b      	add	r3, r1
 8006382:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8006386:	605a      	str	r2, [r3, #4]
                                             ((uint32_t)TxMessage->Data[6] << 16) |
                                             ((uint32_t)TxMessage->Data[5] << 8) |
                                             ((uint32_t)TxMessage->Data[4]));
    /* Request transmission */
    CANx->sTxMailBox[transmit_mailbox].TIR |= TMIDxR_TXRQ;
 8006388:	7bfb      	ldrb	r3, [r7, #15]
 800638a:	7bfa      	ldrb	r2, [r7, #15]
 800638c:	6879      	ldr	r1, [r7, #4]
 800638e:	3218      	adds	r2, #24
 8006390:	0112      	lsls	r2, r2, #4
 8006392:	440a      	add	r2, r1
 8006394:	6812      	ldr	r2, [r2, #0]
 8006396:	f042 0201 	orr.w	r2, r2, #1
 800639a:	6879      	ldr	r1, [r7, #4]
 800639c:	3318      	adds	r3, #24
 800639e:	011b      	lsls	r3, r3, #4
 80063a0:	440b      	add	r3, r1
 80063a2:	601a      	str	r2, [r3, #0]
  }
  return transmit_mailbox;
 80063a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	3714      	adds	r7, #20
 80063aa:	46bd      	mov	sp, r7
 80063ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b0:	4770      	bx	lr
 80063b2:	bf00      	nop

080063b4 <CAN_TransmitStatus>:
  * @param  TransmitMailbox: the number of the mailbox that is used for transmission.
  * @retval CAN_TxStatus_Ok if the CAN driver transmits the message, 
  *         CAN_TxStatus_Failed in an other case.
  */
uint8_t CAN_TransmitStatus(CAN_TypeDef* CANx, uint8_t TransmitMailbox)
{
 80063b4:	b480      	push	{r7}
 80063b6:	b085      	sub	sp, #20
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
 80063bc:	460b      	mov	r3, r1
 80063be:	70fb      	strb	r3, [r7, #3]
  uint32_t state = 0;
 80063c0:	2300      	movs	r3, #0
 80063c2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_TRANSMITMAILBOX(TransmitMailbox));
 
  switch (TransmitMailbox)
 80063c4:	78fb      	ldrb	r3, [r7, #3]
 80063c6:	2b01      	cmp	r3, #1
 80063c8:	d009      	beq.n	80063de <CAN_TransmitStatus+0x2a>
 80063ca:	2b02      	cmp	r3, #2
 80063cc:	d00d      	beq.n	80063ea <CAN_TransmitStatus+0x36>
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d111      	bne.n	80063f6 <CAN_TransmitStatus+0x42>
  {
    case (CAN_TXMAILBOX_0): 
      state =   CANx->TSR &  (CAN_TSR_RQCP0 | CAN_TSR_TXOK0 | CAN_TSR_TME0);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	689a      	ldr	r2, [r3, #8]
 80063d6:	4b26      	ldr	r3, [pc, #152]	; (8006470 <CAN_TransmitStatus+0xbc>)
 80063d8:	4013      	ands	r3, r2
 80063da:	60fb      	str	r3, [r7, #12]
      break;
 80063dc:	e00e      	b.n	80063fc <CAN_TransmitStatus+0x48>
    case (CAN_TXMAILBOX_1): 
      state =   CANx->TSR &  (CAN_TSR_RQCP1 | CAN_TSR_TXOK1 | CAN_TSR_TME1);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	689a      	ldr	r2, [r3, #8]
 80063e2:	4b24      	ldr	r3, [pc, #144]	; (8006474 <CAN_TransmitStatus+0xc0>)
 80063e4:	4013      	ands	r3, r2
 80063e6:	60fb      	str	r3, [r7, #12]
      break;
 80063e8:	e008      	b.n	80063fc <CAN_TransmitStatus+0x48>
    case (CAN_TXMAILBOX_2): 
      state =   CANx->TSR &  (CAN_TSR_RQCP2 | CAN_TSR_TXOK2 | CAN_TSR_TME2);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	689a      	ldr	r2, [r3, #8]
 80063ee:	4b22      	ldr	r3, [pc, #136]	; (8006478 <CAN_TransmitStatus+0xc4>)
 80063f0:	4013      	ands	r3, r2
 80063f2:	60fb      	str	r3, [r7, #12]
      break;
 80063f4:	e002      	b.n	80063fc <CAN_TransmitStatus+0x48>
    default:
      state = CAN_TxStatus_Failed;
 80063f6:	2300      	movs	r3, #0
 80063f8:	60fb      	str	r3, [r7, #12]
      break;
 80063fa:	bf00      	nop
  }
  switch (state)
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	4a1f      	ldr	r2, [pc, #124]	; (800647c <CAN_TransmitStatus+0xc8>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d01b      	beq.n	800643c <CAN_TransmitStatus+0x88>
 8006404:	4a1d      	ldr	r2, [pc, #116]	; (800647c <CAN_TransmitStatus+0xc8>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d808      	bhi.n	800641c <CAN_TransmitStatus+0x68>
 800640a:	4a1d      	ldr	r2, [pc, #116]	; (8006480 <CAN_TransmitStatus+0xcc>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d012      	beq.n	8006436 <CAN_TransmitStatus+0x82>
 8006410:	4a17      	ldr	r2, [pc, #92]	; (8006470 <CAN_TransmitStatus+0xbc>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d018      	beq.n	8006448 <CAN_TransmitStatus+0x94>
 8006416:	2b00      	cmp	r3, #0
 8006418:	d00a      	beq.n	8006430 <CAN_TransmitStatus+0x7c>
 800641a:	e01e      	b.n	800645a <CAN_TransmitStatus+0xa6>
 800641c:	4a19      	ldr	r2, [pc, #100]	; (8006484 <CAN_TransmitStatus+0xd0>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d00f      	beq.n	8006442 <CAN_TransmitStatus+0x8e>
 8006422:	4a15      	ldr	r2, [pc, #84]	; (8006478 <CAN_TransmitStatus+0xc4>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d015      	beq.n	8006454 <CAN_TransmitStatus+0xa0>
 8006428:	4a12      	ldr	r2, [pc, #72]	; (8006474 <CAN_TransmitStatus+0xc0>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d00f      	beq.n	800644e <CAN_TransmitStatus+0x9a>
 800642e:	e014      	b.n	800645a <CAN_TransmitStatus+0xa6>
  {
      /* transmit pending  */
    case (0x0): state = CAN_TxStatus_Pending;
 8006430:	2302      	movs	r3, #2
 8006432:	60fb      	str	r3, [r7, #12]
      break;
 8006434:	e014      	b.n	8006460 <CAN_TransmitStatus+0xac>
      /* transmit failed  */
     case (CAN_TSR_RQCP0 | CAN_TSR_TME0): state = CAN_TxStatus_Failed;
 8006436:	2300      	movs	r3, #0
 8006438:	60fb      	str	r3, [r7, #12]
      break;
 800643a:	e011      	b.n	8006460 <CAN_TransmitStatus+0xac>
     case (CAN_TSR_RQCP1 | CAN_TSR_TME1): state = CAN_TxStatus_Failed;
 800643c:	2300      	movs	r3, #0
 800643e:	60fb      	str	r3, [r7, #12]
      break;
 8006440:	e00e      	b.n	8006460 <CAN_TransmitStatus+0xac>
     case (CAN_TSR_RQCP2 | CAN_TSR_TME2): state = CAN_TxStatus_Failed;
 8006442:	2300      	movs	r3, #0
 8006444:	60fb      	str	r3, [r7, #12]
      break;
 8006446:	e00b      	b.n	8006460 <CAN_TransmitStatus+0xac>
      /* transmit succeeded  */
    case (CAN_TSR_RQCP0 | CAN_TSR_TXOK0 | CAN_TSR_TME0):state = CAN_TxStatus_Ok;
 8006448:	2301      	movs	r3, #1
 800644a:	60fb      	str	r3, [r7, #12]
      break;
 800644c:	e008      	b.n	8006460 <CAN_TransmitStatus+0xac>
    case (CAN_TSR_RQCP1 | CAN_TSR_TXOK1 | CAN_TSR_TME1):state = CAN_TxStatus_Ok;
 800644e:	2301      	movs	r3, #1
 8006450:	60fb      	str	r3, [r7, #12]
      break;
 8006452:	e005      	b.n	8006460 <CAN_TransmitStatus+0xac>
    case (CAN_TSR_RQCP2 | CAN_TSR_TXOK2 | CAN_TSR_TME2):state = CAN_TxStatus_Ok;
 8006454:	2301      	movs	r3, #1
 8006456:	60fb      	str	r3, [r7, #12]
      break;
 8006458:	e002      	b.n	8006460 <CAN_TransmitStatus+0xac>
    default: state = CAN_TxStatus_Failed;
 800645a:	2300      	movs	r3, #0
 800645c:	60fb      	str	r3, [r7, #12]
      break;
 800645e:	bf00      	nop
  }
  return (uint8_t) state;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	b2db      	uxtb	r3, r3
}
 8006464:	4618      	mov	r0, r3
 8006466:	3714      	adds	r7, #20
 8006468:	46bd      	mov	sp, r7
 800646a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646e:	4770      	bx	lr
 8006470:	04000003 	.word	0x04000003
 8006474:	08000300 	.word	0x08000300
 8006478:	10030000 	.word	0x10030000
 800647c:	08000100 	.word	0x08000100
 8006480:	04000001 	.word	0x04000001
 8006484:	10010000 	.word	0x10010000

08006488 <CAN_CancelTransmit>:
  * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
  * @param  Mailbox: Mailbox number.
  * @retval None
  */
void CAN_CancelTransmit(CAN_TypeDef* CANx, uint8_t Mailbox)
{
 8006488:	b480      	push	{r7}
 800648a:	b083      	sub	sp, #12
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
 8006490:	460b      	mov	r3, r1
 8006492:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_TRANSMITMAILBOX(Mailbox));
  /* abort transmission */
  switch (Mailbox)
 8006494:	78fb      	ldrb	r3, [r7, #3]
 8006496:	2b01      	cmp	r3, #1
 8006498:	d00b      	beq.n	80064b2 <CAN_CancelTransmit+0x2a>
 800649a:	2b02      	cmp	r3, #2
 800649c:	d010      	beq.n	80064c0 <CAN_CancelTransmit+0x38>
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d000      	beq.n	80064a4 <CAN_CancelTransmit+0x1c>
    case (CAN_TXMAILBOX_1): CANx->TSR |= CAN_TSR_ABRQ1;
      break;
    case (CAN_TXMAILBOX_2): CANx->TSR |= CAN_TSR_ABRQ2;
      break;
    default:
      break;
 80064a2:	e014      	b.n	80064ce <CAN_CancelTransmit+0x46>
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_TRANSMITMAILBOX(Mailbox));
  /* abort transmission */
  switch (Mailbox)
  {
    case (CAN_TXMAILBOX_0): CANx->TSR |= CAN_TSR_ABRQ0;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	689b      	ldr	r3, [r3, #8]
 80064a8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	609a      	str	r2, [r3, #8]
      break;
 80064b0:	e00d      	b.n	80064ce <CAN_CancelTransmit+0x46>
    case (CAN_TXMAILBOX_1): CANx->TSR |= CAN_TSR_ABRQ1;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	689b      	ldr	r3, [r3, #8]
 80064b6:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	609a      	str	r2, [r3, #8]
      break;
 80064be:	e006      	b.n	80064ce <CAN_CancelTransmit+0x46>
    case (CAN_TXMAILBOX_2): CANx->TSR |= CAN_TSR_ABRQ2;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	689b      	ldr	r3, [r3, #8]
 80064c4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	609a      	str	r2, [r3, #8]
      break;
 80064cc:	bf00      	nop
    default:
      break;
  }
}
 80064ce:	370c      	adds	r7, #12
 80064d0:	46bd      	mov	sp, r7
 80064d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d6:	4770      	bx	lr

080064d8 <CAN_Receive>:
  * @param  RxMessage: pointer to a structure receive frame which contains CAN Id,
  *         CAN DLC, CAN data and FMI number.
  * @retval None
  */
void CAN_Receive(CAN_TypeDef* CANx, uint8_t FIFONumber, CanRxMsg* RxMessage)
{
 80064d8:	b480      	push	{r7}
 80064da:	b085      	sub	sp, #20
 80064dc:	af00      	add	r7, sp, #0
 80064de:	60f8      	str	r0, [r7, #12]
 80064e0:	460b      	mov	r3, r1
 80064e2:	607a      	str	r2, [r7, #4]
 80064e4:	72fb      	strb	r3, [r7, #11]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_FIFO(FIFONumber));
  /* Get the Id */
  RxMessage->IDE = (uint8_t)0x04 & CANx->sFIFOMailBox[FIFONumber].RIR;
 80064e6:	7afb      	ldrb	r3, [r7, #11]
 80064e8:	68fa      	ldr	r2, [r7, #12]
 80064ea:	331b      	adds	r3, #27
 80064ec:	011b      	lsls	r3, r3, #4
 80064ee:	4413      	add	r3, r2
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	b2db      	uxtb	r3, r3
 80064f4:	f003 0304 	and.w	r3, r3, #4
 80064f8:	b2da      	uxtb	r2, r3
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	721a      	strb	r2, [r3, #8]
  if (RxMessage->IDE == CAN_Id_Standard)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	7a1b      	ldrb	r3, [r3, #8]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d109      	bne.n	800651a <CAN_Receive+0x42>
  {
    RxMessage->StdId = (uint32_t)0x000007FF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 21);
 8006506:	7afb      	ldrb	r3, [r7, #11]
 8006508:	68fa      	ldr	r2, [r7, #12]
 800650a:	331b      	adds	r3, #27
 800650c:	011b      	lsls	r3, r3, #4
 800650e:	4413      	add	r3, r2
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	0d5a      	lsrs	r2, r3, #21
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	601a      	str	r2, [r3, #0]
 8006518:	e008      	b.n	800652c <CAN_Receive+0x54>
  }
  else
  {
    RxMessage->ExtId = (uint32_t)0x1FFFFFFF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 3);
 800651a:	7afb      	ldrb	r3, [r7, #11]
 800651c:	68fa      	ldr	r2, [r7, #12]
 800651e:	331b      	adds	r3, #27
 8006520:	011b      	lsls	r3, r3, #4
 8006522:	4413      	add	r3, r2
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	08da      	lsrs	r2, r3, #3
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	605a      	str	r2, [r3, #4]
  }
  
  RxMessage->RTR = (uint8_t)0x02 & CANx->sFIFOMailBox[FIFONumber].RIR;
 800652c:	7afb      	ldrb	r3, [r7, #11]
 800652e:	68fa      	ldr	r2, [r7, #12]
 8006530:	331b      	adds	r3, #27
 8006532:	011b      	lsls	r3, r3, #4
 8006534:	4413      	add	r3, r2
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	b2db      	uxtb	r3, r3
 800653a:	f003 0302 	and.w	r3, r3, #2
 800653e:	b2da      	uxtb	r2, r3
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	725a      	strb	r2, [r3, #9]
  /* Get the DLC */
  RxMessage->DLC = (uint8_t)0x0F & CANx->sFIFOMailBox[FIFONumber].RDTR;
 8006544:	7afb      	ldrb	r3, [r7, #11]
 8006546:	68fa      	ldr	r2, [r7, #12]
 8006548:	331b      	adds	r3, #27
 800654a:	011b      	lsls	r3, r3, #4
 800654c:	4413      	add	r3, r2
 800654e:	685b      	ldr	r3, [r3, #4]
 8006550:	b2db      	uxtb	r3, r3
 8006552:	f003 030f 	and.w	r3, r3, #15
 8006556:	b2da      	uxtb	r2, r3
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	729a      	strb	r2, [r3, #10]
  /* Get the FMI */
  RxMessage->FMI = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDTR >> 8);
 800655c:	7afb      	ldrb	r3, [r7, #11]
 800655e:	68fa      	ldr	r2, [r7, #12]
 8006560:	331b      	adds	r3, #27
 8006562:	011b      	lsls	r3, r3, #4
 8006564:	4413      	add	r3, r2
 8006566:	685b      	ldr	r3, [r3, #4]
 8006568:	0a1b      	lsrs	r3, r3, #8
 800656a:	b2da      	uxtb	r2, r3
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	74da      	strb	r2, [r3, #19]
  /* Get the data field */
  RxMessage->Data[0] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDLR;
 8006570:	7afb      	ldrb	r3, [r7, #11]
 8006572:	68fa      	ldr	r2, [r7, #12]
 8006574:	011b      	lsls	r3, r3, #4
 8006576:	4413      	add	r3, r2
 8006578:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	b2da      	uxtb	r2, r3
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	72da      	strb	r2, [r3, #11]
  RxMessage->Data[1] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 8);
 8006584:	7afb      	ldrb	r3, [r7, #11]
 8006586:	68fa      	ldr	r2, [r7, #12]
 8006588:	011b      	lsls	r3, r3, #4
 800658a:	4413      	add	r3, r2
 800658c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	0a1b      	lsrs	r3, r3, #8
 8006594:	b2da      	uxtb	r2, r3
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	731a      	strb	r2, [r3, #12]
  RxMessage->Data[2] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 16);
 800659a:	7afb      	ldrb	r3, [r7, #11]
 800659c:	68fa      	ldr	r2, [r7, #12]
 800659e:	011b      	lsls	r3, r3, #4
 80065a0:	4413      	add	r3, r2
 80065a2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	0c1b      	lsrs	r3, r3, #16
 80065aa:	b2da      	uxtb	r2, r3
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	735a      	strb	r2, [r3, #13]
  RxMessage->Data[3] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 24);
 80065b0:	7afb      	ldrb	r3, [r7, #11]
 80065b2:	68fa      	ldr	r2, [r7, #12]
 80065b4:	011b      	lsls	r3, r3, #4
 80065b6:	4413      	add	r3, r2
 80065b8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	0e1b      	lsrs	r3, r3, #24
 80065c0:	b2da      	uxtb	r2, r3
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	739a      	strb	r2, [r3, #14]
  RxMessage->Data[4] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDHR;
 80065c6:	7afb      	ldrb	r3, [r7, #11]
 80065c8:	68fa      	ldr	r2, [r7, #12]
 80065ca:	011b      	lsls	r3, r3, #4
 80065cc:	4413      	add	r3, r2
 80065ce:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80065d2:	685b      	ldr	r3, [r3, #4]
 80065d4:	b2da      	uxtb	r2, r3
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	73da      	strb	r2, [r3, #15]
  RxMessage->Data[5] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 8);
 80065da:	7afb      	ldrb	r3, [r7, #11]
 80065dc:	68fa      	ldr	r2, [r7, #12]
 80065de:	011b      	lsls	r3, r3, #4
 80065e0:	4413      	add	r3, r2
 80065e2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80065e6:	685b      	ldr	r3, [r3, #4]
 80065e8:	0a1b      	lsrs	r3, r3, #8
 80065ea:	b2da      	uxtb	r2, r3
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	741a      	strb	r2, [r3, #16]
  RxMessage->Data[6] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 16);
 80065f0:	7afb      	ldrb	r3, [r7, #11]
 80065f2:	68fa      	ldr	r2, [r7, #12]
 80065f4:	011b      	lsls	r3, r3, #4
 80065f6:	4413      	add	r3, r2
 80065f8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	0c1b      	lsrs	r3, r3, #16
 8006600:	b2da      	uxtb	r2, r3
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	745a      	strb	r2, [r3, #17]
  RxMessage->Data[7] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 24);
 8006606:	7afb      	ldrb	r3, [r7, #11]
 8006608:	68fa      	ldr	r2, [r7, #12]
 800660a:	011b      	lsls	r3, r3, #4
 800660c:	4413      	add	r3, r2
 800660e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	0e1b      	lsrs	r3, r3, #24
 8006616:	b2da      	uxtb	r2, r3
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	749a      	strb	r2, [r3, #18]
  /* Release the FIFO */
  /* Release FIFO0 */
  if (FIFONumber == CAN_FIFO0)
 800661c:	7afb      	ldrb	r3, [r7, #11]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d106      	bne.n	8006630 <CAN_Receive+0x158>
  {
    CANx->RF0R |= CAN_RF0R_RFOM0;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	68db      	ldr	r3, [r3, #12]
 8006626:	f043 0220 	orr.w	r2, r3, #32
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	60da      	str	r2, [r3, #12]
 800662e:	e005      	b.n	800663c <CAN_Receive+0x164>
  }
  /* Release FIFO1 */
  else /* FIFONumber == CAN_FIFO1 */
  {
    CANx->RF1R |= CAN_RF1R_RFOM1;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	691b      	ldr	r3, [r3, #16]
 8006634:	f043 0220 	orr.w	r2, r3, #32
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	611a      	str	r2, [r3, #16]
  }
}
 800663c:	3714      	adds	r7, #20
 800663e:	46bd      	mov	sp, r7
 8006640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006644:	4770      	bx	lr
 8006646:	bf00      	nop

08006648 <CAN_FIFORelease>:
  * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
  * @param  FIFONumber: FIFO to release, CAN_FIFO0 or CAN_FIFO1.
  * @retval None
  */
void CAN_FIFORelease(CAN_TypeDef* CANx, uint8_t FIFONumber)
{
 8006648:	b480      	push	{r7}
 800664a:	b083      	sub	sp, #12
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
 8006650:	460b      	mov	r3, r1
 8006652:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_FIFO(FIFONumber));
  /* Release FIFO0 */
  if (FIFONumber == CAN_FIFO0)
 8006654:	78fb      	ldrb	r3, [r7, #3]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d106      	bne.n	8006668 <CAN_FIFORelease+0x20>
  {
    CANx->RF0R |= CAN_RF0R_RFOM0;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	68db      	ldr	r3, [r3, #12]
 800665e:	f043 0220 	orr.w	r2, r3, #32
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	60da      	str	r2, [r3, #12]
 8006666:	e005      	b.n	8006674 <CAN_FIFORelease+0x2c>
  }
  /* Release FIFO1 */
  else /* FIFONumber == CAN_FIFO1 */
  {
    CANx->RF1R |= CAN_RF1R_RFOM1;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	691b      	ldr	r3, [r3, #16]
 800666c:	f043 0220 	orr.w	r2, r3, #32
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	611a      	str	r2, [r3, #16]
  }
}
 8006674:	370c      	adds	r7, #12
 8006676:	46bd      	mov	sp, r7
 8006678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667c:	4770      	bx	lr
 800667e:	bf00      	nop

08006680 <CAN_MessagePending>:
  * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
  * @param  FIFONumber: Receive FIFO number, CAN_FIFO0 or CAN_FIFO1.
  * @retval NbMessage : which is the number of pending message.
  */
uint8_t CAN_MessagePending(CAN_TypeDef* CANx, uint8_t FIFONumber)
{
 8006680:	b480      	push	{r7}
 8006682:	b085      	sub	sp, #20
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
 8006688:	460b      	mov	r3, r1
 800668a:	70fb      	strb	r3, [r7, #3]
  uint8_t message_pending=0;
 800668c:	2300      	movs	r3, #0
 800668e:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_FIFO(FIFONumber));
  if (FIFONumber == CAN_FIFO0)
 8006690:	78fb      	ldrb	r3, [r7, #3]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d106      	bne.n	80066a4 <CAN_MessagePending+0x24>
  {
    message_pending = (uint8_t)(CANx->RF0R&(uint32_t)0x03);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	68db      	ldr	r3, [r3, #12]
 800669a:	b2db      	uxtb	r3, r3
 800669c:	f003 0303 	and.w	r3, r3, #3
 80066a0:	73fb      	strb	r3, [r7, #15]
 80066a2:	e00b      	b.n	80066bc <CAN_MessagePending+0x3c>
  }
  else if (FIFONumber == CAN_FIFO1)
 80066a4:	78fb      	ldrb	r3, [r7, #3]
 80066a6:	2b01      	cmp	r3, #1
 80066a8:	d106      	bne.n	80066b8 <CAN_MessagePending+0x38>
  {
    message_pending = (uint8_t)(CANx->RF1R&(uint32_t)0x03);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	691b      	ldr	r3, [r3, #16]
 80066ae:	b2db      	uxtb	r3, r3
 80066b0:	f003 0303 	and.w	r3, r3, #3
 80066b4:	73fb      	strb	r3, [r7, #15]
 80066b6:	e001      	b.n	80066bc <CAN_MessagePending+0x3c>
  }
  else
  {
    message_pending = 0;
 80066b8:	2300      	movs	r3, #0
 80066ba:	73fb      	strb	r3, [r7, #15]
  }
  return message_pending;
 80066bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80066be:	4618      	mov	r0, r3
 80066c0:	3714      	adds	r7, #20
 80066c2:	46bd      	mov	sp, r7
 80066c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c8:	4770      	bx	lr
 80066ca:	bf00      	nop

080066cc <CAN_OperatingModeRequest>:
  * @retval status of the requested mode which can be 
  *         - CAN_ModeStatus_Failed:  CAN failed entering the specific mode 
  *         - CAN_ModeStatus_Success: CAN Succeed entering the specific mode 
  */
uint8_t CAN_OperatingModeRequest(CAN_TypeDef* CANx, uint8_t CAN_OperatingMode)
{
 80066cc:	b480      	push	{r7}
 80066ce:	b085      	sub	sp, #20
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
 80066d4:	460b      	mov	r3, r1
 80066d6:	70fb      	strb	r3, [r7, #3]
  uint8_t status = CAN_ModeStatus_Failed;
 80066d8:	2300      	movs	r3, #0
 80066da:	73fb      	strb	r3, [r7, #15]
  
  /* Timeout for INAK or also for SLAK bits*/
  uint32_t timeout = INAK_TIMEOUT; 
 80066dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80066e0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_OPERATING_MODE(CAN_OperatingMode));

  if (CAN_OperatingMode == CAN_OperatingMode_Initialization)
 80066e2:	78fb      	ldrb	r3, [r7, #3]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d120      	bne.n	800672a <CAN_OperatingModeRequest+0x5e>
  {
    /* Request initialisation */
    CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_SLEEP)) | CAN_MCR_INRQ);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f023 0303 	bic.w	r3, r3, #3
 80066f0:	f043 0201 	orr.w	r2, r3, #1
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	601a      	str	r2, [r3, #0]

    /* Wait the acknowledge */
    while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK) && (timeout != 0))
 80066f8:	e002      	b.n	8006700 <CAN_OperatingModeRequest+0x34>
    {
      timeout--;
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	3b01      	subs	r3, #1
 80066fe:	60bb      	str	r3, [r7, #8]
  {
    /* Request initialisation */
    CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_SLEEP)) | CAN_MCR_INRQ);

    /* Wait the acknowledge */
    while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK) && (timeout != 0))
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	f003 0303 	and.w	r3, r3, #3
 8006708:	2b01      	cmp	r3, #1
 800670a:	d002      	beq.n	8006712 <CAN_OperatingModeRequest+0x46>
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d1f3      	bne.n	80066fa <CAN_OperatingModeRequest+0x2e>
    {
      timeout--;
    }
    if ((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	685b      	ldr	r3, [r3, #4]
 8006716:	f003 0303 	and.w	r3, r3, #3
 800671a:	2b01      	cmp	r3, #1
 800671c:	d002      	beq.n	8006724 <CAN_OperatingModeRequest+0x58>
    {
      status = CAN_ModeStatus_Failed;
 800671e:	2300      	movs	r3, #0
 8006720:	73fb      	strb	r3, [r7, #15]
 8006722:	e04a      	b.n	80067ba <CAN_OperatingModeRequest+0xee>
    }
    else
    {
      status = CAN_ModeStatus_Success;
 8006724:	2301      	movs	r3, #1
 8006726:	73fb      	strb	r3, [r7, #15]
 8006728:	e047      	b.n	80067ba <CAN_OperatingModeRequest+0xee>
    }
  }
  else  if (CAN_OperatingMode == CAN_OperatingMode_Normal)
 800672a:	78fb      	ldrb	r3, [r7, #3]
 800672c:	2b01      	cmp	r3, #1
 800672e:	d11e      	bne.n	800676e <CAN_OperatingModeRequest+0xa2>
  {
    /* Request leave initialisation and sleep mode  and enter Normal mode */
    CANx->MCR &= (uint32_t)(~(CAN_MCR_SLEEP|CAN_MCR_INRQ));
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f023 0203 	bic.w	r2, r3, #3
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	601a      	str	r2, [r3, #0]

    /* Wait the acknowledge */
    while (((CANx->MSR & CAN_MODE_MASK) != 0) && (timeout!=0))
 800673c:	e002      	b.n	8006744 <CAN_OperatingModeRequest+0x78>
    {
      timeout--;
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	3b01      	subs	r3, #1
 8006742:	60bb      	str	r3, [r7, #8]
  {
    /* Request leave initialisation and sleep mode  and enter Normal mode */
    CANx->MCR &= (uint32_t)(~(CAN_MCR_SLEEP|CAN_MCR_INRQ));

    /* Wait the acknowledge */
    while (((CANx->MSR & CAN_MODE_MASK) != 0) && (timeout!=0))
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	685b      	ldr	r3, [r3, #4]
 8006748:	f003 0303 	and.w	r3, r3, #3
 800674c:	2b00      	cmp	r3, #0
 800674e:	d002      	beq.n	8006756 <CAN_OperatingModeRequest+0x8a>
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d1f3      	bne.n	800673e <CAN_OperatingModeRequest+0x72>
    {
      timeout--;
    }
    if ((CANx->MSR & CAN_MODE_MASK) != 0)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	685b      	ldr	r3, [r3, #4]
 800675a:	f003 0303 	and.w	r3, r3, #3
 800675e:	2b00      	cmp	r3, #0
 8006760:	d002      	beq.n	8006768 <CAN_OperatingModeRequest+0x9c>
    {
      status = CAN_ModeStatus_Failed;
 8006762:	2300      	movs	r3, #0
 8006764:	73fb      	strb	r3, [r7, #15]
 8006766:	e028      	b.n	80067ba <CAN_OperatingModeRequest+0xee>
    }
    else
    {
      status = CAN_ModeStatus_Success;
 8006768:	2301      	movs	r3, #1
 800676a:	73fb      	strb	r3, [r7, #15]
 800676c:	e025      	b.n	80067ba <CAN_OperatingModeRequest+0xee>
    }
  }
  else  if (CAN_OperatingMode == CAN_OperatingMode_Sleep)
 800676e:	78fb      	ldrb	r3, [r7, #3]
 8006770:	2b02      	cmp	r3, #2
 8006772:	d120      	bne.n	80067b6 <CAN_OperatingModeRequest+0xea>
  {
    /* Request Sleep mode */
    CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_INRQ)) | CAN_MCR_SLEEP);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f023 0303 	bic.w	r3, r3, #3
 800677c:	f043 0202 	orr.w	r2, r3, #2
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	601a      	str	r2, [r3, #0]

    /* Wait the acknowledge */
    while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK) && (timeout!=0))
 8006784:	e002      	b.n	800678c <CAN_OperatingModeRequest+0xc0>
    {
      timeout--;
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	3b01      	subs	r3, #1
 800678a:	60bb      	str	r3, [r7, #8]
  {
    /* Request Sleep mode */
    CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_INRQ)) | CAN_MCR_SLEEP);

    /* Wait the acknowledge */
    while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK) && (timeout!=0))
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	685b      	ldr	r3, [r3, #4]
 8006790:	f003 0303 	and.w	r3, r3, #3
 8006794:	2b02      	cmp	r3, #2
 8006796:	d002      	beq.n	800679e <CAN_OperatingModeRequest+0xd2>
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d1f3      	bne.n	8006786 <CAN_OperatingModeRequest+0xba>
    {
      timeout--;
    }
    if ((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	685b      	ldr	r3, [r3, #4]
 80067a2:	f003 0303 	and.w	r3, r3, #3
 80067a6:	2b02      	cmp	r3, #2
 80067a8:	d002      	beq.n	80067b0 <CAN_OperatingModeRequest+0xe4>
    {
      status = CAN_ModeStatus_Failed;
 80067aa:	2300      	movs	r3, #0
 80067ac:	73fb      	strb	r3, [r7, #15]
 80067ae:	e004      	b.n	80067ba <CAN_OperatingModeRequest+0xee>
    }
    else
    {
      status = CAN_ModeStatus_Success;
 80067b0:	2301      	movs	r3, #1
 80067b2:	73fb      	strb	r3, [r7, #15]
 80067b4:	e001      	b.n	80067ba <CAN_OperatingModeRequest+0xee>
    }
  }
  else
  {
    status = CAN_ModeStatus_Failed;
 80067b6:	2300      	movs	r3, #0
 80067b8:	73fb      	strb	r3, [r7, #15]
  }

  return  (uint8_t) status;
 80067ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80067bc:	4618      	mov	r0, r3
 80067be:	3714      	adds	r7, #20
 80067c0:	46bd      	mov	sp, r7
 80067c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c6:	4770      	bx	lr

080067c8 <CAN_Sleep>:
  * @brief  Enters the Sleep (low power) mode.
  * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
  * @retval CAN_Sleep_Ok if sleep entered, CAN_Sleep_Failed otherwise.
  */
uint8_t CAN_Sleep(CAN_TypeDef* CANx)
{
 80067c8:	b480      	push	{r7}
 80067ca:	b085      	sub	sp, #20
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
  uint8_t sleepstatus = CAN_Sleep_Failed;
 80067d0:	2300      	movs	r3, #0
 80067d2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
    
  /* Request Sleep mode */
   CANx->MCR = (((CANx->MCR) & (uint32_t)(~(uint32_t)CAN_MCR_INRQ)) | CAN_MCR_SLEEP);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f023 0303 	bic.w	r3, r3, #3
 80067dc:	f043 0202 	orr.w	r2, r3, #2
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	601a      	str	r2, [r3, #0]
   
  /* Sleep mode status */
  if ((CANx->MSR & (CAN_MSR_SLAK|CAN_MSR_INAK)) == CAN_MSR_SLAK)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	685b      	ldr	r3, [r3, #4]
 80067e8:	f003 0303 	and.w	r3, r3, #3
 80067ec:	2b02      	cmp	r3, #2
 80067ee:	d101      	bne.n	80067f4 <CAN_Sleep+0x2c>
  {
    /* Sleep mode not entered */
    sleepstatus =  CAN_Sleep_Ok;
 80067f0:	2301      	movs	r3, #1
 80067f2:	73fb      	strb	r3, [r7, #15]
  }
  /* return sleep mode status */
   return (uint8_t)sleepstatus;
 80067f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	3714      	adds	r7, #20
 80067fa:	46bd      	mov	sp, r7
 80067fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006800:	4770      	bx	lr
 8006802:	bf00      	nop

08006804 <CAN_WakeUp>:
  * @brief  Wakes up the CAN peripheral from sleep mode .
  * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
  * @retval CAN_WakeUp_Ok if sleep mode left, CAN_WakeUp_Failed otherwise.
  */
uint8_t CAN_WakeUp(CAN_TypeDef* CANx)
{
 8006804:	b480      	push	{r7}
 8006806:	b085      	sub	sp, #20
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
  uint32_t wait_slak = SLAK_TIMEOUT;
 800680c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006810:	60fb      	str	r3, [r7, #12]
  uint8_t wakeupstatus = CAN_WakeUp_Failed;
 8006812:	2300      	movs	r3, #0
 8006814:	72fb      	strb	r3, [r7, #11]
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
    
  /* Wake up request */
  CANx->MCR &= ~(uint32_t)CAN_MCR_SLEEP;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f023 0202 	bic.w	r2, r3, #2
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	601a      	str	r2, [r3, #0]
    
  /* Sleep mode status */
  while(((CANx->MSR & CAN_MSR_SLAK) == CAN_MSR_SLAK)&&(wait_slak!=0x00))
 8006822:	e002      	b.n	800682a <CAN_WakeUp+0x26>
  {
   wait_slak--;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	3b01      	subs	r3, #1
 8006828:	60fb      	str	r3, [r7, #12]
    
  /* Wake up request */
  CANx->MCR &= ~(uint32_t)CAN_MCR_SLEEP;
    
  /* Sleep mode status */
  while(((CANx->MSR & CAN_MSR_SLAK) == CAN_MSR_SLAK)&&(wait_slak!=0x00))
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	f003 0302 	and.w	r3, r3, #2
 8006832:	2b00      	cmp	r3, #0
 8006834:	d002      	beq.n	800683c <CAN_WakeUp+0x38>
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d1f3      	bne.n	8006824 <CAN_WakeUp+0x20>
  {
   wait_slak--;
  }
  if((CANx->MSR & CAN_MSR_SLAK) != CAN_MSR_SLAK)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	f003 0302 	and.w	r3, r3, #2
 8006844:	2b00      	cmp	r3, #0
 8006846:	d101      	bne.n	800684c <CAN_WakeUp+0x48>
  {
   /* wake up done : Sleep mode exited */
    wakeupstatus = CAN_WakeUp_Ok;
 8006848:	2301      	movs	r3, #1
 800684a:	72fb      	strb	r3, [r7, #11]
  }
  /* return wakeup status */
  return (uint8_t)wakeupstatus;
 800684c:	7afb      	ldrb	r3, [r7, #11]
}
 800684e:	4618      	mov	r0, r3
 8006850:	3714      	adds	r7, #20
 8006852:	46bd      	mov	sp, r7
 8006854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006858:	4770      	bx	lr
 800685a:	bf00      	nop

0800685c <CAN_GetLastErrorCode>:
  *          - CAN_ERRORCODE_BitDominantErr: Bit Dominant Error
  *          - CAN_ERRORCODE_CRCErr: CRC Error
  *          - CAN_ERRORCODE_SoftwareSetErr: Software Set Error  
  */
uint8_t CAN_GetLastErrorCode(CAN_TypeDef* CANx)
{
 800685c:	b480      	push	{r7}
 800685e:	b085      	sub	sp, #20
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
  uint8_t errorcode=0;
 8006864:	2300      	movs	r3, #0
 8006866:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  
  /* Get the error code*/
  errorcode = (((uint8_t)CANx->ESR) & (uint8_t)CAN_ESR_LEC);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	699b      	ldr	r3, [r3, #24]
 800686c:	b2db      	uxtb	r3, r3
 800686e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006872:	73fb      	strb	r3, [r7, #15]
  
  /* Return the error code*/
  return errorcode;
 8006874:	7bfb      	ldrb	r3, [r7, #15]
}
 8006876:	4618      	mov	r0, r3
 8006878:	3714      	adds	r7, #20
 800687a:	46bd      	mov	sp, r7
 800687c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006880:	4770      	bx	lr
 8006882:	bf00      	nop

08006884 <CAN_GetReceiveErrorCounter>:
  *         error passive state.  
  * @param  CANx: where x can be 1 or 2 to to select the CAN peripheral.  
  * @retval CAN Receive Error Counter. 
  */
uint8_t CAN_GetReceiveErrorCounter(CAN_TypeDef* CANx)
{
 8006884:	b480      	push	{r7}
 8006886:	b085      	sub	sp, #20
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
  uint8_t counter=0;
 800688c:	2300      	movs	r3, #0
 800688e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  
  /* Get the Receive Error Counter*/
  counter = (uint8_t)((CANx->ESR & CAN_ESR_REC)>> 24);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	699b      	ldr	r3, [r3, #24]
 8006894:	0e1b      	lsrs	r3, r3, #24
 8006896:	73fb      	strb	r3, [r7, #15]
  
  /* Return the Receive Error Counter*/
  return counter;
 8006898:	7bfb      	ldrb	r3, [r7, #15]
}
 800689a:	4618      	mov	r0, r3
 800689c:	3714      	adds	r7, #20
 800689e:	46bd      	mov	sp, r7
 80068a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a4:	4770      	bx	lr
 80068a6:	bf00      	nop

080068a8 <CAN_GetLSBTransmitErrorCounter>:
  * @brief  Returns the LSB of the 9-bit CANx Transmit Error Counter(TEC).
  * @param  CANx: where x can be 1 or 2 to to select the CAN peripheral.
  * @retval LSB of the 9-bit CAN Transmit Error Counter. 
  */
uint8_t CAN_GetLSBTransmitErrorCounter(CAN_TypeDef* CANx)
{
 80068a8:	b480      	push	{r7}
 80068aa:	b085      	sub	sp, #20
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  uint8_t counter=0;
 80068b0:	2300      	movs	r3, #0
 80068b2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  
  /* Get the LSB of the 9-bit CANx Transmit Error Counter(TEC) */
  counter = (uint8_t)((CANx->ESR & CAN_ESR_TEC)>> 16);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	699b      	ldr	r3, [r3, #24]
 80068b8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80068bc:	0c1b      	lsrs	r3, r3, #16
 80068be:	73fb      	strb	r3, [r7, #15]
  
  /* Return the LSB of the 9-bit CANx Transmit Error Counter(TEC) */
  return counter;
 80068c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3714      	adds	r7, #20
 80068c6:	46bd      	mov	sp, r7
 80068c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068cc:	4770      	bx	lr
 80068ce:	bf00      	nop

080068d0 <CAN_ITConfig>:
  * @param  NewState: new state of the CAN interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void CAN_ITConfig(CAN_TypeDef* CANx, uint32_t CAN_IT, FunctionalState NewState)
{
 80068d0:	b480      	push	{r7}
 80068d2:	b085      	sub	sp, #20
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	60f8      	str	r0, [r7, #12]
 80068d8:	60b9      	str	r1, [r7, #8]
 80068da:	4613      	mov	r3, r2
 80068dc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_IT(CAN_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80068de:	79fb      	ldrb	r3, [r7, #7]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d006      	beq.n	80068f2 <CAN_ITConfig+0x22>
  {
    /* Enable the selected CANx interrupt */
    CANx->IER |= CAN_IT;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	695a      	ldr	r2, [r3, #20]
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	431a      	orrs	r2, r3
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	615a      	str	r2, [r3, #20]
 80068f0:	e006      	b.n	8006900 <CAN_ITConfig+0x30>
  }
  else
  {
    /* Disable the selected CANx interrupt */
    CANx->IER &= ~CAN_IT;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	695a      	ldr	r2, [r3, #20]
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	43db      	mvns	r3, r3
 80068fa:	401a      	ands	r2, r3
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	615a      	str	r2, [r3, #20]
  }
}
 8006900:	3714      	adds	r7, #20
 8006902:	46bd      	mov	sp, r7
 8006904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006908:	4770      	bx	lr
 800690a:	bf00      	nop

0800690c <CAN_GetFlagStatus>:
  *            @arg CAN_FLAG_BOF: Bus-Off Flag    
  *            @arg CAN_FLAG_LEC: Last error code Flag      
  * @retval The new state of CAN_FLAG (SET or RESET).
  */
FlagStatus CAN_GetFlagStatus(CAN_TypeDef* CANx, uint32_t CAN_FLAG)
{
 800690c:	b480      	push	{r7}
 800690e:	b085      	sub	sp, #20
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
 8006914:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8006916:	2300      	movs	r3, #0
 8006918:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_GET_FLAG(CAN_FLAG));
  

  if((CAN_FLAG & CAN_FLAGS_ESR) != (uint32_t)RESET)
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 8006920:	2b00      	cmp	r3, #0
 8006922:	d00d      	beq.n	8006940 <CAN_GetFlagStatus+0x34>
  { 
    /* Check the status of the specified CAN flag */
    if ((CANx->ESR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	699a      	ldr	r2, [r3, #24]
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	4013      	ands	r3, r2
 800692c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006930:	2b00      	cmp	r3, #0
 8006932:	d002      	beq.n	800693a <CAN_GetFlagStatus+0x2e>
    { 
      /* CAN_FLAG is set */
      bitstatus = SET;
 8006934:	2301      	movs	r3, #1
 8006936:	73fb      	strb	r3, [r7, #15]
 8006938:	e048      	b.n	80069cc <CAN_GetFlagStatus+0xc0>
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
 800693a:	2300      	movs	r3, #0
 800693c:	73fb      	strb	r3, [r7, #15]
 800693e:	e045      	b.n	80069cc <CAN_GetFlagStatus+0xc0>
    }
  }
  else if((CAN_FLAG & CAN_FLAGS_MSR) != (uint32_t)RESET)
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006946:	2b00      	cmp	r3, #0
 8006948:	d00d      	beq.n	8006966 <CAN_GetFlagStatus+0x5a>
  { 
    /* Check the status of the specified CAN flag */
    if ((CANx->MSR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	685a      	ldr	r2, [r3, #4]
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	4013      	ands	r3, r2
 8006952:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006956:	2b00      	cmp	r3, #0
 8006958:	d002      	beq.n	8006960 <CAN_GetFlagStatus+0x54>
    { 
      /* CAN_FLAG is set */
      bitstatus = SET;
 800695a:	2301      	movs	r3, #1
 800695c:	73fb      	strb	r3, [r7, #15]
 800695e:	e035      	b.n	80069cc <CAN_GetFlagStatus+0xc0>
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
 8006960:	2300      	movs	r3, #0
 8006962:	73fb      	strb	r3, [r7, #15]
 8006964:	e032      	b.n	80069cc <CAN_GetFlagStatus+0xc0>
    }
  }
  else if((CAN_FLAG & CAN_FLAGS_TSR) != (uint32_t)RESET)
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800696c:	2b00      	cmp	r3, #0
 800696e:	d00d      	beq.n	800698c <CAN_GetFlagStatus+0x80>
  { 
    /* Check the status of the specified CAN flag */
    if ((CANx->TSR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	689a      	ldr	r2, [r3, #8]
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	4013      	ands	r3, r2
 8006978:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800697c:	2b00      	cmp	r3, #0
 800697e:	d002      	beq.n	8006986 <CAN_GetFlagStatus+0x7a>
    { 
      /* CAN_FLAG is set */
      bitstatus = SET;
 8006980:	2301      	movs	r3, #1
 8006982:	73fb      	strb	r3, [r7, #15]
 8006984:	e022      	b.n	80069cc <CAN_GetFlagStatus+0xc0>
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
 8006986:	2300      	movs	r3, #0
 8006988:	73fb      	strb	r3, [r7, #15]
 800698a:	e01f      	b.n	80069cc <CAN_GetFlagStatus+0xc0>
    }
  }
  else if((CAN_FLAG & CAN_FLAGS_RF0R) != (uint32_t)RESET)
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006992:	2b00      	cmp	r3, #0
 8006994:	d00d      	beq.n	80069b2 <CAN_GetFlagStatus+0xa6>
  { 
    /* Check the status of the specified CAN flag */
    if ((CANx->RF0R & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	68da      	ldr	r2, [r3, #12]
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	4013      	ands	r3, r2
 800699e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d002      	beq.n	80069ac <CAN_GetFlagStatus+0xa0>
    { 
      /* CAN_FLAG is set */
      bitstatus = SET;
 80069a6:	2301      	movs	r3, #1
 80069a8:	73fb      	strb	r3, [r7, #15]
 80069aa:	e00f      	b.n	80069cc <CAN_GetFlagStatus+0xc0>
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
 80069ac:	2300      	movs	r3, #0
 80069ae:	73fb      	strb	r3, [r7, #15]
 80069b0:	e00c      	b.n	80069cc <CAN_GetFlagStatus+0xc0>
    }
  }
  else /* If(CAN_FLAG & CAN_FLAGS_RF1R != (uint32_t)RESET) */
  { 
    /* Check the status of the specified CAN flag */
    if ((uint32_t)(CANx->RF1R & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	691a      	ldr	r2, [r3, #16]
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	4013      	ands	r3, r2
 80069ba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d002      	beq.n	80069c8 <CAN_GetFlagStatus+0xbc>
    { 
      /* CAN_FLAG is set */
      bitstatus = SET;
 80069c2:	2301      	movs	r3, #1
 80069c4:	73fb      	strb	r3, [r7, #15]
 80069c6:	e001      	b.n	80069cc <CAN_GetFlagStatus+0xc0>
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
 80069c8:	2300      	movs	r3, #0
 80069ca:	73fb      	strb	r3, [r7, #15]
    }
  }
  /* Return the CAN_FLAG status */
  return  bitstatus;
 80069cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80069ce:	4618      	mov	r0, r3
 80069d0:	3714      	adds	r7, #20
 80069d2:	46bd      	mov	sp, r7
 80069d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d8:	4770      	bx	lr
 80069da:	bf00      	nop

080069dc <CAN_ClearFlag>:
  *            @arg CAN_FLAG_SLAK: Sleep acknowledge Flag    
  *            @arg CAN_FLAG_LEC: Last error code Flag        
  * @retval None
  */
void CAN_ClearFlag(CAN_TypeDef* CANx, uint32_t CAN_FLAG)
{
 80069dc:	b480      	push	{r7}
 80069de:	b085      	sub	sp, #20
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
 80069e4:	6039      	str	r1, [r7, #0]
  uint32_t flagtmp=0;
 80069e6:	2300      	movs	r3, #0
 80069e8:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_CLEAR_FLAG(CAN_FLAG));
  
  if (CAN_FLAG == CAN_FLAG_LEC) /* ESR register */
 80069ea:	683a      	ldr	r2, [r7, #0]
 80069ec:	4b16      	ldr	r3, [pc, #88]	; (8006a48 <CAN_ClearFlag+0x6c>)
 80069ee:	429a      	cmp	r2, r3
 80069f0:	d103      	bne.n	80069fa <CAN_ClearFlag+0x1e>
  {
    /* Clear the selected CAN flags */
    CANx->ESR = (uint32_t)RESET;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2200      	movs	r2, #0
 80069f6:	619a      	str	r2, [r3, #24]
 80069f8:	e021      	b.n	8006a3e <CAN_ClearFlag+0x62>
  }
  else /* MSR or TSR or RF0R or RF1R */
  {
    flagtmp = CAN_FLAG & 0x000FFFFF;
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006a00:	60fb      	str	r3, [r7, #12]

    if ((CAN_FLAG & CAN_FLAGS_RF0R)!=(uint32_t)RESET)
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d003      	beq.n	8006a14 <CAN_ClearFlag+0x38>
    {
      /* Receive Flags */
      CANx->RF0R = (uint32_t)(flagtmp);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	68fa      	ldr	r2, [r7, #12]
 8006a10:	60da      	str	r2, [r3, #12]
 8006a12:	e014      	b.n	8006a3e <CAN_ClearFlag+0x62>
    }
    else if ((CAN_FLAG & CAN_FLAGS_RF1R)!=(uint32_t)RESET)
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d003      	beq.n	8006a26 <CAN_ClearFlag+0x4a>
    {
      /* Receive Flags */
      CANx->RF1R = (uint32_t)(flagtmp);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	68fa      	ldr	r2, [r7, #12]
 8006a22:	611a      	str	r2, [r3, #16]
 8006a24:	e00b      	b.n	8006a3e <CAN_ClearFlag+0x62>
    }
    else if ((CAN_FLAG & CAN_FLAGS_TSR)!=(uint32_t)RESET)
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d003      	beq.n	8006a38 <CAN_ClearFlag+0x5c>
    {
      /* Transmit Flags */
      CANx->TSR = (uint32_t)(flagtmp);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	68fa      	ldr	r2, [r7, #12]
 8006a34:	609a      	str	r2, [r3, #8]
 8006a36:	e002      	b.n	8006a3e <CAN_ClearFlag+0x62>
    }
    else /* If((CAN_FLAG & CAN_FLAGS_MSR)!=(uint32_t)RESET) */
    {
      /* Operating mode Flags */
      CANx->MSR = (uint32_t)(flagtmp);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	68fa      	ldr	r2, [r7, #12]
 8006a3c:	605a      	str	r2, [r3, #4]
    }
  }
}
 8006a3e:	3714      	adds	r7, #20
 8006a40:	46bd      	mov	sp, r7
 8006a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a46:	4770      	bx	lr
 8006a48:	30f00070 	.word	0x30f00070

08006a4c <CAN_GetITStatus>:
  *            @arg CAN_IT_LEC: Last error code Interrupt
  *            @arg CAN_IT_ERR: Error Interrupt
  * @retval The current state of CAN_IT (SET or RESET).
  */
ITStatus CAN_GetITStatus(CAN_TypeDef* CANx, uint32_t CAN_IT)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b084      	sub	sp, #16
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
 8006a54:	6039      	str	r1, [r7, #0]
  ITStatus itstatus = RESET;
 8006a56:	2300      	movs	r3, #0
 8006a58:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_IT(CAN_IT));
  
  /* check the interrupt enable bit */
 if((CANx->IER & CAN_IT) != RESET)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	695a      	ldr	r2, [r3, #20]
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	4013      	ands	r3, r2
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	f000 80b2 	beq.w	8006bcc <CAN_GetITStatus+0x180>
 {
   /* in case the Interrupt is enabled, .... */
    switch (CAN_IT)
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	2b40      	cmp	r3, #64	; 0x40
 8006a6c:	d062      	beq.n	8006b34 <CAN_GetITStatus+0xe8>
 8006a6e:	2b40      	cmp	r3, #64	; 0x40
 8006a70:	d80f      	bhi.n	8006a92 <CAN_GetITStatus+0x46>
 8006a72:	2b04      	cmp	r3, #4
 8006a74:	d03a      	beq.n	8006aec <CAN_GetITStatus+0xa0>
 8006a76:	2b04      	cmp	r3, #4
 8006a78:	d804      	bhi.n	8006a84 <CAN_GetITStatus+0x38>
 8006a7a:	2b01      	cmp	r3, #1
 8006a7c:	d024      	beq.n	8006ac8 <CAN_GetITStatus+0x7c>
 8006a7e:	2b02      	cmp	r3, #2
 8006a80:	d02b      	beq.n	8006ada <CAN_GetITStatus+0x8e>
 8006a82:	e09f      	b.n	8006bc4 <CAN_GetITStatus+0x178>
 8006a84:	2b10      	cmp	r3, #16
 8006a86:	d043      	beq.n	8006b10 <CAN_GetITStatus+0xc4>
 8006a88:	2b20      	cmp	r3, #32
 8006a8a:	d04a      	beq.n	8006b22 <CAN_GetITStatus+0xd6>
 8006a8c:	2b08      	cmp	r3, #8
 8006a8e:	d036      	beq.n	8006afe <CAN_GetITStatus+0xb2>
 8006a90:	e098      	b.n	8006bc4 <CAN_GetITStatus+0x178>
 8006a92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a96:	f000 8083 	beq.w	8006ba0 <CAN_GetITStatus+0x154>
 8006a9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a9e:	d809      	bhi.n	8006ab4 <CAN_GetITStatus+0x68>
 8006aa0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006aa4:	d06a      	beq.n	8006b7c <CAN_GetITStatus+0x130>
 8006aa6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006aaa:	d070      	beq.n	8006b8e <CAN_GetITStatus+0x142>
 8006aac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ab0:	d05b      	beq.n	8006b6a <CAN_GetITStatus+0x11e>
 8006ab2:	e087      	b.n	8006bc4 <CAN_GetITStatus+0x178>
 8006ab4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ab8:	d045      	beq.n	8006b46 <CAN_GetITStatus+0xfa>
 8006aba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006abe:	d04b      	beq.n	8006b58 <CAN_GetITStatus+0x10c>
 8006ac0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ac4:	d075      	beq.n	8006bb2 <CAN_GetITStatus+0x166>
 8006ac6:	e07d      	b.n	8006bc4 <CAN_GetITStatus+0x178>
    {
      case CAN_IT_TME:
        /* Check CAN_TSR_RQCPx bits */
        itstatus = CheckITStatus(CANx->TSR, CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2);  
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	689b      	ldr	r3, [r3, #8]
 8006acc:	4618      	mov	r0, r3
 8006ace:	4943      	ldr	r1, [pc, #268]	; (8006bdc <CAN_GetITStatus+0x190>)
 8006ad0:	f000 f8f4 	bl	8006cbc <CheckITStatus>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	73fb      	strb	r3, [r7, #15]
        break;
 8006ad8:	e077      	b.n	8006bca <CAN_GetITStatus+0x17e>
      case CAN_IT_FMP0:
        /* Check CAN_RF0R_FMP0 bit */
        itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FMP0);  
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	68db      	ldr	r3, [r3, #12]
 8006ade:	4618      	mov	r0, r3
 8006ae0:	2103      	movs	r1, #3
 8006ae2:	f000 f8eb 	bl	8006cbc <CheckITStatus>
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	73fb      	strb	r3, [r7, #15]
        break;
 8006aea:	e06e      	b.n	8006bca <CAN_GetITStatus+0x17e>
      case CAN_IT_FF0:
        /* Check CAN_RF0R_FULL0 bit */
        itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FULL0);  
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	68db      	ldr	r3, [r3, #12]
 8006af0:	4618      	mov	r0, r3
 8006af2:	2108      	movs	r1, #8
 8006af4:	f000 f8e2 	bl	8006cbc <CheckITStatus>
 8006af8:	4603      	mov	r3, r0
 8006afa:	73fb      	strb	r3, [r7, #15]
        break;
 8006afc:	e065      	b.n	8006bca <CAN_GetITStatus+0x17e>
      case CAN_IT_FOV0:
        /* Check CAN_RF0R_FOVR0 bit */
        itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FOVR0);  
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	68db      	ldr	r3, [r3, #12]
 8006b02:	4618      	mov	r0, r3
 8006b04:	2110      	movs	r1, #16
 8006b06:	f000 f8d9 	bl	8006cbc <CheckITStatus>
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	73fb      	strb	r3, [r7, #15]
        break;
 8006b0e:	e05c      	b.n	8006bca <CAN_GetITStatus+0x17e>
      case CAN_IT_FMP1:
        /* Check CAN_RF1R_FMP1 bit */
        itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FMP1);  
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	691b      	ldr	r3, [r3, #16]
 8006b14:	4618      	mov	r0, r3
 8006b16:	2103      	movs	r1, #3
 8006b18:	f000 f8d0 	bl	8006cbc <CheckITStatus>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	73fb      	strb	r3, [r7, #15]
        break;
 8006b20:	e053      	b.n	8006bca <CAN_GetITStatus+0x17e>
      case CAN_IT_FF1:
        /* Check CAN_RF1R_FULL1 bit */
        itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FULL1);  
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	691b      	ldr	r3, [r3, #16]
 8006b26:	4618      	mov	r0, r3
 8006b28:	2108      	movs	r1, #8
 8006b2a:	f000 f8c7 	bl	8006cbc <CheckITStatus>
 8006b2e:	4603      	mov	r3, r0
 8006b30:	73fb      	strb	r3, [r7, #15]
        break;
 8006b32:	e04a      	b.n	8006bca <CAN_GetITStatus+0x17e>
      case CAN_IT_FOV1:
        /* Check CAN_RF1R_FOVR1 bit */
        itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FOVR1);  
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	691b      	ldr	r3, [r3, #16]
 8006b38:	4618      	mov	r0, r3
 8006b3a:	2110      	movs	r1, #16
 8006b3c:	f000 f8be 	bl	8006cbc <CheckITStatus>
 8006b40:	4603      	mov	r3, r0
 8006b42:	73fb      	strb	r3, [r7, #15]
        break;
 8006b44:	e041      	b.n	8006bca <CAN_GetITStatus+0x17e>
      case CAN_IT_WKU:
        /* Check CAN_MSR_WKUI bit */
        itstatus = CheckITStatus(CANx->MSR, CAN_MSR_WKUI);  
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	685b      	ldr	r3, [r3, #4]
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	2108      	movs	r1, #8
 8006b4e:	f000 f8b5 	bl	8006cbc <CheckITStatus>
 8006b52:	4603      	mov	r3, r0
 8006b54:	73fb      	strb	r3, [r7, #15]
        break;
 8006b56:	e038      	b.n	8006bca <CAN_GetITStatus+0x17e>
      case CAN_IT_SLK:
        /* Check CAN_MSR_SLAKI bit */
        itstatus = CheckITStatus(CANx->MSR, CAN_MSR_SLAKI);  
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	685b      	ldr	r3, [r3, #4]
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	2110      	movs	r1, #16
 8006b60:	f000 f8ac 	bl	8006cbc <CheckITStatus>
 8006b64:	4603      	mov	r3, r0
 8006b66:	73fb      	strb	r3, [r7, #15]
        break;
 8006b68:	e02f      	b.n	8006bca <CAN_GetITStatus+0x17e>
      case CAN_IT_EWG:
        /* Check CAN_ESR_EWGF bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EWGF);  
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	699b      	ldr	r3, [r3, #24]
 8006b6e:	4618      	mov	r0, r3
 8006b70:	2101      	movs	r1, #1
 8006b72:	f000 f8a3 	bl	8006cbc <CheckITStatus>
 8006b76:	4603      	mov	r3, r0
 8006b78:	73fb      	strb	r3, [r7, #15]
        break;
 8006b7a:	e026      	b.n	8006bca <CAN_GetITStatus+0x17e>
      case CAN_IT_EPV:
        /* Check CAN_ESR_EPVF bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EPVF);  
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	699b      	ldr	r3, [r3, #24]
 8006b80:	4618      	mov	r0, r3
 8006b82:	2102      	movs	r1, #2
 8006b84:	f000 f89a 	bl	8006cbc <CheckITStatus>
 8006b88:	4603      	mov	r3, r0
 8006b8a:	73fb      	strb	r3, [r7, #15]
        break;
 8006b8c:	e01d      	b.n	8006bca <CAN_GetITStatus+0x17e>
      case CAN_IT_BOF:
        /* Check CAN_ESR_BOFF bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_BOFF);  
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	699b      	ldr	r3, [r3, #24]
 8006b92:	4618      	mov	r0, r3
 8006b94:	2104      	movs	r1, #4
 8006b96:	f000 f891 	bl	8006cbc <CheckITStatus>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	73fb      	strb	r3, [r7, #15]
        break;
 8006b9e:	e014      	b.n	8006bca <CAN_GetITStatus+0x17e>
      case CAN_IT_LEC:
        /* Check CAN_ESR_LEC bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_LEC);  
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	699b      	ldr	r3, [r3, #24]
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	2170      	movs	r1, #112	; 0x70
 8006ba8:	f000 f888 	bl	8006cbc <CheckITStatus>
 8006bac:	4603      	mov	r3, r0
 8006bae:	73fb      	strb	r3, [r7, #15]
        break;
 8006bb0:	e00b      	b.n	8006bca <CAN_GetITStatus+0x17e>
      case CAN_IT_ERR:
        /* Check CAN_MSR_ERRI bit */ 
        itstatus = CheckITStatus(CANx->MSR, CAN_MSR_ERRI); 
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	2104      	movs	r1, #4
 8006bba:	f000 f87f 	bl	8006cbc <CheckITStatus>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	73fb      	strb	r3, [r7, #15]
        break;
 8006bc2:	e002      	b.n	8006bca <CAN_GetITStatus+0x17e>
      default:
        /* in case of error, return RESET */
        itstatus = RESET;
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	73fb      	strb	r3, [r7, #15]
        break;
 8006bc8:	bf00      	nop
 8006bca:	e001      	b.n	8006bd0 <CAN_GetITStatus+0x184>
    }
  }
  else
  {
   /* in case the Interrupt is not enabled, return RESET */
    itstatus  = RESET;
 8006bcc:	2300      	movs	r3, #0
 8006bce:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return the CAN_IT status */
  return  itstatus;
 8006bd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	3710      	adds	r7, #16
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}
 8006bda:	bf00      	nop
 8006bdc:	00010101 	.word	0x00010101

08006be0 <CAN_ClearITPendingBit>:
  *            @arg CAN_IT_LEC: Last error code Interrupt
  *            @arg CAN_IT_ERR: Error Interrupt 
  * @retval None
  */
void CAN_ClearITPendingBit(CAN_TypeDef* CANx, uint32_t CAN_IT)
{
 8006be0:	b480      	push	{r7}
 8006be2:	b083      	sub	sp, #12
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
 8006be8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_CLEAR_IT(CAN_IT));

  switch (CAN_IT)
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bf0:	d043      	beq.n	8006c7a <CAN_ClearITPendingBit+0x9a>
 8006bf2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bf6:	d80d      	bhi.n	8006c14 <CAN_ClearITPendingBit+0x34>
 8006bf8:	2b08      	cmp	r3, #8
 8006bfa:	d02a      	beq.n	8006c52 <CAN_ClearITPendingBit+0x72>
 8006bfc:	2b08      	cmp	r3, #8
 8006bfe:	d804      	bhi.n	8006c0a <CAN_ClearITPendingBit+0x2a>
 8006c00:	2b01      	cmp	r3, #1
 8006c02:	d01e      	beq.n	8006c42 <CAN_ClearITPendingBit+0x62>
 8006c04:	2b04      	cmp	r3, #4
 8006c06:	d020      	beq.n	8006c4a <CAN_ClearITPendingBit+0x6a>
      /* Clear CAN_MSR_ERRI (rc_w1) */
      CANx->MSR = CAN_MSR_ERRI; 
       /* @note BOFF, EPVF and EWGF Flags are cleared by hardware depending on the CAN Bus status*/
       break;
    default:
       break;
 8006c08:	e051      	b.n	8006cae <CAN_ClearITPendingBit+0xce>
{
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_CLEAR_IT(CAN_IT));

  switch (CAN_IT)
 8006c0a:	2b20      	cmp	r3, #32
 8006c0c:	d025      	beq.n	8006c5a <CAN_ClearITPendingBit+0x7a>
 8006c0e:	2b40      	cmp	r3, #64	; 0x40
 8006c10:	d027      	beq.n	8006c62 <CAN_ClearITPendingBit+0x82>
      /* Clear CAN_MSR_ERRI (rc_w1) */
      CANx->MSR = CAN_MSR_ERRI; 
       /* @note BOFF, EPVF and EWGF Flags are cleared by hardware depending on the CAN Bus status*/
       break;
    default:
       break;
 8006c12:	e04c      	b.n	8006cae <CAN_ClearITPendingBit+0xce>
{
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_CLEAR_IT(CAN_IT));

  switch (CAN_IT)
 8006c14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c18:	d03b      	beq.n	8006c92 <CAN_ClearITPendingBit+0xb2>
 8006c1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c1e:	d806      	bhi.n	8006c2e <CAN_ClearITPendingBit+0x4e>
 8006c20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c24:	d02d      	beq.n	8006c82 <CAN_ClearITPendingBit+0xa2>
 8006c26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c2a:	d02e      	beq.n	8006c8a <CAN_ClearITPendingBit+0xaa>
      /* Clear CAN_MSR_ERRI (rc_w1) */
      CANx->MSR = CAN_MSR_ERRI; 
       /* @note BOFF, EPVF and EWGF Flags are cleared by hardware depending on the CAN Bus status*/
       break;
    default:
       break;
 8006c2c:	e03f      	b.n	8006cae <CAN_ClearITPendingBit+0xce>
{
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_CLEAR_IT(CAN_IT));

  switch (CAN_IT)
 8006c2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c32:	d01a      	beq.n	8006c6a <CAN_ClearITPendingBit+0x8a>
 8006c34:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c38:	d01b      	beq.n	8006c72 <CAN_ClearITPendingBit+0x92>
 8006c3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c3e:	d02f      	beq.n	8006ca0 <CAN_ClearITPendingBit+0xc0>
      /* Clear CAN_MSR_ERRI (rc_w1) */
      CANx->MSR = CAN_MSR_ERRI; 
       /* @note BOFF, EPVF and EWGF Flags are cleared by hardware depending on the CAN Bus status*/
       break;
    default:
       break;
 8006c40:	e035      	b.n	8006cae <CAN_ClearITPendingBit+0xce>

  switch (CAN_IT)
  {
    case CAN_IT_TME:
      /* Clear CAN_TSR_RQCPx (rc_w1)*/
      CANx->TSR = CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2;  
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	4a1c      	ldr	r2, [pc, #112]	; (8006cb8 <CAN_ClearITPendingBit+0xd8>)
 8006c46:	609a      	str	r2, [r3, #8]
      break;
 8006c48:	e031      	b.n	8006cae <CAN_ClearITPendingBit+0xce>
    case CAN_IT_FF0:
      /* Clear CAN_RF0R_FULL0 (rc_w1)*/
      CANx->RF0R = CAN_RF0R_FULL0; 
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2208      	movs	r2, #8
 8006c4e:	60da      	str	r2, [r3, #12]
      break;
 8006c50:	e02d      	b.n	8006cae <CAN_ClearITPendingBit+0xce>
    case CAN_IT_FOV0:
      /* Clear CAN_RF0R_FOVR0 (rc_w1)*/
      CANx->RF0R = CAN_RF0R_FOVR0; 
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2210      	movs	r2, #16
 8006c56:	60da      	str	r2, [r3, #12]
      break;
 8006c58:	e029      	b.n	8006cae <CAN_ClearITPendingBit+0xce>
    case CAN_IT_FF1:
      /* Clear CAN_RF1R_FULL1 (rc_w1)*/
      CANx->RF1R = CAN_RF1R_FULL1;  
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2208      	movs	r2, #8
 8006c5e:	611a      	str	r2, [r3, #16]
      break;
 8006c60:	e025      	b.n	8006cae <CAN_ClearITPendingBit+0xce>
    case CAN_IT_FOV1:
      /* Clear CAN_RF1R_FOVR1 (rc_w1)*/
      CANx->RF1R = CAN_RF1R_FOVR1; 
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2210      	movs	r2, #16
 8006c66:	611a      	str	r2, [r3, #16]
      break;
 8006c68:	e021      	b.n	8006cae <CAN_ClearITPendingBit+0xce>
    case CAN_IT_WKU:
      /* Clear CAN_MSR_WKUI (rc_w1)*/
      CANx->MSR = CAN_MSR_WKUI;  
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2208      	movs	r2, #8
 8006c6e:	605a      	str	r2, [r3, #4]
      break;
 8006c70:	e01d      	b.n	8006cae <CAN_ClearITPendingBit+0xce>
    case CAN_IT_SLK:
      /* Clear CAN_MSR_SLAKI (rc_w1)*/ 
      CANx->MSR = CAN_MSR_SLAKI;   
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2210      	movs	r2, #16
 8006c76:	605a      	str	r2, [r3, #4]
      break;
 8006c78:	e019      	b.n	8006cae <CAN_ClearITPendingBit+0xce>
    case CAN_IT_EWG:
      /* Clear CAN_MSR_ERRI (rc_w1) */
      CANx->MSR = CAN_MSR_ERRI;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2204      	movs	r2, #4
 8006c7e:	605a      	str	r2, [r3, #4]
       /* @note the corresponding Flag is cleared by hardware depending on the CAN Bus status*/ 
      break;
 8006c80:	e015      	b.n	8006cae <CAN_ClearITPendingBit+0xce>
    case CAN_IT_EPV:
      /* Clear CAN_MSR_ERRI (rc_w1) */
      CANx->MSR = CAN_MSR_ERRI; 
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2204      	movs	r2, #4
 8006c86:	605a      	str	r2, [r3, #4]
       /* @note the corresponding Flag is cleared by hardware depending on the CAN Bus status*/
      break;
 8006c88:	e011      	b.n	8006cae <CAN_ClearITPendingBit+0xce>
    case CAN_IT_BOF:
      /* Clear CAN_MSR_ERRI (rc_w1) */ 
      CANx->MSR = CAN_MSR_ERRI; 
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2204      	movs	r2, #4
 8006c8e:	605a      	str	r2, [r3, #4]
       /* @note the corresponding Flag is cleared by hardware depending on the CAN Bus status*/
       break;
 8006c90:	e00d      	b.n	8006cae <CAN_ClearITPendingBit+0xce>
    case CAN_IT_LEC:
      /*  Clear LEC bits */
      CANx->ESR = RESET; 
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2200      	movs	r2, #0
 8006c96:	619a      	str	r2, [r3, #24]
      /* Clear CAN_MSR_ERRI (rc_w1) */
      CANx->MSR = CAN_MSR_ERRI; 
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2204      	movs	r2, #4
 8006c9c:	605a      	str	r2, [r3, #4]
      break;
 8006c9e:	e006      	b.n	8006cae <CAN_ClearITPendingBit+0xce>
    case CAN_IT_ERR:
      /*Clear LEC bits */
      CANx->ESR = RESET; 
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	619a      	str	r2, [r3, #24]
      /* Clear CAN_MSR_ERRI (rc_w1) */
      CANx->MSR = CAN_MSR_ERRI; 
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2204      	movs	r2, #4
 8006caa:	605a      	str	r2, [r3, #4]
       /* @note BOFF, EPVF and EWGF Flags are cleared by hardware depending on the CAN Bus status*/
       break;
 8006cac:	bf00      	nop
    default:
       break;
   }
}
 8006cae:	370c      	adds	r7, #12
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb6:	4770      	bx	lr
 8006cb8:	00010101 	.word	0x00010101

08006cbc <CheckITStatus>:
  * @param  CAN_Reg: specifies the CAN interrupt register to check.
  * @param  It_Bit: specifies the interrupt source bit to check.
  * @retval The new state of the CAN Interrupt (SET or RESET).
  */
static ITStatus CheckITStatus(uint32_t CAN_Reg, uint32_t It_Bit)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b085      	sub	sp, #20
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
 8006cc4:	6039      	str	r1, [r7, #0]
  ITStatus pendingbitstatus = RESET;
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	73fb      	strb	r3, [r7, #15]
  
  if ((CAN_Reg & It_Bit) != (uint32_t)RESET)
 8006cca:	687a      	ldr	r2, [r7, #4]
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	4013      	ands	r3, r2
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d002      	beq.n	8006cda <CheckITStatus+0x1e>
  {
    /* CAN_IT is set */
    pendingbitstatus = SET;
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	73fb      	strb	r3, [r7, #15]
 8006cd8:	e001      	b.n	8006cde <CheckITStatus+0x22>
  }
  else
  {
    /* CAN_IT is reset */
    pendingbitstatus = RESET;
 8006cda:	2300      	movs	r3, #0
 8006cdc:	73fb      	strb	r3, [r7, #15]
  }
  return pendingbitstatus;
 8006cde:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	3714      	adds	r7, #20
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cea:	4770      	bx	lr

08006cec <CRC_ResetDR>:
  * @brief  Resets the CRC Data register (DR).
  * @param  None
  * @retval None
  */
void CRC_ResetDR(void)
{
 8006cec:	b480      	push	{r7}
 8006cee:	af00      	add	r7, sp, #0
  /* Reset CRC generator */
  CRC->CR = CRC_CR_RESET;
 8006cf0:	4b03      	ldr	r3, [pc, #12]	; (8006d00 <CRC_ResetDR+0x14>)
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	609a      	str	r2, [r3, #8]
}
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfc:	4770      	bx	lr
 8006cfe:	bf00      	nop
 8006d00:	40023000 	.word	0x40023000

08006d04 <CRC_CalcCRC>:
  * @brief  Computes the 32-bit CRC of a given data word(32-bit).
  * @param  Data: data word(32-bit) to compute its CRC
  * @retval 32-bit CRC
  */
uint32_t CRC_CalcCRC(uint32_t Data)
{
 8006d04:	b480      	push	{r7}
 8006d06:	b083      	sub	sp, #12
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
  CRC->DR = Data;
 8006d0c:	4b05      	ldr	r3, [pc, #20]	; (8006d24 <CRC_CalcCRC+0x20>)
 8006d0e:	687a      	ldr	r2, [r7, #4]
 8006d10:	601a      	str	r2, [r3, #0]
  
  return (CRC->DR);
 8006d12:	4b04      	ldr	r3, [pc, #16]	; (8006d24 <CRC_CalcCRC+0x20>)
 8006d14:	681b      	ldr	r3, [r3, #0]
}
 8006d16:	4618      	mov	r0, r3
 8006d18:	370c      	adds	r7, #12
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d20:	4770      	bx	lr
 8006d22:	bf00      	nop
 8006d24:	40023000 	.word	0x40023000

08006d28 <CRC_CalcBlockCRC>:
  * @param  pBuffer: pointer to the buffer containing the data to be computed
  * @param  BufferLength: length of the buffer to be computed					
  * @retval 32-bit CRC
  */
uint32_t CRC_CalcBlockCRC(uint32_t pBuffer[], uint32_t BufferLength)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b085      	sub	sp, #20
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
 8006d30:	6039      	str	r1, [r7, #0]
  uint32_t index = 0;
 8006d32:	2300      	movs	r3, #0
 8006d34:	60fb      	str	r3, [r7, #12]
  
  for(index = 0; index < BufferLength; index++)
 8006d36:	2300      	movs	r3, #0
 8006d38:	60fb      	str	r3, [r7, #12]
 8006d3a:	e009      	b.n	8006d50 <CRC_CalcBlockCRC+0x28>
  {
    CRC->DR = pBuffer[index];
 8006d3c:	4b0a      	ldr	r3, [pc, #40]	; (8006d68 <CRC_CalcBlockCRC+0x40>)
 8006d3e:	68fa      	ldr	r2, [r7, #12]
 8006d40:	0092      	lsls	r2, r2, #2
 8006d42:	6879      	ldr	r1, [r7, #4]
 8006d44:	440a      	add	r2, r1
 8006d46:	6812      	ldr	r2, [r2, #0]
 8006d48:	601a      	str	r2, [r3, #0]
  */
uint32_t CRC_CalcBlockCRC(uint32_t pBuffer[], uint32_t BufferLength)
{
  uint32_t index = 0;
  
  for(index = 0; index < BufferLength; index++)
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	3301      	adds	r3, #1
 8006d4e:	60fb      	str	r3, [r7, #12]
 8006d50:	68fa      	ldr	r2, [r7, #12]
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	429a      	cmp	r2, r3
 8006d56:	d3f1      	bcc.n	8006d3c <CRC_CalcBlockCRC+0x14>
  {
    CRC->DR = pBuffer[index];
  }
  return (CRC->DR);
 8006d58:	4b03      	ldr	r3, [pc, #12]	; (8006d68 <CRC_CalcBlockCRC+0x40>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
}
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	3714      	adds	r7, #20
 8006d60:	46bd      	mov	sp, r7
 8006d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d66:	4770      	bx	lr
 8006d68:	40023000 	.word	0x40023000

08006d6c <CRC_GetCRC>:
  * @brief  Returns the current CRC value.
  * @param  None
  * @retval 32-bit CRC
  */
uint32_t CRC_GetCRC(void)
{
 8006d6c:	b480      	push	{r7}
 8006d6e:	af00      	add	r7, sp, #0
  return (CRC->DR);
 8006d70:	4b03      	ldr	r3, [pc, #12]	; (8006d80 <CRC_GetCRC+0x14>)
 8006d72:	681b      	ldr	r3, [r3, #0]
}
 8006d74:	4618      	mov	r0, r3
 8006d76:	46bd      	mov	sp, r7
 8006d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7c:	4770      	bx	lr
 8006d7e:	bf00      	nop
 8006d80:	40023000 	.word	0x40023000

08006d84 <CRC_SetIDRegister>:
  * @brief  Stores a 8-bit data in the Independent Data(ID) register.
  * @param  IDValue: 8-bit value to be stored in the ID register 					
  * @retval None
  */
void CRC_SetIDRegister(uint8_t IDValue)
{
 8006d84:	b480      	push	{r7}
 8006d86:	b083      	sub	sp, #12
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	71fb      	strb	r3, [r7, #7]
  CRC->IDR = IDValue;
 8006d8e:	4b04      	ldr	r3, [pc, #16]	; (8006da0 <CRC_SetIDRegister+0x1c>)
 8006d90:	79fa      	ldrb	r2, [r7, #7]
 8006d92:	711a      	strb	r2, [r3, #4]
}
 8006d94:	370c      	adds	r7, #12
 8006d96:	46bd      	mov	sp, r7
 8006d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9c:	4770      	bx	lr
 8006d9e:	bf00      	nop
 8006da0:	40023000 	.word	0x40023000

08006da4 <CRC_GetIDRegister>:
  * @brief  Returns the 8-bit data stored in the Independent Data(ID) register
  * @param  None
  * @retval 8-bit value of the ID register 
  */
uint8_t CRC_GetIDRegister(void)
{
 8006da4:	b480      	push	{r7}
 8006da6:	af00      	add	r7, sp, #0
  return (CRC->IDR);
 8006da8:	4b03      	ldr	r3, [pc, #12]	; (8006db8 <CRC_GetIDRegister+0x14>)
 8006daa:	791b      	ldrb	r3, [r3, #4]
 8006dac:	b2db      	uxtb	r3, r3
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	46bd      	mov	sp, r7
 8006db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db6:	4770      	bx	lr
 8006db8:	40023000 	.word	0x40023000

08006dbc <CRYP_AES_ECB>:
  *          - SUCCESS: Operation done
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_AES_ECB(uint8_t Mode, uint8_t* Key, uint16_t Keysize,
                         uint8_t* Input, uint32_t Ilength, uint8_t* Output)
{
 8006dbc:	b590      	push	{r4, r7, lr}
 8006dbe:	b0ab      	sub	sp, #172	; 0xac
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	60b9      	str	r1, [r7, #8]
 8006dc4:	607b      	str	r3, [r7, #4]
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	73fb      	strb	r3, [r7, #15]
 8006dca:	4613      	mov	r3, r2
 8006dcc:	81bb      	strh	r3, [r7, #12]
  CRYP_InitTypeDef AES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
  __IO uint32_t counter = 0;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	617b      	str	r3, [r7, #20]
  uint32_t busystatus = 0;
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  ErrorStatus status = SUCCESS;
 8006dd8:	2301      	movs	r3, #1
 8006dda:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
  uint32_t keyaddr    = (uint32_t)Key;
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  uint32_t inputaddr  = (uint32_t)Input;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  uint32_t outputaddr = (uint32_t)Output;
 8006dea:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006dee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t i = 0;
 8006df2:	2300      	movs	r3, #0
 8006df4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
 8006df8:	f107 0318 	add.w	r3, r7, #24
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	f002 f9e5 	bl	80091cc <CRYP_KeyStructInit>

  switch(Keysize)
 8006e02:	89bb      	ldrh	r3, [r7, #12]
 8006e04:	2bc0      	cmp	r3, #192	; 0xc0
 8006e06:	d03b      	beq.n	8006e80 <CRYP_AES_ECB+0xc4>
 8006e08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e0c:	d07f      	beq.n	8006f0e <CRYP_AES_ECB+0x152>
 8006e0e:	2b80      	cmp	r3, #128	; 0x80
 8006e10:	d000      	beq.n	8006e14 <CRYP_AES_ECB+0x58>
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
    break;
    default:
    break;
 8006e12:	e0db      	b.n	8006fcc <CRYP_AES_ECB+0x210>
  CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);

  switch(Keysize)
  {
    case 128:
    AES_CRYP_InitStructure.CRYP_KeySize = CRYP_KeySize_128b;
 8006e14:	2300      	movs	r3, #0
 8006e16:	647b      	str	r3, [r7, #68]	; 0x44
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8006e18:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    \return               Reversed value
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
#if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
  return __builtin_bswap32(value);
 8006e22:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006e26:	ba1b      	rev	r3, r3
 8006e28:	62bb      	str	r3, [r7, #40]	; 0x28
    keyaddr+=4;
 8006e2a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006e2e:	3304      	adds	r3, #4
 8006e30:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8006e34:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006e3e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006e42:	ba1b      	rev	r3, r3
 8006e44:	62fb      	str	r3, [r7, #44]	; 0x2c
    keyaddr+=4;
 8006e46:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006e4a:	3304      	adds	r3, #4
 8006e4c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 8006e50:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006e5a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006e5e:	ba1b      	rev	r3, r3
 8006e60:	633b      	str	r3, [r7, #48]	; 0x30
    keyaddr+=4;
 8006e62:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006e66:	3304      	adds	r3, #4
 8006e68:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 8006e6c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006e76:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006e7a:	ba1b      	rev	r3, r3
 8006e7c:	637b      	str	r3, [r7, #52]	; 0x34
    break;
 8006e7e:	e0a5      	b.n	8006fcc <CRYP_AES_ECB+0x210>
    case 192:
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_192b;
 8006e80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006e84:	647b      	str	r3, [r7, #68]	; 0x44
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 8006e86:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006e8e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006e90:	ba1b      	rev	r3, r3
 8006e92:	623b      	str	r3, [r7, #32]
    keyaddr+=4;
 8006e94:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006e98:	3304      	adds	r3, #4
 8006e9a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 8006e9e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	67bb      	str	r3, [r7, #120]	; 0x78
 8006ea6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ea8:	ba1b      	rev	r3, r3
 8006eaa:	627b      	str	r3, [r7, #36]	; 0x24
    keyaddr+=4;
 8006eac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006eb0:	3304      	adds	r3, #4
 8006eb2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8006eb6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	677b      	str	r3, [r7, #116]	; 0x74
 8006ebe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ec0:	ba1b      	rev	r3, r3
 8006ec2:	62bb      	str	r3, [r7, #40]	; 0x28
    keyaddr+=4;
 8006ec4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006ec8:	3304      	adds	r3, #4
 8006eca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8006ece:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	673b      	str	r3, [r7, #112]	; 0x70
 8006ed6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006ed8:	ba1b      	rev	r3, r3
 8006eda:	62fb      	str	r3, [r7, #44]	; 0x2c
    keyaddr+=4;
 8006edc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006ee0:	3304      	adds	r3, #4
 8006ee2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 8006ee6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006eee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ef0:	ba1b      	rev	r3, r3
 8006ef2:	633b      	str	r3, [r7, #48]	; 0x30
    keyaddr+=4;
 8006ef4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006ef8:	3304      	adds	r3, #4
 8006efa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 8006efe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	66bb      	str	r3, [r7, #104]	; 0x68
 8006f06:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006f08:	ba1b      	rev	r3, r3
 8006f0a:	637b      	str	r3, [r7, #52]	; 0x34
    break;
 8006f0c:	e05e      	b.n	8006fcc <CRYP_AES_ECB+0x210>
    case 256:
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_256b;
 8006f0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006f12:	647b      	str	r3, [r7, #68]	; 0x44
    AES_CRYP_KeyInitStructure.CRYP_Key0Left = __REV(*(uint32_t*)(keyaddr));
 8006f14:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	667b      	str	r3, [r7, #100]	; 0x64
 8006f1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f1e:	ba1b      	rev	r3, r3
 8006f20:	61bb      	str	r3, [r7, #24]
    keyaddr+=4;
 8006f22:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006f26:	3304      	adds	r3, #4
 8006f28:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    AES_CRYP_KeyInitStructure.CRYP_Key0Right= __REV(*(uint32_t*)(keyaddr));
 8006f2c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	663b      	str	r3, [r7, #96]	; 0x60
 8006f34:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006f36:	ba1b      	rev	r3, r3
 8006f38:	61fb      	str	r3, [r7, #28]
    keyaddr+=4;
 8006f3a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006f3e:	3304      	adds	r3, #4
 8006f40:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 8006f44:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006f4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f4e:	ba1b      	rev	r3, r3
 8006f50:	623b      	str	r3, [r7, #32]
    keyaddr+=4;
 8006f52:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006f56:	3304      	adds	r3, #4
 8006f58:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 8006f5c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	65bb      	str	r3, [r7, #88]	; 0x58
 8006f64:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006f66:	ba1b      	rev	r3, r3
 8006f68:	627b      	str	r3, [r7, #36]	; 0x24
    keyaddr+=4;
 8006f6a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006f6e:	3304      	adds	r3, #4
 8006f70:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8006f74:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	657b      	str	r3, [r7, #84]	; 0x54
 8006f7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f7e:	ba1b      	rev	r3, r3
 8006f80:	62bb      	str	r3, [r7, #40]	; 0x28
    keyaddr+=4;
 8006f82:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006f86:	3304      	adds	r3, #4
 8006f88:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8006f8c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	653b      	str	r3, [r7, #80]	; 0x50
 8006f94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f96:	ba1b      	rev	r3, r3
 8006f98:	62fb      	str	r3, [r7, #44]	; 0x2c
    keyaddr+=4;
 8006f9a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006f9e:	3304      	adds	r3, #4
 8006fa0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 8006fa4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006fac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fae:	ba1b      	rev	r3, r3
 8006fb0:	633b      	str	r3, [r7, #48]	; 0x30
    keyaddr+=4;
 8006fb2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006fb6:	3304      	adds	r3, #4
 8006fb8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 8006fbc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	64bb      	str	r3, [r7, #72]	; 0x48
 8006fc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006fc6:	ba1b      	rev	r3, r3
 8006fc8:	637b      	str	r3, [r7, #52]	; 0x34
    break;
 8006fca:	bf00      	nop
    default:
    break;
  }

  /*------------------ AES Decryption ------------------*/
  if(Mode == MODE_DECRYPT) /* AES decryption */
 8006fcc:	7bfb      	ldrb	r3, [r7, #15]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d130      	bne.n	8007034 <CRYP_AES_ECB+0x278>
  {
    /* Flush IN/OUT FIFOs */
    CRYP_FIFOFlush();
 8006fd2:	f002 f96b 	bl	80092ac <CRYP_FIFOFlush>

    /* Crypto Init for Key preparation for decryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 8006fd6:	2304      	movs	r3, #4
 8006fd8:	63bb      	str	r3, [r7, #56]	; 0x38
    AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_Key;
 8006fda:	2338      	movs	r3, #56	; 0x38
 8006fdc:	63fb      	str	r3, [r7, #60]	; 0x3c
    AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_32b;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	643b      	str	r3, [r7, #64]	; 0x40
    CRYP_Init(&AES_CRYP_InitStructure);
 8006fe2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	f002 f85c 	bl	80090a4 <CRYP_Init>

    /* Key Initialisation */
    CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 8006fec:	f107 0318 	add.w	r3, r7, #24
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	f002 f8bf 	bl	8009174 <CRYP_KeyInit>

    /* Enable Crypto processor */
    CRYP_Cmd(ENABLE);
 8006ff6:	2001      	movs	r0, #1
 8006ff8:	f002 f966 	bl	80092c8 <CRYP_Cmd>

    /* wait until the Busy flag is RESET */
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8006ffc:	2010      	movs	r0, #16
 8006ffe:	f002 fb61 	bl	80096c4 <CRYP_GetFlagStatus>
 8007002:	4603      	mov	r3, r0
 8007004:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      counter++;
 8007008:	697b      	ldr	r3, [r7, #20]
 800700a:	3301      	adds	r3, #1
 800700c:	617b      	str	r3, [r7, #20]
    }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 800700e:	697b      	ldr	r3, [r7, #20]
 8007010:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007014:	d003      	beq.n	800701e <CRYP_AES_ECB+0x262>
 8007016:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800701a:	2b00      	cmp	r3, #0
 800701c:	d1ee      	bne.n	8006ffc <CRYP_AES_ECB+0x240>

    if (busystatus != RESET)
 800701e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007022:	2b00      	cmp	r3, #0
 8007024:	d003      	beq.n	800702e <CRYP_AES_ECB+0x272>
   {
       status = ERROR;
 8007026:	2300      	movs	r3, #0
 8007028:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 800702c:	e009      	b.n	8007042 <CRYP_AES_ECB+0x286>
    }
    else
    {
      /* Crypto Init for decryption process */  
      AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 800702e:	2304      	movs	r3, #4
 8007030:	63bb      	str	r3, [r7, #56]	; 0x38
 8007032:	e006      	b.n	8007042 <CRYP_AES_ECB+0x286>
  }
  /*------------------ AES Encryption ------------------*/
  else /* AES encryption */
  {

    CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 8007034:	f107 0318 	add.w	r3, r7, #24
 8007038:	4618      	mov	r0, r3
 800703a:	f002 f89b 	bl	8009174 <CRYP_KeyInit>

    /* Crypto Init for Encryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
 800703e:	2300      	movs	r3, #0
 8007040:	63bb      	str	r3, [r7, #56]	; 0x38
  }

  AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_ECB;
 8007042:	2320      	movs	r3, #32
 8007044:	63fb      	str	r3, [r7, #60]	; 0x3c
  AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 8007046:	2380      	movs	r3, #128	; 0x80
 8007048:	643b      	str	r3, [r7, #64]	; 0x40
  CRYP_Init(&AES_CRYP_InitStructure);
 800704a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800704e:	4618      	mov	r0, r3
 8007050:	f002 f828 	bl	80090a4 <CRYP_Init>

  /* Flush IN/OUT FIFOs */
  CRYP_FIFOFlush();
 8007054:	f002 f92a 	bl	80092ac <CRYP_FIFOFlush>

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 8007058:	2001      	movs	r0, #1
 800705a:	f002 f935 	bl	80092c8 <CRYP_Cmd>

  if(CRYP_GetCmdStatus() == DISABLE)
 800705e:	f002 fb17 	bl	8009690 <CRYP_GetCmdStatus>
 8007062:	4603      	mov	r3, r0
 8007064:	2b00      	cmp	r3, #0
 8007066:	d101      	bne.n	800706c <CRYP_AES_ECB+0x2b0>
  {
    /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
       the CRYP peripheral (please check the device sales type. */
    return(ERROR);
 8007068:	2300      	movs	r3, #0
 800706a:	e08b      	b.n	8007184 <CRYP_AES_ECB+0x3c8>
  }
  
  for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 800706c:	2300      	movs	r3, #0
 800706e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007072:	e077      	b.n	8007164 <CRYP_AES_ECB+0x3a8>
  {

    /* Write the Input block in the IN FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8007074:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4618      	mov	r0, r3
 800707c:	f002 f940 	bl	8009300 <CRYP_DataIn>
    inputaddr+=4;
 8007080:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007084:	3304      	adds	r3, #4
 8007086:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 800708a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4618      	mov	r0, r3
 8007092:	f002 f935 	bl	8009300 <CRYP_DataIn>
    inputaddr+=4;
 8007096:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800709a:	3304      	adds	r3, #4
 800709c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 80070a0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	4618      	mov	r0, r3
 80070a8:	f002 f92a 	bl	8009300 <CRYP_DataIn>
    inputaddr+=4;
 80070ac:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80070b0:	3304      	adds	r3, #4
 80070b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 80070b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4618      	mov	r0, r3
 80070be:	f002 f91f 	bl	8009300 <CRYP_DataIn>
    inputaddr+=4;
 80070c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80070c6:	3304      	adds	r3, #4
 80070c8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

    /* Wait until the complete message has been processed */
    counter = 0;
 80070cc:	2300      	movs	r3, #0
 80070ce:	617b      	str	r3, [r7, #20]
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 80070d0:	2010      	movs	r0, #16
 80070d2:	f002 faf7 	bl	80096c4 <CRYP_GetFlagStatus>
 80070d6:	4603      	mov	r3, r0
 80070d8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      counter++;
 80070dc:	697b      	ldr	r3, [r7, #20]
 80070de:	3301      	adds	r3, #1
 80070e0:	617b      	str	r3, [r7, #20]
    }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070e8:	d003      	beq.n	80070f2 <CRYP_AES_ECB+0x336>
 80070ea:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d1ee      	bne.n	80070d0 <CRYP_AES_ECB+0x314>

    if (busystatus != RESET)
 80070f2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d003      	beq.n	8007102 <CRYP_AES_ECB+0x346>
   {
       status = ERROR;
 80070fa:	2300      	movs	r3, #0
 80070fc:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8007100:	e02b      	b.n	800715a <CRYP_AES_ECB+0x39e>
    }
    else
    {

      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8007102:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
 8007106:	f002 f909 	bl	800931c <CRYP_DataOut>
 800710a:	4603      	mov	r3, r0
 800710c:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 800710e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007112:	3304      	adds	r3, #4
 8007114:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8007118:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
 800711c:	f002 f8fe 	bl	800931c <CRYP_DataOut>
 8007120:	4603      	mov	r3, r0
 8007122:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8007124:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007128:	3304      	adds	r3, #4
 800712a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 800712e:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
 8007132:	f002 f8f3 	bl	800931c <CRYP_DataOut>
 8007136:	4603      	mov	r3, r0
 8007138:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 800713a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800713e:	3304      	adds	r3, #4
 8007140:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
      *(uint32_t*)(outputaddr) = CRYP_DataOut(); 
 8007144:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
 8007148:	f002 f8e8 	bl	800931c <CRYP_DataOut>
 800714c:	4603      	mov	r3, r0
 800714e:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8007150:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007154:	3304      	adds	r3, #4
 8007156:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
       the CRYP peripheral (please check the device sales type. */
    return(ERROR);
  }
  
  for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 800715a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800715e:	3310      	adds	r3, #16
 8007160:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007164:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8007168:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800716c:	429a      	cmp	r2, r3
 800716e:	d204      	bcs.n	800717a <CRYP_AES_ECB+0x3be>
 8007170:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8007174:	2b00      	cmp	r3, #0
 8007176:	f47f af7d 	bne.w	8007074 <CRYP_AES_ECB+0x2b8>
      outputaddr+=4;
    }
  }

  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 800717a:	2000      	movs	r0, #0
 800717c:	f002 f8a4 	bl	80092c8 <CRYP_Cmd>

  return status; 
 8007180:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
}
 8007184:	4618      	mov	r0, r3
 8007186:	37ac      	adds	r7, #172	; 0xac
 8007188:	46bd      	mov	sp, r7
 800718a:	bd90      	pop	{r4, r7, pc}

0800718c <CRYP_AES_CBC>:
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_AES_CBC(uint8_t Mode, uint8_t InitVectors[16], uint8_t *Key,
                         uint16_t Keysize, uint8_t *Input, uint32_t Ilength,
                         uint8_t *Output)
{
 800718c:	b590      	push	{r4, r7, lr}
 800718e:	b0b3      	sub	sp, #204	; 0xcc
 8007190:	af00      	add	r7, sp, #0
 8007192:	60b9      	str	r1, [r7, #8]
 8007194:	607a      	str	r2, [r7, #4]
 8007196:	4602      	mov	r2, r0
 8007198:	73fa      	strb	r2, [r7, #15]
 800719a:	81bb      	strh	r3, [r7, #12]
  CRYP_InitTypeDef AES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
  CRYP_IVInitTypeDef AES_CRYP_IVInitStructure;
  __IO uint32_t counter = 0;
 800719c:	2300      	movs	r3, #0
 800719e:	613b      	str	r3, [r7, #16]
  uint32_t busystatus = 0;
 80071a0:	2300      	movs	r3, #0
 80071a2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  ErrorStatus status = SUCCESS;
 80071a6:	2301      	movs	r3, #1
 80071a8:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
  uint32_t keyaddr    = (uint32_t)Key;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  uint32_t inputaddr  = (uint32_t)Input;
 80071b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80071b6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  uint32_t outputaddr = (uint32_t)Output;
 80071ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071be:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t ivaddr = (uint32_t)InitVectors;
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t i = 0;
 80071c8:	2300      	movs	r3, #0
 80071ca:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
 80071ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80071d2:	4618      	mov	r0, r3
 80071d4:	f001 fffa 	bl	80091cc <CRYP_KeyStructInit>

  switch(Keysize)
 80071d8:	89bb      	ldrh	r3, [r7, #12]
 80071da:	2bc0      	cmp	r3, #192	; 0xc0
 80071dc:	d03c      	beq.n	8007258 <CRYP_AES_CBC+0xcc>
 80071de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071e2:	f000 808c 	beq.w	80072fe <CRYP_AES_CBC+0x172>
 80071e6:	2b80      	cmp	r3, #128	; 0x80
 80071e8:	d000      	beq.n	80071ec <CRYP_AES_CBC+0x60>
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
    break;
    default:
    break;
 80071ea:	e0e9      	b.n	80073c0 <CRYP_AES_CBC+0x234>
  CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);

  switch(Keysize)
  {
    case 128:
    AES_CRYP_InitStructure.CRYP_KeySize = CRYP_KeySize_128b;
 80071ec:	2300      	movs	r3, #0
 80071ee:	653b      	str	r3, [r7, #80]	; 0x50
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 80071f0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80071fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80071fe:	ba1b      	rev	r3, r3
 8007200:	637b      	str	r3, [r7, #52]	; 0x34
    keyaddr+=4;
 8007202:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007206:	3304      	adds	r3, #4
 8007208:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 800720c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007216:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800721a:	ba1b      	rev	r3, r3
 800721c:	63bb      	str	r3, [r7, #56]	; 0x38
    keyaddr+=4;
 800721e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007222:	3304      	adds	r3, #4
 8007224:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 8007228:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007232:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007236:	ba1b      	rev	r3, r3
 8007238:	63fb      	str	r3, [r7, #60]	; 0x3c
    keyaddr+=4;
 800723a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800723e:	3304      	adds	r3, #4
 8007240:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 8007244:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800724e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007252:	ba1b      	rev	r3, r3
 8007254:	643b      	str	r3, [r7, #64]	; 0x40
    break;
 8007256:	e0b3      	b.n	80073c0 <CRYP_AES_CBC+0x234>
    case 192:
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_192b;
 8007258:	f44f 7380 	mov.w	r3, #256	; 0x100
 800725c:	653b      	str	r3, [r7, #80]	; 0x50
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 800725e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007268:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800726c:	ba1b      	rev	r3, r3
 800726e:	62fb      	str	r3, [r7, #44]	; 0x2c
    keyaddr+=4;
 8007270:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007274:	3304      	adds	r3, #4
 8007276:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 800727a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007284:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007288:	ba1b      	rev	r3, r3
 800728a:	633b      	str	r3, [r7, #48]	; 0x30
    keyaddr+=4;
 800728c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007290:	3304      	adds	r3, #4
 8007292:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8007296:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80072a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80072a4:	ba1b      	rev	r3, r3
 80072a6:	637b      	str	r3, [r7, #52]	; 0x34
    keyaddr+=4;
 80072a8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80072ac:	3304      	adds	r3, #4
 80072ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 80072b2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80072bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80072c0:	ba1b      	rev	r3, r3
 80072c2:	63bb      	str	r3, [r7, #56]	; 0x38
    keyaddr+=4;
 80072c4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80072c8:	3304      	adds	r3, #4
 80072ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 80072ce:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80072d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80072dc:	ba1b      	rev	r3, r3
 80072de:	63fb      	str	r3, [r7, #60]	; 0x3c
    keyaddr+=4;
 80072e0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80072e4:	3304      	adds	r3, #4
 80072e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 80072ea:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80072f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80072f8:	ba1b      	rev	r3, r3
 80072fa:	643b      	str	r3, [r7, #64]	; 0x40
    break;
 80072fc:	e060      	b.n	80073c0 <CRYP_AES_CBC+0x234>
    case 256:
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_256b;
 80072fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007302:	653b      	str	r3, [r7, #80]	; 0x50
    AES_CRYP_KeyInitStructure.CRYP_Key0Left = __REV(*(uint32_t*)(keyaddr));
 8007304:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800730e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007312:	ba1b      	rev	r3, r3
 8007314:	627b      	str	r3, [r7, #36]	; 0x24
    keyaddr+=4;
 8007316:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800731a:	3304      	adds	r3, #4
 800731c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key0Right= __REV(*(uint32_t*)(keyaddr));
 8007320:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007328:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800732a:	ba1b      	rev	r3, r3
 800732c:	62bb      	str	r3, [r7, #40]	; 0x28
    keyaddr+=4;
 800732e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007332:	3304      	adds	r3, #4
 8007334:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 8007338:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	67bb      	str	r3, [r7, #120]	; 0x78
 8007340:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007342:	ba1b      	rev	r3, r3
 8007344:	62fb      	str	r3, [r7, #44]	; 0x2c
    keyaddr+=4;
 8007346:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800734a:	3304      	adds	r3, #4
 800734c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 8007350:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	677b      	str	r3, [r7, #116]	; 0x74
 8007358:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800735a:	ba1b      	rev	r3, r3
 800735c:	633b      	str	r3, [r7, #48]	; 0x30
    keyaddr+=4;
 800735e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007362:	3304      	adds	r3, #4
 8007364:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8007368:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	673b      	str	r3, [r7, #112]	; 0x70
 8007370:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007372:	ba1b      	rev	r3, r3
 8007374:	637b      	str	r3, [r7, #52]	; 0x34
    keyaddr+=4;
 8007376:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800737a:	3304      	adds	r3, #4
 800737c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8007380:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007388:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800738a:	ba1b      	rev	r3, r3
 800738c:	63bb      	str	r3, [r7, #56]	; 0x38
    keyaddr+=4;
 800738e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007392:	3304      	adds	r3, #4
 8007394:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 8007398:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	66bb      	str	r3, [r7, #104]	; 0x68
 80073a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80073a2:	ba1b      	rev	r3, r3
 80073a4:	63fb      	str	r3, [r7, #60]	; 0x3c
    keyaddr+=4;
 80073a6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80073aa:	3304      	adds	r3, #4
 80073ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 80073b0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	667b      	str	r3, [r7, #100]	; 0x64
 80073b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80073ba:	ba1b      	rev	r3, r3
 80073bc:	643b      	str	r3, [r7, #64]	; 0x40
    break;
 80073be:	bf00      	nop
    default:
    break;
  }

  /* CRYP Initialization Vectors */
  AES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
 80073c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	663b      	str	r3, [r7, #96]	; 0x60
 80073c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80073ca:	ba1b      	rev	r3, r3
 80073cc:	617b      	str	r3, [r7, #20]
  ivaddr+=4;
 80073ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80073d2:	3304      	adds	r3, #4
 80073d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  AES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
 80073d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80073e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80073e2:	ba1b      	rev	r3, r3
 80073e4:	61bb      	str	r3, [r7, #24]
  ivaddr+=4;
 80073e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80073ea:	3304      	adds	r3, #4
 80073ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  AES_CRYP_IVInitStructure.CRYP_IV1Left = __REV(*(uint32_t*)(ivaddr));
 80073f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	65bb      	str	r3, [r7, #88]	; 0x58
 80073f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80073fa:	ba1b      	rev	r3, r3
 80073fc:	61fb      	str	r3, [r7, #28]
  ivaddr+=4;
 80073fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007402:	3304      	adds	r3, #4
 8007404:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  AES_CRYP_IVInitStructure.CRYP_IV1Right= __REV(*(uint32_t*)(ivaddr));
 8007408:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	657b      	str	r3, [r7, #84]	; 0x54
 8007410:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007412:	ba1b      	rev	r3, r3
 8007414:	623b      	str	r3, [r7, #32]


  /*------------------ AES Decryption ------------------*/
  if(Mode == MODE_DECRYPT) /* AES decryption */
 8007416:	7bfb      	ldrb	r3, [r7, #15]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d130      	bne.n	800747e <CRYP_AES_CBC+0x2f2>
  {
    /* Flush IN/OUT FIFOs */
    CRYP_FIFOFlush();
 800741c:	f001 ff46 	bl	80092ac <CRYP_FIFOFlush>

    /* Crypto Init for Key preparation for decryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 8007420:	2304      	movs	r3, #4
 8007422:	647b      	str	r3, [r7, #68]	; 0x44
    AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_Key;
 8007424:	2338      	movs	r3, #56	; 0x38
 8007426:	64bb      	str	r3, [r7, #72]	; 0x48
    AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_32b;
 8007428:	2300      	movs	r3, #0
 800742a:	64fb      	str	r3, [r7, #76]	; 0x4c

    CRYP_Init(&AES_CRYP_InitStructure);
 800742c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007430:	4618      	mov	r0, r3
 8007432:	f001 fe37 	bl	80090a4 <CRYP_Init>

    /* Key Initialisation */
    CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 8007436:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800743a:	4618      	mov	r0, r3
 800743c:	f001 fe9a 	bl	8009174 <CRYP_KeyInit>

    /* Enable Crypto processor */
    CRYP_Cmd(ENABLE);
 8007440:	2001      	movs	r0, #1
 8007442:	f001 ff41 	bl	80092c8 <CRYP_Cmd>

    /* wait until the Busy flag is RESET */
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8007446:	2010      	movs	r0, #16
 8007448:	f002 f93c 	bl	80096c4 <CRYP_GetFlagStatus>
 800744c:	4603      	mov	r3, r0
 800744e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      counter++;
 8007452:	693b      	ldr	r3, [r7, #16]
 8007454:	3301      	adds	r3, #1
 8007456:	613b      	str	r3, [r7, #16]
    }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 8007458:	693b      	ldr	r3, [r7, #16]
 800745a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800745e:	d003      	beq.n	8007468 <CRYP_AES_CBC+0x2dc>
 8007460:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007464:	2b00      	cmp	r3, #0
 8007466:	d1ee      	bne.n	8007446 <CRYP_AES_CBC+0x2ba>

    if (busystatus != RESET)
 8007468:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800746c:	2b00      	cmp	r3, #0
 800746e:	d003      	beq.n	8007478 <CRYP_AES_CBC+0x2ec>
   {
       status = ERROR;
 8007470:	2300      	movs	r3, #0
 8007472:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
 8007476:	e009      	b.n	800748c <CRYP_AES_CBC+0x300>
    }
    else
    {
      /* Crypto Init for decryption process */  
      AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 8007478:	2304      	movs	r3, #4
 800747a:	647b      	str	r3, [r7, #68]	; 0x44
 800747c:	e006      	b.n	800748c <CRYP_AES_CBC+0x300>
    }
  }
  /*------------------ AES Encryption ------------------*/
  else /* AES encryption */
  {
    CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 800747e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007482:	4618      	mov	r0, r3
 8007484:	f001 fe76 	bl	8009174 <CRYP_KeyInit>

    /* Crypto Init for Encryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
 8007488:	2300      	movs	r3, #0
 800748a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_CBC;
 800748c:	2328      	movs	r3, #40	; 0x28
 800748e:	64bb      	str	r3, [r7, #72]	; 0x48
  AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 8007490:	2380      	movs	r3, #128	; 0x80
 8007492:	64fb      	str	r3, [r7, #76]	; 0x4c
  CRYP_Init(&AES_CRYP_InitStructure);
 8007494:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007498:	4618      	mov	r0, r3
 800749a:	f001 fe03 	bl	80090a4 <CRYP_Init>

  /* CRYP Initialization Vectors */
  CRYP_IVInit(&AES_CRYP_IVInitStructure);
 800749e:	f107 0314 	add.w	r3, r7, #20
 80074a2:	4618      	mov	r0, r3
 80074a4:	f001 feb4 	bl	8009210 <CRYP_IVInit>

  /* Flush IN/OUT FIFOs */
  CRYP_FIFOFlush();
 80074a8:	f001 ff00 	bl	80092ac <CRYP_FIFOFlush>

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 80074ac:	2001      	movs	r0, #1
 80074ae:	f001 ff0b 	bl	80092c8 <CRYP_Cmd>

  if(CRYP_GetCmdStatus() == DISABLE)
 80074b2:	f002 f8ed 	bl	8009690 <CRYP_GetCmdStatus>
 80074b6:	4603      	mov	r3, r0
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d101      	bne.n	80074c0 <CRYP_AES_CBC+0x334>
  {
    /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
       the CRYP peripheral (please check the device sales type. */
    return(ERROR);
 80074bc:	2300      	movs	r3, #0
 80074be:	e08b      	b.n	80075d8 <CRYP_AES_CBC+0x44c>
  }
  
  for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 80074c0:	2300      	movs	r3, #0
 80074c2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80074c6:	e077      	b.n	80075b8 <CRYP_AES_CBC+0x42c>
  {

    /* Write the Input block in the IN FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 80074c8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	4618      	mov	r0, r3
 80074d0:	f001 ff16 	bl	8009300 <CRYP_DataIn>
    inputaddr+=4;
 80074d4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80074d8:	3304      	adds	r3, #4
 80074da:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 80074de:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	4618      	mov	r0, r3
 80074e6:	f001 ff0b 	bl	8009300 <CRYP_DataIn>
    inputaddr+=4;
 80074ea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80074ee:	3304      	adds	r3, #4
 80074f0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 80074f4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	4618      	mov	r0, r3
 80074fc:	f001 ff00 	bl	8009300 <CRYP_DataIn>
    inputaddr+=4;
 8007500:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007504:	3304      	adds	r3, #4
 8007506:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 800750a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	4618      	mov	r0, r3
 8007512:	f001 fef5 	bl	8009300 <CRYP_DataIn>
    inputaddr+=4;
 8007516:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800751a:	3304      	adds	r3, #4
 800751c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    /* Wait until the complete message has been processed */
    counter = 0;
 8007520:	2300      	movs	r3, #0
 8007522:	613b      	str	r3, [r7, #16]
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8007524:	2010      	movs	r0, #16
 8007526:	f002 f8cd 	bl	80096c4 <CRYP_GetFlagStatus>
 800752a:	4603      	mov	r3, r0
 800752c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      counter++;
 8007530:	693b      	ldr	r3, [r7, #16]
 8007532:	3301      	adds	r3, #1
 8007534:	613b      	str	r3, [r7, #16]
    }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 8007536:	693b      	ldr	r3, [r7, #16]
 8007538:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800753c:	d003      	beq.n	8007546 <CRYP_AES_CBC+0x3ba>
 800753e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007542:	2b00      	cmp	r3, #0
 8007544:	d1ee      	bne.n	8007524 <CRYP_AES_CBC+0x398>

    if (busystatus != RESET)
 8007546:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800754a:	2b00      	cmp	r3, #0
 800754c:	d003      	beq.n	8007556 <CRYP_AES_CBC+0x3ca>
   {
       status = ERROR;
 800754e:	2300      	movs	r3, #0
 8007550:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
 8007554:	e02b      	b.n	80075ae <CRYP_AES_CBC+0x422>
    }
    else
    {

      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8007556:	f8d7 40bc 	ldr.w	r4, [r7, #188]	; 0xbc
 800755a:	f001 fedf 	bl	800931c <CRYP_DataOut>
 800755e:	4603      	mov	r3, r0
 8007560:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8007562:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007566:	3304      	adds	r3, #4
 8007568:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 800756c:	f8d7 40bc 	ldr.w	r4, [r7, #188]	; 0xbc
 8007570:	f001 fed4 	bl	800931c <CRYP_DataOut>
 8007574:	4603      	mov	r3, r0
 8007576:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8007578:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800757c:	3304      	adds	r3, #4
 800757e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8007582:	f8d7 40bc 	ldr.w	r4, [r7, #188]	; 0xbc
 8007586:	f001 fec9 	bl	800931c <CRYP_DataOut>
 800758a:	4603      	mov	r3, r0
 800758c:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 800758e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007592:	3304      	adds	r3, #4
 8007594:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8007598:	f8d7 40bc 	ldr.w	r4, [r7, #188]	; 0xbc
 800759c:	f001 febe 	bl	800931c <CRYP_DataOut>
 80075a0:	4603      	mov	r3, r0
 80075a2:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 80075a4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80075a8:	3304      	adds	r3, #4
 80075aa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
       the CRYP peripheral (please check the device sales type. */
    return(ERROR);
  }
  
  for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 80075ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80075b2:	3310      	adds	r3, #16
 80075b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80075b8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80075bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075c0:	429a      	cmp	r2, r3
 80075c2:	d204      	bcs.n	80075ce <CRYP_AES_CBC+0x442>
 80075c4:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	f47f af7d 	bne.w	80074c8 <CRYP_AES_CBC+0x33c>
      outputaddr+=4;
    }
  }

  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 80075ce:	2000      	movs	r0, #0
 80075d0:	f001 fe7a 	bl	80092c8 <CRYP_Cmd>

  return status;
 80075d4:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
}
 80075d8:	4618      	mov	r0, r3
 80075da:	37cc      	adds	r7, #204	; 0xcc
 80075dc:	46bd      	mov	sp, r7
 80075de:	bd90      	pop	{r4, r7, pc}

080075e0 <CRYP_AES_CTR>:
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_AES_CTR(uint8_t Mode, uint8_t InitVectors[16], uint8_t *Key, 
                         uint16_t Keysize, uint8_t *Input, uint32_t Ilength,
                         uint8_t *Output)
{
 80075e0:	b590      	push	{r4, r7, lr}
 80075e2:	b0b3      	sub	sp, #204	; 0xcc
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	60b9      	str	r1, [r7, #8]
 80075e8:	607a      	str	r2, [r7, #4]
 80075ea:	4602      	mov	r2, r0
 80075ec:	73fa      	strb	r2, [r7, #15]
 80075ee:	81bb      	strh	r3, [r7, #12]
  CRYP_InitTypeDef AES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
  CRYP_IVInitTypeDef AES_CRYP_IVInitStructure;
  __IO uint32_t counter = 0;
 80075f0:	2300      	movs	r3, #0
 80075f2:	613b      	str	r3, [r7, #16]
  uint32_t busystatus = 0;
 80075f4:	2300      	movs	r3, #0
 80075f6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  ErrorStatus status = SUCCESS;
 80075fa:	2301      	movs	r3, #1
 80075fc:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
  uint32_t keyaddr    = (uint32_t)Key;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  uint32_t inputaddr  = (uint32_t)Input;
 8007606:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800760a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  uint32_t outputaddr = (uint32_t)Output;
 800760e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007612:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t ivaddr     = (uint32_t)InitVectors;
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t i = 0;
 800761c:	2300      	movs	r3, #0
 800761e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
 8007622:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007626:	4618      	mov	r0, r3
 8007628:	f001 fdd0 	bl	80091cc <CRYP_KeyStructInit>

  switch(Keysize)
 800762c:	89bb      	ldrh	r3, [r7, #12]
 800762e:	2bc0      	cmp	r3, #192	; 0xc0
 8007630:	d03c      	beq.n	80076ac <CRYP_AES_CTR+0xcc>
 8007632:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007636:	f000 808c 	beq.w	8007752 <CRYP_AES_CTR+0x172>
 800763a:	2b80      	cmp	r3, #128	; 0x80
 800763c:	d000      	beq.n	8007640 <CRYP_AES_CTR+0x60>
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
    break;
    default:
    break;
 800763e:	e0e9      	b.n	8007814 <CRYP_AES_CTR+0x234>
  CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);

  switch(Keysize)
  {
    case 128:
    AES_CRYP_InitStructure.CRYP_KeySize = CRYP_KeySize_128b;
 8007640:	2300      	movs	r3, #0
 8007642:	653b      	str	r3, [r7, #80]	; 0x50
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8007644:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800764e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007652:	ba1b      	rev	r3, r3
 8007654:	637b      	str	r3, [r7, #52]	; 0x34
    keyaddr+=4;
 8007656:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800765a:	3304      	adds	r3, #4
 800765c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8007660:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800766a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800766e:	ba1b      	rev	r3, r3
 8007670:	63bb      	str	r3, [r7, #56]	; 0x38
    keyaddr+=4;
 8007672:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007676:	3304      	adds	r3, #4
 8007678:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 800767c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007686:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800768a:	ba1b      	rev	r3, r3
 800768c:	63fb      	str	r3, [r7, #60]	; 0x3c
    keyaddr+=4;
 800768e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007692:	3304      	adds	r3, #4
 8007694:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 8007698:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80076a2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80076a6:	ba1b      	rev	r3, r3
 80076a8:	643b      	str	r3, [r7, #64]	; 0x40
    break;
 80076aa:	e0b3      	b.n	8007814 <CRYP_AES_CTR+0x234>
    case 192:
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_192b;
 80076ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80076b0:	653b      	str	r3, [r7, #80]	; 0x50
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 80076b2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80076bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80076c0:	ba1b      	rev	r3, r3
 80076c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    keyaddr+=4;
 80076c4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80076c8:	3304      	adds	r3, #4
 80076ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 80076ce:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80076d8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80076dc:	ba1b      	rev	r3, r3
 80076de:	633b      	str	r3, [r7, #48]	; 0x30
    keyaddr+=4;
 80076e0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80076e4:	3304      	adds	r3, #4
 80076e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 80076ea:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80076f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80076f8:	ba1b      	rev	r3, r3
 80076fa:	637b      	str	r3, [r7, #52]	; 0x34
    keyaddr+=4;
 80076fc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007700:	3304      	adds	r3, #4
 8007702:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8007706:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007710:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007714:	ba1b      	rev	r3, r3
 8007716:	63bb      	str	r3, [r7, #56]	; 0x38
    keyaddr+=4;
 8007718:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800771c:	3304      	adds	r3, #4
 800771e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 8007722:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800772c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007730:	ba1b      	rev	r3, r3
 8007732:	63fb      	str	r3, [r7, #60]	; 0x3c
    keyaddr+=4;
 8007734:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007738:	3304      	adds	r3, #4
 800773a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 800773e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007748:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800774c:	ba1b      	rev	r3, r3
 800774e:	643b      	str	r3, [r7, #64]	; 0x40
    break;
 8007750:	e060      	b.n	8007814 <CRYP_AES_CTR+0x234>
    case 256:
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_256b;
 8007752:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007756:	653b      	str	r3, [r7, #80]	; 0x50
    AES_CRYP_KeyInitStructure.CRYP_Key0Left = __REV(*(uint32_t*)(keyaddr));
 8007758:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007762:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007766:	ba1b      	rev	r3, r3
 8007768:	627b      	str	r3, [r7, #36]	; 0x24
    keyaddr+=4;
 800776a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800776e:	3304      	adds	r3, #4
 8007770:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key0Right= __REV(*(uint32_t*)(keyaddr));
 8007774:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800777c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800777e:	ba1b      	rev	r3, r3
 8007780:	62bb      	str	r3, [r7, #40]	; 0x28
    keyaddr+=4;
 8007782:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007786:	3304      	adds	r3, #4
 8007788:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 800778c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	67bb      	str	r3, [r7, #120]	; 0x78
 8007794:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007796:	ba1b      	rev	r3, r3
 8007798:	62fb      	str	r3, [r7, #44]	; 0x2c
    keyaddr+=4;
 800779a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800779e:	3304      	adds	r3, #4
 80077a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 80077a4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	677b      	str	r3, [r7, #116]	; 0x74
 80077ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80077ae:	ba1b      	rev	r3, r3
 80077b0:	633b      	str	r3, [r7, #48]	; 0x30
    keyaddr+=4;
 80077b2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80077b6:	3304      	adds	r3, #4
 80077b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 80077bc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	673b      	str	r3, [r7, #112]	; 0x70
 80077c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80077c6:	ba1b      	rev	r3, r3
 80077c8:	637b      	str	r3, [r7, #52]	; 0x34
    keyaddr+=4;
 80077ca:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80077ce:	3304      	adds	r3, #4
 80077d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 80077d4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	66fb      	str	r3, [r7, #108]	; 0x6c
 80077dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077de:	ba1b      	rev	r3, r3
 80077e0:	63bb      	str	r3, [r7, #56]	; 0x38
    keyaddr+=4;
 80077e2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80077e6:	3304      	adds	r3, #4
 80077e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 80077ec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	66bb      	str	r3, [r7, #104]	; 0x68
 80077f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80077f6:	ba1b      	rev	r3, r3
 80077f8:	63fb      	str	r3, [r7, #60]	; 0x3c
    keyaddr+=4;
 80077fa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80077fe:	3304      	adds	r3, #4
 8007800:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 8007804:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	667b      	str	r3, [r7, #100]	; 0x64
 800780c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800780e:	ba1b      	rev	r3, r3
 8007810:	643b      	str	r3, [r7, #64]	; 0x40
    break;
 8007812:	bf00      	nop
    default:
    break;
  }
  /* CRYP Initialization Vectors */
  AES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
 8007814:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	663b      	str	r3, [r7, #96]	; 0x60
 800781c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800781e:	ba1b      	rev	r3, r3
 8007820:	617b      	str	r3, [r7, #20]
  ivaddr+=4;
 8007822:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007826:	3304      	adds	r3, #4
 8007828:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  AES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
 800782c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007834:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007836:	ba1b      	rev	r3, r3
 8007838:	61bb      	str	r3, [r7, #24]
  ivaddr+=4;
 800783a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800783e:	3304      	adds	r3, #4
 8007840:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  AES_CRYP_IVInitStructure.CRYP_IV1Left = __REV(*(uint32_t*)(ivaddr));
 8007844:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	65bb      	str	r3, [r7, #88]	; 0x58
 800784c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800784e:	ba1b      	rev	r3, r3
 8007850:	61fb      	str	r3, [r7, #28]
  ivaddr+=4;
 8007852:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007856:	3304      	adds	r3, #4
 8007858:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  AES_CRYP_IVInitStructure.CRYP_IV1Right= __REV(*(uint32_t*)(ivaddr));
 800785c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	657b      	str	r3, [r7, #84]	; 0x54
 8007864:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007866:	ba1b      	rev	r3, r3
 8007868:	623b      	str	r3, [r7, #32]

  /* Key Initialisation */
  CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 800786a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800786e:	4618      	mov	r0, r3
 8007870:	f001 fc80 	bl	8009174 <CRYP_KeyInit>

  /*------------------ AES Decryption ------------------*/
  if(Mode == MODE_DECRYPT) /* AES decryption */
 8007874:	7bfb      	ldrb	r3, [r7, #15]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d102      	bne.n	8007880 <CRYP_AES_CTR+0x2a0>
  {
    /* Crypto Init for decryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 800787a:	2304      	movs	r3, #4
 800787c:	647b      	str	r3, [r7, #68]	; 0x44
 800787e:	e001      	b.n	8007884 <CRYP_AES_CTR+0x2a4>
  }
  /*------------------ AES Encryption ------------------*/
  else /* AES encryption */
  {
    /* Crypto Init for Encryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
 8007880:	2300      	movs	r3, #0
 8007882:	647b      	str	r3, [r7, #68]	; 0x44
  }
  AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_CTR;
 8007884:	2330      	movs	r3, #48	; 0x30
 8007886:	64bb      	str	r3, [r7, #72]	; 0x48
  AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 8007888:	2380      	movs	r3, #128	; 0x80
 800788a:	64fb      	str	r3, [r7, #76]	; 0x4c
  CRYP_Init(&AES_CRYP_InitStructure);
 800788c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007890:	4618      	mov	r0, r3
 8007892:	f001 fc07 	bl	80090a4 <CRYP_Init>

  /* CRYP Initialization Vectors */
  CRYP_IVInit(&AES_CRYP_IVInitStructure);
 8007896:	f107 0314 	add.w	r3, r7, #20
 800789a:	4618      	mov	r0, r3
 800789c:	f001 fcb8 	bl	8009210 <CRYP_IVInit>

  /* Flush IN/OUT FIFOs */
  CRYP_FIFOFlush();
 80078a0:	f001 fd04 	bl	80092ac <CRYP_FIFOFlush>

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 80078a4:	2001      	movs	r0, #1
 80078a6:	f001 fd0f 	bl	80092c8 <CRYP_Cmd>

  if(CRYP_GetCmdStatus() == DISABLE)
 80078aa:	f001 fef1 	bl	8009690 <CRYP_GetCmdStatus>
 80078ae:	4603      	mov	r3, r0
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d101      	bne.n	80078b8 <CRYP_AES_CTR+0x2d8>
  {
    /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
       the CRYP peripheral (please check the device sales type. */
    return(ERROR);
 80078b4:	2300      	movs	r3, #0
 80078b6:	e08b      	b.n	80079d0 <CRYP_AES_CTR+0x3f0>
  }
  
  for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 80078b8:	2300      	movs	r3, #0
 80078ba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80078be:	e077      	b.n	80079b0 <CRYP_AES_CTR+0x3d0>
  {

    /* Write the Input block in the IN FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 80078c0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	4618      	mov	r0, r3
 80078c8:	f001 fd1a 	bl	8009300 <CRYP_DataIn>
    inputaddr+=4;
 80078cc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80078d0:	3304      	adds	r3, #4
 80078d2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 80078d6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4618      	mov	r0, r3
 80078de:	f001 fd0f 	bl	8009300 <CRYP_DataIn>
    inputaddr+=4;
 80078e2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80078e6:	3304      	adds	r3, #4
 80078e8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 80078ec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	4618      	mov	r0, r3
 80078f4:	f001 fd04 	bl	8009300 <CRYP_DataIn>
    inputaddr+=4;
 80078f8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80078fc:	3304      	adds	r3, #4
 80078fe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8007902:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	4618      	mov	r0, r3
 800790a:	f001 fcf9 	bl	8009300 <CRYP_DataIn>
    inputaddr+=4;
 800790e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007912:	3304      	adds	r3, #4
 8007914:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    /* Wait until the complete message has been processed */
    counter = 0;
 8007918:	2300      	movs	r3, #0
 800791a:	613b      	str	r3, [r7, #16]
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 800791c:	2010      	movs	r0, #16
 800791e:	f001 fed1 	bl	80096c4 <CRYP_GetFlagStatus>
 8007922:	4603      	mov	r3, r0
 8007924:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      counter++;
 8007928:	693b      	ldr	r3, [r7, #16]
 800792a:	3301      	adds	r3, #1
 800792c:	613b      	str	r3, [r7, #16]
    }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 800792e:	693b      	ldr	r3, [r7, #16]
 8007930:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007934:	d003      	beq.n	800793e <CRYP_AES_CTR+0x35e>
 8007936:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800793a:	2b00      	cmp	r3, #0
 800793c:	d1ee      	bne.n	800791c <CRYP_AES_CTR+0x33c>

    if (busystatus != RESET)
 800793e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007942:	2b00      	cmp	r3, #0
 8007944:	d003      	beq.n	800794e <CRYP_AES_CTR+0x36e>
   {
       status = ERROR;
 8007946:	2300      	movs	r3, #0
 8007948:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
 800794c:	e02b      	b.n	80079a6 <CRYP_AES_CTR+0x3c6>
    }
    else
    {

      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 800794e:	f8d7 40bc 	ldr.w	r4, [r7, #188]	; 0xbc
 8007952:	f001 fce3 	bl	800931c <CRYP_DataOut>
 8007956:	4603      	mov	r3, r0
 8007958:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 800795a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800795e:	3304      	adds	r3, #4
 8007960:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8007964:	f8d7 40bc 	ldr.w	r4, [r7, #188]	; 0xbc
 8007968:	f001 fcd8 	bl	800931c <CRYP_DataOut>
 800796c:	4603      	mov	r3, r0
 800796e:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8007970:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007974:	3304      	adds	r3, #4
 8007976:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 800797a:	f8d7 40bc 	ldr.w	r4, [r7, #188]	; 0xbc
 800797e:	f001 fccd 	bl	800931c <CRYP_DataOut>
 8007982:	4603      	mov	r3, r0
 8007984:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8007986:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800798a:	3304      	adds	r3, #4
 800798c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8007990:	f8d7 40bc 	ldr.w	r4, [r7, #188]	; 0xbc
 8007994:	f001 fcc2 	bl	800931c <CRYP_DataOut>
 8007998:	4603      	mov	r3, r0
 800799a:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 800799c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80079a0:	3304      	adds	r3, #4
 80079a2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
       the CRYP peripheral (please check the device sales type. */
    return(ERROR);
  }
  
  for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 80079a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80079aa:	3310      	adds	r3, #16
 80079ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80079b0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80079b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80079b8:	429a      	cmp	r2, r3
 80079ba:	d204      	bcs.n	80079c6 <CRYP_AES_CTR+0x3e6>
 80079bc:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	f47f af7d 	bne.w	80078c0 <CRYP_AES_CTR+0x2e0>
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
      outputaddr+=4;
    }
  }
  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 80079c6:	2000      	movs	r0, #0
 80079c8:	f001 fc7e 	bl	80092c8 <CRYP_Cmd>

  return status;
 80079cc:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
}
 80079d0:	4618      	mov	r0, r3
 80079d2:	37cc      	adds	r7, #204	; 0xcc
 80079d4:	46bd      	mov	sp, r7
 80079d6:	bd90      	pop	{r4, r7, pc}

080079d8 <CRYP_AES_GCM>:
ErrorStatus CRYP_AES_GCM(uint8_t Mode, uint8_t InitVectors[16],
                         uint8_t *Key, uint16_t Keysize,
                         uint8_t *Input, uint32_t ILength,
                         uint8_t *Header, uint32_t HLength,
                         uint8_t *Output, uint8_t *AuthTAG)
{
 80079d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079dc:	b0c5      	sub	sp, #276	; 0x114
 80079de:	af00      	add	r7, sp, #0
 80079e0:	f107 0610 	add.w	r6, r7, #16
 80079e4:	6031      	str	r1, [r6, #0]
 80079e6:	f107 010c 	add.w	r1, r7, #12
 80079ea:	600a      	str	r2, [r1, #0]
 80079ec:	4602      	mov	r2, r0
 80079ee:	75fa      	strb	r2, [r7, #23]
 80079f0:	82bb      	strh	r3, [r7, #20]
  CRYP_InitTypeDef AES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
  CRYP_IVInitTypeDef AES_CRYP_IVInitStructure;
  __IO uint32_t counter = 0;
 80079f2:	2300      	movs	r3, #0
 80079f4:	61fb      	str	r3, [r7, #28]
  uint32_t busystatus = 0;
 80079f6:	2300      	movs	r3, #0
 80079f8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  ErrorStatus status = SUCCESS;
 80079fc:	2301      	movs	r3, #1
 80079fe:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
  uint32_t keyaddr    = (uint32_t)Key;
 8007a02:	f107 030c 	add.w	r3, r7, #12
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  uint32_t inputaddr  = (uint32_t)Input;
 8007a0c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007a10:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  uint32_t outputaddr = (uint32_t)Output;
 8007a14:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8007a18:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  uint32_t ivaddr     = (uint32_t)InitVectors;
 8007a1c:	f107 0310 	add.w	r3, r7, #16
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  uint32_t headeraddr = (uint32_t)Header;
 8007a26:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8007a2a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  uint32_t tagaddr = (uint32_t)AuthTAG;
 8007a2e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8007a32:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  uint64_t headerlength = HLength * 8;/* header length in bits */
 8007a36:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8007a3a:	00db      	lsls	r3, r3, #3
 8007a3c:	461a      	mov	r2, r3
 8007a3e:	f04f 0300 	mov.w	r3, #0
 8007a42:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
  uint64_t inputlength = ILength * 8;/* input length in bits */
 8007a46:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8007a4a:	00db      	lsls	r3, r3, #3
 8007a4c:	461a      	mov	r2, r3
 8007a4e:	f04f 0300 	mov.w	r3, #0
 8007a52:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
  uint32_t loopcounter = 0;
 8007a56:	2300      	movs	r3, #0
 8007a58:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
 8007a5c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007a60:	4618      	mov	r0, r3
 8007a62:	f001 fbb3 	bl	80091cc <CRYP_KeyStructInit>

  switch(Keysize)
 8007a66:	8abb      	ldrh	r3, [r7, #20]
 8007a68:	2bc0      	cmp	r3, #192	; 0xc0
 8007a6a:	d03c      	beq.n	8007ae6 <CRYP_AES_GCM+0x10e>
 8007a6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a70:	f000 808c 	beq.w	8007b8c <CRYP_AES_GCM+0x1b4>
 8007a74:	2b80      	cmp	r3, #128	; 0x80
 8007a76:	d000      	beq.n	8007a7a <CRYP_AES_GCM+0xa2>
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
    break;
    default:
    break;
 8007a78:	e0f7      	b.n	8007c6a <CRYP_AES_GCM+0x292>
  CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);

  switch(Keysize)
  {
    case 128:
    AES_CRYP_InitStructure.CRYP_KeySize = CRYP_KeySize_128b;
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	65fb      	str	r3, [r7, #92]	; 0x5c
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8007a7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007a88:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007a8c:	ba1b      	rev	r3, r3
 8007a8e:	643b      	str	r3, [r7, #64]	; 0x40
    keyaddr+=4;
 8007a90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a94:	3304      	adds	r3, #4
 8007a96:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8007a9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007aa4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007aa8:	ba1b      	rev	r3, r3
 8007aaa:	647b      	str	r3, [r7, #68]	; 0x44
    keyaddr+=4;
 8007aac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ab0:	3304      	adds	r3, #4
 8007ab2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 8007ab6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007ac0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007ac4:	ba1b      	rev	r3, r3
 8007ac6:	64bb      	str	r3, [r7, #72]	; 0x48
    keyaddr+=4;
 8007ac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007acc:	3304      	adds	r3, #4
 8007ace:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 8007ad2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007adc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007ae0:	ba1b      	rev	r3, r3
 8007ae2:	64fb      	str	r3, [r7, #76]	; 0x4c
    break;
 8007ae4:	e0c1      	b.n	8007c6a <CRYP_AES_GCM+0x292>
    case 192:
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_192b;
 8007ae6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007aea:	65fb      	str	r3, [r7, #92]	; 0x5c
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 8007aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007af6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007afa:	ba1b      	rev	r3, r3
 8007afc:	63bb      	str	r3, [r7, #56]	; 0x38
    keyaddr+=4;
 8007afe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b02:	3304      	adds	r3, #4
 8007b04:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 8007b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007b12:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007b16:	ba1b      	rev	r3, r3
 8007b18:	63fb      	str	r3, [r7, #60]	; 0x3c
    keyaddr+=4;
 8007b1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b1e:	3304      	adds	r3, #4
 8007b20:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8007b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007b2e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007b32:	ba1b      	rev	r3, r3
 8007b34:	643b      	str	r3, [r7, #64]	; 0x40
    keyaddr+=4;
 8007b36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b3a:	3304      	adds	r3, #4
 8007b3c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8007b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007b4a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007b4e:	ba1b      	rev	r3, r3
 8007b50:	647b      	str	r3, [r7, #68]	; 0x44
    keyaddr+=4;
 8007b52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b56:	3304      	adds	r3, #4
 8007b58:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 8007b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007b66:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007b6a:	ba1b      	rev	r3, r3
 8007b6c:	64bb      	str	r3, [r7, #72]	; 0x48
    keyaddr+=4;
 8007b6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b72:	3304      	adds	r3, #4
 8007b74:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 8007b78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007b82:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007b86:	ba1b      	rev	r3, r3
 8007b88:	64fb      	str	r3, [r7, #76]	; 0x4c
    break;
 8007b8a:	e06e      	b.n	8007c6a <CRYP_AES_GCM+0x292>
    case 256:
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_256b;
 8007b8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007b90:	65fb      	str	r3, [r7, #92]	; 0x5c
    AES_CRYP_KeyInitStructure.CRYP_Key0Left = __REV(*(uint32_t*)(keyaddr));
 8007b92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007b9c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007ba0:	ba1b      	rev	r3, r3
 8007ba2:	633b      	str	r3, [r7, #48]	; 0x30
    keyaddr+=4;
 8007ba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ba8:	3304      	adds	r3, #4
 8007baa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    AES_CRYP_KeyInitStructure.CRYP_Key0Right= __REV(*(uint32_t*)(keyaddr));
 8007bae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007bb8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007bbc:	ba1b      	rev	r3, r3
 8007bbe:	637b      	str	r3, [r7, #52]	; 0x34
    keyaddr+=4;
 8007bc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bc4:	3304      	adds	r3, #4
 8007bc6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 8007bca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007bd4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007bd8:	ba1b      	rev	r3, r3
 8007bda:	63bb      	str	r3, [r7, #56]	; 0x38
    keyaddr+=4;
 8007bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007be0:	3304      	adds	r3, #4
 8007be2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 8007be6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007bf0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007bf4:	ba1b      	rev	r3, r3
 8007bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
    keyaddr+=4;
 8007bf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bfc:	3304      	adds	r3, #4
 8007bfe:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8007c02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007c0c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007c10:	ba1b      	rev	r3, r3
 8007c12:	643b      	str	r3, [r7, #64]	; 0x40
    keyaddr+=4;
 8007c14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c18:	3304      	adds	r3, #4
 8007c1a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8007c1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007c28:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007c2c:	ba1b      	rev	r3, r3
 8007c2e:	647b      	str	r3, [r7, #68]	; 0x44
    keyaddr+=4;
 8007c30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c34:	3304      	adds	r3, #4
 8007c36:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 8007c3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007c44:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007c48:	ba1b      	rev	r3, r3
 8007c4a:	64bb      	str	r3, [r7, #72]	; 0x48
    keyaddr+=4;
 8007c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c50:	3304      	adds	r3, #4
 8007c52:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 8007c56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007c60:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007c64:	ba1b      	rev	r3, r3
 8007c66:	64fb      	str	r3, [r7, #76]	; 0x4c
    break;
 8007c68:	bf00      	nop
    default:
    break;
  }
  
  /* CRYP Initialization Vectors */
  AES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
 8007c6a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007c74:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007c78:	ba1b      	rev	r3, r3
 8007c7a:	623b      	str	r3, [r7, #32]
  ivaddr+=4;
 8007c7c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007c80:	3304      	adds	r3, #4
 8007c82:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  AES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
 8007c86:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007c90:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007c94:	ba1b      	rev	r3, r3
 8007c96:	627b      	str	r3, [r7, #36]	; 0x24
  ivaddr+=4;
 8007c98:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007c9c:	3304      	adds	r3, #4
 8007c9e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  AES_CRYP_IVInitStructure.CRYP_IV1Left = __REV(*(uint32_t*)(ivaddr));
 8007ca2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007cac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007cb0:	ba1b      	rev	r3, r3
 8007cb2:	62bb      	str	r3, [r7, #40]	; 0x28
  ivaddr+=4;
 8007cb4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007cb8:	3304      	adds	r3, #4
 8007cba:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  AES_CRYP_IVInitStructure.CRYP_IV1Right= __REV(*(uint32_t*)(ivaddr));
 8007cbe:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007cc8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007ccc:	ba1b      	rev	r3, r3
 8007cce:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /*------------------ AES Encryption ------------------*/
  if(Mode == MODE_ENCRYPT) /* AES encryption */
 8007cd0:	7dfb      	ldrb	r3, [r7, #23]
 8007cd2:	2b01      	cmp	r3, #1
 8007cd4:	f040 81a9 	bne.w	800802a <CRYP_AES_GCM+0x652>
  {
    /* Flush IN/OUT FIFOs */
    CRYP_FIFOFlush();
 8007cd8:	f001 fae8 	bl	80092ac <CRYP_FIFOFlush>
    
    /* Key Initialisation */
    CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 8007cdc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	f001 fa47 	bl	8009174 <CRYP_KeyInit>
    
    /* CRYP Initialization Vectors */
    CRYP_IVInit(&AES_CRYP_IVInitStructure);
 8007ce6:	f107 0320 	add.w	r3, r7, #32
 8007cea:	4618      	mov	r0, r3
 8007cec:	f001 fa90 	bl	8009210 <CRYP_IVInit>
    
    /* Crypto Init for Key preparation for decryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	653b      	str	r3, [r7, #80]	; 0x50
    AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_GCM;
 8007cf4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007cf8:	657b      	str	r3, [r7, #84]	; 0x54
    AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 8007cfa:	2380      	movs	r3, #128	; 0x80
 8007cfc:	65bb      	str	r3, [r7, #88]	; 0x58
    CRYP_Init(&AES_CRYP_InitStructure);
 8007cfe:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007d02:	4618      	mov	r0, r3
 8007d04:	f001 f9ce 	bl	80090a4 <CRYP_Init>
    
    /***************************** Init phase *********************************/
    /* Select init phase */
    CRYP_PhaseConfig(CRYP_Phase_Init);
 8007d08:	2000      	movs	r0, #0
 8007d0a:	f001 fab3 	bl	8009274 <CRYP_PhaseConfig>
    
    /* Enable Crypto processor */
    CRYP_Cmd(ENABLE);
 8007d0e:	2001      	movs	r0, #1
 8007d10:	f001 fada 	bl	80092c8 <CRYP_Cmd>
    
    /* Wait for CRYPEN bit to be 0 */
    while(CRYP_GetCmdStatus() == ENABLE)
 8007d14:	bf00      	nop
 8007d16:	f001 fcbb 	bl	8009690 <CRYP_GetCmdStatus>
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	2b01      	cmp	r3, #1
 8007d1e:	d0fa      	beq.n	8007d16 <CRYP_AES_GCM+0x33e>
    {
    }
    
    /***************************** header phase *******************************/
    if(HLength != 0)
 8007d20:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d069      	beq.n	8007dfc <CRYP_AES_GCM+0x424>
    {
      /* Select header phase */
      CRYP_PhaseConfig(CRYP_Phase_Header);
 8007d28:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8007d2c:	f001 faa2 	bl	8009274 <CRYP_PhaseConfig>
      
      /* Enable Crypto processor */
      CRYP_Cmd(ENABLE);
 8007d30:	2001      	movs	r0, #1
 8007d32:	f001 fac9 	bl	80092c8 <CRYP_Cmd>
      
      if(CRYP_GetCmdStatus() == DISABLE)
 8007d36:	f001 fcab 	bl	8009690 <CRYP_GetCmdStatus>
 8007d3a:	4603      	mov	r3, r0
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d101      	bne.n	8007d44 <CRYP_AES_GCM+0x36c>
      {
         /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
            the CRYP peripheral (please check the device sales type. */
         return(ERROR);
 8007d40:	2300      	movs	r3, #0
 8007d42:	e31d      	b.n	8008380 <CRYP_AES_GCM+0x9a8>
      }
      
      for(loopcounter = 0; (loopcounter < HLength); loopcounter+=16)
 8007d44:	2300      	movs	r3, #0
 8007d46:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007d4a:	e037      	b.n	8007dbc <CRYP_AES_GCM+0x3e4>
      {
        /* Wait until the IFEM flag is reset */
        while(CRYP_GetFlagStatus(CRYP_FLAG_IFEM) == RESET)
 8007d4c:	bf00      	nop
 8007d4e:	2001      	movs	r0, #1
 8007d50:	f001 fcb8 	bl	80096c4 <CRYP_GetFlagStatus>
 8007d54:	4603      	mov	r3, r0
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d0f9      	beq.n	8007d4e <CRYP_AES_GCM+0x376>
        {
        }
        
        /* Write the Input block in the IN FIFO */
        CRYP_DataIn(*(uint32_t*)(headeraddr));
 8007d5a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	4618      	mov	r0, r3
 8007d62:	f001 facd 	bl	8009300 <CRYP_DataIn>
        headeraddr+=4;
 8007d66:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007d6a:	3304      	adds	r3, #4
 8007d6c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
        CRYP_DataIn(*(uint32_t*)(headeraddr));
 8007d70:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	4618      	mov	r0, r3
 8007d78:	f001 fac2 	bl	8009300 <CRYP_DataIn>
        headeraddr+=4;
 8007d7c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007d80:	3304      	adds	r3, #4
 8007d82:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
        CRYP_DataIn(*(uint32_t*)(headeraddr));
 8007d86:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	f001 fab7 	bl	8009300 <CRYP_DataIn>
        headeraddr+=4;
 8007d92:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007d96:	3304      	adds	r3, #4
 8007d98:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
        CRYP_DataIn(*(uint32_t*)(headeraddr));
 8007d9c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	4618      	mov	r0, r3
 8007da4:	f001 faac 	bl	8009300 <CRYP_DataIn>
        headeraddr+=4;
 8007da8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007dac:	3304      	adds	r3, #4
 8007dae:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
         /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
            the CRYP peripheral (please check the device sales type. */
         return(ERROR);
      }
      
      for(loopcounter = 0; (loopcounter < HLength); loopcounter+=16)
 8007db2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007db6:	3310      	adds	r3, #16
 8007db8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007dbc:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8007dc0:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8007dc4:	429a      	cmp	r2, r3
 8007dc6:	d3c1      	bcc.n	8007d4c <CRYP_AES_GCM+0x374>
        CRYP_DataIn(*(uint32_t*)(headeraddr));
        headeraddr+=4;
      }
      
      /* Wait until the complete message has been processed */
      counter = 0;
 8007dc8:	2300      	movs	r3, #0
 8007dca:	61fb      	str	r3, [r7, #28]
      do
      {
        busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8007dcc:	2010      	movs	r0, #16
 8007dce:	f001 fc79 	bl	80096c4 <CRYP_GetFlagStatus>
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
        counter++;
 8007dd8:	69fb      	ldr	r3, [r7, #28]
 8007dda:	3301      	adds	r3, #1
 8007ddc:	61fb      	str	r3, [r7, #28]
      }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 8007dde:	69fb      	ldr	r3, [r7, #28]
 8007de0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007de4:	d003      	beq.n	8007dee <CRYP_AES_GCM+0x416>
 8007de6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d1ee      	bne.n	8007dcc <CRYP_AES_GCM+0x3f4>

      if (busystatus != RESET)
 8007dee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d002      	beq.n	8007dfc <CRYP_AES_GCM+0x424>
      {
        status = ERROR;
 8007df6:	2300      	movs	r3, #0
 8007df8:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
      }
    }
    
    /**************************** payload phase *******************************/
    if(ILength != 0)
 8007dfc:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	f000 80a3 	beq.w	8007f4c <CRYP_AES_GCM+0x574>
    {
      /* Select payload phase */
      CRYP_PhaseConfig(CRYP_Phase_Payload);
 8007e06:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8007e0a:	f001 fa33 	bl	8009274 <CRYP_PhaseConfig>
      
      /* Enable Crypto processor */
      CRYP_Cmd(ENABLE);
 8007e0e:	2001      	movs	r0, #1
 8007e10:	f001 fa5a 	bl	80092c8 <CRYP_Cmd>
      
      if(CRYP_GetCmdStatus() == DISABLE)
 8007e14:	f001 fc3c 	bl	8009690 <CRYP_GetCmdStatus>
 8007e18:	4603      	mov	r3, r0
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d101      	bne.n	8007e22 <CRYP_AES_GCM+0x44a>
      {
        /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
           the CRYP peripheral (please check the device sales type. */
        return(ERROR);
 8007e1e:	2300      	movs	r3, #0
 8007e20:	e2ae      	b.n	8008380 <CRYP_AES_GCM+0x9a8>
      }
      
      for(loopcounter = 0; ((loopcounter < ILength) && (status != ERROR)); loopcounter+=16)
 8007e22:	2300      	movs	r3, #0
 8007e24:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007e28:	e085      	b.n	8007f36 <CRYP_AES_GCM+0x55e>
      {
        /* Wait until the IFEM flag is reset */
        while(CRYP_GetFlagStatus(CRYP_FLAG_IFEM) == RESET)
 8007e2a:	bf00      	nop
 8007e2c:	2001      	movs	r0, #1
 8007e2e:	f001 fc49 	bl	80096c4 <CRYP_GetFlagStatus>
 8007e32:	4603      	mov	r3, r0
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d0f9      	beq.n	8007e2c <CRYP_AES_GCM+0x454>
        {
        }
        /* Write the Input block in the IN FIFO */
        CRYP_DataIn(*(uint32_t*)(inputaddr));
 8007e38:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	4618      	mov	r0, r3
 8007e40:	f001 fa5e 	bl	8009300 <CRYP_DataIn>
        inputaddr+=4;
 8007e44:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007e48:	3304      	adds	r3, #4
 8007e4a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        CRYP_DataIn(*(uint32_t*)(inputaddr));
 8007e4e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	4618      	mov	r0, r3
 8007e56:	f001 fa53 	bl	8009300 <CRYP_DataIn>
        inputaddr+=4;
 8007e5a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007e5e:	3304      	adds	r3, #4
 8007e60:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        CRYP_DataIn(*(uint32_t*)(inputaddr));
 8007e64:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	f001 fa48 	bl	8009300 <CRYP_DataIn>
        inputaddr+=4;
 8007e70:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007e74:	3304      	adds	r3, #4
 8007e76:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        CRYP_DataIn(*(uint32_t*)(inputaddr));
 8007e7a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	4618      	mov	r0, r3
 8007e82:	f001 fa3d 	bl	8009300 <CRYP_DataIn>
        inputaddr+=4;
 8007e86:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007e8a:	3304      	adds	r3, #4
 8007e8c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        
        /* Wait until the complete message has been processed */
        counter = 0;
 8007e90:	2300      	movs	r3, #0
 8007e92:	61fb      	str	r3, [r7, #28]
        do
        {
          busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8007e94:	2010      	movs	r0, #16
 8007e96:	f001 fc15 	bl	80096c4 <CRYP_GetFlagStatus>
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
          counter++;
 8007ea0:	69fb      	ldr	r3, [r7, #28]
 8007ea2:	3301      	adds	r3, #1
 8007ea4:	61fb      	str	r3, [r7, #28]
        }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 8007ea6:	69fb      	ldr	r3, [r7, #28]
 8007ea8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007eac:	d003      	beq.n	8007eb6 <CRYP_AES_GCM+0x4de>
 8007eae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d1ee      	bne.n	8007e94 <CRYP_AES_GCM+0x4bc>

        if (busystatus != RESET)
 8007eb6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d003      	beq.n	8007ec6 <CRYP_AES_GCM+0x4ee>
        {
          status = ERROR;
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8007ec4:	e032      	b.n	8007f2c <CRYP_AES_GCM+0x554>
        }
        else
        {
          /* Wait until the OFNE flag is reset */
          while(CRYP_GetFlagStatus(CRYP_FLAG_OFNE) == RESET)
 8007ec6:	bf00      	nop
 8007ec8:	2004      	movs	r0, #4
 8007eca:	f001 fbfb 	bl	80096c4 <CRYP_GetFlagStatus>
 8007ece:	4603      	mov	r3, r0
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d0f9      	beq.n	8007ec8 <CRYP_AES_GCM+0x4f0>
          {
          }
          
          /* Read the Output block from the Output FIFO */
          *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8007ed4:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 8007ed8:	f001 fa20 	bl	800931c <CRYP_DataOut>
 8007edc:	4603      	mov	r3, r0
 8007ede:	6023      	str	r3, [r4, #0]
          outputaddr+=4;
 8007ee0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ee4:	3304      	adds	r3, #4
 8007ee6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8007eea:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 8007eee:	f001 fa15 	bl	800931c <CRYP_DataOut>
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	6023      	str	r3, [r4, #0]
          outputaddr+=4;
 8007ef6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007efa:	3304      	adds	r3, #4
 8007efc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8007f00:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 8007f04:	f001 fa0a 	bl	800931c <CRYP_DataOut>
 8007f08:	4603      	mov	r3, r0
 8007f0a:	6023      	str	r3, [r4, #0]
          outputaddr+=4;
 8007f0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f10:	3304      	adds	r3, #4
 8007f12:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8007f16:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 8007f1a:	f001 f9ff 	bl	800931c <CRYP_DataOut>
 8007f1e:	4603      	mov	r3, r0
 8007f20:	6023      	str	r3, [r4, #0]
          outputaddr+=4;
 8007f22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f26:	3304      	adds	r3, #4
 8007f28:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
           the CRYP peripheral (please check the device sales type. */
        return(ERROR);
      }
      
      for(loopcounter = 0; ((loopcounter < ILength) && (status != ERROR)); loopcounter+=16)
 8007f2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f30:	3310      	adds	r3, #16
 8007f32:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007f36:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8007f3a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8007f3e:	429a      	cmp	r2, r3
 8007f40:	d204      	bcs.n	8007f4c <CRYP_AES_GCM+0x574>
 8007f42:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	f47f af6f 	bne.w	8007e2a <CRYP_AES_GCM+0x452>
      }
    }
    
    /***************************** final phase ********************************/
    /* Select final phase */
    CRYP_PhaseConfig(CRYP_Phase_Final);
 8007f4c:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8007f50:	f001 f990 	bl	8009274 <CRYP_PhaseConfig>
    
    /* Enable Crypto processor */
    CRYP_Cmd(ENABLE);
 8007f54:	2001      	movs	r0, #1
 8007f56:	f001 f9b7 	bl	80092c8 <CRYP_Cmd>
    
    if(CRYP_GetCmdStatus() == DISABLE)
 8007f5a:	f001 fb99 	bl	8009690 <CRYP_GetCmdStatus>
 8007f5e:	4603      	mov	r3, r0
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d101      	bne.n	8007f68 <CRYP_AES_GCM+0x590>
    {
      /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
         the CRYP peripheral (please check the device sales type. */
      return(ERROR);
 8007f64:	2300      	movs	r3, #0
 8007f66:	e20b      	b.n	8008380 <CRYP_AES_GCM+0x9a8>
    }
    
    /* Write number of bits concatenated with header in the IN FIFO */
    CRYP_DataIn(__REV(headerlength>>32));
 8007f68:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8007f6c:	0019      	movs	r1, r3
 8007f6e:	6039      	str	r1, [r7, #0]
 8007f70:	2300      	movs	r3, #0
 8007f72:	607b      	str	r3, [r7, #4]
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007f78:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007f7a:	ba1b      	rev	r3, r3
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	f001 f9bf 	bl	8009300 <CRYP_DataIn>
    CRYP_DataIn(__REV(headerlength));
 8007f82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f86:	67bb      	str	r3, [r7, #120]	; 0x78
 8007f88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007f8a:	ba1b      	rev	r3, r3
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	f001 f9b7 	bl	8009300 <CRYP_DataIn>
    CRYP_DataIn(__REV(inputlength>>32));
 8007f92:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 8007f96:	469a      	mov	sl, r3
 8007f98:	f04f 0b00 	mov.w	fp, #0
 8007f9c:	4653      	mov	r3, sl
 8007f9e:	677b      	str	r3, [r7, #116]	; 0x74
 8007fa0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007fa2:	ba1b      	rev	r3, r3
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	f001 f9ab 	bl	8009300 <CRYP_DataIn>
    CRYP_DataIn(__REV(inputlength));
 8007faa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007fae:	673b      	str	r3, [r7, #112]	; 0x70
 8007fb0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007fb2:	ba1b      	rev	r3, r3
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	f001 f9a3 	bl	8009300 <CRYP_DataIn>
    /* Wait until the OFNE flag is reset */
    while(CRYP_GetFlagStatus(CRYP_FLAG_OFNE) == RESET)
 8007fba:	bf00      	nop
 8007fbc:	2004      	movs	r0, #4
 8007fbe:	f001 fb81 	bl	80096c4 <CRYP_GetFlagStatus>
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d0f9      	beq.n	8007fbc <CRYP_AES_GCM+0x5e4>
    {
    }
    
    tagaddr = (uint32_t)AuthTAG;
 8007fc8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8007fcc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    /* Read the Auth TAG in the IN FIFO */
    *(uint32_t*)(tagaddr) = CRYP_DataOut();
 8007fd0:	f8d7 40ec 	ldr.w	r4, [r7, #236]	; 0xec
 8007fd4:	f001 f9a2 	bl	800931c <CRYP_DataOut>
 8007fd8:	4603      	mov	r3, r0
 8007fda:	6023      	str	r3, [r4, #0]
    tagaddr+=4;
 8007fdc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007fe0:	3304      	adds	r3, #4
 8007fe2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    *(uint32_t*)(tagaddr) = CRYP_DataOut();
 8007fe6:	f8d7 40ec 	ldr.w	r4, [r7, #236]	; 0xec
 8007fea:	f001 f997 	bl	800931c <CRYP_DataOut>
 8007fee:	4603      	mov	r3, r0
 8007ff0:	6023      	str	r3, [r4, #0]
    tagaddr+=4;
 8007ff2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007ff6:	3304      	adds	r3, #4
 8007ff8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    *(uint32_t*)(tagaddr) = CRYP_DataOut();
 8007ffc:	f8d7 40ec 	ldr.w	r4, [r7, #236]	; 0xec
 8008000:	f001 f98c 	bl	800931c <CRYP_DataOut>
 8008004:	4603      	mov	r3, r0
 8008006:	6023      	str	r3, [r4, #0]
    tagaddr+=4;
 8008008:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800800c:	3304      	adds	r3, #4
 800800e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    *(uint32_t*)(tagaddr) = CRYP_DataOut();
 8008012:	f8d7 40ec 	ldr.w	r4, [r7, #236]	; 0xec
 8008016:	f001 f981 	bl	800931c <CRYP_DataOut>
 800801a:	4603      	mov	r3, r0
 800801c:	6023      	str	r3, [r4, #0]
    tagaddr+=4;
 800801e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008022:	3304      	adds	r3, #4
 8008024:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008028:	e1a5      	b.n	8008376 <CRYP_AES_GCM+0x99e>
  }
  /*------------------ AES Decryption ------------------*/
  else /* AES decryption */
  {
    /* Flush IN/OUT FIFOs */
    CRYP_FIFOFlush();
 800802a:	f001 f93f 	bl	80092ac <CRYP_FIFOFlush>
    
    /* Key Initialisation */
    CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 800802e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008032:	4618      	mov	r0, r3
 8008034:	f001 f89e 	bl	8009174 <CRYP_KeyInit>
    
    /* CRYP Initialization Vectors */
    CRYP_IVInit(&AES_CRYP_IVInitStructure);
 8008038:	f107 0320 	add.w	r3, r7, #32
 800803c:	4618      	mov	r0, r3
 800803e:	f001 f8e7 	bl	8009210 <CRYP_IVInit>
    
    /* Crypto Init for Key preparation for decryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 8008042:	2304      	movs	r3, #4
 8008044:	653b      	str	r3, [r7, #80]	; 0x50
    AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_GCM;
 8008046:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800804a:	657b      	str	r3, [r7, #84]	; 0x54
    AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 800804c:	2380      	movs	r3, #128	; 0x80
 800804e:	65bb      	str	r3, [r7, #88]	; 0x58
    CRYP_Init(&AES_CRYP_InitStructure);
 8008050:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008054:	4618      	mov	r0, r3
 8008056:	f001 f825 	bl	80090a4 <CRYP_Init>
    
    /***************************** Init phase *********************************/
    /* Select init phase */
    CRYP_PhaseConfig(CRYP_Phase_Init);
 800805a:	2000      	movs	r0, #0
 800805c:	f001 f90a 	bl	8009274 <CRYP_PhaseConfig>
    
    /* Enable Crypto processor */
    CRYP_Cmd(ENABLE);
 8008060:	2001      	movs	r0, #1
 8008062:	f001 f931 	bl	80092c8 <CRYP_Cmd>
    
    /* Wait for CRYPEN bit to be 0 */
    while(CRYP_GetCmdStatus() == ENABLE)
 8008066:	bf00      	nop
 8008068:	f001 fb12 	bl	8009690 <CRYP_GetCmdStatus>
 800806c:	4603      	mov	r3, r0
 800806e:	2b01      	cmp	r3, #1
 8008070:	d0fa      	beq.n	8008068 <CRYP_AES_GCM+0x690>
    {
    }
    
    /***************************** header phase *******************************/
    if(HLength != 0)
 8008072:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8008076:	2b00      	cmp	r3, #0
 8008078:	d069      	beq.n	800814e <CRYP_AES_GCM+0x776>
    {
      /* Select header phase */
      CRYP_PhaseConfig(CRYP_Phase_Header);
 800807a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800807e:	f001 f8f9 	bl	8009274 <CRYP_PhaseConfig>
      
      /* Enable Crypto processor */
      CRYP_Cmd(ENABLE);
 8008082:	2001      	movs	r0, #1
 8008084:	f001 f920 	bl	80092c8 <CRYP_Cmd>
      
      if(CRYP_GetCmdStatus() == DISABLE)
 8008088:	f001 fb02 	bl	8009690 <CRYP_GetCmdStatus>
 800808c:	4603      	mov	r3, r0
 800808e:	2b00      	cmp	r3, #0
 8008090:	d101      	bne.n	8008096 <CRYP_AES_GCM+0x6be>
      {
        /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
           the CRYP peripheral (please check the device sales type. */
        return(ERROR);
 8008092:	2300      	movs	r3, #0
 8008094:	e174      	b.n	8008380 <CRYP_AES_GCM+0x9a8>
      }
      
      for(loopcounter = 0; (loopcounter < HLength); loopcounter+=16)
 8008096:	2300      	movs	r3, #0
 8008098:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800809c:	e037      	b.n	800810e <CRYP_AES_GCM+0x736>
      {
        /* Wait until the IFEM flag is reset */
        while(CRYP_GetFlagStatus(CRYP_FLAG_IFEM) == RESET)
 800809e:	bf00      	nop
 80080a0:	2001      	movs	r0, #1
 80080a2:	f001 fb0f 	bl	80096c4 <CRYP_GetFlagStatus>
 80080a6:	4603      	mov	r3, r0
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d0f9      	beq.n	80080a0 <CRYP_AES_GCM+0x6c8>
        {
        }
        
        /* Write the Input block in the IN FIFO */
        CRYP_DataIn(*(uint32_t*)(headeraddr));
 80080ac:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	4618      	mov	r0, r3
 80080b4:	f001 f924 	bl	8009300 <CRYP_DataIn>
        headeraddr+=4;
 80080b8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80080bc:	3304      	adds	r3, #4
 80080be:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
        CRYP_DataIn(*(uint32_t*)(headeraddr));
 80080c2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	4618      	mov	r0, r3
 80080ca:	f001 f919 	bl	8009300 <CRYP_DataIn>
        headeraddr+=4;
 80080ce:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80080d2:	3304      	adds	r3, #4
 80080d4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
        CRYP_DataIn(*(uint32_t*)(headeraddr));
 80080d8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	4618      	mov	r0, r3
 80080e0:	f001 f90e 	bl	8009300 <CRYP_DataIn>
        headeraddr+=4;
 80080e4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80080e8:	3304      	adds	r3, #4
 80080ea:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
        CRYP_DataIn(*(uint32_t*)(headeraddr));
 80080ee:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	4618      	mov	r0, r3
 80080f6:	f001 f903 	bl	8009300 <CRYP_DataIn>
        headeraddr+=4;
 80080fa:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80080fe:	3304      	adds	r3, #4
 8008100:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
        /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
           the CRYP peripheral (please check the device sales type. */
        return(ERROR);
      }
      
      for(loopcounter = 0; (loopcounter < HLength); loopcounter+=16)
 8008104:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008108:	3310      	adds	r3, #16
 800810a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800810e:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8008112:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8008116:	429a      	cmp	r2, r3
 8008118:	d3c1      	bcc.n	800809e <CRYP_AES_GCM+0x6c6>
        CRYP_DataIn(*(uint32_t*)(headeraddr));
        headeraddr+=4;
      }
      
      /* Wait until the complete message has been processed */
      counter = 0;
 800811a:	2300      	movs	r3, #0
 800811c:	61fb      	str	r3, [r7, #28]
      do
      {
        busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 800811e:	2010      	movs	r0, #16
 8008120:	f001 fad0 	bl	80096c4 <CRYP_GetFlagStatus>
 8008124:	4603      	mov	r3, r0
 8008126:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
        counter++;
 800812a:	69fb      	ldr	r3, [r7, #28]
 800812c:	3301      	adds	r3, #1
 800812e:	61fb      	str	r3, [r7, #28]
      }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 8008130:	69fb      	ldr	r3, [r7, #28]
 8008132:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008136:	d003      	beq.n	8008140 <CRYP_AES_GCM+0x768>
 8008138:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800813c:	2b00      	cmp	r3, #0
 800813e:	d1ee      	bne.n	800811e <CRYP_AES_GCM+0x746>

      if (busystatus != RESET)
 8008140:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008144:	2b00      	cmp	r3, #0
 8008146:	d002      	beq.n	800814e <CRYP_AES_GCM+0x776>
      {
        status = ERROR;
 8008148:	2300      	movs	r3, #0
 800814a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
      }
    }
    
    /**************************** payload phase *******************************/
    if(ILength != 0)
 800814e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8008152:	2b00      	cmp	r3, #0
 8008154:	f000 80a3 	beq.w	800829e <CRYP_AES_GCM+0x8c6>
    {
      /* Select payload phase */
      CRYP_PhaseConfig(CRYP_Phase_Payload);
 8008158:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800815c:	f001 f88a 	bl	8009274 <CRYP_PhaseConfig>

      /* Enable Crypto processor */
      CRYP_Cmd(ENABLE);
 8008160:	2001      	movs	r0, #1
 8008162:	f001 f8b1 	bl	80092c8 <CRYP_Cmd>
      
      if(CRYP_GetCmdStatus() == DISABLE)
 8008166:	f001 fa93 	bl	8009690 <CRYP_GetCmdStatus>
 800816a:	4603      	mov	r3, r0
 800816c:	2b00      	cmp	r3, #0
 800816e:	d101      	bne.n	8008174 <CRYP_AES_GCM+0x79c>
      {
        /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
           the CRYP peripheral (please check the device sales type. */
        return(ERROR);
 8008170:	2300      	movs	r3, #0
 8008172:	e105      	b.n	8008380 <CRYP_AES_GCM+0x9a8>
      }
      
      for(loopcounter = 0; ((loopcounter < ILength) && (status != ERROR)); loopcounter+=16)
 8008174:	2300      	movs	r3, #0
 8008176:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800817a:	e085      	b.n	8008288 <CRYP_AES_GCM+0x8b0>
      {
        /* Wait until the IFEM flag is reset */
        while(CRYP_GetFlagStatus(CRYP_FLAG_IFEM) == RESET)
 800817c:	bf00      	nop
 800817e:	2001      	movs	r0, #1
 8008180:	f001 faa0 	bl	80096c4 <CRYP_GetFlagStatus>
 8008184:	4603      	mov	r3, r0
 8008186:	2b00      	cmp	r3, #0
 8008188:	d0f9      	beq.n	800817e <CRYP_AES_GCM+0x7a6>
        {
        }
        /* Write the Input block in the IN FIFO */
        CRYP_DataIn(*(uint32_t*)(inputaddr));
 800818a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	4618      	mov	r0, r3
 8008192:	f001 f8b5 	bl	8009300 <CRYP_DataIn>
        inputaddr+=4;
 8008196:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800819a:	3304      	adds	r3, #4
 800819c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        CRYP_DataIn(*(uint32_t*)(inputaddr));
 80081a0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	4618      	mov	r0, r3
 80081a8:	f001 f8aa 	bl	8009300 <CRYP_DataIn>
        inputaddr+=4;
 80081ac:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80081b0:	3304      	adds	r3, #4
 80081b2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        CRYP_DataIn(*(uint32_t*)(inputaddr));
 80081b6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	4618      	mov	r0, r3
 80081be:	f001 f89f 	bl	8009300 <CRYP_DataIn>
        inputaddr+=4;
 80081c2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80081c6:	3304      	adds	r3, #4
 80081c8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        CRYP_DataIn(*(uint32_t*)(inputaddr));
 80081cc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	4618      	mov	r0, r3
 80081d4:	f001 f894 	bl	8009300 <CRYP_DataIn>
        inputaddr+=4;
 80081d8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80081dc:	3304      	adds	r3, #4
 80081de:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        
        /* Wait until the complete message has been processed */
        counter = 0;
 80081e2:	2300      	movs	r3, #0
 80081e4:	61fb      	str	r3, [r7, #28]
        do
        {
          busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 80081e6:	2010      	movs	r0, #16
 80081e8:	f001 fa6c 	bl	80096c4 <CRYP_GetFlagStatus>
 80081ec:	4603      	mov	r3, r0
 80081ee:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
          counter++;
 80081f2:	69fb      	ldr	r3, [r7, #28]
 80081f4:	3301      	adds	r3, #1
 80081f6:	61fb      	str	r3, [r7, #28]
        }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 80081f8:	69fb      	ldr	r3, [r7, #28]
 80081fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80081fe:	d003      	beq.n	8008208 <CRYP_AES_GCM+0x830>
 8008200:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008204:	2b00      	cmp	r3, #0
 8008206:	d1ee      	bne.n	80081e6 <CRYP_AES_GCM+0x80e>

        if (busystatus != RESET)
 8008208:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800820c:	2b00      	cmp	r3, #0
 800820e:	d003      	beq.n	8008218 <CRYP_AES_GCM+0x840>
        {
          status = ERROR;
 8008210:	2300      	movs	r3, #0
 8008212:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8008216:	e032      	b.n	800827e <CRYP_AES_GCM+0x8a6>
        }
        else
        {
          /* Wait until the OFNE flag is reset */
          while(CRYP_GetFlagStatus(CRYP_FLAG_OFNE) == RESET)
 8008218:	bf00      	nop
 800821a:	2004      	movs	r0, #4
 800821c:	f001 fa52 	bl	80096c4 <CRYP_GetFlagStatus>
 8008220:	4603      	mov	r3, r0
 8008222:	2b00      	cmp	r3, #0
 8008224:	d0f9      	beq.n	800821a <CRYP_AES_GCM+0x842>
          {
          }
          
          /* Read the Output block from the Output FIFO */
          *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8008226:	f8d7 6104 	ldr.w	r6, [r7, #260]	; 0x104
 800822a:	f001 f877 	bl	800931c <CRYP_DataOut>
 800822e:	4603      	mov	r3, r0
 8008230:	6033      	str	r3, [r6, #0]
          outputaddr+=4;
 8008232:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008236:	3304      	adds	r3, #4
 8008238:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          *(uint32_t*)(outputaddr) = CRYP_DataOut();
 800823c:	f8d7 6104 	ldr.w	r6, [r7, #260]	; 0x104
 8008240:	f001 f86c 	bl	800931c <CRYP_DataOut>
 8008244:	4603      	mov	r3, r0
 8008246:	6033      	str	r3, [r6, #0]
          outputaddr+=4;
 8008248:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800824c:	3304      	adds	r3, #4
 800824e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8008252:	f8d7 6104 	ldr.w	r6, [r7, #260]	; 0x104
 8008256:	f001 f861 	bl	800931c <CRYP_DataOut>
 800825a:	4603      	mov	r3, r0
 800825c:	6033      	str	r3, [r6, #0]
          outputaddr+=4;
 800825e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008262:	3304      	adds	r3, #4
 8008264:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8008268:	f8d7 6104 	ldr.w	r6, [r7, #260]	; 0x104
 800826c:	f001 f856 	bl	800931c <CRYP_DataOut>
 8008270:	4603      	mov	r3, r0
 8008272:	6033      	str	r3, [r6, #0]
          outputaddr+=4;
 8008274:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008278:	3304      	adds	r3, #4
 800827a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
           the CRYP peripheral (please check the device sales type. */
        return(ERROR);
      }
      
      for(loopcounter = 0; ((loopcounter < ILength) && (status != ERROR)); loopcounter+=16)
 800827e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008282:	3310      	adds	r3, #16
 8008284:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008288:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 800828c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8008290:	429a      	cmp	r2, r3
 8008292:	d204      	bcs.n	800829e <CRYP_AES_GCM+0x8c6>
 8008294:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8008298:	2b00      	cmp	r3, #0
 800829a:	f47f af6f 	bne.w	800817c <CRYP_AES_GCM+0x7a4>
      }
    }
    
    /***************************** final phase ********************************/
    /* Select final phase */
    CRYP_PhaseConfig(CRYP_Phase_Final);
 800829e:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 80082a2:	f000 ffe7 	bl	8009274 <CRYP_PhaseConfig>

    /* Enable Crypto processor */
    CRYP_Cmd(ENABLE);
 80082a6:	2001      	movs	r0, #1
 80082a8:	f001 f80e 	bl	80092c8 <CRYP_Cmd>
    
    if(CRYP_GetCmdStatus() == DISABLE)
 80082ac:	f001 f9f0 	bl	8009690 <CRYP_GetCmdStatus>
 80082b0:	4603      	mov	r3, r0
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d101      	bne.n	80082ba <CRYP_AES_GCM+0x8e2>
    {
      /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
         the CRYP peripheral (please check the device sales type. */
      return(ERROR);
 80082b6:	2300      	movs	r3, #0
 80082b8:	e062      	b.n	8008380 <CRYP_AES_GCM+0x9a8>
    }
    
    /* Write number of bits concatenated with header in the IN FIFO */
    CRYP_DataIn(__REV(headerlength>>32));
 80082ba:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 80082be:	4698      	mov	r8, r3
 80082c0:	f04f 0900 	mov.w	r9, #0
 80082c4:	4643      	mov	r3, r8
 80082c6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80082c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082ca:	ba1b      	rev	r3, r3
 80082cc:	4618      	mov	r0, r3
 80082ce:	f001 f817 	bl	8009300 <CRYP_DataIn>
    CRYP_DataIn(__REV(headerlength));
 80082d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082d6:	66bb      	str	r3, [r7, #104]	; 0x68
 80082d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80082da:	ba1b      	rev	r3, r3
 80082dc:	4618      	mov	r0, r3
 80082de:	f001 f80f 	bl	8009300 <CRYP_DataIn>
    CRYP_DataIn(__REV(inputlength>>32));
 80082e2:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 80082e6:	001c      	movs	r4, r3
 80082e8:	2500      	movs	r5, #0
 80082ea:	4623      	mov	r3, r4
 80082ec:	667b      	str	r3, [r7, #100]	; 0x64
 80082ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80082f0:	ba1b      	rev	r3, r3
 80082f2:	4618      	mov	r0, r3
 80082f4:	f001 f804 	bl	8009300 <CRYP_DataIn>
    CRYP_DataIn(__REV(inputlength));
 80082f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80082fc:	663b      	str	r3, [r7, #96]	; 0x60
 80082fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008300:	ba1b      	rev	r3, r3
 8008302:	4618      	mov	r0, r3
 8008304:	f000 fffc 	bl	8009300 <CRYP_DataIn>
    /* Wait until the OFNE flag is reset */
    while(CRYP_GetFlagStatus(CRYP_FLAG_OFNE) == RESET)
 8008308:	bf00      	nop
 800830a:	2004      	movs	r0, #4
 800830c:	f001 f9da 	bl	80096c4 <CRYP_GetFlagStatus>
 8008310:	4603      	mov	r3, r0
 8008312:	2b00      	cmp	r3, #0
 8008314:	d0f9      	beq.n	800830a <CRYP_AES_GCM+0x932>
    {
    }
    
    tagaddr = (uint32_t)AuthTAG;
 8008316:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800831a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    /* Read the Auth TAG in the IN FIFO */
    *(uint32_t*)(tagaddr) = CRYP_DataOut();
 800831e:	f8d7 40ec 	ldr.w	r4, [r7, #236]	; 0xec
 8008322:	f000 fffb 	bl	800931c <CRYP_DataOut>
 8008326:	4603      	mov	r3, r0
 8008328:	6023      	str	r3, [r4, #0]
    tagaddr+=4;
 800832a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800832e:	3304      	adds	r3, #4
 8008330:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    *(uint32_t*)(tagaddr) = CRYP_DataOut();
 8008334:	f8d7 40ec 	ldr.w	r4, [r7, #236]	; 0xec
 8008338:	f000 fff0 	bl	800931c <CRYP_DataOut>
 800833c:	4603      	mov	r3, r0
 800833e:	6023      	str	r3, [r4, #0]
    tagaddr+=4;
 8008340:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008344:	3304      	adds	r3, #4
 8008346:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    *(uint32_t*)(tagaddr) = CRYP_DataOut();
 800834a:	f8d7 40ec 	ldr.w	r4, [r7, #236]	; 0xec
 800834e:	f000 ffe5 	bl	800931c <CRYP_DataOut>
 8008352:	4603      	mov	r3, r0
 8008354:	6023      	str	r3, [r4, #0]
    tagaddr+=4;
 8008356:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800835a:	3304      	adds	r3, #4
 800835c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    *(uint32_t*)(tagaddr) = CRYP_DataOut();
 8008360:	f8d7 40ec 	ldr.w	r4, [r7, #236]	; 0xec
 8008364:	f000 ffda 	bl	800931c <CRYP_DataOut>
 8008368:	4603      	mov	r3, r0
 800836a:	6023      	str	r3, [r4, #0]
    tagaddr+=4;
 800836c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008370:	3304      	adds	r3, #4
 8008372:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  }
  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 8008376:	2000      	movs	r0, #0
 8008378:	f000 ffa6 	bl	80092c8 <CRYP_Cmd>

  return status;
 800837c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
}
 8008380:	4618      	mov	r0, r3
 8008382:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8008386:	46bd      	mov	sp, r7
 8008388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800838c <CRYP_AES_CCM>:
                         uint8_t *Key, uint16_t Keysize,
                         uint8_t *Input, uint32_t ILength,
                         uint8_t *Header, uint32_t HLength, uint8_t *HBuffer,
                         uint8_t *Output,
                         uint8_t *AuthTAG, uint32_t TAGSize)
{
 800838c:	b590      	push	{r4, r7, lr}
 800838e:	b0c5      	sub	sp, #276	; 0x114
 8008390:	af00      	add	r7, sp, #0
 8008392:	f107 0408 	add.w	r4, r7, #8
 8008396:	6021      	str	r1, [r4, #0]
 8008398:	1d39      	adds	r1, r7, #4
 800839a:	600a      	str	r2, [r1, #0]
 800839c:	463a      	mov	r2, r7
 800839e:	6013      	str	r3, [r2, #0]
 80083a0:	f107 030f 	add.w	r3, r7, #15
 80083a4:	4602      	mov	r2, r0
 80083a6:	701a      	strb	r2, [r3, #0]
  CRYP_InitTypeDef AES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
  CRYP_IVInitTypeDef AES_CRYP_IVInitStructure;
  __IO uint32_t counter = 0;
 80083a8:	2300      	movs	r3, #0
 80083aa:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t busystatus = 0;
 80083ac:	2300      	movs	r3, #0
 80083ae:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  ErrorStatus status = SUCCESS;
 80083b2:	2301      	movs	r3, #1
 80083b4:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
  uint32_t keyaddr    = (uint32_t)Key;
 80083b8:	463b      	mov	r3, r7
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  uint32_t inputaddr  = (uint32_t)Input;
 80083c0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80083c4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  uint32_t outputaddr = (uint32_t)Output;
 80083c8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80083cc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  uint32_t headeraddr = (uint32_t)Header;
 80083d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083d4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  uint32_t tagaddr = (uint32_t)AuthTAG;
 80083d8:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80083dc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  uint32_t headersize = HLength;
 80083e0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80083e4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  uint32_t loopcounter = 0;
 80083e8:	2300      	movs	r3, #0
 80083ea:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  uint32_t bufferidx = 0;
 80083ee:	2300      	movs	r3, #0
 80083f0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  uint8_t blockb0[16] = {0};/* Block B0 */
 80083f4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80083f8:	2200      	movs	r2, #0
 80083fa:	601a      	str	r2, [r3, #0]
 80083fc:	3304      	adds	r3, #4
 80083fe:	2200      	movs	r2, #0
 8008400:	601a      	str	r2, [r3, #0]
 8008402:	3304      	adds	r3, #4
 8008404:	2200      	movs	r2, #0
 8008406:	601a      	str	r2, [r3, #0]
 8008408:	3304      	adds	r3, #4
 800840a:	2200      	movs	r2, #0
 800840c:	601a      	str	r2, [r3, #0]
 800840e:	3304      	adds	r3, #4
  uint8_t ctr[16] = {0}; /* Counter */
 8008410:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008414:	2200      	movs	r2, #0
 8008416:	601a      	str	r2, [r3, #0]
 8008418:	3304      	adds	r3, #4
 800841a:	2200      	movs	r2, #0
 800841c:	601a      	str	r2, [r3, #0]
 800841e:	3304      	adds	r3, #4
 8008420:	2200      	movs	r2, #0
 8008422:	601a      	str	r2, [r3, #0]
 8008424:	3304      	adds	r3, #4
 8008426:	2200      	movs	r2, #0
 8008428:	601a      	str	r2, [r3, #0]
 800842a:	3304      	adds	r3, #4
  uint32_t temptag[4] = {0}; /* temporary TAG (MAC) */
 800842c:	f107 0314 	add.w	r3, r7, #20
 8008430:	2200      	movs	r2, #0
 8008432:	601a      	str	r2, [r3, #0]
 8008434:	3304      	adds	r3, #4
 8008436:	2200      	movs	r2, #0
 8008438:	601a      	str	r2, [r3, #0]
 800843a:	3304      	adds	r3, #4
 800843c:	2200      	movs	r2, #0
 800843e:	601a      	str	r2, [r3, #0]
 8008440:	3304      	adds	r3, #4
 8008442:	2200      	movs	r2, #0
 8008444:	601a      	str	r2, [r3, #0]
 8008446:	3304      	adds	r3, #4
  uint32_t ctraddr = (uint32_t)ctr;
 8008448:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800844c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t b0addr = (uint32_t)blockb0;
 8008450:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008454:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  
  /************************ Formatting the header block ***********************/
  if(headersize != 0)
 8008458:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800845c:	2b00      	cmp	r3, #0
 800845e:	f000 80b0 	beq.w	80085c2 <CRYP_AES_CCM+0x236>
  {
    /* Check that the associated data (or header) length is lower than 2^16 - 2^8 = 65536 - 256 = 65280 */
    if(headersize < 65280)
 8008462:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008466:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 800846a:	d21e      	bcs.n	80084aa <CRYP_AES_CCM+0x11e>
    {
      HBuffer[bufferidx++] = (uint8_t) ((headersize >> 8) & 0xFF);
 800846c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008470:	1c5a      	adds	r2, r3, #1
 8008472:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8008476:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 800847a:	4413      	add	r3, r2
 800847c:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8008480:	0a12      	lsrs	r2, r2, #8
 8008482:	b2d2      	uxtb	r2, r2
 8008484:	701a      	strb	r2, [r3, #0]
      HBuffer[bufferidx++] = (uint8_t) ((headersize) & 0xFF);
 8008486:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800848a:	1c5a      	adds	r2, r3, #1
 800848c:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8008490:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8008494:	4413      	add	r3, r2
 8008496:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 800849a:	b2d2      	uxtb	r2, r2
 800849c:	701a      	strb	r2, [r3, #0]
      headersize += 2;
 800849e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80084a2:	3302      	adds	r3, #2
 80084a4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80084a8:	e042      	b.n	8008530 <CRYP_AES_CCM+0x1a4>
    }
    else
    {
      /* header is encoded as 0xff || 0xfe || [headersize]32, i.e., six octets */
      HBuffer[bufferidx++] = 0xFF;
 80084aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084ae:	1c5a      	adds	r2, r3, #1
 80084b0:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80084b4:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80084b8:	4413      	add	r3, r2
 80084ba:	22ff      	movs	r2, #255	; 0xff
 80084bc:	701a      	strb	r2, [r3, #0]
      HBuffer[bufferidx++] = 0xFE;
 80084be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084c2:	1c5a      	adds	r2, r3, #1
 80084c4:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80084c8:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80084cc:	4413      	add	r3, r2
 80084ce:	22fe      	movs	r2, #254	; 0xfe
 80084d0:	701a      	strb	r2, [r3, #0]
      HBuffer[bufferidx++] = headersize & 0xff000000;
 80084d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084d6:	1c5a      	adds	r2, r3, #1
 80084d8:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80084dc:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80084e0:	4413      	add	r3, r2
 80084e2:	2200      	movs	r2, #0
 80084e4:	701a      	strb	r2, [r3, #0]
      HBuffer[bufferidx++] = headersize & 0x00ff0000;
 80084e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084ea:	1c5a      	adds	r2, r3, #1
 80084ec:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80084f0:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80084f4:	4413      	add	r3, r2
 80084f6:	2200      	movs	r2, #0
 80084f8:	701a      	strb	r2, [r3, #0]
      HBuffer[bufferidx++] = headersize & 0x0000ff00;
 80084fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084fe:	1c5a      	adds	r2, r3, #1
 8008500:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8008504:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8008508:	4413      	add	r3, r2
 800850a:	2200      	movs	r2, #0
 800850c:	701a      	strb	r2, [r3, #0]
      HBuffer[bufferidx++] = headersize & 0x000000ff;
 800850e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008512:	1c5a      	adds	r2, r3, #1
 8008514:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8008518:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 800851c:	4413      	add	r3, r2
 800851e:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8008522:	b2d2      	uxtb	r2, r2
 8008524:	701a      	strb	r2, [r3, #0]
      headersize += 6;
 8008526:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800852a:	3306      	adds	r3, #6
 800852c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    }
    /* Copy the header buffer in internal buffer "HBuffer" */
    for(loopcounter = 0; loopcounter < headersize; loopcounter++)
 8008530:	2300      	movs	r3, #0
 8008532:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008536:	e013      	b.n	8008560 <CRYP_AES_CCM+0x1d4>
    {
      HBuffer[bufferidx++] = Header[loopcounter];
 8008538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800853c:	1c5a      	adds	r2, r3, #1
 800853e:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8008542:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8008546:	4413      	add	r3, r2
 8008548:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 800854c:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8008550:	440a      	add	r2, r1
 8008552:	7812      	ldrb	r2, [r2, #0]
 8008554:	701a      	strb	r2, [r3, #0]
      HBuffer[bufferidx++] = headersize & 0x0000ff00;
      HBuffer[bufferidx++] = headersize & 0x000000ff;
      headersize += 6;
    }
    /* Copy the header buffer in internal buffer "HBuffer" */
    for(loopcounter = 0; loopcounter < headersize; loopcounter++)
 8008556:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800855a:	3301      	adds	r3, #1
 800855c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008560:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8008564:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008568:	429a      	cmp	r2, r3
 800856a:	d3e5      	bcc.n	8008538 <CRYP_AES_CCM+0x1ac>
    {
      HBuffer[bufferidx++] = Header[loopcounter];
    }
    /* Check if the header size is modulo 16 */
    if ((headersize % 16) != 0)
 800856c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008570:	f003 030f 	and.w	r3, r3, #15
 8008574:	2b00      	cmp	r3, #0
 8008576:	d020      	beq.n	80085ba <CRYP_AES_CCM+0x22e>
    {
      /* Padd the header buffer with 0s till the HBuffer length is modulo 16 */
      for(loopcounter = headersize; loopcounter <= ((headersize/16) + 1) * 16; loopcounter++)
 8008578:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800857c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008580:	e00b      	b.n	800859a <CRYP_AES_CCM+0x20e>
      {
        HBuffer[loopcounter] = 0;
 8008582:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8008586:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800858a:	4413      	add	r3, r2
 800858c:	2200      	movs	r2, #0
 800858e:	701a      	strb	r2, [r3, #0]
    }
    /* Check if the header size is modulo 16 */
    if ((headersize % 16) != 0)
    {
      /* Padd the header buffer with 0s till the HBuffer length is modulo 16 */
      for(loopcounter = headersize; loopcounter <= ((headersize/16) + 1) * 16; loopcounter++)
 8008590:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008594:	3301      	adds	r3, #1
 8008596:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800859a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800859e:	091b      	lsrs	r3, r3, #4
 80085a0:	3301      	adds	r3, #1
 80085a2:	011a      	lsls	r2, r3, #4
 80085a4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80085a8:	429a      	cmp	r2, r3
 80085aa:	d2ea      	bcs.n	8008582 <CRYP_AES_CCM+0x1f6>
      {
        HBuffer[loopcounter] = 0;
      }
      /* Set the header size to modulo 16 */
      headersize = ((headersize/16) + 1) * 16;
 80085ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80085b0:	091b      	lsrs	r3, r3, #4
 80085b2:	3301      	adds	r3, #1
 80085b4:	011b      	lsls	r3, r3, #4
 80085b6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    }
    /* set the pointer headeraddr to HBuffer */
    headeraddr = (uint32_t)HBuffer;
 80085ba:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80085be:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  }
  /************************* Formatting the block B0 **************************/
  if(headersize != 0)
 80085c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d002      	beq.n	80085d0 <CRYP_AES_CCM+0x244>
  {
    blockb0[0] = 0x40;
 80085ca:	2340      	movs	r3, #64	; 0x40
 80085cc:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  }
  /* Flags byte */
  blockb0[0] |= 0u | (((( (uint8_t) TAGSize - 2) / 2) & 0x07 ) << 3 ) | ( ( (uint8_t) (15 - NonceSize) - 1) & 0x07);
 80085d0:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 80085d4:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80085d8:	b2db      	uxtb	r3, r3
 80085da:	3b02      	subs	r3, #2
 80085dc:	0fd9      	lsrs	r1, r3, #31
 80085de:	440b      	add	r3, r1
 80085e0:	105b      	asrs	r3, r3, #1
 80085e2:	b2db      	uxtb	r3, r3
 80085e4:	f003 0307 	and.w	r3, r3, #7
 80085e8:	b2db      	uxtb	r3, r3
 80085ea:	00db      	lsls	r3, r3, #3
 80085ec:	b2d9      	uxtb	r1, r3
 80085ee:	1d3b      	adds	r3, r7, #4
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	b2db      	uxtb	r3, r3
 80085f4:	f1c3 030e 	rsb	r3, r3, #14
 80085f8:	b2db      	uxtb	r3, r3
 80085fa:	f003 0307 	and.w	r3, r3, #7
 80085fe:	b2db      	uxtb	r3, r3
 8008600:	430b      	orrs	r3, r1
 8008602:	b2db      	uxtb	r3, r3
 8008604:	4313      	orrs	r3, r2
 8008606:	b2db      	uxtb	r3, r3
 8008608:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  
  for (loopcounter = 0; loopcounter < NonceSize; loopcounter++)
 800860c:	2300      	movs	r3, #0
 800860e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008612:	e013      	b.n	800863c <CRYP_AES_CCM+0x2b0>
  {
    blockb0[loopcounter+1] = Nonce[loopcounter];
 8008614:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008618:	3301      	adds	r3, #1
 800861a:	f107 0208 	add.w	r2, r7, #8
 800861e:	6811      	ldr	r1, [r2, #0]
 8008620:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8008624:	440a      	add	r2, r1
 8008626:	7812      	ldrb	r2, [r2, #0]
 8008628:	f507 7188 	add.w	r1, r7, #272	; 0x110
 800862c:	440b      	add	r3, r1
 800862e:	f803 2cdc 	strb.w	r2, [r3, #-220]
    blockb0[0] = 0x40;
  }
  /* Flags byte */
  blockb0[0] |= 0u | (((( (uint8_t) TAGSize - 2) / 2) & 0x07 ) << 3 ) | ( ( (uint8_t) (15 - NonceSize) - 1) & 0x07);
  
  for (loopcounter = 0; loopcounter < NonceSize; loopcounter++)
 8008632:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008636:	3301      	adds	r3, #1
 8008638:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800863c:	1d3b      	adds	r3, r7, #4
 800863e:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	429a      	cmp	r2, r3
 8008646:	d3e5      	bcc.n	8008614 <CRYP_AES_CCM+0x288>
  {
    blockb0[loopcounter+1] = Nonce[loopcounter];
  }
  for ( ; loopcounter < 13; loopcounter++)
 8008648:	e00d      	b.n	8008666 <CRYP_AES_CCM+0x2da>
  {
    blockb0[loopcounter+1] = 0;
 800864a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800864e:	3301      	adds	r3, #1
 8008650:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8008654:	4413      	add	r3, r2
 8008656:	2200      	movs	r2, #0
 8008658:	f803 2cdc 	strb.w	r2, [r3, #-220]
  
  for (loopcounter = 0; loopcounter < NonceSize; loopcounter++)
  {
    blockb0[loopcounter+1] = Nonce[loopcounter];
  }
  for ( ; loopcounter < 13; loopcounter++)
 800865c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008660:	3301      	adds	r3, #1
 8008662:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008666:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800866a:	2b0c      	cmp	r3, #12
 800866c:	d9ed      	bls.n	800864a <CRYP_AES_CCM+0x2be>
  {
    blockb0[loopcounter+1] = 0;
  }
  
  blockb0[14] = ((ILength >> 8) & 0xFF);
 800866e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008672:	0a1b      	lsrs	r3, r3, #8
 8008674:	b2db      	uxtb	r3, r3
 8008676:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  blockb0[15] = (ILength & 0xFF);
 800867a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800867e:	b2db      	uxtb	r3, r3
 8008680:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
     Bits 7 and 6 are reserved and shall be set to 0
     Bits 3, 4, and 5 shall also be set to 0, to ensure that all the counter blocks
     are distinct from B0
     Bits 0, 1, and 2 contain the same encoding of q as in B0
  */
  ctr[0] = blockb0[0] & 0x07;
 8008684:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8008688:	f003 0307 	and.w	r3, r3, #7
 800868c:	b2db      	uxtb	r3, r3
 800868e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  /* byte 1 to NonceSize is the IV (Nonce) */
  for(loopcounter = 1; loopcounter < NonceSize + 1; loopcounter++)
 8008692:	2301      	movs	r3, #1
 8008694:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008698:	e010      	b.n	80086bc <CRYP_AES_CCM+0x330>
  {
    ctr[loopcounter] = blockb0[loopcounter];
 800869a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800869e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80086a2:	4413      	add	r3, r2
 80086a4:	781a      	ldrb	r2, [r3, #0]
 80086a6:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80086aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80086ae:	440b      	add	r3, r1
 80086b0:	701a      	strb	r2, [r3, #0]
     are distinct from B0
     Bits 0, 1, and 2 contain the same encoding of q as in B0
  */
  ctr[0] = blockb0[0] & 0x07;
  /* byte 1 to NonceSize is the IV (Nonce) */
  for(loopcounter = 1; loopcounter < NonceSize + 1; loopcounter++)
 80086b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80086b6:	3301      	adds	r3, #1
 80086b8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80086bc:	1d3b      	adds	r3, r7, #4
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	1c5a      	adds	r2, r3, #1
 80086c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80086c6:	429a      	cmp	r2, r3
 80086c8:	d8e7      	bhi.n	800869a <CRYP_AES_CCM+0x30e>
  {
    ctr[loopcounter] = blockb0[loopcounter];
  }
  /* Set the LSB to 1 */
  ctr[15] |= 0x01;
 80086ca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80086ce:	f043 0301 	orr.w	r3, r3, #1
 80086d2:	b2db      	uxtb	r3, r3
 80086d4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  
  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
 80086d8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80086dc:	4618      	mov	r0, r3
 80086de:	f000 fd75 	bl	80091cc <CRYP_KeyStructInit>
  
  switch(Keysize)
 80086e2:	f8b7 3120 	ldrh.w	r3, [r7, #288]	; 0x120
 80086e6:	2bc0      	cmp	r3, #192	; 0xc0
 80086e8:	d03d      	beq.n	8008766 <CRYP_AES_CCM+0x3da>
 80086ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80086ee:	f000 808e 	beq.w	800880e <CRYP_AES_CCM+0x482>
 80086f2:	2b80      	cmp	r3, #128	; 0x80
 80086f4:	d000      	beq.n	80086f8 <CRYP_AES_CCM+0x36c>
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
    break;
    default:
    break;
 80086f6:	e0fa      	b.n	80088ee <CRYP_AES_CCM+0x562>
  CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
  
  switch(Keysize)
  {
    case 128:
    AES_CRYP_InitStructure.CRYP_KeySize = CRYP_KeySize_128b;
 80086f8:	2300      	movs	r3, #0
 80086fa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 80086fe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008708:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800870c:	ba1b      	rev	r3, r3
 800870e:	66bb      	str	r3, [r7, #104]	; 0x68
    keyaddr+=4;
 8008710:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008714:	3304      	adds	r3, #4
 8008716:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 800871a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008724:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008728:	ba1b      	rev	r3, r3
 800872a:	66fb      	str	r3, [r7, #108]	; 0x6c
    keyaddr+=4;
 800872c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008730:	3304      	adds	r3, #4
 8008732:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 8008736:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008740:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008744:	ba1b      	rev	r3, r3
 8008746:	673b      	str	r3, [r7, #112]	; 0x70
    keyaddr+=4;
 8008748:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800874c:	3304      	adds	r3, #4
 800874e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 8008752:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800875c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008760:	ba1b      	rev	r3, r3
 8008762:	677b      	str	r3, [r7, #116]	; 0x74
    break;
 8008764:	e0c3      	b.n	80088ee <CRYP_AES_CCM+0x562>
    case 192:
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_192b;
 8008766:	f44f 7380 	mov.w	r3, #256	; 0x100
 800876a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 800876e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008778:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800877c:	ba1b      	rev	r3, r3
 800877e:	663b      	str	r3, [r7, #96]	; 0x60
    keyaddr+=4;
 8008780:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008784:	3304      	adds	r3, #4
 8008786:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 800878a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008794:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008798:	ba1b      	rev	r3, r3
 800879a:	667b      	str	r3, [r7, #100]	; 0x64
    keyaddr+=4;
 800879c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80087a0:	3304      	adds	r3, #4
 80087a2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 80087a6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80087b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80087b4:	ba1b      	rev	r3, r3
 80087b6:	66bb      	str	r3, [r7, #104]	; 0x68
    keyaddr+=4;
 80087b8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80087bc:	3304      	adds	r3, #4
 80087be:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 80087c2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80087cc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80087d0:	ba1b      	rev	r3, r3
 80087d2:	66fb      	str	r3, [r7, #108]	; 0x6c
    keyaddr+=4;
 80087d4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80087d8:	3304      	adds	r3, #4
 80087da:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 80087de:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80087e8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80087ec:	ba1b      	rev	r3, r3
 80087ee:	673b      	str	r3, [r7, #112]	; 0x70
    keyaddr+=4;
 80087f0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80087f4:	3304      	adds	r3, #4
 80087f6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 80087fa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008804:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008808:	ba1b      	rev	r3, r3
 800880a:	677b      	str	r3, [r7, #116]	; 0x74
    break;
 800880c:	e06f      	b.n	80088ee <CRYP_AES_CCM+0x562>
    case 256:
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_256b;
 800880e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008812:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    AES_CRYP_KeyInitStructure.CRYP_Key0Left = __REV(*(uint32_t*)(keyaddr));
 8008816:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008820:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008824:	ba1b      	rev	r3, r3
 8008826:	65bb      	str	r3, [r7, #88]	; 0x58
    keyaddr+=4;
 8008828:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800882c:	3304      	adds	r3, #4
 800882e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    AES_CRYP_KeyInitStructure.CRYP_Key0Right= __REV(*(uint32_t*)(keyaddr));
 8008832:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800883c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008840:	ba1b      	rev	r3, r3
 8008842:	65fb      	str	r3, [r7, #92]	; 0x5c
    keyaddr+=4;
 8008844:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008848:	3304      	adds	r3, #4
 800884a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 800884e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008858:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800885c:	ba1b      	rev	r3, r3
 800885e:	663b      	str	r3, [r7, #96]	; 0x60
    keyaddr+=4;
 8008860:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008864:	3304      	adds	r3, #4
 8008866:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 800886a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008874:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008878:	ba1b      	rev	r3, r3
 800887a:	667b      	str	r3, [r7, #100]	; 0x64
    keyaddr+=4;
 800887c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008880:	3304      	adds	r3, #4
 8008882:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8008886:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008890:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008894:	ba1b      	rev	r3, r3
 8008896:	66bb      	str	r3, [r7, #104]	; 0x68
    keyaddr+=4;
 8008898:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800889c:	3304      	adds	r3, #4
 800889e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 80088a2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80088ac:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80088b0:	ba1b      	rev	r3, r3
 80088b2:	66fb      	str	r3, [r7, #108]	; 0x6c
    keyaddr+=4;
 80088b4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80088b8:	3304      	adds	r3, #4
 80088ba:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 80088be:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80088c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80088cc:	ba1b      	rev	r3, r3
 80088ce:	673b      	str	r3, [r7, #112]	; 0x70
    keyaddr+=4;
 80088d0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80088d4:	3304      	adds	r3, #4
 80088d6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 80088da:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80088e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80088e8:	ba1b      	rev	r3, r3
 80088ea:	677b      	str	r3, [r7, #116]	; 0x74
    break;
 80088ec:	bf00      	nop
    default:
    break;
  }
  
  /* CRYP Initialization Vectors */
  AES_CRYP_IVInitStructure.CRYP_IV0Left = (__REV(*(uint32_t*)(ctraddr)));
 80088ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80088f8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80088fc:	ba1b      	rev	r3, r3
 80088fe:	64bb      	str	r3, [r7, #72]	; 0x48
  ctraddr+=4;
 8008900:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008904:	3304      	adds	r3, #4
 8008906:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  AES_CRYP_IVInitStructure.CRYP_IV0Right= (__REV(*(uint32_t*)(ctraddr)));
 800890a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008914:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008918:	ba1b      	rev	r3, r3
 800891a:	64fb      	str	r3, [r7, #76]	; 0x4c
  ctraddr+=4;
 800891c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008920:	3304      	adds	r3, #4
 8008922:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  AES_CRYP_IVInitStructure.CRYP_IV1Left = (__REV(*(uint32_t*)(ctraddr)));
 8008926:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008930:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008934:	ba1b      	rev	r3, r3
 8008936:	653b      	str	r3, [r7, #80]	; 0x50
  ctraddr+=4;
 8008938:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800893c:	3304      	adds	r3, #4
 800893e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  AES_CRYP_IVInitStructure.CRYP_IV1Right= (__REV(*(uint32_t*)(ctraddr)));
 8008942:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800894c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008950:	ba1b      	rev	r3, r3
 8008952:	657b      	str	r3, [r7, #84]	; 0x54
  
  /*------------------ AES Encryption ------------------*/
  if(Mode == MODE_ENCRYPT) /* AES encryption */
 8008954:	f107 030f 	add.w	r3, r7, #15
 8008958:	781b      	ldrb	r3, [r3, #0]
 800895a:	2b01      	cmp	r3, #1
 800895c:	f040 81b9 	bne.w	8008cd2 <CRYP_AES_CCM+0x946>
  {
    /* Flush IN/OUT FIFOs */
    CRYP_FIFOFlush();
 8008960:	f000 fca4 	bl	80092ac <CRYP_FIFOFlush>
    
    /* Key Initialisation */
    CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 8008964:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008968:	4618      	mov	r0, r3
 800896a:	f000 fc03 	bl	8009174 <CRYP_KeyInit>
    
    /* CRYP Initialization Vectors */
    CRYP_IVInit(&AES_CRYP_IVInitStructure);
 800896e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8008972:	4618      	mov	r0, r3
 8008974:	f000 fc4c 	bl	8009210 <CRYP_IVInit>
    
    /* Crypto Init for Key preparation for decryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
 8008978:	2300      	movs	r3, #0
 800897a:	67bb      	str	r3, [r7, #120]	; 0x78
    AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_CCM;
 800897c:	f04f 1308 	mov.w	r3, #524296	; 0x80008
 8008980:	67fb      	str	r3, [r7, #124]	; 0x7c
    AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 8008982:	2380      	movs	r3, #128	; 0x80
 8008984:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    CRYP_Init(&AES_CRYP_InitStructure);
 8008988:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800898c:	4618      	mov	r0, r3
 800898e:	f000 fb89 	bl	80090a4 <CRYP_Init>
    
    /***************************** Init phase *********************************/
    /* Select init phase */
    CRYP_PhaseConfig(CRYP_Phase_Init);
 8008992:	2000      	movs	r0, #0
 8008994:	f000 fc6e 	bl	8009274 <CRYP_PhaseConfig>
    
    b0addr = (uint32_t)blockb0;
 8008998:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800899c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    /* Write the blockb0 block in the IN FIFO */
    CRYP_DataIn((*(uint32_t*)(b0addr)));
 80089a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	4618      	mov	r0, r3
 80089a8:	f000 fcaa 	bl	8009300 <CRYP_DataIn>
    b0addr+=4;
 80089ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80089b0:	3304      	adds	r3, #4
 80089b2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    CRYP_DataIn((*(uint32_t*)(b0addr)));
 80089b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	4618      	mov	r0, r3
 80089be:	f000 fc9f 	bl	8009300 <CRYP_DataIn>
    b0addr+=4;
 80089c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80089c6:	3304      	adds	r3, #4
 80089c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    CRYP_DataIn((*(uint32_t*)(b0addr)));
 80089cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	4618      	mov	r0, r3
 80089d4:	f000 fc94 	bl	8009300 <CRYP_DataIn>
    b0addr+=4;
 80089d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80089dc:	3304      	adds	r3, #4
 80089de:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    CRYP_DataIn((*(uint32_t*)(b0addr)));
 80089e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	4618      	mov	r0, r3
 80089ea:	f000 fc89 	bl	8009300 <CRYP_DataIn>
    
    /* Enable Crypto processor */
    CRYP_Cmd(ENABLE);
 80089ee:	2001      	movs	r0, #1
 80089f0:	f000 fc6a 	bl	80092c8 <CRYP_Cmd>
    
    /* Wait for CRYPEN bit to be 0 */
    while(CRYP_GetCmdStatus() == ENABLE)
 80089f4:	bf00      	nop
 80089f6:	f000 fe4b 	bl	8009690 <CRYP_GetCmdStatus>
 80089fa:	4603      	mov	r3, r0
 80089fc:	2b01      	cmp	r3, #1
 80089fe:	d0fa      	beq.n	80089f6 <CRYP_AES_CCM+0x66a>
    {
    }
    /***************************** header phase *******************************/
    if(headersize != 0)
 8008a00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d069      	beq.n	8008adc <CRYP_AES_CCM+0x750>
    {
      /* Select header phase */
      CRYP_PhaseConfig(CRYP_Phase_Header);
 8008a08:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8008a0c:	f000 fc32 	bl	8009274 <CRYP_PhaseConfig>
      
      /* Enable Crypto processor */
      CRYP_Cmd(ENABLE);
 8008a10:	2001      	movs	r0, #1
 8008a12:	f000 fc59 	bl	80092c8 <CRYP_Cmd>
      
      if(CRYP_GetCmdStatus() == DISABLE)
 8008a16:	f000 fe3b 	bl	8009690 <CRYP_GetCmdStatus>
 8008a1a:	4603      	mov	r3, r0
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d101      	bne.n	8008a24 <CRYP_AES_CCM+0x698>
      {
         /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
            the CRYP peripheral (please check the device sales type. */
         return(ERROR);
 8008a20:	2300      	movs	r3, #0
 8008a22:	e32e      	b.n	8009082 <CRYP_AES_CCM+0xcf6>
      }
      
      for(loopcounter = 0; (loopcounter < headersize); loopcounter+=16)
 8008a24:	2300      	movs	r3, #0
 8008a26:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008a2a:	e037      	b.n	8008a9c <CRYP_AES_CCM+0x710>
      {
        /* Wait until the IFEM flag is reset */
        while(CRYP_GetFlagStatus(CRYP_FLAG_IFEM) == RESET)
 8008a2c:	bf00      	nop
 8008a2e:	2001      	movs	r0, #1
 8008a30:	f000 fe48 	bl	80096c4 <CRYP_GetFlagStatus>
 8008a34:	4603      	mov	r3, r0
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d0f9      	beq.n	8008a2e <CRYP_AES_CCM+0x6a2>
        {
        }
        
        /* Write the Input block in the IN FIFO */
        CRYP_DataIn(*(uint32_t*)(headeraddr));
 8008a3a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	4618      	mov	r0, r3
 8008a42:	f000 fc5d 	bl	8009300 <CRYP_DataIn>
        headeraddr+=4;
 8008a46:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008a4a:	3304      	adds	r3, #4
 8008a4c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
        CRYP_DataIn(*(uint32_t*)(headeraddr));
 8008a50:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	4618      	mov	r0, r3
 8008a58:	f000 fc52 	bl	8009300 <CRYP_DataIn>
        headeraddr+=4;
 8008a5c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008a60:	3304      	adds	r3, #4
 8008a62:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
        CRYP_DataIn(*(uint32_t*)(headeraddr));
 8008a66:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	f000 fc47 	bl	8009300 <CRYP_DataIn>
        headeraddr+=4;
 8008a72:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008a76:	3304      	adds	r3, #4
 8008a78:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
        CRYP_DataIn(*(uint32_t*)(headeraddr));
 8008a7c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	4618      	mov	r0, r3
 8008a84:	f000 fc3c 	bl	8009300 <CRYP_DataIn>
        headeraddr+=4;
 8008a88:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008a8c:	3304      	adds	r3, #4
 8008a8e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
         /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
            the CRYP peripheral (please check the device sales type. */
         return(ERROR);
      }
      
      for(loopcounter = 0; (loopcounter < headersize); loopcounter+=16)
 8008a92:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008a96:	3310      	adds	r3, #16
 8008a98:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008a9c:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8008aa0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008aa4:	429a      	cmp	r2, r3
 8008aa6:	d3c1      	bcc.n	8008a2c <CRYP_AES_CCM+0x6a0>
        CRYP_DataIn(*(uint32_t*)(headeraddr));
        headeraddr+=4;
      }
      
      /* Wait until the complete message has been processed */
      counter = 0;
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	647b      	str	r3, [r7, #68]	; 0x44
      do
      {
        busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8008aac:	2010      	movs	r0, #16
 8008aae:	f000 fe09 	bl	80096c4 <CRYP_GetFlagStatus>
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
        counter++;
 8008ab8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008aba:	3301      	adds	r3, #1
 8008abc:	647b      	str	r3, [r7, #68]	; 0x44
      }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 8008abe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ac0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ac4:	d003      	beq.n	8008ace <CRYP_AES_CCM+0x742>
 8008ac6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d1ee      	bne.n	8008aac <CRYP_AES_CCM+0x720>

      if (busystatus != RESET)
 8008ace:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d002      	beq.n	8008adc <CRYP_AES_CCM+0x750>
      {
        status = ERROR;
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
      }
    }
    
    /**************************** payload phase *******************************/
    if(ILength != 0)
 8008adc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	f000 80a3 	beq.w	8008c2c <CRYP_AES_CCM+0x8a0>
    {
      /* Select payload phase */
      CRYP_PhaseConfig(CRYP_Phase_Payload);
 8008ae6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8008aea:	f000 fbc3 	bl	8009274 <CRYP_PhaseConfig>
      
      /* Enable Crypto processor */
      CRYP_Cmd(ENABLE);
 8008aee:	2001      	movs	r0, #1
 8008af0:	f000 fbea 	bl	80092c8 <CRYP_Cmd>
      
      if(CRYP_GetCmdStatus() == DISABLE)
 8008af4:	f000 fdcc 	bl	8009690 <CRYP_GetCmdStatus>
 8008af8:	4603      	mov	r3, r0
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d101      	bne.n	8008b02 <CRYP_AES_CCM+0x776>
      {
        /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
           the CRYP peripheral (please check the device sales type. */
        return(ERROR);
 8008afe:	2300      	movs	r3, #0
 8008b00:	e2bf      	b.n	8009082 <CRYP_AES_CCM+0xcf6>
      }
      
      for(loopcounter = 0; ((loopcounter < ILength) && (status != ERROR)); loopcounter+=16)
 8008b02:	2300      	movs	r3, #0
 8008b04:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008b08:	e085      	b.n	8008c16 <CRYP_AES_CCM+0x88a>
      {
        /* Wait until the IFEM flag is reset */
        while(CRYP_GetFlagStatus(CRYP_FLAG_IFEM) == RESET)
 8008b0a:	bf00      	nop
 8008b0c:	2001      	movs	r0, #1
 8008b0e:	f000 fdd9 	bl	80096c4 <CRYP_GetFlagStatus>
 8008b12:	4603      	mov	r3, r0
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d0f9      	beq.n	8008b0c <CRYP_AES_CCM+0x780>
        {
        }
        
        /* Write the Input block in the IN FIFO */
        CRYP_DataIn(*(uint32_t*)(inputaddr));
 8008b18:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	4618      	mov	r0, r3
 8008b20:	f000 fbee 	bl	8009300 <CRYP_DataIn>
        inputaddr+=4;
 8008b24:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008b28:	3304      	adds	r3, #4
 8008b2a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        CRYP_DataIn(*(uint32_t*)(inputaddr));
 8008b2e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	4618      	mov	r0, r3
 8008b36:	f000 fbe3 	bl	8009300 <CRYP_DataIn>
        inputaddr+=4;
 8008b3a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008b3e:	3304      	adds	r3, #4
 8008b40:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        CRYP_DataIn(*(uint32_t*)(inputaddr));
 8008b44:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	f000 fbd8 	bl	8009300 <CRYP_DataIn>
        inputaddr+=4;
 8008b50:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008b54:	3304      	adds	r3, #4
 8008b56:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        CRYP_DataIn(*(uint32_t*)(inputaddr));
 8008b5a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	4618      	mov	r0, r3
 8008b62:	f000 fbcd 	bl	8009300 <CRYP_DataIn>
        inputaddr+=4;
 8008b66:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008b6a:	3304      	adds	r3, #4
 8008b6c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        
        /* Wait until the complete message has been processed */
        counter = 0;
 8008b70:	2300      	movs	r3, #0
 8008b72:	647b      	str	r3, [r7, #68]	; 0x44
        do
        {
          busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8008b74:	2010      	movs	r0, #16
 8008b76:	f000 fda5 	bl	80096c4 <CRYP_GetFlagStatus>
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
          counter++;
 8008b80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b82:	3301      	adds	r3, #1
 8008b84:	647b      	str	r3, [r7, #68]	; 0x44
        }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 8008b86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b8c:	d003      	beq.n	8008b96 <CRYP_AES_CCM+0x80a>
 8008b8e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d1ee      	bne.n	8008b74 <CRYP_AES_CCM+0x7e8>

        if (busystatus != RESET)
 8008b96:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d003      	beq.n	8008ba6 <CRYP_AES_CCM+0x81a>
        {
          status = ERROR;
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8008ba4:	e032      	b.n	8008c0c <CRYP_AES_CCM+0x880>
        }
        else
        {
          /* Wait until the OFNE flag is reset */
          while(CRYP_GetFlagStatus(CRYP_FLAG_OFNE) == RESET)
 8008ba6:	bf00      	nop
 8008ba8:	2004      	movs	r0, #4
 8008baa:	f000 fd8b 	bl	80096c4 <CRYP_GetFlagStatus>
 8008bae:	4603      	mov	r3, r0
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d0f9      	beq.n	8008ba8 <CRYP_AES_CCM+0x81c>
          {
          }
          
          /* Read the Output block from the Output FIFO */
          *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8008bb4:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 8008bb8:	f000 fbb0 	bl	800931c <CRYP_DataOut>
 8008bbc:	4603      	mov	r3, r0
 8008bbe:	6023      	str	r3, [r4, #0]
          outputaddr+=4;
 8008bc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008bc4:	3304      	adds	r3, #4
 8008bc6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8008bca:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 8008bce:	f000 fba5 	bl	800931c <CRYP_DataOut>
 8008bd2:	4603      	mov	r3, r0
 8008bd4:	6023      	str	r3, [r4, #0]
          outputaddr+=4;
 8008bd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008bda:	3304      	adds	r3, #4
 8008bdc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8008be0:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 8008be4:	f000 fb9a 	bl	800931c <CRYP_DataOut>
 8008be8:	4603      	mov	r3, r0
 8008bea:	6023      	str	r3, [r4, #0]
          outputaddr+=4;
 8008bec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008bf0:	3304      	adds	r3, #4
 8008bf2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8008bf6:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 8008bfa:	f000 fb8f 	bl	800931c <CRYP_DataOut>
 8008bfe:	4603      	mov	r3, r0
 8008c00:	6023      	str	r3, [r4, #0]
          outputaddr+=4;
 8008c02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c06:	3304      	adds	r3, #4
 8008c08:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
           the CRYP peripheral (please check the device sales type. */
        return(ERROR);
      }
      
      for(loopcounter = 0; ((loopcounter < ILength) && (status != ERROR)); loopcounter+=16)
 8008c0c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008c10:	3310      	adds	r3, #16
 8008c12:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008c16:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8008c1a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008c1e:	429a      	cmp	r2, r3
 8008c20:	d204      	bcs.n	8008c2c <CRYP_AES_CCM+0x8a0>
 8008c22:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	f47f af6f 	bne.w	8008b0a <CRYP_AES_CCM+0x77e>
      }
    }
    
    /***************************** final phase ********************************/
    /* Select final phase */
    CRYP_PhaseConfig(CRYP_Phase_Final);
 8008c2c:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8008c30:	f000 fb20 	bl	8009274 <CRYP_PhaseConfig>
    
    /* Enable Crypto processor */
    CRYP_Cmd(ENABLE);
 8008c34:	2001      	movs	r0, #1
 8008c36:	f000 fb47 	bl	80092c8 <CRYP_Cmd>
    
    if(CRYP_GetCmdStatus() == DISABLE)
 8008c3a:	f000 fd29 	bl	8009690 <CRYP_GetCmdStatus>
 8008c3e:	4603      	mov	r3, r0
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d101      	bne.n	8008c48 <CRYP_AES_CCM+0x8bc>
    {
      /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
         the CRYP peripheral (please check the device sales type. */
      return(ERROR);
 8008c44:	2300      	movs	r3, #0
 8008c46:	e21c      	b.n	8009082 <CRYP_AES_CCM+0xcf6>
    }
    
    ctraddr = (uint32_t)ctr;
 8008c48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008c4c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    /* Write the counter block in the IN FIFO */
    CRYP_DataIn(*(uint32_t*)(ctraddr));
 8008c50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	4618      	mov	r0, r3
 8008c58:	f000 fb52 	bl	8009300 <CRYP_DataIn>
    ctraddr+=4;
 8008c5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c60:	3304      	adds	r3, #4
 8008c62:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    CRYP_DataIn(*(uint32_t*)(ctraddr));
 8008c66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	f000 fb47 	bl	8009300 <CRYP_DataIn>
    ctraddr+=4;
 8008c72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c76:	3304      	adds	r3, #4
 8008c78:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    CRYP_DataIn(*(uint32_t*)(ctraddr));
 8008c7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	4618      	mov	r0, r3
 8008c84:	f000 fb3c 	bl	8009300 <CRYP_DataIn>
    ctraddr+=4;
 8008c88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c8c:	3304      	adds	r3, #4
 8008c8e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    /* Reset bit 0 (after 8-bit swap) is equivalent to reset bit 24 (before 8-bit swap) */
    CRYP_DataIn(*(uint32_t*)(ctraddr) & 0xfeffffff);
 8008c92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	f000 fb2f 	bl	8009300 <CRYP_DataIn>
    
    /* Wait until the OFNE flag is reset */
    while(CRYP_GetFlagStatus(CRYP_FLAG_OFNE) == RESET)
 8008ca2:	bf00      	nop
 8008ca4:	2004      	movs	r0, #4
 8008ca6:	f000 fd0d 	bl	80096c4 <CRYP_GetFlagStatus>
 8008caa:	4603      	mov	r3, r0
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d0f9      	beq.n	8008ca4 <CRYP_AES_CCM+0x918>
    {
    }
    
    /* Read the Auth TAG in the IN FIFO */
    temptag[0] = CRYP_DataOut();
 8008cb0:	f000 fb34 	bl	800931c <CRYP_DataOut>
 8008cb4:	4603      	mov	r3, r0
 8008cb6:	617b      	str	r3, [r7, #20]
    temptag[1] = CRYP_DataOut();
 8008cb8:	f000 fb30 	bl	800931c <CRYP_DataOut>
 8008cbc:	4603      	mov	r3, r0
 8008cbe:	61bb      	str	r3, [r7, #24]
    temptag[2] = CRYP_DataOut();
 8008cc0:	f000 fb2c 	bl	800931c <CRYP_DataOut>
 8008cc4:	4603      	mov	r3, r0
 8008cc6:	61fb      	str	r3, [r7, #28]
    temptag[3] = CRYP_DataOut();
 8008cc8:	f000 fb28 	bl	800931c <CRYP_DataOut>
 8008ccc:	4603      	mov	r3, r0
 8008cce:	623b      	str	r3, [r7, #32]
 8008cd0:	e1b7      	b.n	8009042 <CRYP_AES_CCM+0xcb6>
  }
  /*------------------ AES Decryption ------------------*/
  else /* AES decryption */
  {
    /* Flush IN/OUT FIFOs */
    CRYP_FIFOFlush();
 8008cd2:	f000 faeb 	bl	80092ac <CRYP_FIFOFlush>
    
    /* Key Initialisation */
    CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 8008cd6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008cda:	4618      	mov	r0, r3
 8008cdc:	f000 fa4a 	bl	8009174 <CRYP_KeyInit>
    
    /* CRYP Initialization Vectors */
    CRYP_IVInit(&AES_CRYP_IVInitStructure);
 8008ce0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	f000 fa93 	bl	8009210 <CRYP_IVInit>
    
    /* Crypto Init for Key preparation for decryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 8008cea:	2304      	movs	r3, #4
 8008cec:	67bb      	str	r3, [r7, #120]	; 0x78
    AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_CCM;
 8008cee:	f04f 1308 	mov.w	r3, #524296	; 0x80008
 8008cf2:	67fb      	str	r3, [r7, #124]	; 0x7c
    AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 8008cf4:	2380      	movs	r3, #128	; 0x80
 8008cf6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    CRYP_Init(&AES_CRYP_InitStructure);
 8008cfa:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8008cfe:	4618      	mov	r0, r3
 8008d00:	f000 f9d0 	bl	80090a4 <CRYP_Init>
    
    /***************************** Init phase *********************************/
    /* Select init phase */
    CRYP_PhaseConfig(CRYP_Phase_Init);
 8008d04:	2000      	movs	r0, #0
 8008d06:	f000 fab5 	bl	8009274 <CRYP_PhaseConfig>
    
    b0addr = (uint32_t)blockb0;
 8008d0a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008d0e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    /* Write the blockb0 block in the IN FIFO */
    CRYP_DataIn((*(uint32_t*)(b0addr)));
 8008d12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	4618      	mov	r0, r3
 8008d1a:	f000 faf1 	bl	8009300 <CRYP_DataIn>
    b0addr+=4;
 8008d1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d22:	3304      	adds	r3, #4
 8008d24:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    CRYP_DataIn((*(uint32_t*)(b0addr)));
 8008d28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	4618      	mov	r0, r3
 8008d30:	f000 fae6 	bl	8009300 <CRYP_DataIn>
    b0addr+=4;
 8008d34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d38:	3304      	adds	r3, #4
 8008d3a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    CRYP_DataIn((*(uint32_t*)(b0addr)));
 8008d3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	4618      	mov	r0, r3
 8008d46:	f000 fadb 	bl	8009300 <CRYP_DataIn>
    b0addr+=4;
 8008d4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d4e:	3304      	adds	r3, #4
 8008d50:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    CRYP_DataIn((*(uint32_t*)(b0addr)));
 8008d54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	f000 fad0 	bl	8009300 <CRYP_DataIn>
    
    /* Enable Crypto processor */
    CRYP_Cmd(ENABLE);
 8008d60:	2001      	movs	r0, #1
 8008d62:	f000 fab1 	bl	80092c8 <CRYP_Cmd>
    
    /* Wait for CRYPEN bit to be 0 */
    while(CRYP_GetCmdStatus() == ENABLE)
 8008d66:	bf00      	nop
 8008d68:	f000 fc92 	bl	8009690 <CRYP_GetCmdStatus>
 8008d6c:	4603      	mov	r3, r0
 8008d6e:	2b01      	cmp	r3, #1
 8008d70:	d0fa      	beq.n	8008d68 <CRYP_AES_CCM+0x9dc>
    {
    }
    
    /***************************** header phase *******************************/
    if(headersize != 0)
 8008d72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d069      	beq.n	8008e4e <CRYP_AES_CCM+0xac2>
    {
      /* Select header phase */
      CRYP_PhaseConfig(CRYP_Phase_Header);
 8008d7a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8008d7e:	f000 fa79 	bl	8009274 <CRYP_PhaseConfig>
      
      /* Enable Crypto processor */
      CRYP_Cmd(ENABLE);
 8008d82:	2001      	movs	r0, #1
 8008d84:	f000 faa0 	bl	80092c8 <CRYP_Cmd>
      
      if(CRYP_GetCmdStatus() == DISABLE)
 8008d88:	f000 fc82 	bl	8009690 <CRYP_GetCmdStatus>
 8008d8c:	4603      	mov	r3, r0
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d101      	bne.n	8008d96 <CRYP_AES_CCM+0xa0a>
      {
        /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
           the CRYP peripheral (please check the device sales type. */
        return(ERROR);
 8008d92:	2300      	movs	r3, #0
 8008d94:	e175      	b.n	8009082 <CRYP_AES_CCM+0xcf6>
      }
      
      for(loopcounter = 0; (loopcounter < headersize); loopcounter+=16)
 8008d96:	2300      	movs	r3, #0
 8008d98:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008d9c:	e037      	b.n	8008e0e <CRYP_AES_CCM+0xa82>
      {
        /* Wait until the IFEM flag is reset */
        while(CRYP_GetFlagStatus(CRYP_FLAG_IFEM) == RESET)
 8008d9e:	bf00      	nop
 8008da0:	2001      	movs	r0, #1
 8008da2:	f000 fc8f 	bl	80096c4 <CRYP_GetFlagStatus>
 8008da6:	4603      	mov	r3, r0
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d0f9      	beq.n	8008da0 <CRYP_AES_CCM+0xa14>
        {
        }
        
        /* Write the Input block in the IN FIFO */
        CRYP_DataIn(*(uint32_t*)(headeraddr));
 8008dac:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	4618      	mov	r0, r3
 8008db4:	f000 faa4 	bl	8009300 <CRYP_DataIn>
        headeraddr+=4;
 8008db8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008dbc:	3304      	adds	r3, #4
 8008dbe:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
        CRYP_DataIn(*(uint32_t*)(headeraddr));
 8008dc2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	4618      	mov	r0, r3
 8008dca:	f000 fa99 	bl	8009300 <CRYP_DataIn>
        headeraddr+=4;
 8008dce:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008dd2:	3304      	adds	r3, #4
 8008dd4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
        CRYP_DataIn(*(uint32_t*)(headeraddr));
 8008dd8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	4618      	mov	r0, r3
 8008de0:	f000 fa8e 	bl	8009300 <CRYP_DataIn>
        headeraddr+=4;
 8008de4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008de8:	3304      	adds	r3, #4
 8008dea:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
        CRYP_DataIn(*(uint32_t*)(headeraddr));
 8008dee:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	4618      	mov	r0, r3
 8008df6:	f000 fa83 	bl	8009300 <CRYP_DataIn>
        headeraddr+=4;
 8008dfa:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008dfe:	3304      	adds	r3, #4
 8008e00:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
        /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
           the CRYP peripheral (please check the device sales type. */
        return(ERROR);
      }
      
      for(loopcounter = 0; (loopcounter < headersize); loopcounter+=16)
 8008e04:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008e08:	3310      	adds	r3, #16
 8008e0a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008e0e:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8008e12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008e16:	429a      	cmp	r2, r3
 8008e18:	d3c1      	bcc.n	8008d9e <CRYP_AES_CCM+0xa12>
        CRYP_DataIn(*(uint32_t*)(headeraddr));
        headeraddr+=4;
      }
      
      /* Wait until the complete message has been processed */
      counter = 0;
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	647b      	str	r3, [r7, #68]	; 0x44
      do
      {
        busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8008e1e:	2010      	movs	r0, #16
 8008e20:	f000 fc50 	bl	80096c4 <CRYP_GetFlagStatus>
 8008e24:	4603      	mov	r3, r0
 8008e26:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
        counter++;
 8008e2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e2c:	3301      	adds	r3, #1
 8008e2e:	647b      	str	r3, [r7, #68]	; 0x44
      }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 8008e30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e36:	d003      	beq.n	8008e40 <CRYP_AES_CCM+0xab4>
 8008e38:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d1ee      	bne.n	8008e1e <CRYP_AES_CCM+0xa92>

      if (busystatus != RESET)
 8008e40:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d002      	beq.n	8008e4e <CRYP_AES_CCM+0xac2>
      {
        status = ERROR;
 8008e48:	2300      	movs	r3, #0
 8008e4a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
      }
    }
    
    /**************************** payload phase *******************************/
    if(ILength != 0)
 8008e4e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	f000 80a3 	beq.w	8008f9e <CRYP_AES_CCM+0xc12>
    {
      /* Select payload phase */
      CRYP_PhaseConfig(CRYP_Phase_Payload);
 8008e58:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8008e5c:	f000 fa0a 	bl	8009274 <CRYP_PhaseConfig>

      /* Enable Crypto processor */
      CRYP_Cmd(ENABLE);
 8008e60:	2001      	movs	r0, #1
 8008e62:	f000 fa31 	bl	80092c8 <CRYP_Cmd>
      
      if(CRYP_GetCmdStatus() == DISABLE)
 8008e66:	f000 fc13 	bl	8009690 <CRYP_GetCmdStatus>
 8008e6a:	4603      	mov	r3, r0
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d101      	bne.n	8008e74 <CRYP_AES_CCM+0xae8>
      {
        /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
           the CRYP peripheral (please check the device sales type. */
        return(ERROR);
 8008e70:	2300      	movs	r3, #0
 8008e72:	e106      	b.n	8009082 <CRYP_AES_CCM+0xcf6>
      }
      
      for(loopcounter = 0; ((loopcounter < ILength) && (status != ERROR)); loopcounter+=16)
 8008e74:	2300      	movs	r3, #0
 8008e76:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008e7a:	e085      	b.n	8008f88 <CRYP_AES_CCM+0xbfc>
      {
        /* Wait until the IFEM flag is reset */
        while(CRYP_GetFlagStatus(CRYP_FLAG_IFEM) == RESET)
 8008e7c:	bf00      	nop
 8008e7e:	2001      	movs	r0, #1
 8008e80:	f000 fc20 	bl	80096c4 <CRYP_GetFlagStatus>
 8008e84:	4603      	mov	r3, r0
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d0f9      	beq.n	8008e7e <CRYP_AES_CCM+0xaf2>
        {
        }
        
        /* Write the Input block in the IN FIFO */
        CRYP_DataIn(*(uint32_t*)(inputaddr));
 8008e8a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	4618      	mov	r0, r3
 8008e92:	f000 fa35 	bl	8009300 <CRYP_DataIn>
        inputaddr+=4;
 8008e96:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008e9a:	3304      	adds	r3, #4
 8008e9c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        CRYP_DataIn(*(uint32_t*)(inputaddr));
 8008ea0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	f000 fa2a 	bl	8009300 <CRYP_DataIn>
        inputaddr+=4;
 8008eac:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008eb0:	3304      	adds	r3, #4
 8008eb2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        CRYP_DataIn(*(uint32_t*)(inputaddr));
 8008eb6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	f000 fa1f 	bl	8009300 <CRYP_DataIn>
        inputaddr+=4;
 8008ec2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008ec6:	3304      	adds	r3, #4
 8008ec8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        CRYP_DataIn(*(uint32_t*)(inputaddr));
 8008ecc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	f000 fa14 	bl	8009300 <CRYP_DataIn>
        inputaddr+=4;
 8008ed8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008edc:	3304      	adds	r3, #4
 8008ede:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        
        /* Wait until the complete message has been processed */
        counter = 0;
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	647b      	str	r3, [r7, #68]	; 0x44
        do
        {
          busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8008ee6:	2010      	movs	r0, #16
 8008ee8:	f000 fbec 	bl	80096c4 <CRYP_GetFlagStatus>
 8008eec:	4603      	mov	r3, r0
 8008eee:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
          counter++;
 8008ef2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ef4:	3301      	adds	r3, #1
 8008ef6:	647b      	str	r3, [r7, #68]	; 0x44
        }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 8008ef8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008efa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008efe:	d003      	beq.n	8008f08 <CRYP_AES_CCM+0xb7c>
 8008f00:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d1ee      	bne.n	8008ee6 <CRYP_AES_CCM+0xb5a>

        if (busystatus != RESET)
 8008f08:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d003      	beq.n	8008f18 <CRYP_AES_CCM+0xb8c>
        {
          status = ERROR;
 8008f10:	2300      	movs	r3, #0
 8008f12:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8008f16:	e032      	b.n	8008f7e <CRYP_AES_CCM+0xbf2>
        }
        else
        {
          /* Wait until the OFNE flag is reset */
          while(CRYP_GetFlagStatus(CRYP_FLAG_OFNE) == RESET)
 8008f18:	bf00      	nop
 8008f1a:	2004      	movs	r0, #4
 8008f1c:	f000 fbd2 	bl	80096c4 <CRYP_GetFlagStatus>
 8008f20:	4603      	mov	r3, r0
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d0f9      	beq.n	8008f1a <CRYP_AES_CCM+0xb8e>
          {
          }
          
          /* Read the Output block from the Output FIFO */
          *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8008f26:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 8008f2a:	f000 f9f7 	bl	800931c <CRYP_DataOut>
 8008f2e:	4603      	mov	r3, r0
 8008f30:	6023      	str	r3, [r4, #0]
          outputaddr+=4;
 8008f32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f36:	3304      	adds	r3, #4
 8008f38:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8008f3c:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 8008f40:	f000 f9ec 	bl	800931c <CRYP_DataOut>
 8008f44:	4603      	mov	r3, r0
 8008f46:	6023      	str	r3, [r4, #0]
          outputaddr+=4;
 8008f48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f4c:	3304      	adds	r3, #4
 8008f4e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8008f52:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 8008f56:	f000 f9e1 	bl	800931c <CRYP_DataOut>
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	6023      	str	r3, [r4, #0]
          outputaddr+=4;
 8008f5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f62:	3304      	adds	r3, #4
 8008f64:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8008f68:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 8008f6c:	f000 f9d6 	bl	800931c <CRYP_DataOut>
 8008f70:	4603      	mov	r3, r0
 8008f72:	6023      	str	r3, [r4, #0]
          outputaddr+=4;
 8008f74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f78:	3304      	adds	r3, #4
 8008f7a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
           the CRYP peripheral (please check the device sales type. */
        return(ERROR);
      }
      
      for(loopcounter = 0; ((loopcounter < ILength) && (status != ERROR)); loopcounter+=16)
 8008f7e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008f82:	3310      	adds	r3, #16
 8008f84:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008f88:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8008f8c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008f90:	429a      	cmp	r2, r3
 8008f92:	d204      	bcs.n	8008f9e <CRYP_AES_CCM+0xc12>
 8008f94:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	f47f af6f 	bne.w	8008e7c <CRYP_AES_CCM+0xaf0>
      }
    }
    
    /***************************** final phase ********************************/
    /* Select final phase */
    CRYP_PhaseConfig(CRYP_Phase_Final);
 8008f9e:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8008fa2:	f000 f967 	bl	8009274 <CRYP_PhaseConfig>
    
    /* Enable Crypto processor */
    CRYP_Cmd(ENABLE);
 8008fa6:	2001      	movs	r0, #1
 8008fa8:	f000 f98e 	bl	80092c8 <CRYP_Cmd>
    
    if(CRYP_GetCmdStatus() == DISABLE)
 8008fac:	f000 fb70 	bl	8009690 <CRYP_GetCmdStatus>
 8008fb0:	4603      	mov	r3, r0
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d101      	bne.n	8008fba <CRYP_AES_CCM+0xc2e>
    {
      /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
         the CRYP peripheral (please check the device sales type. */
      return(ERROR);
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	e063      	b.n	8009082 <CRYP_AES_CCM+0xcf6>
    }
    
    ctraddr = (uint32_t)ctr;
 8008fba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008fbe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    /* Write the counter block in the IN FIFO */
    CRYP_DataIn(*(uint32_t*)(ctraddr));
 8008fc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	4618      	mov	r0, r3
 8008fca:	f000 f999 	bl	8009300 <CRYP_DataIn>
    ctraddr+=4;
 8008fce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008fd2:	3304      	adds	r3, #4
 8008fd4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    CRYP_DataIn(*(uint32_t*)(ctraddr));
 8008fd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	4618      	mov	r0, r3
 8008fe0:	f000 f98e 	bl	8009300 <CRYP_DataIn>
    ctraddr+=4;
 8008fe4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008fe8:	3304      	adds	r3, #4
 8008fea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    CRYP_DataIn(*(uint32_t*)(ctraddr));
 8008fee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	f000 f983 	bl	8009300 <CRYP_DataIn>
    ctraddr+=4;
 8008ffa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ffe:	3304      	adds	r3, #4
 8009000:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    /* Reset bit 0 (after 8-bit swap) is equivalent to reset bit 24 (before 8-bit swap) */
    CRYP_DataIn(*(uint32_t*)(ctraddr) & 0xfeffffff);
 8009004:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800900e:	4618      	mov	r0, r3
 8009010:	f000 f976 	bl	8009300 <CRYP_DataIn>
    
    /* Wait until the OFNE flag is reset */
    while(CRYP_GetFlagStatus(CRYP_FLAG_OFNE) == RESET)
 8009014:	bf00      	nop
 8009016:	2004      	movs	r0, #4
 8009018:	f000 fb54 	bl	80096c4 <CRYP_GetFlagStatus>
 800901c:	4603      	mov	r3, r0
 800901e:	2b00      	cmp	r3, #0
 8009020:	d0f9      	beq.n	8009016 <CRYP_AES_CCM+0xc8a>
    {
    }
    
    /* Read the Authentaication TAG (MAC) in the IN FIFO */
    temptag[0] = CRYP_DataOut();
 8009022:	f000 f97b 	bl	800931c <CRYP_DataOut>
 8009026:	4603      	mov	r3, r0
 8009028:	617b      	str	r3, [r7, #20]
    temptag[1] = CRYP_DataOut();
 800902a:	f000 f977 	bl	800931c <CRYP_DataOut>
 800902e:	4603      	mov	r3, r0
 8009030:	61bb      	str	r3, [r7, #24]
    temptag[2] = CRYP_DataOut();
 8009032:	f000 f973 	bl	800931c <CRYP_DataOut>
 8009036:	4603      	mov	r3, r0
 8009038:	61fb      	str	r3, [r7, #28]
    temptag[3] = CRYP_DataOut();
 800903a:	f000 f96f 	bl	800931c <CRYP_DataOut>
 800903e:	4603      	mov	r3, r0
 8009040:	623b      	str	r3, [r7, #32]
  }
  
  /* Copy temporary authentication TAG in user TAG buffer */
  for(loopcounter = 0; (loopcounter < TAGSize); loopcounter++)
 8009042:	2300      	movs	r3, #0
 8009044:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009048:	e010      	b.n	800906c <CRYP_AES_CCM+0xce0>
  {
    /* Set the authentication TAG buffer */
    *((uint8_t*)tagaddr+loopcounter) = *((uint8_t*)temptag+loopcounter);
 800904a:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 800904e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009052:	4413      	add	r3, r2
 8009054:	f107 0114 	add.w	r1, r7, #20
 8009058:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 800905c:	440a      	add	r2, r1
 800905e:	7812      	ldrb	r2, [r2, #0]
 8009060:	701a      	strb	r2, [r3, #0]
    temptag[2] = CRYP_DataOut();
    temptag[3] = CRYP_DataOut();
  }
  
  /* Copy temporary authentication TAG in user TAG buffer */
  for(loopcounter = 0; (loopcounter < TAGSize); loopcounter++)
 8009062:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009066:	3301      	adds	r3, #1
 8009068:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800906c:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8009070:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8009074:	429a      	cmp	r2, r3
 8009076:	d3e8      	bcc.n	800904a <CRYP_AES_CCM+0xcbe>
    /* Set the authentication TAG buffer */
    *((uint8_t*)tagaddr+loopcounter) = *((uint8_t*)temptag+loopcounter);
  }
  
  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 8009078:	2000      	movs	r0, #0
 800907a:	f000 f925 	bl	80092c8 <CRYP_Cmd>

  return status;
 800907e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
}
 8009082:	4618      	mov	r0, r3
 8009084:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8009088:	46bd      	mov	sp, r7
 800908a:	bd90      	pop	{r4, r7, pc}

0800908c <CRYP_DeInit>:
  * @brief  Deinitializes the CRYP peripheral registers to their default reset values
  * @param  None
  * @retval None
  */
void CRYP_DeInit(void)
{
 800908c:	b580      	push	{r7, lr}
 800908e:	af00      	add	r7, sp, #0
  /* Enable CRYP reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_CRYP, ENABLE);
 8009090:	2010      	movs	r0, #16
 8009092:	2101      	movs	r1, #1
 8009094:	f006 fe7c 	bl	800fd90 <RCC_AHB2PeriphResetCmd>

  /* Release CRYP from reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_CRYP, DISABLE);
 8009098:	2010      	movs	r0, #16
 800909a:	2100      	movs	r1, #0
 800909c:	f006 fe78 	bl	800fd90 <RCC_AHB2PeriphResetCmd>
}
 80090a0:	bd80      	pop	{r7, pc}
 80090a2:	bf00      	nop

080090a4 <CRYP_Init>:
  * @param  CRYP_InitStruct: pointer to a CRYP_InitTypeDef structure that contains
  *         the configuration information for the CRYP peripheral.
  * @retval None
  */
void CRYP_Init(CRYP_InitTypeDef* CRYP_InitStruct)
{
 80090a4:	b480      	push	{r7}
 80090a6:	b083      	sub	sp, #12
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
  assert_param(IS_CRYP_ALGOMODE(CRYP_InitStruct->CRYP_AlgoMode));
  assert_param(IS_CRYP_DATATYPE(CRYP_InitStruct->CRYP_DataType));
  assert_param(IS_CRYP_ALGODIR(CRYP_InitStruct->CRYP_AlgoDir));

  /* Select Algorithm mode*/  
  CRYP->CR &= ~CRYP_CR_ALGOMODE;
 80090ac:	4a25      	ldr	r2, [pc, #148]	; (8009144 <CRYP_Init+0xa0>)
 80090ae:	4b25      	ldr	r3, [pc, #148]	; (8009144 <CRYP_Init+0xa0>)
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80090b6:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80090ba:	6013      	str	r3, [r2, #0]
  CRYP->CR |= CRYP_InitStruct->CRYP_AlgoMode;
 80090bc:	4b21      	ldr	r3, [pc, #132]	; (8009144 <CRYP_Init+0xa0>)
 80090be:	4a21      	ldr	r2, [pc, #132]	; (8009144 <CRYP_Init+0xa0>)
 80090c0:	6811      	ldr	r1, [r2, #0]
 80090c2:	687a      	ldr	r2, [r7, #4]
 80090c4:	6852      	ldr	r2, [r2, #4]
 80090c6:	430a      	orrs	r2, r1
 80090c8:	601a      	str	r2, [r3, #0]

  /* Select dataType */ 
  CRYP->CR &= ~CRYP_CR_DATATYPE;
 80090ca:	4b1e      	ldr	r3, [pc, #120]	; (8009144 <CRYP_Init+0xa0>)
 80090cc:	4a1d      	ldr	r2, [pc, #116]	; (8009144 <CRYP_Init+0xa0>)
 80090ce:	6812      	ldr	r2, [r2, #0]
 80090d0:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80090d4:	601a      	str	r2, [r3, #0]
  CRYP->CR |= CRYP_InitStruct->CRYP_DataType;
 80090d6:	4b1b      	ldr	r3, [pc, #108]	; (8009144 <CRYP_Init+0xa0>)
 80090d8:	4a1a      	ldr	r2, [pc, #104]	; (8009144 <CRYP_Init+0xa0>)
 80090da:	6811      	ldr	r1, [r2, #0]
 80090dc:	687a      	ldr	r2, [r7, #4]
 80090de:	6892      	ldr	r2, [r2, #8]
 80090e0:	430a      	orrs	r2, r1
 80090e2:	601a      	str	r2, [r3, #0]

  /* select Key size (used only with AES algorithm) */
  if ((CRYP_InitStruct->CRYP_AlgoMode != CRYP_AlgoMode_TDES_ECB) &&
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	685b      	ldr	r3, [r3, #4]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d018      	beq.n	800911e <CRYP_Init+0x7a>
      (CRYP_InitStruct->CRYP_AlgoMode != CRYP_AlgoMode_TDES_CBC) &&
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	685b      	ldr	r3, [r3, #4]
  /* Select dataType */ 
  CRYP->CR &= ~CRYP_CR_DATATYPE;
  CRYP->CR |= CRYP_InitStruct->CRYP_DataType;

  /* select Key size (used only with AES algorithm) */
  if ((CRYP_InitStruct->CRYP_AlgoMode != CRYP_AlgoMode_TDES_ECB) &&
 80090f0:	2b08      	cmp	r3, #8
 80090f2:	d014      	beq.n	800911e <CRYP_Init+0x7a>
      (CRYP_InitStruct->CRYP_AlgoMode != CRYP_AlgoMode_TDES_CBC) &&
      (CRYP_InitStruct->CRYP_AlgoMode != CRYP_AlgoMode_DES_ECB) &&
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	685b      	ldr	r3, [r3, #4]
  CRYP->CR &= ~CRYP_CR_DATATYPE;
  CRYP->CR |= CRYP_InitStruct->CRYP_DataType;

  /* select Key size (used only with AES algorithm) */
  if ((CRYP_InitStruct->CRYP_AlgoMode != CRYP_AlgoMode_TDES_ECB) &&
      (CRYP_InitStruct->CRYP_AlgoMode != CRYP_AlgoMode_TDES_CBC) &&
 80090f8:	2b10      	cmp	r3, #16
 80090fa:	d010      	beq.n	800911e <CRYP_Init+0x7a>
      (CRYP_InitStruct->CRYP_AlgoMode != CRYP_AlgoMode_DES_ECB) &&
      (CRYP_InitStruct->CRYP_AlgoMode != CRYP_AlgoMode_DES_CBC))
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	685b      	ldr	r3, [r3, #4]
  CRYP->CR |= CRYP_InitStruct->CRYP_DataType;

  /* select Key size (used only with AES algorithm) */
  if ((CRYP_InitStruct->CRYP_AlgoMode != CRYP_AlgoMode_TDES_ECB) &&
      (CRYP_InitStruct->CRYP_AlgoMode != CRYP_AlgoMode_TDES_CBC) &&
      (CRYP_InitStruct->CRYP_AlgoMode != CRYP_AlgoMode_DES_ECB) &&
 8009100:	2b18      	cmp	r3, #24
 8009102:	d00c      	beq.n	800911e <CRYP_Init+0x7a>
      (CRYP_InitStruct->CRYP_AlgoMode != CRYP_AlgoMode_DES_CBC))
  {
    assert_param(IS_CRYP_KEYSIZE(CRYP_InitStruct->CRYP_KeySize));
    CRYP->CR &= ~CRYP_CR_KEYSIZE;
 8009104:	4b0f      	ldr	r3, [pc, #60]	; (8009144 <CRYP_Init+0xa0>)
 8009106:	4a0f      	ldr	r2, [pc, #60]	; (8009144 <CRYP_Init+0xa0>)
 8009108:	6812      	ldr	r2, [r2, #0]
 800910a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800910e:	601a      	str	r2, [r3, #0]
    CRYP->CR |= CRYP_InitStruct->CRYP_KeySize; /* Key size and value must be 
 8009110:	4b0c      	ldr	r3, [pc, #48]	; (8009144 <CRYP_Init+0xa0>)
 8009112:	4a0c      	ldr	r2, [pc, #48]	; (8009144 <CRYP_Init+0xa0>)
 8009114:	6811      	ldr	r1, [r2, #0]
 8009116:	687a      	ldr	r2, [r7, #4]
 8009118:	68d2      	ldr	r2, [r2, #12]
 800911a:	430a      	orrs	r2, r1
 800911c:	601a      	str	r2, [r3, #0]
                                                  configured once the key has 
                                                  been prepared */
  }

  /* Select data Direction */ 
  CRYP->CR &= ~CRYP_CR_ALGODIR;
 800911e:	4b09      	ldr	r3, [pc, #36]	; (8009144 <CRYP_Init+0xa0>)
 8009120:	4a08      	ldr	r2, [pc, #32]	; (8009144 <CRYP_Init+0xa0>)
 8009122:	6812      	ldr	r2, [r2, #0]
 8009124:	f022 0204 	bic.w	r2, r2, #4
 8009128:	601a      	str	r2, [r3, #0]
  CRYP->CR |= CRYP_InitStruct->CRYP_AlgoDir;
 800912a:	4b06      	ldr	r3, [pc, #24]	; (8009144 <CRYP_Init+0xa0>)
 800912c:	4a05      	ldr	r2, [pc, #20]	; (8009144 <CRYP_Init+0xa0>)
 800912e:	6811      	ldr	r1, [r2, #0]
 8009130:	687a      	ldr	r2, [r7, #4]
 8009132:	6812      	ldr	r2, [r2, #0]
 8009134:	430a      	orrs	r2, r1
 8009136:	601a      	str	r2, [r3, #0]
}
 8009138:	370c      	adds	r7, #12
 800913a:	46bd      	mov	sp, r7
 800913c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009140:	4770      	bx	lr
 8009142:	bf00      	nop
 8009144:	50060000 	.word	0x50060000

08009148 <CRYP_StructInit>:
  * @param  CRYP_InitStruct: pointer to a CRYP_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void CRYP_StructInit(CRYP_InitTypeDef* CRYP_InitStruct)
{
 8009148:	b480      	push	{r7}
 800914a:	b083      	sub	sp, #12
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
  /* Initialize the CRYP_AlgoDir member */
  CRYP_InitStruct->CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2200      	movs	r2, #0
 8009154:	601a      	str	r2, [r3, #0]

  /* initialize the CRYP_AlgoMode member */
  CRYP_InitStruct->CRYP_AlgoMode = CRYP_AlgoMode_TDES_ECB;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	2200      	movs	r2, #0
 800915a:	605a      	str	r2, [r3, #4]

  /* initialize the CRYP_DataType member */
  CRYP_InitStruct->CRYP_DataType = CRYP_DataType_32b;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2200      	movs	r2, #0
 8009160:	609a      	str	r2, [r3, #8]
  
  /* Initialize the CRYP_KeySize member */
  CRYP_InitStruct->CRYP_KeySize = CRYP_KeySize_128b;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	2200      	movs	r2, #0
 8009166:	60da      	str	r2, [r3, #12]
}
 8009168:	370c      	adds	r7, #12
 800916a:	46bd      	mov	sp, r7
 800916c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009170:	4770      	bx	lr
 8009172:	bf00      	nop

08009174 <CRYP_KeyInit>:
  * @param  CRYP_KeyInitStruct: pointer to a CRYP_KeyInitTypeDef structure that
  *         contains the configuration information for the CRYP Keys.
  * @retval None
  */
void CRYP_KeyInit(CRYP_KeyInitTypeDef* CRYP_KeyInitStruct)
{
 8009174:	b480      	push	{r7}
 8009176:	b083      	sub	sp, #12
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
  /* Key Initialisation */
  CRYP->K0LR = CRYP_KeyInitStruct->CRYP_Key0Left;
 800917c:	4b12      	ldr	r3, [pc, #72]	; (80091c8 <CRYP_KeyInit+0x54>)
 800917e:	687a      	ldr	r2, [r7, #4]
 8009180:	6812      	ldr	r2, [r2, #0]
 8009182:	621a      	str	r2, [r3, #32]
  CRYP->K0RR = CRYP_KeyInitStruct->CRYP_Key0Right;
 8009184:	4b10      	ldr	r3, [pc, #64]	; (80091c8 <CRYP_KeyInit+0x54>)
 8009186:	687a      	ldr	r2, [r7, #4]
 8009188:	6852      	ldr	r2, [r2, #4]
 800918a:	625a      	str	r2, [r3, #36]	; 0x24
  CRYP->K1LR = CRYP_KeyInitStruct->CRYP_Key1Left;
 800918c:	4b0e      	ldr	r3, [pc, #56]	; (80091c8 <CRYP_KeyInit+0x54>)
 800918e:	687a      	ldr	r2, [r7, #4]
 8009190:	6892      	ldr	r2, [r2, #8]
 8009192:	629a      	str	r2, [r3, #40]	; 0x28
  CRYP->K1RR = CRYP_KeyInitStruct->CRYP_Key1Right;
 8009194:	4b0c      	ldr	r3, [pc, #48]	; (80091c8 <CRYP_KeyInit+0x54>)
 8009196:	687a      	ldr	r2, [r7, #4]
 8009198:	68d2      	ldr	r2, [r2, #12]
 800919a:	62da      	str	r2, [r3, #44]	; 0x2c
  CRYP->K2LR = CRYP_KeyInitStruct->CRYP_Key2Left;
 800919c:	4b0a      	ldr	r3, [pc, #40]	; (80091c8 <CRYP_KeyInit+0x54>)
 800919e:	687a      	ldr	r2, [r7, #4]
 80091a0:	6912      	ldr	r2, [r2, #16]
 80091a2:	631a      	str	r2, [r3, #48]	; 0x30
  CRYP->K2RR = CRYP_KeyInitStruct->CRYP_Key2Right;
 80091a4:	4b08      	ldr	r3, [pc, #32]	; (80091c8 <CRYP_KeyInit+0x54>)
 80091a6:	687a      	ldr	r2, [r7, #4]
 80091a8:	6952      	ldr	r2, [r2, #20]
 80091aa:	635a      	str	r2, [r3, #52]	; 0x34
  CRYP->K3LR = CRYP_KeyInitStruct->CRYP_Key3Left;
 80091ac:	4b06      	ldr	r3, [pc, #24]	; (80091c8 <CRYP_KeyInit+0x54>)
 80091ae:	687a      	ldr	r2, [r7, #4]
 80091b0:	6992      	ldr	r2, [r2, #24]
 80091b2:	639a      	str	r2, [r3, #56]	; 0x38
  CRYP->K3RR = CRYP_KeyInitStruct->CRYP_Key3Right;
 80091b4:	4b04      	ldr	r3, [pc, #16]	; (80091c8 <CRYP_KeyInit+0x54>)
 80091b6:	687a      	ldr	r2, [r7, #4]
 80091b8:	69d2      	ldr	r2, [r2, #28]
 80091ba:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80091bc:	370c      	adds	r7, #12
 80091be:	46bd      	mov	sp, r7
 80091c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c4:	4770      	bx	lr
 80091c6:	bf00      	nop
 80091c8:	50060000 	.word	0x50060000

080091cc <CRYP_KeyStructInit>:
  * @param  CRYP_KeyInitStruct: pointer to a CRYP_KeyInitTypeDef structure 
  *         which will be initialized.
  * @retval None
  */
void CRYP_KeyStructInit(CRYP_KeyInitTypeDef* CRYP_KeyInitStruct)
{
 80091cc:	b480      	push	{r7}
 80091ce:	b083      	sub	sp, #12
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
  CRYP_KeyInitStruct->CRYP_Key0Left  = 0;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2200      	movs	r2, #0
 80091d8:	601a      	str	r2, [r3, #0]
  CRYP_KeyInitStruct->CRYP_Key0Right = 0;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	2200      	movs	r2, #0
 80091de:	605a      	str	r2, [r3, #4]
  CRYP_KeyInitStruct->CRYP_Key1Left  = 0;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	2200      	movs	r2, #0
 80091e4:	609a      	str	r2, [r3, #8]
  CRYP_KeyInitStruct->CRYP_Key1Right = 0;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	2200      	movs	r2, #0
 80091ea:	60da      	str	r2, [r3, #12]
  CRYP_KeyInitStruct->CRYP_Key2Left  = 0;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2200      	movs	r2, #0
 80091f0:	611a      	str	r2, [r3, #16]
  CRYP_KeyInitStruct->CRYP_Key2Right = 0;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	2200      	movs	r2, #0
 80091f6:	615a      	str	r2, [r3, #20]
  CRYP_KeyInitStruct->CRYP_Key3Left  = 0;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2200      	movs	r2, #0
 80091fc:	619a      	str	r2, [r3, #24]
  CRYP_KeyInitStruct->CRYP_Key3Right = 0;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	2200      	movs	r2, #0
 8009202:	61da      	str	r2, [r3, #28]
}
 8009204:	370c      	adds	r7, #12
 8009206:	46bd      	mov	sp, r7
 8009208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920c:	4770      	bx	lr
 800920e:	bf00      	nop

08009210 <CRYP_IVInit>:
  * @param  CRYP_IVInitStruct: pointer to a CRYP_IVInitTypeDef structure that contains
  *         the configuration information for the CRYP Initialization Vectors(IV).
  * @retval None
  */
void CRYP_IVInit(CRYP_IVInitTypeDef* CRYP_IVInitStruct)
{
 8009210:	b480      	push	{r7}
 8009212:	b083      	sub	sp, #12
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
  CRYP->IV0LR = CRYP_IVInitStruct->CRYP_IV0Left;
 8009218:	4b0a      	ldr	r3, [pc, #40]	; (8009244 <CRYP_IVInit+0x34>)
 800921a:	687a      	ldr	r2, [r7, #4]
 800921c:	6812      	ldr	r2, [r2, #0]
 800921e:	641a      	str	r2, [r3, #64]	; 0x40
  CRYP->IV0RR = CRYP_IVInitStruct->CRYP_IV0Right;
 8009220:	4b08      	ldr	r3, [pc, #32]	; (8009244 <CRYP_IVInit+0x34>)
 8009222:	687a      	ldr	r2, [r7, #4]
 8009224:	6852      	ldr	r2, [r2, #4]
 8009226:	645a      	str	r2, [r3, #68]	; 0x44
  CRYP->IV1LR = CRYP_IVInitStruct->CRYP_IV1Left;
 8009228:	4b06      	ldr	r3, [pc, #24]	; (8009244 <CRYP_IVInit+0x34>)
 800922a:	687a      	ldr	r2, [r7, #4]
 800922c:	6892      	ldr	r2, [r2, #8]
 800922e:	649a      	str	r2, [r3, #72]	; 0x48
  CRYP->IV1RR = CRYP_IVInitStruct->CRYP_IV1Right;
 8009230:	4b04      	ldr	r3, [pc, #16]	; (8009244 <CRYP_IVInit+0x34>)
 8009232:	687a      	ldr	r2, [r7, #4]
 8009234:	68d2      	ldr	r2, [r2, #12]
 8009236:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8009238:	370c      	adds	r7, #12
 800923a:	46bd      	mov	sp, r7
 800923c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009240:	4770      	bx	lr
 8009242:	bf00      	nop
 8009244:	50060000 	.word	0x50060000

08009248 <CRYP_IVStructInit>:
  * @param  CRYP_IVInitStruct: pointer to a CRYP_IVInitTypeDef Initialization 
  *         Vectors(IV) structure which will be initialized.
  * @retval None
  */
void CRYP_IVStructInit(CRYP_IVInitTypeDef* CRYP_IVInitStruct)
{
 8009248:	b480      	push	{r7}
 800924a:	b083      	sub	sp, #12
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
  CRYP_IVInitStruct->CRYP_IV0Left  = 0;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2200      	movs	r2, #0
 8009254:	601a      	str	r2, [r3, #0]
  CRYP_IVInitStruct->CRYP_IV0Right = 0;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	2200      	movs	r2, #0
 800925a:	605a      	str	r2, [r3, #4]
  CRYP_IVInitStruct->CRYP_IV1Left  = 0;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2200      	movs	r2, #0
 8009260:	609a      	str	r2, [r3, #8]
  CRYP_IVInitStruct->CRYP_IV1Right = 0;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	2200      	movs	r2, #0
 8009266:	60da      	str	r2, [r3, #12]
}
 8009268:	370c      	adds	r7, #12
 800926a:	46bd      	mov	sp, r7
 800926c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009270:	4770      	bx	lr
 8009272:	bf00      	nop

08009274 <CRYP_PhaseConfig>:
  *            @arg CRYP_Phase_Payload: Payload phase
  *            @arg CRYP_Phase_Final: Final phase 
  * @retval None
  */
void CRYP_PhaseConfig(uint32_t CRYP_Phase)
{ uint32_t tempcr = 0;
 8009274:	b480      	push	{r7}
 8009276:	b085      	sub	sp, #20
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
 800927c:	2300      	movs	r3, #0
 800927e:	60fb      	str	r3, [r7, #12]

  /* Check the parameter */
  assert_param(IS_CRYP_PHASE(CRYP_Phase));

  /* Get the CR register */
  tempcr = CRYP->CR;
 8009280:	4b09      	ldr	r3, [pc, #36]	; (80092a8 <CRYP_PhaseConfig+0x34>)
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	60fb      	str	r3, [r7, #12]
  
  /* Reset the phase configuration bits: GCMP_CCMPH */
  tempcr &= (uint32_t)(~CRYP_CR_GCM_CCMPH);
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800928c:	60fb      	str	r3, [r7, #12]
  /* Set the selected phase */
  tempcr |= (uint32_t)CRYP_Phase;
 800928e:	68fa      	ldr	r2, [r7, #12]
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	4313      	orrs	r3, r2
 8009294:	60fb      	str	r3, [r7, #12]

  /* Set the CR register */ 
  CRYP->CR = tempcr;    
 8009296:	4b04      	ldr	r3, [pc, #16]	; (80092a8 <CRYP_PhaseConfig+0x34>)
 8009298:	68fa      	ldr	r2, [r7, #12]
 800929a:	601a      	str	r2, [r3, #0]
}
 800929c:	3714      	adds	r7, #20
 800929e:	46bd      	mov	sp, r7
 80092a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a4:	4770      	bx	lr
 80092a6:	bf00      	nop
 80092a8:	50060000 	.word	0x50060000

080092ac <CRYP_FIFOFlush>:
  * @note   The FIFOs must be flushed only when BUSY flag is reset.  
  * @param  None
  * @retval None
  */
void CRYP_FIFOFlush(void)
{
 80092ac:	b480      	push	{r7}
 80092ae:	af00      	add	r7, sp, #0
  /* Reset the read and write pointers of the FIFOs */
  CRYP->CR |= CRYP_CR_FFLUSH;
 80092b0:	4b04      	ldr	r3, [pc, #16]	; (80092c4 <CRYP_FIFOFlush+0x18>)
 80092b2:	4a04      	ldr	r2, [pc, #16]	; (80092c4 <CRYP_FIFOFlush+0x18>)
 80092b4:	6812      	ldr	r2, [r2, #0]
 80092b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80092ba:	601a      	str	r2, [r3, #0]
}
 80092bc:	46bd      	mov	sp, r7
 80092be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c2:	4770      	bx	lr
 80092c4:	50060000 	.word	0x50060000

080092c8 <CRYP_Cmd>:
  * @param  NewState: new state of the CRYP peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void CRYP_Cmd(FunctionalState NewState)
{
 80092c8:	b480      	push	{r7}
 80092ca:	b083      	sub	sp, #12
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	4603      	mov	r3, r0
 80092d0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80092d2:	79fb      	ldrb	r3, [r7, #7]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d006      	beq.n	80092e6 <CRYP_Cmd+0x1e>
  {
    /* Enable the Cryptographic processor */
    CRYP->CR |= CRYP_CR_CRYPEN;
 80092d8:	4b08      	ldr	r3, [pc, #32]	; (80092fc <CRYP_Cmd+0x34>)
 80092da:	4a08      	ldr	r2, [pc, #32]	; (80092fc <CRYP_Cmd+0x34>)
 80092dc:	6812      	ldr	r2, [r2, #0]
 80092de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80092e2:	601a      	str	r2, [r3, #0]
 80092e4:	e005      	b.n	80092f2 <CRYP_Cmd+0x2a>
  }
  else
  {
    /* Disable the Cryptographic processor */
    CRYP->CR &= ~CRYP_CR_CRYPEN;
 80092e6:	4b05      	ldr	r3, [pc, #20]	; (80092fc <CRYP_Cmd+0x34>)
 80092e8:	4a04      	ldr	r2, [pc, #16]	; (80092fc <CRYP_Cmd+0x34>)
 80092ea:	6812      	ldr	r2, [r2, #0]
 80092ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80092f0:	601a      	str	r2, [r3, #0]
  }
}
 80092f2:	370c      	adds	r7, #12
 80092f4:	46bd      	mov	sp, r7
 80092f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fa:	4770      	bx	lr
 80092fc:	50060000 	.word	0x50060000

08009300 <CRYP_DataIn>:
  *         the FIFO must be flushed (using CRYP_FIFOFlush() function).  
  * @param  Data: data to write in Data Input register
  * @retval None
  */
void CRYP_DataIn(uint32_t Data)
{
 8009300:	b480      	push	{r7}
 8009302:	b083      	sub	sp, #12
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
  CRYP->DR = Data;
 8009308:	4b03      	ldr	r3, [pc, #12]	; (8009318 <CRYP_DataIn+0x18>)
 800930a:	687a      	ldr	r2, [r7, #4]
 800930c:	609a      	str	r2, [r3, #8]
}
 800930e:	370c      	adds	r7, #12
 8009310:	46bd      	mov	sp, r7
 8009312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009316:	4770      	bx	lr
 8009318:	50060000 	.word	0x50060000

0800931c <CRYP_DataOut>:
  * @brief  Returns the last data entered into the output FIFO.
  * @param  None
  * @retval Last data entered into the output FIFO.
  */
uint32_t CRYP_DataOut(void)
{
 800931c:	b480      	push	{r7}
 800931e:	af00      	add	r7, sp, #0
  return CRYP->DOUT;
 8009320:	4b03      	ldr	r3, [pc, #12]	; (8009330 <CRYP_DataOut+0x14>)
 8009322:	68db      	ldr	r3, [r3, #12]
}
 8009324:	4618      	mov	r0, r3
 8009326:	46bd      	mov	sp, r7
 8009328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932c:	4770      	bx	lr
 800932e:	bf00      	nop
 8009330:	50060000 	.word	0x50060000

08009334 <CRYP_SaveContext>:
  *         contains the configuration information for the CRYP Keys.  
  * @retval None
  */
ErrorStatus CRYP_SaveContext(CRYP_Context* CRYP_ContextSave,
                             CRYP_KeyInitTypeDef* CRYP_KeyInitStruct)
{
 8009334:	b480      	push	{r7}
 8009336:	b087      	sub	sp, #28
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
 800933c:	6039      	str	r1, [r7, #0]
  __IO uint32_t timeout = 0;
 800933e:	2300      	movs	r3, #0
 8009340:	60bb      	str	r3, [r7, #8]
  uint32_t ckeckmask = 0, bitstatus;    
 8009342:	2300      	movs	r3, #0
 8009344:	617b      	str	r3, [r7, #20]
  ErrorStatus status = ERROR;
 8009346:	2300      	movs	r3, #0
 8009348:	74fb      	strb	r3, [r7, #19]

  /* Stop DMA transfers on the IN FIFO by clearing the DIEN bit in the CRYP_DMACR */
  CRYP->DMACR &= ~(uint32_t)CRYP_DMACR_DIEN;
 800934a:	4b5c      	ldr	r3, [pc, #368]	; (80094bc <CRYP_SaveContext+0x188>)
 800934c:	4a5b      	ldr	r2, [pc, #364]	; (80094bc <CRYP_SaveContext+0x188>)
 800934e:	6912      	ldr	r2, [r2, #16]
 8009350:	f022 0201 	bic.w	r2, r2, #1
 8009354:	611a      	str	r2, [r3, #16]
    
  /* Wait until both the IN and OUT FIFOs are empty  
    (IFEM=1 and OFNE=0 in the CRYP_SR register) and the 
     BUSY bit is cleared. */

  if ((CRYP->CR & (uint32_t)(CRYP_CR_ALGOMODE_TDES_ECB | CRYP_CR_ALGOMODE_TDES_CBC)) != (uint32_t)0 )/* TDES */
 8009356:	4b59      	ldr	r3, [pc, #356]	; (80094bc <CRYP_SaveContext+0x188>)
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	f003 0308 	and.w	r3, r3, #8
 800935e:	2b00      	cmp	r3, #0
 8009360:	d002      	beq.n	8009368 <CRYP_SaveContext+0x34>
  { 
    ckeckmask =  CRYP_SR_IFEM | CRYP_SR_BUSY ;
 8009362:	2311      	movs	r3, #17
 8009364:	617b      	str	r3, [r7, #20]
 8009366:	e001      	b.n	800936c <CRYP_SaveContext+0x38>
  }
  else /* AES or DES */
  {
    ckeckmask =  CRYP_SR_IFEM | CRYP_SR_BUSY | CRYP_SR_OFNE;
 8009368:	2315      	movs	r3, #21
 800936a:	617b      	str	r3, [r7, #20]
  }           
   
  do 
  {
    bitstatus = CRYP->SR & ckeckmask;
 800936c:	4b53      	ldr	r3, [pc, #332]	; (80094bc <CRYP_SaveContext+0x188>)
 800936e:	685a      	ldr	r2, [r3, #4]
 8009370:	697b      	ldr	r3, [r7, #20]
 8009372:	4013      	ands	r3, r2
 8009374:	60fb      	str	r3, [r7, #12]
    timeout++;
 8009376:	68bb      	ldr	r3, [r7, #8]
 8009378:	3301      	adds	r3, #1
 800937a:	60bb      	str	r3, [r7, #8]
  }
  while ((timeout != MAX_TIMEOUT) && (bitstatus != CRYP_SR_IFEM));
 800937c:	68ba      	ldr	r2, [r7, #8]
 800937e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009382:	429a      	cmp	r2, r3
 8009384:	d002      	beq.n	800938c <CRYP_SaveContext+0x58>
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	2b01      	cmp	r3, #1
 800938a:	d1ef      	bne.n	800936c <CRYP_SaveContext+0x38>
     
  if ((CRYP->SR & ckeckmask) != CRYP_SR_IFEM)
 800938c:	4b4b      	ldr	r3, [pc, #300]	; (80094bc <CRYP_SaveContext+0x188>)
 800938e:	685a      	ldr	r2, [r3, #4]
 8009390:	697b      	ldr	r3, [r7, #20]
 8009392:	4013      	ands	r3, r2
 8009394:	2b01      	cmp	r3, #1
 8009396:	d002      	beq.n	800939e <CRYP_SaveContext+0x6a>
  {
    status = ERROR;
 8009398:	2300      	movs	r3, #0
 800939a:	74fb      	strb	r3, [r7, #19]
 800939c:	e087      	b.n	80094ae <CRYP_SaveContext+0x17a>
  {      
    /* Stop DMA transfers on the OUT FIFO by 
       - writing the DOEN bit to 0 in the CRYP_DMACR register 
       - and clear the CRYPEN bit. */

    CRYP->DMACR &= ~(uint32_t)CRYP_DMACR_DOEN;
 800939e:	4b47      	ldr	r3, [pc, #284]	; (80094bc <CRYP_SaveContext+0x188>)
 80093a0:	4a46      	ldr	r2, [pc, #280]	; (80094bc <CRYP_SaveContext+0x188>)
 80093a2:	6912      	ldr	r2, [r2, #16]
 80093a4:	f022 0202 	bic.w	r2, r2, #2
 80093a8:	611a      	str	r2, [r3, #16]
    CRYP->CR &= ~(uint32_t)CRYP_CR_CRYPEN;
 80093aa:	4b44      	ldr	r3, [pc, #272]	; (80094bc <CRYP_SaveContext+0x188>)
 80093ac:	4a43      	ldr	r2, [pc, #268]	; (80094bc <CRYP_SaveContext+0x188>)
 80093ae:	6812      	ldr	r2, [r2, #0]
 80093b0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80093b4:	601a      	str	r2, [r3, #0]

    /* Save the current configuration (bit 19, bit[17:16] and bits [9:2] in the CRYP_CR register) */
    CRYP_ContextSave->CR_CurrentConfig  = CRYP->CR & (CRYP_CR_GCM_CCMPH |
 80093b6:	4b41      	ldr	r3, [pc, #260]	; (80094bc <CRYP_SaveContext+0x188>)
 80093b8:	681a      	ldr	r2, [r3, #0]
 80093ba:	4b41      	ldr	r3, [pc, #260]	; (80094c0 <CRYP_SaveContext+0x18c>)
 80093bc:	4013      	ands	r3, r2
 80093be:	687a      	ldr	r2, [r7, #4]
 80093c0:	6013      	str	r3, [r2, #0]
                                                      CRYP_CR_DATATYPE |
                                                      CRYP_CR_ALGOMODE |
                                                      CRYP_CR_ALGODIR);

    /* and, if not in ECB mode, the initialization vectors. */
    CRYP_ContextSave->CRYP_IV0LR = CRYP->IV0LR;
 80093c2:	4b3e      	ldr	r3, [pc, #248]	; (80094bc <CRYP_SaveContext+0x188>)
 80093c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	605a      	str	r2, [r3, #4]
    CRYP_ContextSave->CRYP_IV0RR = CRYP->IV0RR;
 80093ca:	4b3c      	ldr	r3, [pc, #240]	; (80094bc <CRYP_SaveContext+0x188>)
 80093cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	609a      	str	r2, [r3, #8]
    CRYP_ContextSave->CRYP_IV1LR = CRYP->IV1LR;
 80093d2:	4b3a      	ldr	r3, [pc, #232]	; (80094bc <CRYP_SaveContext+0x188>)
 80093d4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	60da      	str	r2, [r3, #12]
    CRYP_ContextSave->CRYP_IV1RR = CRYP->IV1RR;
 80093da:	4b38      	ldr	r3, [pc, #224]	; (80094bc <CRYP_SaveContext+0x188>)
 80093dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	611a      	str	r2, [r3, #16]

    /* save The key value */
    CRYP_ContextSave->CRYP_K0LR = CRYP_KeyInitStruct->CRYP_Key0Left; 
 80093e2:	683b      	ldr	r3, [r7, #0]
 80093e4:	681a      	ldr	r2, [r3, #0]
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	615a      	str	r2, [r3, #20]
    CRYP_ContextSave->CRYP_K0RR = CRYP_KeyInitStruct->CRYP_Key0Right; 
 80093ea:	683b      	ldr	r3, [r7, #0]
 80093ec:	685a      	ldr	r2, [r3, #4]
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	619a      	str	r2, [r3, #24]
    CRYP_ContextSave->CRYP_K1LR = CRYP_KeyInitStruct->CRYP_Key1Left; 
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	689a      	ldr	r2, [r3, #8]
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	61da      	str	r2, [r3, #28]
    CRYP_ContextSave->CRYP_K1RR = CRYP_KeyInitStruct->CRYP_Key1Right; 
 80093fa:	683b      	ldr	r3, [r7, #0]
 80093fc:	68da      	ldr	r2, [r3, #12]
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	621a      	str	r2, [r3, #32]
    CRYP_ContextSave->CRYP_K2LR = CRYP_KeyInitStruct->CRYP_Key2Left; 
 8009402:	683b      	ldr	r3, [r7, #0]
 8009404:	691a      	ldr	r2, [r3, #16]
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	625a      	str	r2, [r3, #36]	; 0x24
    CRYP_ContextSave->CRYP_K2RR = CRYP_KeyInitStruct->CRYP_Key2Right; 
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	695a      	ldr	r2, [r3, #20]
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	629a      	str	r2, [r3, #40]	; 0x28
    CRYP_ContextSave->CRYP_K3LR = CRYP_KeyInitStruct->CRYP_Key3Left; 
 8009412:	683b      	ldr	r3, [r7, #0]
 8009414:	699a      	ldr	r2, [r3, #24]
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	62da      	str	r2, [r3, #44]	; 0x2c
    CRYP_ContextSave->CRYP_K3RR = CRYP_KeyInitStruct->CRYP_Key3Right; 
 800941a:	683b      	ldr	r3, [r7, #0]
 800941c:	69da      	ldr	r2, [r3, #28]
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	631a      	str	r2, [r3, #48]	; 0x30

    /* Save the content of context swap registers */
    CRYP_ContextSave->CRYP_CSGCMCCMR[0] = CRYP->CSGCMCCM0R;
 8009422:	4b26      	ldr	r3, [pc, #152]	; (80094bc <CRYP_SaveContext+0x188>)
 8009424:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	635a      	str	r2, [r3, #52]	; 0x34
    CRYP_ContextSave->CRYP_CSGCMCCMR[1] = CRYP->CSGCMCCM1R;
 800942a:	4b24      	ldr	r3, [pc, #144]	; (80094bc <CRYP_SaveContext+0x188>)
 800942c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	639a      	str	r2, [r3, #56]	; 0x38
    CRYP_ContextSave->CRYP_CSGCMCCMR[2] = CRYP->CSGCMCCM2R;
 8009432:	4b22      	ldr	r3, [pc, #136]	; (80094bc <CRYP_SaveContext+0x188>)
 8009434:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	63da      	str	r2, [r3, #60]	; 0x3c
    CRYP_ContextSave->CRYP_CSGCMCCMR[3] = CRYP->CSGCMCCM3R;
 800943a:	4b20      	ldr	r3, [pc, #128]	; (80094bc <CRYP_SaveContext+0x188>)
 800943c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	641a      	str	r2, [r3, #64]	; 0x40
    CRYP_ContextSave->CRYP_CSGCMCCMR[4] = CRYP->CSGCMCCM4R;
 8009442:	4b1e      	ldr	r3, [pc, #120]	; (80094bc <CRYP_SaveContext+0x188>)
 8009444:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	645a      	str	r2, [r3, #68]	; 0x44
    CRYP_ContextSave->CRYP_CSGCMCCMR[5] = CRYP->CSGCMCCM5R;
 800944a:	4b1c      	ldr	r3, [pc, #112]	; (80094bc <CRYP_SaveContext+0x188>)
 800944c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	649a      	str	r2, [r3, #72]	; 0x48
    CRYP_ContextSave->CRYP_CSGCMCCMR[6] = CRYP->CSGCMCCM6R;
 8009452:	4b1a      	ldr	r3, [pc, #104]	; (80094bc <CRYP_SaveContext+0x188>)
 8009454:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	64da      	str	r2, [r3, #76]	; 0x4c
    CRYP_ContextSave->CRYP_CSGCMCCMR[7] = CRYP->CSGCMCCM7R;
 800945a:	4b18      	ldr	r3, [pc, #96]	; (80094bc <CRYP_SaveContext+0x188>)
 800945c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	651a      	str	r2, [r3, #80]	; 0x50
    
    CRYP_ContextSave->CRYP_CSGCMR[0] = CRYP->CSGCM0R;
 8009462:	4b16      	ldr	r3, [pc, #88]	; (80094bc <CRYP_SaveContext+0x188>)
 8009464:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	655a      	str	r2, [r3, #84]	; 0x54
    CRYP_ContextSave->CRYP_CSGCMR[1] = CRYP->CSGCM1R;
 800946a:	4b14      	ldr	r3, [pc, #80]	; (80094bc <CRYP_SaveContext+0x188>)
 800946c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	659a      	str	r2, [r3, #88]	; 0x58
    CRYP_ContextSave->CRYP_CSGCMR[2] = CRYP->CSGCM2R;
 8009472:	4b12      	ldr	r3, [pc, #72]	; (80094bc <CRYP_SaveContext+0x188>)
 8009474:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	65da      	str	r2, [r3, #92]	; 0x5c
    CRYP_ContextSave->CRYP_CSGCMR[3] = CRYP->CSGCM3R;
 800947a:	4b10      	ldr	r3, [pc, #64]	; (80094bc <CRYP_SaveContext+0x188>)
 800947c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	661a      	str	r2, [r3, #96]	; 0x60
    CRYP_ContextSave->CRYP_CSGCMR[4] = CRYP->CSGCM4R;
 8009482:	4b0e      	ldr	r3, [pc, #56]	; (80094bc <CRYP_SaveContext+0x188>)
 8009484:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	665a      	str	r2, [r3, #100]	; 0x64
    CRYP_ContextSave->CRYP_CSGCMR[5] = CRYP->CSGCM5R;
 800948c:	4b0b      	ldr	r3, [pc, #44]	; (80094bc <CRYP_SaveContext+0x188>)
 800948e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	669a      	str	r2, [r3, #104]	; 0x68
    CRYP_ContextSave->CRYP_CSGCMR[6] = CRYP->CSGCM6R;
 8009496:	4b09      	ldr	r3, [pc, #36]	; (80094bc <CRYP_SaveContext+0x188>)
 8009498:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	66da      	str	r2, [r3, #108]	; 0x6c
    CRYP_ContextSave->CRYP_CSGCMR[7] = CRYP->CSGCM7R;
 80094a0:	4b06      	ldr	r3, [pc, #24]	; (80094bc <CRYP_SaveContext+0x188>)
 80094a2:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	671a      	str	r2, [r3, #112]	; 0x70
    
   /* When needed, save the DMA status (pointers for IN and OUT messages, 
      number of remaining bytes, etc.) */
     
    status = SUCCESS;
 80094aa:	2301      	movs	r3, #1
 80094ac:	74fb      	strb	r3, [r7, #19]
  }

   return status;
 80094ae:	7cfb      	ldrb	r3, [r7, #19]
}
 80094b0:	4618      	mov	r0, r3
 80094b2:	371c      	adds	r7, #28
 80094b4:	46bd      	mov	sp, r7
 80094b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ba:	4770      	bx	lr
 80094bc:	50060000 	.word	0x50060000
 80094c0:	000b03fc 	.word	0x000b03fc

080094c4 <CRYP_RestoreContext>:
  * @note   The data that were saved during context saving must be rewrited into
  *         the IN FIFO.
  * @retval None
  */
void CRYP_RestoreContext(CRYP_Context* CRYP_ContextRestore)  
{
 80094c4:	b480      	push	{r7}
 80094c6:	b083      	sub	sp, #12
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]

  /* Configure the processor with the saved configuration */
  CRYP->CR = CRYP_ContextRestore->CR_CurrentConfig;
 80094cc:	4b41      	ldr	r3, [pc, #260]	; (80095d4 <CRYP_RestoreContext+0x110>)
 80094ce:	687a      	ldr	r2, [r7, #4]
 80094d0:	6812      	ldr	r2, [r2, #0]
 80094d2:	601a      	str	r2, [r3, #0]

  /* restore The key value */
  CRYP->K0LR = CRYP_ContextRestore->CRYP_K0LR; 
 80094d4:	4b3f      	ldr	r3, [pc, #252]	; (80095d4 <CRYP_RestoreContext+0x110>)
 80094d6:	687a      	ldr	r2, [r7, #4]
 80094d8:	6952      	ldr	r2, [r2, #20]
 80094da:	621a      	str	r2, [r3, #32]
  CRYP->K0RR = CRYP_ContextRestore->CRYP_K0RR;
 80094dc:	4b3d      	ldr	r3, [pc, #244]	; (80095d4 <CRYP_RestoreContext+0x110>)
 80094de:	687a      	ldr	r2, [r7, #4]
 80094e0:	6992      	ldr	r2, [r2, #24]
 80094e2:	625a      	str	r2, [r3, #36]	; 0x24
  CRYP->K1LR = CRYP_ContextRestore->CRYP_K1LR;
 80094e4:	4b3b      	ldr	r3, [pc, #236]	; (80095d4 <CRYP_RestoreContext+0x110>)
 80094e6:	687a      	ldr	r2, [r7, #4]
 80094e8:	69d2      	ldr	r2, [r2, #28]
 80094ea:	629a      	str	r2, [r3, #40]	; 0x28
  CRYP->K1RR = CRYP_ContextRestore->CRYP_K1RR;
 80094ec:	4b39      	ldr	r3, [pc, #228]	; (80095d4 <CRYP_RestoreContext+0x110>)
 80094ee:	687a      	ldr	r2, [r7, #4]
 80094f0:	6a12      	ldr	r2, [r2, #32]
 80094f2:	62da      	str	r2, [r3, #44]	; 0x2c
  CRYP->K2LR = CRYP_ContextRestore->CRYP_K2LR;
 80094f4:	4b37      	ldr	r3, [pc, #220]	; (80095d4 <CRYP_RestoreContext+0x110>)
 80094f6:	687a      	ldr	r2, [r7, #4]
 80094f8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80094fa:	631a      	str	r2, [r3, #48]	; 0x30
  CRYP->K2RR = CRYP_ContextRestore->CRYP_K2RR;
 80094fc:	4b35      	ldr	r3, [pc, #212]	; (80095d4 <CRYP_RestoreContext+0x110>)
 80094fe:	687a      	ldr	r2, [r7, #4]
 8009500:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8009502:	635a      	str	r2, [r3, #52]	; 0x34
  CRYP->K3LR = CRYP_ContextRestore->CRYP_K3LR;
 8009504:	4b33      	ldr	r3, [pc, #204]	; (80095d4 <CRYP_RestoreContext+0x110>)
 8009506:	687a      	ldr	r2, [r7, #4]
 8009508:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800950a:	639a      	str	r2, [r3, #56]	; 0x38
  CRYP->K3RR = CRYP_ContextRestore->CRYP_K3RR;
 800950c:	4b31      	ldr	r3, [pc, #196]	; (80095d4 <CRYP_RestoreContext+0x110>)
 800950e:	687a      	ldr	r2, [r7, #4]
 8009510:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8009512:	63da      	str	r2, [r3, #60]	; 0x3c

  /* and the initialization vectors. */
  CRYP->IV0LR = CRYP_ContextRestore->CRYP_IV0LR;
 8009514:	4b2f      	ldr	r3, [pc, #188]	; (80095d4 <CRYP_RestoreContext+0x110>)
 8009516:	687a      	ldr	r2, [r7, #4]
 8009518:	6852      	ldr	r2, [r2, #4]
 800951a:	641a      	str	r2, [r3, #64]	; 0x40
  CRYP->IV0RR = CRYP_ContextRestore->CRYP_IV0RR;
 800951c:	4b2d      	ldr	r3, [pc, #180]	; (80095d4 <CRYP_RestoreContext+0x110>)
 800951e:	687a      	ldr	r2, [r7, #4]
 8009520:	6892      	ldr	r2, [r2, #8]
 8009522:	645a      	str	r2, [r3, #68]	; 0x44
  CRYP->IV1LR = CRYP_ContextRestore->CRYP_IV1LR;
 8009524:	4b2b      	ldr	r3, [pc, #172]	; (80095d4 <CRYP_RestoreContext+0x110>)
 8009526:	687a      	ldr	r2, [r7, #4]
 8009528:	68d2      	ldr	r2, [r2, #12]
 800952a:	649a      	str	r2, [r3, #72]	; 0x48
  CRYP->IV1RR = CRYP_ContextRestore->CRYP_IV1RR;
 800952c:	4b29      	ldr	r3, [pc, #164]	; (80095d4 <CRYP_RestoreContext+0x110>)
 800952e:	687a      	ldr	r2, [r7, #4]
 8009530:	6912      	ldr	r2, [r2, #16]
 8009532:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Restore the content of context swap registers */
  CRYP->CSGCMCCM0R = CRYP_ContextRestore->CRYP_CSGCMCCMR[0];
 8009534:	4b27      	ldr	r3, [pc, #156]	; (80095d4 <CRYP_RestoreContext+0x110>)
 8009536:	687a      	ldr	r2, [r7, #4]
 8009538:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800953a:	651a      	str	r2, [r3, #80]	; 0x50
  CRYP->CSGCMCCM1R = CRYP_ContextRestore->CRYP_CSGCMCCMR[1];
 800953c:	4b25      	ldr	r3, [pc, #148]	; (80095d4 <CRYP_RestoreContext+0x110>)
 800953e:	687a      	ldr	r2, [r7, #4]
 8009540:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009542:	655a      	str	r2, [r3, #84]	; 0x54
  CRYP->CSGCMCCM2R = CRYP_ContextRestore->CRYP_CSGCMCCMR[2];
 8009544:	4b23      	ldr	r3, [pc, #140]	; (80095d4 <CRYP_RestoreContext+0x110>)
 8009546:	687a      	ldr	r2, [r7, #4]
 8009548:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800954a:	659a      	str	r2, [r3, #88]	; 0x58
  CRYP->CSGCMCCM3R = CRYP_ContextRestore->CRYP_CSGCMCCMR[3];
 800954c:	4b21      	ldr	r3, [pc, #132]	; (80095d4 <CRYP_RestoreContext+0x110>)
 800954e:	687a      	ldr	r2, [r7, #4]
 8009550:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8009552:	65da      	str	r2, [r3, #92]	; 0x5c
  CRYP->CSGCMCCM4R = CRYP_ContextRestore->CRYP_CSGCMCCMR[4];
 8009554:	4b1f      	ldr	r3, [pc, #124]	; (80095d4 <CRYP_RestoreContext+0x110>)
 8009556:	687a      	ldr	r2, [r7, #4]
 8009558:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800955a:	661a      	str	r2, [r3, #96]	; 0x60
  CRYP->CSGCMCCM5R = CRYP_ContextRestore->CRYP_CSGCMCCMR[5];
 800955c:	4b1d      	ldr	r3, [pc, #116]	; (80095d4 <CRYP_RestoreContext+0x110>)
 800955e:	687a      	ldr	r2, [r7, #4]
 8009560:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009562:	665a      	str	r2, [r3, #100]	; 0x64
  CRYP->CSGCMCCM6R = CRYP_ContextRestore->CRYP_CSGCMCCMR[6];
 8009564:	4b1b      	ldr	r3, [pc, #108]	; (80095d4 <CRYP_RestoreContext+0x110>)
 8009566:	687a      	ldr	r2, [r7, #4]
 8009568:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800956a:	669a      	str	r2, [r3, #104]	; 0x68
  CRYP->CSGCMCCM7R = CRYP_ContextRestore->CRYP_CSGCMCCMR[7];
 800956c:	4b19      	ldr	r3, [pc, #100]	; (80095d4 <CRYP_RestoreContext+0x110>)
 800956e:	687a      	ldr	r2, [r7, #4]
 8009570:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8009572:	66da      	str	r2, [r3, #108]	; 0x6c
  
  CRYP->CSGCM0R = CRYP_ContextRestore->CRYP_CSGCMR[0];
 8009574:	4b17      	ldr	r3, [pc, #92]	; (80095d4 <CRYP_RestoreContext+0x110>)
 8009576:	687a      	ldr	r2, [r7, #4]
 8009578:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800957a:	671a      	str	r2, [r3, #112]	; 0x70
  CRYP->CSGCM1R = CRYP_ContextRestore->CRYP_CSGCMR[1];
 800957c:	4b15      	ldr	r3, [pc, #84]	; (80095d4 <CRYP_RestoreContext+0x110>)
 800957e:	687a      	ldr	r2, [r7, #4]
 8009580:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8009582:	675a      	str	r2, [r3, #116]	; 0x74
  CRYP->CSGCM2R = CRYP_ContextRestore->CRYP_CSGCMR[2];
 8009584:	4b13      	ldr	r3, [pc, #76]	; (80095d4 <CRYP_RestoreContext+0x110>)
 8009586:	687a      	ldr	r2, [r7, #4]
 8009588:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800958a:	679a      	str	r2, [r3, #120]	; 0x78
  CRYP->CSGCM3R = CRYP_ContextRestore->CRYP_CSGCMR[3];
 800958c:	4b11      	ldr	r3, [pc, #68]	; (80095d4 <CRYP_RestoreContext+0x110>)
 800958e:	687a      	ldr	r2, [r7, #4]
 8009590:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8009592:	67da      	str	r2, [r3, #124]	; 0x7c
  CRYP->CSGCM4R = CRYP_ContextRestore->CRYP_CSGCMR[4];
 8009594:	4b0f      	ldr	r3, [pc, #60]	; (80095d4 <CRYP_RestoreContext+0x110>)
 8009596:	687a      	ldr	r2, [r7, #4]
 8009598:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800959a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  CRYP->CSGCM5R = CRYP_ContextRestore->CRYP_CSGCMR[5];
 800959e:	4b0d      	ldr	r3, [pc, #52]	; (80095d4 <CRYP_RestoreContext+0x110>)
 80095a0:	687a      	ldr	r2, [r7, #4]
 80095a2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80095a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  CRYP->CSGCM6R = CRYP_ContextRestore->CRYP_CSGCMR[6];
 80095a8:	4b0a      	ldr	r3, [pc, #40]	; (80095d4 <CRYP_RestoreContext+0x110>)
 80095aa:	687a      	ldr	r2, [r7, #4]
 80095ac:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80095ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  CRYP->CSGCM7R = CRYP_ContextRestore->CRYP_CSGCMR[7];
 80095b2:	4b08      	ldr	r3, [pc, #32]	; (80095d4 <CRYP_RestoreContext+0x110>)
 80095b4:	687a      	ldr	r2, [r7, #4]
 80095b6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80095b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  
  /* Enable the cryptographic processor */
  CRYP->CR |= CRYP_CR_CRYPEN;
 80095bc:	4b05      	ldr	r3, [pc, #20]	; (80095d4 <CRYP_RestoreContext+0x110>)
 80095be:	4a05      	ldr	r2, [pc, #20]	; (80095d4 <CRYP_RestoreContext+0x110>)
 80095c0:	6812      	ldr	r2, [r2, #0]
 80095c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80095c6:	601a      	str	r2, [r3, #0]
}
 80095c8:	370c      	adds	r7, #12
 80095ca:	46bd      	mov	sp, r7
 80095cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d0:	4770      	bx	lr
 80095d2:	bf00      	nop
 80095d4:	50060000 	.word	0x50060000

080095d8 <CRYP_DMACmd>:
  * @param  NewState: new state of the selected CRYP DMA transfer request.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void CRYP_DMACmd(uint8_t CRYP_DMAReq, FunctionalState NewState)
{
 80095d8:	b480      	push	{r7}
 80095da:	b083      	sub	sp, #12
 80095dc:	af00      	add	r7, sp, #0
 80095de:	4602      	mov	r2, r0
 80095e0:	460b      	mov	r3, r1
 80095e2:	71fa      	strb	r2, [r7, #7]
 80095e4:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_CRYP_DMAREQ(CRYP_DMAReq));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80095e6:	79bb      	ldrb	r3, [r7, #6]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d006      	beq.n	80095fa <CRYP_DMACmd+0x22>
  {
    /* Enable the selected CRYP DMA request */
    CRYP->DMACR |= CRYP_DMAReq;
 80095ec:	4b09      	ldr	r3, [pc, #36]	; (8009614 <CRYP_DMACmd+0x3c>)
 80095ee:	4a09      	ldr	r2, [pc, #36]	; (8009614 <CRYP_DMACmd+0x3c>)
 80095f0:	6911      	ldr	r1, [r2, #16]
 80095f2:	79fa      	ldrb	r2, [r7, #7]
 80095f4:	430a      	orrs	r2, r1
 80095f6:	611a      	str	r2, [r3, #16]
 80095f8:	e007      	b.n	800960a <CRYP_DMACmd+0x32>
  }
  else
  {
    /* Disable the selected CRYP DMA request */
    CRYP->DMACR &= (uint8_t)~CRYP_DMAReq;
 80095fa:	4b06      	ldr	r3, [pc, #24]	; (8009614 <CRYP_DMACmd+0x3c>)
 80095fc:	4a05      	ldr	r2, [pc, #20]	; (8009614 <CRYP_DMACmd+0x3c>)
 80095fe:	6911      	ldr	r1, [r2, #16]
 8009600:	79fa      	ldrb	r2, [r7, #7]
 8009602:	43d2      	mvns	r2, r2
 8009604:	b2d2      	uxtb	r2, r2
 8009606:	400a      	ands	r2, r1
 8009608:	611a      	str	r2, [r3, #16]
  }
}
 800960a:	370c      	adds	r7, #12
 800960c:	46bd      	mov	sp, r7
 800960e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009612:	4770      	bx	lr
 8009614:	50060000 	.word	0x50060000

08009618 <CRYP_ITConfig>:
  * @param  NewState: new state of the specified CRYP interrupt.
  *           This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void CRYP_ITConfig(uint8_t CRYP_IT, FunctionalState NewState)
{
 8009618:	b480      	push	{r7}
 800961a:	b083      	sub	sp, #12
 800961c:	af00      	add	r7, sp, #0
 800961e:	4602      	mov	r2, r0
 8009620:	460b      	mov	r3, r1
 8009622:	71fa      	strb	r2, [r7, #7]
 8009624:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_CRYP_CONFIG_IT(CRYP_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8009626:	79bb      	ldrb	r3, [r7, #6]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d006      	beq.n	800963a <CRYP_ITConfig+0x22>
  {
    /* Enable the selected CRYP interrupt */
    CRYP->IMSCR |= CRYP_IT;
 800962c:	4b09      	ldr	r3, [pc, #36]	; (8009654 <CRYP_ITConfig+0x3c>)
 800962e:	4a09      	ldr	r2, [pc, #36]	; (8009654 <CRYP_ITConfig+0x3c>)
 8009630:	6951      	ldr	r1, [r2, #20]
 8009632:	79fa      	ldrb	r2, [r7, #7]
 8009634:	430a      	orrs	r2, r1
 8009636:	615a      	str	r2, [r3, #20]
 8009638:	e007      	b.n	800964a <CRYP_ITConfig+0x32>
  }
  else
  {
    /* Disable the selected CRYP interrupt */
    CRYP->IMSCR &= (uint8_t)~CRYP_IT;
 800963a:	4b06      	ldr	r3, [pc, #24]	; (8009654 <CRYP_ITConfig+0x3c>)
 800963c:	4a05      	ldr	r2, [pc, #20]	; (8009654 <CRYP_ITConfig+0x3c>)
 800963e:	6951      	ldr	r1, [r2, #20]
 8009640:	79fa      	ldrb	r2, [r7, #7]
 8009642:	43d2      	mvns	r2, r2
 8009644:	b2d2      	uxtb	r2, r2
 8009646:	400a      	ands	r2, r1
 8009648:	615a      	str	r2, [r3, #20]
  }
}
 800964a:	370c      	adds	r7, #12
 800964c:	46bd      	mov	sp, r7
 800964e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009652:	4770      	bx	lr
 8009654:	50060000 	.word	0x50060000

08009658 <CRYP_GetITStatus>:
  *            @arg CRYP_IT_INI: Input FIFO interrupt
  *            @arg CRYP_IT_OUTI: Output FIFO interrupt
  * @retval The new state of CRYP_IT (SET or RESET).
  */
ITStatus CRYP_GetITStatus(uint8_t CRYP_IT)
{
 8009658:	b480      	push	{r7}
 800965a:	b085      	sub	sp, #20
 800965c:	af00      	add	r7, sp, #0
 800965e:	4603      	mov	r3, r0
 8009660:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
 8009662:	2300      	movs	r3, #0
 8009664:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_CRYP_GET_IT(CRYP_IT));

  /* Check the status of the specified CRYP interrupt */
  if ((CRYP->MISR &  CRYP_IT) != (uint8_t)RESET)
 8009666:	4b09      	ldr	r3, [pc, #36]	; (800968c <CRYP_GetITStatus+0x34>)
 8009668:	69da      	ldr	r2, [r3, #28]
 800966a:	79fb      	ldrb	r3, [r7, #7]
 800966c:	4013      	ands	r3, r2
 800966e:	2b00      	cmp	r3, #0
 8009670:	d002      	beq.n	8009678 <CRYP_GetITStatus+0x20>
  {
    /* CRYP_IT is set */
    bitstatus = SET;
 8009672:	2301      	movs	r3, #1
 8009674:	73fb      	strb	r3, [r7, #15]
 8009676:	e001      	b.n	800967c <CRYP_GetITStatus+0x24>
  }
  else
  {
    /* CRYP_IT is reset */
    bitstatus = RESET;
 8009678:	2300      	movs	r3, #0
 800967a:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the CRYP_IT status */
  return bitstatus;
 800967c:	7bfb      	ldrb	r3, [r7, #15]
}
 800967e:	4618      	mov	r0, r3
 8009680:	3714      	adds	r7, #20
 8009682:	46bd      	mov	sp, r7
 8009684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009688:	4770      	bx	lr
 800968a:	bf00      	nop
 800968c:	50060000 	.word	0x50060000

08009690 <CRYP_GetCmdStatus>:
  * @brief  Returns whether CRYP peripheral is enabled or disabled.
  * @param  none.
  * @retval Current state of the CRYP peripheral (ENABLE or DISABLE).
  */
FunctionalState CRYP_GetCmdStatus(void)
{
 8009690:	b480      	push	{r7}
 8009692:	b083      	sub	sp, #12
 8009694:	af00      	add	r7, sp, #0
  FunctionalState state = DISABLE;
 8009696:	2300      	movs	r3, #0
 8009698:	71fb      	strb	r3, [r7, #7]

  if ((CRYP->CR & CRYP_CR_CRYPEN) != 0)
 800969a:	4b09      	ldr	r3, [pc, #36]	; (80096c0 <CRYP_GetCmdStatus+0x30>)
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d002      	beq.n	80096ac <CRYP_GetCmdStatus+0x1c>
  {
    /* CRYPEN bit is set */
    state = ENABLE;
 80096a6:	2301      	movs	r3, #1
 80096a8:	71fb      	strb	r3, [r7, #7]
 80096aa:	e001      	b.n	80096b0 <CRYP_GetCmdStatus+0x20>
  }
  else
  {
    /* CRYPEN bit is reset */
    state = DISABLE;
 80096ac:	2300      	movs	r3, #0
 80096ae:	71fb      	strb	r3, [r7, #7]
  }
  return state;
 80096b0:	79fb      	ldrb	r3, [r7, #7]
}
 80096b2:	4618      	mov	r0, r3
 80096b4:	370c      	adds	r7, #12
 80096b6:	46bd      	mov	sp, r7
 80096b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096bc:	4770      	bx	lr
 80096be:	bf00      	nop
 80096c0:	50060000 	.word	0x50060000

080096c4 <CRYP_GetFlagStatus>:
  *            @arg CRYP_FLAG_OUTRIS: Output FIFO raw interrupt flag.
  *            @arg CRYP_FLAG_INRIS: Input FIFO raw interrupt flag.
  * @retval The new state of CRYP_FLAG (SET or RESET).
  */
FlagStatus CRYP_GetFlagStatus(uint8_t CRYP_FLAG)
{
 80096c4:	b480      	push	{r7}
 80096c6:	b085      	sub	sp, #20
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	4603      	mov	r3, r0
 80096cc:	71fb      	strb	r3, [r7, #7]
  FlagStatus bitstatus = RESET;
 80096ce:	2300      	movs	r3, #0
 80096d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tempreg = 0;
 80096d2:	2300      	movs	r3, #0
 80096d4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_CRYP_GET_FLAG(CRYP_FLAG));

  /* check if the FLAG is in RISR register */
  if ((CRYP_FLAG & FLAG_MASK) != 0x00) 
 80096d6:	79fb      	ldrb	r3, [r7, #7]
 80096d8:	f003 0320 	and.w	r3, r3, #32
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d003      	beq.n	80096e8 <CRYP_GetFlagStatus+0x24>
  {
    tempreg = CRYP->RISR;
 80096e0:	4b0b      	ldr	r3, [pc, #44]	; (8009710 <CRYP_GetFlagStatus+0x4c>)
 80096e2:	699b      	ldr	r3, [r3, #24]
 80096e4:	60bb      	str	r3, [r7, #8]
 80096e6:	e002      	b.n	80096ee <CRYP_GetFlagStatus+0x2a>
  }
  else  /* The FLAG is in SR register */
  {
    tempreg = CRYP->SR;
 80096e8:	4b09      	ldr	r3, [pc, #36]	; (8009710 <CRYP_GetFlagStatus+0x4c>)
 80096ea:	685b      	ldr	r3, [r3, #4]
 80096ec:	60bb      	str	r3, [r7, #8]
  }


  /* Check the status of the specified CRYP flag */
  if ((tempreg & CRYP_FLAG ) != (uint8_t)RESET)
 80096ee:	79fa      	ldrb	r2, [r7, #7]
 80096f0:	68bb      	ldr	r3, [r7, #8]
 80096f2:	4013      	ands	r3, r2
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d002      	beq.n	80096fe <CRYP_GetFlagStatus+0x3a>
  {
    /* CRYP_FLAG is set */
    bitstatus = SET;
 80096f8:	2301      	movs	r3, #1
 80096fa:	73fb      	strb	r3, [r7, #15]
 80096fc:	e001      	b.n	8009702 <CRYP_GetFlagStatus+0x3e>
  }
  else
  {
    /* CRYP_FLAG is reset */
    bitstatus = RESET;
 80096fe:	2300      	movs	r3, #0
 8009700:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the CRYP_FLAG status */
  return  bitstatus;
 8009702:	7bfb      	ldrb	r3, [r7, #15]
}
 8009704:	4618      	mov	r0, r3
 8009706:	3714      	adds	r7, #20
 8009708:	46bd      	mov	sp, r7
 800970a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970e:	4770      	bx	lr
 8009710:	50060000 	.word	0x50060000

08009714 <CRYP_DES_ECB>:
  *          - SUCCESS: Operation done
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_DES_ECB(uint8_t Mode, uint8_t Key[8], uint8_t *Input, 
                         uint32_t Ilength, uint8_t *Output)
{
 8009714:	b590      	push	{r4, r7, lr}
 8009716:	b09b      	sub	sp, #108	; 0x6c
 8009718:	af00      	add	r7, sp, #0
 800971a:	60b9      	str	r1, [r7, #8]
 800971c:	607a      	str	r2, [r7, #4]
 800971e:	603b      	str	r3, [r7, #0]
 8009720:	4603      	mov	r3, r0
 8009722:	73fb      	strb	r3, [r7, #15]
  CRYP_InitTypeDef DES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef DES_CRYP_KeyInitStructure;
  __IO uint32_t counter = 0;
 8009724:	2300      	movs	r3, #0
 8009726:	617b      	str	r3, [r7, #20]
  uint32_t busystatus = 0;
 8009728:	2300      	movs	r3, #0
 800972a:	657b      	str	r3, [r7, #84]	; 0x54
  ErrorStatus status = SUCCESS;
 800972c:	2301      	movs	r3, #1
 800972e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint32_t keyaddr    = (uint32_t)Key;
 8009732:	68bb      	ldr	r3, [r7, #8]
 8009734:	653b      	str	r3, [r7, #80]	; 0x50
  uint32_t inputaddr  = (uint32_t)Input;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	663b      	str	r3, [r7, #96]	; 0x60
  uint32_t outputaddr = (uint32_t)Output;
 800973a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800973c:	65fb      	str	r3, [r7, #92]	; 0x5c
  uint32_t i = 0;
 800973e:	2300      	movs	r3, #0
 8009740:	65bb      	str	r3, [r7, #88]	; 0x58

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&DES_CRYP_KeyInitStructure);
 8009742:	f107 0318 	add.w	r3, r7, #24
 8009746:	4618      	mov	r0, r3
 8009748:	f7ff fd40 	bl	80091cc <CRYP_KeyStructInit>

  /* Crypto Init for Encryption process */
  if( Mode == MODE_ENCRYPT ) /* DES encryption */
 800974c:	7bfb      	ldrb	r3, [r7, #15]
 800974e:	2b01      	cmp	r3, #1
 8009750:	d102      	bne.n	8009758 <CRYP_DES_ECB+0x44>
  {
     DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
 8009752:	2300      	movs	r3, #0
 8009754:	63bb      	str	r3, [r7, #56]	; 0x38
 8009756:	e001      	b.n	800975c <CRYP_DES_ECB+0x48>
  }
  else/* if( Mode == MODE_DECRYPT )*/ /* DES decryption */
  {      
     DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Decrypt;
 8009758:	2304      	movs	r3, #4
 800975a:	63bb      	str	r3, [r7, #56]	; 0x38
  }

  DES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_DES_ECB;
 800975c:	2310      	movs	r3, #16
 800975e:	63fb      	str	r3, [r7, #60]	; 0x3c
  DES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 8009760:	2380      	movs	r3, #128	; 0x80
 8009762:	643b      	str	r3, [r7, #64]	; 0x40
  CRYP_Init(&DES_CRYP_InitStructure);
 8009764:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009768:	4618      	mov	r0, r3
 800976a:	f7ff fc9b 	bl	80090a4 <CRYP_Init>

  /* Key Initialisation */
  DES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 800976e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009774:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009776:	ba1b      	rev	r3, r3
 8009778:	623b      	str	r3, [r7, #32]
  keyaddr+=4;
 800977a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800977c:	3304      	adds	r3, #4
 800977e:	653b      	str	r3, [r7, #80]	; 0x50
  DES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 8009780:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	64bb      	str	r3, [r7, #72]	; 0x48
 8009786:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009788:	ba1b      	rev	r3, r3
 800978a:	627b      	str	r3, [r7, #36]	; 0x24
  CRYP_KeyInit(& DES_CRYP_KeyInitStructure);
 800978c:	f107 0318 	add.w	r3, r7, #24
 8009790:	4618      	mov	r0, r3
 8009792:	f7ff fcef 	bl	8009174 <CRYP_KeyInit>

  /* Flush IN/OUT FIFO */
  CRYP_FIFOFlush();
 8009796:	f7ff fd89 	bl	80092ac <CRYP_FIFOFlush>

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 800979a:	2001      	movs	r0, #1
 800979c:	f7ff fd94 	bl	80092c8 <CRYP_Cmd>

  if(CRYP_GetCmdStatus() == DISABLE)
 80097a0:	f7ff ff76 	bl	8009690 <CRYP_GetCmdStatus>
 80097a4:	4603      	mov	r3, r0
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d101      	bne.n	80097ae <CRYP_DES_ECB+0x9a>
  {
    /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
       the CRYP peripheral (please check the device sales type. */
    return(ERROR);
 80097aa:	2300      	movs	r3, #0
 80097ac:	e04a      	b.n	8009844 <CRYP_DES_ECB+0x130>
  }
  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 80097ae:	2300      	movs	r3, #0
 80097b0:	65bb      	str	r3, [r7, #88]	; 0x58
 80097b2:	e03a      	b.n	800982a <CRYP_DES_ECB+0x116>
  {

    /* Write the Input block in the Input FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 80097b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	4618      	mov	r0, r3
 80097ba:	f7ff fda1 	bl	8009300 <CRYP_DataIn>
    inputaddr+=4;
 80097be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80097c0:	3304      	adds	r3, #4
 80097c2:	663b      	str	r3, [r7, #96]	; 0x60
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 80097c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	4618      	mov	r0, r3
 80097ca:	f7ff fd99 	bl	8009300 <CRYP_DataIn>
    inputaddr+=4;
 80097ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80097d0:	3304      	adds	r3, #4
 80097d2:	663b      	str	r3, [r7, #96]	; 0x60

/* Wait until the complete message has been processed */
    counter = 0;
 80097d4:	2300      	movs	r3, #0
 80097d6:	617b      	str	r3, [r7, #20]
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 80097d8:	2010      	movs	r0, #16
 80097da:	f7ff ff73 	bl	80096c4 <CRYP_GetFlagStatus>
 80097de:	4603      	mov	r3, r0
 80097e0:	657b      	str	r3, [r7, #84]	; 0x54
      counter++;
 80097e2:	697b      	ldr	r3, [r7, #20]
 80097e4:	3301      	adds	r3, #1
 80097e6:	617b      	str	r3, [r7, #20]
    }while ((counter != DESBUSY_TIMEOUT) && (busystatus != RESET));
 80097e8:	697b      	ldr	r3, [r7, #20]
 80097ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80097ee:	d002      	beq.n	80097f6 <CRYP_DES_ECB+0xe2>
 80097f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d1f0      	bne.n	80097d8 <CRYP_DES_ECB+0xc4>

    if (busystatus != RESET)
 80097f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d003      	beq.n	8009804 <CRYP_DES_ECB+0xf0>
   {
       status = ERROR;
 80097fc:	2300      	movs	r3, #0
 80097fe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8009802:	e00f      	b.n	8009824 <CRYP_DES_ECB+0x110>
    }
    else
    {

      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8009804:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 8009806:	f7ff fd89 	bl	800931c <CRYP_DataOut>
 800980a:	4603      	mov	r3, r0
 800980c:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 800980e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009810:	3304      	adds	r3, #4
 8009812:	65fb      	str	r3, [r7, #92]	; 0x5c
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8009814:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 8009816:	f7ff fd81 	bl	800931c <CRYP_DataOut>
 800981a:	4603      	mov	r3, r0
 800981c:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 800981e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009820:	3304      	adds	r3, #4
 8009822:	65fb      	str	r3, [r7, #92]	; 0x5c
  {
    /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
       the CRYP peripheral (please check the device sales type. */
    return(ERROR);
  }
  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 8009824:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009826:	3308      	adds	r3, #8
 8009828:	65bb      	str	r3, [r7, #88]	; 0x58
 800982a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800982c:	683b      	ldr	r3, [r7, #0]
 800982e:	429a      	cmp	r2, r3
 8009830:	d203      	bcs.n	800983a <CRYP_DES_ECB+0x126>
 8009832:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009836:	2b00      	cmp	r3, #0
 8009838:	d1bc      	bne.n	80097b4 <CRYP_DES_ECB+0xa0>
      outputaddr+=4;
    }
  }

  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 800983a:	2000      	movs	r0, #0
 800983c:	f7ff fd44 	bl	80092c8 <CRYP_Cmd>

  return status; 
 8009840:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8009844:	4618      	mov	r0, r3
 8009846:	376c      	adds	r7, #108	; 0x6c
 8009848:	46bd      	mov	sp, r7
 800984a:	bd90      	pop	{r4, r7, pc}

0800984c <CRYP_DES_CBC>:
  *          - SUCCESS: Operation done
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_DES_CBC(uint8_t Mode, uint8_t Key[8], uint8_t InitVectors[8],
                         uint8_t *Input, uint32_t Ilength, uint8_t *Output)
{
 800984c:	b590      	push	{r4, r7, lr}
 800984e:	b0a1      	sub	sp, #132	; 0x84
 8009850:	af00      	add	r7, sp, #0
 8009852:	60b9      	str	r1, [r7, #8]
 8009854:	607a      	str	r2, [r7, #4]
 8009856:	603b      	str	r3, [r7, #0]
 8009858:	4603      	mov	r3, r0
 800985a:	73fb      	strb	r3, [r7, #15]
  CRYP_InitTypeDef DES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef DES_CRYP_KeyInitStructure;
  CRYP_IVInitTypeDef DES_CRYP_IVInitStructure;
  __IO uint32_t counter = 0;
 800985c:	2300      	movs	r3, #0
 800985e:	613b      	str	r3, [r7, #16]
  uint32_t busystatus = 0;
 8009860:	2300      	movs	r3, #0
 8009862:	66fb      	str	r3, [r7, #108]	; 0x6c
  ErrorStatus status = SUCCESS;
 8009864:	2301      	movs	r3, #1
 8009866:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t keyaddr    = (uint32_t)Key;
 800986a:	68bb      	ldr	r3, [r7, #8]
 800986c:	66bb      	str	r3, [r7, #104]	; 0x68
  uint32_t inputaddr  = (uint32_t)Input;
 800986e:	683b      	ldr	r3, [r7, #0]
 8009870:	67bb      	str	r3, [r7, #120]	; 0x78
  uint32_t outputaddr = (uint32_t)Output;
 8009872:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009876:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t ivaddr     = (uint32_t)InitVectors;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t i = 0;
 800987c:	2300      	movs	r3, #0
 800987e:	673b      	str	r3, [r7, #112]	; 0x70

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&DES_CRYP_KeyInitStructure);
 8009880:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009884:	4618      	mov	r0, r3
 8009886:	f7ff fca1 	bl	80091cc <CRYP_KeyStructInit>

  /* Crypto Init for Encryption process */
  if(Mode == MODE_ENCRYPT) /* DES encryption */
 800988a:	7bfb      	ldrb	r3, [r7, #15]
 800988c:	2b01      	cmp	r3, #1
 800988e:	d102      	bne.n	8009896 <CRYP_DES_CBC+0x4a>
  {
     DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
 8009890:	2300      	movs	r3, #0
 8009892:	647b      	str	r3, [r7, #68]	; 0x44
 8009894:	e001      	b.n	800989a <CRYP_DES_CBC+0x4e>
  }
  else /*if(Mode == MODE_DECRYPT)*/ /* DES decryption */
  {
     DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Decrypt;
 8009896:	2304      	movs	r3, #4
 8009898:	647b      	str	r3, [r7, #68]	; 0x44
  }

  DES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_DES_CBC;
 800989a:	2318      	movs	r3, #24
 800989c:	64bb      	str	r3, [r7, #72]	; 0x48
  DES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 800989e:	2380      	movs	r3, #128	; 0x80
 80098a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  CRYP_Init(&DES_CRYP_InitStructure);
 80098a2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80098a6:	4618      	mov	r0, r3
 80098a8:	f7ff fbfc 	bl	80090a4 <CRYP_Init>

  /* Key Initialisation */
  DES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 80098ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	663b      	str	r3, [r7, #96]	; 0x60
 80098b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80098b4:	ba1b      	rev	r3, r3
 80098b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  keyaddr+=4;
 80098b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80098ba:	3304      	adds	r3, #4
 80098bc:	66bb      	str	r3, [r7, #104]	; 0x68
  DES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 80098be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80098c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80098c6:	ba1b      	rev	r3, r3
 80098c8:	633b      	str	r3, [r7, #48]	; 0x30
  CRYP_KeyInit(& DES_CRYP_KeyInitStructure);
 80098ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80098ce:	4618      	mov	r0, r3
 80098d0:	f7ff fc50 	bl	8009174 <CRYP_KeyInit>

  /* Initialization Vectors */
  DES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
 80098d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	65bb      	str	r3, [r7, #88]	; 0x58
 80098da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80098dc:	ba1b      	rev	r3, r3
 80098de:	617b      	str	r3, [r7, #20]
  ivaddr+=4;
 80098e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80098e2:	3304      	adds	r3, #4
 80098e4:	667b      	str	r3, [r7, #100]	; 0x64
  DES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
 80098e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	657b      	str	r3, [r7, #84]	; 0x54
 80098ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80098ee:	ba1b      	rev	r3, r3
 80098f0:	61bb      	str	r3, [r7, #24]
  CRYP_IVInit(&DES_CRYP_IVInitStructure);
 80098f2:	f107 0314 	add.w	r3, r7, #20
 80098f6:	4618      	mov	r0, r3
 80098f8:	f7ff fc8a 	bl	8009210 <CRYP_IVInit>

  /* Flush IN/OUT FIFO */
  CRYP_FIFOFlush();
 80098fc:	f7ff fcd6 	bl	80092ac <CRYP_FIFOFlush>
  
  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 8009900:	2001      	movs	r0, #1
 8009902:	f7ff fce1 	bl	80092c8 <CRYP_Cmd>

  if(CRYP_GetCmdStatus() == DISABLE)
 8009906:	f7ff fec3 	bl	8009690 <CRYP_GetCmdStatus>
 800990a:	4603      	mov	r3, r0
 800990c:	2b00      	cmp	r3, #0
 800990e:	d101      	bne.n	8009914 <CRYP_DES_CBC+0xc8>
  {
    /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
       the CRYP peripheral (please check the device sales type. */
    return(ERROR);
 8009910:	2300      	movs	r3, #0
 8009912:	e04b      	b.n	80099ac <CRYP_DES_CBC+0x160>
  }
  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 8009914:	2300      	movs	r3, #0
 8009916:	673b      	str	r3, [r7, #112]	; 0x70
 8009918:	e03a      	b.n	8009990 <CRYP_DES_CBC+0x144>
  {
    /* Write the Input block in the Input FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 800991a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	4618      	mov	r0, r3
 8009920:	f7ff fcee 	bl	8009300 <CRYP_DataIn>
    inputaddr+=4;
 8009924:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009926:	3304      	adds	r3, #4
 8009928:	67bb      	str	r3, [r7, #120]	; 0x78
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 800992a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	4618      	mov	r0, r3
 8009930:	f7ff fce6 	bl	8009300 <CRYP_DataIn>
    inputaddr+=4;
 8009934:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009936:	3304      	adds	r3, #4
 8009938:	67bb      	str	r3, [r7, #120]	; 0x78

    /* Wait until the complete message has been processed */
    counter = 0;
 800993a:	2300      	movs	r3, #0
 800993c:	613b      	str	r3, [r7, #16]
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 800993e:	2010      	movs	r0, #16
 8009940:	f7ff fec0 	bl	80096c4 <CRYP_GetFlagStatus>
 8009944:	4603      	mov	r3, r0
 8009946:	66fb      	str	r3, [r7, #108]	; 0x6c
      counter++;
 8009948:	693b      	ldr	r3, [r7, #16]
 800994a:	3301      	adds	r3, #1
 800994c:	613b      	str	r3, [r7, #16]
    }while ((counter != DESBUSY_TIMEOUT) && (busystatus != RESET));
 800994e:	693b      	ldr	r3, [r7, #16]
 8009950:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009954:	d002      	beq.n	800995c <CRYP_DES_CBC+0x110>
 8009956:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009958:	2b00      	cmp	r3, #0
 800995a:	d1f0      	bne.n	800993e <CRYP_DES_CBC+0xf2>

    if (busystatus != RESET)
 800995c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800995e:	2b00      	cmp	r3, #0
 8009960:	d003      	beq.n	800996a <CRYP_DES_CBC+0x11e>
   {
       status = ERROR;
 8009962:	2300      	movs	r3, #0
 8009964:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8009968:	e00f      	b.n	800998a <CRYP_DES_CBC+0x13e>
    }
    else
    {
      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 800996a:	6f7c      	ldr	r4, [r7, #116]	; 0x74
 800996c:	f7ff fcd6 	bl	800931c <CRYP_DataOut>
 8009970:	4603      	mov	r3, r0
 8009972:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8009974:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009976:	3304      	adds	r3, #4
 8009978:	677b      	str	r3, [r7, #116]	; 0x74
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 800997a:	6f7c      	ldr	r4, [r7, #116]	; 0x74
 800997c:	f7ff fcce 	bl	800931c <CRYP_DataOut>
 8009980:	4603      	mov	r3, r0
 8009982:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8009984:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009986:	3304      	adds	r3, #4
 8009988:	677b      	str	r3, [r7, #116]	; 0x74
  {
    /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
       the CRYP peripheral (please check the device sales type. */
    return(ERROR);
  }
  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 800998a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800998c:	3308      	adds	r3, #8
 800998e:	673b      	str	r3, [r7, #112]	; 0x70
 8009990:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009992:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009996:	429a      	cmp	r2, r3
 8009998:	d203      	bcs.n	80099a2 <CRYP_DES_CBC+0x156>
 800999a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d1bb      	bne.n	800991a <CRYP_DES_CBC+0xce>
      outputaddr+=4;
    }
  }

  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 80099a2:	2000      	movs	r0, #0
 80099a4:	f7ff fc90 	bl	80092c8 <CRYP_Cmd>

  return status; 
 80099a8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80099ac:	4618      	mov	r0, r3
 80099ae:	3784      	adds	r7, #132	; 0x84
 80099b0:	46bd      	mov	sp, r7
 80099b2:	bd90      	pop	{r4, r7, pc}

080099b4 <CRYP_TDES_ECB>:
  *          - SUCCESS: Operation done
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_TDES_ECB(uint8_t Mode, uint8_t Key[24], uint8_t *Input, 
                          uint32_t Ilength, uint8_t *Output)
{
 80099b4:	b590      	push	{r4, r7, lr}
 80099b6:	b09f      	sub	sp, #124	; 0x7c
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	60b9      	str	r1, [r7, #8]
 80099bc:	607a      	str	r2, [r7, #4]
 80099be:	603b      	str	r3, [r7, #0]
 80099c0:	4603      	mov	r3, r0
 80099c2:	73fb      	strb	r3, [r7, #15]
  CRYP_InitTypeDef TDES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef TDES_CRYP_KeyInitStructure;
  __IO uint32_t counter = 0;
 80099c4:	2300      	movs	r3, #0
 80099c6:	617b      	str	r3, [r7, #20]
  uint32_t busystatus = 0;
 80099c8:	2300      	movs	r3, #0
 80099ca:	667b      	str	r3, [r7, #100]	; 0x64
  ErrorStatus status = SUCCESS;
 80099cc:	2301      	movs	r3, #1
 80099ce:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  uint32_t keyaddr    = (uint32_t)Key;
 80099d2:	68bb      	ldr	r3, [r7, #8]
 80099d4:	663b      	str	r3, [r7, #96]	; 0x60
  uint32_t inputaddr  = (uint32_t)Input;
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t outputaddr = (uint32_t)Output;
 80099da:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80099de:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t i = 0;
 80099e0:	2300      	movs	r3, #0
 80099e2:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&TDES_CRYP_KeyInitStructure);
 80099e4:	f107 0318 	add.w	r3, r7, #24
 80099e8:	4618      	mov	r0, r3
 80099ea:	f7ff fbef 	bl	80091cc <CRYP_KeyStructInit>

  /* Crypto Init for Encryption process */
  if(Mode == MODE_ENCRYPT) /* TDES encryption */
 80099ee:	7bfb      	ldrb	r3, [r7, #15]
 80099f0:	2b01      	cmp	r3, #1
 80099f2:	d102      	bne.n	80099fa <CRYP_TDES_ECB+0x46>
  {
     TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
 80099f4:	2300      	movs	r3, #0
 80099f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80099f8:	e001      	b.n	80099fe <CRYP_TDES_ECB+0x4a>
  }
  else /*if(Mode == MODE_DECRYPT)*/ /* TDES decryption */
  {
     TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 80099fa:	2304      	movs	r3, #4
 80099fc:	63bb      	str	r3, [r7, #56]	; 0x38
  }

  TDES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_TDES_ECB;
 80099fe:	2300      	movs	r3, #0
 8009a00:	63fb      	str	r3, [r7, #60]	; 0x3c
  TDES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 8009a02:	2380      	movs	r3, #128	; 0x80
 8009a04:	643b      	str	r3, [r7, #64]	; 0x40
  CRYP_Init(&TDES_CRYP_InitStructure);
 8009a06:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	f7ff fb4a 	bl	80090a4 <CRYP_Init>

  /* Key Initialisation */
  TDES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 8009a10:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009a16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009a18:	ba1b      	rev	r3, r3
 8009a1a:	623b      	str	r3, [r7, #32]
  keyaddr+=4;
 8009a1c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009a1e:	3304      	adds	r3, #4
 8009a20:	663b      	str	r3, [r7, #96]	; 0x60
  TDES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 8009a22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	65bb      	str	r3, [r7, #88]	; 0x58
 8009a28:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009a2a:	ba1b      	rev	r3, r3
 8009a2c:	627b      	str	r3, [r7, #36]	; 0x24
  keyaddr+=4;
 8009a2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009a30:	3304      	adds	r3, #4
 8009a32:	663b      	str	r3, [r7, #96]	; 0x60
  TDES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8009a34:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	657b      	str	r3, [r7, #84]	; 0x54
 8009a3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a3c:	ba1b      	rev	r3, r3
 8009a3e:	62bb      	str	r3, [r7, #40]	; 0x28
  keyaddr+=4;
 8009a40:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009a42:	3304      	adds	r3, #4
 8009a44:	663b      	str	r3, [r7, #96]	; 0x60
  TDES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8009a46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	653b      	str	r3, [r7, #80]	; 0x50
 8009a4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a4e:	ba1b      	rev	r3, r3
 8009a50:	62fb      	str	r3, [r7, #44]	; 0x2c
  keyaddr+=4;
 8009a52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009a54:	3304      	adds	r3, #4
 8009a56:	663b      	str	r3, [r7, #96]	; 0x60
  TDES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 8009a58:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009a5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a60:	ba1b      	rev	r3, r3
 8009a62:	633b      	str	r3, [r7, #48]	; 0x30
  keyaddr+=4;
 8009a64:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009a66:	3304      	adds	r3, #4
 8009a68:	663b      	str	r3, [r7, #96]	; 0x60
  TDES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 8009a6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009a70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009a72:	ba1b      	rev	r3, r3
 8009a74:	637b      	str	r3, [r7, #52]	; 0x34
  CRYP_KeyInit(& TDES_CRYP_KeyInitStructure);
 8009a76:	f107 0318 	add.w	r3, r7, #24
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	f7ff fb7a 	bl	8009174 <CRYP_KeyInit>

  /* Flush IN/OUT FIFO */
  CRYP_FIFOFlush();
 8009a80:	f7ff fc14 	bl	80092ac <CRYP_FIFOFlush>

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 8009a84:	2001      	movs	r0, #1
 8009a86:	f7ff fc1f 	bl	80092c8 <CRYP_Cmd>

  if(CRYP_GetCmdStatus() == DISABLE)
 8009a8a:	f7ff fe01 	bl	8009690 <CRYP_GetCmdStatus>
 8009a8e:	4603      	mov	r3, r0
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d101      	bne.n	8009a98 <CRYP_TDES_ECB+0xe4>
  {
    /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
       the CRYP peripheral (please check the device sales type. */
    return(ERROR);
 8009a94:	2300      	movs	r3, #0
 8009a96:	e04a      	b.n	8009b2e <CRYP_TDES_ECB+0x17a>
  }
  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 8009a98:	2300      	movs	r3, #0
 8009a9a:	66bb      	str	r3, [r7, #104]	; 0x68
 8009a9c:	e03a      	b.n	8009b14 <CRYP_TDES_ECB+0x160>
  {
    /* Write the Input block in the Input FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8009a9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	f7ff fc2c 	bl	8009300 <CRYP_DataIn>
    inputaddr+=4;
 8009aa8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009aaa:	3304      	adds	r3, #4
 8009aac:	673b      	str	r3, [r7, #112]	; 0x70
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8009aae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	f7ff fc24 	bl	8009300 <CRYP_DataIn>
    inputaddr+=4;
 8009ab8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009aba:	3304      	adds	r3, #4
 8009abc:	673b      	str	r3, [r7, #112]	; 0x70

    /* Wait until the complete message has been processed */
    counter = 0;
 8009abe:	2300      	movs	r3, #0
 8009ac0:	617b      	str	r3, [r7, #20]
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8009ac2:	2010      	movs	r0, #16
 8009ac4:	f7ff fdfe 	bl	80096c4 <CRYP_GetFlagStatus>
 8009ac8:	4603      	mov	r3, r0
 8009aca:	667b      	str	r3, [r7, #100]	; 0x64
      counter++;
 8009acc:	697b      	ldr	r3, [r7, #20]
 8009ace:	3301      	adds	r3, #1
 8009ad0:	617b      	str	r3, [r7, #20]
    }while ((counter != TDESBUSY_TIMEOUT) && (busystatus != RESET));
 8009ad2:	697b      	ldr	r3, [r7, #20]
 8009ad4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ad8:	d002      	beq.n	8009ae0 <CRYP_TDES_ECB+0x12c>
 8009ada:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d1f0      	bne.n	8009ac2 <CRYP_TDES_ECB+0x10e>

    if (busystatus != RESET)
 8009ae0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d003      	beq.n	8009aee <CRYP_TDES_ECB+0x13a>
    {
       status = ERROR;
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8009aec:	e00f      	b.n	8009b0e <CRYP_TDES_ECB+0x15a>
    }
    else
    {

      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8009aee:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8009af0:	f7ff fc14 	bl	800931c <CRYP_DataOut>
 8009af4:	4603      	mov	r3, r0
 8009af6:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8009af8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009afa:	3304      	adds	r3, #4
 8009afc:	66fb      	str	r3, [r7, #108]	; 0x6c
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8009afe:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8009b00:	f7ff fc0c 	bl	800931c <CRYP_DataOut>
 8009b04:	4603      	mov	r3, r0
 8009b06:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8009b08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b0a:	3304      	adds	r3, #4
 8009b0c:	66fb      	str	r3, [r7, #108]	; 0x6c
  {
    /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
       the CRYP peripheral (please check the device sales type. */
    return(ERROR);
  }
  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 8009b0e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009b10:	3308      	adds	r3, #8
 8009b12:	66bb      	str	r3, [r7, #104]	; 0x68
 8009b14:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009b16:	683b      	ldr	r3, [r7, #0]
 8009b18:	429a      	cmp	r2, r3
 8009b1a:	d203      	bcs.n	8009b24 <CRYP_TDES_ECB+0x170>
 8009b1c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d1bc      	bne.n	8009a9e <CRYP_TDES_ECB+0xea>
      outputaddr+=4;
    }
  }

  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 8009b24:	2000      	movs	r0, #0
 8009b26:	f7ff fbcf 	bl	80092c8 <CRYP_Cmd>

  return status; 
 8009b2a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8009b2e:	4618      	mov	r0, r3
 8009b30:	377c      	adds	r7, #124	; 0x7c
 8009b32:	46bd      	mov	sp, r7
 8009b34:	bd90      	pop	{r4, r7, pc}
 8009b36:	bf00      	nop

08009b38 <CRYP_TDES_CBC>:
  *          - SUCCESS: Operation done
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_TDES_CBC(uint8_t Mode, uint8_t Key[24], uint8_t InitVectors[8],
                          uint8_t *Input, uint32_t Ilength, uint8_t *Output)
{
 8009b38:	b590      	push	{r4, r7, lr}
 8009b3a:	b0a5      	sub	sp, #148	; 0x94
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	60b9      	str	r1, [r7, #8]
 8009b40:	607a      	str	r2, [r7, #4]
 8009b42:	603b      	str	r3, [r7, #0]
 8009b44:	4603      	mov	r3, r0
 8009b46:	73fb      	strb	r3, [r7, #15]
  CRYP_InitTypeDef TDES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef TDES_CRYP_KeyInitStructure;
  CRYP_IVInitTypeDef TDES_CRYP_IVInitStructure;
  __IO uint32_t counter = 0;
 8009b48:	2300      	movs	r3, #0
 8009b4a:	613b      	str	r3, [r7, #16]
  uint32_t busystatus = 0;
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	67fb      	str	r3, [r7, #124]	; 0x7c
  ErrorStatus status = SUCCESS;
 8009b50:	2301      	movs	r3, #1
 8009b52:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  uint32_t keyaddr    = (uint32_t)Key;
 8009b56:	68bb      	ldr	r3, [r7, #8]
 8009b58:	67bb      	str	r3, [r7, #120]	; 0x78
  uint32_t inputaddr  = (uint32_t)Input;
 8009b5a:	683b      	ldr	r3, [r7, #0]
 8009b5c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t outputaddr = (uint32_t)Output;
 8009b60:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009b64:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t ivaddr     = (uint32_t)InitVectors;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t i = 0;
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&TDES_CRYP_KeyInitStructure);
 8009b72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009b76:	4618      	mov	r0, r3
 8009b78:	f7ff fb28 	bl	80091cc <CRYP_KeyStructInit>

  /* Crypto Init for Encryption process */
  if(Mode == MODE_ENCRYPT) /* TDES encryption */
 8009b7c:	7bfb      	ldrb	r3, [r7, #15]
 8009b7e:	2b01      	cmp	r3, #1
 8009b80:	d102      	bne.n	8009b88 <CRYP_TDES_CBC+0x50>
  {
    TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
 8009b82:	2300      	movs	r3, #0
 8009b84:	647b      	str	r3, [r7, #68]	; 0x44
 8009b86:	e001      	b.n	8009b8c <CRYP_TDES_CBC+0x54>
  }
  else
  {
    TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 8009b88:	2304      	movs	r3, #4
 8009b8a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  TDES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_TDES_CBC;
 8009b8c:	2308      	movs	r3, #8
 8009b8e:	64bb      	str	r3, [r7, #72]	; 0x48
  TDES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 8009b90:	2380      	movs	r3, #128	; 0x80
 8009b92:	64fb      	str	r3, [r7, #76]	; 0x4c

  CRYP_Init(&TDES_CRYP_InitStructure);
 8009b94:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8009b98:	4618      	mov	r0, r3
 8009b9a:	f7ff fa83 	bl	80090a4 <CRYP_Init>

  /* Key Initialisation */
  TDES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 8009b9e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	673b      	str	r3, [r7, #112]	; 0x70
 8009ba4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009ba6:	ba1b      	rev	r3, r3
 8009ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
  keyaddr+=4;
 8009baa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009bac:	3304      	adds	r3, #4
 8009bae:	67bb      	str	r3, [r7, #120]	; 0x78
  TDES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 8009bb0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009bb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009bb8:	ba1b      	rev	r3, r3
 8009bba:	633b      	str	r3, [r7, #48]	; 0x30
  keyaddr+=4;
 8009bbc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009bbe:	3304      	adds	r3, #4
 8009bc0:	67bb      	str	r3, [r7, #120]	; 0x78
  TDES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8009bc2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	66bb      	str	r3, [r7, #104]	; 0x68
 8009bc8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009bca:	ba1b      	rev	r3, r3
 8009bcc:	637b      	str	r3, [r7, #52]	; 0x34
  keyaddr+=4;
 8009bce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009bd0:	3304      	adds	r3, #4
 8009bd2:	67bb      	str	r3, [r7, #120]	; 0x78
  TDES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8009bd4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	667b      	str	r3, [r7, #100]	; 0x64
 8009bda:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009bdc:	ba1b      	rev	r3, r3
 8009bde:	63bb      	str	r3, [r7, #56]	; 0x38
  keyaddr+=4;
 8009be0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009be2:	3304      	adds	r3, #4
 8009be4:	67bb      	str	r3, [r7, #120]	; 0x78
  TDES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 8009be6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	663b      	str	r3, [r7, #96]	; 0x60
 8009bec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009bee:	ba1b      	rev	r3, r3
 8009bf0:	63fb      	str	r3, [r7, #60]	; 0x3c
  keyaddr+=4;
 8009bf2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009bf4:	3304      	adds	r3, #4
 8009bf6:	67bb      	str	r3, [r7, #120]	; 0x78
  TDES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 8009bf8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009bfe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009c00:	ba1b      	rev	r3, r3
 8009c02:	643b      	str	r3, [r7, #64]	; 0x40
  CRYP_KeyInit(& TDES_CRYP_KeyInitStructure);
 8009c04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009c08:	4618      	mov	r0, r3
 8009c0a:	f7ff fab3 	bl	8009174 <CRYP_KeyInit>

  /* Initialization Vectors */
  TDES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
 8009c0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	65bb      	str	r3, [r7, #88]	; 0x58
 8009c14:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009c16:	ba1b      	rev	r3, r3
 8009c18:	617b      	str	r3, [r7, #20]
  ivaddr+=4;
 8009c1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009c1c:	3304      	adds	r3, #4
 8009c1e:	677b      	str	r3, [r7, #116]	; 0x74
  TDES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
 8009c20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	657b      	str	r3, [r7, #84]	; 0x54
 8009c26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009c28:	ba1b      	rev	r3, r3
 8009c2a:	61bb      	str	r3, [r7, #24]
  CRYP_IVInit(&TDES_CRYP_IVInitStructure);
 8009c2c:	f107 0314 	add.w	r3, r7, #20
 8009c30:	4618      	mov	r0, r3
 8009c32:	f7ff faed 	bl	8009210 <CRYP_IVInit>

  /* Flush IN/OUT FIFO */
  CRYP_FIFOFlush();
 8009c36:	f7ff fb39 	bl	80092ac <CRYP_FIFOFlush>

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 8009c3a:	2001      	movs	r0, #1
 8009c3c:	f7ff fb44 	bl	80092c8 <CRYP_Cmd>

  if(CRYP_GetCmdStatus() == DISABLE)
 8009c40:	f7ff fd26 	bl	8009690 <CRYP_GetCmdStatus>
 8009c44:	4603      	mov	r3, r0
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d101      	bne.n	8009c4e <CRYP_TDES_CBC+0x116>
  {
    /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
       the CRYP peripheral (please check the device sales type. */
    return(ERROR);
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	e05b      	b.n	8009d06 <CRYP_TDES_CBC+0x1ce>
  }
  
  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 8009c4e:	2300      	movs	r3, #0
 8009c50:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009c54:	e048      	b.n	8009ce8 <CRYP_TDES_CBC+0x1b0>
  {
    /* Write the Input block in the Input FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8009c56:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	f7ff fb4f 	bl	8009300 <CRYP_DataIn>
    inputaddr+=4;
 8009c62:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009c66:	3304      	adds	r3, #4
 8009c68:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8009c6c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	4618      	mov	r0, r3
 8009c74:	f7ff fb44 	bl	8009300 <CRYP_DataIn>
    inputaddr+=4;
 8009c78:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009c7c:	3304      	adds	r3, #4
 8009c7e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

    /* Wait until the complete message has been processed */
    counter = 0;
 8009c82:	2300      	movs	r3, #0
 8009c84:	613b      	str	r3, [r7, #16]
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8009c86:	2010      	movs	r0, #16
 8009c88:	f7ff fd1c 	bl	80096c4 <CRYP_GetFlagStatus>
 8009c8c:	4603      	mov	r3, r0
 8009c8e:	67fb      	str	r3, [r7, #124]	; 0x7c
      counter++;
 8009c90:	693b      	ldr	r3, [r7, #16]
 8009c92:	3301      	adds	r3, #1
 8009c94:	613b      	str	r3, [r7, #16]
    }while ((counter != TDESBUSY_TIMEOUT) && (busystatus != RESET));
 8009c96:	693b      	ldr	r3, [r7, #16]
 8009c98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c9c:	d002      	beq.n	8009ca4 <CRYP_TDES_CBC+0x16c>
 8009c9e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d1f0      	bne.n	8009c86 <CRYP_TDES_CBC+0x14e>

    if (busystatus != RESET)
 8009ca4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d003      	beq.n	8009cb2 <CRYP_TDES_CBC+0x17a>
   {
       status = ERROR;
 8009caa:	2300      	movs	r3, #0
 8009cac:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8009cb0:	e015      	b.n	8009cde <CRYP_TDES_CBC+0x1a6>
    }
    else
    {

      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8009cb2:	f8d7 4084 	ldr.w	r4, [r7, #132]	; 0x84
 8009cb6:	f7ff fb31 	bl	800931c <CRYP_DataOut>
 8009cba:	4603      	mov	r3, r0
 8009cbc:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8009cbe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009cc2:	3304      	adds	r3, #4
 8009cc4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8009cc8:	f8d7 4084 	ldr.w	r4, [r7, #132]	; 0x84
 8009ccc:	f7ff fb26 	bl	800931c <CRYP_DataOut>
 8009cd0:	4603      	mov	r3, r0
 8009cd2:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8009cd4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009cd8:	3304      	adds	r3, #4
 8009cda:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
       the CRYP peripheral (please check the device sales type. */
    return(ERROR);
  }
  
  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 8009cde:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009ce2:	3308      	adds	r3, #8
 8009ce4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009ce8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009cec:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009cf0:	429a      	cmp	r2, r3
 8009cf2:	d203      	bcs.n	8009cfc <CRYP_TDES_CBC+0x1c4>
 8009cf4:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d1ac      	bne.n	8009c56 <CRYP_TDES_CBC+0x11e>
      outputaddr+=4;
    }
  }

  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 8009cfc:	2000      	movs	r0, #0
 8009cfe:	f7ff fae3 	bl	80092c8 <CRYP_Cmd>

  return status; 
 8009d02:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 8009d06:	4618      	mov	r0, r3
 8009d08:	3794      	adds	r7, #148	; 0x94
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	bd90      	pop	{r4, r7, pc}
 8009d0e:	bf00      	nop

08009d10 <DAC_DeInit>:
  * @brief  Deinitializes the DAC peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void DAC_DeInit(void)
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	af00      	add	r7, sp, #0
  /* Enable DAC reset state */
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_DAC, ENABLE);
 8009d14:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8009d18:	2101      	movs	r1, #1
 8009d1a:	f006 f875 	bl	800fe08 <RCC_APB1PeriphResetCmd>
  /* Release DAC from reset state */
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_DAC, DISABLE);
 8009d1e:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8009d22:	2100      	movs	r1, #0
 8009d24:	f006 f870 	bl	800fe08 <RCC_APB1PeriphResetCmd>
}
 8009d28:	bd80      	pop	{r7, pc}
 8009d2a:	bf00      	nop

08009d2c <DAC_Init>:
  * @param  DAC_InitStruct: pointer to a DAC_InitTypeDef structure that contains
  *         the configuration information for the  specified DAC channel.
  * @retval None
  */
void DAC_Init(uint32_t DAC_Channel, DAC_InitTypeDef* DAC_InitStruct)
{
 8009d2c:	b480      	push	{r7}
 8009d2e:	b085      	sub	sp, #20
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
 8009d34:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8009d36:	2300      	movs	r3, #0
 8009d38:	60fb      	str	r3, [r7, #12]
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(DAC_InitStruct->DAC_OutputBuffer));

/*---------------------------- DAC CR Configuration --------------------------*/
  /* Get the DAC CR value */
  tmpreg1 = DAC->CR;
 8009d3e:	4b13      	ldr	r3, [pc, #76]	; (8009d8c <DAC_Init+0x60>)
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	60fb      	str	r3, [r7, #12]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(CR_CLEAR_MASK << DAC_Channel);
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	f640 72fe 	movw	r2, #4094	; 0xffe
 8009d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8009d4e:	43db      	mvns	r3, r3
 8009d50:	68fa      	ldr	r2, [r7, #12]
 8009d52:	4013      	ands	r3, r2
 8009d54:	60fb      	str	r3, [r7, #12]
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 8009d56:	683b      	ldr	r3, [r7, #0]
 8009d58:	681a      	ldr	r2, [r3, #0]
 8009d5a:	683b      	ldr	r3, [r7, #0]
 8009d5c:	685b      	ldr	r3, [r3, #4]
 8009d5e:	431a      	orrs	r2, r3
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
 8009d60:	683b      	ldr	r3, [r7, #0]
 8009d62:	689b      	ldr	r3, [r3, #8]
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 8009d64:	431a      	orrs	r2, r3
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
             DAC_InitStruct->DAC_OutputBuffer);
 8009d66:	683b      	ldr	r3, [r7, #0]
 8009d68:	68db      	ldr	r3, [r3, #12]
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 8009d6a:	4313      	orrs	r3, r2
 8009d6c:	60bb      	str	r3, [r7, #8]
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
             DAC_InitStruct->DAC_OutputBuffer);
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << DAC_Channel;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	68ba      	ldr	r2, [r7, #8]
 8009d72:	fa02 f303 	lsl.w	r3, r2, r3
 8009d76:	68fa      	ldr	r2, [r7, #12]
 8009d78:	4313      	orrs	r3, r2
 8009d7a:	60fb      	str	r3, [r7, #12]
  /* Write to DAC CR */
  DAC->CR = tmpreg1;
 8009d7c:	4b03      	ldr	r3, [pc, #12]	; (8009d8c <DAC_Init+0x60>)
 8009d7e:	68fa      	ldr	r2, [r7, #12]
 8009d80:	601a      	str	r2, [r3, #0]
}
 8009d82:	3714      	adds	r7, #20
 8009d84:	46bd      	mov	sp, r7
 8009d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d8a:	4770      	bx	lr
 8009d8c:	40007400 	.word	0x40007400

08009d90 <DAC_StructInit>:
  * @param  DAC_InitStruct: pointer to a DAC_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void DAC_StructInit(DAC_InitTypeDef* DAC_InitStruct)
{
 8009d90:	b480      	push	{r7}
 8009d92:	b083      	sub	sp, #12
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
/*--------------- Reset DAC init structure parameters values -----------------*/
  /* Initialize the DAC_Trigger member */
  DAC_InitStruct->DAC_Trigger = DAC_Trigger_None;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	601a      	str	r2, [r3, #0]
  /* Initialize the DAC_WaveGeneration member */
  DAC_InitStruct->DAC_WaveGeneration = DAC_WaveGeneration_None;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	2200      	movs	r2, #0
 8009da2:	605a      	str	r2, [r3, #4]
  /* Initialize the DAC_LFSRUnmask_TriangleAmplitude member */
  DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude = DAC_LFSRUnmask_Bit0;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2200      	movs	r2, #0
 8009da8:	609a      	str	r2, [r3, #8]
  /* Initialize the DAC_OutputBuffer member */
  DAC_InitStruct->DAC_OutputBuffer = DAC_OutputBuffer_Enable;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	2200      	movs	r2, #0
 8009dae:	60da      	str	r2, [r3, #12]
}
 8009db0:	370c      	adds	r7, #12
 8009db2:	46bd      	mov	sp, r7
 8009db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db8:	4770      	bx	lr
 8009dba:	bf00      	nop

08009dbc <DAC_Cmd>:
  *          This parameter can be: ENABLE or DISABLE.
  * @note   When the DAC channel is enabled the trigger source can no more be modified.
  * @retval None
  */
void DAC_Cmd(uint32_t DAC_Channel, FunctionalState NewState)
{
 8009dbc:	b480      	push	{r7}
 8009dbe:	b083      	sub	sp, #12
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	6078      	str	r0, [r7, #4]
 8009dc4:	460b      	mov	r3, r1
 8009dc6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8009dc8:	78fb      	ldrb	r3, [r7, #3]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d009      	beq.n	8009de2 <DAC_Cmd+0x26>
  {
    /* Enable the selected DAC channel */
    DAC->CR |= (DAC_CR_EN1 << DAC_Channel);
 8009dce:	4b0c      	ldr	r3, [pc, #48]	; (8009e00 <DAC_Cmd+0x44>)
 8009dd0:	4a0b      	ldr	r2, [pc, #44]	; (8009e00 <DAC_Cmd+0x44>)
 8009dd2:	6811      	ldr	r1, [r2, #0]
 8009dd4:	687a      	ldr	r2, [r7, #4]
 8009dd6:	2001      	movs	r0, #1
 8009dd8:	fa00 f202 	lsl.w	r2, r0, r2
 8009ddc:	430a      	orrs	r2, r1
 8009dde:	601a      	str	r2, [r3, #0]
 8009de0:	e009      	b.n	8009df6 <DAC_Cmd+0x3a>
  }
  else
  {
    /* Disable the selected DAC channel */
    DAC->CR &= (~(DAC_CR_EN1 << DAC_Channel));
 8009de2:	4b07      	ldr	r3, [pc, #28]	; (8009e00 <DAC_Cmd+0x44>)
 8009de4:	4a06      	ldr	r2, [pc, #24]	; (8009e00 <DAC_Cmd+0x44>)
 8009de6:	6811      	ldr	r1, [r2, #0]
 8009de8:	687a      	ldr	r2, [r7, #4]
 8009dea:	2001      	movs	r0, #1
 8009dec:	fa00 f202 	lsl.w	r2, r0, r2
 8009df0:	43d2      	mvns	r2, r2
 8009df2:	400a      	ands	r2, r1
 8009df4:	601a      	str	r2, [r3, #0]
  }
}
 8009df6:	370c      	adds	r7, #12
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfe:	4770      	bx	lr
 8009e00:	40007400 	.word	0x40007400

08009e04 <DAC_SoftwareTriggerCmd>:
  * @param  NewState: new state of the selected DAC channel software trigger.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DAC_SoftwareTriggerCmd(uint32_t DAC_Channel, FunctionalState NewState)
{
 8009e04:	b480      	push	{r7}
 8009e06:	b083      	sub	sp, #12
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
 8009e0c:	460b      	mov	r3, r1
 8009e0e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8009e10:	78fb      	ldrb	r3, [r7, #3]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d00a      	beq.n	8009e2c <DAC_SoftwareTriggerCmd+0x28>
  {
    /* Enable software trigger for the selected DAC channel */
    DAC->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1 << (DAC_Channel >> 4);
 8009e16:	4b0d      	ldr	r3, [pc, #52]	; (8009e4c <DAC_SoftwareTriggerCmd+0x48>)
 8009e18:	4a0c      	ldr	r2, [pc, #48]	; (8009e4c <DAC_SoftwareTriggerCmd+0x48>)
 8009e1a:	6851      	ldr	r1, [r2, #4]
 8009e1c:	687a      	ldr	r2, [r7, #4]
 8009e1e:	0912      	lsrs	r2, r2, #4
 8009e20:	2001      	movs	r0, #1
 8009e22:	fa00 f202 	lsl.w	r2, r0, r2
 8009e26:	430a      	orrs	r2, r1
 8009e28:	605a      	str	r2, [r3, #4]
 8009e2a:	e00a      	b.n	8009e42 <DAC_SoftwareTriggerCmd+0x3e>
  }
  else
  {
    /* Disable software trigger for the selected DAC channel */
    DAC->SWTRIGR &= ~((uint32_t)DAC_SWTRIGR_SWTRIG1 << (DAC_Channel >> 4));
 8009e2c:	4b07      	ldr	r3, [pc, #28]	; (8009e4c <DAC_SoftwareTriggerCmd+0x48>)
 8009e2e:	4a07      	ldr	r2, [pc, #28]	; (8009e4c <DAC_SoftwareTriggerCmd+0x48>)
 8009e30:	6851      	ldr	r1, [r2, #4]
 8009e32:	687a      	ldr	r2, [r7, #4]
 8009e34:	0912      	lsrs	r2, r2, #4
 8009e36:	2001      	movs	r0, #1
 8009e38:	fa00 f202 	lsl.w	r2, r0, r2
 8009e3c:	43d2      	mvns	r2, r2
 8009e3e:	400a      	ands	r2, r1
 8009e40:	605a      	str	r2, [r3, #4]
  }
}
 8009e42:	370c      	adds	r7, #12
 8009e44:	46bd      	mov	sp, r7
 8009e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4a:	4770      	bx	lr
 8009e4c:	40007400 	.word	0x40007400

08009e50 <DAC_DualSoftwareTriggerCmd>:
  * @param  NewState: new state of the DAC channels software triggers.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DAC_DualSoftwareTriggerCmd(FunctionalState NewState)
{
 8009e50:	b480      	push	{r7}
 8009e52:	b083      	sub	sp, #12
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	4603      	mov	r3, r0
 8009e58:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8009e5a:	79fb      	ldrb	r3, [r7, #7]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d006      	beq.n	8009e6e <DAC_DualSoftwareTriggerCmd+0x1e>
  {
    /* Enable software trigger for both DAC channels */
    DAC->SWTRIGR |= DUAL_SWTRIG_SET;
 8009e60:	4b08      	ldr	r3, [pc, #32]	; (8009e84 <DAC_DualSoftwareTriggerCmd+0x34>)
 8009e62:	4a08      	ldr	r2, [pc, #32]	; (8009e84 <DAC_DualSoftwareTriggerCmd+0x34>)
 8009e64:	6852      	ldr	r2, [r2, #4]
 8009e66:	f042 0203 	orr.w	r2, r2, #3
 8009e6a:	605a      	str	r2, [r3, #4]
 8009e6c:	e005      	b.n	8009e7a <DAC_DualSoftwareTriggerCmd+0x2a>
  }
  else
  {
    /* Disable software trigger for both DAC channels */
    DAC->SWTRIGR &= DUAL_SWTRIG_RESET;
 8009e6e:	4b05      	ldr	r3, [pc, #20]	; (8009e84 <DAC_DualSoftwareTriggerCmd+0x34>)
 8009e70:	4a04      	ldr	r2, [pc, #16]	; (8009e84 <DAC_DualSoftwareTriggerCmd+0x34>)
 8009e72:	6852      	ldr	r2, [r2, #4]
 8009e74:	f022 0203 	bic.w	r2, r2, #3
 8009e78:	605a      	str	r2, [r3, #4]
  }
}
 8009e7a:	370c      	adds	r7, #12
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e82:	4770      	bx	lr
 8009e84:	40007400 	.word	0x40007400

08009e88 <DAC_WaveGenerationCmd>:
  * @param  NewState: new state of the selected DAC channel wave generation.
  *          This parameter can be: ENABLE or DISABLE.  
  * @retval None
  */
void DAC_WaveGenerationCmd(uint32_t DAC_Channel, uint32_t DAC_Wave, FunctionalState NewState)
{
 8009e88:	b480      	push	{r7}
 8009e8a:	b085      	sub	sp, #20
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	60f8      	str	r0, [r7, #12]
 8009e90:	60b9      	str	r1, [r7, #8]
 8009e92:	4613      	mov	r3, r2
 8009e94:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_WAVE(DAC_Wave)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8009e96:	79fb      	ldrb	r3, [r7, #7]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d009      	beq.n	8009eb0 <DAC_WaveGenerationCmd+0x28>
  {
    /* Enable the selected wave generation for the selected DAC channel */
    DAC->CR |= DAC_Wave << DAC_Channel;
 8009e9c:	4b0c      	ldr	r3, [pc, #48]	; (8009ed0 <DAC_WaveGenerationCmd+0x48>)
 8009e9e:	4a0c      	ldr	r2, [pc, #48]	; (8009ed0 <DAC_WaveGenerationCmd+0x48>)
 8009ea0:	6811      	ldr	r1, [r2, #0]
 8009ea2:	68fa      	ldr	r2, [r7, #12]
 8009ea4:	68b8      	ldr	r0, [r7, #8]
 8009ea6:	fa00 f202 	lsl.w	r2, r0, r2
 8009eaa:	430a      	orrs	r2, r1
 8009eac:	601a      	str	r2, [r3, #0]
 8009eae:	e009      	b.n	8009ec4 <DAC_WaveGenerationCmd+0x3c>
  }
  else
  {
    /* Disable the selected wave generation for the selected DAC channel */
    DAC->CR &= ~(DAC_Wave << DAC_Channel);
 8009eb0:	4b07      	ldr	r3, [pc, #28]	; (8009ed0 <DAC_WaveGenerationCmd+0x48>)
 8009eb2:	4a07      	ldr	r2, [pc, #28]	; (8009ed0 <DAC_WaveGenerationCmd+0x48>)
 8009eb4:	6811      	ldr	r1, [r2, #0]
 8009eb6:	68fa      	ldr	r2, [r7, #12]
 8009eb8:	68b8      	ldr	r0, [r7, #8]
 8009eba:	fa00 f202 	lsl.w	r2, r0, r2
 8009ebe:	43d2      	mvns	r2, r2
 8009ec0:	400a      	ands	r2, r1
 8009ec2:	601a      	str	r2, [r3, #0]
  }
}
 8009ec4:	3714      	adds	r7, #20
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ecc:	4770      	bx	lr
 8009ece:	bf00      	nop
 8009ed0:	40007400 	.word	0x40007400

08009ed4 <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 8009ed4:	b480      	push	{r7}
 8009ed6:	b085      	sub	sp, #20
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
 8009edc:	460b      	mov	r3, r1
 8009ede:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 8009ee4:	4b07      	ldr	r3, [pc, #28]	; (8009f04 <DAC_SetChannel1Data+0x30>)
 8009ee6:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
 8009ee8:	68fa      	ldr	r2, [r7, #12]
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	4413      	add	r3, r2
 8009eee:	3308      	adds	r3, #8
 8009ef0:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	887a      	ldrh	r2, [r7, #2]
 8009ef6:	601a      	str	r2, [r3, #0]
}
 8009ef8:	3714      	adds	r7, #20
 8009efa:	46bd      	mov	sp, r7
 8009efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f00:	4770      	bx	lr
 8009f02:	bf00      	nop
 8009f04:	40007400 	.word	0x40007400

08009f08 <DAC_SetChannel2Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel2Data(uint32_t DAC_Align, uint16_t Data)
{
 8009f08:	b480      	push	{r7}
 8009f0a:	b085      	sub	sp, #20
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
 8009f10:	460b      	mov	r3, r1
 8009f12:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 8009f14:	2300      	movs	r3, #0
 8009f16:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE;
 8009f18:	4b07      	ldr	r3, [pc, #28]	; (8009f38 <DAC_SetChannel2Data+0x30>)
 8009f1a:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R2_OFFSET + DAC_Align;
 8009f1c:	68fa      	ldr	r2, [r7, #12]
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	4413      	add	r3, r2
 8009f22:	3314      	adds	r3, #20
 8009f24:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel2 selected data holding register */
  *(__IO uint32_t *)tmp = Data;
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	887a      	ldrh	r2, [r7, #2]
 8009f2a:	601a      	str	r2, [r3, #0]
}
 8009f2c:	3714      	adds	r7, #20
 8009f2e:	46bd      	mov	sp, r7
 8009f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f34:	4770      	bx	lr
 8009f36:	bf00      	nop
 8009f38:	40007400 	.word	0x40007400

08009f3c <DAC_SetDualChannelData>:
  * @note   In dual mode, a unique register access is required to write in both
  *          DAC channels at the same time.
  * @retval None
  */
void DAC_SetDualChannelData(uint32_t DAC_Align, uint16_t Data2, uint16_t Data1)
{
 8009f3c:	b480      	push	{r7}
 8009f3e:	b085      	sub	sp, #20
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]
 8009f44:	4613      	mov	r3, r2
 8009f46:	460a      	mov	r2, r1
 8009f48:	807a      	strh	r2, [r7, #2]
 8009f4a:	803b      	strh	r3, [r7, #0]
  uint32_t data = 0, tmp = 0;
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	60fb      	str	r3, [r7, #12]
 8009f50:	2300      	movs	r3, #0
 8009f52:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data1));
  assert_param(IS_DAC_DATA(Data2));
  
  /* Calculate and set dual DAC data holding register value */
  if (DAC_Align == DAC_Align_8b_R)
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	2b08      	cmp	r3, #8
 8009f58:	d105      	bne.n	8009f66 <DAC_SetDualChannelData+0x2a>
  {
    data = ((uint32_t)Data2 << 8) | Data1; 
 8009f5a:	887b      	ldrh	r3, [r7, #2]
 8009f5c:	021a      	lsls	r2, r3, #8
 8009f5e:	883b      	ldrh	r3, [r7, #0]
 8009f60:	4313      	orrs	r3, r2
 8009f62:	60fb      	str	r3, [r7, #12]
 8009f64:	e004      	b.n	8009f70 <DAC_SetDualChannelData+0x34>
  }
  else
  {
    data = ((uint32_t)Data2 << 16) | Data1;
 8009f66:	887b      	ldrh	r3, [r7, #2]
 8009f68:	041a      	lsls	r2, r3, #16
 8009f6a:	883b      	ldrh	r3, [r7, #0]
 8009f6c:	4313      	orrs	r3, r2
 8009f6e:	60fb      	str	r3, [r7, #12]
  }
  
  tmp = (uint32_t)DAC_BASE;
 8009f70:	4b07      	ldr	r3, [pc, #28]	; (8009f90 <DAC_SetDualChannelData+0x54>)
 8009f72:	60bb      	str	r3, [r7, #8]
  tmp += DHR12RD_OFFSET + DAC_Align;
 8009f74:	687a      	ldr	r2, [r7, #4]
 8009f76:	68bb      	ldr	r3, [r7, #8]
 8009f78:	4413      	add	r3, r2
 8009f7a:	3320      	adds	r3, #32
 8009f7c:	60bb      	str	r3, [r7, #8]

  /* Set the dual DAC selected data holding register */
  *(__IO uint32_t *)tmp = data;
 8009f7e:	68bb      	ldr	r3, [r7, #8]
 8009f80:	68fa      	ldr	r2, [r7, #12]
 8009f82:	601a      	str	r2, [r3, #0]
}
 8009f84:	3714      	adds	r7, #20
 8009f86:	46bd      	mov	sp, r7
 8009f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8c:	4770      	bx	lr
 8009f8e:	bf00      	nop
 8009f90:	40007400 	.word	0x40007400

08009f94 <DAC_GetDataOutputValue>:
  *            @arg DAC_Channel_1: DAC Channel1 selected
  *            @arg DAC_Channel_2: DAC Channel2 selected
  * @retval The selected DAC channel data output value.
  */
uint16_t DAC_GetDataOutputValue(uint32_t DAC_Channel)
{
 8009f94:	b480      	push	{r7}
 8009f96:	b085      	sub	sp, #20
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmp = 0;
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  
  tmp = (uint32_t) DAC_BASE ;
 8009fa0:	4b08      	ldr	r3, [pc, #32]	; (8009fc4 <DAC_GetDataOutputValue+0x30>)
 8009fa2:	60fb      	str	r3, [r7, #12]
  tmp += DOR_OFFSET + ((uint32_t)DAC_Channel >> 2);
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	089a      	lsrs	r2, r3, #2
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	4413      	add	r3, r2
 8009fac:	332c      	adds	r3, #44	; 0x2c
 8009fae:	60fb      	str	r3, [r7, #12]
  
  /* Returns the DAC channel data output register value */
  return (uint16_t) (*(__IO uint32_t*) tmp);
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	b29b      	uxth	r3, r3
}
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	3714      	adds	r7, #20
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc0:	4770      	bx	lr
 8009fc2:	bf00      	nop
 8009fc4:	40007400 	.word	0x40007400

08009fc8 <DAC_DMACmd>:
  * @note   The DAC channel2 is mapped on DMA1 Stream 6 channel7 which must be
  *          already configured.    
  * @retval None
  */
void DAC_DMACmd(uint32_t DAC_Channel, FunctionalState NewState)
{
 8009fc8:	b480      	push	{r7}
 8009fca:	b083      	sub	sp, #12
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	6078      	str	r0, [r7, #4]
 8009fd0:	460b      	mov	r3, r1
 8009fd2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8009fd4:	78fb      	ldrb	r3, [r7, #3]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d00a      	beq.n	8009ff0 <DAC_DMACmd+0x28>
  {
    /* Enable the selected DAC channel DMA request */
    DAC->CR |= (DAC_CR_DMAEN1 << DAC_Channel);
 8009fda:	4b0d      	ldr	r3, [pc, #52]	; (800a010 <DAC_DMACmd+0x48>)
 8009fdc:	4a0c      	ldr	r2, [pc, #48]	; (800a010 <DAC_DMACmd+0x48>)
 8009fde:	6811      	ldr	r1, [r2, #0]
 8009fe0:	687a      	ldr	r2, [r7, #4]
 8009fe2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8009fe6:	fa00 f202 	lsl.w	r2, r0, r2
 8009fea:	430a      	orrs	r2, r1
 8009fec:	601a      	str	r2, [r3, #0]
 8009fee:	e00a      	b.n	800a006 <DAC_DMACmd+0x3e>
  }
  else
  {
    /* Disable the selected DAC channel DMA request */
    DAC->CR &= (~(DAC_CR_DMAEN1 << DAC_Channel));
 8009ff0:	4b07      	ldr	r3, [pc, #28]	; (800a010 <DAC_DMACmd+0x48>)
 8009ff2:	4a07      	ldr	r2, [pc, #28]	; (800a010 <DAC_DMACmd+0x48>)
 8009ff4:	6811      	ldr	r1, [r2, #0]
 8009ff6:	687a      	ldr	r2, [r7, #4]
 8009ff8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8009ffc:	fa00 f202 	lsl.w	r2, r0, r2
 800a000:	43d2      	mvns	r2, r2
 800a002:	400a      	ands	r2, r1
 800a004:	601a      	str	r2, [r3, #0]
  }
}
 800a006:	370c      	adds	r7, #12
 800a008:	46bd      	mov	sp, r7
 800a00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00e:	4770      	bx	lr
 800a010:	40007400 	.word	0x40007400

0800a014 <DAC_ITConfig>:
  * @param  NewState: new state of the specified DAC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */ 
void DAC_ITConfig(uint32_t DAC_Channel, uint32_t DAC_IT, FunctionalState NewState)  
{
 800a014:	b480      	push	{r7}
 800a016:	b085      	sub	sp, #20
 800a018:	af00      	add	r7, sp, #0
 800a01a:	60f8      	str	r0, [r7, #12]
 800a01c:	60b9      	str	r1, [r7, #8]
 800a01e:	4613      	mov	r3, r2
 800a020:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_DAC_IT(DAC_IT)); 

  if (NewState != DISABLE)
 800a022:	79fb      	ldrb	r3, [r7, #7]
 800a024:	2b00      	cmp	r3, #0
 800a026:	d009      	beq.n	800a03c <DAC_ITConfig+0x28>
  {
    /* Enable the selected DAC interrupts */
    DAC->CR |=  (DAC_IT << DAC_Channel);
 800a028:	4b0c      	ldr	r3, [pc, #48]	; (800a05c <DAC_ITConfig+0x48>)
 800a02a:	4a0c      	ldr	r2, [pc, #48]	; (800a05c <DAC_ITConfig+0x48>)
 800a02c:	6811      	ldr	r1, [r2, #0]
 800a02e:	68fa      	ldr	r2, [r7, #12]
 800a030:	68b8      	ldr	r0, [r7, #8]
 800a032:	fa00 f202 	lsl.w	r2, r0, r2
 800a036:	430a      	orrs	r2, r1
 800a038:	601a      	str	r2, [r3, #0]
 800a03a:	e009      	b.n	800a050 <DAC_ITConfig+0x3c>
  }
  else
  {
    /* Disable the selected DAC interrupts */
    DAC->CR &= (~(uint32_t)(DAC_IT << DAC_Channel));
 800a03c:	4b07      	ldr	r3, [pc, #28]	; (800a05c <DAC_ITConfig+0x48>)
 800a03e:	4a07      	ldr	r2, [pc, #28]	; (800a05c <DAC_ITConfig+0x48>)
 800a040:	6811      	ldr	r1, [r2, #0]
 800a042:	68fa      	ldr	r2, [r7, #12]
 800a044:	68b8      	ldr	r0, [r7, #8]
 800a046:	fa00 f202 	lsl.w	r2, r0, r2
 800a04a:	43d2      	mvns	r2, r2
 800a04c:	400a      	ands	r2, r1
 800a04e:	601a      	str	r2, [r3, #0]
  }
}
 800a050:	3714      	adds	r7, #20
 800a052:	46bd      	mov	sp, r7
 800a054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a058:	4770      	bx	lr
 800a05a:	bf00      	nop
 800a05c:	40007400 	.word	0x40007400

0800a060 <DAC_GetFlagStatus>:
  * @note   The DMA underrun occurs when a second external trigger arrives before the 
  *         acknowledgement for the first external trigger is received (first request).
  * @retval The new state of DAC_FLAG (SET or RESET).
  */
FlagStatus DAC_GetFlagStatus(uint32_t DAC_Channel, uint32_t DAC_FLAG)
{
 800a060:	b480      	push	{r7}
 800a062:	b085      	sub	sp, #20
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
 800a068:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 800a06a:	2300      	movs	r3, #0
 800a06c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_FLAG(DAC_FLAG));

  /* Check the status of the specified DAC flag */
  if ((DAC->SR & (DAC_FLAG << DAC_Channel)) != (uint8_t)RESET)
 800a06e:	4b0a      	ldr	r3, [pc, #40]	; (800a098 <DAC_GetFlagStatus+0x38>)
 800a070:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	6839      	ldr	r1, [r7, #0]
 800a076:	fa01 f303 	lsl.w	r3, r1, r3
 800a07a:	4013      	ands	r3, r2
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d002      	beq.n	800a086 <DAC_GetFlagStatus+0x26>
  {
    /* DAC_FLAG is set */
    bitstatus = SET;
 800a080:	2301      	movs	r3, #1
 800a082:	73fb      	strb	r3, [r7, #15]
 800a084:	e001      	b.n	800a08a <DAC_GetFlagStatus+0x2a>
  }
  else
  {
    /* DAC_FLAG is reset */
    bitstatus = RESET;
 800a086:	2300      	movs	r3, #0
 800a088:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the DAC_FLAG status */
  return  bitstatus;
 800a08a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a08c:	4618      	mov	r0, r3
 800a08e:	3714      	adds	r7, #20
 800a090:	46bd      	mov	sp, r7
 800a092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a096:	4770      	bx	lr
 800a098:	40007400 	.word	0x40007400

0800a09c <DAC_ClearFlag>:
  * @note   The DMA underrun occurs when a second external trigger arrives before the 
  *         acknowledgement for the first external trigger is received (first request).                           
  * @retval None
  */
void DAC_ClearFlag(uint32_t DAC_Channel, uint32_t DAC_FLAG)
{
 800a09c:	b480      	push	{r7}
 800a09e:	b083      	sub	sp, #12
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	6078      	str	r0, [r7, #4]
 800a0a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_FLAG(DAC_FLAG));

  /* Clear the selected DAC flags */
  DAC->SR = (DAC_FLAG << DAC_Channel);
 800a0a6:	4b05      	ldr	r3, [pc, #20]	; (800a0bc <DAC_ClearFlag+0x20>)
 800a0a8:	687a      	ldr	r2, [r7, #4]
 800a0aa:	6839      	ldr	r1, [r7, #0]
 800a0ac:	fa01 f202 	lsl.w	r2, r1, r2
 800a0b0:	635a      	str	r2, [r3, #52]	; 0x34
}
 800a0b2:	370c      	adds	r7, #12
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ba:	4770      	bx	lr
 800a0bc:	40007400 	.word	0x40007400

0800a0c0 <DAC_GetITStatus>:
  * @note   The DMA underrun occurs when a second external trigger arrives before the 
  *         acknowledgement for the first external trigger is received (first request).
  * @retval The new state of DAC_IT (SET or RESET).
  */
ITStatus DAC_GetITStatus(uint32_t DAC_Channel, uint32_t DAC_IT)
{
 800a0c0:	b480      	push	{r7}
 800a0c2:	b085      	sub	sp, #20
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
 800a0c8:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_IT(DAC_IT));

  /* Get the DAC_IT enable bit status */
  enablestatus = (DAC->CR & (DAC_IT << DAC_Channel)) ;
 800a0d2:	4b10      	ldr	r3, [pc, #64]	; (800a114 <DAC_GetITStatus+0x54>)
 800a0d4:	681a      	ldr	r2, [r3, #0]
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	6839      	ldr	r1, [r7, #0]
 800a0da:	fa01 f303 	lsl.w	r3, r1, r3
 800a0de:	4013      	ands	r3, r2
 800a0e0:	60bb      	str	r3, [r7, #8]
  
  /* Check the status of the specified DAC interrupt */
  if (((DAC->SR & (DAC_IT << DAC_Channel)) != (uint32_t)RESET) && enablestatus)
 800a0e2:	4b0c      	ldr	r3, [pc, #48]	; (800a114 <DAC_GetITStatus+0x54>)
 800a0e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	6839      	ldr	r1, [r7, #0]
 800a0ea:	fa01 f303 	lsl.w	r3, r1, r3
 800a0ee:	4013      	ands	r3, r2
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d005      	beq.n	800a100 <DAC_GetITStatus+0x40>
 800a0f4:	68bb      	ldr	r3, [r7, #8]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d002      	beq.n	800a100 <DAC_GetITStatus+0x40>
  {
    /* DAC_IT is set */
    bitstatus = SET;
 800a0fa:	2301      	movs	r3, #1
 800a0fc:	73fb      	strb	r3, [r7, #15]
 800a0fe:	e001      	b.n	800a104 <DAC_GetITStatus+0x44>
  }
  else
  {
    /* DAC_IT is reset */
    bitstatus = RESET;
 800a100:	2300      	movs	r3, #0
 800a102:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the DAC_IT status */
  return  bitstatus;
 800a104:	7bfb      	ldrb	r3, [r7, #15]
}
 800a106:	4618      	mov	r0, r3
 800a108:	3714      	adds	r7, #20
 800a10a:	46bd      	mov	sp, r7
 800a10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a110:	4770      	bx	lr
 800a112:	bf00      	nop
 800a114:	40007400 	.word	0x40007400

0800a118 <DAC_ClearITPendingBit>:
  * @note   The DMA underrun occurs when a second external trigger arrives before the 
  *         acknowledgement for the first external trigger is received (first request).                           
  * @retval None
  */
void DAC_ClearITPendingBit(uint32_t DAC_Channel, uint32_t DAC_IT)
{
 800a118:	b480      	push	{r7}
 800a11a:	b083      	sub	sp, #12
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	6078      	str	r0, [r7, #4]
 800a120:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_IT(DAC_IT)); 

  /* Clear the selected DAC interrupt pending bits */
  DAC->SR = (DAC_IT << DAC_Channel);
 800a122:	4b05      	ldr	r3, [pc, #20]	; (800a138 <DAC_ClearITPendingBit+0x20>)
 800a124:	687a      	ldr	r2, [r7, #4]
 800a126:	6839      	ldr	r1, [r7, #0]
 800a128:	fa01 f202 	lsl.w	r2, r1, r2
 800a12c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800a12e:	370c      	adds	r7, #12
 800a130:	46bd      	mov	sp, r7
 800a132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a136:	4770      	bx	lr
 800a138:	40007400 	.word	0x40007400

0800a13c <DBGMCU_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @param  None
  * @retval Device revision identifier
  */
uint32_t DBGMCU_GetREVID(void)
{
 800a13c:	b480      	push	{r7}
 800a13e:	af00      	add	r7, sp, #0
   return(DBGMCU->IDCODE >> 16);
 800a140:	4b03      	ldr	r3, [pc, #12]	; (800a150 <DBGMCU_GetREVID+0x14>)
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	0c1b      	lsrs	r3, r3, #16
}
 800a146:	4618      	mov	r0, r3
 800a148:	46bd      	mov	sp, r7
 800a14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14e:	4770      	bx	lr
 800a150:	e0042000 	.word	0xe0042000

0800a154 <DBGMCU_GetDEVID>:
  * @brief  Returns the device identifier.
  * @param  None
  * @retval Device identifier
  */
uint32_t DBGMCU_GetDEVID(void)
{
 800a154:	b480      	push	{r7}
 800a156:	af00      	add	r7, sp, #0
   return(DBGMCU->IDCODE & IDCODE_DEVID_MASK);
 800a158:	4b04      	ldr	r3, [pc, #16]	; (800a16c <DBGMCU_GetDEVID+0x18>)
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 800a160:	4618      	mov	r0, r3
 800a162:	46bd      	mov	sp, r7
 800a164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a168:	4770      	bx	lr
 800a16a:	bf00      	nop
 800a16c:	e0042000 	.word	0xe0042000

0800a170 <DBGMCU_Config>:
  * @param  NewState: new state of the specified low power mode in Debug mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DBGMCU_Config(uint32_t DBGMCU_Periph, FunctionalState NewState)
{
 800a170:	b480      	push	{r7}
 800a172:	b083      	sub	sp, #12
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]
 800a178:	460b      	mov	r3, r1
 800a17a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DBGMCU_PERIPH(DBGMCU_Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800a17c:	78fb      	ldrb	r3, [r7, #3]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d006      	beq.n	800a190 <DBGMCU_Config+0x20>
  {
    DBGMCU->CR |= DBGMCU_Periph;
 800a182:	4b09      	ldr	r3, [pc, #36]	; (800a1a8 <DBGMCU_Config+0x38>)
 800a184:	4a08      	ldr	r2, [pc, #32]	; (800a1a8 <DBGMCU_Config+0x38>)
 800a186:	6851      	ldr	r1, [r2, #4]
 800a188:	687a      	ldr	r2, [r7, #4]
 800a18a:	430a      	orrs	r2, r1
 800a18c:	605a      	str	r2, [r3, #4]
 800a18e:	e006      	b.n	800a19e <DBGMCU_Config+0x2e>
  }
  else
  {
    DBGMCU->CR &= ~DBGMCU_Periph;
 800a190:	4b05      	ldr	r3, [pc, #20]	; (800a1a8 <DBGMCU_Config+0x38>)
 800a192:	4a05      	ldr	r2, [pc, #20]	; (800a1a8 <DBGMCU_Config+0x38>)
 800a194:	6851      	ldr	r1, [r2, #4]
 800a196:	687a      	ldr	r2, [r7, #4]
 800a198:	43d2      	mvns	r2, r2
 800a19a:	400a      	ands	r2, r1
 800a19c:	605a      	str	r2, [r3, #4]
  }
}
 800a19e:	370c      	adds	r7, #12
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a6:	4770      	bx	lr
 800a1a8:	e0042000 	.word	0xe0042000

0800a1ac <DBGMCU_APB1PeriphConfig>:
  *     @arg DBGMCU_CAN1_STOP: Debug CAN2 stopped when Core is halted        
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DBGMCU_APB1PeriphConfig(uint32_t DBGMCU_Periph, FunctionalState NewState)
{
 800a1ac:	b480      	push	{r7}
 800a1ae:	b083      	sub	sp, #12
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
 800a1b4:	460b      	mov	r3, r1
 800a1b6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DBGMCU_APB1PERIPH(DBGMCU_Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800a1b8:	78fb      	ldrb	r3, [r7, #3]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d006      	beq.n	800a1cc <DBGMCU_APB1PeriphConfig+0x20>
  {
    DBGMCU->APB1FZ |= DBGMCU_Periph;
 800a1be:	4b09      	ldr	r3, [pc, #36]	; (800a1e4 <DBGMCU_APB1PeriphConfig+0x38>)
 800a1c0:	4a08      	ldr	r2, [pc, #32]	; (800a1e4 <DBGMCU_APB1PeriphConfig+0x38>)
 800a1c2:	6891      	ldr	r1, [r2, #8]
 800a1c4:	687a      	ldr	r2, [r7, #4]
 800a1c6:	430a      	orrs	r2, r1
 800a1c8:	609a      	str	r2, [r3, #8]
 800a1ca:	e006      	b.n	800a1da <DBGMCU_APB1PeriphConfig+0x2e>
  }
  else
  {
    DBGMCU->APB1FZ &= ~DBGMCU_Periph;
 800a1cc:	4b05      	ldr	r3, [pc, #20]	; (800a1e4 <DBGMCU_APB1PeriphConfig+0x38>)
 800a1ce:	4a05      	ldr	r2, [pc, #20]	; (800a1e4 <DBGMCU_APB1PeriphConfig+0x38>)
 800a1d0:	6891      	ldr	r1, [r2, #8]
 800a1d2:	687a      	ldr	r2, [r7, #4]
 800a1d4:	43d2      	mvns	r2, r2
 800a1d6:	400a      	ands	r2, r1
 800a1d8:	609a      	str	r2, [r3, #8]
  }
}
 800a1da:	370c      	adds	r7, #12
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e2:	4770      	bx	lr
 800a1e4:	e0042000 	.word	0xe0042000

0800a1e8 <DBGMCU_APB2PeriphConfig>:
  * @param  NewState: new state of the specified peripheral in Debug mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DBGMCU_APB2PeriphConfig(uint32_t DBGMCU_Periph, FunctionalState NewState)
{
 800a1e8:	b480      	push	{r7}
 800a1ea:	b083      	sub	sp, #12
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
 800a1f0:	460b      	mov	r3, r1
 800a1f2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DBGMCU_APB2PERIPH(DBGMCU_Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800a1f4:	78fb      	ldrb	r3, [r7, #3]
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d006      	beq.n	800a208 <DBGMCU_APB2PeriphConfig+0x20>
  {
    DBGMCU->APB2FZ |= DBGMCU_Periph;
 800a1fa:	4b09      	ldr	r3, [pc, #36]	; (800a220 <DBGMCU_APB2PeriphConfig+0x38>)
 800a1fc:	4a08      	ldr	r2, [pc, #32]	; (800a220 <DBGMCU_APB2PeriphConfig+0x38>)
 800a1fe:	68d1      	ldr	r1, [r2, #12]
 800a200:	687a      	ldr	r2, [r7, #4]
 800a202:	430a      	orrs	r2, r1
 800a204:	60da      	str	r2, [r3, #12]
 800a206:	e006      	b.n	800a216 <DBGMCU_APB2PeriphConfig+0x2e>
  }
  else
  {
    DBGMCU->APB2FZ &= ~DBGMCU_Periph;
 800a208:	4b05      	ldr	r3, [pc, #20]	; (800a220 <DBGMCU_APB2PeriphConfig+0x38>)
 800a20a:	4a05      	ldr	r2, [pc, #20]	; (800a220 <DBGMCU_APB2PeriphConfig+0x38>)
 800a20c:	68d1      	ldr	r1, [r2, #12]
 800a20e:	687a      	ldr	r2, [r7, #4]
 800a210:	43d2      	mvns	r2, r2
 800a212:	400a      	ands	r2, r1
 800a214:	60da      	str	r2, [r3, #12]
  }
}
 800a216:	370c      	adds	r7, #12
 800a218:	46bd      	mov	sp, r7
 800a21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21e:	4770      	bx	lr
 800a220:	e0042000 	.word	0xe0042000

0800a224 <DCMI_DeInit>:
  * @brief  Deinitializes the DCMI registers to their default reset values.
  * @param  None
  * @retval None
  */
void DCMI_DeInit(void)
{
 800a224:	b480      	push	{r7}
 800a226:	af00      	add	r7, sp, #0
  DCMI->CR = 0x0;
 800a228:	4b0c      	ldr	r3, [pc, #48]	; (800a25c <DCMI_DeInit+0x38>)
 800a22a:	2200      	movs	r2, #0
 800a22c:	601a      	str	r2, [r3, #0]
  DCMI->IER = 0x0;
 800a22e:	4b0b      	ldr	r3, [pc, #44]	; (800a25c <DCMI_DeInit+0x38>)
 800a230:	2200      	movs	r2, #0
 800a232:	60da      	str	r2, [r3, #12]
  DCMI->ICR = 0x1F;
 800a234:	4b09      	ldr	r3, [pc, #36]	; (800a25c <DCMI_DeInit+0x38>)
 800a236:	221f      	movs	r2, #31
 800a238:	615a      	str	r2, [r3, #20]
  DCMI->ESCR = 0x0;
 800a23a:	4b08      	ldr	r3, [pc, #32]	; (800a25c <DCMI_DeInit+0x38>)
 800a23c:	2200      	movs	r2, #0
 800a23e:	619a      	str	r2, [r3, #24]
  DCMI->ESUR = 0x0;
 800a240:	4b06      	ldr	r3, [pc, #24]	; (800a25c <DCMI_DeInit+0x38>)
 800a242:	2200      	movs	r2, #0
 800a244:	61da      	str	r2, [r3, #28]
  DCMI->CWSTRTR = 0x0;
 800a246:	4b05      	ldr	r3, [pc, #20]	; (800a25c <DCMI_DeInit+0x38>)
 800a248:	2200      	movs	r2, #0
 800a24a:	621a      	str	r2, [r3, #32]
  DCMI->CWSIZER = 0x0;
 800a24c:	4b03      	ldr	r3, [pc, #12]	; (800a25c <DCMI_DeInit+0x38>)
 800a24e:	2200      	movs	r2, #0
 800a250:	625a      	str	r2, [r3, #36]	; 0x24
}
 800a252:	46bd      	mov	sp, r7
 800a254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a258:	4770      	bx	lr
 800a25a:	bf00      	nop
 800a25c:	50050000 	.word	0x50050000

0800a260 <DCMI_Init>:
  * @param  DCMI_InitStruct: pointer to a DCMI_InitTypeDef structure that contains 
  *         the configuration information for the DCMI.
  * @retval None
  */
void DCMI_Init(DCMI_InitTypeDef* DCMI_InitStruct)
{
 800a260:	b480      	push	{r7}
 800a262:	b085      	sub	sp, #20
 800a264:	af00      	add	r7, sp, #0
 800a266:	6078      	str	r0, [r7, #4]
  uint32_t temp = 0x0;
 800a268:	2300      	movs	r3, #0
 800a26a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DCMI_CAPTURE_RATE(DCMI_InitStruct->DCMI_CaptureRate));
  assert_param(IS_DCMI_EXTENDED_DATA(DCMI_InitStruct->DCMI_ExtendedDataMode));

  /* The DCMI configuration registers should be programmed correctly before 
  enabling the CR_ENABLE Bit and the CR_CAPTURE Bit */
  DCMI->CR &= ~(DCMI_CR_ENABLE | DCMI_CR_CAPTURE);
 800a26c:	4a1a      	ldr	r2, [pc, #104]	; (800a2d8 <DCMI_Init+0x78>)
 800a26e:	4b1a      	ldr	r3, [pc, #104]	; (800a2d8 <DCMI_Init+0x78>)
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a276:	f023 0301 	bic.w	r3, r3, #1
 800a27a:	6013      	str	r3, [r2, #0]
   
  /* Reset the old DCMI configuration */
  temp = DCMI->CR;
 800a27c:	4b16      	ldr	r3, [pc, #88]	; (800a2d8 <DCMI_Init+0x78>)
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	60fb      	str	r3, [r7, #12]
  
  temp &= ~((uint32_t)DCMI_CR_CM     | DCMI_CR_ESS   | DCMI_CR_PCKPOL |
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800a288:	f023 0302 	bic.w	r3, r3, #2
 800a28c:	60fb      	str	r3, [r7, #12]
                      DCMI_CR_HSPOL  | DCMI_CR_VSPOL | DCMI_CR_FCRC_0 | 
                      DCMI_CR_FCRC_1 | DCMI_CR_EDM_0 | DCMI_CR_EDM_1); 
                  
  /* Sets the new configuration of the DCMI peripheral */
  temp |= ((uint32_t)DCMI_InitStruct->DCMI_CaptureMode |
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	881a      	ldrh	r2, [r3, #0]
                     DCMI_InitStruct->DCMI_SynchroMode |
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	885b      	ldrh	r3, [r3, #2]
                     DCMI_InitStruct->DCMI_PCKPolarity |
                     DCMI_InitStruct->DCMI_VSPolarity |
                     DCMI_InitStruct->DCMI_HSPolarity |
                     DCMI_InitStruct->DCMI_CaptureRate |
 800a296:	4313      	orrs	r3, r2
 800a298:	b29a      	uxth	r2, r3
                      DCMI_CR_FCRC_1 | DCMI_CR_EDM_0 | DCMI_CR_EDM_1); 
                  
  /* Sets the new configuration of the DCMI peripheral */
  temp |= ((uint32_t)DCMI_InitStruct->DCMI_CaptureMode |
                     DCMI_InitStruct->DCMI_SynchroMode |
                     DCMI_InitStruct->DCMI_PCKPolarity |
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	889b      	ldrh	r3, [r3, #4]
                     DCMI_InitStruct->DCMI_VSPolarity |
                     DCMI_InitStruct->DCMI_HSPolarity |
                     DCMI_InitStruct->DCMI_CaptureRate |
 800a29e:	4313      	orrs	r3, r2
 800a2a0:	b29a      	uxth	r2, r3
                  
  /* Sets the new configuration of the DCMI peripheral */
  temp |= ((uint32_t)DCMI_InitStruct->DCMI_CaptureMode |
                     DCMI_InitStruct->DCMI_SynchroMode |
                     DCMI_InitStruct->DCMI_PCKPolarity |
                     DCMI_InitStruct->DCMI_VSPolarity |
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	88db      	ldrh	r3, [r3, #6]
                     DCMI_InitStruct->DCMI_HSPolarity |
                     DCMI_InitStruct->DCMI_CaptureRate |
 800a2a6:	4313      	orrs	r3, r2
 800a2a8:	b29a      	uxth	r2, r3
  /* Sets the new configuration of the DCMI peripheral */
  temp |= ((uint32_t)DCMI_InitStruct->DCMI_CaptureMode |
                     DCMI_InitStruct->DCMI_SynchroMode |
                     DCMI_InitStruct->DCMI_PCKPolarity |
                     DCMI_InitStruct->DCMI_VSPolarity |
                     DCMI_InitStruct->DCMI_HSPolarity |
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	891b      	ldrh	r3, [r3, #8]
                     DCMI_InitStruct->DCMI_CaptureRate |
 800a2ae:	4313      	orrs	r3, r2
 800a2b0:	b29a      	uxth	r2, r3
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	895b      	ldrh	r3, [r3, #10]
 800a2b6:	4313      	orrs	r3, r2
 800a2b8:	b29a      	uxth	r2, r3
                     DCMI_InitStruct->DCMI_ExtendedDataMode);
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	899b      	ldrh	r3, [r3, #12]
  temp |= ((uint32_t)DCMI_InitStruct->DCMI_CaptureMode |
                     DCMI_InitStruct->DCMI_SynchroMode |
                     DCMI_InitStruct->DCMI_PCKPolarity |
                     DCMI_InitStruct->DCMI_VSPolarity |
                     DCMI_InitStruct->DCMI_HSPolarity |
                     DCMI_InitStruct->DCMI_CaptureRate |
 800a2be:	4313      	orrs	r3, r2
 800a2c0:	b29b      	uxth	r3, r3
  temp &= ~((uint32_t)DCMI_CR_CM     | DCMI_CR_ESS   | DCMI_CR_PCKPOL |
                      DCMI_CR_HSPOL  | DCMI_CR_VSPOL | DCMI_CR_FCRC_0 | 
                      DCMI_CR_FCRC_1 | DCMI_CR_EDM_0 | DCMI_CR_EDM_1); 
                  
  /* Sets the new configuration of the DCMI peripheral */
  temp |= ((uint32_t)DCMI_InitStruct->DCMI_CaptureMode |
 800a2c2:	68fa      	ldr	r2, [r7, #12]
 800a2c4:	4313      	orrs	r3, r2
 800a2c6:	60fb      	str	r3, [r7, #12]
                     DCMI_InitStruct->DCMI_VSPolarity |
                     DCMI_InitStruct->DCMI_HSPolarity |
                     DCMI_InitStruct->DCMI_CaptureRate |
                     DCMI_InitStruct->DCMI_ExtendedDataMode);

  DCMI->CR = temp;                              
 800a2c8:	4b03      	ldr	r3, [pc, #12]	; (800a2d8 <DCMI_Init+0x78>)
 800a2ca:	68fa      	ldr	r2, [r7, #12]
 800a2cc:	601a      	str	r2, [r3, #0]
}
 800a2ce:	3714      	adds	r7, #20
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d6:	4770      	bx	lr
 800a2d8:	50050000 	.word	0x50050000

0800a2dc <DCMI_StructInit>:
  * @param  DCMI_InitStruct : pointer to a DCMI_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void DCMI_StructInit(DCMI_InitTypeDef* DCMI_InitStruct)
{
 800a2dc:	b480      	push	{r7}
 800a2de:	b083      	sub	sp, #12
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  DCMI_InitStruct->DCMI_CaptureMode = DCMI_CaptureMode_Continuous;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	2200      	movs	r2, #0
 800a2e8:	801a      	strh	r2, [r3, #0]
  DCMI_InitStruct->DCMI_SynchroMode = DCMI_SynchroMode_Hardware;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	805a      	strh	r2, [r3, #2]
  DCMI_InitStruct->DCMI_PCKPolarity = DCMI_PCKPolarity_Falling;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	2200      	movs	r2, #0
 800a2f4:	809a      	strh	r2, [r3, #4]
  DCMI_InitStruct->DCMI_VSPolarity = DCMI_VSPolarity_Low;
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	2200      	movs	r2, #0
 800a2fa:	80da      	strh	r2, [r3, #6]
  DCMI_InitStruct->DCMI_HSPolarity = DCMI_HSPolarity_Low;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	2200      	movs	r2, #0
 800a300:	811a      	strh	r2, [r3, #8]
  DCMI_InitStruct->DCMI_CaptureRate = DCMI_CaptureRate_All_Frame;
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	2200      	movs	r2, #0
 800a306:	815a      	strh	r2, [r3, #10]
  DCMI_InitStruct->DCMI_ExtendedDataMode = DCMI_ExtendedDataMode_8b;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	2200      	movs	r2, #0
 800a30c:	819a      	strh	r2, [r3, #12]
}
 800a30e:	370c      	adds	r7, #12
 800a310:	46bd      	mov	sp, r7
 800a312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a316:	4770      	bx	lr

0800a318 <DCMI_CROPConfig>:
  * @param  DCMI_CROPInitStruct:  pointer to a DCMI_CROPInitTypeDef structure that 
  *         contains the configuration information for the DCMI peripheral CROP mode.
  * @retval None
  */
void DCMI_CROPConfig(DCMI_CROPInitTypeDef* DCMI_CROPInitStruct)
{  
 800a318:	b480      	push	{r7}
 800a31a:	b083      	sub	sp, #12
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	6078      	str	r0, [r7, #4]
  /* Sets the CROP window coordinates */
  DCMI->CWSTRTR = (uint32_t)((uint32_t)DCMI_CROPInitStruct->DCMI_HorizontalOffsetCount |
 800a320:	4b0b      	ldr	r3, [pc, #44]	; (800a350 <DCMI_CROPConfig+0x38>)
 800a322:	687a      	ldr	r2, [r7, #4]
 800a324:	8852      	ldrh	r2, [r2, #2]
 800a326:	4611      	mov	r1, r2
                  ((uint32_t)DCMI_CROPInitStruct->DCMI_VerticalStartLine << 16));
 800a328:	687a      	ldr	r2, [r7, #4]
 800a32a:	8812      	ldrh	r2, [r2, #0]
 800a32c:	0412      	lsls	r2, r2, #16
  * @retval None
  */
void DCMI_CROPConfig(DCMI_CROPInitTypeDef* DCMI_CROPInitStruct)
{  
  /* Sets the CROP window coordinates */
  DCMI->CWSTRTR = (uint32_t)((uint32_t)DCMI_CROPInitStruct->DCMI_HorizontalOffsetCount |
 800a32e:	430a      	orrs	r2, r1
 800a330:	621a      	str	r2, [r3, #32]
                  ((uint32_t)DCMI_CROPInitStruct->DCMI_VerticalStartLine << 16));

  /* Sets the CROP window size */
  DCMI->CWSIZER = (uint32_t)(DCMI_CROPInitStruct->DCMI_CaptureCount |
 800a332:	4b07      	ldr	r3, [pc, #28]	; (800a350 <DCMI_CROPConfig+0x38>)
 800a334:	687a      	ldr	r2, [r7, #4]
 800a336:	88d2      	ldrh	r2, [r2, #6]
 800a338:	4611      	mov	r1, r2
                  ((uint32_t)DCMI_CROPInitStruct->DCMI_VerticalLineCount << 16));
 800a33a:	687a      	ldr	r2, [r7, #4]
 800a33c:	8892      	ldrh	r2, [r2, #4]
 800a33e:	0412      	lsls	r2, r2, #16
  /* Sets the CROP window coordinates */
  DCMI->CWSTRTR = (uint32_t)((uint32_t)DCMI_CROPInitStruct->DCMI_HorizontalOffsetCount |
                  ((uint32_t)DCMI_CROPInitStruct->DCMI_VerticalStartLine << 16));

  /* Sets the CROP window size */
  DCMI->CWSIZER = (uint32_t)(DCMI_CROPInitStruct->DCMI_CaptureCount |
 800a340:	430a      	orrs	r2, r1
 800a342:	625a      	str	r2, [r3, #36]	; 0x24
                  ((uint32_t)DCMI_CROPInitStruct->DCMI_VerticalLineCount << 16));
}
 800a344:	370c      	adds	r7, #12
 800a346:	46bd      	mov	sp, r7
 800a348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34c:	4770      	bx	lr
 800a34e:	bf00      	nop
 800a350:	50050000 	.word	0x50050000

0800a354 <DCMI_CROPCmd>:
  * @param  NewState: new state of the DCMI Crop feature. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DCMI_CROPCmd(FunctionalState NewState)
{
 800a354:	b480      	push	{r7}
 800a356:	b083      	sub	sp, #12
 800a358:	af00      	add	r7, sp, #0
 800a35a:	4603      	mov	r3, r0
 800a35c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 800a35e:	79fb      	ldrb	r3, [r7, #7]
 800a360:	2b00      	cmp	r3, #0
 800a362:	d006      	beq.n	800a372 <DCMI_CROPCmd+0x1e>
  {
    /* Enable the DCMI Crop feature */
    DCMI->CR |= (uint32_t)DCMI_CR_CROP;
 800a364:	4b08      	ldr	r3, [pc, #32]	; (800a388 <DCMI_CROPCmd+0x34>)
 800a366:	4a08      	ldr	r2, [pc, #32]	; (800a388 <DCMI_CROPCmd+0x34>)
 800a368:	6812      	ldr	r2, [r2, #0]
 800a36a:	f042 0204 	orr.w	r2, r2, #4
 800a36e:	601a      	str	r2, [r3, #0]
 800a370:	e005      	b.n	800a37e <DCMI_CROPCmd+0x2a>
  }
  else
  {
    /* Disable the DCMI Crop feature */
    DCMI->CR &= ~(uint32_t)DCMI_CR_CROP;
 800a372:	4b05      	ldr	r3, [pc, #20]	; (800a388 <DCMI_CROPCmd+0x34>)
 800a374:	4a04      	ldr	r2, [pc, #16]	; (800a388 <DCMI_CROPCmd+0x34>)
 800a376:	6812      	ldr	r2, [r2, #0]
 800a378:	f022 0204 	bic.w	r2, r2, #4
 800a37c:	601a      	str	r2, [r3, #0]
  }
}
 800a37e:	370c      	adds	r7, #12
 800a380:	46bd      	mov	sp, r7
 800a382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a386:	4770      	bx	lr
 800a388:	50050000 	.word	0x50050000

0800a38c <DCMI_SetEmbeddedSynchroCodes>:
  * @param  DCMI_CodesInitTypeDef: pointer to a DCMI_CodesInitTypeDef structure that
  *         contains the embedded synchronization codes for the DCMI peripheral.
  * @retval None
  */
void DCMI_SetEmbeddedSynchroCodes(DCMI_CodesInitTypeDef* DCMI_CodesInitStruct)
{
 800a38c:	b480      	push	{r7}
 800a38e:	b083      	sub	sp, #12
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
  DCMI->ESCR = (uint32_t)(DCMI_CodesInitStruct->DCMI_FrameStartCode |
 800a394:	4b0a      	ldr	r3, [pc, #40]	; (800a3c0 <DCMI_SetEmbeddedSynchroCodes+0x34>)
 800a396:	687a      	ldr	r2, [r7, #4]
 800a398:	7812      	ldrb	r2, [r2, #0]
 800a39a:	4611      	mov	r1, r2
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineStartCode << 8)|
 800a39c:	687a      	ldr	r2, [r7, #4]
 800a39e:	7852      	ldrb	r2, [r2, #1]
 800a3a0:	0212      	lsls	r2, r2, #8
  *         contains the embedded synchronization codes for the DCMI peripheral.
  * @retval None
  */
void DCMI_SetEmbeddedSynchroCodes(DCMI_CodesInitTypeDef* DCMI_CodesInitStruct)
{
  DCMI->ESCR = (uint32_t)(DCMI_CodesInitStruct->DCMI_FrameStartCode |
 800a3a2:	4311      	orrs	r1, r2
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineStartCode << 8)|
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineEndCode << 16)|
 800a3a4:	687a      	ldr	r2, [r7, #4]
 800a3a6:	7892      	ldrb	r2, [r2, #2]
 800a3a8:	0412      	lsls	r2, r2, #16
  * @retval None
  */
void DCMI_SetEmbeddedSynchroCodes(DCMI_CodesInitTypeDef* DCMI_CodesInitStruct)
{
  DCMI->ESCR = (uint32_t)(DCMI_CodesInitStruct->DCMI_FrameStartCode |
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineStartCode << 8)|
 800a3aa:	4311      	orrs	r1, r2
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineEndCode << 16)|
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_FrameEndCode << 24));
 800a3ac:	687a      	ldr	r2, [r7, #4]
 800a3ae:	78d2      	ldrb	r2, [r2, #3]
 800a3b0:	0612      	lsls	r2, r2, #24
  *         contains the embedded synchronization codes for the DCMI peripheral.
  * @retval None
  */
void DCMI_SetEmbeddedSynchroCodes(DCMI_CodesInitTypeDef* DCMI_CodesInitStruct)
{
  DCMI->ESCR = (uint32_t)(DCMI_CodesInitStruct->DCMI_FrameStartCode |
 800a3b2:	430a      	orrs	r2, r1
 800a3b4:	619a      	str	r2, [r3, #24]
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineStartCode << 8)|
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineEndCode << 16)|
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_FrameEndCode << 24));
}
 800a3b6:	370c      	adds	r7, #12
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3be:	4770      	bx	lr
 800a3c0:	50050000 	.word	0x50050000

0800a3c4 <DCMI_JPEGCmd>:
  * @param  NewState: new state of the DCMI JPEG format. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DCMI_JPEGCmd(FunctionalState NewState)
{
 800a3c4:	b480      	push	{r7}
 800a3c6:	b083      	sub	sp, #12
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	4603      	mov	r3, r0
 800a3cc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 
  if (NewState != DISABLE)
 800a3ce:	79fb      	ldrb	r3, [r7, #7]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d006      	beq.n	800a3e2 <DCMI_JPEGCmd+0x1e>
  {
    /* Enable the DCMI JPEG format */
    DCMI->CR |= (uint32_t)DCMI_CR_JPEG;
 800a3d4:	4b08      	ldr	r3, [pc, #32]	; (800a3f8 <DCMI_JPEGCmd+0x34>)
 800a3d6:	4a08      	ldr	r2, [pc, #32]	; (800a3f8 <DCMI_JPEGCmd+0x34>)
 800a3d8:	6812      	ldr	r2, [r2, #0]
 800a3da:	f042 0208 	orr.w	r2, r2, #8
 800a3de:	601a      	str	r2, [r3, #0]
 800a3e0:	e005      	b.n	800a3ee <DCMI_JPEGCmd+0x2a>
  }
  else
  {
    /* Disable the DCMI JPEG format */
    DCMI->CR &= ~(uint32_t)DCMI_CR_JPEG;
 800a3e2:	4b05      	ldr	r3, [pc, #20]	; (800a3f8 <DCMI_JPEGCmd+0x34>)
 800a3e4:	4a04      	ldr	r2, [pc, #16]	; (800a3f8 <DCMI_JPEGCmd+0x34>)
 800a3e6:	6812      	ldr	r2, [r2, #0]
 800a3e8:	f022 0208 	bic.w	r2, r2, #8
 800a3ec:	601a      	str	r2, [r3, #0]
  }
}
 800a3ee:	370c      	adds	r7, #12
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f6:	4770      	bx	lr
 800a3f8:	50050000 	.word	0x50050000

0800a3fc <DCMI_Cmd>:
  * @param  NewState: new state of the DCMI interface. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DCMI_Cmd(FunctionalState NewState)
{
 800a3fc:	b480      	push	{r7}
 800a3fe:	b083      	sub	sp, #12
 800a400:	af00      	add	r7, sp, #0
 800a402:	4603      	mov	r3, r0
 800a404:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800a406:	79fb      	ldrb	r3, [r7, #7]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d006      	beq.n	800a41a <DCMI_Cmd+0x1e>
  {
    /* Enable the DCMI by setting ENABLE bit */
    DCMI->CR |= (uint32_t)DCMI_CR_ENABLE;
 800a40c:	4b08      	ldr	r3, [pc, #32]	; (800a430 <DCMI_Cmd+0x34>)
 800a40e:	4a08      	ldr	r2, [pc, #32]	; (800a430 <DCMI_Cmd+0x34>)
 800a410:	6812      	ldr	r2, [r2, #0]
 800a412:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a416:	601a      	str	r2, [r3, #0]
 800a418:	e005      	b.n	800a426 <DCMI_Cmd+0x2a>
  }
  else
  {
    /* Disable the DCMI by clearing ENABLE bit */
    DCMI->CR &= ~(uint32_t)DCMI_CR_ENABLE;
 800a41a:	4b05      	ldr	r3, [pc, #20]	; (800a430 <DCMI_Cmd+0x34>)
 800a41c:	4a04      	ldr	r2, [pc, #16]	; (800a430 <DCMI_Cmd+0x34>)
 800a41e:	6812      	ldr	r2, [r2, #0]
 800a420:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a424:	601a      	str	r2, [r3, #0]
  }
}
 800a426:	370c      	adds	r7, #12
 800a428:	46bd      	mov	sp, r7
 800a42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42e:	4770      	bx	lr
 800a430:	50050000 	.word	0x50050000

0800a434 <DCMI_CaptureCmd>:
  * @param  NewState: new state of the DCMI capture. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DCMI_CaptureCmd(FunctionalState NewState)
{
 800a434:	b480      	push	{r7}
 800a436:	b083      	sub	sp, #12
 800a438:	af00      	add	r7, sp, #0
 800a43a:	4603      	mov	r3, r0
 800a43c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 800a43e:	79fb      	ldrb	r3, [r7, #7]
 800a440:	2b00      	cmp	r3, #0
 800a442:	d006      	beq.n	800a452 <DCMI_CaptureCmd+0x1e>
  {
    /* Enable the DCMI Capture */
    DCMI->CR |= (uint32_t)DCMI_CR_CAPTURE;
 800a444:	4b08      	ldr	r3, [pc, #32]	; (800a468 <DCMI_CaptureCmd+0x34>)
 800a446:	4a08      	ldr	r2, [pc, #32]	; (800a468 <DCMI_CaptureCmd+0x34>)
 800a448:	6812      	ldr	r2, [r2, #0]
 800a44a:	f042 0201 	orr.w	r2, r2, #1
 800a44e:	601a      	str	r2, [r3, #0]
 800a450:	e005      	b.n	800a45e <DCMI_CaptureCmd+0x2a>
  }
  else
  {
    /* Disable the DCMI Capture */
    DCMI->CR &= ~(uint32_t)DCMI_CR_CAPTURE;
 800a452:	4b05      	ldr	r3, [pc, #20]	; (800a468 <DCMI_CaptureCmd+0x34>)
 800a454:	4a04      	ldr	r2, [pc, #16]	; (800a468 <DCMI_CaptureCmd+0x34>)
 800a456:	6812      	ldr	r2, [r2, #0]
 800a458:	f022 0201 	bic.w	r2, r2, #1
 800a45c:	601a      	str	r2, [r3, #0]
  }
}
 800a45e:	370c      	adds	r7, #12
 800a460:	46bd      	mov	sp, r7
 800a462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a466:	4770      	bx	lr
 800a468:	50050000 	.word	0x50050000

0800a46c <DCMI_ReadData>:
  * @brief  Reads the data stored in the DR register.
  * @param  None 
  * @retval Data register value
  */
uint32_t DCMI_ReadData(void)
{
 800a46c:	b480      	push	{r7}
 800a46e:	af00      	add	r7, sp, #0
  return DCMI->DR;
 800a470:	4b03      	ldr	r3, [pc, #12]	; (800a480 <DCMI_ReadData+0x14>)
 800a472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 800a474:	4618      	mov	r0, r3
 800a476:	46bd      	mov	sp, r7
 800a478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47c:	4770      	bx	lr
 800a47e:	bf00      	nop
 800a480:	50050000 	.word	0x50050000

0800a484 <DCMI_ITConfig>:
  * @param  NewState: new state of the specified DCMI interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DCMI_ITConfig(uint16_t DCMI_IT, FunctionalState NewState)
{
 800a484:	b480      	push	{r7}
 800a486:	b083      	sub	sp, #12
 800a488:	af00      	add	r7, sp, #0
 800a48a:	4602      	mov	r2, r0
 800a48c:	460b      	mov	r3, r1
 800a48e:	80fa      	strh	r2, [r7, #6]
 800a490:	717b      	strb	r3, [r7, #5]
  /* Check the parameters */
  assert_param(IS_DCMI_CONFIG_IT(DCMI_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800a492:	797b      	ldrb	r3, [r7, #5]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d006      	beq.n	800a4a6 <DCMI_ITConfig+0x22>
  {
    /* Enable the Interrupt sources */
    DCMI->IER |= DCMI_IT;
 800a498:	4b09      	ldr	r3, [pc, #36]	; (800a4c0 <DCMI_ITConfig+0x3c>)
 800a49a:	4a09      	ldr	r2, [pc, #36]	; (800a4c0 <DCMI_ITConfig+0x3c>)
 800a49c:	68d1      	ldr	r1, [r2, #12]
 800a49e:	88fa      	ldrh	r2, [r7, #6]
 800a4a0:	430a      	orrs	r2, r1
 800a4a2:	60da      	str	r2, [r3, #12]
 800a4a4:	e007      	b.n	800a4b6 <DCMI_ITConfig+0x32>
  }
  else
  {
    /* Disable the Interrupt sources */
    DCMI->IER &= (uint16_t)(~DCMI_IT);
 800a4a6:	4b06      	ldr	r3, [pc, #24]	; (800a4c0 <DCMI_ITConfig+0x3c>)
 800a4a8:	4a05      	ldr	r2, [pc, #20]	; (800a4c0 <DCMI_ITConfig+0x3c>)
 800a4aa:	68d1      	ldr	r1, [r2, #12]
 800a4ac:	88fa      	ldrh	r2, [r7, #6]
 800a4ae:	43d2      	mvns	r2, r2
 800a4b0:	b292      	uxth	r2, r2
 800a4b2:	400a      	ands	r2, r1
 800a4b4:	60da      	str	r2, [r3, #12]
  }  
}
 800a4b6:	370c      	adds	r7, #12
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4be:	4770      	bx	lr
 800a4c0:	50050000 	.word	0x50050000

0800a4c4 <DCMI_GetFlagStatus>:
  *            @arg DCMI_FLAG_VSYNC: VSYNC flag mask
  *            @arg DCMI_FLAG_FNE: Fifo not empty flag mask
  * @retval The new state of DCMI_FLAG (SET or RESET).
  */
FlagStatus DCMI_GetFlagStatus(uint16_t DCMI_FLAG)
{
 800a4c4:	b480      	push	{r7}
 800a4c6:	b087      	sub	sp, #28
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	4603      	mov	r3, r0
 800a4cc:	80fb      	strh	r3, [r7, #6]
  FlagStatus bitstatus = RESET;
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	75fb      	strb	r3, [r7, #23]
  uint32_t dcmireg, tempreg = 0;
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_DCMI_GET_FLAG(DCMI_FLAG));
  
  /* Get the DCMI register index */
  dcmireg = (((uint16_t)DCMI_FLAG) >> 12);
 800a4d6:	88fb      	ldrh	r3, [r7, #6]
 800a4d8:	0b1b      	lsrs	r3, r3, #12
 800a4da:	b29b      	uxth	r3, r3
 800a4dc:	60fb      	str	r3, [r7, #12]
  
  if (dcmireg == 0x00) /* The FLAG is in RISR register */
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d103      	bne.n	800a4ec <DCMI_GetFlagStatus+0x28>
  {
    tempreg= DCMI->RISR;
 800a4e4:	4b0f      	ldr	r3, [pc, #60]	; (800a524 <DCMI_GetFlagStatus+0x60>)
 800a4e6:	689b      	ldr	r3, [r3, #8]
 800a4e8:	613b      	str	r3, [r7, #16]
 800a4ea:	e009      	b.n	800a500 <DCMI_GetFlagStatus+0x3c>
  }
  else if (dcmireg == 0x02) /* The FLAG is in SR register */
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	2b02      	cmp	r3, #2
 800a4f0:	d103      	bne.n	800a4fa <DCMI_GetFlagStatus+0x36>
  {
    tempreg = DCMI->SR;
 800a4f2:	4b0c      	ldr	r3, [pc, #48]	; (800a524 <DCMI_GetFlagStatus+0x60>)
 800a4f4:	685b      	ldr	r3, [r3, #4]
 800a4f6:	613b      	str	r3, [r7, #16]
 800a4f8:	e002      	b.n	800a500 <DCMI_GetFlagStatus+0x3c>
  }
  else /* The FLAG is in MISR register */
  {
    tempreg = DCMI->MISR;
 800a4fa:	4b0a      	ldr	r3, [pc, #40]	; (800a524 <DCMI_GetFlagStatus+0x60>)
 800a4fc:	691b      	ldr	r3, [r3, #16]
 800a4fe:	613b      	str	r3, [r7, #16]
  }
  
  if ((tempreg & DCMI_FLAG) != (uint16_t)RESET )
 800a500:	88fa      	ldrh	r2, [r7, #6]
 800a502:	693b      	ldr	r3, [r7, #16]
 800a504:	4013      	ands	r3, r2
 800a506:	2b00      	cmp	r3, #0
 800a508:	d002      	beq.n	800a510 <DCMI_GetFlagStatus+0x4c>
  {
    bitstatus = SET;
 800a50a:	2301      	movs	r3, #1
 800a50c:	75fb      	strb	r3, [r7, #23]
 800a50e:	e001      	b.n	800a514 <DCMI_GetFlagStatus+0x50>
  }
  else
  {
    bitstatus = RESET;
 800a510:	2300      	movs	r3, #0
 800a512:	75fb      	strb	r3, [r7, #23]
  }
  /* Return the DCMI_FLAG status */
  return  bitstatus;
 800a514:	7dfb      	ldrb	r3, [r7, #23]
}
 800a516:	4618      	mov	r0, r3
 800a518:	371c      	adds	r7, #28
 800a51a:	46bd      	mov	sp, r7
 800a51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a520:	4770      	bx	lr
 800a522:	bf00      	nop
 800a524:	50050000 	.word	0x50050000

0800a528 <DCMI_ClearFlag>:
  *            @arg DCMI_FLAG_VSYNCRI: VSYNC Raw flag mask
  *            @arg DCMI_FLAG_LINERI: Line Raw flag mask
  * @retval None
  */
void DCMI_ClearFlag(uint16_t DCMI_FLAG)
{
 800a528:	b480      	push	{r7}
 800a52a:	b083      	sub	sp, #12
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	4603      	mov	r3, r0
 800a530:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_DCMI_CLEAR_FLAG(DCMI_FLAG));
  
  /* Clear the flag by writing in the ICR register 1 in the corresponding 
  Flag position*/
  
  DCMI->ICR = DCMI_FLAG;
 800a532:	4b04      	ldr	r3, [pc, #16]	; (800a544 <DCMI_ClearFlag+0x1c>)
 800a534:	88fa      	ldrh	r2, [r7, #6]
 800a536:	615a      	str	r2, [r3, #20]
}
 800a538:	370c      	adds	r7, #12
 800a53a:	46bd      	mov	sp, r7
 800a53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a540:	4770      	bx	lr
 800a542:	bf00      	nop
 800a544:	50050000 	.word	0x50050000

0800a548 <DCMI_GetITStatus>:
  *            @arg DCMI_IT_VSYNC: VSYNC interrupt mask
  *            @arg DCMI_IT_LINE: Line interrupt mask
  * @retval The new state of DCMI_IT (SET or RESET).
  */
ITStatus DCMI_GetITStatus(uint16_t DCMI_IT)
{
 800a548:	b480      	push	{r7}
 800a54a:	b085      	sub	sp, #20
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	4603      	mov	r3, r0
 800a550:	80fb      	strh	r3, [r7, #6]
  ITStatus bitstatus = RESET;
 800a552:	2300      	movs	r3, #0
 800a554:	73fb      	strb	r3, [r7, #15]
  uint32_t itstatus = 0;
 800a556:	2300      	movs	r3, #0
 800a558:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_DCMI_GET_IT(DCMI_IT));
  
  itstatus = DCMI->MISR & DCMI_IT; /* Only masked interrupts are checked */
 800a55a:	4b0a      	ldr	r3, [pc, #40]	; (800a584 <DCMI_GetITStatus+0x3c>)
 800a55c:	691a      	ldr	r2, [r3, #16]
 800a55e:	88fb      	ldrh	r3, [r7, #6]
 800a560:	4013      	ands	r3, r2
 800a562:	60bb      	str	r3, [r7, #8]
  
  if ((itstatus != (uint16_t)RESET))
 800a564:	68bb      	ldr	r3, [r7, #8]
 800a566:	2b00      	cmp	r3, #0
 800a568:	d002      	beq.n	800a570 <DCMI_GetITStatus+0x28>
  {
    bitstatus = SET;
 800a56a:	2301      	movs	r3, #1
 800a56c:	73fb      	strb	r3, [r7, #15]
 800a56e:	e001      	b.n	800a574 <DCMI_GetITStatus+0x2c>
  }
  else
  {
    bitstatus = RESET;
 800a570:	2300      	movs	r3, #0
 800a572:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800a574:	7bfb      	ldrb	r3, [r7, #15]
}
 800a576:	4618      	mov	r0, r3
 800a578:	3714      	adds	r7, #20
 800a57a:	46bd      	mov	sp, r7
 800a57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a580:	4770      	bx	lr
 800a582:	bf00      	nop
 800a584:	50050000 	.word	0x50050000

0800a588 <DCMI_ClearITPendingBit>:
  *            @arg DCMI_IT_VSYNC: VSYNC interrupt mask
  *            @arg DCMI_IT_LINE: Line interrupt mask
  * @retval None
  */
void DCMI_ClearITPendingBit(uint16_t DCMI_IT)
{
 800a588:	b480      	push	{r7}
 800a58a:	b083      	sub	sp, #12
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	4603      	mov	r3, r0
 800a590:	80fb      	strh	r3, [r7, #6]
  /* Clear the interrupt pending Bit by writing in the ICR register 1 in the 
  corresponding pending Bit position*/
  
  DCMI->ICR = DCMI_IT;
 800a592:	4b04      	ldr	r3, [pc, #16]	; (800a5a4 <DCMI_ClearITPendingBit+0x1c>)
 800a594:	88fa      	ldrh	r2, [r7, #6]
 800a596:	615a      	str	r2, [r3, #20]
}
 800a598:	370c      	adds	r7, #12
 800a59a:	46bd      	mov	sp, r7
 800a59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a0:	4770      	bx	lr
 800a5a2:	bf00      	nop
 800a5a4:	50050000 	.word	0x50050000

0800a5a8 <DMA2D_DeInit>:
  * @param  None
  * @retval None
  */

void DMA2D_DeInit(void)
{
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	af00      	add	r7, sp, #0
  /* Enable DMA2D reset state */
  RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_DMA2D, ENABLE);
 800a5ac:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800a5b0:	2101      	movs	r1, #1
 800a5b2:	f005 fbcf 	bl	800fd54 <RCC_AHB1PeriphResetCmd>
  /* Release DMA2D from reset state */
  RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_DMA2D, DISABLE);
 800a5b6:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800a5ba:	2100      	movs	r1, #0
 800a5bc:	f005 fbca 	bl	800fd54 <RCC_AHB1PeriphResetCmd>
}
 800a5c0:	bd80      	pop	{r7, pc}
 800a5c2:	bf00      	nop

0800a5c4 <DMA2D_Init>:
  * @param  DMA2D_InitStruct: pointer to a DMA2D_InitTypeDef structure that contains
  *         the configuration information for the specified DMA2D peripheral.
  * @retval None
  */
void DMA2D_Init(DMA2D_InitTypeDef* DMA2D_InitStruct)
{
 800a5c4:	b480      	push	{r7}
 800a5c6:	b087      	sub	sp, #28
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	6078      	str	r0, [r7, #4]

  uint32_t outgreen = 0;
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	617b      	str	r3, [r7, #20]
  uint32_t outred   = 0;
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	613b      	str	r3, [r7, #16]
  uint32_t outalpha = 0;
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	60fb      	str	r3, [r7, #12]
  uint32_t pixline  = 0;
 800a5d8:	2300      	movs	r3, #0
 800a5da:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DMA2D_OUTPUT_OFFSET(DMA2D_InitStruct->DMA2D_OutputOffset));
  assert_param(IS_DMA2D_LINE(DMA2D_InitStruct->DMA2D_NumberOfLine));
  assert_param(IS_DMA2D_PIXEL(DMA2D_InitStruct->DMA2D_PixelPerLine));

  /* Configures the DMA2D operation mode */
  DMA2D->CR &= (uint32_t)CR_MASK;
 800a5dc:	4a4f      	ldr	r2, [pc, #316]	; (800a71c <DMA2D_Init+0x158>)
 800a5de:	4b4f      	ldr	r3, [pc, #316]	; (800a71c <DMA2D_Init+0x158>)
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	f023 1303 	bic.w	r3, r3, #196611	; 0x30003
 800a5e6:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 800a5ea:	6013      	str	r3, [r2, #0]
  DMA2D->CR |= (DMA2D_InitStruct->DMA2D_Mode);
 800a5ec:	4b4b      	ldr	r3, [pc, #300]	; (800a71c <DMA2D_Init+0x158>)
 800a5ee:	4a4b      	ldr	r2, [pc, #300]	; (800a71c <DMA2D_Init+0x158>)
 800a5f0:	6811      	ldr	r1, [r2, #0]
 800a5f2:	687a      	ldr	r2, [r7, #4]
 800a5f4:	6812      	ldr	r2, [r2, #0]
 800a5f6:	430a      	orrs	r2, r1
 800a5f8:	601a      	str	r2, [r3, #0]

  /* Configures the color mode of the output image */
  DMA2D->OPFCCR &= ~(uint32_t)DMA2D_OPFCCR_CM;
 800a5fa:	4b48      	ldr	r3, [pc, #288]	; (800a71c <DMA2D_Init+0x158>)
 800a5fc:	4a47      	ldr	r2, [pc, #284]	; (800a71c <DMA2D_Init+0x158>)
 800a5fe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800a600:	f022 0207 	bic.w	r2, r2, #7
 800a604:	635a      	str	r2, [r3, #52]	; 0x34
  DMA2D->OPFCCR |= (DMA2D_InitStruct->DMA2D_CMode);
 800a606:	4b45      	ldr	r3, [pc, #276]	; (800a71c <DMA2D_Init+0x158>)
 800a608:	4a44      	ldr	r2, [pc, #272]	; (800a71c <DMA2D_Init+0x158>)
 800a60a:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800a60c:	687a      	ldr	r2, [r7, #4]
 800a60e:	6852      	ldr	r2, [r2, #4]
 800a610:	430a      	orrs	r2, r1
 800a612:	635a      	str	r2, [r3, #52]	; 0x34

  /* Configures the output color */

  if (DMA2D_InitStruct->DMA2D_CMode == DMA2D_ARGB8888)
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	685b      	ldr	r3, [r3, #4]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d10c      	bne.n	800a636 <DMA2D_Init+0x72>
  {
    outgreen = DMA2D_InitStruct->DMA2D_OutputGreen << 8;
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	68db      	ldr	r3, [r3, #12]
 800a620:	021b      	lsls	r3, r3, #8
 800a622:	617b      	str	r3, [r7, #20]
    outred = DMA2D_InitStruct->DMA2D_OutputRed << 16;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	691b      	ldr	r3, [r3, #16]
 800a628:	041b      	lsls	r3, r3, #16
 800a62a:	613b      	str	r3, [r7, #16]
    outalpha = DMA2D_InitStruct->DMA2D_OutputAlpha << 24;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	695b      	ldr	r3, [r3, #20]
 800a630:	061b      	lsls	r3, r3, #24
 800a632:	60fb      	str	r3, [r7, #12]
 800a634:	e03a      	b.n	800a6ac <DMA2D_Init+0xe8>
  }
  else
  
    if (DMA2D_InitStruct->DMA2D_CMode == DMA2D_RGB888)
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	685b      	ldr	r3, [r3, #4]
 800a63a:	2b01      	cmp	r3, #1
 800a63c:	d10a      	bne.n	800a654 <DMA2D_Init+0x90>
    {
      outgreen = DMA2D_InitStruct->DMA2D_OutputGreen << 8;
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	68db      	ldr	r3, [r3, #12]
 800a642:	021b      	lsls	r3, r3, #8
 800a644:	617b      	str	r3, [r7, #20]
      outred = DMA2D_InitStruct->DMA2D_OutputRed << 16;
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	691b      	ldr	r3, [r3, #16]
 800a64a:	041b      	lsls	r3, r3, #16
 800a64c:	613b      	str	r3, [r7, #16]
      outalpha = (uint32_t)0x00000000;
 800a64e:	2300      	movs	r3, #0
 800a650:	60fb      	str	r3, [r7, #12]
 800a652:	e02b      	b.n	800a6ac <DMA2D_Init+0xe8>
    }
     
  else

    if (DMA2D_InitStruct->DMA2D_CMode == DMA2D_RGB565)
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	685b      	ldr	r3, [r3, #4]
 800a658:	2b02      	cmp	r3, #2
 800a65a:	d10a      	bne.n	800a672 <DMA2D_Init+0xae>
    {
      outgreen = DMA2D_InitStruct->DMA2D_OutputGreen << 5;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	68db      	ldr	r3, [r3, #12]
 800a660:	015b      	lsls	r3, r3, #5
 800a662:	617b      	str	r3, [r7, #20]
      outred = DMA2D_InitStruct->DMA2D_OutputRed << 11;
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	691b      	ldr	r3, [r3, #16]
 800a668:	02db      	lsls	r3, r3, #11
 800a66a:	613b      	str	r3, [r7, #16]
      outalpha = (uint32_t)0x00000000;
 800a66c:	2300      	movs	r3, #0
 800a66e:	60fb      	str	r3, [r7, #12]
 800a670:	e01c      	b.n	800a6ac <DMA2D_Init+0xe8>
    }

  else

    if (DMA2D_InitStruct->DMA2D_CMode == DMA2D_ARGB1555)
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	685b      	ldr	r3, [r3, #4]
 800a676:	2b03      	cmp	r3, #3
 800a678:	d10c      	bne.n	800a694 <DMA2D_Init+0xd0>
    {  
      outgreen = DMA2D_InitStruct->DMA2D_OutputGreen << 5;
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	68db      	ldr	r3, [r3, #12]
 800a67e:	015b      	lsls	r3, r3, #5
 800a680:	617b      	str	r3, [r7, #20]
      outred = DMA2D_InitStruct->DMA2D_OutputRed << 10;
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	691b      	ldr	r3, [r3, #16]
 800a686:	029b      	lsls	r3, r3, #10
 800a688:	613b      	str	r3, [r7, #16]
      outalpha = DMA2D_InitStruct->DMA2D_OutputAlpha << 15;
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	695b      	ldr	r3, [r3, #20]
 800a68e:	03db      	lsls	r3, r3, #15
 800a690:	60fb      	str	r3, [r7, #12]
 800a692:	e00b      	b.n	800a6ac <DMA2D_Init+0xe8>
    }

  else /* DMA2D_CMode = DMA2D_ARGB4444 */
  {
    outgreen = DMA2D_InitStruct->DMA2D_OutputGreen << 4;
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	68db      	ldr	r3, [r3, #12]
 800a698:	011b      	lsls	r3, r3, #4
 800a69a:	617b      	str	r3, [r7, #20]
    outred = DMA2D_InitStruct->DMA2D_OutputRed << 8;
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	691b      	ldr	r3, [r3, #16]
 800a6a0:	021b      	lsls	r3, r3, #8
 800a6a2:	613b      	str	r3, [r7, #16]
    outalpha = DMA2D_InitStruct->DMA2D_OutputAlpha << 12;
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	695b      	ldr	r3, [r3, #20]
 800a6a8:	031b      	lsls	r3, r3, #12
 800a6aa:	60fb      	str	r3, [r7, #12]
  }  
  DMA2D->OCOLR |= ((outgreen) | (outred) | (DMA2D_InitStruct->DMA2D_OutputBlue) | (outalpha));
 800a6ac:	4b1b      	ldr	r3, [pc, #108]	; (800a71c <DMA2D_Init+0x158>)
 800a6ae:	4a1b      	ldr	r2, [pc, #108]	; (800a71c <DMA2D_Init+0x158>)
 800a6b0:	6b91      	ldr	r1, [r2, #56]	; 0x38
 800a6b2:	6978      	ldr	r0, [r7, #20]
 800a6b4:	693a      	ldr	r2, [r7, #16]
 800a6b6:	4310      	orrs	r0, r2
 800a6b8:	687a      	ldr	r2, [r7, #4]
 800a6ba:	6892      	ldr	r2, [r2, #8]
 800a6bc:	4310      	orrs	r0, r2
 800a6be:	68fa      	ldr	r2, [r7, #12]
 800a6c0:	4302      	orrs	r2, r0
 800a6c2:	430a      	orrs	r2, r1
 800a6c4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Configures the output memory address */
  DMA2D->OMAR = (DMA2D_InitStruct->DMA2D_OutputMemoryAdd);
 800a6c6:	4b15      	ldr	r3, [pc, #84]	; (800a71c <DMA2D_Init+0x158>)
 800a6c8:	687a      	ldr	r2, [r7, #4]
 800a6ca:	6992      	ldr	r2, [r2, #24]
 800a6cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Configure  the line Offset */
  DMA2D->OOR &= ~(uint32_t)DMA2D_OOR_LO;
 800a6ce:	4a13      	ldr	r2, [pc, #76]	; (800a71c <DMA2D_Init+0x158>)
 800a6d0:	4b12      	ldr	r3, [pc, #72]	; (800a71c <DMA2D_Init+0x158>)
 800a6d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6d4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800a6d8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800a6dc:	6413      	str	r3, [r2, #64]	; 0x40
  DMA2D->OOR |= (DMA2D_InitStruct->DMA2D_OutputOffset);
 800a6de:	4b0f      	ldr	r3, [pc, #60]	; (800a71c <DMA2D_Init+0x158>)
 800a6e0:	4a0e      	ldr	r2, [pc, #56]	; (800a71c <DMA2D_Init+0x158>)
 800a6e2:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800a6e4:	687a      	ldr	r2, [r7, #4]
 800a6e6:	69d2      	ldr	r2, [r2, #28]
 800a6e8:	430a      	orrs	r2, r1
 800a6ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure the number of line and pixel per line */
  pixline = DMA2D_InitStruct->DMA2D_PixelPerLine << 16; 
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6f0:	041b      	lsls	r3, r3, #16
 800a6f2:	60bb      	str	r3, [r7, #8]
  DMA2D->NLR &= ~(DMA2D_NLR_NL | DMA2D_NLR_PL);
 800a6f4:	4b09      	ldr	r3, [pc, #36]	; (800a71c <DMA2D_Init+0x158>)
 800a6f6:	4a09      	ldr	r2, [pc, #36]	; (800a71c <DMA2D_Init+0x158>)
 800a6f8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800a6fa:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
 800a6fe:	645a      	str	r2, [r3, #68]	; 0x44
  DMA2D->NLR |= ((DMA2D_InitStruct->DMA2D_NumberOfLine) | (pixline));
 800a700:	4b06      	ldr	r3, [pc, #24]	; (800a71c <DMA2D_Init+0x158>)
 800a702:	4a06      	ldr	r2, [pc, #24]	; (800a71c <DMA2D_Init+0x158>)
 800a704:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800a706:	687a      	ldr	r2, [r7, #4]
 800a708:	6a10      	ldr	r0, [r2, #32]
 800a70a:	68ba      	ldr	r2, [r7, #8]
 800a70c:	4302      	orrs	r2, r0
 800a70e:	430a      	orrs	r2, r1
 800a710:	645a      	str	r2, [r3, #68]	; 0x44
  * @brief  Fills each DMA2D_InitStruct member with its default value.
  * @param  DMA2D_InitStruct: pointer to a DMA2D_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
}
 800a712:	371c      	adds	r7, #28
 800a714:	46bd      	mov	sp, r7
 800a716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71a:	4770      	bx	lr
 800a71c:	4002b000 	.word	0x4002b000

0800a720 <DMA2D_StructInit>:
void DMA2D_StructInit(DMA2D_InitTypeDef* DMA2D_InitStruct)
{
 800a720:	b480      	push	{r7}
 800a722:	b083      	sub	sp, #12
 800a724:	af00      	add	r7, sp, #0
 800a726:	6078      	str	r0, [r7, #4]
  /* Initialize the transfer mode member */
  DMA2D_InitStruct->DMA2D_Mode = DMA2D_M2M;
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	2200      	movs	r2, #0
 800a72c:	601a      	str	r2, [r3, #0]

  /* Initialize the output color mode members */
  DMA2D_InitStruct->DMA2D_CMode = DMA2D_ARGB8888;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	2200      	movs	r2, #0
 800a732:	605a      	str	r2, [r3, #4]

  /* Initialize the alpha and RGB values */
  DMA2D_InitStruct->DMA2D_OutputGreen = 0x00;
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	2200      	movs	r2, #0
 800a738:	60da      	str	r2, [r3, #12]
  DMA2D_InitStruct->DMA2D_OutputBlue = 0x00;
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	2200      	movs	r2, #0
 800a73e:	609a      	str	r2, [r3, #8]
  DMA2D_InitStruct->DMA2D_OutputRed = 0x00;
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	2200      	movs	r2, #0
 800a744:	611a      	str	r2, [r3, #16]
  DMA2D_InitStruct->DMA2D_OutputAlpha = 0x00;
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	2200      	movs	r2, #0
 800a74a:	615a      	str	r2, [r3, #20]

  /* Initialize the output memory address */
  DMA2D_InitStruct->DMA2D_OutputMemoryAdd = 0x00;
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	2200      	movs	r2, #0
 800a750:	619a      	str	r2, [r3, #24]

  /* Initialize the output offset */
  DMA2D_InitStruct->DMA2D_OutputOffset = 0x00;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	2200      	movs	r2, #0
 800a756:	61da      	str	r2, [r3, #28]

  /* Initialize the number of line and the number of pixel per line */
  DMA2D_InitStruct->DMA2D_NumberOfLine = 0x00;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	2200      	movs	r2, #0
 800a75c:	621a      	str	r2, [r3, #32]
  DMA2D_InitStruct->DMA2D_PixelPerLine = 0x00;
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	2200      	movs	r2, #0
 800a762:	625a      	str	r2, [r3, #36]	; 0x24
}
 800a764:	370c      	adds	r7, #12
 800a766:	46bd      	mov	sp, r7
 800a768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76c:	4770      	bx	lr
 800a76e:	bf00      	nop

0800a770 <DMA2D_StartTransfer>:
  * @param 
  * @retval None
  */

void DMA2D_StartTransfer(void)
{
 800a770:	b480      	push	{r7}
 800a772:	af00      	add	r7, sp, #0
    /* Start DMA2D transfer by setting START bit */
    DMA2D->CR |= (uint32_t)DMA2D_CR_START;
 800a774:	4b04      	ldr	r3, [pc, #16]	; (800a788 <DMA2D_StartTransfer+0x18>)
 800a776:	4a04      	ldr	r2, [pc, #16]	; (800a788 <DMA2D_StartTransfer+0x18>)
 800a778:	6812      	ldr	r2, [r2, #0]
 800a77a:	f042 0201 	orr.w	r2, r2, #1
 800a77e:	601a      	str	r2, [r3, #0]
}
 800a780:	46bd      	mov	sp, r7
 800a782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a786:	4770      	bx	lr
 800a788:	4002b000 	.word	0x4002b000

0800a78c <DMA2D_AbortTransfer>:
  * @param
  * @retval None
  */

void DMA2D_AbortTransfer(void)
{
 800a78c:	b480      	push	{r7}
 800a78e:	af00      	add	r7, sp, #0
    /* Start DMA2D transfer by setting START bit */
    DMA2D->CR |= (uint32_t)DMA2D_CR_ABORT;
 800a790:	4b04      	ldr	r3, [pc, #16]	; (800a7a4 <DMA2D_AbortTransfer+0x18>)
 800a792:	4a04      	ldr	r2, [pc, #16]	; (800a7a4 <DMA2D_AbortTransfer+0x18>)
 800a794:	6812      	ldr	r2, [r2, #0]
 800a796:	f042 0204 	orr.w	r2, r2, #4
 800a79a:	601a      	str	r2, [r3, #0]

}
 800a79c:	46bd      	mov	sp, r7
 800a79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a2:	4770      	bx	lr
 800a7a4:	4002b000 	.word	0x4002b000

0800a7a8 <DMA2D_Suspend>:
  * @param  NewState: new state of the DMA2D peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA2D_Suspend(FunctionalState NewState)
{
 800a7a8:	b480      	push	{r7}
 800a7aa:	b083      	sub	sp, #12
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	4603      	mov	r3, r0
 800a7b0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800a7b2:	79fb      	ldrb	r3, [r7, #7]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d006      	beq.n	800a7c6 <DMA2D_Suspend+0x1e>
  {
    /* Suspend DMA2D transfer by setting STOP bit */
    DMA2D->CR |= (uint32_t)DMA2D_CR_SUSP;
 800a7b8:	4b08      	ldr	r3, [pc, #32]	; (800a7dc <DMA2D_Suspend+0x34>)
 800a7ba:	4a08      	ldr	r2, [pc, #32]	; (800a7dc <DMA2D_Suspend+0x34>)
 800a7bc:	6812      	ldr	r2, [r2, #0]
 800a7be:	f042 0202 	orr.w	r2, r2, #2
 800a7c2:	601a      	str	r2, [r3, #0]
 800a7c4:	e005      	b.n	800a7d2 <DMA2D_Suspend+0x2a>
  }
  else
  {
    /* Continue DMA2D transfer by clearing STOP bit */
    DMA2D->CR &= ~(uint32_t)DMA2D_CR_SUSP;
 800a7c6:	4b05      	ldr	r3, [pc, #20]	; (800a7dc <DMA2D_Suspend+0x34>)
 800a7c8:	4a04      	ldr	r2, [pc, #16]	; (800a7dc <DMA2D_Suspend+0x34>)
 800a7ca:	6812      	ldr	r2, [r2, #0]
 800a7cc:	f022 0202 	bic.w	r2, r2, #2
 800a7d0:	601a      	str	r2, [r3, #0]
  }
}
 800a7d2:	370c      	adds	r7, #12
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7da:	4770      	bx	lr
 800a7dc:	4002b000 	.word	0x4002b000

0800a7e0 <DMA2D_FGConfig>:
  * @param  DMA2D_FGStruct: pointer to a DMA2D_FGTypeDef structure that contains
  *         the configuration information for the specified Background.
  * @retval None
  */
void DMA2D_FGConfig(DMA2D_FG_InitTypeDef* DMA2D_FG_InitStruct)
{
 800a7e0:	b480      	push	{r7}
 800a7e2:	b089      	sub	sp, #36	; 0x24
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]

  uint32_t fg_clutcolormode = 0;
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	61fb      	str	r3, [r7, #28]
  uint32_t fg_clutsize = 0;
 800a7ec:	2300      	movs	r3, #0
 800a7ee:	61bb      	str	r3, [r7, #24]
  uint32_t fg_alpha_mode = 0;
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	617b      	str	r3, [r7, #20]
  uint32_t fg_alphavalue = 0;
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	613b      	str	r3, [r7, #16]
  uint32_t fg_colorgreen = 0;
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	60fb      	str	r3, [r7, #12]
  uint32_t fg_colorred = 0;
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DMA2D_FGC_BLUE(DMA2D_FG_InitStruct->DMA2D_FGC_BLUE));
  assert_param(IS_DMA2D_FGC_GREEN(DMA2D_FG_InitStruct->DMA2D_FGC_GREEN));
  assert_param(IS_DMA2D_FGC_RED(DMA2D_FG_InitStruct->DMA2D_FGC_RED));

  /* Configures the FG memory address */
  DMA2D->FGMAR = (DMA2D_FG_InitStruct->DMA2D_FGMA);
 800a800:	4b2c      	ldr	r3, [pc, #176]	; (800a8b4 <DMA2D_FGConfig+0xd4>)
 800a802:	687a      	ldr	r2, [r7, #4]
 800a804:	6812      	ldr	r2, [r2, #0]
 800a806:	60da      	str	r2, [r3, #12]

  /* Configures the FG offset */
  DMA2D->FGOR &= ~(uint32_t)DMA2D_FGOR_LO;
 800a808:	4a2a      	ldr	r2, [pc, #168]	; (800a8b4 <DMA2D_FGConfig+0xd4>)
 800a80a:	4b2a      	ldr	r3, [pc, #168]	; (800a8b4 <DMA2D_FGConfig+0xd4>)
 800a80c:	691b      	ldr	r3, [r3, #16]
 800a80e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800a812:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800a816:	6113      	str	r3, [r2, #16]
  DMA2D->FGOR |= (DMA2D_FG_InitStruct->DMA2D_FGO);
 800a818:	4b26      	ldr	r3, [pc, #152]	; (800a8b4 <DMA2D_FGConfig+0xd4>)
 800a81a:	4a26      	ldr	r2, [pc, #152]	; (800a8b4 <DMA2D_FGConfig+0xd4>)
 800a81c:	6911      	ldr	r1, [r2, #16]
 800a81e:	687a      	ldr	r2, [r7, #4]
 800a820:	6852      	ldr	r2, [r2, #4]
 800a822:	430a      	orrs	r2, r1
 800a824:	611a      	str	r2, [r3, #16]

  /* Configures foreground Pixel Format Convertor */
  DMA2D->FGPFCCR &= (uint32_t)PFCCR_MASK;
 800a826:	4a23      	ldr	r2, [pc, #140]	; (800a8b4 <DMA2D_FGConfig+0xd4>)
 800a828:	4b22      	ldr	r3, [pc, #136]	; (800a8b4 <DMA2D_FGConfig+0xd4>)
 800a82a:	69d9      	ldr	r1, [r3, #28]
 800a82c:	4b22      	ldr	r3, [pc, #136]	; (800a8b8 <DMA2D_FGConfig+0xd8>)
 800a82e:	400b      	ands	r3, r1
 800a830:	61d3      	str	r3, [r2, #28]
  fg_clutcolormode = DMA2D_FG_InitStruct->DMA2D_FG_CLUT_CM << 4;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	68db      	ldr	r3, [r3, #12]
 800a836:	011b      	lsls	r3, r3, #4
 800a838:	61fb      	str	r3, [r7, #28]
  fg_clutsize = DMA2D_FG_InitStruct->DMA2D_FG_CLUT_SIZE << 8;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	691b      	ldr	r3, [r3, #16]
 800a83e:	021b      	lsls	r3, r3, #8
 800a840:	61bb      	str	r3, [r7, #24]
  fg_alpha_mode = DMA2D_FG_InitStruct->DMA2D_FGPFC_ALPHA_MODE << 16;
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	695b      	ldr	r3, [r3, #20]
 800a846:	041b      	lsls	r3, r3, #16
 800a848:	617b      	str	r3, [r7, #20]
  fg_alphavalue = DMA2D_FG_InitStruct->DMA2D_FGPFC_ALPHA_VALUE << 24;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	699b      	ldr	r3, [r3, #24]
 800a84e:	061b      	lsls	r3, r3, #24
 800a850:	613b      	str	r3, [r7, #16]
  DMA2D->FGPFCCR |= (DMA2D_FG_InitStruct->DMA2D_FGCM | fg_clutcolormode | fg_clutsize | \
 800a852:	4b18      	ldr	r3, [pc, #96]	; (800a8b4 <DMA2D_FGConfig+0xd4>)
 800a854:	4a17      	ldr	r2, [pc, #92]	; (800a8b4 <DMA2D_FGConfig+0xd4>)
 800a856:	69d1      	ldr	r1, [r2, #28]
 800a858:	687a      	ldr	r2, [r7, #4]
 800a85a:	6890      	ldr	r0, [r2, #8]
 800a85c:	69fa      	ldr	r2, [r7, #28]
 800a85e:	4310      	orrs	r0, r2
 800a860:	69ba      	ldr	r2, [r7, #24]
 800a862:	4310      	orrs	r0, r2
 800a864:	697a      	ldr	r2, [r7, #20]
 800a866:	4310      	orrs	r0, r2
                    fg_alpha_mode | fg_alphavalue);
 800a868:	693a      	ldr	r2, [r7, #16]
 800a86a:	4302      	orrs	r2, r0
  DMA2D->FGPFCCR &= (uint32_t)PFCCR_MASK;
  fg_clutcolormode = DMA2D_FG_InitStruct->DMA2D_FG_CLUT_CM << 4;
  fg_clutsize = DMA2D_FG_InitStruct->DMA2D_FG_CLUT_SIZE << 8;
  fg_alpha_mode = DMA2D_FG_InitStruct->DMA2D_FGPFC_ALPHA_MODE << 16;
  fg_alphavalue = DMA2D_FG_InitStruct->DMA2D_FGPFC_ALPHA_VALUE << 24;
  DMA2D->FGPFCCR |= (DMA2D_FG_InitStruct->DMA2D_FGCM | fg_clutcolormode | fg_clutsize | \
 800a86c:	430a      	orrs	r2, r1
 800a86e:	61da      	str	r2, [r3, #28]
                    fg_alpha_mode | fg_alphavalue);

  /* Configures foreground color */
  DMA2D->FGCOLR &= ~(DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED);
 800a870:	4b10      	ldr	r3, [pc, #64]	; (800a8b4 <DMA2D_FGConfig+0xd4>)
 800a872:	4a10      	ldr	r2, [pc, #64]	; (800a8b4 <DMA2D_FGConfig+0xd4>)
 800a874:	6a12      	ldr	r2, [r2, #32]
 800a876:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800a87a:	621a      	str	r2, [r3, #32]
  fg_colorgreen = DMA2D_FG_InitStruct->DMA2D_FGC_GREEN << 8;
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	6a1b      	ldr	r3, [r3, #32]
 800a880:	021b      	lsls	r3, r3, #8
 800a882:	60fb      	str	r3, [r7, #12]
  fg_colorred = DMA2D_FG_InitStruct->DMA2D_FGC_RED << 16;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a888:	041b      	lsls	r3, r3, #16
 800a88a:	60bb      	str	r3, [r7, #8]
  DMA2D->FGCOLR |= (DMA2D_FG_InitStruct->DMA2D_FGC_BLUE | fg_colorgreen | fg_colorred);
 800a88c:	4b09      	ldr	r3, [pc, #36]	; (800a8b4 <DMA2D_FGConfig+0xd4>)
 800a88e:	4a09      	ldr	r2, [pc, #36]	; (800a8b4 <DMA2D_FGConfig+0xd4>)
 800a890:	6a11      	ldr	r1, [r2, #32]
 800a892:	687a      	ldr	r2, [r7, #4]
 800a894:	69d0      	ldr	r0, [r2, #28]
 800a896:	68fa      	ldr	r2, [r7, #12]
 800a898:	4310      	orrs	r0, r2
 800a89a:	68ba      	ldr	r2, [r7, #8]
 800a89c:	4302      	orrs	r2, r0
 800a89e:	430a      	orrs	r2, r1
 800a8a0:	621a      	str	r2, [r3, #32]

  /* Configures foreground CLUT memory address */
  DMA2D->FGCMAR = DMA2D_FG_InitStruct->DMA2D_FGCMAR;
 800a8a2:	4b04      	ldr	r3, [pc, #16]	; (800a8b4 <DMA2D_FGConfig+0xd4>)
 800a8a4:	687a      	ldr	r2, [r7, #4]
 800a8a6:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800a8a8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800a8aa:	3724      	adds	r7, #36	; 0x24
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b2:	4770      	bx	lr
 800a8b4:	4002b000 	.word	0x4002b000
 800a8b8:	00fc00c0 	.word	0x00fc00c0

0800a8bc <DMA2D_FG_StructInit>:
  * @param  DMA2D_FGStruct: pointer to a DMA2D_FGTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void DMA2D_FG_StructInit(DMA2D_FG_InitTypeDef* DMA2D_FG_InitStruct)
{
 800a8bc:	b480      	push	{r7}
 800a8be:	b083      	sub	sp, #12
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
  /*!< Initialize the DMA2D foreground memory address */
  DMA2D_FG_InitStruct->DMA2D_FGMA = 0x00;
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	601a      	str	r2, [r3, #0]

  /*!< Initialize the DMA2D foreground offset */
  DMA2D_FG_InitStruct->DMA2D_FGO = 0x00;
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	2200      	movs	r2, #0
 800a8ce:	605a      	str	r2, [r3, #4]

  /*!< Initialize the DMA2D foreground color mode */
  DMA2D_FG_InitStruct->DMA2D_FGCM = CM_ARGB8888;
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	609a      	str	r2, [r3, #8]

  /*!< Initialize the DMA2D foreground CLUT color mode */
  DMA2D_FG_InitStruct->DMA2D_FG_CLUT_CM = CLUT_CM_ARGB8888;
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	2200      	movs	r2, #0
 800a8da:	60da      	str	r2, [r3, #12]

  /*!< Initialize the DMA2D foreground CLUT size */
  DMA2D_FG_InitStruct->DMA2D_FG_CLUT_SIZE = 0x00;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	2200      	movs	r2, #0
 800a8e0:	611a      	str	r2, [r3, #16]

  /*!< Initialize the DMA2D foreground alpha mode */
  DMA2D_FG_InitStruct->DMA2D_FGPFC_ALPHA_MODE = NO_MODIF_ALPHA_VALUE;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	615a      	str	r2, [r3, #20]

  /*!< Initialize the DMA2D foreground alpha value */
  DMA2D_FG_InitStruct->DMA2D_FGPFC_ALPHA_VALUE = 0x00;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	619a      	str	r2, [r3, #24]

  /*!< Initialize the DMA2D foreground blue value */
  DMA2D_FG_InitStruct->DMA2D_FGC_BLUE = 0x00;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	2200      	movs	r2, #0
 800a8f2:	61da      	str	r2, [r3, #28]

  /*!< Initialize the DMA2D foreground green value */
  DMA2D_FG_InitStruct->DMA2D_FGC_GREEN = 0x00;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	2200      	movs	r2, #0
 800a8f8:	621a      	str	r2, [r3, #32]

  /*!< Initialize the DMA2D foreground red value */
  DMA2D_FG_InitStruct->DMA2D_FGC_RED = 0x00;
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	2200      	movs	r2, #0
 800a8fe:	625a      	str	r2, [r3, #36]	; 0x24

  /*!< Initialize the DMA2D foreground CLUT memory address */
  DMA2D_FG_InitStruct->DMA2D_FGCMAR = 0x00;
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	2200      	movs	r2, #0
 800a904:	629a      	str	r2, [r3, #40]	; 0x28
}
 800a906:	370c      	adds	r7, #12
 800a908:	46bd      	mov	sp, r7
 800a90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a90e:	4770      	bx	lr

0800a910 <DMA2D_BGConfig>:
  * @param  DMA2D_BGStruct: pointer to a DMA2D_BGTypeDef structure that contains
  *         the configuration information for the specified Background.
  * @retval None
  */
void DMA2D_BGConfig(DMA2D_BG_InitTypeDef* DMA2D_BG_InitStruct)
{
 800a910:	b480      	push	{r7}
 800a912:	b089      	sub	sp, #36	; 0x24
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]

  uint32_t bg_clutcolormode = 0;
 800a918:	2300      	movs	r3, #0
 800a91a:	61fb      	str	r3, [r7, #28]
  uint32_t bg_clutsize = 0;
 800a91c:	2300      	movs	r3, #0
 800a91e:	61bb      	str	r3, [r7, #24]
  uint32_t bg_alpha_mode = 0;
 800a920:	2300      	movs	r3, #0
 800a922:	617b      	str	r3, [r7, #20]
  uint32_t bg_alphavalue = 0;
 800a924:	2300      	movs	r3, #0
 800a926:	613b      	str	r3, [r7, #16]
  uint32_t bg_colorgreen = 0;
 800a928:	2300      	movs	r3, #0
 800a92a:	60fb      	str	r3, [r7, #12]
  uint32_t bg_colorred = 0;
 800a92c:	2300      	movs	r3, #0
 800a92e:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DMA2D_BGC_BLUE(DMA2D_BG_InitStruct->DMA2D_BGC_BLUE));
  assert_param(IS_DMA2D_BGC_GREEN(DMA2D_BG_InitStruct->DMA2D_BGC_GREEN));
  assert_param(IS_DMA2D_BGC_RED(DMA2D_BG_InitStruct->DMA2D_BGC_RED));

  /* Configures the BG memory address */
  DMA2D->BGMAR = (DMA2D_BG_InitStruct->DMA2D_BGMA);
 800a930:	4b2c      	ldr	r3, [pc, #176]	; (800a9e4 <DMA2D_BGConfig+0xd4>)
 800a932:	687a      	ldr	r2, [r7, #4]
 800a934:	6812      	ldr	r2, [r2, #0]
 800a936:	615a      	str	r2, [r3, #20]

  /* Configures the BG offset */
  DMA2D->BGOR &= ~(uint32_t)DMA2D_BGOR_LO;
 800a938:	4a2a      	ldr	r2, [pc, #168]	; (800a9e4 <DMA2D_BGConfig+0xd4>)
 800a93a:	4b2a      	ldr	r3, [pc, #168]	; (800a9e4 <DMA2D_BGConfig+0xd4>)
 800a93c:	699b      	ldr	r3, [r3, #24]
 800a93e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800a942:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800a946:	6193      	str	r3, [r2, #24]
  DMA2D->BGOR |= (DMA2D_BG_InitStruct->DMA2D_BGO);
 800a948:	4b26      	ldr	r3, [pc, #152]	; (800a9e4 <DMA2D_BGConfig+0xd4>)
 800a94a:	4a26      	ldr	r2, [pc, #152]	; (800a9e4 <DMA2D_BGConfig+0xd4>)
 800a94c:	6991      	ldr	r1, [r2, #24]
 800a94e:	687a      	ldr	r2, [r7, #4]
 800a950:	6852      	ldr	r2, [r2, #4]
 800a952:	430a      	orrs	r2, r1
 800a954:	619a      	str	r2, [r3, #24]

  /* Configures background Pixel Format Convertor */
  DMA2D->BGPFCCR &= (uint32_t)PFCCR_MASK;
 800a956:	4a23      	ldr	r2, [pc, #140]	; (800a9e4 <DMA2D_BGConfig+0xd4>)
 800a958:	4b22      	ldr	r3, [pc, #136]	; (800a9e4 <DMA2D_BGConfig+0xd4>)
 800a95a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800a95c:	4b22      	ldr	r3, [pc, #136]	; (800a9e8 <DMA2D_BGConfig+0xd8>)
 800a95e:	400b      	ands	r3, r1
 800a960:	6253      	str	r3, [r2, #36]	; 0x24
  bg_clutcolormode = DMA2D_BG_InitStruct->DMA2D_BG_CLUT_CM << 4;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	68db      	ldr	r3, [r3, #12]
 800a966:	011b      	lsls	r3, r3, #4
 800a968:	61fb      	str	r3, [r7, #28]
  bg_clutsize = DMA2D_BG_InitStruct->DMA2D_BG_CLUT_SIZE << 8;
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	691b      	ldr	r3, [r3, #16]
 800a96e:	021b      	lsls	r3, r3, #8
 800a970:	61bb      	str	r3, [r7, #24]
  bg_alpha_mode = DMA2D_BG_InitStruct->DMA2D_BGPFC_ALPHA_MODE << 16;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	695b      	ldr	r3, [r3, #20]
 800a976:	041b      	lsls	r3, r3, #16
 800a978:	617b      	str	r3, [r7, #20]
  bg_alphavalue = DMA2D_BG_InitStruct->DMA2D_BGPFC_ALPHA_VALUE << 24;
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	699b      	ldr	r3, [r3, #24]
 800a97e:	061b      	lsls	r3, r3, #24
 800a980:	613b      	str	r3, [r7, #16]
  DMA2D->BGPFCCR |= (DMA2D_BG_InitStruct->DMA2D_BGCM | bg_clutcolormode | bg_clutsize | \
 800a982:	4b18      	ldr	r3, [pc, #96]	; (800a9e4 <DMA2D_BGConfig+0xd4>)
 800a984:	4a17      	ldr	r2, [pc, #92]	; (800a9e4 <DMA2D_BGConfig+0xd4>)
 800a986:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800a988:	687a      	ldr	r2, [r7, #4]
 800a98a:	6890      	ldr	r0, [r2, #8]
 800a98c:	69fa      	ldr	r2, [r7, #28]
 800a98e:	4310      	orrs	r0, r2
 800a990:	69ba      	ldr	r2, [r7, #24]
 800a992:	4310      	orrs	r0, r2
 800a994:	697a      	ldr	r2, [r7, #20]
 800a996:	4310      	orrs	r0, r2
                    bg_alpha_mode | bg_alphavalue);
 800a998:	693a      	ldr	r2, [r7, #16]
 800a99a:	4302      	orrs	r2, r0
  DMA2D->BGPFCCR &= (uint32_t)PFCCR_MASK;
  bg_clutcolormode = DMA2D_BG_InitStruct->DMA2D_BG_CLUT_CM << 4;
  bg_clutsize = DMA2D_BG_InitStruct->DMA2D_BG_CLUT_SIZE << 8;
  bg_alpha_mode = DMA2D_BG_InitStruct->DMA2D_BGPFC_ALPHA_MODE << 16;
  bg_alphavalue = DMA2D_BG_InitStruct->DMA2D_BGPFC_ALPHA_VALUE << 24;
  DMA2D->BGPFCCR |= (DMA2D_BG_InitStruct->DMA2D_BGCM | bg_clutcolormode | bg_clutsize | \
 800a99c:	430a      	orrs	r2, r1
 800a99e:	625a      	str	r2, [r3, #36]	; 0x24
                    bg_alpha_mode | bg_alphavalue);

  /* Configures background color */
  DMA2D->BGCOLR &= ~(DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | DMA2D_BGCOLR_RED);
 800a9a0:	4b10      	ldr	r3, [pc, #64]	; (800a9e4 <DMA2D_BGConfig+0xd4>)
 800a9a2:	4a10      	ldr	r2, [pc, #64]	; (800a9e4 <DMA2D_BGConfig+0xd4>)
 800a9a4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800a9a6:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800a9aa:	629a      	str	r2, [r3, #40]	; 0x28
  bg_colorgreen = DMA2D_BG_InitStruct->DMA2D_BGC_GREEN << 8;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	6a1b      	ldr	r3, [r3, #32]
 800a9b0:	021b      	lsls	r3, r3, #8
 800a9b2:	60fb      	str	r3, [r7, #12]
  bg_colorred = DMA2D_BG_InitStruct->DMA2D_BGC_RED << 16;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9b8:	041b      	lsls	r3, r3, #16
 800a9ba:	60bb      	str	r3, [r7, #8]
  DMA2D->BGCOLR |= (DMA2D_BG_InitStruct->DMA2D_BGC_BLUE | bg_colorgreen | bg_colorred);
 800a9bc:	4b09      	ldr	r3, [pc, #36]	; (800a9e4 <DMA2D_BGConfig+0xd4>)
 800a9be:	4a09      	ldr	r2, [pc, #36]	; (800a9e4 <DMA2D_BGConfig+0xd4>)
 800a9c0:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800a9c2:	687a      	ldr	r2, [r7, #4]
 800a9c4:	69d0      	ldr	r0, [r2, #28]
 800a9c6:	68fa      	ldr	r2, [r7, #12]
 800a9c8:	4310      	orrs	r0, r2
 800a9ca:	68ba      	ldr	r2, [r7, #8]
 800a9cc:	4302      	orrs	r2, r0
 800a9ce:	430a      	orrs	r2, r1
 800a9d0:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Configures background CLUT memory address */
  DMA2D->BGCMAR = DMA2D_BG_InitStruct->DMA2D_BGCMAR;
 800a9d2:	4b04      	ldr	r3, [pc, #16]	; (800a9e4 <DMA2D_BGConfig+0xd4>)
 800a9d4:	687a      	ldr	r2, [r7, #4]
 800a9d6:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800a9d8:	631a      	str	r2, [r3, #48]	; 0x30

}
 800a9da:	3724      	adds	r7, #36	; 0x24
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e2:	4770      	bx	lr
 800a9e4:	4002b000 	.word	0x4002b000
 800a9e8:	00fc00c0 	.word	0x00fc00c0

0800a9ec <DMA2D_BG_StructInit>:
  * @param  DMA2D_BGStruct: pointer to a DMA2D_BGTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void DMA2D_BG_StructInit(DMA2D_BG_InitTypeDef* DMA2D_BG_InitStruct)
{
 800a9ec:	b480      	push	{r7}
 800a9ee:	b083      	sub	sp, #12
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	6078      	str	r0, [r7, #4]
  /*!< Initialize the DMA2D background memory address */
  DMA2D_BG_InitStruct->DMA2D_BGMA = 0x00;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	2200      	movs	r2, #0
 800a9f8:	601a      	str	r2, [r3, #0]

  /*!< Initialize the DMA2D background offset */
  DMA2D_BG_InitStruct->DMA2D_BGO = 0x00;
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	2200      	movs	r2, #0
 800a9fe:	605a      	str	r2, [r3, #4]

  /*!< Initialize the DMA2D background color mode */
  DMA2D_BG_InitStruct->DMA2D_BGCM = CM_ARGB8888;
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	2200      	movs	r2, #0
 800aa04:	609a      	str	r2, [r3, #8]

  /*!< Initialize the DMA2D background CLUT color mode */
  DMA2D_BG_InitStruct->DMA2D_BG_CLUT_CM = CLUT_CM_ARGB8888;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	2200      	movs	r2, #0
 800aa0a:	60da      	str	r2, [r3, #12]

  /*!< Initialize the DMA2D background CLUT size */
  DMA2D_BG_InitStruct->DMA2D_BG_CLUT_SIZE = 0x00;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	2200      	movs	r2, #0
 800aa10:	611a      	str	r2, [r3, #16]

  /*!< Initialize the DMA2D background alpha mode */
  DMA2D_BG_InitStruct->DMA2D_BGPFC_ALPHA_MODE = NO_MODIF_ALPHA_VALUE;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	2200      	movs	r2, #0
 800aa16:	615a      	str	r2, [r3, #20]

  /*!< Initialize the DMA2D background alpha value */
  DMA2D_BG_InitStruct->DMA2D_BGPFC_ALPHA_VALUE = 0x00;
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	2200      	movs	r2, #0
 800aa1c:	619a      	str	r2, [r3, #24]

  /*!< Initialize the DMA2D background blue value */
  DMA2D_BG_InitStruct->DMA2D_BGC_BLUE = 0x00;
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	2200      	movs	r2, #0
 800aa22:	61da      	str	r2, [r3, #28]

  /*!< Initialize the DMA2D background green value */
  DMA2D_BG_InitStruct->DMA2D_BGC_GREEN = 0x00;
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	2200      	movs	r2, #0
 800aa28:	621a      	str	r2, [r3, #32]

  /*!< Initialize the DMA2D background red value */
  DMA2D_BG_InitStruct->DMA2D_BGC_RED = 0x00;
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	2200      	movs	r2, #0
 800aa2e:	625a      	str	r2, [r3, #36]	; 0x24

  /*!< Initialize the DMA2D background CLUT memory address */
  DMA2D_BG_InitStruct->DMA2D_BGCMAR = 0x00;
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	2200      	movs	r2, #0
 800aa34:	629a      	str	r2, [r3, #40]	; 0x28
}
 800aa36:	370c      	adds	r7, #12
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3e:	4770      	bx	lr

0800aa40 <DMA2D_FGStart>:
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */

void DMA2D_FGStart(FunctionalState NewState) 
{
 800aa40:	b480      	push	{r7}
 800aa42:	b083      	sub	sp, #12
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	4603      	mov	r3, r0
 800aa48:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800aa4a:	79fb      	ldrb	r3, [r7, #7]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d006      	beq.n	800aa5e <DMA2D_FGStart+0x1e>
  {
    /* Start the automatic loading of the CLUT */
    DMA2D->FGPFCCR |= DMA2D_FGPFCCR_START;
 800aa50:	4b08      	ldr	r3, [pc, #32]	; (800aa74 <DMA2D_FGStart+0x34>)
 800aa52:	4a08      	ldr	r2, [pc, #32]	; (800aa74 <DMA2D_FGStart+0x34>)
 800aa54:	69d2      	ldr	r2, [r2, #28]
 800aa56:	f042 0220 	orr.w	r2, r2, #32
 800aa5a:	61da      	str	r2, [r3, #28]
 800aa5c:	e005      	b.n	800aa6a <DMA2D_FGStart+0x2a>
  }
  else
  {
    /* abort the transfer */
    DMA2D->FGPFCCR &= (uint32_t)~DMA2D_FGPFCCR_START;
 800aa5e:	4b05      	ldr	r3, [pc, #20]	; (800aa74 <DMA2D_FGStart+0x34>)
 800aa60:	4a04      	ldr	r2, [pc, #16]	; (800aa74 <DMA2D_FGStart+0x34>)
 800aa62:	69d2      	ldr	r2, [r2, #28]
 800aa64:	f022 0220 	bic.w	r2, r2, #32
 800aa68:	61da      	str	r2, [r3, #28]
  }
}
 800aa6a:	370c      	adds	r7, #12
 800aa6c:	46bd      	mov	sp, r7
 800aa6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa72:	4770      	bx	lr
 800aa74:	4002b000 	.word	0x4002b000

0800aa78 <DMA2D_BGStart>:
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
  
void DMA2D_BGStart(FunctionalState NewState) 
{
 800aa78:	b480      	push	{r7}
 800aa7a:	b083      	sub	sp, #12
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	4603      	mov	r3, r0
 800aa80:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800aa82:	79fb      	ldrb	r3, [r7, #7]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d006      	beq.n	800aa96 <DMA2D_BGStart+0x1e>
  {
    /* Start the automatic loading of the CLUT */
    DMA2D->BGPFCCR |= DMA2D_BGPFCCR_START;
 800aa88:	4b08      	ldr	r3, [pc, #32]	; (800aaac <DMA2D_BGStart+0x34>)
 800aa8a:	4a08      	ldr	r2, [pc, #32]	; (800aaac <DMA2D_BGStart+0x34>)
 800aa8c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800aa8e:	f042 0220 	orr.w	r2, r2, #32
 800aa92:	625a      	str	r2, [r3, #36]	; 0x24
 800aa94:	e005      	b.n	800aaa2 <DMA2D_BGStart+0x2a>
  }
  else
  {
    /* abort the transfer */
    DMA2D->BGPFCCR &= (uint32_t)~DMA2D_BGPFCCR_START;
 800aa96:	4b05      	ldr	r3, [pc, #20]	; (800aaac <DMA2D_BGStart+0x34>)
 800aa98:	4a04      	ldr	r2, [pc, #16]	; (800aaac <DMA2D_BGStart+0x34>)
 800aa9a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800aa9c:	f022 0220 	bic.w	r2, r2, #32
 800aaa0:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800aaa2:	370c      	adds	r7, #12
 800aaa4:	46bd      	mov	sp, r7
 800aaa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaaa:	4770      	bx	lr
 800aaac:	4002b000 	.word	0x4002b000

0800aab0 <DMA2D_DeadTimeConfig>:
  * @param  DMA2D_DeadTime: specifies the DMA2D dead time.
  *   This parameter can be one of the following values:
  * @retval None
  */
void DMA2D_DeadTimeConfig(uint32_t DMA2D_DeadTime, FunctionalState NewState)
{
 800aab0:	b480      	push	{r7}
 800aab2:	b085      	sub	sp, #20
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	6078      	str	r0, [r7, #4]
 800aab8:	460b      	mov	r3, r1
 800aaba:	70fb      	strb	r3, [r7, #3]

  /* Check the parameters */
  assert_param(IS_DMA2D_DEAD_TIME(DMA2D_DeadTime));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800aabc:	78fb      	ldrb	r3, [r7, #3]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d013      	beq.n	800aaea <DMA2D_DeadTimeConfig+0x3a>
  {
    /* Enable and Configures the dead time */
    DMA2D->AMTCR &= (uint32_t)DEAD_MASK;
 800aac2:	4a0f      	ldr	r2, [pc, #60]	; (800ab00 <DMA2D_DeadTimeConfig+0x50>)
 800aac4:	4b0e      	ldr	r3, [pc, #56]	; (800ab00 <DMA2D_DeadTimeConfig+0x50>)
 800aac6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aac8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800aacc:	f023 0301 	bic.w	r3, r3, #1
 800aad0:	64d3      	str	r3, [r2, #76]	; 0x4c
    DeadTime = DMA2D_DeadTime << 8;
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	021b      	lsls	r3, r3, #8
 800aad6:	60fb      	str	r3, [r7, #12]
    DMA2D->AMTCR |= (DeadTime | DMA2D_AMTCR_EN);
 800aad8:	4b09      	ldr	r3, [pc, #36]	; (800ab00 <DMA2D_DeadTimeConfig+0x50>)
 800aada:	4a09      	ldr	r2, [pc, #36]	; (800ab00 <DMA2D_DeadTimeConfig+0x50>)
 800aadc:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 800aade:	68fa      	ldr	r2, [r7, #12]
 800aae0:	430a      	orrs	r2, r1
 800aae2:	f042 0201 	orr.w	r2, r2, #1
 800aae6:	64da      	str	r2, [r3, #76]	; 0x4c
 800aae8:	e005      	b.n	800aaf6 <DMA2D_DeadTimeConfig+0x46>
  }
  else
  {
     DMA2D->AMTCR &= ~(uint32_t)DMA2D_AMTCR_EN;
 800aaea:	4b05      	ldr	r3, [pc, #20]	; (800ab00 <DMA2D_DeadTimeConfig+0x50>)
 800aaec:	4a04      	ldr	r2, [pc, #16]	; (800ab00 <DMA2D_DeadTimeConfig+0x50>)
 800aaee:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800aaf0:	f022 0201 	bic.w	r2, r2, #1
 800aaf4:	64da      	str	r2, [r3, #76]	; 0x4c
  }
}
 800aaf6:	3714      	adds	r7, #20
 800aaf8:	46bd      	mov	sp, r7
 800aafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafe:	4770      	bx	lr
 800ab00:	4002b000 	.word	0x4002b000

0800ab04 <DMA2D_LineWatermarkConfig>:
  * @param  DMA2D_LWatermarkConfig: Line Watermark configuration.
  * @retval None
  */

void DMA2D_LineWatermarkConfig(uint32_t DMA2D_LWatermarkConfig)
{
 800ab04:	b480      	push	{r7}
 800ab06:	b083      	sub	sp, #12
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA2D_LineWatermark(DMA2D_LWatermarkConfig));

  /* Sets the Line watermark configuration */
  DMA2D->LWR = (uint32_t)DMA2D_LWatermarkConfig;
 800ab0c:	4b03      	ldr	r3, [pc, #12]	; (800ab1c <DMA2D_LineWatermarkConfig+0x18>)
 800ab0e:	687a      	ldr	r2, [r7, #4]
 800ab10:	649a      	str	r2, [r3, #72]	; 0x48
}
 800ab12:	370c      	adds	r7, #12
 800ab14:	46bd      	mov	sp, r7
 800ab16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab1a:	4770      	bx	lr
 800ab1c:	4002b000 	.word	0x4002b000

0800ab20 <DMA2D_ITConfig>:
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */

void DMA2D_ITConfig(uint32_t DMA2D_IT, FunctionalState NewState)
{
 800ab20:	b480      	push	{r7}
 800ab22:	b083      	sub	sp, #12
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	6078      	str	r0, [r7, #4]
 800ab28:	460b      	mov	r3, r1
 800ab2a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA2D_IT(DMA2D_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800ab2c:	78fb      	ldrb	r3, [r7, #3]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d006      	beq.n	800ab40 <DMA2D_ITConfig+0x20>
  {
    /* Enable the selected DMA2D interrupts */
    DMA2D->CR |= DMA2D_IT;
 800ab32:	4b09      	ldr	r3, [pc, #36]	; (800ab58 <DMA2D_ITConfig+0x38>)
 800ab34:	4a08      	ldr	r2, [pc, #32]	; (800ab58 <DMA2D_ITConfig+0x38>)
 800ab36:	6811      	ldr	r1, [r2, #0]
 800ab38:	687a      	ldr	r2, [r7, #4]
 800ab3a:	430a      	orrs	r2, r1
 800ab3c:	601a      	str	r2, [r3, #0]
 800ab3e:	e006      	b.n	800ab4e <DMA2D_ITConfig+0x2e>
  }
  else
  {
    /* Disable the selected DMA2D interrupts */
    DMA2D->CR &= (uint32_t)~DMA2D_IT;
 800ab40:	4b05      	ldr	r3, [pc, #20]	; (800ab58 <DMA2D_ITConfig+0x38>)
 800ab42:	4a05      	ldr	r2, [pc, #20]	; (800ab58 <DMA2D_ITConfig+0x38>)
 800ab44:	6811      	ldr	r1, [r2, #0]
 800ab46:	687a      	ldr	r2, [r7, #4]
 800ab48:	43d2      	mvns	r2, r2
 800ab4a:	400a      	ands	r2, r1
 800ab4c:	601a      	str	r2, [r3, #0]
  }
}
 800ab4e:	370c      	adds	r7, #12
 800ab50:	46bd      	mov	sp, r7
 800ab52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab56:	4770      	bx	lr
 800ab58:	4002b000 	.word	0x4002b000

0800ab5c <DMA2D_GetFlagStatus>:
  *     @arg DMA2D_FLAG_TE:   Transfer Error interrupt flag.
  * @retval The new state of DMA2D_FLAG (SET or RESET).
  */

FlagStatus DMA2D_GetFlagStatus(uint32_t DMA2D_FLAG)
{
 800ab5c:	b480      	push	{r7}
 800ab5e:	b085      	sub	sp, #20
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 800ab64:	2300      	movs	r3, #0
 800ab66:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_DMA2D_GET_FLAG(DMA2D_FLAG));
  
  /* Check the status of the specified DMA2D flag */
  if (((DMA2D->ISR) & DMA2D_FLAG) != (uint32_t)RESET)
 800ab68:	4b08      	ldr	r3, [pc, #32]	; (800ab8c <DMA2D_GetFlagStatus+0x30>)
 800ab6a:	685a      	ldr	r2, [r3, #4]
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	4013      	ands	r3, r2
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d002      	beq.n	800ab7a <DMA2D_GetFlagStatus+0x1e>
  {
    /* DMA2D_FLAG is set */
    bitstatus = SET;
 800ab74:	2301      	movs	r3, #1
 800ab76:	73fb      	strb	r3, [r7, #15]
 800ab78:	e001      	b.n	800ab7e <DMA2D_GetFlagStatus+0x22>
  }
  else
  {
    /* DMA2D_FLAG is reset */
    bitstatus = RESET;
 800ab7a:	2300      	movs	r3, #0
 800ab7c:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the DMA2D_FLAG status */
  return bitstatus;
 800ab7e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab80:	4618      	mov	r0, r3
 800ab82:	3714      	adds	r7, #20
 800ab84:	46bd      	mov	sp, r7
 800ab86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8a:	4770      	bx	lr
 800ab8c:	4002b000 	.word	0x4002b000

0800ab90 <DMA2D_ClearFlag>:
  *     @arg DMA2D_FLAG_TC:   Transfer Complete interrupt flag.
  *     @arg DMA2D_FLAG_TE:   Transfer Error interrupt flag.
  * @retval None
  */
void DMA2D_ClearFlag(uint32_t DMA2D_FLAG)
{
 800ab90:	b480      	push	{r7}
 800ab92:	b083      	sub	sp, #12
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA2D_GET_FLAG(DMA2D_FLAG));
    
  /* Clear the corresponding DMA2D flag */
  DMA2D->IFCR = (uint32_t)DMA2D_FLAG;
 800ab98:	4b03      	ldr	r3, [pc, #12]	; (800aba8 <DMA2D_ClearFlag+0x18>)
 800ab9a:	687a      	ldr	r2, [r7, #4]
 800ab9c:	609a      	str	r2, [r3, #8]
}
 800ab9e:	370c      	adds	r7, #12
 800aba0:	46bd      	mov	sp, r7
 800aba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba6:	4770      	bx	lr
 800aba8:	4002b000 	.word	0x4002b000

0800abac <DMA2D_GetITStatus>:
  *     @arg DMA2D_IT_TC:   Transfer Complete interrupt enable.
  *     @arg DMA2D_IT_TE:   Transfer Error interrupt enable.
  * @retval The new state of the DMA2D_IT (SET or RESET).
  */
ITStatus DMA2D_GetITStatus(uint32_t DMA2D_IT)
{
 800abac:	b480      	push	{r7}
 800abae:	b085      	sub	sp, #20
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 800abb4:	2300      	movs	r3, #0
 800abb6:	73fb      	strb	r3, [r7, #15]
  uint32_t DMA2D_IT_FLAG = DMA2D_IT >> 8;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	0a1b      	lsrs	r3, r3, #8
 800abbc:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_DMA2D_IT(DMA2D_IT));

  if ((DMA2D->ISR & DMA2D_IT_FLAG) != (uint32_t)RESET)
 800abbe:	4b10      	ldr	r3, [pc, #64]	; (800ac00 <DMA2D_GetITStatus+0x54>)
 800abc0:	685a      	ldr	r2, [r3, #4]
 800abc2:	68bb      	ldr	r3, [r7, #8]
 800abc4:	4013      	ands	r3, r2
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d002      	beq.n	800abd0 <DMA2D_GetITStatus+0x24>
  {
    bitstatus = SET;
 800abca:	2301      	movs	r3, #1
 800abcc:	73fb      	strb	r3, [r7, #15]
 800abce:	e001      	b.n	800abd4 <DMA2D_GetITStatus+0x28>
  }
  else
  {
    bitstatus = RESET;
 800abd0:	2300      	movs	r3, #0
 800abd2:	73fb      	strb	r3, [r7, #15]
  }
  
  if (((DMA2D->CR & DMA2D_IT) != (uint32_t)RESET) && (bitstatus != (uint32_t)RESET))
 800abd4:	4b0a      	ldr	r3, [pc, #40]	; (800ac00 <DMA2D_GetITStatus+0x54>)
 800abd6:	681a      	ldr	r2, [r3, #0]
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	4013      	ands	r3, r2
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d005      	beq.n	800abec <DMA2D_GetITStatus+0x40>
 800abe0:	7bfb      	ldrb	r3, [r7, #15]
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d002      	beq.n	800abec <DMA2D_GetITStatus+0x40>
  {
    bitstatus = SET;
 800abe6:	2301      	movs	r3, #1
 800abe8:	73fb      	strb	r3, [r7, #15]
 800abea:	e001      	b.n	800abf0 <DMA2D_GetITStatus+0x44>
  }
  else
  {
    bitstatus = RESET;
 800abec:	2300      	movs	r3, #0
 800abee:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800abf0:	7bfb      	ldrb	r3, [r7, #15]
}
 800abf2:	4618      	mov	r0, r3
 800abf4:	3714      	adds	r7, #20
 800abf6:	46bd      	mov	sp, r7
 800abf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfc:	4770      	bx	lr
 800abfe:	bf00      	nop
 800ac00:	4002b000 	.word	0x4002b000

0800ac04 <DMA2D_ClearITPendingBit>:
  *     @arg DMA2D_IT_TC:   Transfer Complete interrupt.
  *     @arg DMA2D_IT_TE:   Transfer Error interrupt.
  * @retval None
  */
void DMA2D_ClearITPendingBit(uint32_t DMA2D_IT)
{
 800ac04:	b480      	push	{r7}
 800ac06:	b083      	sub	sp, #12
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA2D_IT(DMA2D_IT));
  DMA2D_IT = DMA2D_IT >> 8;
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	0a1b      	lsrs	r3, r3, #8
 800ac10:	607b      	str	r3, [r7, #4]
    
  /* Clear the corresponding DMA2D Interrupt */
  DMA2D->IFCR = (uint32_t)DMA2D_IT;
 800ac12:	4b04      	ldr	r3, [pc, #16]	; (800ac24 <DMA2D_ClearITPendingBit+0x20>)
 800ac14:	687a      	ldr	r2, [r7, #4]
 800ac16:	609a      	str	r2, [r3, #8]
}
 800ac18:	370c      	adds	r7, #12
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac20:	4770      	bx	lr
 800ac22:	bf00      	nop
 800ac24:	4002b000 	.word	0x4002b000

0800ac28 <DMA_DeInit>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *         to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_DeInit(DMA_Stream_TypeDef* DMAy_Streamx)
{
 800ac28:	b480      	push	{r7}
 800ac2a:	b083      	sub	sp, #12
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Disable the selected DMAy Streamx */
  DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	f023 0201 	bic.w	r2, r3, #1
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	601a      	str	r2, [r3, #0]

  /* Reset DMAy Streamx control register */
  DMAy_Streamx->CR  = 0;
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	2200      	movs	r2, #0
 800ac40:	601a      	str	r2, [r3, #0]
  
  /* Reset DMAy Streamx Number of Data to Transfer register */
  DMAy_Streamx->NDTR = 0;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	2200      	movs	r2, #0
 800ac46:	605a      	str	r2, [r3, #4]
  
  /* Reset DMAy Streamx peripheral address register */
  DMAy_Streamx->PAR  = 0;
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	2200      	movs	r2, #0
 800ac4c:	609a      	str	r2, [r3, #8]
  
  /* Reset DMAy Streamx memory 0 address register */
  DMAy_Streamx->M0AR = 0;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	2200      	movs	r2, #0
 800ac52:	60da      	str	r2, [r3, #12]

  /* Reset DMAy Streamx memory 1 address register */
  DMAy_Streamx->M1AR = 0;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	2200      	movs	r2, #0
 800ac58:	611a      	str	r2, [r3, #16]

  /* Reset DMAy Streamx FIFO control register */
  DMAy_Streamx->FCR = (uint32_t)0x00000021; 
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	2221      	movs	r2, #33	; 0x21
 800ac5e:	615a      	str	r2, [r3, #20]

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
 800ac60:	687a      	ldr	r2, [r7, #4]
 800ac62:	4b45      	ldr	r3, [pc, #276]	; (800ad78 <DMA_DeInit+0x150>)
 800ac64:	429a      	cmp	r2, r3
 800ac66:	d103      	bne.n	800ac70 <DMA_DeInit+0x48>
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
 800ac68:	4b44      	ldr	r3, [pc, #272]	; (800ad7c <DMA_DeInit+0x154>)
 800ac6a:	223d      	movs	r2, #61	; 0x3d
 800ac6c:	609a      	str	r2, [r3, #8]
 800ac6e:	e07e      	b.n	800ad6e <DMA_DeInit+0x146>
  }
  else if (DMAy_Streamx == DMA1_Stream1)
 800ac70:	687a      	ldr	r2, [r7, #4]
 800ac72:	4b43      	ldr	r3, [pc, #268]	; (800ad80 <DMA_DeInit+0x158>)
 800ac74:	429a      	cmp	r2, r3
 800ac76:	d104      	bne.n	800ac82 <DMA_DeInit+0x5a>
  {
    /* Reset interrupt pending bits for DMA1 Stream1 */
    DMA1->LIFCR = DMA_Stream1_IT_MASK;
 800ac78:	4b40      	ldr	r3, [pc, #256]	; (800ad7c <DMA_DeInit+0x154>)
 800ac7a:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 800ac7e:	609a      	str	r2, [r3, #8]
 800ac80:	e075      	b.n	800ad6e <DMA_DeInit+0x146>
  }
  else if (DMAy_Streamx == DMA1_Stream2)
 800ac82:	687a      	ldr	r2, [r7, #4]
 800ac84:	4b3f      	ldr	r3, [pc, #252]	; (800ad84 <DMA_DeInit+0x15c>)
 800ac86:	429a      	cmp	r2, r3
 800ac88:	d104      	bne.n	800ac94 <DMA_DeInit+0x6c>
  {
    /* Reset interrupt pending bits for DMA1 Stream2 */
    DMA1->LIFCR = DMA_Stream2_IT_MASK;
 800ac8a:	4b3c      	ldr	r3, [pc, #240]	; (800ad7c <DMA_DeInit+0x154>)
 800ac8c:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 800ac90:	609a      	str	r2, [r3, #8]
 800ac92:	e06c      	b.n	800ad6e <DMA_DeInit+0x146>
  }
  else if (DMAy_Streamx == DMA1_Stream3)
 800ac94:	687a      	ldr	r2, [r7, #4]
 800ac96:	4b3c      	ldr	r3, [pc, #240]	; (800ad88 <DMA_DeInit+0x160>)
 800ac98:	429a      	cmp	r2, r3
 800ac9a:	d104      	bne.n	800aca6 <DMA_DeInit+0x7e>
  {
    /* Reset interrupt pending bits for DMA1 Stream3 */
    DMA1->LIFCR = DMA_Stream3_IT_MASK;
 800ac9c:	4b37      	ldr	r3, [pc, #220]	; (800ad7c <DMA_DeInit+0x154>)
 800ac9e:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 800aca2:	609a      	str	r2, [r3, #8]
 800aca4:	e063      	b.n	800ad6e <DMA_DeInit+0x146>
  }
  else if (DMAy_Streamx == DMA1_Stream4)
 800aca6:	687a      	ldr	r2, [r7, #4]
 800aca8:	4b38      	ldr	r3, [pc, #224]	; (800ad8c <DMA_DeInit+0x164>)
 800acaa:	429a      	cmp	r2, r3
 800acac:	d103      	bne.n	800acb6 <DMA_DeInit+0x8e>
  {
    /* Reset interrupt pending bits for DMA1 Stream4 */
    DMA1->HIFCR = DMA_Stream4_IT_MASK;
 800acae:	4b33      	ldr	r3, [pc, #204]	; (800ad7c <DMA_DeInit+0x154>)
 800acb0:	4a37      	ldr	r2, [pc, #220]	; (800ad90 <DMA_DeInit+0x168>)
 800acb2:	60da      	str	r2, [r3, #12]
 800acb4:	e05b      	b.n	800ad6e <DMA_DeInit+0x146>
  }
  else if (DMAy_Streamx == DMA1_Stream5)
 800acb6:	687a      	ldr	r2, [r7, #4]
 800acb8:	4b36      	ldr	r3, [pc, #216]	; (800ad94 <DMA_DeInit+0x16c>)
 800acba:	429a      	cmp	r2, r3
 800acbc:	d103      	bne.n	800acc6 <DMA_DeInit+0x9e>
  {
    /* Reset interrupt pending bits for DMA1 Stream5 */
    DMA1->HIFCR = DMA_Stream5_IT_MASK;
 800acbe:	4b2f      	ldr	r3, [pc, #188]	; (800ad7c <DMA_DeInit+0x154>)
 800acc0:	4a35      	ldr	r2, [pc, #212]	; (800ad98 <DMA_DeInit+0x170>)
 800acc2:	60da      	str	r2, [r3, #12]
 800acc4:	e053      	b.n	800ad6e <DMA_DeInit+0x146>
  }
  else if (DMAy_Streamx == DMA1_Stream6)
 800acc6:	687a      	ldr	r2, [r7, #4]
 800acc8:	4b34      	ldr	r3, [pc, #208]	; (800ad9c <DMA_DeInit+0x174>)
 800acca:	429a      	cmp	r2, r3
 800accc:	d103      	bne.n	800acd6 <DMA_DeInit+0xae>
  {
    /* Reset interrupt pending bits for DMA1 Stream6 */
    DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
 800acce:	4b2b      	ldr	r3, [pc, #172]	; (800ad7c <DMA_DeInit+0x154>)
 800acd0:	4a33      	ldr	r2, [pc, #204]	; (800ada0 <DMA_DeInit+0x178>)
 800acd2:	60da      	str	r2, [r3, #12]
 800acd4:	e04b      	b.n	800ad6e <DMA_DeInit+0x146>
  }
  else if (DMAy_Streamx == DMA1_Stream7)
 800acd6:	687a      	ldr	r2, [r7, #4]
 800acd8:	4b32      	ldr	r3, [pc, #200]	; (800ada4 <DMA_DeInit+0x17c>)
 800acda:	429a      	cmp	r2, r3
 800acdc:	d104      	bne.n	800ace8 <DMA_DeInit+0xc0>
  {
    /* Reset interrupt pending bits for DMA1 Stream7 */
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
 800acde:	4b27      	ldr	r3, [pc, #156]	; (800ad7c <DMA_DeInit+0x154>)
 800ace0:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 800ace4:	60da      	str	r2, [r3, #12]
 800ace6:	e042      	b.n	800ad6e <DMA_DeInit+0x146>
  }
  else if (DMAy_Streamx == DMA2_Stream0)
 800ace8:	687a      	ldr	r2, [r7, #4]
 800acea:	4b2f      	ldr	r3, [pc, #188]	; (800ada8 <DMA_DeInit+0x180>)
 800acec:	429a      	cmp	r2, r3
 800acee:	d103      	bne.n	800acf8 <DMA_DeInit+0xd0>
  {
    /* Reset interrupt pending bits for DMA2 Stream0 */
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
 800acf0:	4b2e      	ldr	r3, [pc, #184]	; (800adac <DMA_DeInit+0x184>)
 800acf2:	223d      	movs	r2, #61	; 0x3d
 800acf4:	609a      	str	r2, [r3, #8]
 800acf6:	e03a      	b.n	800ad6e <DMA_DeInit+0x146>
  }
  else if (DMAy_Streamx == DMA2_Stream1)
 800acf8:	687a      	ldr	r2, [r7, #4]
 800acfa:	4b2d      	ldr	r3, [pc, #180]	; (800adb0 <DMA_DeInit+0x188>)
 800acfc:	429a      	cmp	r2, r3
 800acfe:	d104      	bne.n	800ad0a <DMA_DeInit+0xe2>
  {
    /* Reset interrupt pending bits for DMA2 Stream1 */
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
 800ad00:	4b2a      	ldr	r3, [pc, #168]	; (800adac <DMA_DeInit+0x184>)
 800ad02:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 800ad06:	609a      	str	r2, [r3, #8]
 800ad08:	e031      	b.n	800ad6e <DMA_DeInit+0x146>
  }
  else if (DMAy_Streamx == DMA2_Stream2)
 800ad0a:	687a      	ldr	r2, [r7, #4]
 800ad0c:	4b29      	ldr	r3, [pc, #164]	; (800adb4 <DMA_DeInit+0x18c>)
 800ad0e:	429a      	cmp	r2, r3
 800ad10:	d104      	bne.n	800ad1c <DMA_DeInit+0xf4>
  {
    /* Reset interrupt pending bits for DMA2 Stream2 */
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
 800ad12:	4b26      	ldr	r3, [pc, #152]	; (800adac <DMA_DeInit+0x184>)
 800ad14:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 800ad18:	609a      	str	r2, [r3, #8]
 800ad1a:	e028      	b.n	800ad6e <DMA_DeInit+0x146>
  }
  else if (DMAy_Streamx == DMA2_Stream3)
 800ad1c:	687a      	ldr	r2, [r7, #4]
 800ad1e:	4b26      	ldr	r3, [pc, #152]	; (800adb8 <DMA_DeInit+0x190>)
 800ad20:	429a      	cmp	r2, r3
 800ad22:	d104      	bne.n	800ad2e <DMA_DeInit+0x106>
  {
    /* Reset interrupt pending bits for DMA2 Stream3 */
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
 800ad24:	4b21      	ldr	r3, [pc, #132]	; (800adac <DMA_DeInit+0x184>)
 800ad26:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 800ad2a:	609a      	str	r2, [r3, #8]
 800ad2c:	e01f      	b.n	800ad6e <DMA_DeInit+0x146>
  }
  else if (DMAy_Streamx == DMA2_Stream4)
 800ad2e:	687a      	ldr	r2, [r7, #4]
 800ad30:	4b22      	ldr	r3, [pc, #136]	; (800adbc <DMA_DeInit+0x194>)
 800ad32:	429a      	cmp	r2, r3
 800ad34:	d103      	bne.n	800ad3e <DMA_DeInit+0x116>
  {
    /* Reset interrupt pending bits for DMA2 Stream4 */
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
 800ad36:	4b1d      	ldr	r3, [pc, #116]	; (800adac <DMA_DeInit+0x184>)
 800ad38:	4a15      	ldr	r2, [pc, #84]	; (800ad90 <DMA_DeInit+0x168>)
 800ad3a:	60da      	str	r2, [r3, #12]
 800ad3c:	e017      	b.n	800ad6e <DMA_DeInit+0x146>
  }
  else if (DMAy_Streamx == DMA2_Stream5)
 800ad3e:	687a      	ldr	r2, [r7, #4]
 800ad40:	4b1f      	ldr	r3, [pc, #124]	; (800adc0 <DMA_DeInit+0x198>)
 800ad42:	429a      	cmp	r2, r3
 800ad44:	d103      	bne.n	800ad4e <DMA_DeInit+0x126>
  {
    /* Reset interrupt pending bits for DMA2 Stream5 */
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
 800ad46:	4b19      	ldr	r3, [pc, #100]	; (800adac <DMA_DeInit+0x184>)
 800ad48:	4a13      	ldr	r2, [pc, #76]	; (800ad98 <DMA_DeInit+0x170>)
 800ad4a:	60da      	str	r2, [r3, #12]
 800ad4c:	e00f      	b.n	800ad6e <DMA_DeInit+0x146>
  }
  else if (DMAy_Streamx == DMA2_Stream6)
 800ad4e:	687a      	ldr	r2, [r7, #4]
 800ad50:	4b1c      	ldr	r3, [pc, #112]	; (800adc4 <DMA_DeInit+0x19c>)
 800ad52:	429a      	cmp	r2, r3
 800ad54:	d103      	bne.n	800ad5e <DMA_DeInit+0x136>
  {
    /* Reset interrupt pending bits for DMA2 Stream6 */
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
 800ad56:	4b15      	ldr	r3, [pc, #84]	; (800adac <DMA_DeInit+0x184>)
 800ad58:	4a11      	ldr	r2, [pc, #68]	; (800ada0 <DMA_DeInit+0x178>)
 800ad5a:	60da      	str	r2, [r3, #12]
 800ad5c:	e007      	b.n	800ad6e <DMA_DeInit+0x146>
  }
  else 
  {
    if (DMAy_Streamx == DMA2_Stream7)
 800ad5e:	687a      	ldr	r2, [r7, #4]
 800ad60:	4b19      	ldr	r3, [pc, #100]	; (800adc8 <DMA_DeInit+0x1a0>)
 800ad62:	429a      	cmp	r2, r3
 800ad64:	d103      	bne.n	800ad6e <DMA_DeInit+0x146>
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
 800ad66:	4b11      	ldr	r3, [pc, #68]	; (800adac <DMA_DeInit+0x184>)
 800ad68:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 800ad6c:	60da      	str	r2, [r3, #12]
    }
  }
}
 800ad6e:	370c      	adds	r7, #12
 800ad70:	46bd      	mov	sp, r7
 800ad72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad76:	4770      	bx	lr
 800ad78:	40026010 	.word	0x40026010
 800ad7c:	40026000 	.word	0x40026000
 800ad80:	40026028 	.word	0x40026028
 800ad84:	40026040 	.word	0x40026040
 800ad88:	40026058 	.word	0x40026058
 800ad8c:	40026070 	.word	0x40026070
 800ad90:	2000003d 	.word	0x2000003d
 800ad94:	40026088 	.word	0x40026088
 800ad98:	20000f40 	.word	0x20000f40
 800ad9c:	400260a0 	.word	0x400260a0
 800ada0:	203d0000 	.word	0x203d0000
 800ada4:	400260b8 	.word	0x400260b8
 800ada8:	40026410 	.word	0x40026410
 800adac:	40026400 	.word	0x40026400
 800adb0:	40026428 	.word	0x40026428
 800adb4:	40026440 	.word	0x40026440
 800adb8:	40026458 	.word	0x40026458
 800adbc:	40026470 	.word	0x40026470
 800adc0:	40026488 	.word	0x40026488
 800adc4:	400264a0 	.word	0x400264a0
 800adc8:	400264b8 	.word	0x400264b8

0800adcc <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 800adcc:	b480      	push	{r7}
 800adce:	b085      	sub	sp, #20
 800add0:	af00      	add	r7, sp, #0
 800add2:	6078      	str	r0, [r7, #4]
 800add4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800add6:	2300      	movs	r3, #0
 800add8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800ade0:	68fa      	ldr	r2, [r7, #12]
 800ade2:	4b24      	ldr	r3, [pc, #144]	; (800ae74 <DMA_Init+0xa8>)
 800ade4:	4013      	ands	r3, r2
 800ade6:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800ade8:	683b      	ldr	r3, [r7, #0]
 800adea:	681a      	ldr	r2, [r3, #0]
 800adec:	683b      	ldr	r3, [r7, #0]
 800adee:	68db      	ldr	r3, [r3, #12]
 800adf0:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800adf2:	683b      	ldr	r3, [r7, #0]
 800adf4:	695b      	ldr	r3, [r3, #20]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800adf6:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800adf8:	683b      	ldr	r3, [r7, #0]
 800adfa:	699b      	ldr	r3, [r3, #24]
 800adfc:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800adfe:	683b      	ldr	r3, [r7, #0]
 800ae00:	69db      	ldr	r3, [r3, #28]
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800ae02:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800ae04:	683b      	ldr	r3, [r7, #0]
 800ae06:	6a1b      	ldr	r3, [r3, #32]
 800ae08:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 800ae0a:	683b      	ldr	r3, [r7, #0]
 800ae0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800ae0e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 800ae10:	683b      	ldr	r3, [r7, #0]
 800ae12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae14:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 800ae16:	683b      	ldr	r3, [r7, #0]
 800ae18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 800ae1a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 800ae1c:	683b      	ldr	r3, [r7, #0]
 800ae1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae20:	4313      	orrs	r3, r2
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800ae22:	68fa      	ldr	r2, [r7, #12]
 800ae24:	4313      	orrs	r3, r2
 800ae26:	60fb      	str	r3, [r7, #12]
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	68fa      	ldr	r2, [r7, #12]
 800ae2c:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	695b      	ldr	r3, [r3, #20]
 800ae32:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	f023 0307 	bic.w	r3, r3, #7
 800ae3a:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 800ae3c:	683b      	ldr	r3, [r7, #0]
 800ae3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae40:	683b      	ldr	r3, [r7, #0]
 800ae42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae44:	4313      	orrs	r3, r2
 800ae46:	68fa      	ldr	r2, [r7, #12]
 800ae48:	4313      	orrs	r3, r2
 800ae4a:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	68fa      	ldr	r2, [r7, #12]
 800ae50:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 800ae52:	683b      	ldr	r3, [r7, #0]
 800ae54:	691a      	ldr	r2, [r3, #16]
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 800ae5a:	683b      	ldr	r3, [r7, #0]
 800ae5c:	685a      	ldr	r2, [r3, #4]
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 800ae62:	683b      	ldr	r3, [r7, #0]
 800ae64:	689a      	ldr	r2, [r3, #8]
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	60da      	str	r2, [r3, #12]
}
 800ae6a:	3714      	adds	r7, #20
 800ae6c:	46bd      	mov	sp, r7
 800ae6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae72:	4770      	bx	lr
 800ae74:	f01c803f 	.word	0xf01c803f

0800ae78 <DMA_StructInit>:
  * @param  DMA_InitStruct : pointer to a DMA_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
{
 800ae78:	b480      	push	{r7}
 800ae7a:	b083      	sub	sp, #12
 800ae7c:	af00      	add	r7, sp, #0
 800ae7e:	6078      	str	r0, [r7, #4]
  /*-------------- Reset DMA init structure parameters values ----------------*/
  /* Initialize the DMA_Channel member */
  DMA_InitStruct->DMA_Channel = 0;
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	2200      	movs	r2, #0
 800ae84:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA_PeripheralBaseAddr member */
  DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	2200      	movs	r2, #0
 800ae8a:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA_Memory0BaseAddr member */
  DMA_InitStruct->DMA_Memory0BaseAddr = 0;
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	2200      	movs	r2, #0
 800ae90:	609a      	str	r2, [r3, #8]

  /* Initialize the DMA_DIR member */
  DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralToMemory;
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	2200      	movs	r2, #0
 800ae96:	60da      	str	r2, [r3, #12]

  /* Initialize the DMA_BufferSize member */
  DMA_InitStruct->DMA_BufferSize = 0;
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	2200      	movs	r2, #0
 800ae9c:	611a      	str	r2, [r3, #16]

  /* Initialize the DMA_PeripheralInc member */
  DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	2200      	movs	r2, #0
 800aea2:	615a      	str	r2, [r3, #20]

  /* Initialize the DMA_MemoryInc member */
  DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	2200      	movs	r2, #0
 800aea8:	619a      	str	r2, [r3, #24]

  /* Initialize the DMA_PeripheralDataSize member */
  DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	2200      	movs	r2, #0
 800aeae:	61da      	str	r2, [r3, #28]

  /* Initialize the DMA_MemoryDataSize member */
  DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	2200      	movs	r2, #0
 800aeb4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA_Mode member */
  DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	2200      	movs	r2, #0
 800aeba:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the DMA_Priority member */
  DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	2200      	movs	r2, #0
 800aec0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Initialize the DMA_FIFOMode member */
  DMA_InitStruct->DMA_FIFOMode = DMA_FIFOMode_Disable;
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	2200      	movs	r2, #0
 800aec6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the DMA_FIFOThreshold member */
  DMA_InitStruct->DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	2200      	movs	r2, #0
 800aecc:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the DMA_MemoryBurst member */
  DMA_InitStruct->DMA_MemoryBurst = DMA_MemoryBurst_Single;
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	2200      	movs	r2, #0
 800aed2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the DMA_PeripheralBurst member */
  DMA_InitStruct->DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	2200      	movs	r2, #0
 800aed8:	639a      	str	r2, [r3, #56]	; 0x38
}
 800aeda:	370c      	adds	r7, #12
 800aedc:	46bd      	mov	sp, r7
 800aede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee2:	4770      	bx	lr

0800aee4 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 800aee4:	b480      	push	{r7}
 800aee6:	b083      	sub	sp, #12
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	6078      	str	r0, [r7, #4]
 800aeec:	460b      	mov	r3, r1
 800aeee:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800aef0:	78fb      	ldrb	r3, [r7, #3]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d006      	beq.n	800af04 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	f043 0201 	orr.w	r2, r3, #1
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	601a      	str	r2, [r3, #0]
 800af02:	e005      	b.n	800af10 <DMA_Cmd+0x2c>
  }
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	f023 0201 	bic.w	r2, r3, #1
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	601a      	str	r2, [r3, #0]
  }
}
 800af10:	370c      	adds	r7, #12
 800af12:	46bd      	mov	sp, r7
 800af14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af18:	4770      	bx	lr
 800af1a:	bf00      	nop

0800af1c <DMA_PeriphIncOffsetSizeConfig>:
  *            @arg DMA_PINCOS_WordAligned: Peripheral address increment offset is 
  *                                         fixed to 4 (32-bit aligned addresses). 
  * @retval None
  */
void DMA_PeriphIncOffsetSizeConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_Pincos)
{
 800af1c:	b480      	push	{r7}
 800af1e:	b083      	sub	sp, #12
 800af20:	af00      	add	r7, sp, #0
 800af22:	6078      	str	r0, [r7, #4]
 800af24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_PINCOS_SIZE(DMA_Pincos));

  /* Check the needed Peripheral increment offset */
  if(DMA_Pincos != DMA_PINCOS_Psize)
 800af26:	683b      	ldr	r3, [r7, #0]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d006      	beq.n	800af3a <DMA_PeriphIncOffsetSizeConfig+0x1e>
  {
    /* Configure DMA_SxCR_PINCOS bit with the input parameter */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_PINCOS;     
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	601a      	str	r2, [r3, #0]
 800af38:	e005      	b.n	800af46 <DMA_PeriphIncOffsetSizeConfig+0x2a>
  }
  else
  {
    /* Clear the PINCOS bit: Peripheral address incremented according to PSIZE */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_PINCOS;    
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	601a      	str	r2, [r3, #0]
  }
}
 800af46:	370c      	adds	r7, #12
 800af48:	46bd      	mov	sp, r7
 800af4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af4e:	4770      	bx	lr

0800af50 <DMA_FlowControllerConfig>:
  *            @arg DMA_FlowCtrl_Peripheral: DMAy_Streamx transactions flow controller 
  *                                          is the peripheral.    
  * @retval None
  */
void DMA_FlowControllerConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FlowCtrl)
{
 800af50:	b480      	push	{r7}
 800af52:	b083      	sub	sp, #12
 800af54:	af00      	add	r7, sp, #0
 800af56:	6078      	str	r0, [r7, #4]
 800af58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_FLOW_CTRL(DMA_FlowCtrl));

  /* Check the needed flow controller  */
  if(DMA_FlowCtrl != DMA_FlowCtrl_Memory)
 800af5a:	683b      	ldr	r3, [r7, #0]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d006      	beq.n	800af6e <DMA_FlowControllerConfig+0x1e>
  {
    /* Configure DMA_SxCR_PFCTRL bit with the input parameter */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_PFCTRL;   
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	f043 0220 	orr.w	r2, r3, #32
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	601a      	str	r2, [r3, #0]
 800af6c:	e005      	b.n	800af7a <DMA_FlowControllerConfig+0x2a>
  }
  else
  {
    /* Clear the PFCTRL bit: Memory is the flow controller */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_PFCTRL;    
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	f023 0220 	bic.w	r2, r3, #32
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	601a      	str	r2, [r3, #0]
  }
}
 800af7a:	370c      	adds	r7, #12
 800af7c:	46bd      	mov	sp, r7
 800af7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af82:	4770      	bx	lr

0800af84 <DMA_SetCurrDataCounter>:
  *         DMAy_SxPAR register is considered as Peripheral.
  *      
  * @retval The number of remaining data units in the current DMAy Streamx transfer.
  */
void DMA_SetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx, uint16_t Counter)
{
 800af84:	b480      	push	{r7}
 800af86:	b083      	sub	sp, #12
 800af88:	af00      	add	r7, sp, #0
 800af8a:	6078      	str	r0, [r7, #4]
 800af8c:	460b      	mov	r3, r1
 800af8e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Write the number of data units to be transferred */
  DMAy_Streamx->NDTR = (uint16_t)Counter;
 800af90:	887a      	ldrh	r2, [r7, #2]
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	605a      	str	r2, [r3, #4]
}
 800af96:	370c      	adds	r7, #12
 800af98:	46bd      	mov	sp, r7
 800af9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9e:	4770      	bx	lr

0800afa0 <DMA_GetCurrDataCounter>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *          to 7 to select the DMA Stream.
  * @retval The number of remaining data units in the current DMAy Streamx transfer.
  */
uint16_t DMA_GetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx)
{
 800afa0:	b480      	push	{r7}
 800afa2:	b083      	sub	sp, #12
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Return the number of remaining data units for DMAy Streamx */
  return ((uint16_t)(DMAy_Streamx->NDTR));
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	685b      	ldr	r3, [r3, #4]
 800afac:	b29b      	uxth	r3, r3
}
 800afae:	4618      	mov	r0, r3
 800afb0:	370c      	adds	r7, #12
 800afb2:	46bd      	mov	sp, r7
 800afb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb8:	4770      	bx	lr
 800afba:	bf00      	nop

0800afbc <DMA_DoubleBufferModeConfig>:
  *   
  * @retval None
  */
void DMA_DoubleBufferModeConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t Memory1BaseAddr,
                                uint32_t DMA_CurrentMemory)
{  
 800afbc:	b480      	push	{r7}
 800afbe:	b085      	sub	sp, #20
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	60f8      	str	r0, [r7, #12]
 800afc4:	60b9      	str	r1, [r7, #8]
 800afc6:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CURRENT_MEM(DMA_CurrentMemory));

  if (DMA_CurrentMemory != DMA_Memory_0)
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d006      	beq.n	800afdc <DMA_DoubleBufferModeConfig+0x20>
  {
    /* Set Memory 1 as current memory address */
    DMAy_Streamx->CR |= (uint32_t)(DMA_SxCR_CT);    
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	601a      	str	r2, [r3, #0]
 800afda:	e005      	b.n	800afe8 <DMA_DoubleBufferModeConfig+0x2c>
  }
  else
  {
    /* Set Memory 0 as current memory address */
    DMAy_Streamx->CR &= ~(uint32_t)(DMA_SxCR_CT);    
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	601a      	str	r2, [r3, #0]
  }

  /* Write to DMAy Streamx M1AR */
  DMAy_Streamx->M1AR = Memory1BaseAddr;
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	68ba      	ldr	r2, [r7, #8]
 800afec:	611a      	str	r2, [r3, #16]
}
 800afee:	3714      	adds	r7, #20
 800aff0:	46bd      	mov	sp, r7
 800aff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff6:	4770      	bx	lr

0800aff8 <DMA_DoubleBufferModeCmd>:
  * @param  NewState: new state of the DMAy Streamx double buffer mode. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_DoubleBufferModeCmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{  
 800aff8:	b480      	push	{r7}
 800affa:	b083      	sub	sp, #12
 800affc:	af00      	add	r7, sp, #0
 800affe:	6078      	str	r0, [r7, #4]
 800b000:	460b      	mov	r3, r1
 800b002:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Configure the Double Buffer mode */
  if (NewState != DISABLE)
 800b004:	78fb      	ldrb	r3, [r7, #3]
 800b006:	2b00      	cmp	r3, #0
 800b008:	d006      	beq.n	800b018 <DMA_DoubleBufferModeCmd+0x20>
  {
    /* Enable the Double buffer mode */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_DBM;
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	601a      	str	r2, [r3, #0]
 800b016:	e005      	b.n	800b024 <DMA_DoubleBufferModeCmd+0x2c>
  }
  else
  {
    /* Disable the Double buffer mode */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_DBM;
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	601a      	str	r2, [r3, #0]
  }
}
 800b024:	370c      	adds	r7, #12
 800b026:	46bd      	mov	sp, r7
 800b028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b02c:	4770      	bx	lr
 800b02e:	bf00      	nop

0800b030 <DMA_MemoryTargetConfig>:
  *  
  * @retval None
  */
void DMA_MemoryTargetConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t MemoryBaseAddr,
                           uint32_t DMA_MemoryTarget)
{
 800b030:	b480      	push	{r7}
 800b032:	b085      	sub	sp, #20
 800b034:	af00      	add	r7, sp, #0
 800b036:	60f8      	str	r0, [r7, #12]
 800b038:	60b9      	str	r1, [r7, #8]
 800b03a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CURRENT_MEM(DMA_MemoryTarget));
    
  /* Check the Memory target to be configured */
  if (DMA_MemoryTarget != DMA_Memory_0)
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d003      	beq.n	800b04a <DMA_MemoryTargetConfig+0x1a>
  {
    /* Write to DMAy Streamx M1AR */
    DMAy_Streamx->M1AR = MemoryBaseAddr;    
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	68ba      	ldr	r2, [r7, #8]
 800b046:	611a      	str	r2, [r3, #16]
 800b048:	e002      	b.n	800b050 <DMA_MemoryTargetConfig+0x20>
  }  
  else
  {
    /* Write to DMAy Streamx M0AR */
    DMAy_Streamx->M0AR = MemoryBaseAddr;  
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	68ba      	ldr	r2, [r7, #8]
 800b04e:	60da      	str	r2, [r3, #12]
  }
}
 800b050:	3714      	adds	r7, #20
 800b052:	46bd      	mov	sp, r7
 800b054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b058:	4770      	bx	lr
 800b05a:	bf00      	nop

0800b05c <DMA_GetCurrentMemoryTarget>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *          to 7 to select the DMA Stream.
  * @retval The memory target number: 0 for Memory0 or 1 for Memory1. 
  */
uint32_t DMA_GetCurrentMemoryTarget(DMA_Stream_TypeDef* DMAy_Streamx)
{
 800b05c:	b480      	push	{r7}
 800b05e:	b085      	sub	sp, #20
 800b060:	af00      	add	r7, sp, #0
 800b062:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 800b064:	2300      	movs	r3, #0
 800b066:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Get the current memory target */
  if ((DMAy_Streamx->CR & DMA_SxCR_CT) != 0)
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b070:	2b00      	cmp	r3, #0
 800b072:	d002      	beq.n	800b07a <DMA_GetCurrentMemoryTarget+0x1e>
  {
    /* Current memory buffer used is Memory 1 */
    tmp = 1;
 800b074:	2301      	movs	r3, #1
 800b076:	60fb      	str	r3, [r7, #12]
 800b078:	e001      	b.n	800b07e <DMA_GetCurrentMemoryTarget+0x22>
  }  
  else
  {
    /* Current memory buffer used is Memory 0 */
    tmp = 0;    
 800b07a:	2300      	movs	r3, #0
 800b07c:	60fb      	str	r3, [r7, #12]
  }
  return tmp;
 800b07e:	68fb      	ldr	r3, [r7, #12]
}
 800b080:	4618      	mov	r0, r3
 800b082:	3714      	adds	r7, #20
 800b084:	46bd      	mov	sp, r7
 800b086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b08a:	4770      	bx	lr

0800b08c <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 800b08c:	b480      	push	{r7}
 800b08e:	b085      	sub	sp, #20
 800b090:	af00      	add	r7, sp, #0
 800b092:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 800b094:	2300      	movs	r3, #0
 800b096:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	f003 0301 	and.w	r3, r3, #1
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d002      	beq.n	800b0aa <DMA_GetCmdStatus+0x1e>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 800b0a4:	2301      	movs	r3, #1
 800b0a6:	73fb      	strb	r3, [r7, #15]
 800b0a8:	e001      	b.n	800b0ae <DMA_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 800b0aa:	2300      	movs	r3, #0
 800b0ac:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 800b0ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	3714      	adds	r7, #20
 800b0b4:	46bd      	mov	sp, r7
 800b0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ba:	4770      	bx	lr

0800b0bc <DMA_GetFIFOStatus>:
  *           - DMA_FIFOStatus_3QuartersFull: if more than 3 quarters-full.
  *           - DMA_FIFOStatus_Empty: when FIFO is empty
  *           - DMA_FIFOStatus_Full: when FIFO is full
  */
uint32_t DMA_GetFIFOStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 800b0bc:	b480      	push	{r7}
 800b0be:	b085      	sub	sp, #20
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	60fb      	str	r3, [r7, #12]
 
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  
  /* Get the FIFO level bits */
  tmpreg = (uint32_t)((DMAy_Streamx->FCR & DMA_SxFCR_FS));
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	695b      	ldr	r3, [r3, #20]
 800b0cc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b0d0:	60fb      	str	r3, [r7, #12]
  
  return tmpreg;
 800b0d2:	68fb      	ldr	r3, [r7, #12]
}
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	3714      	adds	r7, #20
 800b0d8:	46bd      	mov	sp, r7
 800b0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0de:	4770      	bx	lr

0800b0e0 <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 800b0e0:	b480      	push	{r7}
 800b0e2:	b087      	sub	sp, #28
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	6078      	str	r0, [r7, #4]
 800b0e8:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 800b0f2:	687a      	ldr	r2, [r7, #4]
 800b0f4:	4b15      	ldr	r3, [pc, #84]	; (800b14c <DMA_GetFlagStatus+0x6c>)
 800b0f6:	429a      	cmp	r2, r3
 800b0f8:	d802      	bhi.n	800b100 <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 800b0fa:	4b15      	ldr	r3, [pc, #84]	; (800b150 <DMA_GetFlagStatus+0x70>)
 800b0fc:	613b      	str	r3, [r7, #16]
 800b0fe:	e001      	b.n	800b104 <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 800b100:	4b14      	ldr	r3, [pc, #80]	; (800b154 <DMA_GetFlagStatus+0x74>)
 800b102:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 800b104:	683b      	ldr	r3, [r7, #0]
 800b106:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d003      	beq.n	800b116 <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 800b10e:	693b      	ldr	r3, [r7, #16]
 800b110:	685b      	ldr	r3, [r3, #4]
 800b112:	60fb      	str	r3, [r7, #12]
 800b114:	e002      	b.n	800b11c <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 800b116:	693b      	ldr	r3, [r7, #16]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800b122:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 800b126:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 800b128:	68fa      	ldr	r2, [r7, #12]
 800b12a:	683b      	ldr	r3, [r7, #0]
 800b12c:	4013      	ands	r3, r2
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d002      	beq.n	800b138 <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 800b132:	2301      	movs	r3, #1
 800b134:	75fb      	strb	r3, [r7, #23]
 800b136:	e001      	b.n	800b13c <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 800b138:	2300      	movs	r3, #0
 800b13a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 800b13c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b13e:	4618      	mov	r0, r3
 800b140:	371c      	adds	r7, #28
 800b142:	46bd      	mov	sp, r7
 800b144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b148:	4770      	bx	lr
 800b14a:	bf00      	nop
 800b14c:	4002640f 	.word	0x4002640f
 800b150:	40026000 	.word	0x40026000
 800b154:	40026400 	.word	0x40026400

0800b158 <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 800b158:	b480      	push	{r7}
 800b15a:	b085      	sub	sp, #20
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	6078      	str	r0, [r7, #4]
 800b160:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 800b162:	687a      	ldr	r2, [r7, #4]
 800b164:	4b10      	ldr	r3, [pc, #64]	; (800b1a8 <DMA_ClearFlag+0x50>)
 800b166:	429a      	cmp	r2, r3
 800b168:	d802      	bhi.n	800b170 <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 800b16a:	4b10      	ldr	r3, [pc, #64]	; (800b1ac <DMA_ClearFlag+0x54>)
 800b16c:	60fb      	str	r3, [r7, #12]
 800b16e:	e001      	b.n	800b174 <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 800b170:	4b0f      	ldr	r3, [pc, #60]	; (800b1b0 <DMA_ClearFlag+0x58>)
 800b172:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 800b174:	683b      	ldr	r3, [r7, #0]
 800b176:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d007      	beq.n	800b18e <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 800b17e:	683b      	ldr	r3, [r7, #0]
 800b180:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800b184:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 800b188:	68fa      	ldr	r2, [r7, #12]
 800b18a:	60d3      	str	r3, [r2, #12]
 800b18c:	e006      	b.n	800b19c <DMA_ClearFlag+0x44>
  }
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 800b18e:	683b      	ldr	r3, [r7, #0]
 800b190:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800b194:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 800b198:	68fa      	ldr	r2, [r7, #12]
 800b19a:	6093      	str	r3, [r2, #8]
  }    
}
 800b19c:	3714      	adds	r7, #20
 800b19e:	46bd      	mov	sp, r7
 800b1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a4:	4770      	bx	lr
 800b1a6:	bf00      	nop
 800b1a8:	4002640f 	.word	0x4002640f
 800b1ac:	40026000 	.word	0x40026000
 800b1b0:	40026400 	.word	0x40026400

0800b1b4 <DMA_ITConfig>:
  * @param  NewState: new state of the specified DMA interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_ITConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT, FunctionalState NewState)
{
 800b1b4:	b480      	push	{r7}
 800b1b6:	b085      	sub	sp, #20
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	60f8      	str	r0, [r7, #12]
 800b1bc:	60b9      	str	r1, [r7, #8]
 800b1be:	4613      	mov	r3, r2
 800b1c0:	71fb      	strb	r3, [r7, #7]
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Check if the DMA_IT parameter contains a FIFO interrupt */
  if ((DMA_IT & DMA_IT_FE) != 0)
 800b1c2:	68bb      	ldr	r3, [r7, #8]
 800b1c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d00f      	beq.n	800b1ec <DMA_ITConfig+0x38>
  {
    if (NewState != DISABLE)
 800b1cc:	79fb      	ldrb	r3, [r7, #7]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d006      	beq.n	800b1e0 <DMA_ITConfig+0x2c>
    {
      /* Enable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	695b      	ldr	r3, [r3, #20]
 800b1d6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	615a      	str	r2, [r3, #20]
 800b1de:	e005      	b.n	800b1ec <DMA_ITConfig+0x38>
    }    
    else 
    {
      /* Disable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	695b      	ldr	r3, [r3, #20]
 800b1e4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	615a      	str	r2, [r3, #20]
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 800b1ec:	68bb      	ldr	r3, [r7, #8]
 800b1ee:	2b80      	cmp	r3, #128	; 0x80
 800b1f0:	d014      	beq.n	800b21c <DMA_ITConfig+0x68>
  {
    if (NewState != DISABLE)
 800b1f2:	79fb      	ldrb	r3, [r7, #7]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d008      	beq.n	800b20a <DMA_ITConfig+0x56>
    {
      /* Enable the selected DMA transfer interrupts */
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	681a      	ldr	r2, [r3, #0]
 800b1fc:	68bb      	ldr	r3, [r7, #8]
 800b1fe:	f003 031e 	and.w	r3, r3, #30
 800b202:	431a      	orrs	r2, r3
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	601a      	str	r2, [r3, #0]
 800b208:	e008      	b.n	800b21c <DMA_ITConfig+0x68>
    }
    else
    {
      /* Disable the selected DMA transfer interrupts */
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	681a      	ldr	r2, [r3, #0]
 800b20e:	68bb      	ldr	r3, [r7, #8]
 800b210:	f003 031e 	and.w	r3, r3, #30
 800b214:	43db      	mvns	r3, r3
 800b216:	401a      	ands	r2, r3
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	601a      	str	r2, [r3, #0]
    }    
  }
}
 800b21c:	3714      	adds	r7, #20
 800b21e:	46bd      	mov	sp, r7
 800b220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b224:	4770      	bx	lr
 800b226:	bf00      	nop

0800b228 <DMA_GetITStatus>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_IT (SET or RESET).
  */
ITStatus DMA_GetITStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 800b228:	b480      	push	{r7}
 800b22a:	b087      	sub	sp, #28
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	6078      	str	r0, [r7, #4]
 800b230:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 800b232:	2300      	movs	r3, #0
 800b234:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0, enablestatus = 0;
 800b236:	2300      	movs	r3, #0
 800b238:	60fb      	str	r3, [r7, #12]
 800b23a:	2300      	movs	r3, #0
 800b23c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_IT(DMA_IT));
 
  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 800b23e:	687a      	ldr	r2, [r7, #4]
 800b240:	4b22      	ldr	r3, [pc, #136]	; (800b2cc <DMA_GetITStatus+0xa4>)
 800b242:	429a      	cmp	r2, r3
 800b244:	d802      	bhi.n	800b24c <DMA_GetITStatus+0x24>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 800b246:	4b22      	ldr	r3, [pc, #136]	; (800b2d0 <DMA_GetITStatus+0xa8>)
 800b248:	613b      	str	r3, [r7, #16]
 800b24a:	e001      	b.n	800b250 <DMA_GetITStatus+0x28>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 800b24c:	4b21      	ldr	r3, [pc, #132]	; (800b2d4 <DMA_GetITStatus+0xac>)
 800b24e:	613b      	str	r3, [r7, #16]
  }

  /* Check if the interrupt enable bit is in the CR or FCR register */
  if ((DMA_IT & TRANSFER_IT_MASK) != (uint32_t)RESET)
 800b250:	683b      	ldr	r3, [r7, #0]
 800b252:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800b256:	f023 13c3 	bic.w	r3, r3, #12779715	; 0xc300c3
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d00a      	beq.n	800b274 <DMA_GetITStatus+0x4c>
  {
    /* Get the interrupt enable position mask in CR register */
    tmpreg = (uint32_t)((DMA_IT >> 11) & TRANSFER_IT_ENABLE_MASK);   
 800b25e:	683b      	ldr	r3, [r7, #0]
 800b260:	0adb      	lsrs	r3, r3, #11
 800b262:	f003 031e 	and.w	r3, r3, #30
 800b266:	60fb      	str	r3, [r7, #12]
    
    /* Check the enable bit in CR register */
    enablestatus = (uint32_t)(DMAy_Streamx->CR & tmpreg);
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681a      	ldr	r2, [r3, #0]
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	4013      	ands	r3, r2
 800b270:	60bb      	str	r3, [r7, #8]
 800b272:	e004      	b.n	800b27e <DMA_GetITStatus+0x56>
  }
  else 
  {
    /* Check the enable bit in FCR register */
    enablestatus = (uint32_t)(DMAy_Streamx->FCR & DMA_IT_FE); 
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	695b      	ldr	r3, [r3, #20]
 800b278:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b27c:	60bb      	str	r3, [r7, #8]
  }
 
  /* Check if the interrupt pending flag is in LISR or HISR */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 800b27e:	683b      	ldr	r3, [r7, #0]
 800b280:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b284:	2b00      	cmp	r3, #0
 800b286:	d003      	beq.n	800b290 <DMA_GetITStatus+0x68>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR ;
 800b288:	693b      	ldr	r3, [r7, #16]
 800b28a:	685b      	ldr	r3, [r3, #4]
 800b28c:	60fb      	str	r3, [r7, #12]
 800b28e:	e002      	b.n	800b296 <DMA_GetITStatus+0x6e>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR ;
 800b290:	693b      	ldr	r3, [r7, #16]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	60fb      	str	r3, [r7, #12]
  } 

  /* mask all reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800b29c:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 800b2a0:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA interrupt */
  if (((tmpreg & DMA_IT) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 800b2a2:	68fa      	ldr	r2, [r7, #12]
 800b2a4:	683b      	ldr	r3, [r7, #0]
 800b2a6:	4013      	ands	r3, r2
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d005      	beq.n	800b2b8 <DMA_GetITStatus+0x90>
 800b2ac:	68bb      	ldr	r3, [r7, #8]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d002      	beq.n	800b2b8 <DMA_GetITStatus+0x90>
  {
    /* DMA_IT is set */
    bitstatus = SET;
 800b2b2:	2301      	movs	r3, #1
 800b2b4:	75fb      	strb	r3, [r7, #23]
 800b2b6:	e001      	b.n	800b2bc <DMA_GetITStatus+0x94>
  }
  else
  {
    /* DMA_IT is reset */
    bitstatus = RESET;
 800b2b8:	2300      	movs	r3, #0
 800b2ba:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_IT status */
  return  bitstatus;
 800b2bc:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2be:	4618      	mov	r0, r3
 800b2c0:	371c      	adds	r7, #28
 800b2c2:	46bd      	mov	sp, r7
 800b2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c8:	4770      	bx	lr
 800b2ca:	bf00      	nop
 800b2cc:	4002640f 	.word	0x4002640f
 800b2d0:	40026000 	.word	0x40026000
 800b2d4:	40026400 	.word	0x40026400

0800b2d8 <DMA_ClearITPendingBit>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_ClearITPendingBit(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 800b2d8:	b480      	push	{r7}
 800b2da:	b085      	sub	sp, #20
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	6078      	str	r0, [r7, #4]
 800b2e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_IT(DMA_IT));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 800b2e2:	687a      	ldr	r2, [r7, #4]
 800b2e4:	4b10      	ldr	r3, [pc, #64]	; (800b328 <DMA_ClearITPendingBit+0x50>)
 800b2e6:	429a      	cmp	r2, r3
 800b2e8:	d802      	bhi.n	800b2f0 <DMA_ClearITPendingBit+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 800b2ea:	4b10      	ldr	r3, [pc, #64]	; (800b32c <DMA_ClearITPendingBit+0x54>)
 800b2ec:	60fb      	str	r3, [r7, #12]
 800b2ee:	e001      	b.n	800b2f4 <DMA_ClearITPendingBit+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 800b2f0:	4b0f      	ldr	r3, [pc, #60]	; (800b330 <DMA_ClearITPendingBit+0x58>)
 800b2f2:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 800b2f4:	683b      	ldr	r3, [r7, #0]
 800b2f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d007      	beq.n	800b30e <DMA_ClearITPendingBit+0x36>
  {
    /* Set DMAy HIFCR register clear interrupt bits */
    DMAy->HIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 800b2fe:	683b      	ldr	r3, [r7, #0]
 800b300:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800b304:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 800b308:	68fa      	ldr	r2, [r7, #12]
 800b30a:	60d3      	str	r3, [r2, #12]
 800b30c:	e006      	b.n	800b31c <DMA_ClearITPendingBit+0x44>
  }
  else 
  {
    /* Set DMAy LIFCR register clear interrupt bits */
    DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 800b30e:	683b      	ldr	r3, [r7, #0]
 800b310:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800b314:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 800b318:	68fa      	ldr	r2, [r7, #12]
 800b31a:	6093      	str	r3, [r2, #8]
  }   
}
 800b31c:	3714      	adds	r7, #20
 800b31e:	46bd      	mov	sp, r7
 800b320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b324:	4770      	bx	lr
 800b326:	bf00      	nop
 800b328:	4002640f 	.word	0x4002640f
 800b32c:	40026000 	.word	0x40026000
 800b330:	40026400 	.word	0x40026400

0800b334 <EXTI_DeInit>:
  * @brief  Deinitializes the EXTI peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
 800b334:	b480      	push	{r7}
 800b336:	af00      	add	r7, sp, #0
  EXTI->IMR = 0x00000000;
 800b338:	4b09      	ldr	r3, [pc, #36]	; (800b360 <EXTI_DeInit+0x2c>)
 800b33a:	2200      	movs	r2, #0
 800b33c:	601a      	str	r2, [r3, #0]
  EXTI->EMR = 0x00000000;
 800b33e:	4b08      	ldr	r3, [pc, #32]	; (800b360 <EXTI_DeInit+0x2c>)
 800b340:	2200      	movs	r2, #0
 800b342:	605a      	str	r2, [r3, #4]
  EXTI->RTSR = 0x00000000;
 800b344:	4b06      	ldr	r3, [pc, #24]	; (800b360 <EXTI_DeInit+0x2c>)
 800b346:	2200      	movs	r2, #0
 800b348:	609a      	str	r2, [r3, #8]
  EXTI->FTSR = 0x00000000;
 800b34a:	4b05      	ldr	r3, [pc, #20]	; (800b360 <EXTI_DeInit+0x2c>)
 800b34c:	2200      	movs	r2, #0
 800b34e:	60da      	str	r2, [r3, #12]
  EXTI->PR = 0x007FFFFF;
 800b350:	4b03      	ldr	r3, [pc, #12]	; (800b360 <EXTI_DeInit+0x2c>)
 800b352:	4a04      	ldr	r2, [pc, #16]	; (800b364 <EXTI_DeInit+0x30>)
 800b354:	615a      	str	r2, [r3, #20]
}
 800b356:	46bd      	mov	sp, r7
 800b358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35c:	4770      	bx	lr
 800b35e:	bf00      	nop
 800b360:	40013c00 	.word	0x40013c00
 800b364:	007fffff 	.word	0x007fffff

0800b368 <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 800b368:	b480      	push	{r7}
 800b36a:	b085      	sub	sp, #20
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 800b370:	2300      	movs	r3, #0
 800b372:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 800b374:	4b32      	ldr	r3, [pc, #200]	; (800b440 <EXTI_Init+0xd8>)
 800b376:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	799b      	ldrb	r3, [r3, #6]
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d04d      	beq.n	800b41c <EXTI_Init+0xb4>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 800b380:	4b2f      	ldr	r3, [pc, #188]	; (800b440 <EXTI_Init+0xd8>)
 800b382:	4a2f      	ldr	r2, [pc, #188]	; (800b440 <EXTI_Init+0xd8>)
 800b384:	6811      	ldr	r1, [r2, #0]
 800b386:	687a      	ldr	r2, [r7, #4]
 800b388:	6812      	ldr	r2, [r2, #0]
 800b38a:	43d2      	mvns	r2, r2
 800b38c:	400a      	ands	r2, r1
 800b38e:	601a      	str	r2, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 800b390:	4b2b      	ldr	r3, [pc, #172]	; (800b440 <EXTI_Init+0xd8>)
 800b392:	4a2b      	ldr	r2, [pc, #172]	; (800b440 <EXTI_Init+0xd8>)
 800b394:	6851      	ldr	r1, [r2, #4]
 800b396:	687a      	ldr	r2, [r7, #4]
 800b398:	6812      	ldr	r2, [r2, #0]
 800b39a:	43d2      	mvns	r2, r2
 800b39c:	400a      	ands	r2, r1
 800b39e:	605a      	str	r2, [r3, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	791b      	ldrb	r3, [r3, #4]
 800b3a4:	68fa      	ldr	r2, [r7, #12]
 800b3a6:	4413      	add	r3, r2
 800b3a8:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	68fa      	ldr	r2, [r7, #12]
 800b3ae:	6811      	ldr	r1, [r2, #0]
 800b3b0:	687a      	ldr	r2, [r7, #4]
 800b3b2:	6812      	ldr	r2, [r2, #0]
 800b3b4:	430a      	orrs	r2, r1
 800b3b6:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 800b3b8:	4b21      	ldr	r3, [pc, #132]	; (800b440 <EXTI_Init+0xd8>)
 800b3ba:	4a21      	ldr	r2, [pc, #132]	; (800b440 <EXTI_Init+0xd8>)
 800b3bc:	6891      	ldr	r1, [r2, #8]
 800b3be:	687a      	ldr	r2, [r7, #4]
 800b3c0:	6812      	ldr	r2, [r2, #0]
 800b3c2:	43d2      	mvns	r2, r2
 800b3c4:	400a      	ands	r2, r1
 800b3c6:	609a      	str	r2, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 800b3c8:	4b1d      	ldr	r3, [pc, #116]	; (800b440 <EXTI_Init+0xd8>)
 800b3ca:	4a1d      	ldr	r2, [pc, #116]	; (800b440 <EXTI_Init+0xd8>)
 800b3cc:	68d1      	ldr	r1, [r2, #12]
 800b3ce:	687a      	ldr	r2, [r7, #4]
 800b3d0:	6812      	ldr	r2, [r2, #0]
 800b3d2:	43d2      	mvns	r2, r2
 800b3d4:	400a      	ands	r2, r1
 800b3d6:	60da      	str	r2, [r3, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	795b      	ldrb	r3, [r3, #5]
 800b3dc:	2b10      	cmp	r3, #16
 800b3de:	d10e      	bne.n	800b3fe <EXTI_Init+0x96>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 800b3e0:	4b17      	ldr	r3, [pc, #92]	; (800b440 <EXTI_Init+0xd8>)
 800b3e2:	4a17      	ldr	r2, [pc, #92]	; (800b440 <EXTI_Init+0xd8>)
 800b3e4:	6891      	ldr	r1, [r2, #8]
 800b3e6:	687a      	ldr	r2, [r7, #4]
 800b3e8:	6812      	ldr	r2, [r2, #0]
 800b3ea:	430a      	orrs	r2, r1
 800b3ec:	609a      	str	r2, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 800b3ee:	4b14      	ldr	r3, [pc, #80]	; (800b440 <EXTI_Init+0xd8>)
 800b3f0:	4a13      	ldr	r2, [pc, #76]	; (800b440 <EXTI_Init+0xd8>)
 800b3f2:	68d1      	ldr	r1, [r2, #12]
 800b3f4:	687a      	ldr	r2, [r7, #4]
 800b3f6:	6812      	ldr	r2, [r2, #0]
 800b3f8:	430a      	orrs	r2, r1
 800b3fa:	60da      	str	r2, [r3, #12]
 800b3fc:	e01b      	b.n	800b436 <EXTI_Init+0xce>
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
 800b3fe:	4b10      	ldr	r3, [pc, #64]	; (800b440 <EXTI_Init+0xd8>)
 800b400:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	795b      	ldrb	r3, [r3, #5]
 800b406:	68fa      	ldr	r2, [r7, #12]
 800b408:	4413      	add	r3, r2
 800b40a:	60fb      	str	r3, [r7, #12]

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	68fa      	ldr	r2, [r7, #12]
 800b410:	6811      	ldr	r1, [r2, #0]
 800b412:	687a      	ldr	r2, [r7, #4]
 800b414:	6812      	ldr	r2, [r2, #0]
 800b416:	430a      	orrs	r2, r1
 800b418:	601a      	str	r2, [r3, #0]
 800b41a:	e00c      	b.n	800b436 <EXTI_Init+0xce>
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	791b      	ldrb	r3, [r3, #4]
 800b420:	68fa      	ldr	r2, [r7, #12]
 800b422:	4413      	add	r3, r2
 800b424:	60fb      	str	r3, [r7, #12]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	68fa      	ldr	r2, [r7, #12]
 800b42a:	6811      	ldr	r1, [r2, #0]
 800b42c:	687a      	ldr	r2, [r7, #4]
 800b42e:	6812      	ldr	r2, [r2, #0]
 800b430:	43d2      	mvns	r2, r2
 800b432:	400a      	ands	r2, r1
 800b434:	601a      	str	r2, [r3, #0]
  }
}
 800b436:	3714      	adds	r7, #20
 800b438:	46bd      	mov	sp, r7
 800b43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b43e:	4770      	bx	lr
 800b440:	40013c00 	.word	0x40013c00

0800b444 <EXTI_StructInit>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
 800b444:	b480      	push	{r7}
 800b446:	b083      	sub	sp, #12
 800b448:	af00      	add	r7, sp, #0
 800b44a:	6078      	str	r0, [r7, #4]
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	2200      	movs	r2, #0
 800b450:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	2200      	movs	r2, #0
 800b456:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	220c      	movs	r2, #12
 800b45c:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct->EXTI_LineCmd = DISABLE;
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	2200      	movs	r2, #0
 800b462:	719a      	strb	r2, [r3, #6]
}
 800b464:	370c      	adds	r7, #12
 800b466:	46bd      	mov	sp, r7
 800b468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b46c:	4770      	bx	lr
 800b46e:	bf00      	nop

0800b470 <EXTI_GenerateSWInterrupt>:
  *         will be generated.
  *         This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
 800b470:	b480      	push	{r7}
 800b472:	b083      	sub	sp, #12
 800b474:	af00      	add	r7, sp, #0
 800b476:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->SWIER |= EXTI_Line;
 800b478:	4b05      	ldr	r3, [pc, #20]	; (800b490 <EXTI_GenerateSWInterrupt+0x20>)
 800b47a:	4a05      	ldr	r2, [pc, #20]	; (800b490 <EXTI_GenerateSWInterrupt+0x20>)
 800b47c:	6911      	ldr	r1, [r2, #16]
 800b47e:	687a      	ldr	r2, [r7, #4]
 800b480:	430a      	orrs	r2, r1
 800b482:	611a      	str	r2, [r3, #16]
}
 800b484:	370c      	adds	r7, #12
 800b486:	46bd      	mov	sp, r7
 800b488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b48c:	4770      	bx	lr
 800b48e:	bf00      	nop
 800b490:	40013c00 	.word	0x40013c00

0800b494 <EXTI_GetFlagStatus>:
  * @param  EXTI_Line: specifies the EXTI line flag to check.
  *          This parameter can be EXTI_Linex where x can be(0..22)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line)
{
 800b494:	b480      	push	{r7}
 800b496:	b085      	sub	sp, #20
 800b498:	af00      	add	r7, sp, #0
 800b49a:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 800b49c:	2300      	movs	r3, #0
 800b49e:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
 800b4a0:	4b08      	ldr	r3, [pc, #32]	; (800b4c4 <EXTI_GetFlagStatus+0x30>)
 800b4a2:	695a      	ldr	r2, [r3, #20]
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	4013      	ands	r3, r2
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d002      	beq.n	800b4b2 <EXTI_GetFlagStatus+0x1e>
  {
    bitstatus = SET;
 800b4ac:	2301      	movs	r3, #1
 800b4ae:	73fb      	strb	r3, [r7, #15]
 800b4b0:	e001      	b.n	800b4b6 <EXTI_GetFlagStatus+0x22>
  }
  else
  {
    bitstatus = RESET;
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800b4b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	3714      	adds	r7, #20
 800b4bc:	46bd      	mov	sp, r7
 800b4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c2:	4770      	bx	lr
 800b4c4:	40013c00 	.word	0x40013c00

0800b4c8 <EXTI_ClearFlag>:
  * @param  EXTI_Line: specifies the EXTI lines flags to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
 800b4c8:	b480      	push	{r7}
 800b4ca:	b083      	sub	sp, #12
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 800b4d0:	4b03      	ldr	r3, [pc, #12]	; (800b4e0 <EXTI_ClearFlag+0x18>)
 800b4d2:	687a      	ldr	r2, [r7, #4]
 800b4d4:	615a      	str	r2, [r3, #20]
}
 800b4d6:	370c      	adds	r7, #12
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4de:	4770      	bx	lr
 800b4e0:	40013c00 	.word	0x40013c00

0800b4e4 <EXTI_GetITStatus>:
  * @param  EXTI_Line: specifies the EXTI line to check.
  *          This parameter can be EXTI_Linex where x can be(0..22)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 800b4e4:	b480      	push	{r7}
 800b4e6:	b085      	sub	sp, #20
 800b4e8:	af00      	add	r7, sp, #0
 800b4ea:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 800b4ec:	2300      	movs	r3, #0
 800b4ee:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
 800b4f0:	4b08      	ldr	r3, [pc, #32]	; (800b514 <EXTI_GetITStatus+0x30>)
 800b4f2:	695a      	ldr	r2, [r3, #20]
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	4013      	ands	r3, r2
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d002      	beq.n	800b502 <EXTI_GetITStatus+0x1e>
  {
    bitstatus = SET;
 800b4fc:	2301      	movs	r3, #1
 800b4fe:	73fb      	strb	r3, [r7, #15]
 800b500:	e001      	b.n	800b506 <EXTI_GetITStatus+0x22>
  }
  else
  {
    bitstatus = RESET;
 800b502:	2300      	movs	r3, #0
 800b504:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800b506:	7bfb      	ldrb	r3, [r7, #15]
  
}
 800b508:	4618      	mov	r0, r3
 800b50a:	3714      	adds	r7, #20
 800b50c:	46bd      	mov	sp, r7
 800b50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b512:	4770      	bx	lr
 800b514:	40013c00 	.word	0x40013c00

0800b518 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 800b518:	b480      	push	{r7}
 800b51a:	b083      	sub	sp, #12
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 800b520:	4b03      	ldr	r3, [pc, #12]	; (800b530 <EXTI_ClearITPendingBit+0x18>)
 800b522:	687a      	ldr	r2, [r7, #4]
 800b524:	615a      	str	r2, [r3, #20]
}
 800b526:	370c      	adds	r7, #12
 800b528:	46bd      	mov	sp, r7
 800b52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b52e:	4770      	bx	lr
 800b530:	40013c00 	.word	0x40013c00

0800b534 <FLASH_SetLatency>:
  *       FLASH_Latency_0 and FLASH_Latency_15. 
  *         
  * @retval None
  */
void FLASH_SetLatency(uint32_t FLASH_Latency)
{
 800b534:	b480      	push	{r7}
 800b536:	b083      	sub	sp, #12
 800b538:	af00      	add	r7, sp, #0
 800b53a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_LATENCY(FLASH_Latency));
  
  /* Perform Byte access to FLASH_ACR[8:0] to set the Latency value */
  *(__IO uint8_t *)ACR_BYTE0_ADDRESS = (uint8_t)FLASH_Latency;
 800b53c:	4b04      	ldr	r3, [pc, #16]	; (800b550 <FLASH_SetLatency+0x1c>)
 800b53e:	687a      	ldr	r2, [r7, #4]
 800b540:	b2d2      	uxtb	r2, r2
 800b542:	701a      	strb	r2, [r3, #0]
}
 800b544:	370c      	adds	r7, #12
 800b546:	46bd      	mov	sp, r7
 800b548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b54c:	4770      	bx	lr
 800b54e:	bf00      	nop
 800b550:	40023c00 	.word	0x40023c00

0800b554 <FLASH_PrefetchBufferCmd>:
  * @param  NewState: new state of the Prefetch Buffer.
  *          This parameter  can be: ENABLE or DISABLE.
  * @retval None
  */
void FLASH_PrefetchBufferCmd(FunctionalState NewState)
{
 800b554:	b480      	push	{r7}
 800b556:	b083      	sub	sp, #12
 800b558:	af00      	add	r7, sp, #0
 800b55a:	4603      	mov	r3, r0
 800b55c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  /* Enable or disable the Prefetch Buffer */
  if(NewState != DISABLE)
 800b55e:	79fb      	ldrb	r3, [r7, #7]
 800b560:	2b00      	cmp	r3, #0
 800b562:	d006      	beq.n	800b572 <FLASH_PrefetchBufferCmd+0x1e>
  {
    FLASH->ACR |= FLASH_ACR_PRFTEN;
 800b564:	4b08      	ldr	r3, [pc, #32]	; (800b588 <FLASH_PrefetchBufferCmd+0x34>)
 800b566:	4a08      	ldr	r2, [pc, #32]	; (800b588 <FLASH_PrefetchBufferCmd+0x34>)
 800b568:	6812      	ldr	r2, [r2, #0]
 800b56a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b56e:	601a      	str	r2, [r3, #0]
 800b570:	e005      	b.n	800b57e <FLASH_PrefetchBufferCmd+0x2a>
  }
  else
  {
    FLASH->ACR &= (~FLASH_ACR_PRFTEN);
 800b572:	4b05      	ldr	r3, [pc, #20]	; (800b588 <FLASH_PrefetchBufferCmd+0x34>)
 800b574:	4a04      	ldr	r2, [pc, #16]	; (800b588 <FLASH_PrefetchBufferCmd+0x34>)
 800b576:	6812      	ldr	r2, [r2, #0]
 800b578:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b57c:	601a      	str	r2, [r3, #0]
  }
}
 800b57e:	370c      	adds	r7, #12
 800b580:	46bd      	mov	sp, r7
 800b582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b586:	4770      	bx	lr
 800b588:	40023c00 	.word	0x40023c00

0800b58c <FLASH_InstructionCacheCmd>:
  * @param  NewState: new state of the Instruction Cache.
  *          This parameter  can be: ENABLE or DISABLE.
  * @retval None
  */
void FLASH_InstructionCacheCmd(FunctionalState NewState)
{
 800b58c:	b480      	push	{r7}
 800b58e:	b083      	sub	sp, #12
 800b590:	af00      	add	r7, sp, #0
 800b592:	4603      	mov	r3, r0
 800b594:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if(NewState != DISABLE)
 800b596:	79fb      	ldrb	r3, [r7, #7]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d006      	beq.n	800b5aa <FLASH_InstructionCacheCmd+0x1e>
  {
    FLASH->ACR |= FLASH_ACR_ICEN;
 800b59c:	4b08      	ldr	r3, [pc, #32]	; (800b5c0 <FLASH_InstructionCacheCmd+0x34>)
 800b59e:	4a08      	ldr	r2, [pc, #32]	; (800b5c0 <FLASH_InstructionCacheCmd+0x34>)
 800b5a0:	6812      	ldr	r2, [r2, #0]
 800b5a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b5a6:	601a      	str	r2, [r3, #0]
 800b5a8:	e005      	b.n	800b5b6 <FLASH_InstructionCacheCmd+0x2a>
  }
  else
  {
    FLASH->ACR &= (~FLASH_ACR_ICEN);
 800b5aa:	4b05      	ldr	r3, [pc, #20]	; (800b5c0 <FLASH_InstructionCacheCmd+0x34>)
 800b5ac:	4a04      	ldr	r2, [pc, #16]	; (800b5c0 <FLASH_InstructionCacheCmd+0x34>)
 800b5ae:	6812      	ldr	r2, [r2, #0]
 800b5b0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800b5b4:	601a      	str	r2, [r3, #0]
  }
}
 800b5b6:	370c      	adds	r7, #12
 800b5b8:	46bd      	mov	sp, r7
 800b5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5be:	4770      	bx	lr
 800b5c0:	40023c00 	.word	0x40023c00

0800b5c4 <FLASH_DataCacheCmd>:
  * @param  NewState: new state of the Data Cache.
  *          This parameter  can be: ENABLE or DISABLE.
  * @retval None
  */
void FLASH_DataCacheCmd(FunctionalState NewState)
{
 800b5c4:	b480      	push	{r7}
 800b5c6:	b083      	sub	sp, #12
 800b5c8:	af00      	add	r7, sp, #0
 800b5ca:	4603      	mov	r3, r0
 800b5cc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if(NewState != DISABLE)
 800b5ce:	79fb      	ldrb	r3, [r7, #7]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d006      	beq.n	800b5e2 <FLASH_DataCacheCmd+0x1e>
  {
    FLASH->ACR |= FLASH_ACR_DCEN;
 800b5d4:	4b08      	ldr	r3, [pc, #32]	; (800b5f8 <FLASH_DataCacheCmd+0x34>)
 800b5d6:	4a08      	ldr	r2, [pc, #32]	; (800b5f8 <FLASH_DataCacheCmd+0x34>)
 800b5d8:	6812      	ldr	r2, [r2, #0]
 800b5da:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b5de:	601a      	str	r2, [r3, #0]
 800b5e0:	e005      	b.n	800b5ee <FLASH_DataCacheCmd+0x2a>
  }
  else
  {
    FLASH->ACR &= (~FLASH_ACR_DCEN);
 800b5e2:	4b05      	ldr	r3, [pc, #20]	; (800b5f8 <FLASH_DataCacheCmd+0x34>)
 800b5e4:	4a04      	ldr	r2, [pc, #16]	; (800b5f8 <FLASH_DataCacheCmd+0x34>)
 800b5e6:	6812      	ldr	r2, [r2, #0]
 800b5e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b5ec:	601a      	str	r2, [r3, #0]
  }
}
 800b5ee:	370c      	adds	r7, #12
 800b5f0:	46bd      	mov	sp, r7
 800b5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f6:	4770      	bx	lr
 800b5f8:	40023c00 	.word	0x40023c00

0800b5fc <FLASH_InstructionCacheReset>:
  * @note   This function must be used only when the Instruction Cache is disabled.  
  * @param  None
  * @retval None
  */
void FLASH_InstructionCacheReset(void)
{
 800b5fc:	b480      	push	{r7}
 800b5fe:	af00      	add	r7, sp, #0
  FLASH->ACR |= FLASH_ACR_ICRST;
 800b600:	4b04      	ldr	r3, [pc, #16]	; (800b614 <FLASH_InstructionCacheReset+0x18>)
 800b602:	4a04      	ldr	r2, [pc, #16]	; (800b614 <FLASH_InstructionCacheReset+0x18>)
 800b604:	6812      	ldr	r2, [r2, #0]
 800b606:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b60a:	601a      	str	r2, [r3, #0]
}
 800b60c:	46bd      	mov	sp, r7
 800b60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b612:	4770      	bx	lr
 800b614:	40023c00 	.word	0x40023c00

0800b618 <FLASH_DataCacheReset>:
  * @note   This function must be used only when the Data Cache is disabled.  
  * @param  None
  * @retval None
  */
void FLASH_DataCacheReset(void)
{
 800b618:	b480      	push	{r7}
 800b61a:	af00      	add	r7, sp, #0
  FLASH->ACR |= FLASH_ACR_DCRST;
 800b61c:	4b04      	ldr	r3, [pc, #16]	; (800b630 <FLASH_DataCacheReset+0x18>)
 800b61e:	4a04      	ldr	r2, [pc, #16]	; (800b630 <FLASH_DataCacheReset+0x18>)
 800b620:	6812      	ldr	r2, [r2, #0]
 800b622:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b626:	601a      	str	r2, [r3, #0]
}
 800b628:	46bd      	mov	sp, r7
 800b62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b62e:	4770      	bx	lr
 800b630:	40023c00 	.word	0x40023c00

0800b634 <FLASH_Unlock>:
  * @brief  Unlocks the FLASH control register access
  * @param  None
  * @retval None
  */
void FLASH_Unlock(void)
{
 800b634:	b480      	push	{r7}
 800b636:	af00      	add	r7, sp, #0
  if((FLASH->CR & FLASH_CR_LOCK) != RESET)
 800b638:	4b06      	ldr	r3, [pc, #24]	; (800b654 <FLASH_Unlock+0x20>)
 800b63a:	691b      	ldr	r3, [r3, #16]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	da05      	bge.n	800b64c <FLASH_Unlock+0x18>
  {
    /* Authorize the FLASH Registers access */
    FLASH->KEYR = FLASH_KEY1;
 800b640:	4b04      	ldr	r3, [pc, #16]	; (800b654 <FLASH_Unlock+0x20>)
 800b642:	4a05      	ldr	r2, [pc, #20]	; (800b658 <FLASH_Unlock+0x24>)
 800b644:	605a      	str	r2, [r3, #4]
    FLASH->KEYR = FLASH_KEY2;
 800b646:	4b03      	ldr	r3, [pc, #12]	; (800b654 <FLASH_Unlock+0x20>)
 800b648:	4a04      	ldr	r2, [pc, #16]	; (800b65c <FLASH_Unlock+0x28>)
 800b64a:	605a      	str	r2, [r3, #4]
  }  
}
 800b64c:	46bd      	mov	sp, r7
 800b64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b652:	4770      	bx	lr
 800b654:	40023c00 	.word	0x40023c00
 800b658:	45670123 	.word	0x45670123
 800b65c:	cdef89ab 	.word	0xcdef89ab

0800b660 <FLASH_Lock>:
  * @brief  Locks the FLASH control register access
  * @param  None
  * @retval None
  */
void FLASH_Lock(void)
{
 800b660:	b480      	push	{r7}
 800b662:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800b664:	4b04      	ldr	r3, [pc, #16]	; (800b678 <FLASH_Lock+0x18>)
 800b666:	4a04      	ldr	r2, [pc, #16]	; (800b678 <FLASH_Lock+0x18>)
 800b668:	6912      	ldr	r2, [r2, #16]
 800b66a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800b66e:	611a      	str	r2, [r3, #16]
}
 800b670:	46bd      	mov	sp, r7
 800b672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b676:	4770      	bx	lr
 800b678:	40023c00 	.word	0x40023c00

0800b67c <FLASH_EraseSector>:
  *       
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_EraseSector(uint32_t FLASH_Sector, uint8_t VoltageRange)
{
 800b67c:	b580      	push	{r7, lr}
 800b67e:	b084      	sub	sp, #16
 800b680:	af00      	add	r7, sp, #0
 800b682:	6078      	str	r0, [r7, #4]
 800b684:	460b      	mov	r3, r1
 800b686:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0x0;
 800b688:	2300      	movs	r3, #0
 800b68a:	60fb      	str	r3, [r7, #12]
  FLASH_Status status = FLASH_COMPLETE;
 800b68c:	2309      	movs	r3, #9
 800b68e:	72fb      	strb	r3, [r7, #11]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(FLASH_Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == VoltageRange_1)
 800b690:	78fb      	ldrb	r3, [r7, #3]
 800b692:	2b00      	cmp	r3, #0
 800b694:	d102      	bne.n	800b69c <FLASH_EraseSector+0x20>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 800b696:	2300      	movs	r3, #0
 800b698:	60fb      	str	r3, [r7, #12]
 800b69a:	e010      	b.n	800b6be <FLASH_EraseSector+0x42>
  }
  else if(VoltageRange == VoltageRange_2)
 800b69c:	78fb      	ldrb	r3, [r7, #3]
 800b69e:	2b01      	cmp	r3, #1
 800b6a0:	d103      	bne.n	800b6aa <FLASH_EraseSector+0x2e>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800b6a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b6a6:	60fb      	str	r3, [r7, #12]
 800b6a8:	e009      	b.n	800b6be <FLASH_EraseSector+0x42>
  }
  else if(VoltageRange == VoltageRange_3)
 800b6aa:	78fb      	ldrb	r3, [r7, #3]
 800b6ac:	2b02      	cmp	r3, #2
 800b6ae:	d103      	bne.n	800b6b8 <FLASH_EraseSector+0x3c>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800b6b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b6b4:	60fb      	str	r3, [r7, #12]
 800b6b6:	e002      	b.n	800b6be <FLASH_EraseSector+0x42>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800b6b8:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b6bc:	60fb      	str	r3, [r7, #12]
  }
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 800b6be:	f000 fc73 	bl	800bfa8 <FLASH_WaitForLastOperation>
 800b6c2:	4603      	mov	r3, r0
 800b6c4:	72fb      	strb	r3, [r7, #11]
  
  if(status == FLASH_COMPLETE)
 800b6c6:	7afb      	ldrb	r3, [r7, #11]
 800b6c8:	2b09      	cmp	r3, #9
 800b6ca:	d12f      	bne.n	800b72c <FLASH_EraseSector+0xb0>
  { 
    /* if the previous operation is completed, proceed to erase the sector */
    FLASH->CR &= CR_PSIZE_MASK;
 800b6cc:	4b1a      	ldr	r3, [pc, #104]	; (800b738 <FLASH_EraseSector+0xbc>)
 800b6ce:	4a1a      	ldr	r2, [pc, #104]	; (800b738 <FLASH_EraseSector+0xbc>)
 800b6d0:	6912      	ldr	r2, [r2, #16]
 800b6d2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800b6d6:	611a      	str	r2, [r3, #16]
    FLASH->CR |= tmp_psize;
 800b6d8:	4b17      	ldr	r3, [pc, #92]	; (800b738 <FLASH_EraseSector+0xbc>)
 800b6da:	4a17      	ldr	r2, [pc, #92]	; (800b738 <FLASH_EraseSector+0xbc>)
 800b6dc:	6911      	ldr	r1, [r2, #16]
 800b6de:	68fa      	ldr	r2, [r7, #12]
 800b6e0:	430a      	orrs	r2, r1
 800b6e2:	611a      	str	r2, [r3, #16]
    FLASH->CR &= SECTOR_MASK;
 800b6e4:	4b14      	ldr	r3, [pc, #80]	; (800b738 <FLASH_EraseSector+0xbc>)
 800b6e6:	4a14      	ldr	r2, [pc, #80]	; (800b738 <FLASH_EraseSector+0xbc>)
 800b6e8:	6912      	ldr	r2, [r2, #16]
 800b6ea:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800b6ee:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_CR_SER | FLASH_Sector;
 800b6f0:	4b11      	ldr	r3, [pc, #68]	; (800b738 <FLASH_EraseSector+0xbc>)
 800b6f2:	4a11      	ldr	r2, [pc, #68]	; (800b738 <FLASH_EraseSector+0xbc>)
 800b6f4:	6911      	ldr	r1, [r2, #16]
 800b6f6:	687a      	ldr	r2, [r7, #4]
 800b6f8:	430a      	orrs	r2, r1
 800b6fa:	f042 0202 	orr.w	r2, r2, #2
 800b6fe:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_CR_STRT;
 800b700:	4b0d      	ldr	r3, [pc, #52]	; (800b738 <FLASH_EraseSector+0xbc>)
 800b702:	4a0d      	ldr	r2, [pc, #52]	; (800b738 <FLASH_EraseSector+0xbc>)
 800b704:	6912      	ldr	r2, [r2, #16]
 800b706:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800b70a:	611a      	str	r2, [r3, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 800b70c:	f000 fc4c 	bl	800bfa8 <FLASH_WaitForLastOperation>
 800b710:	4603      	mov	r3, r0
 800b712:	72fb      	strb	r3, [r7, #11]
    
    /* if the erase operation is completed, disable the SER Bit */
    FLASH->CR &= (~FLASH_CR_SER);
 800b714:	4b08      	ldr	r3, [pc, #32]	; (800b738 <FLASH_EraseSector+0xbc>)
 800b716:	4a08      	ldr	r2, [pc, #32]	; (800b738 <FLASH_EraseSector+0xbc>)
 800b718:	6912      	ldr	r2, [r2, #16]
 800b71a:	f022 0202 	bic.w	r2, r2, #2
 800b71e:	611a      	str	r2, [r3, #16]
    FLASH->CR &= SECTOR_MASK; 
 800b720:	4b05      	ldr	r3, [pc, #20]	; (800b738 <FLASH_EraseSector+0xbc>)
 800b722:	4a05      	ldr	r2, [pc, #20]	; (800b738 <FLASH_EraseSector+0xbc>)
 800b724:	6912      	ldr	r2, [r2, #16]
 800b726:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800b72a:	611a      	str	r2, [r3, #16]
  }
  /* Return the Erase Status */
  return status;
 800b72c:	7afb      	ldrb	r3, [r7, #11]
}
 800b72e:	4618      	mov	r0, r3
 800b730:	3710      	adds	r7, #16
 800b732:	46bd      	mov	sp, r7
 800b734:	bd80      	pop	{r7, pc}
 800b736:	bf00      	nop
 800b738:	40023c00 	.word	0x40023c00

0800b73c <FLASH_EraseAllSectors>:
  *       
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_EraseAllSectors(uint8_t VoltageRange)
{
 800b73c:	b580      	push	{r7, lr}
 800b73e:	b084      	sub	sp, #16
 800b740:	af00      	add	r7, sp, #0
 800b742:	4603      	mov	r3, r0
 800b744:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp_psize = 0x0;
 800b746:	2300      	movs	r3, #0
 800b748:	60fb      	str	r3, [r7, #12]
  FLASH_Status status = FLASH_COMPLETE;
 800b74a:	2309      	movs	r3, #9
 800b74c:	72fb      	strb	r3, [r7, #11]
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 800b74e:	f000 fc2b 	bl	800bfa8 <FLASH_WaitForLastOperation>
 800b752:	4603      	mov	r3, r0
 800b754:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == VoltageRange_1)
 800b756:	79fb      	ldrb	r3, [r7, #7]
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d102      	bne.n	800b762 <FLASH_EraseAllSectors+0x26>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 800b75c:	2300      	movs	r3, #0
 800b75e:	60fb      	str	r3, [r7, #12]
 800b760:	e010      	b.n	800b784 <FLASH_EraseAllSectors+0x48>
  }
  else if(VoltageRange == VoltageRange_2)
 800b762:	79fb      	ldrb	r3, [r7, #7]
 800b764:	2b01      	cmp	r3, #1
 800b766:	d103      	bne.n	800b770 <FLASH_EraseAllSectors+0x34>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800b768:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b76c:	60fb      	str	r3, [r7, #12]
 800b76e:	e009      	b.n	800b784 <FLASH_EraseAllSectors+0x48>
  }
  else if(VoltageRange == VoltageRange_3)
 800b770:	79fb      	ldrb	r3, [r7, #7]
 800b772:	2b02      	cmp	r3, #2
 800b774:	d103      	bne.n	800b77e <FLASH_EraseAllSectors+0x42>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800b776:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b77a:	60fb      	str	r3, [r7, #12]
 800b77c:	e002      	b.n	800b784 <FLASH_EraseAllSectors+0x48>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800b77e:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b782:	60fb      	str	r3, [r7, #12]
  }  
  if(status == FLASH_COMPLETE)
 800b784:	7afb      	ldrb	r3, [r7, #11]
 800b786:	2b09      	cmp	r3, #9
 800b788:	d125      	bne.n	800b7d6 <FLASH_EraseAllSectors+0x9a>
  {
    /* if the previous operation is completed, proceed to erase all sectors */
#if defined (STM32F427_437xx) || defined (STM32F429_439xx)    
    FLASH->CR &= CR_PSIZE_MASK;
 800b78a:	4b15      	ldr	r3, [pc, #84]	; (800b7e0 <FLASH_EraseAllSectors+0xa4>)
 800b78c:	4a14      	ldr	r2, [pc, #80]	; (800b7e0 <FLASH_EraseAllSectors+0xa4>)
 800b78e:	6912      	ldr	r2, [r2, #16]
 800b790:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800b794:	611a      	str	r2, [r3, #16]
    FLASH->CR |= tmp_psize;
 800b796:	4b12      	ldr	r3, [pc, #72]	; (800b7e0 <FLASH_EraseAllSectors+0xa4>)
 800b798:	4a11      	ldr	r2, [pc, #68]	; (800b7e0 <FLASH_EraseAllSectors+0xa4>)
 800b79a:	6911      	ldr	r1, [r2, #16]
 800b79c:	68fa      	ldr	r2, [r7, #12]
 800b79e:	430a      	orrs	r2, r1
 800b7a0:	611a      	str	r2, [r3, #16]
    FLASH->CR |= (FLASH_CR_MER1 | FLASH_CR_MER2);
 800b7a2:	4a0f      	ldr	r2, [pc, #60]	; (800b7e0 <FLASH_EraseAllSectors+0xa4>)
 800b7a4:	4b0e      	ldr	r3, [pc, #56]	; (800b7e0 <FLASH_EraseAllSectors+0xa4>)
 800b7a6:	691b      	ldr	r3, [r3, #16]
 800b7a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b7ac:	f043 0304 	orr.w	r3, r3, #4
 800b7b0:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_CR_STRT;
 800b7b2:	4b0b      	ldr	r3, [pc, #44]	; (800b7e0 <FLASH_EraseAllSectors+0xa4>)
 800b7b4:	4a0a      	ldr	r2, [pc, #40]	; (800b7e0 <FLASH_EraseAllSectors+0xa4>)
 800b7b6:	6912      	ldr	r2, [r2, #16]
 800b7b8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800b7bc:	611a      	str	r2, [r3, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 800b7be:	f000 fbf3 	bl	800bfa8 <FLASH_WaitForLastOperation>
 800b7c2:	4603      	mov	r3, r0
 800b7c4:	72fb      	strb	r3, [r7, #11]

    /* if the erase operation is completed, disable the MER Bit */
    FLASH->CR &= ~(FLASH_CR_MER1 | FLASH_CR_MER2);
 800b7c6:	4a06      	ldr	r2, [pc, #24]	; (800b7e0 <FLASH_EraseAllSectors+0xa4>)
 800b7c8:	4b05      	ldr	r3, [pc, #20]	; (800b7e0 <FLASH_EraseAllSectors+0xa4>)
 800b7ca:	691b      	ldr	r3, [r3, #16]
 800b7cc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b7d0:	f023 0304 	bic.w	r3, r3, #4
 800b7d4:	6113      	str	r3, [r2, #16]
    FLASH->CR &= (~FLASH_CR_MER);
#endif /* STM32F40_41xxx || STM32F401xx */

  }   
  /* Return the Erase Status */
  return status;
 800b7d6:	7afb      	ldrb	r3, [r7, #11]
}
 800b7d8:	4618      	mov	r0, r3
 800b7da:	3710      	adds	r7, #16
 800b7dc:	46bd      	mov	sp, r7
 800b7de:	bd80      	pop	{r7, pc}
 800b7e0:	40023c00 	.word	0x40023c00

0800b7e4 <FLASH_EraseAllBank1Sectors>:
  *       
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_EraseAllBank1Sectors(uint8_t VoltageRange)
{
 800b7e4:	b580      	push	{r7, lr}
 800b7e6:	b084      	sub	sp, #16
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	4603      	mov	r3, r0
 800b7ec:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp_psize = 0x0;
 800b7ee:	2300      	movs	r3, #0
 800b7f0:	60fb      	str	r3, [r7, #12]
  FLASH_Status status = FLASH_COMPLETE;
 800b7f2:	2309      	movs	r3, #9
 800b7f4:	72fb      	strb	r3, [r7, #11]
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 800b7f6:	f000 fbd7 	bl	800bfa8 <FLASH_WaitForLastOperation>
 800b7fa:	4603      	mov	r3, r0
 800b7fc:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == VoltageRange_1)
 800b7fe:	79fb      	ldrb	r3, [r7, #7]
 800b800:	2b00      	cmp	r3, #0
 800b802:	d102      	bne.n	800b80a <FLASH_EraseAllBank1Sectors+0x26>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 800b804:	2300      	movs	r3, #0
 800b806:	60fb      	str	r3, [r7, #12]
 800b808:	e010      	b.n	800b82c <FLASH_EraseAllBank1Sectors+0x48>
  }
  else if(VoltageRange == VoltageRange_2)
 800b80a:	79fb      	ldrb	r3, [r7, #7]
 800b80c:	2b01      	cmp	r3, #1
 800b80e:	d103      	bne.n	800b818 <FLASH_EraseAllBank1Sectors+0x34>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800b810:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b814:	60fb      	str	r3, [r7, #12]
 800b816:	e009      	b.n	800b82c <FLASH_EraseAllBank1Sectors+0x48>
  }
  else if(VoltageRange == VoltageRange_3)
 800b818:	79fb      	ldrb	r3, [r7, #7]
 800b81a:	2b02      	cmp	r3, #2
 800b81c:	d103      	bne.n	800b826 <FLASH_EraseAllBank1Sectors+0x42>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800b81e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b822:	60fb      	str	r3, [r7, #12]
 800b824:	e002      	b.n	800b82c <FLASH_EraseAllBank1Sectors+0x48>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800b826:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b82a:	60fb      	str	r3, [r7, #12]
  }  
  if(status == FLASH_COMPLETE)
 800b82c:	7afb      	ldrb	r3, [r7, #11]
 800b82e:	2b09      	cmp	r3, #9
 800b830:	d121      	bne.n	800b876 <FLASH_EraseAllBank1Sectors+0x92>
  {
    /* if the previous operation is completed, proceed to erase all sectors */
     FLASH->CR &= CR_PSIZE_MASK;
 800b832:	4b13      	ldr	r3, [pc, #76]	; (800b880 <FLASH_EraseAllBank1Sectors+0x9c>)
 800b834:	4a12      	ldr	r2, [pc, #72]	; (800b880 <FLASH_EraseAllBank1Sectors+0x9c>)
 800b836:	6912      	ldr	r2, [r2, #16]
 800b838:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800b83c:	611a      	str	r2, [r3, #16]
     FLASH->CR |= tmp_psize;
 800b83e:	4b10      	ldr	r3, [pc, #64]	; (800b880 <FLASH_EraseAllBank1Sectors+0x9c>)
 800b840:	4a0f      	ldr	r2, [pc, #60]	; (800b880 <FLASH_EraseAllBank1Sectors+0x9c>)
 800b842:	6911      	ldr	r1, [r2, #16]
 800b844:	68fa      	ldr	r2, [r7, #12]
 800b846:	430a      	orrs	r2, r1
 800b848:	611a      	str	r2, [r3, #16]
     FLASH->CR |= FLASH_CR_MER1;
 800b84a:	4b0d      	ldr	r3, [pc, #52]	; (800b880 <FLASH_EraseAllBank1Sectors+0x9c>)
 800b84c:	4a0c      	ldr	r2, [pc, #48]	; (800b880 <FLASH_EraseAllBank1Sectors+0x9c>)
 800b84e:	6912      	ldr	r2, [r2, #16]
 800b850:	f042 0204 	orr.w	r2, r2, #4
 800b854:	611a      	str	r2, [r3, #16]
     FLASH->CR |= FLASH_CR_STRT;
 800b856:	4b0a      	ldr	r3, [pc, #40]	; (800b880 <FLASH_EraseAllBank1Sectors+0x9c>)
 800b858:	4a09      	ldr	r2, [pc, #36]	; (800b880 <FLASH_EraseAllBank1Sectors+0x9c>)
 800b85a:	6912      	ldr	r2, [r2, #16]
 800b85c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800b860:	611a      	str	r2, [r3, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 800b862:	f000 fba1 	bl	800bfa8 <FLASH_WaitForLastOperation>
 800b866:	4603      	mov	r3, r0
 800b868:	72fb      	strb	r3, [r7, #11]

    /* if the erase operation is completed, disable the MER Bit */
    FLASH->CR &= (~FLASH_CR_MER1);
 800b86a:	4b05      	ldr	r3, [pc, #20]	; (800b880 <FLASH_EraseAllBank1Sectors+0x9c>)
 800b86c:	4a04      	ldr	r2, [pc, #16]	; (800b880 <FLASH_EraseAllBank1Sectors+0x9c>)
 800b86e:	6912      	ldr	r2, [r2, #16]
 800b870:	f022 0204 	bic.w	r2, r2, #4
 800b874:	611a      	str	r2, [r3, #16]

  }   
  /* Return the Erase Status */
  return status;
 800b876:	7afb      	ldrb	r3, [r7, #11]
}
 800b878:	4618      	mov	r0, r3
 800b87a:	3710      	adds	r7, #16
 800b87c:	46bd      	mov	sp, r7
 800b87e:	bd80      	pop	{r7, pc}
 800b880:	40023c00 	.word	0x40023c00

0800b884 <FLASH_EraseAllBank2Sectors>:
  *       
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_EraseAllBank2Sectors(uint8_t VoltageRange)
{
 800b884:	b580      	push	{r7, lr}
 800b886:	b084      	sub	sp, #16
 800b888:	af00      	add	r7, sp, #0
 800b88a:	4603      	mov	r3, r0
 800b88c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp_psize = 0x0;
 800b88e:	2300      	movs	r3, #0
 800b890:	60fb      	str	r3, [r7, #12]
  FLASH_Status status = FLASH_COMPLETE;
 800b892:	2309      	movs	r3, #9
 800b894:	72fb      	strb	r3, [r7, #11]
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 800b896:	f000 fb87 	bl	800bfa8 <FLASH_WaitForLastOperation>
 800b89a:	4603      	mov	r3, r0
 800b89c:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == VoltageRange_1)
 800b89e:	79fb      	ldrb	r3, [r7, #7]
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d102      	bne.n	800b8aa <FLASH_EraseAllBank2Sectors+0x26>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 800b8a4:	2300      	movs	r3, #0
 800b8a6:	60fb      	str	r3, [r7, #12]
 800b8a8:	e010      	b.n	800b8cc <FLASH_EraseAllBank2Sectors+0x48>
  }
  else if(VoltageRange == VoltageRange_2)
 800b8aa:	79fb      	ldrb	r3, [r7, #7]
 800b8ac:	2b01      	cmp	r3, #1
 800b8ae:	d103      	bne.n	800b8b8 <FLASH_EraseAllBank2Sectors+0x34>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800b8b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b8b4:	60fb      	str	r3, [r7, #12]
 800b8b6:	e009      	b.n	800b8cc <FLASH_EraseAllBank2Sectors+0x48>
  }
  else if(VoltageRange == VoltageRange_3)
 800b8b8:	79fb      	ldrb	r3, [r7, #7]
 800b8ba:	2b02      	cmp	r3, #2
 800b8bc:	d103      	bne.n	800b8c6 <FLASH_EraseAllBank2Sectors+0x42>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800b8be:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b8c2:	60fb      	str	r3, [r7, #12]
 800b8c4:	e002      	b.n	800b8cc <FLASH_EraseAllBank2Sectors+0x48>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800b8c6:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b8ca:	60fb      	str	r3, [r7, #12]
  }  
  if(status == FLASH_COMPLETE)
 800b8cc:	7afb      	ldrb	r3, [r7, #11]
 800b8ce:	2b09      	cmp	r3, #9
 800b8d0:	d121      	bne.n	800b916 <FLASH_EraseAllBank2Sectors+0x92>
  {
    /* if the previous operation is completed, proceed to erase all sectors */
     FLASH->CR &= CR_PSIZE_MASK;
 800b8d2:	4b13      	ldr	r3, [pc, #76]	; (800b920 <FLASH_EraseAllBank2Sectors+0x9c>)
 800b8d4:	4a12      	ldr	r2, [pc, #72]	; (800b920 <FLASH_EraseAllBank2Sectors+0x9c>)
 800b8d6:	6912      	ldr	r2, [r2, #16]
 800b8d8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800b8dc:	611a      	str	r2, [r3, #16]
     FLASH->CR |= tmp_psize;
 800b8de:	4b10      	ldr	r3, [pc, #64]	; (800b920 <FLASH_EraseAllBank2Sectors+0x9c>)
 800b8e0:	4a0f      	ldr	r2, [pc, #60]	; (800b920 <FLASH_EraseAllBank2Sectors+0x9c>)
 800b8e2:	6911      	ldr	r1, [r2, #16]
 800b8e4:	68fa      	ldr	r2, [r7, #12]
 800b8e6:	430a      	orrs	r2, r1
 800b8e8:	611a      	str	r2, [r3, #16]
     FLASH->CR |= FLASH_CR_MER2;
 800b8ea:	4b0d      	ldr	r3, [pc, #52]	; (800b920 <FLASH_EraseAllBank2Sectors+0x9c>)
 800b8ec:	4a0c      	ldr	r2, [pc, #48]	; (800b920 <FLASH_EraseAllBank2Sectors+0x9c>)
 800b8ee:	6912      	ldr	r2, [r2, #16]
 800b8f0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b8f4:	611a      	str	r2, [r3, #16]
     FLASH->CR |= FLASH_CR_STRT;
 800b8f6:	4b0a      	ldr	r3, [pc, #40]	; (800b920 <FLASH_EraseAllBank2Sectors+0x9c>)
 800b8f8:	4a09      	ldr	r2, [pc, #36]	; (800b920 <FLASH_EraseAllBank2Sectors+0x9c>)
 800b8fa:	6912      	ldr	r2, [r2, #16]
 800b8fc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800b900:	611a      	str	r2, [r3, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 800b902:	f000 fb51 	bl	800bfa8 <FLASH_WaitForLastOperation>
 800b906:	4603      	mov	r3, r0
 800b908:	72fb      	strb	r3, [r7, #11]

    /* if the erase operation is completed, disable the MER Bit */
    FLASH->CR &= (~FLASH_CR_MER2);
 800b90a:	4b05      	ldr	r3, [pc, #20]	; (800b920 <FLASH_EraseAllBank2Sectors+0x9c>)
 800b90c:	4a04      	ldr	r2, [pc, #16]	; (800b920 <FLASH_EraseAllBank2Sectors+0x9c>)
 800b90e:	6912      	ldr	r2, [r2, #16]
 800b910:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b914:	611a      	str	r2, [r3, #16]

  }   
  /* Return the Erase Status */
  return status;
 800b916:	7afb      	ldrb	r3, [r7, #11]
}
 800b918:	4618      	mov	r0, r3
 800b91a:	3710      	adds	r7, #16
 800b91c:	46bd      	mov	sp, r7
 800b91e:	bd80      	pop	{r7, pc}
 800b920:	40023c00 	.word	0x40023c00

0800b924 <FLASH_ProgramDoubleWord>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_ProgramDoubleWord(uint32_t Address, uint64_t Data)
{
 800b924:	b580      	push	{r7, lr}
 800b926:	b086      	sub	sp, #24
 800b928:	af00      	add	r7, sp, #0
 800b92a:	60f8      	str	r0, [r7, #12]
 800b92c:	e9c7 2300 	strd	r2, r3, [r7]
  FLASH_Status status = FLASH_COMPLETE;
 800b930:	2309      	movs	r3, #9
 800b932:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 800b934:	f000 fb38 	bl	800bfa8 <FLASH_WaitForLastOperation>
 800b938:	4603      	mov	r3, r0
 800b93a:	75fb      	strb	r3, [r7, #23]
  
  if(status == FLASH_COMPLETE)
 800b93c:	7dfb      	ldrb	r3, [r7, #23]
 800b93e:	2b09      	cmp	r3, #9
 800b940:	d120      	bne.n	800b984 <FLASH_ProgramDoubleWord+0x60>
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR &= CR_PSIZE_MASK;
 800b942:	4b13      	ldr	r3, [pc, #76]	; (800b990 <FLASH_ProgramDoubleWord+0x6c>)
 800b944:	4a12      	ldr	r2, [pc, #72]	; (800b990 <FLASH_ProgramDoubleWord+0x6c>)
 800b946:	6912      	ldr	r2, [r2, #16]
 800b948:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800b94c:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800b94e:	4b10      	ldr	r3, [pc, #64]	; (800b990 <FLASH_ProgramDoubleWord+0x6c>)
 800b950:	4a0f      	ldr	r2, [pc, #60]	; (800b990 <FLASH_ProgramDoubleWord+0x6c>)
 800b952:	6912      	ldr	r2, [r2, #16]
 800b954:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800b958:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_CR_PG;
 800b95a:	4b0d      	ldr	r3, [pc, #52]	; (800b990 <FLASH_ProgramDoubleWord+0x6c>)
 800b95c:	4a0c      	ldr	r2, [pc, #48]	; (800b990 <FLASH_ProgramDoubleWord+0x6c>)
 800b95e:	6912      	ldr	r2, [r2, #16]
 800b960:	f042 0201 	orr.w	r2, r2, #1
 800b964:	611a      	str	r2, [r3, #16]
  
    *(__IO uint64_t*)Address = Data;
 800b966:	68f9      	ldr	r1, [r7, #12]
 800b968:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b96c:	e9c1 2300 	strd	r2, r3, [r1]
        
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 800b970:	f000 fb1a 	bl	800bfa8 <FLASH_WaitForLastOperation>
 800b974:	4603      	mov	r3, r0
 800b976:	75fb      	strb	r3, [r7, #23]

    /* if the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 800b978:	4b05      	ldr	r3, [pc, #20]	; (800b990 <FLASH_ProgramDoubleWord+0x6c>)
 800b97a:	4a05      	ldr	r2, [pc, #20]	; (800b990 <FLASH_ProgramDoubleWord+0x6c>)
 800b97c:	6912      	ldr	r2, [r2, #16]
 800b97e:	f022 0201 	bic.w	r2, r2, #1
 800b982:	611a      	str	r2, [r3, #16]
  } 
  /* Return the Program Status */
  return status;
 800b984:	7dfb      	ldrb	r3, [r7, #23]
}
 800b986:	4618      	mov	r0, r3
 800b988:	3718      	adds	r7, #24
 800b98a:	46bd      	mov	sp, r7
 800b98c:	bd80      	pop	{r7, pc}
 800b98e:	bf00      	nop
 800b990:	40023c00 	.word	0x40023c00

0800b994 <FLASH_ProgramWord>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_ProgramWord(uint32_t Address, uint32_t Data)
{
 800b994:	b580      	push	{r7, lr}
 800b996:	b084      	sub	sp, #16
 800b998:	af00      	add	r7, sp, #0
 800b99a:	6078      	str	r0, [r7, #4]
 800b99c:	6039      	str	r1, [r7, #0]
  FLASH_Status status = FLASH_COMPLETE;
 800b99e:	2309      	movs	r3, #9
 800b9a0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 800b9a2:	f000 fb01 	bl	800bfa8 <FLASH_WaitForLastOperation>
 800b9a6:	4603      	mov	r3, r0
 800b9a8:	73fb      	strb	r3, [r7, #15]
  
  if(status == FLASH_COMPLETE)
 800b9aa:	7bfb      	ldrb	r3, [r7, #15]
 800b9ac:	2b09      	cmp	r3, #9
 800b9ae:	d11e      	bne.n	800b9ee <FLASH_ProgramWord+0x5a>
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR &= CR_PSIZE_MASK;
 800b9b0:	4b11      	ldr	r3, [pc, #68]	; (800b9f8 <FLASH_ProgramWord+0x64>)
 800b9b2:	4a11      	ldr	r2, [pc, #68]	; (800b9f8 <FLASH_ProgramWord+0x64>)
 800b9b4:	6912      	ldr	r2, [r2, #16]
 800b9b6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800b9ba:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_PSIZE_WORD;
 800b9bc:	4b0e      	ldr	r3, [pc, #56]	; (800b9f8 <FLASH_ProgramWord+0x64>)
 800b9be:	4a0e      	ldr	r2, [pc, #56]	; (800b9f8 <FLASH_ProgramWord+0x64>)
 800b9c0:	6912      	ldr	r2, [r2, #16]
 800b9c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b9c6:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_CR_PG;
 800b9c8:	4b0b      	ldr	r3, [pc, #44]	; (800b9f8 <FLASH_ProgramWord+0x64>)
 800b9ca:	4a0b      	ldr	r2, [pc, #44]	; (800b9f8 <FLASH_ProgramWord+0x64>)
 800b9cc:	6912      	ldr	r2, [r2, #16]
 800b9ce:	f042 0201 	orr.w	r2, r2, #1
 800b9d2:	611a      	str	r2, [r3, #16]
  
    *(__IO uint32_t*)Address = Data;
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	683a      	ldr	r2, [r7, #0]
 800b9d8:	601a      	str	r2, [r3, #0]
        
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 800b9da:	f000 fae5 	bl	800bfa8 <FLASH_WaitForLastOperation>
 800b9de:	4603      	mov	r3, r0
 800b9e0:	73fb      	strb	r3, [r7, #15]

    /* if the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 800b9e2:	4b05      	ldr	r3, [pc, #20]	; (800b9f8 <FLASH_ProgramWord+0x64>)
 800b9e4:	4a04      	ldr	r2, [pc, #16]	; (800b9f8 <FLASH_ProgramWord+0x64>)
 800b9e6:	6912      	ldr	r2, [r2, #16]
 800b9e8:	f022 0201 	bic.w	r2, r2, #1
 800b9ec:	611a      	str	r2, [r3, #16]
  } 
  /* Return the Program Status */
  return status;
 800b9ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9f0:	4618      	mov	r0, r3
 800b9f2:	3710      	adds	r7, #16
 800b9f4:	46bd      	mov	sp, r7
 800b9f6:	bd80      	pop	{r7, pc}
 800b9f8:	40023c00 	.word	0x40023c00

0800b9fc <FLASH_ProgramHalfWord>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_ProgramHalfWord(uint32_t Address, uint16_t Data)
{
 800b9fc:	b580      	push	{r7, lr}
 800b9fe:	b084      	sub	sp, #16
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	6078      	str	r0, [r7, #4]
 800ba04:	460b      	mov	r3, r1
 800ba06:	807b      	strh	r3, [r7, #2]
  FLASH_Status status = FLASH_COMPLETE;
 800ba08:	2309      	movs	r3, #9
 800ba0a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 800ba0c:	f000 facc 	bl	800bfa8 <FLASH_WaitForLastOperation>
 800ba10:	4603      	mov	r3, r0
 800ba12:	73fb      	strb	r3, [r7, #15]
  
  if(status == FLASH_COMPLETE)
 800ba14:	7bfb      	ldrb	r3, [r7, #15]
 800ba16:	2b09      	cmp	r3, #9
 800ba18:	d11e      	bne.n	800ba58 <FLASH_ProgramHalfWord+0x5c>
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR &= CR_PSIZE_MASK;
 800ba1a:	4b12      	ldr	r3, [pc, #72]	; (800ba64 <FLASH_ProgramHalfWord+0x68>)
 800ba1c:	4a11      	ldr	r2, [pc, #68]	; (800ba64 <FLASH_ProgramHalfWord+0x68>)
 800ba1e:	6912      	ldr	r2, [r2, #16]
 800ba20:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800ba24:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800ba26:	4b0f      	ldr	r3, [pc, #60]	; (800ba64 <FLASH_ProgramHalfWord+0x68>)
 800ba28:	4a0e      	ldr	r2, [pc, #56]	; (800ba64 <FLASH_ProgramHalfWord+0x68>)
 800ba2a:	6912      	ldr	r2, [r2, #16]
 800ba2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ba30:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_CR_PG;
 800ba32:	4b0c      	ldr	r3, [pc, #48]	; (800ba64 <FLASH_ProgramHalfWord+0x68>)
 800ba34:	4a0b      	ldr	r2, [pc, #44]	; (800ba64 <FLASH_ProgramHalfWord+0x68>)
 800ba36:	6912      	ldr	r2, [r2, #16]
 800ba38:	f042 0201 	orr.w	r2, r2, #1
 800ba3c:	611a      	str	r2, [r3, #16]
  
    *(__IO uint16_t*)Address = Data;
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	887a      	ldrh	r2, [r7, #2]
 800ba42:	801a      	strh	r2, [r3, #0]
        
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 800ba44:	f000 fab0 	bl	800bfa8 <FLASH_WaitForLastOperation>
 800ba48:	4603      	mov	r3, r0
 800ba4a:	73fb      	strb	r3, [r7, #15]

    /* if the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 800ba4c:	4b05      	ldr	r3, [pc, #20]	; (800ba64 <FLASH_ProgramHalfWord+0x68>)
 800ba4e:	4a05      	ldr	r2, [pc, #20]	; (800ba64 <FLASH_ProgramHalfWord+0x68>)
 800ba50:	6912      	ldr	r2, [r2, #16]
 800ba52:	f022 0201 	bic.w	r2, r2, #1
 800ba56:	611a      	str	r2, [r3, #16]
  } 
  /* Return the Program Status */
  return status;
 800ba58:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	3710      	adds	r7, #16
 800ba5e:	46bd      	mov	sp, r7
 800ba60:	bd80      	pop	{r7, pc}
 800ba62:	bf00      	nop
 800ba64:	40023c00 	.word	0x40023c00

0800ba68 <FLASH_ProgramByte>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_ProgramByte(uint32_t Address, uint8_t Data)
{
 800ba68:	b580      	push	{r7, lr}
 800ba6a:	b084      	sub	sp, #16
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	6078      	str	r0, [r7, #4]
 800ba70:	460b      	mov	r3, r1
 800ba72:	70fb      	strb	r3, [r7, #3]
  FLASH_Status status = FLASH_COMPLETE;
 800ba74:	2309      	movs	r3, #9
 800ba76:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 800ba78:	f000 fa96 	bl	800bfa8 <FLASH_WaitForLastOperation>
 800ba7c:	4603      	mov	r3, r0
 800ba7e:	73fb      	strb	r3, [r7, #15]
  
  if(status == FLASH_COMPLETE)
 800ba80:	7bfb      	ldrb	r3, [r7, #15]
 800ba82:	2b09      	cmp	r3, #9
 800ba84:	d11c      	bne.n	800bac0 <FLASH_ProgramByte+0x58>
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR &= CR_PSIZE_MASK;
 800ba86:	4b11      	ldr	r3, [pc, #68]	; (800bacc <FLASH_ProgramByte+0x64>)
 800ba88:	4a10      	ldr	r2, [pc, #64]	; (800bacc <FLASH_ProgramByte+0x64>)
 800ba8a:	6912      	ldr	r2, [r2, #16]
 800ba8c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800ba90:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_PSIZE_BYTE;
 800ba92:	4b0e      	ldr	r3, [pc, #56]	; (800bacc <FLASH_ProgramByte+0x64>)
 800ba94:	4a0d      	ldr	r2, [pc, #52]	; (800bacc <FLASH_ProgramByte+0x64>)
 800ba96:	6912      	ldr	r2, [r2, #16]
 800ba98:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_CR_PG;
 800ba9a:	4b0c      	ldr	r3, [pc, #48]	; (800bacc <FLASH_ProgramByte+0x64>)
 800ba9c:	4a0b      	ldr	r2, [pc, #44]	; (800bacc <FLASH_ProgramByte+0x64>)
 800ba9e:	6912      	ldr	r2, [r2, #16]
 800baa0:	f042 0201 	orr.w	r2, r2, #1
 800baa4:	611a      	str	r2, [r3, #16]
  
    *(__IO uint8_t*)Address = Data;
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	78fa      	ldrb	r2, [r7, #3]
 800baaa:	701a      	strb	r2, [r3, #0]
        
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 800baac:	f000 fa7c 	bl	800bfa8 <FLASH_WaitForLastOperation>
 800bab0:	4603      	mov	r3, r0
 800bab2:	73fb      	strb	r3, [r7, #15]

    /* if the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 800bab4:	4b05      	ldr	r3, [pc, #20]	; (800bacc <FLASH_ProgramByte+0x64>)
 800bab6:	4a05      	ldr	r2, [pc, #20]	; (800bacc <FLASH_ProgramByte+0x64>)
 800bab8:	6912      	ldr	r2, [r2, #16]
 800baba:	f022 0201 	bic.w	r2, r2, #1
 800babe:	611a      	str	r2, [r3, #16]
  } 

  /* Return the Program Status */
  return status;
 800bac0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bac2:	4618      	mov	r0, r3
 800bac4:	3710      	adds	r7, #16
 800bac6:	46bd      	mov	sp, r7
 800bac8:	bd80      	pop	{r7, pc}
 800baca:	bf00      	nop
 800bacc:	40023c00 	.word	0x40023c00

0800bad0 <FLASH_OB_Unlock>:
  * @brief  Unlocks the FLASH Option Control Registers access.
  * @param  None
  * @retval None
  */
void FLASH_OB_Unlock(void)
{
 800bad0:	b480      	push	{r7}
 800bad2:	af00      	add	r7, sp, #0
  if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
 800bad4:	4b07      	ldr	r3, [pc, #28]	; (800baf4 <FLASH_OB_Unlock+0x24>)
 800bad6:	695b      	ldr	r3, [r3, #20]
 800bad8:	f003 0301 	and.w	r3, r3, #1
 800badc:	2b00      	cmp	r3, #0
 800bade:	d005      	beq.n	800baec <FLASH_OB_Unlock+0x1c>
  {
    /* Authorizes the Option Byte register programming */
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
 800bae0:	4b04      	ldr	r3, [pc, #16]	; (800baf4 <FLASH_OB_Unlock+0x24>)
 800bae2:	4a05      	ldr	r2, [pc, #20]	; (800baf8 <FLASH_OB_Unlock+0x28>)
 800bae4:	609a      	str	r2, [r3, #8]
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
 800bae6:	4b03      	ldr	r3, [pc, #12]	; (800baf4 <FLASH_OB_Unlock+0x24>)
 800bae8:	4a04      	ldr	r2, [pc, #16]	; (800bafc <FLASH_OB_Unlock+0x2c>)
 800baea:	609a      	str	r2, [r3, #8]
  }  
}
 800baec:	46bd      	mov	sp, r7
 800baee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf2:	4770      	bx	lr
 800baf4:	40023c00 	.word	0x40023c00
 800baf8:	08192a3b 	.word	0x08192a3b
 800bafc:	4c5d6e7f 	.word	0x4c5d6e7f

0800bb00 <FLASH_OB_Lock>:
  * @brief  Locks the FLASH Option Control Registers access.
  * @param  None
  * @retval None
  */
void FLASH_OB_Lock(void)
{
 800bb00:	b480      	push	{r7}
 800bb02:	af00      	add	r7, sp, #0
  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 800bb04:	4b04      	ldr	r3, [pc, #16]	; (800bb18 <FLASH_OB_Lock+0x18>)
 800bb06:	4a04      	ldr	r2, [pc, #16]	; (800bb18 <FLASH_OB_Lock+0x18>)
 800bb08:	6952      	ldr	r2, [r2, #20]
 800bb0a:	f042 0201 	orr.w	r2, r2, #1
 800bb0e:	615a      	str	r2, [r3, #20]
}
 800bb10:	46bd      	mov	sp, r7
 800bb12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb16:	4770      	bx	lr
 800bb18:	40023c00 	.word	0x40023c00

0800bb1c <FLASH_OB_WRPConfig>:
  * @param  Newstate: new state of the Write Protection.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None  
  */
void FLASH_OB_WRPConfig(uint32_t OB_WRP, FunctionalState NewState)
{ 
 800bb1c:	b580      	push	{r7, lr}
 800bb1e:	b084      	sub	sp, #16
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	6078      	str	r0, [r7, #4]
 800bb24:	460b      	mov	r3, r1
 800bb26:	70fb      	strb	r3, [r7, #3]
  FLASH_Status status = FLASH_COMPLETE;
 800bb28:	2309      	movs	r3, #9
 800bb2a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_OB_WRP(OB_WRP));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  status = FLASH_WaitForLastOperation();
 800bb2c:	f000 fa3c 	bl	800bfa8 <FLASH_WaitForLastOperation>
 800bb30:	4603      	mov	r3, r0
 800bb32:	73fb      	strb	r3, [r7, #15]

  if(status == FLASH_COMPLETE)
 800bb34:	7bfb      	ldrb	r3, [r7, #15]
 800bb36:	2b09      	cmp	r3, #9
 800bb38:	d117      	bne.n	800bb6a <FLASH_OB_WRPConfig+0x4e>
  { 
    if(NewState != DISABLE)
 800bb3a:	78fb      	ldrb	r3, [r7, #3]
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d00b      	beq.n	800bb58 <FLASH_OB_WRPConfig+0x3c>
    {
      *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS &= (~OB_WRP);
 800bb40:	4b0b      	ldr	r3, [pc, #44]	; (800bb70 <FLASH_OB_WRPConfig+0x54>)
 800bb42:	4a0b      	ldr	r2, [pc, #44]	; (800bb70 <FLASH_OB_WRPConfig+0x54>)
 800bb44:	8812      	ldrh	r2, [r2, #0]
 800bb46:	b291      	uxth	r1, r2
 800bb48:	687a      	ldr	r2, [r7, #4]
 800bb4a:	b292      	uxth	r2, r2
 800bb4c:	43d2      	mvns	r2, r2
 800bb4e:	b292      	uxth	r2, r2
 800bb50:	400a      	ands	r2, r1
 800bb52:	b292      	uxth	r2, r2
 800bb54:	801a      	strh	r2, [r3, #0]
 800bb56:	e008      	b.n	800bb6a <FLASH_OB_WRPConfig+0x4e>
    }
    else
    {
      *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS |= (uint16_t)OB_WRP;
 800bb58:	4b05      	ldr	r3, [pc, #20]	; (800bb70 <FLASH_OB_WRPConfig+0x54>)
 800bb5a:	4a05      	ldr	r2, [pc, #20]	; (800bb70 <FLASH_OB_WRPConfig+0x54>)
 800bb5c:	8812      	ldrh	r2, [r2, #0]
 800bb5e:	b291      	uxth	r1, r2
 800bb60:	687a      	ldr	r2, [r7, #4]
 800bb62:	b292      	uxth	r2, r2
 800bb64:	430a      	orrs	r2, r1
 800bb66:	b292      	uxth	r2, r2
 800bb68:	801a      	strh	r2, [r3, #0]
    }
  }
}
 800bb6a:	3710      	adds	r7, #16
 800bb6c:	46bd      	mov	sp, r7
 800bb6e:	bd80      	pop	{r7, pc}
 800bb70:	40023c16 	.word	0x40023c16

0800bb74 <FLASH_OB_WRP1Config>:
  * @param  Newstate: new state of the Write Protection.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None  
  */
void FLASH_OB_WRP1Config(uint32_t OB_WRP, FunctionalState NewState)
{ 
 800bb74:	b580      	push	{r7, lr}
 800bb76:	b084      	sub	sp, #16
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	6078      	str	r0, [r7, #4]
 800bb7c:	460b      	mov	r3, r1
 800bb7e:	70fb      	strb	r3, [r7, #3]
  FLASH_Status status = FLASH_COMPLETE;
 800bb80:	2309      	movs	r3, #9
 800bb82:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_OB_WRP(OB_WRP));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  status = FLASH_WaitForLastOperation();
 800bb84:	f000 fa10 	bl	800bfa8 <FLASH_WaitForLastOperation>
 800bb88:	4603      	mov	r3, r0
 800bb8a:	73fb      	strb	r3, [r7, #15]

  if(status == FLASH_COMPLETE)
 800bb8c:	7bfb      	ldrb	r3, [r7, #15]
 800bb8e:	2b09      	cmp	r3, #9
 800bb90:	d117      	bne.n	800bbc2 <FLASH_OB_WRP1Config+0x4e>
  { 
    if(NewState != DISABLE)
 800bb92:	78fb      	ldrb	r3, [r7, #3]
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d00b      	beq.n	800bbb0 <FLASH_OB_WRP1Config+0x3c>
    {
      *(__IO uint16_t*)OPTCR1_BYTE2_ADDRESS &= (~OB_WRP);
 800bb98:	4b0b      	ldr	r3, [pc, #44]	; (800bbc8 <FLASH_OB_WRP1Config+0x54>)
 800bb9a:	4a0b      	ldr	r2, [pc, #44]	; (800bbc8 <FLASH_OB_WRP1Config+0x54>)
 800bb9c:	8812      	ldrh	r2, [r2, #0]
 800bb9e:	b291      	uxth	r1, r2
 800bba0:	687a      	ldr	r2, [r7, #4]
 800bba2:	b292      	uxth	r2, r2
 800bba4:	43d2      	mvns	r2, r2
 800bba6:	b292      	uxth	r2, r2
 800bba8:	400a      	ands	r2, r1
 800bbaa:	b292      	uxth	r2, r2
 800bbac:	801a      	strh	r2, [r3, #0]
 800bbae:	e008      	b.n	800bbc2 <FLASH_OB_WRP1Config+0x4e>
    }
    else
    {
      *(__IO uint16_t*)OPTCR1_BYTE2_ADDRESS |= (uint16_t)OB_WRP;
 800bbb0:	4b05      	ldr	r3, [pc, #20]	; (800bbc8 <FLASH_OB_WRP1Config+0x54>)
 800bbb2:	4a05      	ldr	r2, [pc, #20]	; (800bbc8 <FLASH_OB_WRP1Config+0x54>)
 800bbb4:	8812      	ldrh	r2, [r2, #0]
 800bbb6:	b291      	uxth	r1, r2
 800bbb8:	687a      	ldr	r2, [r7, #4]
 800bbba:	b292      	uxth	r2, r2
 800bbbc:	430a      	orrs	r2, r1
 800bbbe:	b292      	uxth	r2, r2
 800bbc0:	801a      	strh	r2, [r3, #0]
    }
  }
}
 800bbc2:	3710      	adds	r7, #16
 800bbc4:	46bd      	mov	sp, r7
 800bbc6:	bd80      	pop	{r7, pc}
 800bbc8:	40023c1a 	.word	0x40023c1a

0800bbcc <FLASH_OB_PCROPSelectionConfig>:
  *            @arg OB_PcROP_Disable: nWRPi control the write protection of respective user sectors.
  *            @arg OB_PcROP_Enable: nWRPi control the  read&write protection (PCROP) of respective user sectors.
  * @retval None
  */
void FLASH_OB_PCROPSelectionConfig(uint8_t OB_PcROP)
{  
 800bbcc:	b480      	push	{r7}
 800bbce:	b085      	sub	sp, #20
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	4603      	mov	r3, r0
 800bbd4:	71fb      	strb	r3, [r7, #7]
  uint8_t optiontmp = 0xFF;
 800bbd6:	23ff      	movs	r3, #255	; 0xff
 800bbd8:	73fb      	strb	r3, [r7, #15]
      
  /* Check the parameters */
  assert_param(IS_OB_PCROP_SELECT(OB_PcROP));
  
  /* Mask SPRMOD bit */
  optiontmp =  (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE3_ADDRESS) & (uint8_t)0x7F); 
 800bbda:	4b08      	ldr	r3, [pc, #32]	; (800bbfc <FLASH_OB_PCROPSelectionConfig+0x30>)
 800bbdc:	781b      	ldrb	r3, [r3, #0]
 800bbde:	b2db      	uxtb	r3, r3
 800bbe0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bbe4:	73fb      	strb	r3, [r7, #15]
  /* Update Option Byte */
  *(__IO uint8_t *)OPTCR_BYTE3_ADDRESS = (uint8_t)(OB_PcROP | optiontmp); 
 800bbe6:	4b05      	ldr	r3, [pc, #20]	; (800bbfc <FLASH_OB_PCROPSelectionConfig+0x30>)
 800bbe8:	79f9      	ldrb	r1, [r7, #7]
 800bbea:	7bfa      	ldrb	r2, [r7, #15]
 800bbec:	430a      	orrs	r2, r1
 800bbee:	b2d2      	uxtb	r2, r2
 800bbf0:	701a      	strb	r2, [r3, #0]
    
}
 800bbf2:	3714      	adds	r7, #20
 800bbf4:	46bd      	mov	sp, r7
 800bbf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbfa:	4770      	bx	lr
 800bbfc:	40023c17 	.word	0x40023c17

0800bc00 <FLASH_OB_PCROPConfig>:
  * @param  Newstate: new state of the Write Protection.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None  
  */
void FLASH_OB_PCROPConfig(uint32_t OB_PCROP, FunctionalState NewState)
{ 
 800bc00:	b580      	push	{r7, lr}
 800bc02:	b084      	sub	sp, #16
 800bc04:	af00      	add	r7, sp, #0
 800bc06:	6078      	str	r0, [r7, #4]
 800bc08:	460b      	mov	r3, r1
 800bc0a:	70fb      	strb	r3, [r7, #3]
  FLASH_Status status = FLASH_COMPLETE;
 800bc0c:	2309      	movs	r3, #9
 800bc0e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_OB_PCROP(OB_PCROP));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  status = FLASH_WaitForLastOperation();
 800bc10:	f000 f9ca 	bl	800bfa8 <FLASH_WaitForLastOperation>
 800bc14:	4603      	mov	r3, r0
 800bc16:	73fb      	strb	r3, [r7, #15]

  if(status == FLASH_COMPLETE)
 800bc18:	7bfb      	ldrb	r3, [r7, #15]
 800bc1a:	2b09      	cmp	r3, #9
 800bc1c:	d117      	bne.n	800bc4e <FLASH_OB_PCROPConfig+0x4e>
  { 
    if(NewState != DISABLE)
 800bc1e:	78fb      	ldrb	r3, [r7, #3]
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d009      	beq.n	800bc38 <FLASH_OB_PCROPConfig+0x38>
    {
      *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS |= (uint16_t)OB_PCROP;    
 800bc24:	4b0b      	ldr	r3, [pc, #44]	; (800bc54 <FLASH_OB_PCROPConfig+0x54>)
 800bc26:	4a0b      	ldr	r2, [pc, #44]	; (800bc54 <FLASH_OB_PCROPConfig+0x54>)
 800bc28:	8812      	ldrh	r2, [r2, #0]
 800bc2a:	b291      	uxth	r1, r2
 800bc2c:	687a      	ldr	r2, [r7, #4]
 800bc2e:	b292      	uxth	r2, r2
 800bc30:	430a      	orrs	r2, r1
 800bc32:	b292      	uxth	r2, r2
 800bc34:	801a      	strh	r2, [r3, #0]
 800bc36:	e00a      	b.n	800bc4e <FLASH_OB_PCROPConfig+0x4e>
    }
    else
    {
      *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS &= (~OB_PCROP);
 800bc38:	4b06      	ldr	r3, [pc, #24]	; (800bc54 <FLASH_OB_PCROPConfig+0x54>)
 800bc3a:	4a06      	ldr	r2, [pc, #24]	; (800bc54 <FLASH_OB_PCROPConfig+0x54>)
 800bc3c:	8812      	ldrh	r2, [r2, #0]
 800bc3e:	b291      	uxth	r1, r2
 800bc40:	687a      	ldr	r2, [r7, #4]
 800bc42:	b292      	uxth	r2, r2
 800bc44:	43d2      	mvns	r2, r2
 800bc46:	b292      	uxth	r2, r2
 800bc48:	400a      	ands	r2, r1
 800bc4a:	b292      	uxth	r2, r2
 800bc4c:	801a      	strh	r2, [r3, #0]
    }
  }
}
 800bc4e:	3710      	adds	r7, #16
 800bc50:	46bd      	mov	sp, r7
 800bc52:	bd80      	pop	{r7, pc}
 800bc54:	40023c16 	.word	0x40023c16

0800bc58 <FLASH_OB_PCROP1Config>:
  * @param  Newstate: new state of the Write Protection.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None  
  */
void FLASH_OB_PCROP1Config(uint32_t OB_PCROP, FunctionalState NewState)
{ 
 800bc58:	b580      	push	{r7, lr}
 800bc5a:	b084      	sub	sp, #16
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	6078      	str	r0, [r7, #4]
 800bc60:	460b      	mov	r3, r1
 800bc62:	70fb      	strb	r3, [r7, #3]
  FLASH_Status status = FLASH_COMPLETE;
 800bc64:	2309      	movs	r3, #9
 800bc66:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_OB_PCROP(OB_PCROP));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  status = FLASH_WaitForLastOperation();
 800bc68:	f000 f99e 	bl	800bfa8 <FLASH_WaitForLastOperation>
 800bc6c:	4603      	mov	r3, r0
 800bc6e:	73fb      	strb	r3, [r7, #15]

  if(status == FLASH_COMPLETE)
 800bc70:	7bfb      	ldrb	r3, [r7, #15]
 800bc72:	2b09      	cmp	r3, #9
 800bc74:	d117      	bne.n	800bca6 <FLASH_OB_PCROP1Config+0x4e>
  { 
    if(NewState != DISABLE)
 800bc76:	78fb      	ldrb	r3, [r7, #3]
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d009      	beq.n	800bc90 <FLASH_OB_PCROP1Config+0x38>
    {
      *(__IO uint16_t*)OPTCR1_BYTE2_ADDRESS |= (uint16_t)OB_PCROP;
 800bc7c:	4b0b      	ldr	r3, [pc, #44]	; (800bcac <FLASH_OB_PCROP1Config+0x54>)
 800bc7e:	4a0b      	ldr	r2, [pc, #44]	; (800bcac <FLASH_OB_PCROP1Config+0x54>)
 800bc80:	8812      	ldrh	r2, [r2, #0]
 800bc82:	b291      	uxth	r1, r2
 800bc84:	687a      	ldr	r2, [r7, #4]
 800bc86:	b292      	uxth	r2, r2
 800bc88:	430a      	orrs	r2, r1
 800bc8a:	b292      	uxth	r2, r2
 800bc8c:	801a      	strh	r2, [r3, #0]
 800bc8e:	e00a      	b.n	800bca6 <FLASH_OB_PCROP1Config+0x4e>
    }
    else
    {
      *(__IO uint16_t*)OPTCR1_BYTE2_ADDRESS &= (~OB_PCROP);
 800bc90:	4b06      	ldr	r3, [pc, #24]	; (800bcac <FLASH_OB_PCROP1Config+0x54>)
 800bc92:	4a06      	ldr	r2, [pc, #24]	; (800bcac <FLASH_OB_PCROP1Config+0x54>)
 800bc94:	8812      	ldrh	r2, [r2, #0]
 800bc96:	b291      	uxth	r1, r2
 800bc98:	687a      	ldr	r2, [r7, #4]
 800bc9a:	b292      	uxth	r2, r2
 800bc9c:	43d2      	mvns	r2, r2
 800bc9e:	b292      	uxth	r2, r2
 800bca0:	400a      	ands	r2, r1
 800bca2:	b292      	uxth	r2, r2
 800bca4:	801a      	strh	r2, [r3, #0]
    }
  }
}
 800bca6:	3710      	adds	r7, #16
 800bca8:	46bd      	mov	sp, r7
 800bcaa:	bd80      	pop	{r7, pc}
 800bcac:	40023c1a 	.word	0x40023c1a

0800bcb0 <FLASH_OB_RDPConfig>:
  * /!\ Warning /!\ When enabling OB_RDP level 2 it's no more possible to go back to level 1 or 0
  *    
  * @retval None
  */
void FLASH_OB_RDPConfig(uint8_t OB_RDP)
{
 800bcb0:	b580      	push	{r7, lr}
 800bcb2:	b084      	sub	sp, #16
 800bcb4:	af00      	add	r7, sp, #0
 800bcb6:	4603      	mov	r3, r0
 800bcb8:	71fb      	strb	r3, [r7, #7]
  FLASH_Status status = FLASH_COMPLETE;
 800bcba:	2309      	movs	r3, #9
 800bcbc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_OB_RDP(OB_RDP));

  status = FLASH_WaitForLastOperation();
 800bcbe:	f000 f973 	bl	800bfa8 <FLASH_WaitForLastOperation>
 800bcc2:	4603      	mov	r3, r0
 800bcc4:	73fb      	strb	r3, [r7, #15]

  if(status == FLASH_COMPLETE)
 800bcc6:	7bfb      	ldrb	r3, [r7, #15]
 800bcc8:	2b09      	cmp	r3, #9
 800bcca:	d102      	bne.n	800bcd2 <FLASH_OB_RDPConfig+0x22>
  {
    *(__IO uint8_t*)OPTCR_BYTE1_ADDRESS = OB_RDP;
 800bccc:	4b02      	ldr	r3, [pc, #8]	; (800bcd8 <FLASH_OB_RDPConfig+0x28>)
 800bcce:	79fa      	ldrb	r2, [r7, #7]
 800bcd0:	701a      	strb	r2, [r3, #0]

  }
}
 800bcd2:	3710      	adds	r7, #16
 800bcd4:	46bd      	mov	sp, r7
 800bcd6:	bd80      	pop	{r7, pc}
 800bcd8:	40023c15 	.word	0x40023c15

0800bcdc <FLASH_OB_UserConfig>:
  *            @arg OB_STDBY_NoRST: No reset generated when entering in STANDBY
  *            @arg OB_STDBY_RST: Reset generated when entering in STANDBY
  * @retval None
  */
void FLASH_OB_UserConfig(uint8_t OB_IWDG, uint8_t OB_STOP, uint8_t OB_STDBY)
{
 800bcdc:	b580      	push	{r7, lr}
 800bcde:	b084      	sub	sp, #16
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	4613      	mov	r3, r2
 800bce4:	4602      	mov	r2, r0
 800bce6:	71fa      	strb	r2, [r7, #7]
 800bce8:	460a      	mov	r2, r1
 800bcea:	71ba      	strb	r2, [r7, #6]
 800bcec:	717b      	strb	r3, [r7, #5]
  uint8_t optiontmp = 0xFF;
 800bcee:	23ff      	movs	r3, #255	; 0xff
 800bcf0:	73fb      	strb	r3, [r7, #15]
  FLASH_Status status = FLASH_COMPLETE; 
 800bcf2:	2309      	movs	r3, #9
 800bcf4:	73bb      	strb	r3, [r7, #14]
  assert_param(IS_OB_IWDG_SOURCE(OB_IWDG));
  assert_param(IS_OB_STOP_SOURCE(OB_STOP));
  assert_param(IS_OB_STDBY_SOURCE(OB_STDBY));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 800bcf6:	f000 f957 	bl	800bfa8 <FLASH_WaitForLastOperation>
 800bcfa:	4603      	mov	r3, r0
 800bcfc:	73bb      	strb	r3, [r7, #14]
  
  if(status == FLASH_COMPLETE)
 800bcfe:	7bbb      	ldrb	r3, [r7, #14]
 800bd00:	2b09      	cmp	r3, #9
 800bd02:	d111      	bne.n	800bd28 <FLASH_OB_UserConfig+0x4c>
  { 
#if defined (STM32F427_437xx) || defined (STM32F429_439xx)     
    /* Mask OPTLOCK, OPTSTRT, BOR_LEV and BFB2 bits */
    optiontmp =  (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE0_ADDRESS) & (uint8_t)0x1F);
 800bd04:	4b0a      	ldr	r3, [pc, #40]	; (800bd30 <FLASH_OB_UserConfig+0x54>)
 800bd06:	781b      	ldrb	r3, [r3, #0]
 800bd08:	b2db      	uxtb	r3, r3
 800bd0a:	f003 031f 	and.w	r3, r3, #31
 800bd0e:	73fb      	strb	r3, [r7, #15]
    /* Mask OPTLOCK, OPTSTRT and BOR_LEV bits */
    optiontmp =  (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0F); 
#endif /* STM32F40_41xxx || STM32F401xx */ 

    /* Update User Option Byte */
    *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS = OB_IWDG | (uint8_t)(OB_STDBY | (uint8_t)(OB_STOP | ((uint8_t)optiontmp))); 
 800bd10:	4b07      	ldr	r3, [pc, #28]	; (800bd30 <FLASH_OB_UserConfig+0x54>)
 800bd12:	79b9      	ldrb	r1, [r7, #6]
 800bd14:	7bfa      	ldrb	r2, [r7, #15]
 800bd16:	430a      	orrs	r2, r1
 800bd18:	b2d1      	uxtb	r1, r2
 800bd1a:	797a      	ldrb	r2, [r7, #5]
 800bd1c:	430a      	orrs	r2, r1
 800bd1e:	b2d1      	uxtb	r1, r2
 800bd20:	79fa      	ldrb	r2, [r7, #7]
 800bd22:	430a      	orrs	r2, r1
 800bd24:	b2d2      	uxtb	r2, r2
 800bd26:	701a      	strb	r2, [r3, #0]
  }  
}
 800bd28:	3710      	adds	r7, #16
 800bd2a:	46bd      	mov	sp, r7
 800bd2c:	bd80      	pop	{r7, pc}
 800bd2e:	bf00      	nop
 800bd30:	40023c14 	.word	0x40023c14

0800bd34 <FLASH_OB_BootConfig>:
  *            @arg OB_Dual_BootEnabled: Dual Bank Boot Enable
  *            @arg OB_Dual_BootDisabled: Dual Bank Boot Disabled
  * @retval None
  */
void FLASH_OB_BootConfig(uint8_t OB_BOOT)
{
 800bd34:	b480      	push	{r7}
 800bd36:	b083      	sub	sp, #12
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	4603      	mov	r3, r0
 800bd3c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_OB_BOOT(OB_BOOT));

  /* Set Dual Bank Boot */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS &= (~FLASH_OPTCR_BFB2);
 800bd3e:	4b0a      	ldr	r3, [pc, #40]	; (800bd68 <FLASH_OB_BootConfig+0x34>)
 800bd40:	4a09      	ldr	r2, [pc, #36]	; (800bd68 <FLASH_OB_BootConfig+0x34>)
 800bd42:	7812      	ldrb	r2, [r2, #0]
 800bd44:	b2d2      	uxtb	r2, r2
 800bd46:	f022 0210 	bic.w	r2, r2, #16
 800bd4a:	b2d2      	uxtb	r2, r2
 800bd4c:	701a      	strb	r2, [r3, #0]
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= OB_BOOT;
 800bd4e:	4b06      	ldr	r3, [pc, #24]	; (800bd68 <FLASH_OB_BootConfig+0x34>)
 800bd50:	4a05      	ldr	r2, [pc, #20]	; (800bd68 <FLASH_OB_BootConfig+0x34>)
 800bd52:	7812      	ldrb	r2, [r2, #0]
 800bd54:	b2d1      	uxtb	r1, r2
 800bd56:	79fa      	ldrb	r2, [r7, #7]
 800bd58:	430a      	orrs	r2, r1
 800bd5a:	b2d2      	uxtb	r2, r2
 800bd5c:	701a      	strb	r2, [r3, #0]

}
 800bd5e:	370c      	adds	r7, #12
 800bd60:	46bd      	mov	sp, r7
 800bd62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd66:	4770      	bx	lr
 800bd68:	40023c14 	.word	0x40023c14

0800bd6c <FLASH_OB_BORConfig>:
  *            @arg OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *            @arg OB_BOR_OFF: Supply voltage ranges from 1.62 to 2.1 V
  * @retval None
  */
void FLASH_OB_BORConfig(uint8_t OB_BOR)
{
 800bd6c:	b480      	push	{r7}
 800bd6e:	b083      	sub	sp, #12
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	4603      	mov	r3, r0
 800bd74:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_OB_BOR(OB_BOR));

  /* Set the BOR Level */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS &= (~FLASH_OPTCR_BOR_LEV);
 800bd76:	4b0a      	ldr	r3, [pc, #40]	; (800bda0 <FLASH_OB_BORConfig+0x34>)
 800bd78:	4a09      	ldr	r2, [pc, #36]	; (800bda0 <FLASH_OB_BORConfig+0x34>)
 800bd7a:	7812      	ldrb	r2, [r2, #0]
 800bd7c:	b2d2      	uxtb	r2, r2
 800bd7e:	f022 020c 	bic.w	r2, r2, #12
 800bd82:	b2d2      	uxtb	r2, r2
 800bd84:	701a      	strb	r2, [r3, #0]
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= OB_BOR;
 800bd86:	4b06      	ldr	r3, [pc, #24]	; (800bda0 <FLASH_OB_BORConfig+0x34>)
 800bd88:	4a05      	ldr	r2, [pc, #20]	; (800bda0 <FLASH_OB_BORConfig+0x34>)
 800bd8a:	7812      	ldrb	r2, [r2, #0]
 800bd8c:	b2d1      	uxtb	r1, r2
 800bd8e:	79fa      	ldrb	r2, [r7, #7]
 800bd90:	430a      	orrs	r2, r1
 800bd92:	b2d2      	uxtb	r2, r2
 800bd94:	701a      	strb	r2, [r3, #0]

}
 800bd96:	370c      	adds	r7, #12
 800bd98:	46bd      	mov	sp, r7
 800bd9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd9e:	4770      	bx	lr
 800bda0:	40023c14 	.word	0x40023c14

0800bda4 <FLASH_OB_Launch>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_OB_Launch(void)
{
 800bda4:	b580      	push	{r7, lr}
 800bda6:	b082      	sub	sp, #8
 800bda8:	af00      	add	r7, sp, #0
  FLASH_Status status = FLASH_COMPLETE;
 800bdaa:	2309      	movs	r3, #9
 800bdac:	71fb      	strb	r3, [r7, #7]

  /* Set the OPTSTRT bit in OPTCR register */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= FLASH_OPTCR_OPTSTRT;
 800bdae:	4b08      	ldr	r3, [pc, #32]	; (800bdd0 <FLASH_OB_Launch+0x2c>)
 800bdb0:	4a07      	ldr	r2, [pc, #28]	; (800bdd0 <FLASH_OB_Launch+0x2c>)
 800bdb2:	7812      	ldrb	r2, [r2, #0]
 800bdb4:	b2d2      	uxtb	r2, r2
 800bdb6:	f042 0202 	orr.w	r2, r2, #2
 800bdba:	b2d2      	uxtb	r2, r2
 800bdbc:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 800bdbe:	f000 f8f3 	bl	800bfa8 <FLASH_WaitForLastOperation>
 800bdc2:	4603      	mov	r3, r0
 800bdc4:	71fb      	strb	r3, [r7, #7]

  return status;
 800bdc6:	79fb      	ldrb	r3, [r7, #7]
}
 800bdc8:	4618      	mov	r0, r3
 800bdca:	3708      	adds	r7, #8
 800bdcc:	46bd      	mov	sp, r7
 800bdce:	bd80      	pop	{r7, pc}
 800bdd0:	40023c14 	.word	0x40023c14

0800bdd4 <FLASH_OB_GetUser>:
  * @param  None
  * @retval The FLASH User Option Bytes values: IWDG_SW(Bit0), RST_STOP(Bit1)
  *         and RST_STDBY(Bit2).
  */
uint8_t FLASH_OB_GetUser(void)
{
 800bdd4:	b480      	push	{r7}
 800bdd6:	af00      	add	r7, sp, #0
  /* Return the User Option Byte */
  return (uint8_t)(FLASH->OPTCR >> 5);
 800bdd8:	4b04      	ldr	r3, [pc, #16]	; (800bdec <FLASH_OB_GetUser+0x18>)
 800bdda:	695b      	ldr	r3, [r3, #20]
 800bddc:	095b      	lsrs	r3, r3, #5
 800bdde:	b2db      	uxtb	r3, r3
}
 800bde0:	4618      	mov	r0, r3
 800bde2:	46bd      	mov	sp, r7
 800bde4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde8:	4770      	bx	lr
 800bdea:	bf00      	nop
 800bdec:	40023c00 	.word	0x40023c00

0800bdf0 <FLASH_OB_GetWRP>:
  * @brief  Returns the FLASH Write Protection Option Bytes value.
  * @param  None
  * @retval The FLASH Write Protection  Option Bytes value
  */
uint16_t FLASH_OB_GetWRP(void)
{
 800bdf0:	b480      	push	{r7}
 800bdf2:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
 800bdf4:	4b03      	ldr	r3, [pc, #12]	; (800be04 <FLASH_OB_GetWRP+0x14>)
 800bdf6:	881b      	ldrh	r3, [r3, #0]
 800bdf8:	b29b      	uxth	r3, r3
}
 800bdfa:	4618      	mov	r0, r3
 800bdfc:	46bd      	mov	sp, r7
 800bdfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be02:	4770      	bx	lr
 800be04:	40023c16 	.word	0x40023c16

0800be08 <FLASH_OB_GetWRP1>:
  *   
  * @param  None
  * @retval The FLASH Write Protection  Option Bytes value
  */
uint16_t FLASH_OB_GetWRP1(void)
{
 800be08:	b480      	push	{r7}
 800be0a:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return (*(__IO uint16_t *)(OPTCR1_BYTE2_ADDRESS));
 800be0c:	4b03      	ldr	r3, [pc, #12]	; (800be1c <FLASH_OB_GetWRP1+0x14>)
 800be0e:	881b      	ldrh	r3, [r3, #0]
 800be10:	b29b      	uxth	r3, r3
}
 800be12:	4618      	mov	r0, r3
 800be14:	46bd      	mov	sp, r7
 800be16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be1a:	4770      	bx	lr
 800be1c:	40023c1a 	.word	0x40023c1a

0800be20 <FLASH_OB_GetPCROP>:
  *   
  * @param  None
  * @retval The FLASH PC Read/Write Protection Option Bytes value
  */
uint16_t FLASH_OB_GetPCROP(void)
{
 800be20:	b480      	push	{r7}
 800be22:	af00      	add	r7, sp, #0
  /* Return the FLASH PC Read/write protection Register value */
  return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
 800be24:	4b03      	ldr	r3, [pc, #12]	; (800be34 <FLASH_OB_GetPCROP+0x14>)
 800be26:	881b      	ldrh	r3, [r3, #0]
 800be28:	b29b      	uxth	r3, r3
}
 800be2a:	4618      	mov	r0, r3
 800be2c:	46bd      	mov	sp, r7
 800be2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be32:	4770      	bx	lr
 800be34:	40023c16 	.word	0x40023c16

0800be38 <FLASH_OB_GetPCROP1>:
  *     
  * @param  None
  * @retval The FLASH PC Read/Write Protection Option Bytes value
  */
uint16_t FLASH_OB_GetPCROP1(void)
{
 800be38:	b480      	push	{r7}
 800be3a:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return (*(__IO uint16_t *)(OPTCR1_BYTE2_ADDRESS));
 800be3c:	4b03      	ldr	r3, [pc, #12]	; (800be4c <FLASH_OB_GetPCROP1+0x14>)
 800be3e:	881b      	ldrh	r3, [r3, #0]
 800be40:	b29b      	uxth	r3, r3
}
 800be42:	4618      	mov	r0, r3
 800be44:	46bd      	mov	sp, r7
 800be46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be4a:	4770      	bx	lr
 800be4c:	40023c1a 	.word	0x40023c1a

0800be50 <FLASH_OB_GetRDP>:
  * @retval FLASH ReadOut Protection Status:
  *           - SET, when OB_RDP_Level_1 or OB_RDP_Level_2 is set
  *           - RESET, when OB_RDP_Level_0 is set
  */
FlagStatus FLASH_OB_GetRDP(void)
{
 800be50:	b480      	push	{r7}
 800be52:	b083      	sub	sp, #12
 800be54:	af00      	add	r7, sp, #0
  FlagStatus readstatus = RESET;
 800be56:	2300      	movs	r3, #0
 800be58:	71fb      	strb	r3, [r7, #7]

  if ((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS) != (uint8_t)OB_RDP_Level_0))
 800be5a:	4b08      	ldr	r3, [pc, #32]	; (800be7c <FLASH_OB_GetRDP+0x2c>)
 800be5c:	781b      	ldrb	r3, [r3, #0]
 800be5e:	b2db      	uxtb	r3, r3
 800be60:	2baa      	cmp	r3, #170	; 0xaa
 800be62:	d002      	beq.n	800be6a <FLASH_OB_GetRDP+0x1a>
  {
    readstatus = SET;
 800be64:	2301      	movs	r3, #1
 800be66:	71fb      	strb	r3, [r7, #7]
 800be68:	e001      	b.n	800be6e <FLASH_OB_GetRDP+0x1e>
  }
  else
  {
    readstatus = RESET;
 800be6a:	2300      	movs	r3, #0
 800be6c:	71fb      	strb	r3, [r7, #7]
  }
  return readstatus;
 800be6e:	79fb      	ldrb	r3, [r7, #7]
}
 800be70:	4618      	mov	r0, r3
 800be72:	370c      	adds	r7, #12
 800be74:	46bd      	mov	sp, r7
 800be76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be7a:	4770      	bx	lr
 800be7c:	40023c15 	.word	0x40023c15

0800be80 <FLASH_OB_GetBOR>:
  *           - OB_BOR_LEVEL2: Supply voltage ranges from 2.4 to 2.7 V
  *           - OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *           - OB_BOR_OFF   : Supply voltage ranges from 1.62 to 2.1 V  
  */
uint8_t FLASH_OB_GetBOR(void)
{
 800be80:	b480      	push	{r7}
 800be82:	af00      	add	r7, sp, #0
  /* Return the FLASH BOR level */
  return (uint8_t)(*(__IO uint8_t *)(OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0C);
 800be84:	4b05      	ldr	r3, [pc, #20]	; (800be9c <FLASH_OB_GetBOR+0x1c>)
 800be86:	781b      	ldrb	r3, [r3, #0]
 800be88:	b2db      	uxtb	r3, r3
 800be8a:	f003 030c 	and.w	r3, r3, #12
 800be8e:	b2db      	uxtb	r3, r3
}
 800be90:	4618      	mov	r0, r3
 800be92:	46bd      	mov	sp, r7
 800be94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be98:	4770      	bx	lr
 800be9a:	bf00      	nop
 800be9c:	40023c14 	.word	0x40023c14

0800bea0 <FLASH_ITConfig>:
  *            @arg FLASH_IT_ERR: FLASH Error Interrupt
  *            @arg FLASH_IT_EOP: FLASH end of operation Interrupt
  * @retval None 
  */
void FLASH_ITConfig(uint32_t FLASH_IT, FunctionalState NewState)
{
 800bea0:	b480      	push	{r7}
 800bea2:	b083      	sub	sp, #12
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	6078      	str	r0, [r7, #4]
 800bea8:	460b      	mov	r3, r1
 800beaa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_IT(FLASH_IT)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if(NewState != DISABLE)
 800beac:	78fb      	ldrb	r3, [r7, #3]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d006      	beq.n	800bec0 <FLASH_ITConfig+0x20>
  {
    /* Enable the interrupt sources */
    FLASH->CR |= FLASH_IT;
 800beb2:	4b09      	ldr	r3, [pc, #36]	; (800bed8 <FLASH_ITConfig+0x38>)
 800beb4:	4a08      	ldr	r2, [pc, #32]	; (800bed8 <FLASH_ITConfig+0x38>)
 800beb6:	6911      	ldr	r1, [r2, #16]
 800beb8:	687a      	ldr	r2, [r7, #4]
 800beba:	430a      	orrs	r2, r1
 800bebc:	611a      	str	r2, [r3, #16]
 800bebe:	e006      	b.n	800bece <FLASH_ITConfig+0x2e>
  }
  else
  {
    /* Disable the interrupt sources */
    FLASH->CR &= ~(uint32_t)FLASH_IT;
 800bec0:	4b05      	ldr	r3, [pc, #20]	; (800bed8 <FLASH_ITConfig+0x38>)
 800bec2:	4a05      	ldr	r2, [pc, #20]	; (800bed8 <FLASH_ITConfig+0x38>)
 800bec4:	6911      	ldr	r1, [r2, #16]
 800bec6:	687a      	ldr	r2, [r7, #4]
 800bec8:	43d2      	mvns	r2, r2
 800beca:	400a      	ands	r2, r1
 800becc:	611a      	str	r2, [r3, #16]
  }
}
 800bece:	370c      	adds	r7, #12
 800bed0:	46bd      	mov	sp, r7
 800bed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed6:	4770      	bx	lr
 800bed8:	40023c00 	.word	0x40023c00

0800bedc <FLASH_GetFlagStatus>:
  *            @arg FLASH_FLAG_RDERR: FLASH (PCROP) Read Protection error flag (STM32F42/43xxx and STM32F401xx devices) 
  *            @arg FLASH_FLAG_BSY: FLASH Busy flag
  * @retval The new state of FLASH_FLAG (SET or RESET).
  */
FlagStatus FLASH_GetFlagStatus(uint32_t FLASH_FLAG)
{
 800bedc:	b480      	push	{r7}
 800bede:	b085      	sub	sp, #20
 800bee0:	af00      	add	r7, sp, #0
 800bee2:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 800bee4:	2300      	movs	r3, #0
 800bee6:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_FLASH_GET_FLAG(FLASH_FLAG));

  if((FLASH->SR & FLASH_FLAG) != (uint32_t)RESET)
 800bee8:	4b08      	ldr	r3, [pc, #32]	; (800bf0c <FLASH_GetFlagStatus+0x30>)
 800beea:	68da      	ldr	r2, [r3, #12]
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	4013      	ands	r3, r2
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d002      	beq.n	800befa <FLASH_GetFlagStatus+0x1e>
  {
    bitstatus = SET;
 800bef4:	2301      	movs	r3, #1
 800bef6:	73fb      	strb	r3, [r7, #15]
 800bef8:	e001      	b.n	800befe <FLASH_GetFlagStatus+0x22>
  }
  else
  {
    bitstatus = RESET;
 800befa:	2300      	movs	r3, #0
 800befc:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the new state of FLASH_FLAG (SET or RESET) */
  return bitstatus; 
 800befe:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf00:	4618      	mov	r0, r3
 800bf02:	3714      	adds	r7, #20
 800bf04:	46bd      	mov	sp, r7
 800bf06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf0a:	4770      	bx	lr
 800bf0c:	40023c00 	.word	0x40023c00

0800bf10 <FLASH_ClearFlag>:
  *            @arg FLASH_FLAG_PGSERR: FLASH Programming Sequence error flag
  *            @arg FLASH_FLAG_RDERR: FLASH Read Protection error flag (STM32F42/43xxx and STM32F401xx devices)   
  * @retval None
  */
void FLASH_ClearFlag(uint32_t FLASH_FLAG)
{
 800bf10:	b480      	push	{r7}
 800bf12:	b083      	sub	sp, #12
 800bf14:	af00      	add	r7, sp, #0
 800bf16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_CLEAR_FLAG(FLASH_FLAG));
  
  /* Clear the flags */
  FLASH->SR = FLASH_FLAG;
 800bf18:	4b03      	ldr	r3, [pc, #12]	; (800bf28 <FLASH_ClearFlag+0x18>)
 800bf1a:	687a      	ldr	r2, [r7, #4]
 800bf1c:	60da      	str	r2, [r3, #12]
}
 800bf1e:	370c      	adds	r7, #12
 800bf20:	46bd      	mov	sp, r7
 800bf22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf26:	4770      	bx	lr
 800bf28:	40023c00 	.word	0x40023c00

0800bf2c <FLASH_GetStatus>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_RD, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_GetStatus(void)
{
 800bf2c:	b480      	push	{r7}
 800bf2e:	b083      	sub	sp, #12
 800bf30:	af00      	add	r7, sp, #0
  FLASH_Status flashstatus = FLASH_COMPLETE;
 800bf32:	2309      	movs	r3, #9
 800bf34:	71fb      	strb	r3, [r7, #7]
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 800bf36:	4b1b      	ldr	r3, [pc, #108]	; (800bfa4 <FLASH_GetStatus+0x78>)
 800bf38:	68db      	ldr	r3, [r3, #12]
 800bf3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d002      	beq.n	800bf48 <FLASH_GetStatus+0x1c>
  {
    flashstatus = FLASH_BUSY;
 800bf42:	2301      	movs	r3, #1
 800bf44:	71fb      	strb	r3, [r7, #7]
 800bf46:	e025      	b.n	800bf94 <FLASH_GetStatus+0x68>
  }
  else 
  {  
    if((FLASH->SR & FLASH_FLAG_WRPERR) != (uint32_t)0x00)
 800bf48:	4b16      	ldr	r3, [pc, #88]	; (800bfa4 <FLASH_GetStatus+0x78>)
 800bf4a:	68db      	ldr	r3, [r3, #12]
 800bf4c:	f003 0310 	and.w	r3, r3, #16
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d002      	beq.n	800bf5a <FLASH_GetStatus+0x2e>
    { 
      flashstatus = FLASH_ERROR_WRP;
 800bf54:	2306      	movs	r3, #6
 800bf56:	71fb      	strb	r3, [r7, #7]
 800bf58:	e01c      	b.n	800bf94 <FLASH_GetStatus+0x68>
    }
    else
    {
      if((FLASH->SR & FLASH_FLAG_RDERR) != (uint32_t)0x00)
 800bf5a:	4b12      	ldr	r3, [pc, #72]	; (800bfa4 <FLASH_GetStatus+0x78>)
 800bf5c:	68db      	ldr	r3, [r3, #12]
 800bf5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d002      	beq.n	800bf6c <FLASH_GetStatus+0x40>
      { 
        flashstatus = FLASH_ERROR_RD;
 800bf66:	2302      	movs	r3, #2
 800bf68:	71fb      	strb	r3, [r7, #7]
 800bf6a:	e013      	b.n	800bf94 <FLASH_GetStatus+0x68>
      } 
      else 
      {
        if((FLASH->SR & (uint32_t)0xEF) != (uint32_t)0x00)
 800bf6c:	4b0d      	ldr	r3, [pc, #52]	; (800bfa4 <FLASH_GetStatus+0x78>)
 800bf6e:	68db      	ldr	r3, [r3, #12]
 800bf70:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d002      	beq.n	800bf7e <FLASH_GetStatus+0x52>
        {
          flashstatus = FLASH_ERROR_PROGRAM; 
 800bf78:	2307      	movs	r3, #7
 800bf7a:	71fb      	strb	r3, [r7, #7]
 800bf7c:	e00a      	b.n	800bf94 <FLASH_GetStatus+0x68>
        }
        else
        {
          if((FLASH->SR & FLASH_FLAG_OPERR) != (uint32_t)0x00)
 800bf7e:	4b09      	ldr	r3, [pc, #36]	; (800bfa4 <FLASH_GetStatus+0x78>)
 800bf80:	68db      	ldr	r3, [r3, #12]
 800bf82:	f003 0302 	and.w	r3, r3, #2
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d002      	beq.n	800bf90 <FLASH_GetStatus+0x64>
          {
            flashstatus = FLASH_ERROR_OPERATION;
 800bf8a:	2308      	movs	r3, #8
 800bf8c:	71fb      	strb	r3, [r7, #7]
 800bf8e:	e001      	b.n	800bf94 <FLASH_GetStatus+0x68>
          }
          else
          {
            flashstatus = FLASH_COMPLETE;
 800bf90:	2309      	movs	r3, #9
 800bf92:	71fb      	strb	r3, [r7, #7]
        }
      }
    }
  }
  /* Return the FLASH Status */
  return flashstatus;
 800bf94:	79fb      	ldrb	r3, [r7, #7]
}
 800bf96:	4618      	mov	r0, r3
 800bf98:	370c      	adds	r7, #12
 800bf9a:	46bd      	mov	sp, r7
 800bf9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa0:	4770      	bx	lr
 800bfa2:	bf00      	nop
 800bfa4:	40023c00 	.word	0x40023c00

0800bfa8 <FLASH_WaitForLastOperation>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_WaitForLastOperation(void)
{ 
 800bfa8:	b580      	push	{r7, lr}
 800bfaa:	b082      	sub	sp, #8
 800bfac:	af00      	add	r7, sp, #0
  __IO FLASH_Status status = FLASH_COMPLETE;
 800bfae:	2309      	movs	r3, #9
 800bfb0:	71fb      	strb	r3, [r7, #7]
   
  /* Check for the FLASH Status */
  status = FLASH_GetStatus();
 800bfb2:	f7ff ffbb 	bl	800bf2c <FLASH_GetStatus>
 800bfb6:	4603      	mov	r3, r0
 800bfb8:	71fb      	strb	r3, [r7, #7]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while(status == FLASH_BUSY)
 800bfba:	e003      	b.n	800bfc4 <FLASH_WaitForLastOperation+0x1c>
  {
    status = FLASH_GetStatus();
 800bfbc:	f7ff ffb6 	bl	800bf2c <FLASH_GetStatus>
 800bfc0:	4603      	mov	r3, r0
 800bfc2:	71fb      	strb	r3, [r7, #7]
  status = FLASH_GetStatus();

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while(status == FLASH_BUSY)
 800bfc4:	79fb      	ldrb	r3, [r7, #7]
 800bfc6:	b2db      	uxtb	r3, r3
 800bfc8:	2b01      	cmp	r3, #1
 800bfca:	d0f7      	beq.n	800bfbc <FLASH_WaitForLastOperation+0x14>
  {
    status = FLASH_GetStatus();
  }
  /* Return the operation status */
  return status;
 800bfcc:	79fb      	ldrb	r3, [r7, #7]
 800bfce:	b2db      	uxtb	r3, r3
}
 800bfd0:	4618      	mov	r0, r3
 800bfd2:	3708      	adds	r7, #8
 800bfd4:	46bd      	mov	sp, r7
 800bfd6:	bd80      	pop	{r7, pc}

0800bfd8 <FMC_NORSRAMDeInit>:
  *            @arg FMC_Bank1_NORSRAM3: FMC Bank1 NOR/SRAM3 
  *            @arg FMC_Bank1_NORSRAM4: FMC Bank1 NOR/SRAM4 
  * @retval None
  */
void FMC_NORSRAMDeInit(uint32_t FMC_Bank)
{
 800bfd8:	b480      	push	{r7}
 800bfda:	b083      	sub	sp, #12
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_FMC_NORSRAM_BANK(FMC_Bank));
  
  /* FMC_Bank1_NORSRAM1 */
  if(FMC_Bank == FMC_Bank1_NORSRAM1)
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d107      	bne.n	800bff6 <FMC_NORSRAMDeInit+0x1e>
  {
    FMC_Bank1->BTCR[FMC_Bank] = 0x000030DB;    
 800bfe6:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 800bfea:	687a      	ldr	r2, [r7, #4]
 800bfec:	f243 01db 	movw	r1, #12507	; 0x30db
 800bff0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800bff4:	e006      	b.n	800c004 <FMC_NORSRAMDeInit+0x2c>
  }
  /* FMC_Bank1_NORSRAM2,  FMC_Bank1_NORSRAM3 or FMC_Bank1_NORSRAM4 */
  else
  {   
    FMC_Bank1->BTCR[FMC_Bank] = 0x000030D2; 
 800bff6:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 800bffa:	687a      	ldr	r2, [r7, #4]
 800bffc:	f243 01d2 	movw	r1, #12498	; 0x30d2
 800c000:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  FMC_Bank1->BTCR[FMC_Bank + 1] = 0x0FFFFFFF;
 800c004:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 800c008:	687a      	ldr	r2, [r7, #4]
 800c00a:	3201      	adds	r2, #1
 800c00c:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800c010:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  FMC_Bank1E->BWTR[FMC_Bank] = 0x0FFFFFFF;  
 800c014:	4b05      	ldr	r3, [pc, #20]	; (800c02c <FMC_NORSRAMDeInit+0x54>)
 800c016:	687a      	ldr	r2, [r7, #4]
 800c018:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800c01c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800c020:	370c      	adds	r7, #12
 800c022:	46bd      	mov	sp, r7
 800c024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c028:	4770      	bx	lr
 800c02a:	bf00      	nop
 800c02c:	a0000104 	.word	0xa0000104

0800c030 <FMC_NORSRAMInit>:
  *         that contains the configuration information for the FMC NOR/SRAM 
  *         specified Banks.                       
  * @retval None
  */
void FMC_NORSRAMInit(FMC_NORSRAMInitTypeDef* FMC_NORSRAMInitStruct)
{
 800c030:	b480      	push	{r7}
 800c032:	b085      	sub	sp, #20
 800c034:	af00      	add	r7, sp, #0
 800c036:	6078      	str	r0, [r7, #4]
  uint32_t tmpr = 0;
 800c038:	2300      	movs	r3, #0
 800c03a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FMC_CLK_DIV(FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision));
  assert_param(IS_FMC_DATA_LATENCY(FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AccessMode)); 
  
  /* NOR/SRAM Bank control register configuration */ 
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank] =   
 800c03c:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 800c040:	687a      	ldr	r2, [r7, #4]
 800c042:	6812      	ldr	r2, [r2, #0]
            (uint32_t)FMC_NORSRAMInitStruct->FMC_DataAddressMux |
 800c044:	6879      	ldr	r1, [r7, #4]
 800c046:	6848      	ldr	r0, [r1, #4]
            FMC_NORSRAMInitStruct->FMC_MemoryType |
 800c048:	6879      	ldr	r1, [r7, #4]
 800c04a:	6889      	ldr	r1, [r1, #8]
  assert_param(IS_FMC_DATA_LATENCY(FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AccessMode)); 
  
  /* NOR/SRAM Bank control register configuration */ 
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank] =   
            (uint32_t)FMC_NORSRAMInitStruct->FMC_DataAddressMux |
 800c04c:	4308      	orrs	r0, r1
            FMC_NORSRAMInitStruct->FMC_MemoryType |
            FMC_NORSRAMInitStruct->FMC_MemoryDataWidth |
 800c04e:	6879      	ldr	r1, [r7, #4]
 800c050:	68c9      	ldr	r1, [r1, #12]
  assert_param(IS_FMC_ACCESS_MODE(FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AccessMode)); 
  
  /* NOR/SRAM Bank control register configuration */ 
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank] =   
            (uint32_t)FMC_NORSRAMInitStruct->FMC_DataAddressMux |
            FMC_NORSRAMInitStruct->FMC_MemoryType |
 800c052:	4308      	orrs	r0, r1
            FMC_NORSRAMInitStruct->FMC_MemoryDataWidth |
            FMC_NORSRAMInitStruct->FMC_BurstAccessMode |
 800c054:	6879      	ldr	r1, [r7, #4]
 800c056:	6909      	ldr	r1, [r1, #16]
  
  /* NOR/SRAM Bank control register configuration */ 
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank] =   
            (uint32_t)FMC_NORSRAMInitStruct->FMC_DataAddressMux |
            FMC_NORSRAMInitStruct->FMC_MemoryType |
            FMC_NORSRAMInitStruct->FMC_MemoryDataWidth |
 800c058:	4308      	orrs	r0, r1
            FMC_NORSRAMInitStruct->FMC_BurstAccessMode |
            FMC_NORSRAMInitStruct->FMC_WaitSignalPolarity |
 800c05a:	6879      	ldr	r1, [r7, #4]
 800c05c:	6949      	ldr	r1, [r1, #20]
  /* NOR/SRAM Bank control register configuration */ 
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank] =   
            (uint32_t)FMC_NORSRAMInitStruct->FMC_DataAddressMux |
            FMC_NORSRAMInitStruct->FMC_MemoryType |
            FMC_NORSRAMInitStruct->FMC_MemoryDataWidth |
            FMC_NORSRAMInitStruct->FMC_BurstAccessMode |
 800c05e:	4308      	orrs	r0, r1
            FMC_NORSRAMInitStruct->FMC_WaitSignalPolarity |
            FMC_NORSRAMInitStruct->FMC_WrapMode |
 800c060:	6879      	ldr	r1, [r7, #4]
 800c062:	6989      	ldr	r1, [r1, #24]
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank] =   
            (uint32_t)FMC_NORSRAMInitStruct->FMC_DataAddressMux |
            FMC_NORSRAMInitStruct->FMC_MemoryType |
            FMC_NORSRAMInitStruct->FMC_MemoryDataWidth |
            FMC_NORSRAMInitStruct->FMC_BurstAccessMode |
            FMC_NORSRAMInitStruct->FMC_WaitSignalPolarity |
 800c064:	4308      	orrs	r0, r1
            FMC_NORSRAMInitStruct->FMC_WrapMode |
            FMC_NORSRAMInitStruct->FMC_WaitSignalActive |
 800c066:	6879      	ldr	r1, [r7, #4]
 800c068:	69c9      	ldr	r1, [r1, #28]
            (uint32_t)FMC_NORSRAMInitStruct->FMC_DataAddressMux |
            FMC_NORSRAMInitStruct->FMC_MemoryType |
            FMC_NORSRAMInitStruct->FMC_MemoryDataWidth |
            FMC_NORSRAMInitStruct->FMC_BurstAccessMode |
            FMC_NORSRAMInitStruct->FMC_WaitSignalPolarity |
            FMC_NORSRAMInitStruct->FMC_WrapMode |
 800c06a:	4308      	orrs	r0, r1
            FMC_NORSRAMInitStruct->FMC_WaitSignalActive |
            FMC_NORSRAMInitStruct->FMC_WriteOperation |
 800c06c:	6879      	ldr	r1, [r7, #4]
 800c06e:	6a09      	ldr	r1, [r1, #32]
            FMC_NORSRAMInitStruct->FMC_MemoryType |
            FMC_NORSRAMInitStruct->FMC_MemoryDataWidth |
            FMC_NORSRAMInitStruct->FMC_BurstAccessMode |
            FMC_NORSRAMInitStruct->FMC_WaitSignalPolarity |
            FMC_NORSRAMInitStruct->FMC_WrapMode |
            FMC_NORSRAMInitStruct->FMC_WaitSignalActive |
 800c070:	4308      	orrs	r0, r1
            FMC_NORSRAMInitStruct->FMC_WriteOperation |
            FMC_NORSRAMInitStruct->FMC_WaitSignal |
 800c072:	6879      	ldr	r1, [r7, #4]
 800c074:	6a49      	ldr	r1, [r1, #36]	; 0x24
            FMC_NORSRAMInitStruct->FMC_MemoryDataWidth |
            FMC_NORSRAMInitStruct->FMC_BurstAccessMode |
            FMC_NORSRAMInitStruct->FMC_WaitSignalPolarity |
            FMC_NORSRAMInitStruct->FMC_WrapMode |
            FMC_NORSRAMInitStruct->FMC_WaitSignalActive |
            FMC_NORSRAMInitStruct->FMC_WriteOperation |
 800c076:	4308      	orrs	r0, r1
            FMC_NORSRAMInitStruct->FMC_WaitSignal |
            FMC_NORSRAMInitStruct->FMC_ExtendedMode |
 800c078:	6879      	ldr	r1, [r7, #4]
 800c07a:	6a89      	ldr	r1, [r1, #40]	; 0x28
            FMC_NORSRAMInitStruct->FMC_BurstAccessMode |
            FMC_NORSRAMInitStruct->FMC_WaitSignalPolarity |
            FMC_NORSRAMInitStruct->FMC_WrapMode |
            FMC_NORSRAMInitStruct->FMC_WaitSignalActive |
            FMC_NORSRAMInitStruct->FMC_WriteOperation |
            FMC_NORSRAMInitStruct->FMC_WaitSignal |
 800c07c:	4308      	orrs	r0, r1
            FMC_NORSRAMInitStruct->FMC_ExtendedMode |
            FMC_NORSRAMInitStruct->FMC_AsynchronousWait |
 800c07e:	6879      	ldr	r1, [r7, #4]
 800c080:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
            FMC_NORSRAMInitStruct->FMC_WaitSignalPolarity |
            FMC_NORSRAMInitStruct->FMC_WrapMode |
            FMC_NORSRAMInitStruct->FMC_WaitSignalActive |
            FMC_NORSRAMInitStruct->FMC_WriteOperation |
            FMC_NORSRAMInitStruct->FMC_WaitSignal |
            FMC_NORSRAMInitStruct->FMC_ExtendedMode |
 800c082:	4308      	orrs	r0, r1
            FMC_NORSRAMInitStruct->FMC_AsynchronousWait |
            FMC_NORSRAMInitStruct->FMC_WriteBurst |
 800c084:	6879      	ldr	r1, [r7, #4]
 800c086:	6b09      	ldr	r1, [r1, #48]	; 0x30
            FMC_NORSRAMInitStruct->FMC_WrapMode |
            FMC_NORSRAMInitStruct->FMC_WaitSignalActive |
            FMC_NORSRAMInitStruct->FMC_WriteOperation |
            FMC_NORSRAMInitStruct->FMC_WaitSignal |
            FMC_NORSRAMInitStruct->FMC_ExtendedMode |
            FMC_NORSRAMInitStruct->FMC_AsynchronousWait |
 800c088:	4308      	orrs	r0, r1
            FMC_NORSRAMInitStruct->FMC_WriteBurst |
            FMC_NORSRAMInitStruct->FMC_ContinousClock;
 800c08a:	6879      	ldr	r1, [r7, #4]
 800c08c:	6b49      	ldr	r1, [r1, #52]	; 0x34
            FMC_NORSRAMInitStruct->FMC_WaitSignalActive |
            FMC_NORSRAMInitStruct->FMC_WriteOperation |
            FMC_NORSRAMInitStruct->FMC_WaitSignal |
            FMC_NORSRAMInitStruct->FMC_ExtendedMode |
            FMC_NORSRAMInitStruct->FMC_AsynchronousWait |
            FMC_NORSRAMInitStruct->FMC_WriteBurst |
 800c08e:	4301      	orrs	r1, r0
  assert_param(IS_FMC_CLK_DIV(FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision));
  assert_param(IS_FMC_DATA_LATENCY(FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AccessMode)); 
  
  /* NOR/SRAM Bank control register configuration */ 
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank] =   
 800c090:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            FMC_NORSRAMInitStruct->FMC_AsynchronousWait |
            FMC_NORSRAMInitStruct->FMC_WriteBurst |
            FMC_NORSRAMInitStruct->FMC_ContinousClock;

            
  if(FMC_NORSRAMInitStruct->FMC_MemoryType == FMC_MemoryType_NOR)
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	689b      	ldr	r3, [r3, #8]
 800c098:	2b08      	cmp	r3, #8
 800c09a:	d10d      	bne.n	800c0b8 <FMC_NORSRAMInit+0x88>
  {
    FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank] |= (uint32_t)BCR_FACCEN_SET;
 800c09c:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 800c0a0:	687a      	ldr	r2, [r7, #4]
 800c0a2:	6812      	ldr	r2, [r2, #0]
 800c0a4:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 800c0a8:	6878      	ldr	r0, [r7, #4]
 800c0aa:	6800      	ldr	r0, [r0, #0]
 800c0ac:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800c0b0:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 800c0b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  /* Configure Continuous clock feature when bank2..4 is used */
  if((FMC_NORSRAMInitStruct->FMC_ContinousClock == FMC_CClock_SyncAsync) && (FMC_NORSRAMInitStruct->FMC_Bank != FMC_Bank1_NORSRAM1))
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c0bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c0c0:	d124      	bne.n	800c10c <FMC_NORSRAMInit+0xdc>
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d020      	beq.n	800c10c <FMC_NORSRAMInit+0xdc>
  {
    tmpr = (uint32_t)((FMC_Bank1->BTCR[FMC_Bank1_NORSRAM1+1]) & ~(((uint32_t)0x0F) << 20));    
 800c0ca:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 800c0ce:	685b      	ldr	r3, [r3, #4]
 800c0d0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c0d4:	60fb      	str	r3, [r7, #12]
    
    FMC_Bank1->BTCR[FMC_Bank1_NORSRAM1]  |= FMC_NORSRAMInitStruct->FMC_ContinousClock;
 800c0d6:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 800c0da:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800c0de:	6811      	ldr	r1, [r2, #0]
 800c0e0:	687a      	ldr	r2, [r7, #4]
 800c0e2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800c0e4:	430a      	orrs	r2, r1
 800c0e6:	601a      	str	r2, [r3, #0]
    FMC_Bank1->BTCR[FMC_Bank1_NORSRAM1]  |= FMC_BurstAccessMode_Enable;
 800c0e8:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 800c0ec:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800c0f0:	6812      	ldr	r2, [r2, #0]
 800c0f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c0f6:	601a      	str	r2, [r3, #0]
    FMC_Bank1->BTCR[FMC_Bank1_NORSRAM1+1] = (uint32_t)(tmpr | (((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision)-1) << 20));
 800c0f8:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 800c0fc:	687a      	ldr	r2, [r7, #4]
 800c0fe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800c100:	6912      	ldr	r2, [r2, #16]
 800c102:	3a01      	subs	r2, #1
 800c104:	0511      	lsls	r1, r2, #20
 800c106:	68fa      	ldr	r2, [r7, #12]
 800c108:	430a      	orrs	r2, r1
 800c10a:	605a      	str	r2, [r3, #4]
  }
  
  /* NOR/SRAM Bank timing register configuration */
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank+1] =   
 800c10c:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 800c110:	687a      	ldr	r2, [r7, #4]
 800c112:	6812      	ldr	r2, [r2, #0]
 800c114:	3201      	adds	r2, #1
            (uint32_t)FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressSetupTime |
 800c116:	6879      	ldr	r1, [r7, #4]
 800c118:	6b89      	ldr	r1, [r1, #56]	; 0x38
 800c11a:	6808      	ldr	r0, [r1, #0]
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressHoldTime << 4) |
 800c11c:	6879      	ldr	r1, [r7, #4]
 800c11e:	6b89      	ldr	r1, [r1, #56]	; 0x38
 800c120:	6849      	ldr	r1, [r1, #4]
 800c122:	0109      	lsls	r1, r1, #4
    FMC_Bank1->BTCR[FMC_Bank1_NORSRAM1+1] = (uint32_t)(tmpr | (((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision)-1) << 20));
  }
  
  /* NOR/SRAM Bank timing register configuration */
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank+1] =   
            (uint32_t)FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressSetupTime |
 800c124:	4308      	orrs	r0, r1
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressHoldTime << 4) |
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataSetupTime << 8) |
 800c126:	6879      	ldr	r1, [r7, #4]
 800c128:	6b89      	ldr	r1, [r1, #56]	; 0x38
 800c12a:	6889      	ldr	r1, [r1, #8]
 800c12c:	0209      	lsls	r1, r1, #8
  }
  
  /* NOR/SRAM Bank timing register configuration */
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank+1] =   
            (uint32_t)FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressSetupTime |
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressHoldTime << 4) |
 800c12e:	4308      	orrs	r0, r1
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataSetupTime << 8) |
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_BusTurnAroundDuration << 16) |
 800c130:	6879      	ldr	r1, [r7, #4]
 800c132:	6b89      	ldr	r1, [r1, #56]	; 0x38
 800c134:	68c9      	ldr	r1, [r1, #12]
 800c136:	0409      	lsls	r1, r1, #16
  
  /* NOR/SRAM Bank timing register configuration */
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank+1] =   
            (uint32_t)FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressSetupTime |
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressHoldTime << 4) |
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataSetupTime << 8) |
 800c138:	4308      	orrs	r0, r1
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_BusTurnAroundDuration << 16) |
            ((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision) << 20) |
 800c13a:	6879      	ldr	r1, [r7, #4]
 800c13c:	6b89      	ldr	r1, [r1, #56]	; 0x38
 800c13e:	6909      	ldr	r1, [r1, #16]
 800c140:	0509      	lsls	r1, r1, #20
  /* NOR/SRAM Bank timing register configuration */
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank+1] =   
            (uint32_t)FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressSetupTime |
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressHoldTime << 4) |
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataSetupTime << 8) |
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_BusTurnAroundDuration << 16) |
 800c142:	4308      	orrs	r0, r1
            ((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision) << 20) |
            ((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataLatency) << 24) |
 800c144:	6879      	ldr	r1, [r7, #4]
 800c146:	6b89      	ldr	r1, [r1, #56]	; 0x38
 800c148:	6949      	ldr	r1, [r1, #20]
 800c14a:	0609      	lsls	r1, r1, #24
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank+1] =   
            (uint32_t)FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressSetupTime |
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressHoldTime << 4) |
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataSetupTime << 8) |
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_BusTurnAroundDuration << 16) |
            ((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision) << 20) |
 800c14c:	4308      	orrs	r0, r1
            ((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataLatency) << 24) |
             FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AccessMode;
 800c14e:	6879      	ldr	r1, [r7, #4]
 800c150:	6b89      	ldr	r1, [r1, #56]	; 0x38
 800c152:	6989      	ldr	r1, [r1, #24]
            (uint32_t)FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressSetupTime |
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressHoldTime << 4) |
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataSetupTime << 8) |
            (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_BusTurnAroundDuration << 16) |
            ((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision) << 20) |
            ((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataLatency) << 24) |
 800c154:	4301      	orrs	r1, r0
    FMC_Bank1->BTCR[FMC_Bank1_NORSRAM1]  |= FMC_BurstAccessMode_Enable;
    FMC_Bank1->BTCR[FMC_Bank1_NORSRAM1+1] = (uint32_t)(tmpr | (((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision)-1) << 20));
  }
  
  /* NOR/SRAM Bank timing register configuration */
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank+1] =   
 800c156:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            ((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision) << 20) |
            ((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataLatency) << 24) |
             FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AccessMode;
     
  /* NOR/SRAM Bank timing register for write configuration, if extended mode is used */
  if(FMC_NORSRAMInitStruct->FMC_ExtendedMode == FMC_ExtendedMode_Enable)
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c15e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c162:	d120      	bne.n	800c1a6 <FMC_NORSRAMInit+0x176>
    assert_param(IS_FMC_DATASETUP_TIME(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataSetupTime));
    assert_param(IS_FMC_CLK_DIV(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_CLKDivision));
    assert_param(IS_FMC_DATA_LATENCY(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataLatency));
    assert_param(IS_FMC_ACCESS_MODE(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AccessMode));
    
    FMC_Bank1E->BWTR[FMC_NORSRAMInitStruct->FMC_Bank] =   
 800c164:	4b16      	ldr	r3, [pc, #88]	; (800c1c0 <FMC_NORSRAMInit+0x190>)
 800c166:	687a      	ldr	r2, [r7, #4]
 800c168:	6812      	ldr	r2, [r2, #0]
               (uint32_t)FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressSetupTime |
 800c16a:	6879      	ldr	r1, [r7, #4]
 800c16c:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 800c16e:	6808      	ldr	r0, [r1, #0]
               (FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressHoldTime << 4 )|
 800c170:	6879      	ldr	r1, [r7, #4]
 800c172:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 800c174:	6849      	ldr	r1, [r1, #4]
 800c176:	0109      	lsls	r1, r1, #4
    assert_param(IS_FMC_CLK_DIV(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_CLKDivision));
    assert_param(IS_FMC_DATA_LATENCY(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataLatency));
    assert_param(IS_FMC_ACCESS_MODE(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AccessMode));
    
    FMC_Bank1E->BWTR[FMC_NORSRAMInitStruct->FMC_Bank] =   
               (uint32_t)FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressSetupTime |
 800c178:	4308      	orrs	r0, r1
               (FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressHoldTime << 4 )|
               (FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataSetupTime << 8) |
 800c17a:	6879      	ldr	r1, [r7, #4]
 800c17c:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 800c17e:	6889      	ldr	r1, [r1, #8]
 800c180:	0209      	lsls	r1, r1, #8
    assert_param(IS_FMC_DATA_LATENCY(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataLatency));
    assert_param(IS_FMC_ACCESS_MODE(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AccessMode));
    
    FMC_Bank1E->BWTR[FMC_NORSRAMInitStruct->FMC_Bank] =   
               (uint32_t)FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressSetupTime |
               (FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressHoldTime << 4 )|
 800c182:	4308      	orrs	r0, r1
               (FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataSetupTime << 8) |
               ((FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_CLKDivision) << 20) |
 800c184:	6879      	ldr	r1, [r7, #4]
 800c186:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 800c188:	6909      	ldr	r1, [r1, #16]
 800c18a:	0509      	lsls	r1, r1, #20
    assert_param(IS_FMC_ACCESS_MODE(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AccessMode));
    
    FMC_Bank1E->BWTR[FMC_NORSRAMInitStruct->FMC_Bank] =   
               (uint32_t)FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressSetupTime |
               (FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressHoldTime << 4 )|
               (FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataSetupTime << 8) |
 800c18c:	4308      	orrs	r0, r1
               ((FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_CLKDivision) << 20) |
               ((FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataLatency) << 24) |
 800c18e:	6879      	ldr	r1, [r7, #4]
 800c190:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 800c192:	6949      	ldr	r1, [r1, #20]
 800c194:	0609      	lsls	r1, r1, #24
    
    FMC_Bank1E->BWTR[FMC_NORSRAMInitStruct->FMC_Bank] =   
               (uint32_t)FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressSetupTime |
               (FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressHoldTime << 4 )|
               (FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataSetupTime << 8) |
               ((FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_CLKDivision) << 20) |
 800c196:	4308      	orrs	r0, r1
               ((FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataLatency) << 24) |
               FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AccessMode;
 800c198:	6879      	ldr	r1, [r7, #4]
 800c19a:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 800c19c:	6989      	ldr	r1, [r1, #24]
    FMC_Bank1E->BWTR[FMC_NORSRAMInitStruct->FMC_Bank] =   
               (uint32_t)FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressSetupTime |
               (FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressHoldTime << 4 )|
               (FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataSetupTime << 8) |
               ((FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_CLKDivision) << 20) |
               ((FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataLatency) << 24) |
 800c19e:	4301      	orrs	r1, r0
    assert_param(IS_FMC_DATASETUP_TIME(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataSetupTime));
    assert_param(IS_FMC_CLK_DIV(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_CLKDivision));
    assert_param(IS_FMC_DATA_LATENCY(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataLatency));
    assert_param(IS_FMC_ACCESS_MODE(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AccessMode));
    
    FMC_Bank1E->BWTR[FMC_NORSRAMInitStruct->FMC_Bank] =   
 800c1a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800c1a4:	e006      	b.n	800c1b4 <FMC_NORSRAMInit+0x184>
               ((FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataLatency) << 24) |
               FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AccessMode;
  }
  else
  {
    FMC_Bank1E->BWTR[FMC_NORSRAMInitStruct->FMC_Bank] = 0x0FFFFFFF;
 800c1a6:	4b06      	ldr	r3, [pc, #24]	; (800c1c0 <FMC_NORSRAMInit+0x190>)
 800c1a8:	687a      	ldr	r2, [r7, #4]
 800c1aa:	6812      	ldr	r2, [r2, #0]
 800c1ac:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800c1b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  
}
 800c1b4:	3714      	adds	r7, #20
 800c1b6:	46bd      	mov	sp, r7
 800c1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1bc:	4770      	bx	lr
 800c1be:	bf00      	nop
 800c1c0:	a0000104 	.word	0xa0000104

0800c1c4 <FMC_NORSRAMStructInit>:
  * @param  FMC_NORSRAMInitStruct: pointer to a FMC_NORSRAMInitTypeDef structure 
  *         which will be initialized.
  * @retval None
  */
void FMC_NORSRAMStructInit(FMC_NORSRAMInitTypeDef* FMC_NORSRAMInitStruct)
{  
 800c1c4:	b480      	push	{r7}
 800c1c6:	b083      	sub	sp, #12
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	6078      	str	r0, [r7, #4]
  /* Reset NOR/SRAM Init structure parameters values */
  FMC_NORSRAMInitStruct->FMC_Bank = FMC_Bank1_NORSRAM1;
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	2200      	movs	r2, #0
 800c1d0:	601a      	str	r2, [r3, #0]
  FMC_NORSRAMInitStruct->FMC_DataAddressMux = FMC_DataAddressMux_Enable;
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	2202      	movs	r2, #2
 800c1d6:	605a      	str	r2, [r3, #4]
  FMC_NORSRAMInitStruct->FMC_MemoryType = FMC_MemoryType_SRAM;
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	2200      	movs	r2, #0
 800c1dc:	609a      	str	r2, [r3, #8]
  FMC_NORSRAMInitStruct->FMC_MemoryDataWidth = FMC_NORSRAM_MemoryDataWidth_16b;
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	2210      	movs	r2, #16
 800c1e2:	60da      	str	r2, [r3, #12]
  FMC_NORSRAMInitStruct->FMC_BurstAccessMode = FMC_BurstAccessMode_Disable;
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	2200      	movs	r2, #0
 800c1e8:	611a      	str	r2, [r3, #16]
  FMC_NORSRAMInitStruct->FMC_AsynchronousWait = FMC_AsynchronousWait_Disable;
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	2200      	movs	r2, #0
 800c1ee:	62da      	str	r2, [r3, #44]	; 0x2c
  FMC_NORSRAMInitStruct->FMC_WaitSignalPolarity = FMC_WaitSignalPolarity_Low;
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	2200      	movs	r2, #0
 800c1f4:	615a      	str	r2, [r3, #20]
  FMC_NORSRAMInitStruct->FMC_WrapMode = FMC_WrapMode_Disable;
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	2200      	movs	r2, #0
 800c1fa:	619a      	str	r2, [r3, #24]
  FMC_NORSRAMInitStruct->FMC_WaitSignalActive = FMC_WaitSignalActive_BeforeWaitState;
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	2200      	movs	r2, #0
 800c200:	61da      	str	r2, [r3, #28]
  FMC_NORSRAMInitStruct->FMC_WriteOperation = FMC_WriteOperation_Enable;
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c208:	621a      	str	r2, [r3, #32]
  FMC_NORSRAMInitStruct->FMC_WaitSignal = FMC_WaitSignal_Enable;
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800c210:	625a      	str	r2, [r3, #36]	; 0x24
  FMC_NORSRAMInitStruct->FMC_ExtendedMode = FMC_ExtendedMode_Disable;
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	2200      	movs	r2, #0
 800c216:	629a      	str	r2, [r3, #40]	; 0x28
  FMC_NORSRAMInitStruct->FMC_WriteBurst = FMC_WriteBurst_Disable;
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	2200      	movs	r2, #0
 800c21c:	631a      	str	r2, [r3, #48]	; 0x30
  FMC_NORSRAMInitStruct->FMC_ContinousClock = FMC_CClock_SyncOnly;
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	2200      	movs	r2, #0
 800c222:	635a      	str	r2, [r3, #52]	; 0x34
  
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressSetupTime = 15;
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c228:	220f      	movs	r2, #15
 800c22a:	601a      	str	r2, [r3, #0]
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressHoldTime = 15;
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c230:	220f      	movs	r2, #15
 800c232:	605a      	str	r2, [r3, #4]
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataSetupTime = 255;
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c238:	22ff      	movs	r2, #255	; 0xff
 800c23a:	609a      	str	r2, [r3, #8]
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_BusTurnAroundDuration = 15;
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c240:	220f      	movs	r2, #15
 800c242:	60da      	str	r2, [r3, #12]
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision = 15;
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c248:	220f      	movs	r2, #15
 800c24a:	611a      	str	r2, [r3, #16]
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataLatency = 15;
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c250:	220f      	movs	r2, #15
 800c252:	615a      	str	r2, [r3, #20]
  FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AccessMode = FMC_AccessMode_A; 
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c258:	2200      	movs	r2, #0
 800c25a:	619a      	str	r2, [r3, #24]
  FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressSetupTime = 15;
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c260:	220f      	movs	r2, #15
 800c262:	601a      	str	r2, [r3, #0]
  FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressHoldTime = 15;
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c268:	220f      	movs	r2, #15
 800c26a:	605a      	str	r2, [r3, #4]
  FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataSetupTime = 255;
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c270:	22ff      	movs	r2, #255	; 0xff
 800c272:	609a      	str	r2, [r3, #8]
  FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_BusTurnAroundDuration = 15;
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c278:	220f      	movs	r2, #15
 800c27a:	60da      	str	r2, [r3, #12]
  FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_CLKDivision = 15;
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c280:	220f      	movs	r2, #15
 800c282:	611a      	str	r2, [r3, #16]
  FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataLatency = 15;
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c288:	220f      	movs	r2, #15
 800c28a:	615a      	str	r2, [r3, #20]
  FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AccessMode = FMC_AccessMode_A;
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c290:	2200      	movs	r2, #0
 800c292:	619a      	str	r2, [r3, #24]
}
 800c294:	370c      	adds	r7, #12
 800c296:	46bd      	mov	sp, r7
 800c298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c29c:	4770      	bx	lr
 800c29e:	bf00      	nop

0800c2a0 <FMC_NORSRAMCmd>:
  *            @arg FMC_Bank1_NORSRAM4: FMC Bank1 NOR/SRAM4 
  * @param  NewState: new state of the FMC_Bank. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FMC_NORSRAMCmd(uint32_t FMC_Bank, FunctionalState NewState)
{
 800c2a0:	b480      	push	{r7}
 800c2a2:	b083      	sub	sp, #12
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	6078      	str	r0, [r7, #4]
 800c2a8:	460b      	mov	r3, r1
 800c2aa:	70fb      	strb	r3, [r7, #3]
  assert_param(IS_FMC_NORSRAM_BANK(FMC_Bank));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800c2ac:	78fb      	ldrb	r3, [r7, #3]
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d00c      	beq.n	800c2cc <FMC_NORSRAMCmd+0x2c>
  {
    /* Enable the selected NOR/SRAM Bank by setting the PBKEN bit in the BCRx register */
    FMC_Bank1->BTCR[FMC_Bank] |= BCR_MBKEN_SET;
 800c2b2:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 800c2b6:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800c2ba:	6879      	ldr	r1, [r7, #4]
 800c2bc:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800c2c0:	f042 0101 	orr.w	r1, r2, #1
 800c2c4:	687a      	ldr	r2, [r7, #4]
 800c2c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800c2ca:	e00b      	b.n	800c2e4 <FMC_NORSRAMCmd+0x44>
  }
  else
  {
    /* Disable the selected NOR/SRAM Bank by clearing the PBKEN bit in the BCRx register */
    FMC_Bank1->BTCR[FMC_Bank] &= BCR_MBKEN_RESET;
 800c2cc:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800c2d0:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 800c2d4:	6879      	ldr	r1, [r7, #4]
 800c2d6:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800c2da:	4b05      	ldr	r3, [pc, #20]	; (800c2f0 <FMC_NORSRAMCmd+0x50>)
 800c2dc:	400b      	ands	r3, r1
 800c2de:	6879      	ldr	r1, [r7, #4]
 800c2e0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  }
}
 800c2e4:	370c      	adds	r7, #12
 800c2e6:	46bd      	mov	sp, r7
 800c2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ec:	4770      	bx	lr
 800c2ee:	bf00      	nop
 800c2f0:	000ffffe 	.word	0x000ffffe

0800c2f4 <FMC_NANDDeInit>:
  *            @arg FMC_Bank2_NAND: FMC Bank2 NAND 
  *            @arg FMC_Bank3_NAND: FMC Bank3 NAND 
  * @retval None
  */
void FMC_NANDDeInit(uint32_t FMC_Bank)
{
 800c2f4:	b480      	push	{r7}
 800c2f6:	b083      	sub	sp, #12
 800c2f8:	af00      	add	r7, sp, #0
 800c2fa:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_FMC_NAND_BANK(FMC_Bank));
  
  if(FMC_Bank == FMC_Bank2_NAND)
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	2b10      	cmp	r3, #16
 800c300:	d10e      	bne.n	800c320 <FMC_NANDDeInit+0x2c>
  {
    /* Set the FMC_Bank2 registers to their reset values */
    FMC_Bank2->PCR2 = 0x00000018;
 800c302:	4b11      	ldr	r3, [pc, #68]	; (800c348 <FMC_NANDDeInit+0x54>)
 800c304:	2218      	movs	r2, #24
 800c306:	601a      	str	r2, [r3, #0]
    FMC_Bank2->SR2 = 0x00000040;
 800c308:	4b0f      	ldr	r3, [pc, #60]	; (800c348 <FMC_NANDDeInit+0x54>)
 800c30a:	2240      	movs	r2, #64	; 0x40
 800c30c:	605a      	str	r2, [r3, #4]
    FMC_Bank2->PMEM2 = 0xFCFCFCFC;
 800c30e:	4b0e      	ldr	r3, [pc, #56]	; (800c348 <FMC_NANDDeInit+0x54>)
 800c310:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 800c314:	609a      	str	r2, [r3, #8]
    FMC_Bank2->PATT2 = 0xFCFCFCFC;  
 800c316:	4b0c      	ldr	r3, [pc, #48]	; (800c348 <FMC_NANDDeInit+0x54>)
 800c318:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 800c31c:	60da      	str	r2, [r3, #12]
 800c31e:	e00d      	b.n	800c33c <FMC_NANDDeInit+0x48>
  }
  /* FMC_Bank3_NAND */  
  else
  {
    /* Set the FMC_Bank3 registers to their reset values */
    FMC_Bank3->PCR3 = 0x00000018;
 800c320:	4b0a      	ldr	r3, [pc, #40]	; (800c34c <FMC_NANDDeInit+0x58>)
 800c322:	2218      	movs	r2, #24
 800c324:	601a      	str	r2, [r3, #0]
    FMC_Bank3->SR3 = 0x00000040;
 800c326:	4b09      	ldr	r3, [pc, #36]	; (800c34c <FMC_NANDDeInit+0x58>)
 800c328:	2240      	movs	r2, #64	; 0x40
 800c32a:	605a      	str	r2, [r3, #4]
    FMC_Bank3->PMEM3 = 0xFCFCFCFC;
 800c32c:	4b07      	ldr	r3, [pc, #28]	; (800c34c <FMC_NANDDeInit+0x58>)
 800c32e:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 800c332:	609a      	str	r2, [r3, #8]
    FMC_Bank3->PATT3 = 0xFCFCFCFC; 
 800c334:	4b05      	ldr	r3, [pc, #20]	; (800c34c <FMC_NANDDeInit+0x58>)
 800c336:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 800c33a:	60da      	str	r2, [r3, #12]
  }  
}
 800c33c:	370c      	adds	r7, #12
 800c33e:	46bd      	mov	sp, r7
 800c340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c344:	4770      	bx	lr
 800c346:	bf00      	nop
 800c348:	a0000060 	.word	0xa0000060
 800c34c:	a0000080 	.word	0xa0000080

0800c350 <FMC_NANDInit>:
  * @param  FMC_NANDInitStruct : pointer to a FMC_NANDInitTypeDef structure that
  *         contains the configuration information for the FMC NAND specified Banks.                       
  * @retval None
  */
void FMC_NANDInit(FMC_NANDInitTypeDef* FMC_NANDInitStruct)
{
 800c350:	b480      	push	{r7}
 800c352:	b087      	sub	sp, #28
 800c354:	af00      	add	r7, sp, #0
 800c356:	6078      	str	r0, [r7, #4]
  uint32_t tmppcr = 0x00000000, tmppmem = 0x00000000, tmppatt = 0x00000000; 
 800c358:	2300      	movs	r3, #0
 800c35a:	617b      	str	r3, [r7, #20]
 800c35c:	2300      	movs	r3, #0
 800c35e:	613b      	str	r3, [r7, #16]
 800c360:	2300      	movs	r3, #0
 800c362:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FMC_WAIT_TIME(FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime));
  assert_param(IS_FMC_HOLD_TIME(FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime));
  assert_param(IS_FMC_HIZ_TIME(FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime));
  
  /* Set the tmppcr value according to FMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FMC_NANDInitStruct->FMC_Waitfeature |
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	685a      	ldr	r2, [r3, #4]
            PCR_MEMORYTYPE_NAND |
            FMC_NANDInitStruct->FMC_MemoryDataWidth |
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	689b      	ldr	r3, [r3, #8]
  assert_param(IS_FMC_HOLD_TIME(FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime));
  assert_param(IS_FMC_HIZ_TIME(FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime));
  
  /* Set the tmppcr value according to FMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FMC_NANDInitStruct->FMC_Waitfeature |
            PCR_MEMORYTYPE_NAND |
 800c36c:	431a      	orrs	r2, r3
            FMC_NANDInitStruct->FMC_MemoryDataWidth |
            FMC_NANDInitStruct->FMC_ECC |
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	68db      	ldr	r3, [r3, #12]
  assert_param(IS_FMC_HIZ_TIME(FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime));
  
  /* Set the tmppcr value according to FMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FMC_NANDInitStruct->FMC_Waitfeature |
            PCR_MEMORYTYPE_NAND |
            FMC_NANDInitStruct->FMC_MemoryDataWidth |
 800c372:	431a      	orrs	r2, r3
            FMC_NANDInitStruct->FMC_ECC |
            FMC_NANDInitStruct->FMC_ECCPageSize |
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	691b      	ldr	r3, [r3, #16]
  
  /* Set the tmppcr value according to FMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FMC_NANDInitStruct->FMC_Waitfeature |
            PCR_MEMORYTYPE_NAND |
            FMC_NANDInitStruct->FMC_MemoryDataWidth |
            FMC_NANDInitStruct->FMC_ECC |
 800c378:	431a      	orrs	r2, r3
            FMC_NANDInitStruct->FMC_ECCPageSize |
            (FMC_NANDInitStruct->FMC_TCLRSetupTime << 9 )|
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	695b      	ldr	r3, [r3, #20]
 800c37e:	025b      	lsls	r3, r3, #9
  /* Set the tmppcr value according to FMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FMC_NANDInitStruct->FMC_Waitfeature |
            PCR_MEMORYTYPE_NAND |
            FMC_NANDInitStruct->FMC_MemoryDataWidth |
            FMC_NANDInitStruct->FMC_ECC |
            FMC_NANDInitStruct->FMC_ECCPageSize |
 800c380:	431a      	orrs	r2, r3
            (FMC_NANDInitStruct->FMC_TCLRSetupTime << 9 )|
            (FMC_NANDInitStruct->FMC_TARSetupTime << 13);
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	699b      	ldr	r3, [r3, #24]
 800c386:	035b      	lsls	r3, r3, #13
  tmppcr = (uint32_t)FMC_NANDInitStruct->FMC_Waitfeature |
            PCR_MEMORYTYPE_NAND |
            FMC_NANDInitStruct->FMC_MemoryDataWidth |
            FMC_NANDInitStruct->FMC_ECC |
            FMC_NANDInitStruct->FMC_ECCPageSize |
            (FMC_NANDInitStruct->FMC_TCLRSetupTime << 9 )|
 800c388:	4313      	orrs	r3, r2
  assert_param(IS_FMC_WAIT_TIME(FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime));
  assert_param(IS_FMC_HOLD_TIME(FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime));
  assert_param(IS_FMC_HIZ_TIME(FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime));
  
  /* Set the tmppcr value according to FMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FMC_NANDInitStruct->FMC_Waitfeature |
 800c38a:	f043 0308 	orr.w	r3, r3, #8
 800c38e:	617b      	str	r3, [r7, #20]
            FMC_NANDInitStruct->FMC_ECCPageSize |
            (FMC_NANDInitStruct->FMC_TCLRSetupTime << 9 )|
            (FMC_NANDInitStruct->FMC_TARSetupTime << 13);
            
  /* Set tmppmem value according to FMC_CommonSpaceTimingStructure parameters */
  tmppmem = (uint32_t)FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime |
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	69db      	ldr	r3, [r3, #28]
 800c394:	681a      	ldr	r2, [r3, #0]
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	69db      	ldr	r3, [r3, #28]
 800c39a:	685b      	ldr	r3, [r3, #4]
 800c39c:	021b      	lsls	r3, r3, #8
            FMC_NANDInitStruct->FMC_ECCPageSize |
            (FMC_NANDInitStruct->FMC_TCLRSetupTime << 9 )|
            (FMC_NANDInitStruct->FMC_TARSetupTime << 13);
            
  /* Set tmppmem value according to FMC_CommonSpaceTimingStructure parameters */
  tmppmem = (uint32_t)FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime |
 800c39e:	431a      	orrs	r2, r3
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	69db      	ldr	r3, [r3, #28]
 800c3a4:	689b      	ldr	r3, [r3, #8]
 800c3a6:	041b      	lsls	r3, r3, #16
            (FMC_NANDInitStruct->FMC_TCLRSetupTime << 9 )|
            (FMC_NANDInitStruct->FMC_TARSetupTime << 13);
            
  /* Set tmppmem value according to FMC_CommonSpaceTimingStructure parameters */
  tmppmem = (uint32_t)FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime |
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
 800c3a8:	431a      	orrs	r2, r3
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime << 24); 
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	69db      	ldr	r3, [r3, #28]
 800c3ae:	68db      	ldr	r3, [r3, #12]
 800c3b0:	061b      	lsls	r3, r3, #24
            FMC_NANDInitStruct->FMC_ECCPageSize |
            (FMC_NANDInitStruct->FMC_TCLRSetupTime << 9 )|
            (FMC_NANDInitStruct->FMC_TARSetupTime << 13);
            
  /* Set tmppmem value according to FMC_CommonSpaceTimingStructure parameters */
  tmppmem = (uint32_t)FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime |
 800c3b2:	4313      	orrs	r3, r2
 800c3b4:	613b      	str	r3, [r7, #16]
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime << 24); 
            
  /* Set tmppatt value according to FMC_AttributeSpaceTimingStructure parameters */
  tmppatt = (uint32_t)FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime |
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	6a1b      	ldr	r3, [r3, #32]
 800c3ba:	681a      	ldr	r2, [r3, #0]
            (FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime << 8) |
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	6a1b      	ldr	r3, [r3, #32]
 800c3c0:	685b      	ldr	r3, [r3, #4]
 800c3c2:	021b      	lsls	r3, r3, #8
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime << 24); 
            
  /* Set tmppatt value according to FMC_AttributeSpaceTimingStructure parameters */
  tmppatt = (uint32_t)FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime |
 800c3c4:	431a      	orrs	r2, r3
            (FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime << 8) |
            (FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime << 16)|
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	6a1b      	ldr	r3, [r3, #32]
 800c3ca:	689b      	ldr	r3, [r3, #8]
 800c3cc:	041b      	lsls	r3, r3, #16
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime << 24); 
            
  /* Set tmppatt value according to FMC_AttributeSpaceTimingStructure parameters */
  tmppatt = (uint32_t)FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime |
            (FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime << 8) |
 800c3ce:	431a      	orrs	r2, r3
            (FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime << 16)|
            (FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime << 24);
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	6a1b      	ldr	r3, [r3, #32]
 800c3d4:	68db      	ldr	r3, [r3, #12]
 800c3d6:	061b      	lsls	r3, r3, #24
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
            (FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime << 24); 
            
  /* Set tmppatt value according to FMC_AttributeSpaceTimingStructure parameters */
  tmppatt = (uint32_t)FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime |
 800c3d8:	4313      	orrs	r3, r2
 800c3da:	60fb      	str	r3, [r7, #12]
            (FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime << 8) |
            (FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime << 16)|
            (FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime << 24);
  
  if(FMC_NANDInitStruct->FMC_Bank == FMC_Bank2_NAND)
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	2b10      	cmp	r3, #16
 800c3e2:	d109      	bne.n	800c3f8 <FMC_NANDInit+0xa8>
  {
    /* FMC_Bank2_NAND registers configuration */
    FMC_Bank2->PCR2 = tmppcr;
 800c3e4:	4b0b      	ldr	r3, [pc, #44]	; (800c414 <FMC_NANDInit+0xc4>)
 800c3e6:	697a      	ldr	r2, [r7, #20]
 800c3e8:	601a      	str	r2, [r3, #0]
    FMC_Bank2->PMEM2 = tmppmem;
 800c3ea:	4b0a      	ldr	r3, [pc, #40]	; (800c414 <FMC_NANDInit+0xc4>)
 800c3ec:	693a      	ldr	r2, [r7, #16]
 800c3ee:	609a      	str	r2, [r3, #8]
    FMC_Bank2->PATT2 = tmppatt;
 800c3f0:	4b08      	ldr	r3, [pc, #32]	; (800c414 <FMC_NANDInit+0xc4>)
 800c3f2:	68fa      	ldr	r2, [r7, #12]
 800c3f4:	60da      	str	r2, [r3, #12]
 800c3f6:	e008      	b.n	800c40a <FMC_NANDInit+0xba>
  }
  else
  {
    /* FMC_Bank3_NAND registers configuration */
    FMC_Bank3->PCR3 = tmppcr;
 800c3f8:	4b07      	ldr	r3, [pc, #28]	; (800c418 <FMC_NANDInit+0xc8>)
 800c3fa:	697a      	ldr	r2, [r7, #20]
 800c3fc:	601a      	str	r2, [r3, #0]
    FMC_Bank3->PMEM3 = tmppmem;
 800c3fe:	4b06      	ldr	r3, [pc, #24]	; (800c418 <FMC_NANDInit+0xc8>)
 800c400:	693a      	ldr	r2, [r7, #16]
 800c402:	609a      	str	r2, [r3, #8]
    FMC_Bank3->PATT3 = tmppatt;
 800c404:	4b04      	ldr	r3, [pc, #16]	; (800c418 <FMC_NANDInit+0xc8>)
 800c406:	68fa      	ldr	r2, [r7, #12]
 800c408:	60da      	str	r2, [r3, #12]
  }
}
 800c40a:	371c      	adds	r7, #28
 800c40c:	46bd      	mov	sp, r7
 800c40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c412:	4770      	bx	lr
 800c414:	a0000060 	.word	0xa0000060
 800c418:	a0000080 	.word	0xa0000080

0800c41c <FMC_NANDStructInit>:
  * @param  FMC_NANDInitStruct: pointer to a FMC_NANDInitTypeDef structure which
  *         will be initialized.
  * @retval None
  */
void FMC_NANDStructInit(FMC_NANDInitTypeDef* FMC_NANDInitStruct)
{ 
 800c41c:	b480      	push	{r7}
 800c41e:	b083      	sub	sp, #12
 800c420:	af00      	add	r7, sp, #0
 800c422:	6078      	str	r0, [r7, #4]
  /* Reset NAND Init structure parameters values */
  FMC_NANDInitStruct->FMC_Bank = FMC_Bank2_NAND;
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	2210      	movs	r2, #16
 800c428:	601a      	str	r2, [r3, #0]
  FMC_NANDInitStruct->FMC_Waitfeature = FMC_Waitfeature_Disable;
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	2200      	movs	r2, #0
 800c42e:	605a      	str	r2, [r3, #4]
  FMC_NANDInitStruct->FMC_MemoryDataWidth = FMC_NAND_MemoryDataWidth_16b;
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	2210      	movs	r2, #16
 800c434:	609a      	str	r2, [r3, #8]
  FMC_NANDInitStruct->FMC_ECC = FMC_ECC_Disable;
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	2200      	movs	r2, #0
 800c43a:	60da      	str	r2, [r3, #12]
  FMC_NANDInitStruct->FMC_ECCPageSize = FMC_ECCPageSize_256Bytes;
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	2200      	movs	r2, #0
 800c440:	611a      	str	r2, [r3, #16]
  FMC_NANDInitStruct->FMC_TCLRSetupTime = 0x0;
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	2200      	movs	r2, #0
 800c446:	615a      	str	r2, [r3, #20]
  FMC_NANDInitStruct->FMC_TARSetupTime = 0x0;
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	2200      	movs	r2, #0
 800c44c:	619a      	str	r2, [r3, #24]
  FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime = 252;
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	69db      	ldr	r3, [r3, #28]
 800c452:	22fc      	movs	r2, #252	; 0xfc
 800c454:	601a      	str	r2, [r3, #0]
  FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime = 252;
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	69db      	ldr	r3, [r3, #28]
 800c45a:	22fc      	movs	r2, #252	; 0xfc
 800c45c:	605a      	str	r2, [r3, #4]
  FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime = 252;
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	69db      	ldr	r3, [r3, #28]
 800c462:	22fc      	movs	r2, #252	; 0xfc
 800c464:	609a      	str	r2, [r3, #8]
  FMC_NANDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime = 252;
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	69db      	ldr	r3, [r3, #28]
 800c46a:	22fc      	movs	r2, #252	; 0xfc
 800c46c:	60da      	str	r2, [r3, #12]
  FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime = 252;
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	6a1b      	ldr	r3, [r3, #32]
 800c472:	22fc      	movs	r2, #252	; 0xfc
 800c474:	601a      	str	r2, [r3, #0]
  FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime = 252;
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	6a1b      	ldr	r3, [r3, #32]
 800c47a:	22fc      	movs	r2, #252	; 0xfc
 800c47c:	605a      	str	r2, [r3, #4]
  FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime = 252;
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	6a1b      	ldr	r3, [r3, #32]
 800c482:	22fc      	movs	r2, #252	; 0xfc
 800c484:	609a      	str	r2, [r3, #8]
  FMC_NANDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime = 252;	  
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	6a1b      	ldr	r3, [r3, #32]
 800c48a:	22fc      	movs	r2, #252	; 0xfc
 800c48c:	60da      	str	r2, [r3, #12]
}
 800c48e:	370c      	adds	r7, #12
 800c490:	46bd      	mov	sp, r7
 800c492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c496:	4770      	bx	lr

0800c498 <FMC_NANDCmd>:
  *            @arg FMC_Bank3_NAND: FMC Bank3 NAND
  * @param  NewState: new state of the FMC_Bank. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FMC_NANDCmd(uint32_t FMC_Bank, FunctionalState NewState)
{
 800c498:	b480      	push	{r7}
 800c49a:	b083      	sub	sp, #12
 800c49c:	af00      	add	r7, sp, #0
 800c49e:	6078      	str	r0, [r7, #4]
 800c4a0:	460b      	mov	r3, r1
 800c4a2:	70fb      	strb	r3, [r7, #3]
  assert_param(IS_FMC_NAND_BANK(FMC_Bank));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800c4a4:	78fb      	ldrb	r3, [r7, #3]
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d010      	beq.n	800c4cc <FMC_NANDCmd+0x34>
  {
    /* Enable the selected NAND Bank by setting the PBKEN bit in the PCRx register */
    if(FMC_Bank == FMC_Bank2_NAND)
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	2b10      	cmp	r3, #16
 800c4ae:	d106      	bne.n	800c4be <FMC_NANDCmd+0x26>
    {
      FMC_Bank2->PCR2 |= PCR_PBKEN_SET;
 800c4b0:	4b11      	ldr	r3, [pc, #68]	; (800c4f8 <FMC_NANDCmd+0x60>)
 800c4b2:	4a11      	ldr	r2, [pc, #68]	; (800c4f8 <FMC_NANDCmd+0x60>)
 800c4b4:	6812      	ldr	r2, [r2, #0]
 800c4b6:	f042 0204 	orr.w	r2, r2, #4
 800c4ba:	601a      	str	r2, [r3, #0]
 800c4bc:	e016      	b.n	800c4ec <FMC_NANDCmd+0x54>
    }
    else
    {
      FMC_Bank3->PCR3 |= PCR_PBKEN_SET;
 800c4be:	4b0f      	ldr	r3, [pc, #60]	; (800c4fc <FMC_NANDCmd+0x64>)
 800c4c0:	4a0e      	ldr	r2, [pc, #56]	; (800c4fc <FMC_NANDCmd+0x64>)
 800c4c2:	6812      	ldr	r2, [r2, #0]
 800c4c4:	f042 0204 	orr.w	r2, r2, #4
 800c4c8:	601a      	str	r2, [r3, #0]
 800c4ca:	e00f      	b.n	800c4ec <FMC_NANDCmd+0x54>
    }
  }
  else
  {
    /* Disable the selected NAND Bank by clearing the PBKEN bit in the PCRx register */
    if(FMC_Bank == FMC_Bank2_NAND)
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	2b10      	cmp	r3, #16
 800c4d0:	d106      	bne.n	800c4e0 <FMC_NANDCmd+0x48>
    {
      FMC_Bank2->PCR2 &= PCR_PBKEN_RESET;
 800c4d2:	4a09      	ldr	r2, [pc, #36]	; (800c4f8 <FMC_NANDCmd+0x60>)
 800c4d4:	4b08      	ldr	r3, [pc, #32]	; (800c4f8 <FMC_NANDCmd+0x60>)
 800c4d6:	6819      	ldr	r1, [r3, #0]
 800c4d8:	4b09      	ldr	r3, [pc, #36]	; (800c500 <FMC_NANDCmd+0x68>)
 800c4da:	400b      	ands	r3, r1
 800c4dc:	6013      	str	r3, [r2, #0]
 800c4de:	e005      	b.n	800c4ec <FMC_NANDCmd+0x54>
    }
    else
    {
      FMC_Bank3->PCR3 &= PCR_PBKEN_RESET;
 800c4e0:	4a06      	ldr	r2, [pc, #24]	; (800c4fc <FMC_NANDCmd+0x64>)
 800c4e2:	4b06      	ldr	r3, [pc, #24]	; (800c4fc <FMC_NANDCmd+0x64>)
 800c4e4:	6819      	ldr	r1, [r3, #0]
 800c4e6:	4b06      	ldr	r3, [pc, #24]	; (800c500 <FMC_NANDCmd+0x68>)
 800c4e8:	400b      	ands	r3, r1
 800c4ea:	6013      	str	r3, [r2, #0]
    }
  }
}
 800c4ec:	370c      	adds	r7, #12
 800c4ee:	46bd      	mov	sp, r7
 800c4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f4:	4770      	bx	lr
 800c4f6:	bf00      	nop
 800c4f8:	a0000060 	.word	0xa0000060
 800c4fc:	a0000080 	.word	0xa0000080
 800c500:	000ffffb 	.word	0x000ffffb

0800c504 <FMC_NANDECCCmd>:
  * @param  NewState: new state of the FMC NAND ECC feature.  
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FMC_NANDECCCmd(uint32_t FMC_Bank, FunctionalState NewState)
{
 800c504:	b480      	push	{r7}
 800c506:	b083      	sub	sp, #12
 800c508:	af00      	add	r7, sp, #0
 800c50a:	6078      	str	r0, [r7, #4]
 800c50c:	460b      	mov	r3, r1
 800c50e:	70fb      	strb	r3, [r7, #3]
  assert_param(IS_FMC_NAND_BANK(FMC_Bank));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800c510:	78fb      	ldrb	r3, [r7, #3]
 800c512:	2b00      	cmp	r3, #0
 800c514:	d010      	beq.n	800c538 <FMC_NANDECCCmd+0x34>
  {
    /* Enable the selected NAND Bank ECC function by setting the ECCEN bit in the PCRx register */
    if(FMC_Bank == FMC_Bank2_NAND)
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	2b10      	cmp	r3, #16
 800c51a:	d106      	bne.n	800c52a <FMC_NANDECCCmd+0x26>
    {
      FMC_Bank2->PCR2 |= PCR_ECCEN_SET;
 800c51c:	4b11      	ldr	r3, [pc, #68]	; (800c564 <FMC_NANDECCCmd+0x60>)
 800c51e:	4a11      	ldr	r2, [pc, #68]	; (800c564 <FMC_NANDECCCmd+0x60>)
 800c520:	6812      	ldr	r2, [r2, #0]
 800c522:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c526:	601a      	str	r2, [r3, #0]
 800c528:	e016      	b.n	800c558 <FMC_NANDECCCmd+0x54>
    }
    else
    {
      FMC_Bank3->PCR3 |= PCR_ECCEN_SET;
 800c52a:	4b0f      	ldr	r3, [pc, #60]	; (800c568 <FMC_NANDECCCmd+0x64>)
 800c52c:	4a0e      	ldr	r2, [pc, #56]	; (800c568 <FMC_NANDECCCmd+0x64>)
 800c52e:	6812      	ldr	r2, [r2, #0]
 800c530:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c534:	601a      	str	r2, [r3, #0]
 800c536:	e00f      	b.n	800c558 <FMC_NANDECCCmd+0x54>
    }
  }
  else
  {
    /* Disable the selected NAND Bank ECC function by clearing the ECCEN bit in the PCRx register */
    if(FMC_Bank == FMC_Bank2_NAND)
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	2b10      	cmp	r3, #16
 800c53c:	d106      	bne.n	800c54c <FMC_NANDECCCmd+0x48>
    {
      FMC_Bank2->PCR2 &= PCR_ECCEN_RESET;
 800c53e:	4a09      	ldr	r2, [pc, #36]	; (800c564 <FMC_NANDECCCmd+0x60>)
 800c540:	4b08      	ldr	r3, [pc, #32]	; (800c564 <FMC_NANDECCCmd+0x60>)
 800c542:	6819      	ldr	r1, [r3, #0]
 800c544:	4b09      	ldr	r3, [pc, #36]	; (800c56c <FMC_NANDECCCmd+0x68>)
 800c546:	400b      	ands	r3, r1
 800c548:	6013      	str	r3, [r2, #0]
 800c54a:	e005      	b.n	800c558 <FMC_NANDECCCmd+0x54>
    }
    else
    {
      FMC_Bank3->PCR3 &= PCR_ECCEN_RESET;
 800c54c:	4a06      	ldr	r2, [pc, #24]	; (800c568 <FMC_NANDECCCmd+0x64>)
 800c54e:	4b06      	ldr	r3, [pc, #24]	; (800c568 <FMC_NANDECCCmd+0x64>)
 800c550:	6819      	ldr	r1, [r3, #0]
 800c552:	4b06      	ldr	r3, [pc, #24]	; (800c56c <FMC_NANDECCCmd+0x68>)
 800c554:	400b      	ands	r3, r1
 800c556:	6013      	str	r3, [r2, #0]
    }
  }
}
 800c558:	370c      	adds	r7, #12
 800c55a:	46bd      	mov	sp, r7
 800c55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c560:	4770      	bx	lr
 800c562:	bf00      	nop
 800c564:	a0000060 	.word	0xa0000060
 800c568:	a0000080 	.word	0xa0000080
 800c56c:	000fffbf 	.word	0x000fffbf

0800c570 <FMC_GetECC>:
  *            @arg FMC_Bank2_NAND: FMC Bank2 NAND 
  *            @arg FMC_Bank3_NAND: FMC Bank3 NAND
  * @retval The Error Correction Code (ECC) value.
  */
uint32_t FMC_GetECC(uint32_t FMC_Bank)
{
 800c570:	b480      	push	{r7}
 800c572:	b085      	sub	sp, #20
 800c574:	af00      	add	r7, sp, #0
 800c576:	6078      	str	r0, [r7, #4]
  uint32_t eccval = 0x00000000;
 800c578:	2300      	movs	r3, #0
 800c57a:	60fb      	str	r3, [r7, #12]
  
  if(FMC_Bank == FMC_Bank2_NAND)
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	2b10      	cmp	r3, #16
 800c580:	d103      	bne.n	800c58a <FMC_GetECC+0x1a>
  {
    /* Get the ECCR2 register value */
    eccval = FMC_Bank2->ECCR2;
 800c582:	4b07      	ldr	r3, [pc, #28]	; (800c5a0 <FMC_GetECC+0x30>)
 800c584:	695b      	ldr	r3, [r3, #20]
 800c586:	60fb      	str	r3, [r7, #12]
 800c588:	e002      	b.n	800c590 <FMC_GetECC+0x20>
  }
  else
  {
    /* Get the ECCR3 register value */
    eccval = FMC_Bank3->ECCR3;
 800c58a:	4b06      	ldr	r3, [pc, #24]	; (800c5a4 <FMC_GetECC+0x34>)
 800c58c:	695b      	ldr	r3, [r3, #20]
 800c58e:	60fb      	str	r3, [r7, #12]
  }
  /* Return the error correction code value */
  return(eccval);
 800c590:	68fb      	ldr	r3, [r7, #12]
}
 800c592:	4618      	mov	r0, r3
 800c594:	3714      	adds	r7, #20
 800c596:	46bd      	mov	sp, r7
 800c598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c59c:	4770      	bx	lr
 800c59e:	bf00      	nop
 800c5a0:	a0000060 	.word	0xa0000060
 800c5a4:	a0000080 	.word	0xa0000080

0800c5a8 <FMC_PCCARDDeInit>:
  * @brief  De-initializes the FMC PCCARD Bank registers to their default reset values.
  * @param  None                       
  * @retval None
  */
void FMC_PCCARDDeInit(void)
{
 800c5a8:	b480      	push	{r7}
 800c5aa:	af00      	add	r7, sp, #0
  /* Set the FMC_Bank4 registers to their reset values */
  FMC_Bank4->PCR4 = 0x00000018; 
 800c5ac:	4b0a      	ldr	r3, [pc, #40]	; (800c5d8 <FMC_PCCARDDeInit+0x30>)
 800c5ae:	2218      	movs	r2, #24
 800c5b0:	601a      	str	r2, [r3, #0]
  FMC_Bank4->SR4 = 0x00000000;	
 800c5b2:	4b09      	ldr	r3, [pc, #36]	; (800c5d8 <FMC_PCCARDDeInit+0x30>)
 800c5b4:	2200      	movs	r2, #0
 800c5b6:	605a      	str	r2, [r3, #4]
  FMC_Bank4->PMEM4 = 0xFCFCFCFC;
 800c5b8:	4b07      	ldr	r3, [pc, #28]	; (800c5d8 <FMC_PCCARDDeInit+0x30>)
 800c5ba:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 800c5be:	609a      	str	r2, [r3, #8]
  FMC_Bank4->PATT4 = 0xFCFCFCFC;
 800c5c0:	4b05      	ldr	r3, [pc, #20]	; (800c5d8 <FMC_PCCARDDeInit+0x30>)
 800c5c2:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 800c5c6:	60da      	str	r2, [r3, #12]
  FMC_Bank4->PIO4 = 0xFCFCFCFC;
 800c5c8:	4b03      	ldr	r3, [pc, #12]	; (800c5d8 <FMC_PCCARDDeInit+0x30>)
 800c5ca:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 800c5ce:	611a      	str	r2, [r3, #16]
}
 800c5d0:	46bd      	mov	sp, r7
 800c5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d6:	4770      	bx	lr
 800c5d8:	a00000a0 	.word	0xa00000a0

0800c5dc <FMC_PCCARDInit>:
  * @param  FMC_PCCARDInitStruct : pointer to a FMC_PCCARDInitTypeDef structure
  *         that contains the configuration information for the FMC PCCARD Bank.                       
  * @retval None
  */
void FMC_PCCARDInit(FMC_PCCARDInitTypeDef* FMC_PCCARDInitStruct)
{
 800c5dc:	b480      	push	{r7}
 800c5de:	b083      	sub	sp, #12
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	6078      	str	r0, [r7, #4]
  assert_param(IS_FMC_WAIT_TIME(FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_WaitSetupTime));
  assert_param(IS_FMC_HOLD_TIME(FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HoldSetupTime));
  assert_param(IS_FMC_HIZ_TIME(FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HiZSetupTime));
  
  /* Set the PCR4 register value according to FMC_PCCARDInitStruct parameters */
  FMC_Bank4->PCR4 = (uint32_t)FMC_PCCARDInitStruct->FMC_Waitfeature |
 800c5e4:	4b27      	ldr	r3, [pc, #156]	; (800c684 <FMC_PCCARDInit+0xa8>)
 800c5e6:	687a      	ldr	r2, [r7, #4]
 800c5e8:	6811      	ldr	r1, [r2, #0]
                     FMC_NAND_MemoryDataWidth_16b |  
                     (FMC_PCCARDInitStruct->FMC_TCLRSetupTime << 9) |
 800c5ea:	687a      	ldr	r2, [r7, #4]
 800c5ec:	6852      	ldr	r2, [r2, #4]
 800c5ee:	0252      	lsls	r2, r2, #9
  assert_param(IS_FMC_HOLD_TIME(FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HoldSetupTime));
  assert_param(IS_FMC_HIZ_TIME(FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HiZSetupTime));
  
  /* Set the PCR4 register value according to FMC_PCCARDInitStruct parameters */
  FMC_Bank4->PCR4 = (uint32_t)FMC_PCCARDInitStruct->FMC_Waitfeature |
                     FMC_NAND_MemoryDataWidth_16b |  
 800c5f0:	4311      	orrs	r1, r2
                     (FMC_PCCARDInitStruct->FMC_TCLRSetupTime << 9) |
                     (FMC_PCCARDInitStruct->FMC_TARSetupTime << 13);
 800c5f2:	687a      	ldr	r2, [r7, #4]
 800c5f4:	6892      	ldr	r2, [r2, #8]
 800c5f6:	0352      	lsls	r2, r2, #13
  assert_param(IS_FMC_HIZ_TIME(FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HiZSetupTime));
  
  /* Set the PCR4 register value according to FMC_PCCARDInitStruct parameters */
  FMC_Bank4->PCR4 = (uint32_t)FMC_PCCARDInitStruct->FMC_Waitfeature |
                     FMC_NAND_MemoryDataWidth_16b |  
                     (FMC_PCCARDInitStruct->FMC_TCLRSetupTime << 9) |
 800c5f8:	430a      	orrs	r2, r1
 800c5fa:	f042 0210 	orr.w	r2, r2, #16
  assert_param(IS_FMC_WAIT_TIME(FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_WaitSetupTime));
  assert_param(IS_FMC_HOLD_TIME(FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HoldSetupTime));
  assert_param(IS_FMC_HIZ_TIME(FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HiZSetupTime));
  
  /* Set the PCR4 register value according to FMC_PCCARDInitStruct parameters */
  FMC_Bank4->PCR4 = (uint32_t)FMC_PCCARDInitStruct->FMC_Waitfeature |
 800c5fe:	601a      	str	r2, [r3, #0]
                     FMC_NAND_MemoryDataWidth_16b |  
                     (FMC_PCCARDInitStruct->FMC_TCLRSetupTime << 9) |
                     (FMC_PCCARDInitStruct->FMC_TARSetupTime << 13);
            
  /* Set PMEM4 register value according to FMC_CommonSpaceTimingStructure parameters */
  FMC_Bank4->PMEM4 = (uint32_t)FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime |
 800c600:	4b20      	ldr	r3, [pc, #128]	; (800c684 <FMC_PCCARDInit+0xa8>)
 800c602:	687a      	ldr	r2, [r7, #4]
 800c604:	68d2      	ldr	r2, [r2, #12]
 800c606:	6811      	ldr	r1, [r2, #0]
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
 800c608:	687a      	ldr	r2, [r7, #4]
 800c60a:	68d2      	ldr	r2, [r2, #12]
 800c60c:	6852      	ldr	r2, [r2, #4]
 800c60e:	0212      	lsls	r2, r2, #8
                     FMC_NAND_MemoryDataWidth_16b |  
                     (FMC_PCCARDInitStruct->FMC_TCLRSetupTime << 9) |
                     (FMC_PCCARDInitStruct->FMC_TARSetupTime << 13);
            
  /* Set PMEM4 register value according to FMC_CommonSpaceTimingStructure parameters */
  FMC_Bank4->PMEM4 = (uint32_t)FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime |
 800c610:	4311      	orrs	r1, r2
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
 800c612:	687a      	ldr	r2, [r7, #4]
 800c614:	68d2      	ldr	r2, [r2, #12]
 800c616:	6892      	ldr	r2, [r2, #8]
 800c618:	0412      	lsls	r2, r2, #16
                     (FMC_PCCARDInitStruct->FMC_TCLRSetupTime << 9) |
                     (FMC_PCCARDInitStruct->FMC_TARSetupTime << 13);
            
  /* Set PMEM4 register value according to FMC_CommonSpaceTimingStructure parameters */
  FMC_Bank4->PMEM4 = (uint32_t)FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime |
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
 800c61a:	4311      	orrs	r1, r2
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime << 24); 
 800c61c:	687a      	ldr	r2, [r7, #4]
 800c61e:	68d2      	ldr	r2, [r2, #12]
 800c620:	68d2      	ldr	r2, [r2, #12]
 800c622:	0612      	lsls	r2, r2, #24
                     (FMC_PCCARDInitStruct->FMC_TARSetupTime << 13);
            
  /* Set PMEM4 register value according to FMC_CommonSpaceTimingStructure parameters */
  FMC_Bank4->PMEM4 = (uint32_t)FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime |
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
 800c624:	430a      	orrs	r2, r1
                     FMC_NAND_MemoryDataWidth_16b |  
                     (FMC_PCCARDInitStruct->FMC_TCLRSetupTime << 9) |
                     (FMC_PCCARDInitStruct->FMC_TARSetupTime << 13);
            
  /* Set PMEM4 register value according to FMC_CommonSpaceTimingStructure parameters */
  FMC_Bank4->PMEM4 = (uint32_t)FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime |
 800c626:	609a      	str	r2, [r3, #8]
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime << 24); 
            
  /* Set PATT4 register value according to FMC_AttributeSpaceTimingStructure parameters */
  FMC_Bank4->PATT4 = (uint32_t)FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime |
 800c628:	4b16      	ldr	r3, [pc, #88]	; (800c684 <FMC_PCCARDInit+0xa8>)
 800c62a:	687a      	ldr	r2, [r7, #4]
 800c62c:	6912      	ldr	r2, [r2, #16]
 800c62e:	6811      	ldr	r1, [r2, #0]
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime << 8) |
 800c630:	687a      	ldr	r2, [r7, #4]
 800c632:	6912      	ldr	r2, [r2, #16]
 800c634:	6852      	ldr	r2, [r2, #4]
 800c636:	0212      	lsls	r2, r2, #8
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime << 24); 
            
  /* Set PATT4 register value according to FMC_AttributeSpaceTimingStructure parameters */
  FMC_Bank4->PATT4 = (uint32_t)FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime |
 800c638:	4311      	orrs	r1, r2
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime << 8) |
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime << 16)|
 800c63a:	687a      	ldr	r2, [r7, #4]
 800c63c:	6912      	ldr	r2, [r2, #16]
 800c63e:	6892      	ldr	r2, [r2, #8]
 800c640:	0412      	lsls	r2, r2, #16
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime << 24); 
            
  /* Set PATT4 register value according to FMC_AttributeSpaceTimingStructure parameters */
  FMC_Bank4->PATT4 = (uint32_t)FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime |
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime << 8) |
 800c642:	4311      	orrs	r1, r2
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime << 16)|
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime << 24);	
 800c644:	687a      	ldr	r2, [r7, #4]
 800c646:	6912      	ldr	r2, [r2, #16]
 800c648:	68d2      	ldr	r2, [r2, #12]
 800c64a:	0612      	lsls	r2, r2, #24
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime << 24); 
            
  /* Set PATT4 register value according to FMC_AttributeSpaceTimingStructure parameters */
  FMC_Bank4->PATT4 = (uint32_t)FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime |
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime << 8) |
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime << 16)|
 800c64c:	430a      	orrs	r2, r1
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime << 8) |
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime << 16)|
                      (FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime << 24); 
            
  /* Set PATT4 register value according to FMC_AttributeSpaceTimingStructure parameters */
  FMC_Bank4->PATT4 = (uint32_t)FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime |
 800c64e:	60da      	str	r2, [r3, #12]
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime << 8) |
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime << 16)|
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime << 24);	
            
  /* Set PIO4 register value according to FMC_IOSpaceTimingStructure parameters */
  FMC_Bank4->PIO4 = (uint32_t)FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_SetupTime |
 800c650:	4b0c      	ldr	r3, [pc, #48]	; (800c684 <FMC_PCCARDInit+0xa8>)
 800c652:	687a      	ldr	r2, [r7, #4]
 800c654:	6952      	ldr	r2, [r2, #20]
 800c656:	6811      	ldr	r1, [r2, #0]
                     (FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_WaitSetupTime << 8) |
 800c658:	687a      	ldr	r2, [r7, #4]
 800c65a:	6952      	ldr	r2, [r2, #20]
 800c65c:	6852      	ldr	r2, [r2, #4]
 800c65e:	0212      	lsls	r2, r2, #8
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime << 8) |
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime << 16)|
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime << 24);	
            
  /* Set PIO4 register value according to FMC_IOSpaceTimingStructure parameters */
  FMC_Bank4->PIO4 = (uint32_t)FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_SetupTime |
 800c660:	4311      	orrs	r1, r2
                     (FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_WaitSetupTime << 8) |
                     (FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HoldSetupTime << 16)|
 800c662:	687a      	ldr	r2, [r7, #4]
 800c664:	6952      	ldr	r2, [r2, #20]
 800c666:	6892      	ldr	r2, [r2, #8]
 800c668:	0412      	lsls	r2, r2, #16
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime << 16)|
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime << 24);	
            
  /* Set PIO4 register value according to FMC_IOSpaceTimingStructure parameters */
  FMC_Bank4->PIO4 = (uint32_t)FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_SetupTime |
                     (FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_WaitSetupTime << 8) |
 800c66a:	4311      	orrs	r1, r2
                     (FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HoldSetupTime << 16)|
                     (FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HiZSetupTime << 24);             
 800c66c:	687a      	ldr	r2, [r7, #4]
 800c66e:	6952      	ldr	r2, [r2, #20]
 800c670:	68d2      	ldr	r2, [r2, #12]
 800c672:	0612      	lsls	r2, r2, #24
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime << 24);	
            
  /* Set PIO4 register value according to FMC_IOSpaceTimingStructure parameters */
  FMC_Bank4->PIO4 = (uint32_t)FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_SetupTime |
                     (FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_WaitSetupTime << 8) |
                     (FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HoldSetupTime << 16)|
 800c674:	430a      	orrs	r2, r1
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime << 8) |
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime << 16)|
                      (FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime << 24);	
            
  /* Set PIO4 register value according to FMC_IOSpaceTimingStructure parameters */
  FMC_Bank4->PIO4 = (uint32_t)FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_SetupTime |
 800c676:	611a      	str	r2, [r3, #16]
                     (FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_WaitSetupTime << 8) |
                     (FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HoldSetupTime << 16)|
                     (FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HiZSetupTime << 24);             
}
 800c678:	370c      	adds	r7, #12
 800c67a:	46bd      	mov	sp, r7
 800c67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c680:	4770      	bx	lr
 800c682:	bf00      	nop
 800c684:	a00000a0 	.word	0xa00000a0

0800c688 <FMC_PCCARDStructInit>:
  * @param  FMC_PCCARDInitStruct: pointer to a FMC_PCCARDInitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void FMC_PCCARDStructInit(FMC_PCCARDInitTypeDef* FMC_PCCARDInitStruct)
{
 800c688:	b480      	push	{r7}
 800c68a:	b083      	sub	sp, #12
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	6078      	str	r0, [r7, #4]
  /* Reset PCCARD Init structure parameters values */
  FMC_PCCARDInitStruct->FMC_Waitfeature = FMC_Waitfeature_Disable;
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	2200      	movs	r2, #0
 800c694:	601a      	str	r2, [r3, #0]
  FMC_PCCARDInitStruct->FMC_TCLRSetupTime = 0;
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	2200      	movs	r2, #0
 800c69a:	605a      	str	r2, [r3, #4]
  FMC_PCCARDInitStruct->FMC_TARSetupTime = 0;
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	2200      	movs	r2, #0
 800c6a0:	609a      	str	r2, [r3, #8]
  FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_SetupTime = 252;
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	68db      	ldr	r3, [r3, #12]
 800c6a6:	22fc      	movs	r2, #252	; 0xfc
 800c6a8:	601a      	str	r2, [r3, #0]
  FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_WaitSetupTime = 252;
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	68db      	ldr	r3, [r3, #12]
 800c6ae:	22fc      	movs	r2, #252	; 0xfc
 800c6b0:	605a      	str	r2, [r3, #4]
  FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HoldSetupTime = 252;
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	68db      	ldr	r3, [r3, #12]
 800c6b6:	22fc      	movs	r2, #252	; 0xfc
 800c6b8:	609a      	str	r2, [r3, #8]
  FMC_PCCARDInitStruct->FMC_CommonSpaceTimingStruct->FMC_HiZSetupTime = 252;
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	68db      	ldr	r3, [r3, #12]
 800c6be:	22fc      	movs	r2, #252	; 0xfc
 800c6c0:	60da      	str	r2, [r3, #12]
  FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_SetupTime = 252;
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	691b      	ldr	r3, [r3, #16]
 800c6c6:	22fc      	movs	r2, #252	; 0xfc
 800c6c8:	601a      	str	r2, [r3, #0]
  FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_WaitSetupTime = 252;
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	691b      	ldr	r3, [r3, #16]
 800c6ce:	22fc      	movs	r2, #252	; 0xfc
 800c6d0:	605a      	str	r2, [r3, #4]
  FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HoldSetupTime = 252;
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	691b      	ldr	r3, [r3, #16]
 800c6d6:	22fc      	movs	r2, #252	; 0xfc
 800c6d8:	609a      	str	r2, [r3, #8]
  FMC_PCCARDInitStruct->FMC_AttributeSpaceTimingStruct->FMC_HiZSetupTime = 252;	
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	691b      	ldr	r3, [r3, #16]
 800c6de:	22fc      	movs	r2, #252	; 0xfc
 800c6e0:	60da      	str	r2, [r3, #12]
  FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_SetupTime = 252;
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	695b      	ldr	r3, [r3, #20]
 800c6e6:	22fc      	movs	r2, #252	; 0xfc
 800c6e8:	601a      	str	r2, [r3, #0]
  FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_WaitSetupTime = 252;
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	695b      	ldr	r3, [r3, #20]
 800c6ee:	22fc      	movs	r2, #252	; 0xfc
 800c6f0:	605a      	str	r2, [r3, #4]
  FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HoldSetupTime = 252;
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	695b      	ldr	r3, [r3, #20]
 800c6f6:	22fc      	movs	r2, #252	; 0xfc
 800c6f8:	609a      	str	r2, [r3, #8]
  FMC_PCCARDInitStruct->FMC_IOSpaceTimingStruct->FMC_HiZSetupTime = 252;
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	695b      	ldr	r3, [r3, #20]
 800c6fe:	22fc      	movs	r2, #252	; 0xfc
 800c700:	60da      	str	r2, [r3, #12]
}
 800c702:	370c      	adds	r7, #12
 800c704:	46bd      	mov	sp, r7
 800c706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c70a:	4770      	bx	lr

0800c70c <FMC_PCCARDCmd>:
  * @param  NewState: new state of the PCCARD Memory Bank.  
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FMC_PCCARDCmd(FunctionalState NewState)
{
 800c70c:	b480      	push	{r7}
 800c70e:	b083      	sub	sp, #12
 800c710:	af00      	add	r7, sp, #0
 800c712:	4603      	mov	r3, r0
 800c714:	71fb      	strb	r3, [r7, #7]
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800c716:	79fb      	ldrb	r3, [r7, #7]
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d006      	beq.n	800c72a <FMC_PCCARDCmd+0x1e>
  {
    /* Enable the PCCARD Bank by setting the PBKEN bit in the PCR4 register */
    FMC_Bank4->PCR4 |= PCR_PBKEN_SET;
 800c71c:	4b08      	ldr	r3, [pc, #32]	; (800c740 <FMC_PCCARDCmd+0x34>)
 800c71e:	4a08      	ldr	r2, [pc, #32]	; (800c740 <FMC_PCCARDCmd+0x34>)
 800c720:	6812      	ldr	r2, [r2, #0]
 800c722:	f042 0204 	orr.w	r2, r2, #4
 800c726:	601a      	str	r2, [r3, #0]
 800c728:	e005      	b.n	800c736 <FMC_PCCARDCmd+0x2a>
  }
  else
  {
    /* Disable the PCCARD Bank by clearing the PBKEN bit in the PCR4 register */
    FMC_Bank4->PCR4 &= PCR_PBKEN_RESET;
 800c72a:	4a05      	ldr	r2, [pc, #20]	; (800c740 <FMC_PCCARDCmd+0x34>)
 800c72c:	4b04      	ldr	r3, [pc, #16]	; (800c740 <FMC_PCCARDCmd+0x34>)
 800c72e:	6819      	ldr	r1, [r3, #0]
 800c730:	4b04      	ldr	r3, [pc, #16]	; (800c744 <FMC_PCCARDCmd+0x38>)
 800c732:	400b      	ands	r3, r1
 800c734:	6013      	str	r3, [r2, #0]
  }
}
 800c736:	370c      	adds	r7, #12
 800c738:	46bd      	mov	sp, r7
 800c73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c73e:	4770      	bx	lr
 800c740:	a00000a0 	.word	0xa00000a0
 800c744:	000ffffb 	.word	0x000ffffb

0800c748 <FMC_SDRAMDeInit>:
  *            @arg FMC_Bank1_SDRAM: FMC Bank1 SDRAM 
  *            @arg FMC_Bank2_SDRAM: FMC Bank2 SDRAM 
  * @retval None
  */
void FMC_SDRAMDeInit(uint32_t FMC_Bank)
{
 800c748:	b480      	push	{r7}
 800c74a:	b083      	sub	sp, #12
 800c74c:	af00      	add	r7, sp, #0
 800c74e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_FMC_SDRAM_BANK(FMC_Bank));
  
  FMC_Bank5_6->SDCR[FMC_Bank] = 0x000002D0;
 800c750:	4b0d      	ldr	r3, [pc, #52]	; (800c788 <FMC_SDRAMDeInit+0x40>)
 800c752:	687a      	ldr	r2, [r7, #4]
 800c754:	f44f 7134 	mov.w	r1, #720	; 0x2d0
 800c758:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  FMC_Bank5_6->SDTR[FMC_Bank] = 0x0FFFFFFF;    
 800c75c:	4b0a      	ldr	r3, [pc, #40]	; (800c788 <FMC_SDRAMDeInit+0x40>)
 800c75e:	687a      	ldr	r2, [r7, #4]
 800c760:	3202      	adds	r2, #2
 800c762:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800c766:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  FMC_Bank5_6->SDCMR = 0x00000000;
 800c76a:	4b07      	ldr	r3, [pc, #28]	; (800c788 <FMC_SDRAMDeInit+0x40>)
 800c76c:	2200      	movs	r2, #0
 800c76e:	611a      	str	r2, [r3, #16]
  FMC_Bank5_6->SDRTR = 0x00000000;
 800c770:	4b05      	ldr	r3, [pc, #20]	; (800c788 <FMC_SDRAMDeInit+0x40>)
 800c772:	2200      	movs	r2, #0
 800c774:	615a      	str	r2, [r3, #20]
  FMC_Bank5_6->SDSR = 0x00000000; 
 800c776:	4b04      	ldr	r3, [pc, #16]	; (800c788 <FMC_SDRAMDeInit+0x40>)
 800c778:	2200      	movs	r2, #0
 800c77a:	619a      	str	r2, [r3, #24]
}  
 800c77c:	370c      	adds	r7, #12
 800c77e:	46bd      	mov	sp, r7
 800c780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c784:	4770      	bx	lr
 800c786:	bf00      	nop
 800c788:	a0000140 	.word	0xa0000140

0800c78c <FMC_SDRAMInit>:
  *         that contains the configuration information for the FMC SDRAM 
  *         specified Banks.                       
  * @retval None
  */
void FMC_SDRAMInit(FMC_SDRAMInitTypeDef* FMC_SDRAMInitStruct)
{ 
 800c78c:	b480      	push	{r7}
 800c78e:	b087      	sub	sp, #28
 800c790:	af00      	add	r7, sp, #0
 800c792:	6078      	str	r0, [r7, #4]
  /* temporary registers */
  uint32_t tmpr1 = 0;
 800c794:	2300      	movs	r3, #0
 800c796:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800c798:	2300      	movs	r3, #0
 800c79a:	613b      	str	r3, [r7, #16]
  uint32_t tmpr3 = 0;
 800c79c:	2300      	movs	r3, #0
 800c79e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr4 = 0;
 800c7a0:	2300      	movs	r3, #0
 800c7a2:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_WRITE_RECOVERY_TIME(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)); 
  assert_param(IS_FMC_RP_DELAY(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay)); 
  assert_param(IS_FMC_RCD_DELAY(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RCDDelay));    
  
  /* SDRAM bank control register configuration */ 
  tmpr1 =   (uint32_t)FMC_SDRAMInitStruct->FMC_ColumnBitsNumber |
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	685a      	ldr	r2, [r3, #4]
             FMC_SDRAMInitStruct->FMC_RowBitsNumber |
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	689b      	ldr	r3, [r3, #8]
  assert_param(IS_FMC_WRITE_RECOVERY_TIME(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)); 
  assert_param(IS_FMC_RP_DELAY(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay)); 
  assert_param(IS_FMC_RCD_DELAY(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RCDDelay));    
  
  /* SDRAM bank control register configuration */ 
  tmpr1 =   (uint32_t)FMC_SDRAMInitStruct->FMC_ColumnBitsNumber |
 800c7ac:	431a      	orrs	r2, r3
             FMC_SDRAMInitStruct->FMC_RowBitsNumber |
             FMC_SDRAMInitStruct->FMC_SDMemoryDataWidth |
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	68db      	ldr	r3, [r3, #12]
  assert_param(IS_FMC_RP_DELAY(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay)); 
  assert_param(IS_FMC_RCD_DELAY(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RCDDelay));    
  
  /* SDRAM bank control register configuration */ 
  tmpr1 =   (uint32_t)FMC_SDRAMInitStruct->FMC_ColumnBitsNumber |
             FMC_SDRAMInitStruct->FMC_RowBitsNumber |
 800c7b2:	431a      	orrs	r2, r3
             FMC_SDRAMInitStruct->FMC_SDMemoryDataWidth |
             FMC_SDRAMInitStruct->FMC_InternalBankNumber |           
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	691b      	ldr	r3, [r3, #16]
  assert_param(IS_FMC_RCD_DELAY(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RCDDelay));    
  
  /* SDRAM bank control register configuration */ 
  tmpr1 =   (uint32_t)FMC_SDRAMInitStruct->FMC_ColumnBitsNumber |
             FMC_SDRAMInitStruct->FMC_RowBitsNumber |
             FMC_SDRAMInitStruct->FMC_SDMemoryDataWidth |
 800c7b8:	431a      	orrs	r2, r3
             FMC_SDRAMInitStruct->FMC_InternalBankNumber |           
             FMC_SDRAMInitStruct->FMC_CASLatency |
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	695b      	ldr	r3, [r3, #20]
  
  /* SDRAM bank control register configuration */ 
  tmpr1 =   (uint32_t)FMC_SDRAMInitStruct->FMC_ColumnBitsNumber |
             FMC_SDRAMInitStruct->FMC_RowBitsNumber |
             FMC_SDRAMInitStruct->FMC_SDMemoryDataWidth |
             FMC_SDRAMInitStruct->FMC_InternalBankNumber |           
 800c7be:	431a      	orrs	r2, r3
             FMC_SDRAMInitStruct->FMC_CASLatency |
             FMC_SDRAMInitStruct->FMC_WriteProtection |
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	699b      	ldr	r3, [r3, #24]
  /* SDRAM bank control register configuration */ 
  tmpr1 =   (uint32_t)FMC_SDRAMInitStruct->FMC_ColumnBitsNumber |
             FMC_SDRAMInitStruct->FMC_RowBitsNumber |
             FMC_SDRAMInitStruct->FMC_SDMemoryDataWidth |
             FMC_SDRAMInitStruct->FMC_InternalBankNumber |           
             FMC_SDRAMInitStruct->FMC_CASLatency |
 800c7c4:	431a      	orrs	r2, r3
             FMC_SDRAMInitStruct->FMC_WriteProtection |
             FMC_SDRAMInitStruct->FMC_SDClockPeriod |
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	69db      	ldr	r3, [r3, #28]
  tmpr1 =   (uint32_t)FMC_SDRAMInitStruct->FMC_ColumnBitsNumber |
             FMC_SDRAMInitStruct->FMC_RowBitsNumber |
             FMC_SDRAMInitStruct->FMC_SDMemoryDataWidth |
             FMC_SDRAMInitStruct->FMC_InternalBankNumber |           
             FMC_SDRAMInitStruct->FMC_CASLatency |
             FMC_SDRAMInitStruct->FMC_WriteProtection |
 800c7ca:	431a      	orrs	r2, r3
             FMC_SDRAMInitStruct->FMC_SDClockPeriod |
             FMC_SDRAMInitStruct->FMC_ReadBurst | 
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	6a1b      	ldr	r3, [r3, #32]
             FMC_SDRAMInitStruct->FMC_RowBitsNumber |
             FMC_SDRAMInitStruct->FMC_SDMemoryDataWidth |
             FMC_SDRAMInitStruct->FMC_InternalBankNumber |           
             FMC_SDRAMInitStruct->FMC_CASLatency |
             FMC_SDRAMInitStruct->FMC_WriteProtection |
             FMC_SDRAMInitStruct->FMC_SDClockPeriod |
 800c7d0:	431a      	orrs	r2, r3
             FMC_SDRAMInitStruct->FMC_ReadBurst | 
             FMC_SDRAMInitStruct->FMC_ReadPipeDelay;
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  assert_param(IS_FMC_WRITE_RECOVERY_TIME(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)); 
  assert_param(IS_FMC_RP_DELAY(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay)); 
  assert_param(IS_FMC_RCD_DELAY(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RCDDelay));    
  
  /* SDRAM bank control register configuration */ 
  tmpr1 =   (uint32_t)FMC_SDRAMInitStruct->FMC_ColumnBitsNumber |
 800c7d6:	4313      	orrs	r3, r2
 800c7d8:	617b      	str	r3, [r7, #20]
             FMC_SDRAMInitStruct->FMC_WriteProtection |
             FMC_SDRAMInitStruct->FMC_SDClockPeriod |
             FMC_SDRAMInitStruct->FMC_ReadBurst | 
             FMC_SDRAMInitStruct->FMC_ReadPipeDelay;
            
  if(FMC_SDRAMInitStruct->FMC_Bank == FMC_Bank1_SDRAM )
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d106      	bne.n	800c7f0 <FMC_SDRAMInit+0x64>
  {
    FMC_Bank5_6->SDCR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr1;
 800c7e2:	4b40      	ldr	r3, [pc, #256]	; (800c8e4 <FMC_SDRAMInit+0x158>)
 800c7e4:	687a      	ldr	r2, [r7, #4]
 800c7e6:	6812      	ldr	r2, [r2, #0]
 800c7e8:	6979      	ldr	r1, [r7, #20]
 800c7ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800c7ee:	e011      	b.n	800c814 <FMC_SDRAMInit+0x88>
  }
  else   /* SDCR2 "don't care" bits configuration */
  {
    tmpr3 = (uint32_t)FMC_SDRAMInitStruct->FMC_SDClockPeriod |
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	69da      	ldr	r2, [r3, #28]
             FMC_SDRAMInitStruct->FMC_ReadBurst | 
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	6a1b      	ldr	r3, [r3, #32]
  {
    FMC_Bank5_6->SDCR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr1;
  }
  else   /* SDCR2 "don't care" bits configuration */
  {
    tmpr3 = (uint32_t)FMC_SDRAMInitStruct->FMC_SDClockPeriod |
 800c7f8:	431a      	orrs	r2, r3
             FMC_SDRAMInitStruct->FMC_ReadBurst | 
             FMC_SDRAMInitStruct->FMC_ReadPipeDelay;
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  {
    FMC_Bank5_6->SDCR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr1;
  }
  else   /* SDCR2 "don't care" bits configuration */
  {
    tmpr3 = (uint32_t)FMC_SDRAMInitStruct->FMC_SDClockPeriod |
 800c7fe:	4313      	orrs	r3, r2
 800c800:	60fb      	str	r3, [r7, #12]
             FMC_SDRAMInitStruct->FMC_ReadBurst | 
             FMC_SDRAMInitStruct->FMC_ReadPipeDelay;
    
    FMC_Bank5_6->SDCR[FMC_Bank1_SDRAM] = tmpr3;
 800c802:	4b38      	ldr	r3, [pc, #224]	; (800c8e4 <FMC_SDRAMInit+0x158>)
 800c804:	68fa      	ldr	r2, [r7, #12]
 800c806:	601a      	str	r2, [r3, #0]
    FMC_Bank5_6->SDCR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr1;
 800c808:	4b36      	ldr	r3, [pc, #216]	; (800c8e4 <FMC_SDRAMInit+0x158>)
 800c80a:	687a      	ldr	r2, [r7, #4]
 800c80c:	6812      	ldr	r2, [r2, #0]
 800c80e:	6979      	ldr	r1, [r7, #20]
 800c810:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  /* SDRAM bank timing register configuration */
  if(FMC_SDRAMInitStruct->FMC_Bank == FMC_Bank1_SDRAM )
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d130      	bne.n	800c87e <FMC_SDRAMInit+0xf2>
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	1e5a      	subs	r2, r3, #1
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c828:	685b      	ldr	r3, [r3, #4]
 800c82a:	3b01      	subs	r3, #1
 800c82c:	011b      	lsls	r3, r3, #4
    FMC_Bank5_6->SDCR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr1;
  }
  /* SDRAM bank timing register configuration */
  if(FMC_SDRAMInitStruct->FMC_Bank == FMC_Bank1_SDRAM )
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
 800c82e:	431a      	orrs	r2, r3
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime)-1) << 8) |
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c834:	689b      	ldr	r3, [r3, #8]
 800c836:	3b01      	subs	r3, #1
 800c838:	021b      	lsls	r3, r3, #8
  }
  /* SDRAM bank timing register configuration */
  if(FMC_SDRAMInitStruct->FMC_Bank == FMC_Bank1_SDRAM )
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
 800c83a:	431a      	orrs	r2, r3
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime)-1) << 8) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay)-1) << 12) |
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c840:	68db      	ldr	r3, [r3, #12]
 800c842:	3b01      	subs	r3, #1
 800c844:	031b      	lsls	r3, r3, #12
  /* SDRAM bank timing register configuration */
  if(FMC_SDRAMInitStruct->FMC_Bank == FMC_Bank1_SDRAM )
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime)-1) << 8) |
 800c846:	431a      	orrs	r2, r3
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay)-1) << 12) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)-1) << 16) |
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c84c:	691b      	ldr	r3, [r3, #16]
 800c84e:	3b01      	subs	r3, #1
 800c850:	041b      	lsls	r3, r3, #16
  if(FMC_SDRAMInitStruct->FMC_Bank == FMC_Bank1_SDRAM )
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime)-1) << 8) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay)-1) << 12) |
 800c852:	431a      	orrs	r2, r3
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)-1) << 16) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay)-1) << 20) |
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c858:	695b      	ldr	r3, [r3, #20]
 800c85a:	3b01      	subs	r3, #1
 800c85c:	051b      	lsls	r3, r3, #20
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime)-1) << 8) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay)-1) << 12) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)-1) << 16) |
 800c85e:	431a      	orrs	r2, r3
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay)-1) << 20) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RCDDelay)-1) << 24);
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c864:	699b      	ldr	r3, [r3, #24]
 800c866:	3b01      	subs	r3, #1
 800c868:	061b      	lsls	r3, r3, #24
    FMC_Bank5_6->SDCR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr1;
  }
  /* SDRAM bank timing register configuration */
  if(FMC_SDRAMInitStruct->FMC_Bank == FMC_Bank1_SDRAM )
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
 800c86a:	4313      	orrs	r3, r2
 800c86c:	613b      	str	r3, [r7, #16]
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay)-1) << 12) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)-1) << 16) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay)-1) << 20) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RCDDelay)-1) << 24);
            
            FMC_Bank5_6->SDTR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr2;
 800c86e:	4b1d      	ldr	r3, [pc, #116]	; (800c8e4 <FMC_SDRAMInit+0x158>)
 800c870:	687a      	ldr	r2, [r7, #4]
 800c872:	6812      	ldr	r2, [r2, #0]
 800c874:	3202      	adds	r2, #2
 800c876:	6939      	ldr	r1, [r7, #16]
 800c878:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800c87c:	e02c      	b.n	800c8d8 <FMC_SDRAMInit+0x14c>
  }
  else   /* SDTR "don't care bits configuration */
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	1e5a      	subs	r2, r3, #1
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c88a:	685b      	ldr	r3, [r3, #4]
 800c88c:	3b01      	subs	r3, #1
 800c88e:	011b      	lsls	r3, r3, #4
            
            FMC_Bank5_6->SDTR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr2;
  }
  else   /* SDTR "don't care bits configuration */
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
 800c890:	431a      	orrs	r2, r3
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime)-1) << 8) |
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c896:	689b      	ldr	r3, [r3, #8]
 800c898:	3b01      	subs	r3, #1
 800c89a:	021b      	lsls	r3, r3, #8
            FMC_Bank5_6->SDTR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr2;
  }
  else   /* SDTR "don't care bits configuration */
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
 800c89c:	431a      	orrs	r2, r3
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime)-1) << 8) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)-1) << 16);
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8a2:	691b      	ldr	r3, [r3, #16]
 800c8a4:	3b01      	subs	r3, #1
 800c8a6:	041b      	lsls	r3, r3, #16
            
            FMC_Bank5_6->SDTR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr2;
  }
  else   /* SDTR "don't care bits configuration */
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
 800c8a8:	4313      	orrs	r3, r2
 800c8aa:	613b      	str	r3, [r7, #16]
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime)-1) << 8) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)-1) << 16);
            
    tmpr4 =   (uint32_t)(((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay)-1) << 12) |
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8b0:	68db      	ldr	r3, [r3, #12]
 800c8b2:	3b01      	subs	r3, #1
 800c8b4:	031a      	lsls	r2, r3, #12
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay)-1) << 20);
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8ba:	695b      	ldr	r3, [r3, #20]
 800c8bc:	3b01      	subs	r3, #1
 800c8be:	051b      	lsls	r3, r3, #20
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime)-1) << 8) |
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)-1) << 16);
            
    tmpr4 =   (uint32_t)(((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay)-1) << 12) |
 800c8c0:	4313      	orrs	r3, r2
 800c8c2:	60bb      	str	r3, [r7, #8]
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay)-1) << 20);
            
            FMC_Bank5_6->SDTR[FMC_Bank1_SDRAM] = tmpr4;
 800c8c4:	4b07      	ldr	r3, [pc, #28]	; (800c8e4 <FMC_SDRAMInit+0x158>)
 800c8c6:	68ba      	ldr	r2, [r7, #8]
 800c8c8:	609a      	str	r2, [r3, #8]
            FMC_Bank5_6->SDTR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr2;
 800c8ca:	4b06      	ldr	r3, [pc, #24]	; (800c8e4 <FMC_SDRAMInit+0x158>)
 800c8cc:	687a      	ldr	r2, [r7, #4]
 800c8ce:	6812      	ldr	r2, [r2, #0]
 800c8d0:	3202      	adds	r2, #2
 800c8d2:	6939      	ldr	r1, [r7, #16]
 800c8d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  
}
 800c8d8:	371c      	adds	r7, #28
 800c8da:	46bd      	mov	sp, r7
 800c8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e0:	4770      	bx	lr
 800c8e2:	bf00      	nop
 800c8e4:	a0000140 	.word	0xa0000140

0800c8e8 <FMC_SDRAMStructInit>:
  * @param  FMC_SDRAMInitStruct: pointer to a FMC_SDRAMInitTypeDef structure 
  *         which will be initialized.
  * @retval None
  */
void FMC_SDRAMStructInit(FMC_SDRAMInitTypeDef* FMC_SDRAMInitStruct)  
{  
 800c8e8:	b480      	push	{r7}
 800c8ea:	b083      	sub	sp, #12
 800c8ec:	af00      	add	r7, sp, #0
 800c8ee:	6078      	str	r0, [r7, #4]
  /* Reset SDRAM Init structure parameters values */
  FMC_SDRAMInitStruct->FMC_Bank = FMC_Bank1_SDRAM;
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	2200      	movs	r2, #0
 800c8f4:	601a      	str	r2, [r3, #0]
  FMC_SDRAMInitStruct->FMC_ColumnBitsNumber = FMC_ColumnBits_Number_8b;
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	2200      	movs	r2, #0
 800c8fa:	605a      	str	r2, [r3, #4]
  FMC_SDRAMInitStruct->FMC_RowBitsNumber = FMC_RowBits_Number_11b; 
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	2200      	movs	r2, #0
 800c900:	609a      	str	r2, [r3, #8]
  FMC_SDRAMInitStruct->FMC_SDMemoryDataWidth = FMC_SDMemory_Width_16b;
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	2210      	movs	r2, #16
 800c906:	60da      	str	r2, [r3, #12]
  FMC_SDRAMInitStruct->FMC_InternalBankNumber = FMC_InternalBank_Number_4; 
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	2240      	movs	r2, #64	; 0x40
 800c90c:	611a      	str	r2, [r3, #16]
  FMC_SDRAMInitStruct->FMC_CASLatency = FMC_CAS_Latency_1;  
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	2280      	movs	r2, #128	; 0x80
 800c912:	615a      	str	r2, [r3, #20]
  FMC_SDRAMInitStruct->FMC_WriteProtection = FMC_Write_Protection_Enable;
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c91a:	619a      	str	r2, [r3, #24]
  FMC_SDRAMInitStruct->FMC_SDClockPeriod = FMC_SDClock_Disable;
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	2200      	movs	r2, #0
 800c920:	61da      	str	r2, [r3, #28]
  FMC_SDRAMInitStruct->FMC_ReadBurst = FMC_Read_Burst_Disable;
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	2200      	movs	r2, #0
 800c926:	621a      	str	r2, [r3, #32]
  FMC_SDRAMInitStruct->FMC_ReadPipeDelay = FMC_ReadPipe_Delay_0; 
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	2200      	movs	r2, #0
 800c92c:	625a      	str	r2, [r3, #36]	; 0x24
   
  FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay = 16;
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c932:	2210      	movs	r2, #16
 800c934:	601a      	str	r2, [r3, #0]
  FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay = 16;
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c93a:	2210      	movs	r2, #16
 800c93c:	605a      	str	r2, [r3, #4]
  FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime = 16;
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c942:	2210      	movs	r2, #16
 800c944:	609a      	str	r2, [r3, #8]
  FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay = 16;
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c94a:	2210      	movs	r2, #16
 800c94c:	60da      	str	r2, [r3, #12]
  FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime = 16;
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c952:	2210      	movs	r2, #16
 800c954:	611a      	str	r2, [r3, #16]
  FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay = 16;
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c95a:	2210      	movs	r2, #16
 800c95c:	615a      	str	r2, [r3, #20]
  FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RCDDelay = 16;
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c962:	2210      	movs	r2, #16
 800c964:	619a      	str	r2, [r3, #24]
  
}
 800c966:	370c      	adds	r7, #12
 800c968:	46bd      	mov	sp, r7
 800c96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c96e:	4770      	bx	lr

0800c970 <FMC_SDRAMCmdConfig>:
  * @param  FMC_SDRAMCommandStruct: pointer to a FMC_SDRAMCommandTypeDef structure 
  *         which will be configured.
  * @retval None
  */
void FMC_SDRAMCmdConfig(FMC_SDRAMCommandTypeDef* FMC_SDRAMCommandStruct)
{
 800c970:	b480      	push	{r7}
 800c972:	b085      	sub	sp, #20
 800c974:	af00      	add	r7, sp, #0
 800c976:	6078      	str	r0, [r7, #4]
  uint32_t tmpr = 0x0;
 800c978:	2300      	movs	r3, #0
 800c97a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FMC_COMMAND_MODE(FMC_SDRAMCommandStruct->FMC_CommandMode));
  assert_param(IS_FMC_COMMAND_TARGET(FMC_SDRAMCommandStruct->FMC_CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(FMC_SDRAMCommandStruct->FMC_AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(FMC_SDRAMCommandStruct->FMC_ModeRegisterDefinition));
  
  tmpr =   (uint32_t)(FMC_SDRAMCommandStruct->FMC_CommandMode |
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	681a      	ldr	r2, [r3, #0]
                      FMC_SDRAMCommandStruct->FMC_CommandTarget |
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	685b      	ldr	r3, [r3, #4]
  assert_param(IS_FMC_COMMAND_MODE(FMC_SDRAMCommandStruct->FMC_CommandMode));
  assert_param(IS_FMC_COMMAND_TARGET(FMC_SDRAMCommandStruct->FMC_CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(FMC_SDRAMCommandStruct->FMC_AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(FMC_SDRAMCommandStruct->FMC_ModeRegisterDefinition));
  
  tmpr =   (uint32_t)(FMC_SDRAMCommandStruct->FMC_CommandMode |
 800c984:	431a      	orrs	r2, r3
                      FMC_SDRAMCommandStruct->FMC_CommandTarget |
                     (((FMC_SDRAMCommandStruct->FMC_AutoRefreshNumber)-1)<<5) |
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	689b      	ldr	r3, [r3, #8]
 800c98a:	3b01      	subs	r3, #1
 800c98c:	015b      	lsls	r3, r3, #5
  assert_param(IS_FMC_COMMAND_TARGET(FMC_SDRAMCommandStruct->FMC_CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(FMC_SDRAMCommandStruct->FMC_AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(FMC_SDRAMCommandStruct->FMC_ModeRegisterDefinition));
  
  tmpr =   (uint32_t)(FMC_SDRAMCommandStruct->FMC_CommandMode |
                      FMC_SDRAMCommandStruct->FMC_CommandTarget |
 800c98e:	431a      	orrs	r2, r3
                     (((FMC_SDRAMCommandStruct->FMC_AutoRefreshNumber)-1)<<5) |
                     ((FMC_SDRAMCommandStruct->FMC_ModeRegisterDefinition)<<9));
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	68db      	ldr	r3, [r3, #12]
 800c994:	025b      	lsls	r3, r3, #9
  assert_param(IS_FMC_COMMAND_MODE(FMC_SDRAMCommandStruct->FMC_CommandMode));
  assert_param(IS_FMC_COMMAND_TARGET(FMC_SDRAMCommandStruct->FMC_CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(FMC_SDRAMCommandStruct->FMC_AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(FMC_SDRAMCommandStruct->FMC_ModeRegisterDefinition));
  
  tmpr =   (uint32_t)(FMC_SDRAMCommandStruct->FMC_CommandMode |
 800c996:	4313      	orrs	r3, r2
 800c998:	60fb      	str	r3, [r7, #12]
                      FMC_SDRAMCommandStruct->FMC_CommandTarget |
                     (((FMC_SDRAMCommandStruct->FMC_AutoRefreshNumber)-1)<<5) |
                     ((FMC_SDRAMCommandStruct->FMC_ModeRegisterDefinition)<<9));
  
  FMC_Bank5_6->SDCMR = tmpr;
 800c99a:	4b04      	ldr	r3, [pc, #16]	; (800c9ac <FMC_SDRAMCmdConfig+0x3c>)
 800c99c:	68fa      	ldr	r2, [r7, #12]
 800c99e:	611a      	str	r2, [r3, #16]

}
 800c9a0:	3714      	adds	r7, #20
 800c9a2:	46bd      	mov	sp, r7
 800c9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a8:	4770      	bx	lr
 800c9aa:	bf00      	nop
 800c9ac:	a0000140 	.word	0xa0000140

0800c9b0 <FMC_GetModeStatus>:
  * @param  SDRAM_Bank: Defines the FMC SDRAM bank. This parameter can be 
  *                     FMC_Bank1_SDRAM or FMC_Bank2_SDRAM. 
  * @retval The FMC SDRAM bank mode status         
  */
uint32_t FMC_GetModeStatus(uint32_t SDRAM_Bank)
{
 800c9b0:	b480      	push	{r7}
 800c9b2:	b085      	sub	sp, #20
 800c9b4:	af00      	add	r7, sp, #0
 800c9b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800c9b8:	2300      	movs	r3, #0
 800c9ba:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameter */
  assert_param(IS_FMC_SDRAM_BANK(SDRAM_Bank));

  /* Get the busy flag status */
  if(SDRAM_Bank == FMC_Bank1_SDRAM)
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d105      	bne.n	800c9ce <FMC_GetModeStatus+0x1e>
  {
    tmpreg = (uint32_t)(FMC_Bank5_6->SDSR & FMC_SDSR_MODES1); 
 800c9c2:	4b09      	ldr	r3, [pc, #36]	; (800c9e8 <FMC_GetModeStatus+0x38>)
 800c9c4:	699b      	ldr	r3, [r3, #24]
 800c9c6:	f003 0306 	and.w	r3, r3, #6
 800c9ca:	60fb      	str	r3, [r7, #12]
 800c9cc:	e005      	b.n	800c9da <FMC_GetModeStatus+0x2a>
  }
  else
  {
    tmpreg = ((uint32_t)(FMC_Bank5_6->SDSR & FMC_SDSR_MODES2) >> 2);
 800c9ce:	4b06      	ldr	r3, [pc, #24]	; (800c9e8 <FMC_GetModeStatus+0x38>)
 800c9d0:	699b      	ldr	r3, [r3, #24]
 800c9d2:	f003 0318 	and.w	r3, r3, #24
 800c9d6:	089b      	lsrs	r3, r3, #2
 800c9d8:	60fb      	str	r3, [r7, #12]
  }
  
  /* Return the mode status */
  return tmpreg;
 800c9da:	68fb      	ldr	r3, [r7, #12]
}
 800c9dc:	4618      	mov	r0, r3
 800c9de:	3714      	adds	r7, #20
 800c9e0:	46bd      	mov	sp, r7
 800c9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e6:	4770      	bx	lr
 800c9e8:	a0000140 	.word	0xa0000140

0800c9ec <FMC_SetRefreshCount>:
  * @brief  defines the SDRAM Memory Refresh rate.
  * @param  FMC_Count: specifies the Refresh timer count.       
  * @retval None
  */
void FMC_SetRefreshCount(uint32_t FMC_Count)
{
 800c9ec:	b480      	push	{r7}
 800c9ee:	b083      	sub	sp, #12
 800c9f0:	af00      	add	r7, sp, #0
 800c9f2:	6078      	str	r0, [r7, #4]
  /* check the parameters */
  assert_param(IS_FMC_REFRESH_COUNT(FMC_Count));
  
  FMC_Bank5_6->SDRTR |= (FMC_Count<<1);
 800c9f4:	4b05      	ldr	r3, [pc, #20]	; (800ca0c <FMC_SetRefreshCount+0x20>)
 800c9f6:	4a05      	ldr	r2, [pc, #20]	; (800ca0c <FMC_SetRefreshCount+0x20>)
 800c9f8:	6951      	ldr	r1, [r2, #20]
 800c9fa:	687a      	ldr	r2, [r7, #4]
 800c9fc:	0052      	lsls	r2, r2, #1
 800c9fe:	430a      	orrs	r2, r1
 800ca00:	615a      	str	r2, [r3, #20]
   
}
 800ca02:	370c      	adds	r7, #12
 800ca04:	46bd      	mov	sp, r7
 800ca06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca0a:	4770      	bx	lr
 800ca0c:	a0000140 	.word	0xa0000140

0800ca10 <FMC_SetAutoRefresh_Number>:
  * @brief  Sets the Number of consecutive SDRAM Memory auto Refresh commands.
  * @param  FMC_Number: specifies the auto Refresh number.       
  * @retval None
  */
void FMC_SetAutoRefresh_Number(uint32_t FMC_Number)
{
 800ca10:	b480      	push	{r7}
 800ca12:	b083      	sub	sp, #12
 800ca14:	af00      	add	r7, sp, #0
 800ca16:	6078      	str	r0, [r7, #4]
  /* check the parameters */
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(FMC_Number));
  
  FMC_Bank5_6->SDCMR |= (FMC_Number << 5);   
 800ca18:	4b05      	ldr	r3, [pc, #20]	; (800ca30 <FMC_SetAutoRefresh_Number+0x20>)
 800ca1a:	4a05      	ldr	r2, [pc, #20]	; (800ca30 <FMC_SetAutoRefresh_Number+0x20>)
 800ca1c:	6911      	ldr	r1, [r2, #16]
 800ca1e:	687a      	ldr	r2, [r7, #4]
 800ca20:	0152      	lsls	r2, r2, #5
 800ca22:	430a      	orrs	r2, r1
 800ca24:	611a      	str	r2, [r3, #16]
}
 800ca26:	370c      	adds	r7, #12
 800ca28:	46bd      	mov	sp, r7
 800ca2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca2e:	4770      	bx	lr
 800ca30:	a0000140 	.word	0xa0000140

0800ca34 <FMC_SDRAMWriteProtectionConfig>:
  * @param  NewState: new state of the write protection flag.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FMC_SDRAMWriteProtectionConfig(uint32_t SDRAM_Bank, FunctionalState NewState)
{
 800ca34:	b480      	push	{r7}
 800ca36:	b083      	sub	sp, #12
 800ca38:	af00      	add	r7, sp, #0
 800ca3a:	6078      	str	r0, [r7, #4]
 800ca3c:	460b      	mov	r3, r1
 800ca3e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameter */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_FMC_SDRAM_BANK(SDRAM_Bank));
  
  if (NewState != DISABLE)
 800ca40:	78fb      	ldrb	r3, [r7, #3]
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d00a      	beq.n	800ca5c <FMC_SDRAMWriteProtectionConfig+0x28>
  {
    FMC_Bank5_6->SDCR[SDRAM_Bank] |= FMC_Write_Protection_Enable;    
 800ca46:	4b0d      	ldr	r3, [pc, #52]	; (800ca7c <FMC_SDRAMWriteProtectionConfig+0x48>)
 800ca48:	4a0c      	ldr	r2, [pc, #48]	; (800ca7c <FMC_SDRAMWriteProtectionConfig+0x48>)
 800ca4a:	6879      	ldr	r1, [r7, #4]
 800ca4c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800ca50:	f442 7100 	orr.w	r1, r2, #512	; 0x200
 800ca54:	687a      	ldr	r2, [r7, #4]
 800ca56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800ca5a:	e00a      	b.n	800ca72 <FMC_SDRAMWriteProtectionConfig+0x3e>
  }
  else
  {
    FMC_Bank5_6->SDCR[SDRAM_Bank] &= SDCR_WriteProtection_RESET;
 800ca5c:	4a07      	ldr	r2, [pc, #28]	; (800ca7c <FMC_SDRAMWriteProtectionConfig+0x48>)
 800ca5e:	4b07      	ldr	r3, [pc, #28]	; (800ca7c <FMC_SDRAMWriteProtectionConfig+0x48>)
 800ca60:	6879      	ldr	r1, [r7, #4]
 800ca62:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800ca66:	f647 53ff 	movw	r3, #32255	; 0x7dff
 800ca6a:	400b      	ands	r3, r1
 800ca6c:	6879      	ldr	r1, [r7, #4]
 800ca6e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  } 
  
}
 800ca72:	370c      	adds	r7, #12
 800ca74:	46bd      	mov	sp, r7
 800ca76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca7a:	4770      	bx	lr
 800ca7c:	a0000140 	.word	0xa0000140

0800ca80 <FMC_ITConfig>:
  * @param  NewState: new state of the specified FMC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FMC_ITConfig(uint32_t FMC_Bank, uint32_t FMC_IT, FunctionalState NewState)
{
 800ca80:	b480      	push	{r7}
 800ca82:	b085      	sub	sp, #20
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	60f8      	str	r0, [r7, #12]
 800ca88:	60b9      	str	r1, [r7, #8]
 800ca8a:	4613      	mov	r3, r2
 800ca8c:	71fb      	strb	r3, [r7, #7]
  assert_param(IS_FMC_IT_BANK(FMC_Bank));
  assert_param(IS_FMC_IT(FMC_IT));	
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800ca8e:	79fb      	ldrb	r3, [r7, #7]
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d026      	beq.n	800cae2 <FMC_ITConfig+0x62>
  {
    /* Enable the selected FMC_Bank2 interrupts */
    if(FMC_Bank == FMC_Bank2_NAND)
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	2b10      	cmp	r3, #16
 800ca98:	d106      	bne.n	800caa8 <FMC_ITConfig+0x28>
    {
      FMC_Bank2->SR2 |= FMC_IT;
 800ca9a:	4b29      	ldr	r3, [pc, #164]	; (800cb40 <FMC_ITConfig+0xc0>)
 800ca9c:	4a28      	ldr	r2, [pc, #160]	; (800cb40 <FMC_ITConfig+0xc0>)
 800ca9e:	6851      	ldr	r1, [r2, #4]
 800caa0:	68ba      	ldr	r2, [r7, #8]
 800caa2:	430a      	orrs	r2, r1
 800caa4:	605a      	str	r2, [r3, #4]
 800caa6:	e046      	b.n	800cb36 <FMC_ITConfig+0xb6>
    }
    /* Enable the selected FMC_Bank3 interrupts */
    else if (FMC_Bank == FMC_Bank3_NAND)
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800caae:	d106      	bne.n	800cabe <FMC_ITConfig+0x3e>
    {
      FMC_Bank3->SR3 |= FMC_IT;
 800cab0:	4b24      	ldr	r3, [pc, #144]	; (800cb44 <FMC_ITConfig+0xc4>)
 800cab2:	4a24      	ldr	r2, [pc, #144]	; (800cb44 <FMC_ITConfig+0xc4>)
 800cab4:	6851      	ldr	r1, [r2, #4]
 800cab6:	68ba      	ldr	r2, [r7, #8]
 800cab8:	430a      	orrs	r2, r1
 800caba:	605a      	str	r2, [r3, #4]
 800cabc:	e03b      	b.n	800cb36 <FMC_ITConfig+0xb6>
    }
    /* Enable the selected FMC_Bank4 interrupts */
    else if (FMC_Bank == FMC_Bank4_PCCARD)
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cac4:	d106      	bne.n	800cad4 <FMC_ITConfig+0x54>
    {
      FMC_Bank4->SR4 |= FMC_IT;    
 800cac6:	4b20      	ldr	r3, [pc, #128]	; (800cb48 <FMC_ITConfig+0xc8>)
 800cac8:	4a1f      	ldr	r2, [pc, #124]	; (800cb48 <FMC_ITConfig+0xc8>)
 800caca:	6851      	ldr	r1, [r2, #4]
 800cacc:	68ba      	ldr	r2, [r7, #8]
 800cace:	430a      	orrs	r2, r1
 800cad0:	605a      	str	r2, [r3, #4]
 800cad2:	e030      	b.n	800cb36 <FMC_ITConfig+0xb6>
    }
    /* Enable the selected FMC_Bank5_6 interrupt */
    else
    {
      /* Enables the interrupt if the refresh error flag is set */
      FMC_Bank5_6->SDRTR |= FMC_IT; 
 800cad4:	4b1d      	ldr	r3, [pc, #116]	; (800cb4c <FMC_ITConfig+0xcc>)
 800cad6:	4a1d      	ldr	r2, [pc, #116]	; (800cb4c <FMC_ITConfig+0xcc>)
 800cad8:	6951      	ldr	r1, [r2, #20]
 800cada:	68ba      	ldr	r2, [r7, #8]
 800cadc:	430a      	orrs	r2, r1
 800cade:	615a      	str	r2, [r3, #20]
 800cae0:	e029      	b.n	800cb36 <FMC_ITConfig+0xb6>
    }
  }
  else
  {
    /* Disable the selected FMC_Bank2 interrupts */
    if(FMC_Bank == FMC_Bank2_NAND)
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	2b10      	cmp	r3, #16
 800cae6:	d107      	bne.n	800caf8 <FMC_ITConfig+0x78>
    {
      
      FMC_Bank2->SR2 &= (uint32_t)~FMC_IT;
 800cae8:	4b15      	ldr	r3, [pc, #84]	; (800cb40 <FMC_ITConfig+0xc0>)
 800caea:	4a15      	ldr	r2, [pc, #84]	; (800cb40 <FMC_ITConfig+0xc0>)
 800caec:	6851      	ldr	r1, [r2, #4]
 800caee:	68ba      	ldr	r2, [r7, #8]
 800caf0:	43d2      	mvns	r2, r2
 800caf2:	400a      	ands	r2, r1
 800caf4:	605a      	str	r2, [r3, #4]
 800caf6:	e01e      	b.n	800cb36 <FMC_ITConfig+0xb6>
    }
    /* Disable the selected FMC_Bank3 interrupts */
    else if (FMC_Bank == FMC_Bank3_NAND)
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cafe:	d107      	bne.n	800cb10 <FMC_ITConfig+0x90>
    {
      FMC_Bank3->SR3 &= (uint32_t)~FMC_IT;
 800cb00:	4b10      	ldr	r3, [pc, #64]	; (800cb44 <FMC_ITConfig+0xc4>)
 800cb02:	4a10      	ldr	r2, [pc, #64]	; (800cb44 <FMC_ITConfig+0xc4>)
 800cb04:	6851      	ldr	r1, [r2, #4]
 800cb06:	68ba      	ldr	r2, [r7, #8]
 800cb08:	43d2      	mvns	r2, r2
 800cb0a:	400a      	ands	r2, r1
 800cb0c:	605a      	str	r2, [r3, #4]
 800cb0e:	e012      	b.n	800cb36 <FMC_ITConfig+0xb6>
    }
    /* Disable the selected FMC_Bank4 interrupts */
    else if(FMC_Bank == FMC_Bank4_PCCARD)
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cb16:	d107      	bne.n	800cb28 <FMC_ITConfig+0xa8>
    {
      FMC_Bank4->SR4 &= (uint32_t)~FMC_IT;    
 800cb18:	4b0b      	ldr	r3, [pc, #44]	; (800cb48 <FMC_ITConfig+0xc8>)
 800cb1a:	4a0b      	ldr	r2, [pc, #44]	; (800cb48 <FMC_ITConfig+0xc8>)
 800cb1c:	6851      	ldr	r1, [r2, #4]
 800cb1e:	68ba      	ldr	r2, [r7, #8]
 800cb20:	43d2      	mvns	r2, r2
 800cb22:	400a      	ands	r2, r1
 800cb24:	605a      	str	r2, [r3, #4]
 800cb26:	e006      	b.n	800cb36 <FMC_ITConfig+0xb6>
    }
    /* Disable the selected FMC_Bank5_6 interrupt */
    else
    {
      /* Disables the interrupt if the refresh error flag is not set */
      FMC_Bank5_6->SDRTR &= (uint32_t)~FMC_IT; 
 800cb28:	4b08      	ldr	r3, [pc, #32]	; (800cb4c <FMC_ITConfig+0xcc>)
 800cb2a:	4a08      	ldr	r2, [pc, #32]	; (800cb4c <FMC_ITConfig+0xcc>)
 800cb2c:	6951      	ldr	r1, [r2, #20]
 800cb2e:	68ba      	ldr	r2, [r7, #8]
 800cb30:	43d2      	mvns	r2, r2
 800cb32:	400a      	ands	r2, r1
 800cb34:	615a      	str	r2, [r3, #20]
    }
  }
}
 800cb36:	3714      	adds	r7, #20
 800cb38:	46bd      	mov	sp, r7
 800cb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb3e:	4770      	bx	lr
 800cb40:	a0000060 	.word	0xa0000060
 800cb44:	a0000080 	.word	0xa0000080
 800cb48:	a00000a0 	.word	0xa00000a0
 800cb4c:	a0000140 	.word	0xa0000140

0800cb50 <FMC_GetFlagStatus>:
  *            @arg FMC_FLAG_Refresh: Refresh error Flag.
  *            @arg FMC_FLAG_Busy: Busy status Flag.     
  * @retval The new state of FMC_FLAG (SET or RESET).
  */
FlagStatus FMC_GetFlagStatus(uint32_t FMC_Bank, uint32_t FMC_FLAG)
{
 800cb50:	b480      	push	{r7}
 800cb52:	b085      	sub	sp, #20
 800cb54:	af00      	add	r7, sp, #0
 800cb56:	6078      	str	r0, [r7, #4]
 800cb58:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 800cb5a:	2300      	movs	r3, #0
 800cb5c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsr = 0x00000000;
 800cb5e:	2300      	movs	r3, #0
 800cb60:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_FMC_GETFLAG_BANK(FMC_Bank));
  assert_param(IS_FMC_GET_FLAG(FMC_FLAG));
  
  if(FMC_Bank == FMC_Bank2_NAND)
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	2b10      	cmp	r3, #16
 800cb66:	d103      	bne.n	800cb70 <FMC_GetFlagStatus+0x20>
  {
    tmpsr = FMC_Bank2->SR2;
 800cb68:	4b14      	ldr	r3, [pc, #80]	; (800cbbc <FMC_GetFlagStatus+0x6c>)
 800cb6a:	685b      	ldr	r3, [r3, #4]
 800cb6c:	60bb      	str	r3, [r7, #8]
 800cb6e:	e012      	b.n	800cb96 <FMC_GetFlagStatus+0x46>
  }  
  else if(FMC_Bank == FMC_Bank3_NAND)
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cb76:	d103      	bne.n	800cb80 <FMC_GetFlagStatus+0x30>
  {
    tmpsr = FMC_Bank3->SR3;
 800cb78:	4b11      	ldr	r3, [pc, #68]	; (800cbc0 <FMC_GetFlagStatus+0x70>)
 800cb7a:	685b      	ldr	r3, [r3, #4]
 800cb7c:	60bb      	str	r3, [r7, #8]
 800cb7e:	e00a      	b.n	800cb96 <FMC_GetFlagStatus+0x46>
  }
  else if(FMC_Bank == FMC_Bank4_PCCARD)
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cb86:	d103      	bne.n	800cb90 <FMC_GetFlagStatus+0x40>
  {
    tmpsr = FMC_Bank4->SR4;
 800cb88:	4b0e      	ldr	r3, [pc, #56]	; (800cbc4 <FMC_GetFlagStatus+0x74>)
 800cb8a:	685b      	ldr	r3, [r3, #4]
 800cb8c:	60bb      	str	r3, [r7, #8]
 800cb8e:	e002      	b.n	800cb96 <FMC_GetFlagStatus+0x46>
  }
  else 
  {
    tmpsr = FMC_Bank5_6->SDSR;
 800cb90:	4b0d      	ldr	r3, [pc, #52]	; (800cbc8 <FMC_GetFlagStatus+0x78>)
 800cb92:	699b      	ldr	r3, [r3, #24]
 800cb94:	60bb      	str	r3, [r7, #8]
  }
  
  /* Get the flag status */
  if ((tmpsr & FMC_FLAG) != FMC_FLAG )
 800cb96:	68ba      	ldr	r2, [r7, #8]
 800cb98:	683b      	ldr	r3, [r7, #0]
 800cb9a:	401a      	ands	r2, r3
 800cb9c:	683b      	ldr	r3, [r7, #0]
 800cb9e:	429a      	cmp	r2, r3
 800cba0:	d002      	beq.n	800cba8 <FMC_GetFlagStatus+0x58>
  {
    bitstatus = RESET;
 800cba2:	2300      	movs	r3, #0
 800cba4:	73fb      	strb	r3, [r7, #15]
 800cba6:	e001      	b.n	800cbac <FMC_GetFlagStatus+0x5c>
  }
  else
  {
    bitstatus = SET;
 800cba8:	2301      	movs	r3, #1
 800cbaa:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the flag status */
  return bitstatus;
 800cbac:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbae:	4618      	mov	r0, r3
 800cbb0:	3714      	adds	r7, #20
 800cbb2:	46bd      	mov	sp, r7
 800cbb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb8:	4770      	bx	lr
 800cbba:	bf00      	nop
 800cbbc:	a0000060 	.word	0xa0000060
 800cbc0:	a0000080 	.word	0xa0000080
 800cbc4:	a00000a0 	.word	0xa00000a0
 800cbc8:	a0000140 	.word	0xa0000140

0800cbcc <FMC_ClearFlag>:
  *            @arg FMC_FLAG_FallingEdge: Falling edge detection Flag.
  *            @arg FMC_FLAG_Refresh: Refresh error Flag.  
  * @retval None
  */
void FMC_ClearFlag(uint32_t FMC_Bank, uint32_t FMC_FLAG)
{
 800cbcc:	b480      	push	{r7}
 800cbce:	b083      	sub	sp, #12
 800cbd0:	af00      	add	r7, sp, #0
 800cbd2:	6078      	str	r0, [r7, #4]
 800cbd4:	6039      	str	r1, [r7, #0]
 /* Check the parameters */
  assert_param(IS_FMC_GETFLAG_BANK(FMC_Bank));
  assert_param(IS_FMC_CLEAR_FLAG(FMC_FLAG)) ;
    
  if(FMC_Bank == FMC_Bank2_NAND)
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	2b10      	cmp	r3, #16
 800cbda:	d107      	bne.n	800cbec <FMC_ClearFlag+0x20>
  {
    FMC_Bank2->SR2 &= (~FMC_FLAG); 
 800cbdc:	4b15      	ldr	r3, [pc, #84]	; (800cc34 <FMC_ClearFlag+0x68>)
 800cbde:	4a15      	ldr	r2, [pc, #84]	; (800cc34 <FMC_ClearFlag+0x68>)
 800cbe0:	6851      	ldr	r1, [r2, #4]
 800cbe2:	683a      	ldr	r2, [r7, #0]
 800cbe4:	43d2      	mvns	r2, r2
 800cbe6:	400a      	ands	r2, r1
 800cbe8:	605a      	str	r2, [r3, #4]
 800cbea:	e01e      	b.n	800cc2a <FMC_ClearFlag+0x5e>
  }  
  else if(FMC_Bank == FMC_Bank3_NAND)
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cbf2:	d107      	bne.n	800cc04 <FMC_ClearFlag+0x38>
  {
    FMC_Bank3->SR3 &= (~FMC_FLAG);
 800cbf4:	4b10      	ldr	r3, [pc, #64]	; (800cc38 <FMC_ClearFlag+0x6c>)
 800cbf6:	4a10      	ldr	r2, [pc, #64]	; (800cc38 <FMC_ClearFlag+0x6c>)
 800cbf8:	6851      	ldr	r1, [r2, #4]
 800cbfa:	683a      	ldr	r2, [r7, #0]
 800cbfc:	43d2      	mvns	r2, r2
 800cbfe:	400a      	ands	r2, r1
 800cc00:	605a      	str	r2, [r3, #4]
 800cc02:	e012      	b.n	800cc2a <FMC_ClearFlag+0x5e>
  }
  else if(FMC_Bank == FMC_Bank4_PCCARD)
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cc0a:	d107      	bne.n	800cc1c <FMC_ClearFlag+0x50>
  {
    FMC_Bank4->SR4 &= (~FMC_FLAG);
 800cc0c:	4b0b      	ldr	r3, [pc, #44]	; (800cc3c <FMC_ClearFlag+0x70>)
 800cc0e:	4a0b      	ldr	r2, [pc, #44]	; (800cc3c <FMC_ClearFlag+0x70>)
 800cc10:	6851      	ldr	r1, [r2, #4]
 800cc12:	683a      	ldr	r2, [r7, #0]
 800cc14:	43d2      	mvns	r2, r2
 800cc16:	400a      	ands	r2, r1
 800cc18:	605a      	str	r2, [r3, #4]
 800cc1a:	e006      	b.n	800cc2a <FMC_ClearFlag+0x5e>
  }
  /* FMC_Bank5_6 SDRAM*/
  else
  {
    FMC_Bank5_6->SDRTR &= (~FMC_FLAG);
 800cc1c:	4b08      	ldr	r3, [pc, #32]	; (800cc40 <FMC_ClearFlag+0x74>)
 800cc1e:	4a08      	ldr	r2, [pc, #32]	; (800cc40 <FMC_ClearFlag+0x74>)
 800cc20:	6951      	ldr	r1, [r2, #20]
 800cc22:	683a      	ldr	r2, [r7, #0]
 800cc24:	43d2      	mvns	r2, r2
 800cc26:	400a      	ands	r2, r1
 800cc28:	615a      	str	r2, [r3, #20]
  }
  
}
 800cc2a:	370c      	adds	r7, #12
 800cc2c:	46bd      	mov	sp, r7
 800cc2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc32:	4770      	bx	lr
 800cc34:	a0000060 	.word	0xa0000060
 800cc38:	a0000080 	.word	0xa0000080
 800cc3c:	a00000a0 	.word	0xa00000a0
 800cc40:	a0000140 	.word	0xa0000140

0800cc44 <FMC_GetITStatus>:
  *            @arg FMC_IT_FallingEdge: Falling edge detection interrupt.
  *            @arg FMC_IT_Refresh: Refresh error detection interrupt.    
  * @retval The new state of FMC_IT (SET or RESET).
  */
ITStatus FMC_GetITStatus(uint32_t FMC_Bank, uint32_t FMC_IT)
{
 800cc44:	b480      	push	{r7}
 800cc46:	b089      	sub	sp, #36	; 0x24
 800cc48:	af00      	add	r7, sp, #0
 800cc4a:	6078      	str	r0, [r7, #4]
 800cc4c:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 800cc4e:	2300      	movs	r3, #0
 800cc50:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpsr = 0x0;
 800cc52:	2300      	movs	r3, #0
 800cc54:	61bb      	str	r3, [r7, #24]
  uint32_t tmpsr2 = 0x0;
 800cc56:	2300      	movs	r3, #0
 800cc58:	617b      	str	r3, [r7, #20]
  uint32_t itstatus = 0x0;
 800cc5a:	2300      	movs	r3, #0
 800cc5c:	613b      	str	r3, [r7, #16]
  uint32_t itenable = 0x0; 
 800cc5e:	2300      	movs	r3, #0
 800cc60:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_FMC_IT_BANK(FMC_Bank));
  assert_param(IS_FMC_GET_IT(FMC_IT));
  
  if(FMC_Bank == FMC_Bank2_NAND)
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	2b10      	cmp	r3, #16
 800cc66:	d103      	bne.n	800cc70 <FMC_GetITStatus+0x2c>
  {
    tmpsr = FMC_Bank2->SR2;
 800cc68:	4b1f      	ldr	r3, [pc, #124]	; (800cce8 <FMC_GetITStatus+0xa4>)
 800cc6a:	685b      	ldr	r3, [r3, #4]
 800cc6c:	61bb      	str	r3, [r7, #24]
 800cc6e:	e015      	b.n	800cc9c <FMC_GetITStatus+0x58>
  }  
  else if(FMC_Bank == FMC_Bank3_NAND)
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cc76:	d103      	bne.n	800cc80 <FMC_GetITStatus+0x3c>
  {
    tmpsr = FMC_Bank3->SR3;
 800cc78:	4b1c      	ldr	r3, [pc, #112]	; (800ccec <FMC_GetITStatus+0xa8>)
 800cc7a:	685b      	ldr	r3, [r3, #4]
 800cc7c:	61bb      	str	r3, [r7, #24]
 800cc7e:	e00d      	b.n	800cc9c <FMC_GetITStatus+0x58>
  }
  else if(FMC_Bank == FMC_Bank4_PCCARD)
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cc86:	d103      	bne.n	800cc90 <FMC_GetITStatus+0x4c>
  {
    tmpsr = FMC_Bank4->SR4;
 800cc88:	4b19      	ldr	r3, [pc, #100]	; (800ccf0 <FMC_GetITStatus+0xac>)
 800cc8a:	685b      	ldr	r3, [r3, #4]
 800cc8c:	61bb      	str	r3, [r7, #24]
 800cc8e:	e005      	b.n	800cc9c <FMC_GetITStatus+0x58>
  }
  /* FMC_Bank5_6 SDRAM*/
  else
  {
    tmpsr = FMC_Bank5_6->SDRTR;
 800cc90:	4b18      	ldr	r3, [pc, #96]	; (800ccf4 <FMC_GetITStatus+0xb0>)
 800cc92:	695b      	ldr	r3, [r3, #20]
 800cc94:	61bb      	str	r3, [r7, #24]
    tmpsr2 = FMC_Bank5_6->SDSR;
 800cc96:	4b17      	ldr	r3, [pc, #92]	; (800ccf4 <FMC_GetITStatus+0xb0>)
 800cc98:	699b      	ldr	r3, [r3, #24]
 800cc9a:	617b      	str	r3, [r7, #20]
  } 
  
  /* get the IT enable bit status*/
  itenable = tmpsr & FMC_IT;
 800cc9c:	69ba      	ldr	r2, [r7, #24]
 800cc9e:	683b      	ldr	r3, [r7, #0]
 800cca0:	4013      	ands	r3, r2
 800cca2:	60fb      	str	r3, [r7, #12]
  
  /* get the corresponding IT Flag status*/
  if((FMC_Bank == FMC_Bank1_SDRAM) || (FMC_Bank == FMC_Bank2_SDRAM))
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d002      	beq.n	800ccb0 <FMC_GetITStatus+0x6c>
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	2b01      	cmp	r3, #1
 800ccae:	d104      	bne.n	800ccba <FMC_GetITStatus+0x76>
  {
    itstatus = tmpsr2 & FMC_SDSR_RE;  
 800ccb0:	697b      	ldr	r3, [r7, #20]
 800ccb2:	f003 0301 	and.w	r3, r3, #1
 800ccb6:	613b      	str	r3, [r7, #16]
 800ccb8:	e004      	b.n	800ccc4 <FMC_GetITStatus+0x80>
  }           
  else
  {
    itstatus = tmpsr & (FMC_IT >> 3);  
 800ccba:	683b      	ldr	r3, [r7, #0]
 800ccbc:	08da      	lsrs	r2, r3, #3
 800ccbe:	69bb      	ldr	r3, [r7, #24]
 800ccc0:	4013      	ands	r3, r2
 800ccc2:	613b      	str	r3, [r7, #16]
  }  
  
  if ((itstatus != (uint32_t)RESET)  && (itenable != (uint32_t)RESET))
 800ccc4:	693b      	ldr	r3, [r7, #16]
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d005      	beq.n	800ccd6 <FMC_GetITStatus+0x92>
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d002      	beq.n	800ccd6 <FMC_GetITStatus+0x92>
  {
    bitstatus = SET;
 800ccd0:	2301      	movs	r3, #1
 800ccd2:	77fb      	strb	r3, [r7, #31]
 800ccd4:	e001      	b.n	800ccda <FMC_GetITStatus+0x96>
  }
  else
  {
    bitstatus = RESET;
 800ccd6:	2300      	movs	r3, #0
 800ccd8:	77fb      	strb	r3, [r7, #31]
  }
  return bitstatus; 
 800ccda:	7ffb      	ldrb	r3, [r7, #31]
}
 800ccdc:	4618      	mov	r0, r3
 800ccde:	3724      	adds	r7, #36	; 0x24
 800cce0:	46bd      	mov	sp, r7
 800cce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce6:	4770      	bx	lr
 800cce8:	a0000060 	.word	0xa0000060
 800ccec:	a0000080 	.word	0xa0000080
 800ccf0:	a00000a0 	.word	0xa00000a0
 800ccf4:	a0000140 	.word	0xa0000140

0800ccf8 <FMC_ClearITPendingBit>:
  *            @arg FMC_IT_FallingEdge: Falling edge detection interrupt.
  *            @arg FMC_IT_Refresh: Refresh error detection interrupt.  
  * @retval None
  */
void FMC_ClearITPendingBit(uint32_t FMC_Bank, uint32_t FMC_IT)
{
 800ccf8:	b480      	push	{r7}
 800ccfa:	b083      	sub	sp, #12
 800ccfc:	af00      	add	r7, sp, #0
 800ccfe:	6078      	str	r0, [r7, #4]
 800cd00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_IT_BANK(FMC_Bank));
  assert_param(IS_FMC_IT(FMC_IT));
    
  if(FMC_Bank == FMC_Bank2_NAND)
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	2b10      	cmp	r3, #16
 800cd06:	d108      	bne.n	800cd1a <FMC_ClearITPendingBit+0x22>
  {
    FMC_Bank2->SR2 &= ~(FMC_IT >> 3); 
 800cd08:	4b16      	ldr	r3, [pc, #88]	; (800cd64 <FMC_ClearITPendingBit+0x6c>)
 800cd0a:	4a16      	ldr	r2, [pc, #88]	; (800cd64 <FMC_ClearITPendingBit+0x6c>)
 800cd0c:	6851      	ldr	r1, [r2, #4]
 800cd0e:	683a      	ldr	r2, [r7, #0]
 800cd10:	08d2      	lsrs	r2, r2, #3
 800cd12:	43d2      	mvns	r2, r2
 800cd14:	400a      	ands	r2, r1
 800cd16:	605a      	str	r2, [r3, #4]
 800cd18:	e01f      	b.n	800cd5a <FMC_ClearITPendingBit+0x62>
  }  
  else if(FMC_Bank == FMC_Bank3_NAND)
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cd20:	d108      	bne.n	800cd34 <FMC_ClearITPendingBit+0x3c>
  {
    FMC_Bank3->SR3 &= ~(FMC_IT >> 3);
 800cd22:	4b11      	ldr	r3, [pc, #68]	; (800cd68 <FMC_ClearITPendingBit+0x70>)
 800cd24:	4a10      	ldr	r2, [pc, #64]	; (800cd68 <FMC_ClearITPendingBit+0x70>)
 800cd26:	6851      	ldr	r1, [r2, #4]
 800cd28:	683a      	ldr	r2, [r7, #0]
 800cd2a:	08d2      	lsrs	r2, r2, #3
 800cd2c:	43d2      	mvns	r2, r2
 800cd2e:	400a      	ands	r2, r1
 800cd30:	605a      	str	r2, [r3, #4]
 800cd32:	e012      	b.n	800cd5a <FMC_ClearITPendingBit+0x62>
  }
  else if(FMC_Bank == FMC_Bank4_PCCARD)
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cd3a:	d108      	bne.n	800cd4e <FMC_ClearITPendingBit+0x56>
  {
    FMC_Bank4->SR4 &= ~(FMC_IT >> 3);
 800cd3c:	4b0b      	ldr	r3, [pc, #44]	; (800cd6c <FMC_ClearITPendingBit+0x74>)
 800cd3e:	4a0b      	ldr	r2, [pc, #44]	; (800cd6c <FMC_ClearITPendingBit+0x74>)
 800cd40:	6851      	ldr	r1, [r2, #4]
 800cd42:	683a      	ldr	r2, [r7, #0]
 800cd44:	08d2      	lsrs	r2, r2, #3
 800cd46:	43d2      	mvns	r2, r2
 800cd48:	400a      	ands	r2, r1
 800cd4a:	605a      	str	r2, [r3, #4]
 800cd4c:	e005      	b.n	800cd5a <FMC_ClearITPendingBit+0x62>
  }
  /* FMC_Bank5_6 SDRAM*/
  else
  {
    FMC_Bank5_6->SDRTR |= FMC_SDRTR_CRE;
 800cd4e:	4b08      	ldr	r3, [pc, #32]	; (800cd70 <FMC_ClearITPendingBit+0x78>)
 800cd50:	4a07      	ldr	r2, [pc, #28]	; (800cd70 <FMC_ClearITPendingBit+0x78>)
 800cd52:	6952      	ldr	r2, [r2, #20]
 800cd54:	f042 0201 	orr.w	r2, r2, #1
 800cd58:	615a      	str	r2, [r3, #20]
  }
}
 800cd5a:	370c      	adds	r7, #12
 800cd5c:	46bd      	mov	sp, r7
 800cd5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd62:	4770      	bx	lr
 800cd64:	a0000060 	.word	0xa0000060
 800cd68:	a0000080 	.word	0xa0000080
 800cd6c:	a00000a0 	.word	0xa00000a0
 800cd70:	a0000140 	.word	0xa0000140

0800cd74 <GPIO_DeInit>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices.  
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 800cd74:	b580      	push	{r7, lr}
 800cd76:	b082      	sub	sp, #8
 800cd78:	af00      	add	r7, sp, #0
 800cd7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
 800cd7c:	687a      	ldr	r2, [r7, #4]
 800cd7e:	4b4b      	ldr	r3, [pc, #300]	; (800ceac <GPIO_DeInit+0x138>)
 800cd80:	429a      	cmp	r2, r3
 800cd82:	d108      	bne.n	800cd96 <GPIO_DeInit+0x22>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 800cd84:	2001      	movs	r0, #1
 800cd86:	2101      	movs	r1, #1
 800cd88:	f002 ffe4 	bl	800fd54 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
 800cd8c:	2001      	movs	r0, #1
 800cd8e:	2100      	movs	r1, #0
 800cd90:	f002 ffe0 	bl	800fd54 <RCC_AHB1PeriphResetCmd>
 800cd94:	e086      	b.n	800cea4 <GPIO_DeInit+0x130>
  }
  else if (GPIOx == GPIOB)
 800cd96:	687a      	ldr	r2, [r7, #4]
 800cd98:	4b45      	ldr	r3, [pc, #276]	; (800ceb0 <GPIO_DeInit+0x13c>)
 800cd9a:	429a      	cmp	r2, r3
 800cd9c:	d108      	bne.n	800cdb0 <GPIO_DeInit+0x3c>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 800cd9e:	2002      	movs	r0, #2
 800cda0:	2101      	movs	r1, #1
 800cda2:	f002 ffd7 	bl	800fd54 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
 800cda6:	2002      	movs	r0, #2
 800cda8:	2100      	movs	r1, #0
 800cdaa:	f002 ffd3 	bl	800fd54 <RCC_AHB1PeriphResetCmd>
 800cdae:	e079      	b.n	800cea4 <GPIO_DeInit+0x130>
  }
  else if (GPIOx == GPIOC)
 800cdb0:	687a      	ldr	r2, [r7, #4]
 800cdb2:	4b40      	ldr	r3, [pc, #256]	; (800ceb4 <GPIO_DeInit+0x140>)
 800cdb4:	429a      	cmp	r2, r3
 800cdb6:	d108      	bne.n	800cdca <GPIO_DeInit+0x56>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 800cdb8:	2004      	movs	r0, #4
 800cdba:	2101      	movs	r1, #1
 800cdbc:	f002 ffca 	bl	800fd54 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
 800cdc0:	2004      	movs	r0, #4
 800cdc2:	2100      	movs	r1, #0
 800cdc4:	f002 ffc6 	bl	800fd54 <RCC_AHB1PeriphResetCmd>
 800cdc8:	e06c      	b.n	800cea4 <GPIO_DeInit+0x130>
  }
  else if (GPIOx == GPIOD)
 800cdca:	687a      	ldr	r2, [r7, #4]
 800cdcc:	4b3a      	ldr	r3, [pc, #232]	; (800ceb8 <GPIO_DeInit+0x144>)
 800cdce:	429a      	cmp	r2, r3
 800cdd0:	d108      	bne.n	800cde4 <GPIO_DeInit+0x70>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 800cdd2:	2008      	movs	r0, #8
 800cdd4:	2101      	movs	r1, #1
 800cdd6:	f002 ffbd 	bl	800fd54 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
 800cdda:	2008      	movs	r0, #8
 800cddc:	2100      	movs	r1, #0
 800cdde:	f002 ffb9 	bl	800fd54 <RCC_AHB1PeriphResetCmd>
 800cde2:	e05f      	b.n	800cea4 <GPIO_DeInit+0x130>
  }
  else if (GPIOx == GPIOE)
 800cde4:	687a      	ldr	r2, [r7, #4]
 800cde6:	4b35      	ldr	r3, [pc, #212]	; (800cebc <GPIO_DeInit+0x148>)
 800cde8:	429a      	cmp	r2, r3
 800cdea:	d108      	bne.n	800cdfe <GPIO_DeInit+0x8a>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 800cdec:	2010      	movs	r0, #16
 800cdee:	2101      	movs	r1, #1
 800cdf0:	f002 ffb0 	bl	800fd54 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
 800cdf4:	2010      	movs	r0, #16
 800cdf6:	2100      	movs	r1, #0
 800cdf8:	f002 ffac 	bl	800fd54 <RCC_AHB1PeriphResetCmd>
 800cdfc:	e052      	b.n	800cea4 <GPIO_DeInit+0x130>
  }
  else if (GPIOx == GPIOF)
 800cdfe:	687a      	ldr	r2, [r7, #4]
 800ce00:	4b2f      	ldr	r3, [pc, #188]	; (800cec0 <GPIO_DeInit+0x14c>)
 800ce02:	429a      	cmp	r2, r3
 800ce04:	d108      	bne.n	800ce18 <GPIO_DeInit+0xa4>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
 800ce06:	2020      	movs	r0, #32
 800ce08:	2101      	movs	r1, #1
 800ce0a:	f002 ffa3 	bl	800fd54 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
 800ce0e:	2020      	movs	r0, #32
 800ce10:	2100      	movs	r1, #0
 800ce12:	f002 ff9f 	bl	800fd54 <RCC_AHB1PeriphResetCmd>
 800ce16:	e045      	b.n	800cea4 <GPIO_DeInit+0x130>
  }
  else if (GPIOx == GPIOG)
 800ce18:	687a      	ldr	r2, [r7, #4]
 800ce1a:	4b2a      	ldr	r3, [pc, #168]	; (800cec4 <GPIO_DeInit+0x150>)
 800ce1c:	429a      	cmp	r2, r3
 800ce1e:	d108      	bne.n	800ce32 <GPIO_DeInit+0xbe>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
 800ce20:	2040      	movs	r0, #64	; 0x40
 800ce22:	2101      	movs	r1, #1
 800ce24:	f002 ff96 	bl	800fd54 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
 800ce28:	2040      	movs	r0, #64	; 0x40
 800ce2a:	2100      	movs	r1, #0
 800ce2c:	f002 ff92 	bl	800fd54 <RCC_AHB1PeriphResetCmd>
 800ce30:	e038      	b.n	800cea4 <GPIO_DeInit+0x130>
  }
  else if (GPIOx == GPIOH)
 800ce32:	687a      	ldr	r2, [r7, #4]
 800ce34:	4b24      	ldr	r3, [pc, #144]	; (800cec8 <GPIO_DeInit+0x154>)
 800ce36:	429a      	cmp	r2, r3
 800ce38:	d108      	bne.n	800ce4c <GPIO_DeInit+0xd8>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
 800ce3a:	2080      	movs	r0, #128	; 0x80
 800ce3c:	2101      	movs	r1, #1
 800ce3e:	f002 ff89 	bl	800fd54 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
 800ce42:	2080      	movs	r0, #128	; 0x80
 800ce44:	2100      	movs	r1, #0
 800ce46:	f002 ff85 	bl	800fd54 <RCC_AHB1PeriphResetCmd>
 800ce4a:	e02b      	b.n	800cea4 <GPIO_DeInit+0x130>
  }

  else if (GPIOx == GPIOI)
 800ce4c:	687a      	ldr	r2, [r7, #4]
 800ce4e:	4b1f      	ldr	r3, [pc, #124]	; (800cecc <GPIO_DeInit+0x158>)
 800ce50:	429a      	cmp	r2, r3
 800ce52:	d10a      	bne.n	800ce6a <GPIO_DeInit+0xf6>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
 800ce54:	f44f 7080 	mov.w	r0, #256	; 0x100
 800ce58:	2101      	movs	r1, #1
 800ce5a:	f002 ff7b 	bl	800fd54 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
 800ce5e:	f44f 7080 	mov.w	r0, #256	; 0x100
 800ce62:	2100      	movs	r1, #0
 800ce64:	f002 ff76 	bl	800fd54 <RCC_AHB1PeriphResetCmd>
 800ce68:	e01c      	b.n	800cea4 <GPIO_DeInit+0x130>
  }
  else if (GPIOx == GPIOJ)
 800ce6a:	687a      	ldr	r2, [r7, #4]
 800ce6c:	4b18      	ldr	r3, [pc, #96]	; (800ced0 <GPIO_DeInit+0x15c>)
 800ce6e:	429a      	cmp	r2, r3
 800ce70:	d10a      	bne.n	800ce88 <GPIO_DeInit+0x114>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, ENABLE);
 800ce72:	f44f 7000 	mov.w	r0, #512	; 0x200
 800ce76:	2101      	movs	r1, #1
 800ce78:	f002 ff6c 	bl	800fd54 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, DISABLE);
 800ce7c:	f44f 7000 	mov.w	r0, #512	; 0x200
 800ce80:	2100      	movs	r1, #0
 800ce82:	f002 ff67 	bl	800fd54 <RCC_AHB1PeriphResetCmd>
 800ce86:	e00d      	b.n	800cea4 <GPIO_DeInit+0x130>
  }
  else
  {
    if (GPIOx == GPIOK)
 800ce88:	687a      	ldr	r2, [r7, #4]
 800ce8a:	4b12      	ldr	r3, [pc, #72]	; (800ced4 <GPIO_DeInit+0x160>)
 800ce8c:	429a      	cmp	r2, r3
 800ce8e:	d109      	bne.n	800cea4 <GPIO_DeInit+0x130>
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
 800ce90:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800ce94:	2101      	movs	r1, #1
 800ce96:	f002 ff5d 	bl	800fd54 <RCC_AHB1PeriphResetCmd>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
 800ce9a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800ce9e:	2100      	movs	r1, #0
 800cea0:	f002 ff58 	bl	800fd54 <RCC_AHB1PeriphResetCmd>
    }
  }
}
 800cea4:	3708      	adds	r7, #8
 800cea6:	46bd      	mov	sp, r7
 800cea8:	bd80      	pop	{r7, pc}
 800ceaa:	bf00      	nop
 800ceac:	40020000 	.word	0x40020000
 800ceb0:	40020400 	.word	0x40020400
 800ceb4:	40020800 	.word	0x40020800
 800ceb8:	40020c00 	.word	0x40020c00
 800cebc:	40021000 	.word	0x40021000
 800cec0:	40021400 	.word	0x40021400
 800cec4:	40021800 	.word	0x40021800
 800cec8:	40021c00 	.word	0x40021c00
 800cecc:	40022000 	.word	0x40022000
 800ced0:	40022400 	.word	0x40022400
 800ced4:	40022800 	.word	0x40022800

0800ced8 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 800ced8:	b480      	push	{r7}
 800ceda:	b087      	sub	sp, #28
 800cedc:	af00      	add	r7, sp, #0
 800cede:	6078      	str	r0, [r7, #4]
 800cee0:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 800cee2:	2300      	movs	r3, #0
 800cee4:	617b      	str	r3, [r7, #20]
 800cee6:	2300      	movs	r3, #0
 800cee8:	613b      	str	r3, [r7, #16]
 800ceea:	2300      	movs	r3, #0
 800ceec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800ceee:	2300      	movs	r3, #0
 800cef0:	617b      	str	r3, [r7, #20]
 800cef2:	e076      	b.n	800cfe2 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 800cef4:	697b      	ldr	r3, [r7, #20]
 800cef6:	2201      	movs	r2, #1
 800cef8:	fa02 f303 	lsl.w	r3, r2, r3
 800cefc:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800cefe:	683b      	ldr	r3, [r7, #0]
 800cf00:	681a      	ldr	r2, [r3, #0]
 800cf02:	693b      	ldr	r3, [r7, #16]
 800cf04:	4013      	ands	r3, r2
 800cf06:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 800cf08:	68fa      	ldr	r2, [r7, #12]
 800cf0a:	693b      	ldr	r3, [r7, #16]
 800cf0c:	429a      	cmp	r2, r3
 800cf0e:	d165      	bne.n	800cfdc <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	681a      	ldr	r2, [r3, #0]
 800cf14:	697b      	ldr	r3, [r7, #20]
 800cf16:	005b      	lsls	r3, r3, #1
 800cf18:	2103      	movs	r1, #3
 800cf1a:	fa01 f303 	lsl.w	r3, r1, r3
 800cf1e:	43db      	mvns	r3, r3
 800cf20:	401a      	ands	r2, r3
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	681a      	ldr	r2, [r3, #0]
 800cf2a:	683b      	ldr	r3, [r7, #0]
 800cf2c:	791b      	ldrb	r3, [r3, #4]
 800cf2e:	4619      	mov	r1, r3
 800cf30:	697b      	ldr	r3, [r7, #20]
 800cf32:	005b      	lsls	r3, r3, #1
 800cf34:	fa01 f303 	lsl.w	r3, r1, r3
 800cf38:	431a      	orrs	r2, r3
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800cf3e:	683b      	ldr	r3, [r7, #0]
 800cf40:	791b      	ldrb	r3, [r3, #4]
 800cf42:	2b01      	cmp	r3, #1
 800cf44:	d003      	beq.n	800cf4e <GPIO_Init+0x76>
 800cf46:	683b      	ldr	r3, [r7, #0]
 800cf48:	791b      	ldrb	r3, [r3, #4]
 800cf4a:	2b02      	cmp	r3, #2
 800cf4c:	d12e      	bne.n	800cfac <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	689a      	ldr	r2, [r3, #8]
 800cf52:	697b      	ldr	r3, [r7, #20]
 800cf54:	005b      	lsls	r3, r3, #1
 800cf56:	2103      	movs	r1, #3
 800cf58:	fa01 f303 	lsl.w	r3, r1, r3
 800cf5c:	43db      	mvns	r3, r3
 800cf5e:	401a      	ands	r2, r3
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	689a      	ldr	r2, [r3, #8]
 800cf68:	683b      	ldr	r3, [r7, #0]
 800cf6a:	795b      	ldrb	r3, [r3, #5]
 800cf6c:	4619      	mov	r1, r3
 800cf6e:	697b      	ldr	r3, [r7, #20]
 800cf70:	005b      	lsls	r3, r3, #1
 800cf72:	fa01 f303 	lsl.w	r3, r1, r3
 800cf76:	431a      	orrs	r2, r3
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	685a      	ldr	r2, [r3, #4]
 800cf80:	697b      	ldr	r3, [r7, #20]
 800cf82:	b29b      	uxth	r3, r3
 800cf84:	2101      	movs	r1, #1
 800cf86:	fa01 f303 	lsl.w	r3, r1, r3
 800cf8a:	43db      	mvns	r3, r3
 800cf8c:	401a      	ands	r2, r3
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	685a      	ldr	r2, [r3, #4]
 800cf96:	683b      	ldr	r3, [r7, #0]
 800cf98:	799b      	ldrb	r3, [r3, #6]
 800cf9a:	4619      	mov	r1, r3
 800cf9c:	697b      	ldr	r3, [r7, #20]
 800cf9e:	b29b      	uxth	r3, r3
 800cfa0:	fa01 f303 	lsl.w	r3, r1, r3
 800cfa4:	b29b      	uxth	r3, r3
 800cfa6:	431a      	orrs	r2, r3
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	68da      	ldr	r2, [r3, #12]
 800cfb0:	697b      	ldr	r3, [r7, #20]
 800cfb2:	b29b      	uxth	r3, r3
 800cfb4:	005b      	lsls	r3, r3, #1
 800cfb6:	2103      	movs	r1, #3
 800cfb8:	fa01 f303 	lsl.w	r3, r1, r3
 800cfbc:	43db      	mvns	r3, r3
 800cfbe:	401a      	ands	r2, r3
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	68da      	ldr	r2, [r3, #12]
 800cfc8:	683b      	ldr	r3, [r7, #0]
 800cfca:	79db      	ldrb	r3, [r3, #7]
 800cfcc:	4619      	mov	r1, r3
 800cfce:	697b      	ldr	r3, [r7, #20]
 800cfd0:	005b      	lsls	r3, r3, #1
 800cfd2:	fa01 f303 	lsl.w	r3, r1, r3
 800cfd6:	431a      	orrs	r2, r3
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800cfdc:	697b      	ldr	r3, [r7, #20]
 800cfde:	3301      	adds	r3, #1
 800cfe0:	617b      	str	r3, [r7, #20]
 800cfe2:	697b      	ldr	r3, [r7, #20]
 800cfe4:	2b0f      	cmp	r3, #15
 800cfe6:	d985      	bls.n	800cef4 <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 800cfe8:	371c      	adds	r7, #28
 800cfea:	46bd      	mov	sp, r7
 800cfec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff0:	4770      	bx	lr
 800cff2:	bf00      	nop

0800cff4 <GPIO_StructInit>:
  * @brief  Fills each GPIO_InitStruct member with its default value.
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 800cff4:	b480      	push	{r7}
 800cff6:	b083      	sub	sp, #12
 800cff8:	af00      	add	r7, sp, #0
 800cffa:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d002:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	2200      	movs	r2, #0
 800d008:	711a      	strb	r2, [r3, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	2200      	movs	r2, #0
 800d00e:	715a      	strb	r2, [r3, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	2200      	movs	r2, #0
 800d014:	719a      	strb	r2, [r3, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	2200      	movs	r2, #0
 800d01a:	71da      	strb	r2, [r3, #7]
}
 800d01c:	370c      	adds	r7, #12
 800d01e:	46bd      	mov	sp, r7
 800d020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d024:	4770      	bx	lr
 800d026:	bf00      	nop

0800d028 <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be locked.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800d028:	b480      	push	{r7}
 800d02a:	b085      	sub	sp, #20
 800d02c:	af00      	add	r7, sp, #0
 800d02e:	6078      	str	r0, [r7, #4]
 800d030:	460b      	mov	r3, r1
 800d032:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0x00010000;
 800d034:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800d038:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
 800d03a:	887a      	ldrh	r2, [r7, #2]
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	4313      	orrs	r3, r2
 800d040:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 800d042:	68fa      	ldr	r2, [r7, #12]
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	61da      	str	r2, [r3, #28]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 800d048:	887a      	ldrh	r2, [r7, #2]
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	61da      	str	r2, [r3, #28]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 800d04e:	68fa      	ldr	r2, [r7, #12]
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	61da      	str	r2, [r3, #28]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	69db      	ldr	r3, [r3, #28]
 800d058:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	69db      	ldr	r3, [r3, #28]
 800d05e:	60fb      	str	r3, [r7, #12]
}
 800d060:	3714      	adds	r7, #20
 800d062:	46bd      	mov	sp, r7
 800d064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d068:	4770      	bx	lr
 800d06a:	bf00      	nop

0800d06c <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800d06c:	b480      	push	{r7}
 800d06e:	b085      	sub	sp, #20
 800d070:	af00      	add	r7, sp, #0
 800d072:	6078      	str	r0, [r7, #4]
 800d074:	460b      	mov	r3, r1
 800d076:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 800d078:	2300      	movs	r3, #0
 800d07a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	691a      	ldr	r2, [r3, #16]
 800d080:	887b      	ldrh	r3, [r7, #2]
 800d082:	4013      	ands	r3, r2
 800d084:	2b00      	cmp	r3, #0
 800d086:	d002      	beq.n	800d08e <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 800d088:	2301      	movs	r3, #1
 800d08a:	73fb      	strb	r3, [r7, #15]
 800d08c:	e001      	b.n	800d092 <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 800d08e:	2300      	movs	r3, #0
 800d090:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800d092:	7bfb      	ldrb	r3, [r7, #15]
}
 800d094:	4618      	mov	r0, r3
 800d096:	3714      	adds	r7, #20
 800d098:	46bd      	mov	sp, r7
 800d09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d09e:	4770      	bx	lr

0800d0a0 <GPIO_ReadInputData>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
 800d0a0:	b480      	push	{r7}
 800d0a2:	b083      	sub	sp, #12
 800d0a4:	af00      	add	r7, sp, #0
 800d0a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	691b      	ldr	r3, [r3, #16]
 800d0ac:	b29b      	uxth	r3, r3
}
 800d0ae:	4618      	mov	r0, r3
 800d0b0:	370c      	adds	r7, #12
 800d0b2:	46bd      	mov	sp, r7
 800d0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b8:	4770      	bx	lr
 800d0ba:	bf00      	nop

0800d0bc <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *          This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800d0bc:	b480      	push	{r7}
 800d0be:	b085      	sub	sp, #20
 800d0c0:	af00      	add	r7, sp, #0
 800d0c2:	6078      	str	r0, [r7, #4]
 800d0c4:	460b      	mov	r3, r1
 800d0c6:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 800d0c8:	2300      	movs	r3, #0
 800d0ca:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if (((GPIOx->ODR) & GPIO_Pin) != (uint32_t)Bit_RESET)
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	695a      	ldr	r2, [r3, #20]
 800d0d0:	887b      	ldrh	r3, [r7, #2]
 800d0d2:	4013      	ands	r3, r2
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d002      	beq.n	800d0de <GPIO_ReadOutputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 800d0d8:	2301      	movs	r3, #1
 800d0da:	73fb      	strb	r3, [r7, #15]
 800d0dc:	e001      	b.n	800d0e2 <GPIO_ReadOutputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 800d0de:	2300      	movs	r3, #0
 800d0e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800d0e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0e4:	4618      	mov	r0, r3
 800d0e6:	3714      	adds	r7, #20
 800d0e8:	46bd      	mov	sp, r7
 800d0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ee:	4770      	bx	lr

0800d0f0 <GPIO_ReadOutputData>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
 800d0f0:	b480      	push	{r7}
 800d0f2:	b083      	sub	sp, #12
 800d0f4:	af00      	add	r7, sp, #0
 800d0f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	695b      	ldr	r3, [r3, #20]
 800d0fc:	b29b      	uxth	r3, r3
}
 800d0fe:	4618      	mov	r0, r3
 800d100:	370c      	adds	r7, #12
 800d102:	46bd      	mov	sp, r7
 800d104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d108:	4770      	bx	lr
 800d10a:	bf00      	nop

0800d10c <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800d10c:	b480      	push	{r7}
 800d10e:	b083      	sub	sp, #12
 800d110:	af00      	add	r7, sp, #0
 800d112:	6078      	str	r0, [r7, #4]
 800d114:	460b      	mov	r3, r1
 800d116:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	887a      	ldrh	r2, [r7, #2]
 800d11c:	831a      	strh	r2, [r3, #24]
}
 800d11e:	370c      	adds	r7, #12
 800d120:	46bd      	mov	sp, r7
 800d122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d126:	4770      	bx	lr

0800d128 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800d128:	b480      	push	{r7}
 800d12a:	b083      	sub	sp, #12
 800d12c:	af00      	add	r7, sp, #0
 800d12e:	6078      	str	r0, [r7, #4]
 800d130:	460b      	mov	r3, r1
 800d132:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	887a      	ldrh	r2, [r7, #2]
 800d138:	835a      	strh	r2, [r3, #26]
}
 800d13a:	370c      	adds	r7, #12
 800d13c:	46bd      	mov	sp, r7
 800d13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d142:	4770      	bx	lr

0800d144 <GPIO_WriteBit>:
  *            @arg Bit_RESET: to clear the port pin
  *            @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 800d144:	b480      	push	{r7}
 800d146:	b083      	sub	sp, #12
 800d148:	af00      	add	r7, sp, #0
 800d14a:	6078      	str	r0, [r7, #4]
 800d14c:	4613      	mov	r3, r2
 800d14e:	460a      	mov	r2, r1
 800d150:	807a      	strh	r2, [r7, #2]
 800d152:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 800d154:	787b      	ldrb	r3, [r7, #1]
 800d156:	2b00      	cmp	r3, #0
 800d158:	d003      	beq.n	800d162 <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRRL = GPIO_Pin;
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	887a      	ldrh	r2, [r7, #2]
 800d15e:	831a      	strh	r2, [r3, #24]
 800d160:	e002      	b.n	800d168 <GPIO_WriteBit+0x24>
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	887a      	ldrh	r2, [r7, #2]
 800d166:	835a      	strh	r2, [r3, #26]
  }
}
 800d168:	370c      	adds	r7, #12
 800d16a:	46bd      	mov	sp, r7
 800d16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d170:	4770      	bx	lr
 800d172:	bf00      	nop

0800d174 <GPIO_Write>:
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
 800d174:	b480      	push	{r7}
 800d176:	b083      	sub	sp, #12
 800d178:	af00      	add	r7, sp, #0
 800d17a:	6078      	str	r0, [r7, #4]
 800d17c:	460b      	mov	r3, r1
 800d17e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
 800d180:	887a      	ldrh	r2, [r7, #2]
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	615a      	str	r2, [r3, #20]
}
 800d186:	370c      	adds	r7, #12
 800d188:	46bd      	mov	sp, r7
 800d18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d18e:	4770      	bx	lr

0800d190 <GPIO_ToggleBits>:
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800d190:	b480      	push	{r7}
 800d192:	b083      	sub	sp, #12
 800d194:	af00      	add	r7, sp, #0
 800d196:	6078      	str	r0, [r7, #4]
 800d198:	460b      	mov	r3, r1
 800d19a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	695a      	ldr	r2, [r3, #20]
 800d1a0:	887b      	ldrh	r3, [r7, #2]
 800d1a2:	405a      	eors	r2, r3
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	615a      	str	r2, [r3, #20]
}
 800d1a8:	370c      	adds	r7, #12
 800d1aa:	46bd      	mov	sp, r7
 800d1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1b0:	4770      	bx	lr
 800d1b2:	bf00      	nop

0800d1b4 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices. 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 800d1b4:	b480      	push	{r7}
 800d1b6:	b085      	sub	sp, #20
 800d1b8:	af00      	add	r7, sp, #0
 800d1ba:	6078      	str	r0, [r7, #4]
 800d1bc:	4613      	mov	r3, r2
 800d1be:	460a      	mov	r2, r1
 800d1c0:	807a      	strh	r2, [r7, #2]
 800d1c2:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 800d1c4:	2300      	movs	r3, #0
 800d1c6:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 800d1c8:	2300      	movs	r3, #0
 800d1ca:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800d1cc:	787a      	ldrb	r2, [r7, #1]
 800d1ce:	887b      	ldrh	r3, [r7, #2]
 800d1d0:	f003 0307 	and.w	r3, r3, #7
 800d1d4:	009b      	lsls	r3, r3, #2
 800d1d6:	fa02 f303 	lsl.w	r3, r2, r3
 800d1da:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800d1dc:	887b      	ldrh	r3, [r7, #2]
 800d1de:	08db      	lsrs	r3, r3, #3
 800d1e0:	b29b      	uxth	r3, r3
 800d1e2:	461a      	mov	r2, r3
 800d1e4:	887b      	ldrh	r3, [r7, #2]
 800d1e6:	08db      	lsrs	r3, r3, #3
 800d1e8:	b29b      	uxth	r3, r3
 800d1ea:	4619      	mov	r1, r3
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	3108      	adds	r1, #8
 800d1f0:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800d1f4:	887b      	ldrh	r3, [r7, #2]
 800d1f6:	f003 0307 	and.w	r3, r3, #7
 800d1fa:	009b      	lsls	r3, r3, #2
 800d1fc:	200f      	movs	r0, #15
 800d1fe:	fa00 f303 	lsl.w	r3, r0, r3
 800d202:	43db      	mvns	r3, r3
 800d204:	4019      	ands	r1, r3
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	3208      	adds	r2, #8
 800d20a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 800d20e:	887b      	ldrh	r3, [r7, #2]
 800d210:	08db      	lsrs	r3, r3, #3
 800d212:	b29b      	uxth	r3, r3
 800d214:	461a      	mov	r2, r3
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	3208      	adds	r2, #8
 800d21a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	4313      	orrs	r3, r2
 800d222:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 800d224:	887b      	ldrh	r3, [r7, #2]
 800d226:	08db      	lsrs	r3, r3, #3
 800d228:	b29b      	uxth	r3, r3
 800d22a:	461a      	mov	r2, r3
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	3208      	adds	r2, #8
 800d230:	68b9      	ldr	r1, [r7, #8]
 800d232:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800d236:	3714      	adds	r7, #20
 800d238:	46bd      	mov	sp, r7
 800d23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d23e:	4770      	bx	lr

0800d240 <HASH_DeInit>:
  * @brief  De-initializes the HASH peripheral registers to their default reset values
  * @param  None
  * @retval None
  */
void HASH_DeInit(void)
{
 800d240:	b580      	push	{r7, lr}
 800d242:	af00      	add	r7, sp, #0
  /* Enable HASH reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_HASH, ENABLE);
 800d244:	2020      	movs	r0, #32
 800d246:	2101      	movs	r1, #1
 800d248:	f002 fda2 	bl	800fd90 <RCC_AHB2PeriphResetCmd>
  /* Release HASH from reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_HASH, DISABLE);
 800d24c:	2020      	movs	r0, #32
 800d24e:	2100      	movs	r1, #0
 800d250:	f002 fd9e 	bl	800fd90 <RCC_AHB2PeriphResetCmd>
}
 800d254:	bd80      	pop	{r7, pc}
 800d256:	bf00      	nop

0800d258 <HASH_Init>:
  * @note   The field HASH_HMACKeyType in HASH_InitTypeDef must be filled only 
  *          if the algorithm mode is HMAC.       
  * @retval None
  */
void HASH_Init(HASH_InitTypeDef* HASH_InitStruct)
{
 800d258:	b480      	push	{r7}
 800d25a:	b083      	sub	sp, #12
 800d25c:	af00      	add	r7, sp, #0
 800d25e:	6078      	str	r0, [r7, #4]
  assert_param(IS_HASH_ALGOSELECTION(HASH_InitStruct->HASH_AlgoSelection));
  assert_param(IS_HASH_DATATYPE(HASH_InitStruct->HASH_DataType));
  assert_param(IS_HASH_ALGOMODE(HASH_InitStruct->HASH_AlgoMode));
  
  /* Configure the Algorithm used, algorithm mode and the datatype */
  HASH->CR &= ~ (HASH_CR_ALGO | HASH_CR_DATATYPE | HASH_CR_MODE);
 800d260:	4a18      	ldr	r2, [pc, #96]	; (800d2c4 <HASH_Init+0x6c>)
 800d262:	4b18      	ldr	r3, [pc, #96]	; (800d2c4 <HASH_Init+0x6c>)
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d26a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d26e:	6013      	str	r3, [r2, #0]
  HASH->CR |= (HASH_InitStruct->HASH_AlgoSelection | \
 800d270:	4b14      	ldr	r3, [pc, #80]	; (800d2c4 <HASH_Init+0x6c>)
 800d272:	4a14      	ldr	r2, [pc, #80]	; (800d2c4 <HASH_Init+0x6c>)
 800d274:	6811      	ldr	r1, [r2, #0]
 800d276:	687a      	ldr	r2, [r7, #4]
 800d278:	6810      	ldr	r0, [r2, #0]
               HASH_InitStruct->HASH_DataType | \
 800d27a:	687a      	ldr	r2, [r7, #4]
 800d27c:	6892      	ldr	r2, [r2, #8]
  assert_param(IS_HASH_DATATYPE(HASH_InitStruct->HASH_DataType));
  assert_param(IS_HASH_ALGOMODE(HASH_InitStruct->HASH_AlgoMode));
  
  /* Configure the Algorithm used, algorithm mode and the datatype */
  HASH->CR &= ~ (HASH_CR_ALGO | HASH_CR_DATATYPE | HASH_CR_MODE);
  HASH->CR |= (HASH_InitStruct->HASH_AlgoSelection | \
 800d27e:	4310      	orrs	r0, r2
               HASH_InitStruct->HASH_DataType | \
               HASH_InitStruct->HASH_AlgoMode);
 800d280:	687a      	ldr	r2, [r7, #4]
 800d282:	6852      	ldr	r2, [r2, #4]
  assert_param(IS_HASH_ALGOMODE(HASH_InitStruct->HASH_AlgoMode));
  
  /* Configure the Algorithm used, algorithm mode and the datatype */
  HASH->CR &= ~ (HASH_CR_ALGO | HASH_CR_DATATYPE | HASH_CR_MODE);
  HASH->CR |= (HASH_InitStruct->HASH_AlgoSelection | \
               HASH_InitStruct->HASH_DataType | \
 800d284:	4302      	orrs	r2, r0
  assert_param(IS_HASH_DATATYPE(HASH_InitStruct->HASH_DataType));
  assert_param(IS_HASH_ALGOMODE(HASH_InitStruct->HASH_AlgoMode));
  
  /* Configure the Algorithm used, algorithm mode and the datatype */
  HASH->CR &= ~ (HASH_CR_ALGO | HASH_CR_DATATYPE | HASH_CR_MODE);
  HASH->CR |= (HASH_InitStruct->HASH_AlgoSelection | \
 800d286:	430a      	orrs	r2, r1
 800d288:	601a      	str	r2, [r3, #0]
               HASH_InitStruct->HASH_DataType | \
               HASH_InitStruct->HASH_AlgoMode);
  
  /* if algorithm mode is HMAC, set the Key */  
  if(HASH_InitStruct->HASH_AlgoMode == HASH_AlgoMode_HMAC) 
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	685b      	ldr	r3, [r3, #4]
 800d28e:	2b40      	cmp	r3, #64	; 0x40
 800d290:	d10c      	bne.n	800d2ac <HASH_Init+0x54>
  {
    assert_param(IS_HASH_HMAC_KEYTYPE(HASH_InitStruct->HASH_HMACKeyType));
    HASH->CR &= ~HASH_CR_LKEY;
 800d292:	4b0c      	ldr	r3, [pc, #48]	; (800d2c4 <HASH_Init+0x6c>)
 800d294:	4a0b      	ldr	r2, [pc, #44]	; (800d2c4 <HASH_Init+0x6c>)
 800d296:	6812      	ldr	r2, [r2, #0]
 800d298:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800d29c:	601a      	str	r2, [r3, #0]
    HASH->CR |= HASH_InitStruct->HASH_HMACKeyType;
 800d29e:	4b09      	ldr	r3, [pc, #36]	; (800d2c4 <HASH_Init+0x6c>)
 800d2a0:	4a08      	ldr	r2, [pc, #32]	; (800d2c4 <HASH_Init+0x6c>)
 800d2a2:	6811      	ldr	r1, [r2, #0]
 800d2a4:	687a      	ldr	r2, [r7, #4]
 800d2a6:	68d2      	ldr	r2, [r2, #12]
 800d2a8:	430a      	orrs	r2, r1
 800d2aa:	601a      	str	r2, [r3, #0]
  }

  /* Reset the HASH processor core, so that the HASH will be ready to compute 
     the message digest of a new message */
  HASH->CR |= HASH_CR_INIT;  
 800d2ac:	4b05      	ldr	r3, [pc, #20]	; (800d2c4 <HASH_Init+0x6c>)
 800d2ae:	4a05      	ldr	r2, [pc, #20]	; (800d2c4 <HASH_Init+0x6c>)
 800d2b0:	6812      	ldr	r2, [r2, #0]
 800d2b2:	f042 0204 	orr.w	r2, r2, #4
 800d2b6:	601a      	str	r2, [r3, #0]
}
 800d2b8:	370c      	adds	r7, #12
 800d2ba:	46bd      	mov	sp, r7
 800d2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2c0:	4770      	bx	lr
 800d2c2:	bf00      	nop
 800d2c4:	50060400 	.word	0x50060400

0800d2c8 <HASH_StructInit>:
  *  @note  The default values set are : Processor mode is HASH, Algorithm selected is SHA1,
  *          Data type selected is 32b and HMAC Key Type is short key.  
  * @retval None
  */
void HASH_StructInit(HASH_InitTypeDef* HASH_InitStruct)
{
 800d2c8:	b480      	push	{r7}
 800d2ca:	b083      	sub	sp, #12
 800d2cc:	af00      	add	r7, sp, #0
 800d2ce:	6078      	str	r0, [r7, #4]
  /* Initialize the HASH_AlgoSelection member */
  HASH_InitStruct->HASH_AlgoSelection = HASH_AlgoSelection_SHA1;
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	2200      	movs	r2, #0
 800d2d4:	601a      	str	r2, [r3, #0]

  /* Initialize the HASH_AlgoMode member */
  HASH_InitStruct->HASH_AlgoMode = HASH_AlgoMode_HASH;
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	2200      	movs	r2, #0
 800d2da:	605a      	str	r2, [r3, #4]

  /* Initialize the HASH_DataType member */
  HASH_InitStruct->HASH_DataType = HASH_DataType_32b;
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	2200      	movs	r2, #0
 800d2e0:	609a      	str	r2, [r3, #8]

  /* Initialize the HASH_HMACKeyType member */
  HASH_InitStruct->HASH_HMACKeyType = HASH_HMACKeyType_ShortKey;
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	2200      	movs	r2, #0
 800d2e6:	60da      	str	r2, [r3, #12]
}
 800d2e8:	370c      	adds	r7, #12
 800d2ea:	46bd      	mov	sp, r7
 800d2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2f0:	4770      	bx	lr
 800d2f2:	bf00      	nop

0800d2f4 <HASH_Reset>:
  *         interrupt and HASH_FLAG_DCIS flag. 
  * @param  None
  * @retval None
  */
void HASH_Reset(void)
{
 800d2f4:	b480      	push	{r7}
 800d2f6:	af00      	add	r7, sp, #0
  /* Reset the HASH processor core */
  HASH->CR |= HASH_CR_INIT;
 800d2f8:	4b04      	ldr	r3, [pc, #16]	; (800d30c <HASH_Reset+0x18>)
 800d2fa:	4a04      	ldr	r2, [pc, #16]	; (800d30c <HASH_Reset+0x18>)
 800d2fc:	6812      	ldr	r2, [r2, #0]
 800d2fe:	f042 0204 	orr.w	r2, r2, #4
 800d302:	601a      	str	r2, [r3, #0]
}
 800d304:	46bd      	mov	sp, r7
 800d306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d30a:	4770      	bx	lr
 800d30c:	50060400 	.word	0x50060400

0800d310 <HASH_SetLastWordValidBitsNbr>:
  * @note   The Number of valid bits must be set before to start the message 
  *         digest competition (in Hash and HMAC) and key treatment(in HMAC).    
  * @retval None
  */
void HASH_SetLastWordValidBitsNbr(uint16_t ValidNumber)
{
 800d310:	b480      	push	{r7}
 800d312:	b083      	sub	sp, #12
 800d314:	af00      	add	r7, sp, #0
 800d316:	4603      	mov	r3, r0
 800d318:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_HASH_VALIDBITSNUMBER(ValidNumber));
  
  /* Configure the Number of valid bits in last word of the message */
  HASH->STR &= ~(HASH_STR_NBW);
 800d31a:	4b08      	ldr	r3, [pc, #32]	; (800d33c <HASH_SetLastWordValidBitsNbr+0x2c>)
 800d31c:	4a07      	ldr	r2, [pc, #28]	; (800d33c <HASH_SetLastWordValidBitsNbr+0x2c>)
 800d31e:	6892      	ldr	r2, [r2, #8]
 800d320:	f022 021f 	bic.w	r2, r2, #31
 800d324:	609a      	str	r2, [r3, #8]
  HASH->STR |= ValidNumber;
 800d326:	4b05      	ldr	r3, [pc, #20]	; (800d33c <HASH_SetLastWordValidBitsNbr+0x2c>)
 800d328:	4a04      	ldr	r2, [pc, #16]	; (800d33c <HASH_SetLastWordValidBitsNbr+0x2c>)
 800d32a:	6891      	ldr	r1, [r2, #8]
 800d32c:	88fa      	ldrh	r2, [r7, #6]
 800d32e:	430a      	orrs	r2, r1
 800d330:	609a      	str	r2, [r3, #8]
}
 800d332:	370c      	adds	r7, #12
 800d334:	46bd      	mov	sp, r7
 800d336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d33a:	4770      	bx	lr
 800d33c:	50060400 	.word	0x50060400

0800d340 <HASH_DataIn>:
  * @brief  Writes data in the Data Input FIFO
  * @param  Data: new data of the message to be processed.
  * @retval None
  */
void HASH_DataIn(uint32_t Data)
{
 800d340:	b480      	push	{r7}
 800d342:	b083      	sub	sp, #12
 800d344:	af00      	add	r7, sp, #0
 800d346:	6078      	str	r0, [r7, #4]
  /* Write in the DIN register a new data */
  HASH->DIN = Data;
 800d348:	4b03      	ldr	r3, [pc, #12]	; (800d358 <HASH_DataIn+0x18>)
 800d34a:	687a      	ldr	r2, [r7, #4]
 800d34c:	605a      	str	r2, [r3, #4]
}
 800d34e:	370c      	adds	r7, #12
 800d350:	46bd      	mov	sp, r7
 800d352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d356:	4770      	bx	lr
 800d358:	50060400 	.word	0x50060400

0800d35c <HASH_GetInFIFOWordsNbr>:
  * @brief  Returns the number of words already pushed into the IN FIFO.
  * @param  None
  * @retval The value of words already pushed into the IN FIFO.
  */
uint8_t HASH_GetInFIFOWordsNbr(void)
{
 800d35c:	b480      	push	{r7}
 800d35e:	af00      	add	r7, sp, #0
  /* Return the value of NBW bits */
  return ((HASH->CR & HASH_CR_NBW) >> 8);
 800d360:	4b05      	ldr	r3, [pc, #20]	; (800d378 <HASH_GetInFIFOWordsNbr+0x1c>)
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800d368:	0a1b      	lsrs	r3, r3, #8
 800d36a:	b2db      	uxtb	r3, r3
}
 800d36c:	4618      	mov	r0, r3
 800d36e:	46bd      	mov	sp, r7
 800d370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d374:	4770      	bx	lr
 800d376:	bf00      	nop
 800d378:	50060400 	.word	0x50060400

0800d37c <HASH_GetDigest>:
  * @param  HASH_MessageDigest: pointer to a HASH_MsgDigest structure which will 
  *         hold the message digest result 
  * @retval None
  */
void HASH_GetDigest(HASH_MsgDigest* HASH_MessageDigest)
{
 800d37c:	b480      	push	{r7}
 800d37e:	b083      	sub	sp, #12
 800d380:	af00      	add	r7, sp, #0
 800d382:	6078      	str	r0, [r7, #4]
  /* Get the data field */
  HASH_MessageDigest->Data[0] = HASH->HR[0];
 800d384:	4b12      	ldr	r3, [pc, #72]	; (800d3d0 <HASH_GetDigest+0x54>)
 800d386:	68da      	ldr	r2, [r3, #12]
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	601a      	str	r2, [r3, #0]
  HASH_MessageDigest->Data[1] = HASH->HR[1];
 800d38c:	4b10      	ldr	r3, [pc, #64]	; (800d3d0 <HASH_GetDigest+0x54>)
 800d38e:	691a      	ldr	r2, [r3, #16]
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	605a      	str	r2, [r3, #4]
  HASH_MessageDigest->Data[2] = HASH->HR[2];
 800d394:	4b0e      	ldr	r3, [pc, #56]	; (800d3d0 <HASH_GetDigest+0x54>)
 800d396:	695a      	ldr	r2, [r3, #20]
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	609a      	str	r2, [r3, #8]
  HASH_MessageDigest->Data[3] = HASH->HR[3];
 800d39c:	4b0c      	ldr	r3, [pc, #48]	; (800d3d0 <HASH_GetDigest+0x54>)
 800d39e:	699a      	ldr	r2, [r3, #24]
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	60da      	str	r2, [r3, #12]
  HASH_MessageDigest->Data[4] = HASH->HR[4];
 800d3a4:	4b0a      	ldr	r3, [pc, #40]	; (800d3d0 <HASH_GetDigest+0x54>)
 800d3a6:	69da      	ldr	r2, [r3, #28]
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	611a      	str	r2, [r3, #16]
  HASH_MessageDigest->Data[5] = HASH_DIGEST->HR[5];
 800d3ac:	4b09      	ldr	r3, [pc, #36]	; (800d3d4 <HASH_GetDigest+0x58>)
 800d3ae:	695a      	ldr	r2, [r3, #20]
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	615a      	str	r2, [r3, #20]
  HASH_MessageDigest->Data[6] = HASH_DIGEST->HR[6];
 800d3b4:	4b07      	ldr	r3, [pc, #28]	; (800d3d4 <HASH_GetDigest+0x58>)
 800d3b6:	699a      	ldr	r2, [r3, #24]
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	619a      	str	r2, [r3, #24]
  HASH_MessageDigest->Data[7] = HASH_DIGEST->HR[7];
 800d3bc:	4b05      	ldr	r3, [pc, #20]	; (800d3d4 <HASH_GetDigest+0x58>)
 800d3be:	69da      	ldr	r2, [r3, #28]
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	61da      	str	r2, [r3, #28]
}
 800d3c4:	370c      	adds	r7, #12
 800d3c6:	46bd      	mov	sp, r7
 800d3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3cc:	4770      	bx	lr
 800d3ce:	bf00      	nop
 800d3d0:	50060400 	.word	0x50060400
 800d3d4:	50060710 	.word	0x50060710

0800d3d8 <HASH_StartDigest>:
  * @brief  Starts the message padding and calculation of the final message     
  * @param  None
  * @retval None
  */
void HASH_StartDigest(void)
{
 800d3d8:	b480      	push	{r7}
 800d3da:	af00      	add	r7, sp, #0
  /* Start the Digest calculation */
  HASH->STR |= HASH_STR_DCAL;
 800d3dc:	4b04      	ldr	r3, [pc, #16]	; (800d3f0 <HASH_StartDigest+0x18>)
 800d3de:	4a04      	ldr	r2, [pc, #16]	; (800d3f0 <HASH_StartDigest+0x18>)
 800d3e0:	6892      	ldr	r2, [r2, #8]
 800d3e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d3e6:	609a      	str	r2, [r3, #8]
}
 800d3e8:	46bd      	mov	sp, r7
 800d3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ee:	4770      	bx	lr
 800d3f0:	50060400 	.word	0x50060400

0800d3f4 <HASH_SaveContext>:
  * @param  HASH_ContextSave: pointer to a HASH_Context structure that contains
  *         the repository for current context.
  * @retval None
  */
void HASH_SaveContext(HASH_Context* HASH_ContextSave)
{
 800d3f4:	b480      	push	{r7}
 800d3f6:	b085      	sub	sp, #20
 800d3f8:	af00      	add	r7, sp, #0
 800d3fa:	6078      	str	r0, [r7, #4]
  uint8_t i = 0;
 800d3fc:	2300      	movs	r3, #0
 800d3fe:	73fb      	strb	r3, [r7, #15]
  
  /* save context registers */
  HASH_ContextSave->HASH_IMR = HASH->IMR;  
 800d400:	4b12      	ldr	r3, [pc, #72]	; (800d44c <HASH_SaveContext+0x58>)
 800d402:	6a1a      	ldr	r2, [r3, #32]
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	601a      	str	r2, [r3, #0]
  HASH_ContextSave->HASH_STR = HASH->STR;      
 800d408:	4b10      	ldr	r3, [pc, #64]	; (800d44c <HASH_SaveContext+0x58>)
 800d40a:	689a      	ldr	r2, [r3, #8]
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	605a      	str	r2, [r3, #4]
  HASH_ContextSave->HASH_CR  = HASH->CR;     
 800d410:	4b0e      	ldr	r3, [pc, #56]	; (800d44c <HASH_SaveContext+0x58>)
 800d412:	681a      	ldr	r2, [r3, #0]
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	609a      	str	r2, [r3, #8]
  for(i=0; i<=53;i++)
 800d418:	2300      	movs	r3, #0
 800d41a:	73fb      	strb	r3, [r7, #15]
 800d41c:	e00d      	b.n	800d43a <HASH_SaveContext+0x46>
  {
     HASH_ContextSave->HASH_CSR[i] = HASH->CSR[i];
 800d41e:	7bfb      	ldrb	r3, [r7, #15]
 800d420:	4a0a      	ldr	r2, [pc, #40]	; (800d44c <HASH_SaveContext+0x58>)
 800d422:	7bf9      	ldrb	r1, [r7, #15]
 800d424:	313e      	adds	r1, #62	; 0x3e
 800d426:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800d42a:	6879      	ldr	r1, [r7, #4]
 800d42c:	3302      	adds	r3, #2
 800d42e:	009b      	lsls	r3, r3, #2
 800d430:	440b      	add	r3, r1
 800d432:	605a      	str	r2, [r3, #4]
  
  /* save context registers */
  HASH_ContextSave->HASH_IMR = HASH->IMR;  
  HASH_ContextSave->HASH_STR = HASH->STR;      
  HASH_ContextSave->HASH_CR  = HASH->CR;     
  for(i=0; i<=53;i++)
 800d434:	7bfb      	ldrb	r3, [r7, #15]
 800d436:	3301      	adds	r3, #1
 800d438:	73fb      	strb	r3, [r7, #15]
 800d43a:	7bfb      	ldrb	r3, [r7, #15]
 800d43c:	2b35      	cmp	r3, #53	; 0x35
 800d43e:	d9ee      	bls.n	800d41e <HASH_SaveContext+0x2a>
  {
     HASH_ContextSave->HASH_CSR[i] = HASH->CSR[i];
  }   
}
 800d440:	3714      	adds	r7, #20
 800d442:	46bd      	mov	sp, r7
 800d444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d448:	4770      	bx	lr
 800d44a:	bf00      	nop
 800d44c:	50060400 	.word	0x50060400

0800d450 <HASH_RestoreContext>:
  * @param  HASH_ContextRestore: pointer to a HASH_Context structure that contains
  *         the repository for saved context.
  * @retval None
  */
void HASH_RestoreContext(HASH_Context* HASH_ContextRestore)  
{
 800d450:	b480      	push	{r7}
 800d452:	b085      	sub	sp, #20
 800d454:	af00      	add	r7, sp, #0
 800d456:	6078      	str	r0, [r7, #4]
  uint8_t i = 0;
 800d458:	2300      	movs	r3, #0
 800d45a:	73fb      	strb	r3, [r7, #15]
  
  /* restore context registers */
  HASH->IMR = HASH_ContextRestore->HASH_IMR;   
 800d45c:	4b15      	ldr	r3, [pc, #84]	; (800d4b4 <HASH_RestoreContext+0x64>)
 800d45e:	687a      	ldr	r2, [r7, #4]
 800d460:	6812      	ldr	r2, [r2, #0]
 800d462:	621a      	str	r2, [r3, #32]
  HASH->STR = HASH_ContextRestore->HASH_STR;     
 800d464:	4b13      	ldr	r3, [pc, #76]	; (800d4b4 <HASH_RestoreContext+0x64>)
 800d466:	687a      	ldr	r2, [r7, #4]
 800d468:	6852      	ldr	r2, [r2, #4]
 800d46a:	609a      	str	r2, [r3, #8]
  HASH->CR = HASH_ContextRestore->HASH_CR;
 800d46c:	4b11      	ldr	r3, [pc, #68]	; (800d4b4 <HASH_RestoreContext+0x64>)
 800d46e:	687a      	ldr	r2, [r7, #4]
 800d470:	6892      	ldr	r2, [r2, #8]
 800d472:	601a      	str	r2, [r3, #0]
  
  /* Initialize the hash processor */
  HASH->CR |= HASH_CR_INIT; 
 800d474:	4b0f      	ldr	r3, [pc, #60]	; (800d4b4 <HASH_RestoreContext+0x64>)
 800d476:	4a0f      	ldr	r2, [pc, #60]	; (800d4b4 <HASH_RestoreContext+0x64>)
 800d478:	6812      	ldr	r2, [r2, #0]
 800d47a:	f042 0204 	orr.w	r2, r2, #4
 800d47e:	601a      	str	r2, [r3, #0]
  
   /* continue restoring context registers */     
  for(i=0; i<=53;i++)
 800d480:	2300      	movs	r3, #0
 800d482:	73fb      	strb	r3, [r7, #15]
 800d484:	e00e      	b.n	800d4a4 <HASH_RestoreContext+0x54>
  {
     HASH->CSR[i] = HASH_ContextRestore->HASH_CSR[i];
 800d486:	4a0b      	ldr	r2, [pc, #44]	; (800d4b4 <HASH_RestoreContext+0x64>)
 800d488:	7bf8      	ldrb	r0, [r7, #15]
 800d48a:	7bfb      	ldrb	r3, [r7, #15]
 800d48c:	6879      	ldr	r1, [r7, #4]
 800d48e:	3302      	adds	r3, #2
 800d490:	009b      	lsls	r3, r3, #2
 800d492:	440b      	add	r3, r1
 800d494:	6859      	ldr	r1, [r3, #4]
 800d496:	f100 033e 	add.w	r3, r0, #62	; 0x3e
 800d49a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  
  /* Initialize the hash processor */
  HASH->CR |= HASH_CR_INIT; 
  
   /* continue restoring context registers */     
  for(i=0; i<=53;i++)
 800d49e:	7bfb      	ldrb	r3, [r7, #15]
 800d4a0:	3301      	adds	r3, #1
 800d4a2:	73fb      	strb	r3, [r7, #15]
 800d4a4:	7bfb      	ldrb	r3, [r7, #15]
 800d4a6:	2b35      	cmp	r3, #53	; 0x35
 800d4a8:	d9ed      	bls.n	800d486 <HASH_RestoreContext+0x36>
  {
     HASH->CSR[i] = HASH_ContextRestore->HASH_CSR[i];
  }   
}
 800d4aa:	3714      	adds	r7, #20
 800d4ac:	46bd      	mov	sp, r7
 800d4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4b2:	4770      	bx	lr
 800d4b4:	50060400 	.word	0x50060400

0800d4b8 <HASH_AutoStartDigest>:
  * @param  NewState: new state of the selected HASH DMA transfer request.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void HASH_AutoStartDigest(FunctionalState NewState)
{
 800d4b8:	b480      	push	{r7}
 800d4ba:	b083      	sub	sp, #12
 800d4bc:	af00      	add	r7, sp, #0
 800d4be:	4603      	mov	r3, r0
 800d4c0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800d4c2:	79fb      	ldrb	r3, [r7, #7]
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d006      	beq.n	800d4d6 <HASH_AutoStartDigest+0x1e>
  {
    /* Enable the auto start of the final message digest at the end of DMA transfer */
    HASH->CR &= ~HASH_CR_MDMAT;
 800d4c8:	4b08      	ldr	r3, [pc, #32]	; (800d4ec <HASH_AutoStartDigest+0x34>)
 800d4ca:	4a08      	ldr	r2, [pc, #32]	; (800d4ec <HASH_AutoStartDigest+0x34>)
 800d4cc:	6812      	ldr	r2, [r2, #0]
 800d4ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d4d2:	601a      	str	r2, [r3, #0]
 800d4d4:	e005      	b.n	800d4e2 <HASH_AutoStartDigest+0x2a>
  }
  else
  {
    /* Disable the auto start of the final message digest at the end of DMA transfer */
    HASH->CR |= HASH_CR_MDMAT;
 800d4d6:	4b05      	ldr	r3, [pc, #20]	; (800d4ec <HASH_AutoStartDigest+0x34>)
 800d4d8:	4a04      	ldr	r2, [pc, #16]	; (800d4ec <HASH_AutoStartDigest+0x34>)
 800d4da:	6812      	ldr	r2, [r2, #0]
 800d4dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d4e0:	601a      	str	r2, [r3, #0]
  }
}
 800d4e2:	370c      	adds	r7, #12
 800d4e4:	46bd      	mov	sp, r7
 800d4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ea:	4770      	bx	lr
 800d4ec:	50060400 	.word	0x50060400

0800d4f0 <HASH_DMACmd>:
  * @param  NewState: new state of the selected HASH DMA transfer request.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void HASH_DMACmd(FunctionalState NewState)
{
 800d4f0:	b480      	push	{r7}
 800d4f2:	b083      	sub	sp, #12
 800d4f4:	af00      	add	r7, sp, #0
 800d4f6:	4603      	mov	r3, r0
 800d4f8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800d4fa:	79fb      	ldrb	r3, [r7, #7]
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d006      	beq.n	800d50e <HASH_DMACmd+0x1e>
  {
    /* Enable the HASH DMA request */
    HASH->CR |= HASH_CR_DMAE;
 800d500:	4b08      	ldr	r3, [pc, #32]	; (800d524 <HASH_DMACmd+0x34>)
 800d502:	4a08      	ldr	r2, [pc, #32]	; (800d524 <HASH_DMACmd+0x34>)
 800d504:	6812      	ldr	r2, [r2, #0]
 800d506:	f042 0208 	orr.w	r2, r2, #8
 800d50a:	601a      	str	r2, [r3, #0]
 800d50c:	e005      	b.n	800d51a <HASH_DMACmd+0x2a>
  }
  else
  {
    /* Disable the HASH DMA request */
    HASH->CR &= ~HASH_CR_DMAE;
 800d50e:	4b05      	ldr	r3, [pc, #20]	; (800d524 <HASH_DMACmd+0x34>)
 800d510:	4a04      	ldr	r2, [pc, #16]	; (800d524 <HASH_DMACmd+0x34>)
 800d512:	6812      	ldr	r2, [r2, #0]
 800d514:	f022 0208 	bic.w	r2, r2, #8
 800d518:	601a      	str	r2, [r3, #0]
  }
}
 800d51a:	370c      	adds	r7, #12
 800d51c:	46bd      	mov	sp, r7
 800d51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d522:	4770      	bx	lr
 800d524:	50060400 	.word	0x50060400

0800d528 <HASH_ITConfig>:
  * @param  NewState: new state of the specified HASH interrupt.
  *           This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void HASH_ITConfig(uint32_t HASH_IT, FunctionalState NewState)
{
 800d528:	b480      	push	{r7}
 800d52a:	b083      	sub	sp, #12
 800d52c:	af00      	add	r7, sp, #0
 800d52e:	6078      	str	r0, [r7, #4]
 800d530:	460b      	mov	r3, r1
 800d532:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_HASH_IT(HASH_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800d534:	78fb      	ldrb	r3, [r7, #3]
 800d536:	2b00      	cmp	r3, #0
 800d538:	d006      	beq.n	800d548 <HASH_ITConfig+0x20>
  {
    /* Enable the selected HASH interrupt */
    HASH->IMR |= HASH_IT;
 800d53a:	4b09      	ldr	r3, [pc, #36]	; (800d560 <HASH_ITConfig+0x38>)
 800d53c:	4a08      	ldr	r2, [pc, #32]	; (800d560 <HASH_ITConfig+0x38>)
 800d53e:	6a11      	ldr	r1, [r2, #32]
 800d540:	687a      	ldr	r2, [r7, #4]
 800d542:	430a      	orrs	r2, r1
 800d544:	621a      	str	r2, [r3, #32]
 800d546:	e006      	b.n	800d556 <HASH_ITConfig+0x2e>
  }
  else
  {
    /* Disable the selected HASH interrupt */
    HASH->IMR &= (uint32_t)(~HASH_IT);
 800d548:	4b05      	ldr	r3, [pc, #20]	; (800d560 <HASH_ITConfig+0x38>)
 800d54a:	4a05      	ldr	r2, [pc, #20]	; (800d560 <HASH_ITConfig+0x38>)
 800d54c:	6a11      	ldr	r1, [r2, #32]
 800d54e:	687a      	ldr	r2, [r7, #4]
 800d550:	43d2      	mvns	r2, r2
 800d552:	400a      	ands	r2, r1
 800d554:	621a      	str	r2, [r3, #32]
  }
}
 800d556:	370c      	adds	r7, #12
 800d558:	46bd      	mov	sp, r7
 800d55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d55e:	4770      	bx	lr
 800d560:	50060400 	.word	0x50060400

0800d564 <HASH_GetFlagStatus>:
  *            @arg HASH_FLAG_DMAS: DMAS Status flag
  *            @arg HASH_FLAG_DINNE: Data Input register (DIN) not empty status flag
  * @retval The new state of HASH_FLAG (SET or RESET)
  */
FlagStatus HASH_GetFlagStatus(uint32_t HASH_FLAG)
{
 800d564:	b480      	push	{r7}
 800d566:	b085      	sub	sp, #20
 800d568:	af00      	add	r7, sp, #0
 800d56a:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 800d56c:	2300      	movs	r3, #0
 800d56e:	73fb      	strb	r3, [r7, #15]
  uint32_t tempreg = 0;
 800d570:	2300      	movs	r3, #0
 800d572:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_HASH_GET_FLAG(HASH_FLAG));

  /* check if the FLAG is in CR register */
  if ((HASH_FLAG & HASH_FLAG_DINNE) != (uint32_t)RESET ) 
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d003      	beq.n	800d586 <HASH_GetFlagStatus+0x22>
  {
    tempreg = HASH->CR;
 800d57e:	4b0c      	ldr	r3, [pc, #48]	; (800d5b0 <HASH_GetFlagStatus+0x4c>)
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	60bb      	str	r3, [r7, #8]
 800d584:	e002      	b.n	800d58c <HASH_GetFlagStatus+0x28>
  }
  else /* The FLAG is in SR register */
  {
    tempreg = HASH->SR;
 800d586:	4b0a      	ldr	r3, [pc, #40]	; (800d5b0 <HASH_GetFlagStatus+0x4c>)
 800d588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d58a:	60bb      	str	r3, [r7, #8]
  }

  /* Check the status of the specified HASH flag */
  if ((tempreg & HASH_FLAG) != (uint32_t)RESET)
 800d58c:	68ba      	ldr	r2, [r7, #8]
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	4013      	ands	r3, r2
 800d592:	2b00      	cmp	r3, #0
 800d594:	d002      	beq.n	800d59c <HASH_GetFlagStatus+0x38>
  {
    /* HASH is set */
    bitstatus = SET;
 800d596:	2301      	movs	r3, #1
 800d598:	73fb      	strb	r3, [r7, #15]
 800d59a:	e001      	b.n	800d5a0 <HASH_GetFlagStatus+0x3c>
  }
  else
  {
    /* HASH_FLAG is reset */
    bitstatus = RESET;
 800d59c:	2300      	movs	r3, #0
 800d59e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the HASH_FLAG status */
  return  bitstatus;
 800d5a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5a2:	4618      	mov	r0, r3
 800d5a4:	3714      	adds	r7, #20
 800d5a6:	46bd      	mov	sp, r7
 800d5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ac:	4770      	bx	lr
 800d5ae:	bf00      	nop
 800d5b0:	50060400 	.word	0x50060400

0800d5b4 <HASH_ClearFlag>:
  *            @arg HASH_FLAG_DINIS: Data Input Flag
  *            @arg HASH_FLAG_DCIS: Digest Calculation Completion Flag                       
  * @retval None
  */
void HASH_ClearFlag(uint32_t HASH_FLAG)
{
 800d5b4:	b480      	push	{r7}
 800d5b6:	b083      	sub	sp, #12
 800d5b8:	af00      	add	r7, sp, #0
 800d5ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HASH_CLEAR_FLAG(HASH_FLAG));
  
  /* Clear the selected HASH flags */
  HASH->SR = ~(uint32_t)HASH_FLAG;
 800d5bc:	4b04      	ldr	r3, [pc, #16]	; (800d5d0 <HASH_ClearFlag+0x1c>)
 800d5be:	687a      	ldr	r2, [r7, #4]
 800d5c0:	43d2      	mvns	r2, r2
 800d5c2:	625a      	str	r2, [r3, #36]	; 0x24
}
 800d5c4:	370c      	adds	r7, #12
 800d5c6:	46bd      	mov	sp, r7
 800d5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5cc:	4770      	bx	lr
 800d5ce:	bf00      	nop
 800d5d0:	50060400 	.word	0x50060400

0800d5d4 <HASH_GetITStatus>:
  *            @arg HASH_IT_DINI: Data Input interrupt
  *            @arg HASH_IT_DCI: Digest Calculation Completion Interrupt
  * @retval The new state of HASH_IT (SET or RESET).
  */
ITStatus HASH_GetITStatus(uint32_t HASH_IT)
{
 800d5d4:	b480      	push	{r7}
 800d5d6:	b085      	sub	sp, #20
 800d5d8:	af00      	add	r7, sp, #0
 800d5da:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 800d5dc:	2300      	movs	r3, #0
 800d5de:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpreg = 0;
 800d5e0:	2300      	movs	r3, #0
 800d5e2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_HASH_GET_IT(HASH_IT));  


  /* Check the status of the specified HASH interrupt */
  tmpreg =  HASH->SR;
 800d5e4:	4b0b      	ldr	r3, [pc, #44]	; (800d614 <HASH_GetITStatus+0x40>)
 800d5e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5e8:	60bb      	str	r3, [r7, #8]

  if (((HASH->IMR & tmpreg) & HASH_IT) != RESET)
 800d5ea:	4b0a      	ldr	r3, [pc, #40]	; (800d614 <HASH_GetITStatus+0x40>)
 800d5ec:	6a1a      	ldr	r2, [r3, #32]
 800d5ee:	68bb      	ldr	r3, [r7, #8]
 800d5f0:	401a      	ands	r2, r3
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	4013      	ands	r3, r2
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d002      	beq.n	800d600 <HASH_GetITStatus+0x2c>
  {
    /* HASH_IT is set */
    bitstatus = SET;
 800d5fa:	2301      	movs	r3, #1
 800d5fc:	73fb      	strb	r3, [r7, #15]
 800d5fe:	e001      	b.n	800d604 <HASH_GetITStatus+0x30>
  }
  else
  {
    /* HASH_IT is reset */
    bitstatus = RESET;
 800d600:	2300      	movs	r3, #0
 800d602:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the HASH_IT status */
  return bitstatus;
 800d604:	7bfb      	ldrb	r3, [r7, #15]
}
 800d606:	4618      	mov	r0, r3
 800d608:	3714      	adds	r7, #20
 800d60a:	46bd      	mov	sp, r7
 800d60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d610:	4770      	bx	lr
 800d612:	bf00      	nop
 800d614:	50060400 	.word	0x50060400

0800d618 <HASH_ClearITPendingBit>:
  *            @arg HASH_IT_DINI: Data Input interrupt
  *            @arg HASH_IT_DCI: Digest Calculation Completion Interrupt
  * @retval None
  */
void HASH_ClearITPendingBit(uint32_t HASH_IT)
{
 800d618:	b480      	push	{r7}
 800d61a:	b083      	sub	sp, #12
 800d61c:	af00      	add	r7, sp, #0
 800d61e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HASH_IT(HASH_IT));

  /* Clear the selected HASH interrupt pending bit */
  HASH->SR = (uint32_t)(~HASH_IT);
 800d620:	4b04      	ldr	r3, [pc, #16]	; (800d634 <HASH_ClearITPendingBit+0x1c>)
 800d622:	687a      	ldr	r2, [r7, #4]
 800d624:	43d2      	mvns	r2, r2
 800d626:	625a      	str	r2, [r3, #36]	; 0x24
}
 800d628:	370c      	adds	r7, #12
 800d62a:	46bd      	mov	sp, r7
 800d62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d630:	4770      	bx	lr
 800d632:	bf00      	nop
 800d634:	50060400 	.word	0x50060400

0800d638 <HASH_MD5>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: digest computation done
  *          - ERROR: digest computation failed
  */
ErrorStatus HASH_MD5(uint8_t *Input, uint32_t Ilen, uint8_t Output[16])
{
 800d638:	b580      	push	{r7, lr}
 800d63a:	b09c      	sub	sp, #112	; 0x70
 800d63c:	af00      	add	r7, sp, #0
 800d63e:	60f8      	str	r0, [r7, #12]
 800d640:	60b9      	str	r1, [r7, #8]
 800d642:	607a      	str	r2, [r7, #4]
  HASH_InitTypeDef MD5_HASH_InitStructure;
  HASH_MsgDigest MD5_MessageDigest;
  __IO uint16_t nbvalidbitsdata = 0;
 800d644:	2300      	movs	r3, #0
 800d646:	837b      	strh	r3, [r7, #26]
  uint32_t i = 0;
 800d648:	2300      	movs	r3, #0
 800d64a:	66fb      	str	r3, [r7, #108]	; 0x6c
  __IO uint32_t counter = 0;
 800d64c:	2300      	movs	r3, #0
 800d64e:	617b      	str	r3, [r7, #20]
  uint32_t busystatus = 0;
 800d650:	2300      	movs	r3, #0
 800d652:	663b      	str	r3, [r7, #96]	; 0x60
  ErrorStatus status = SUCCESS;
 800d654:	2301      	movs	r3, #1
 800d656:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
  uint32_t inputaddr  = (uint32_t)Input;
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t outputaddr = (uint32_t)Output;
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	65fb      	str	r3, [r7, #92]	; 0x5c


  /* Number of valid bits in last word of the Input data */
  nbvalidbitsdata = 8 * (Ilen % 4);
 800d662:	68bb      	ldr	r3, [r7, #8]
 800d664:	b29b      	uxth	r3, r3
 800d666:	f003 0303 	and.w	r3, r3, #3
 800d66a:	b29b      	uxth	r3, r3
 800d66c:	00db      	lsls	r3, r3, #3
 800d66e:	b29b      	uxth	r3, r3
 800d670:	837b      	strh	r3, [r7, #26]

  /* HASH peripheral initialization */
  HASH_DeInit();
 800d672:	f7ff fde5 	bl	800d240 <HASH_DeInit>

  /* HASH Configuration */
  MD5_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_MD5;
 800d676:	2380      	movs	r3, #128	; 0x80
 800d678:	63fb      	str	r3, [r7, #60]	; 0x3c
  MD5_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HASH;
 800d67a:	2300      	movs	r3, #0
 800d67c:	643b      	str	r3, [r7, #64]	; 0x40
  MD5_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
 800d67e:	2320      	movs	r3, #32
 800d680:	647b      	str	r3, [r7, #68]	; 0x44
  HASH_Init(&MD5_HASH_InitStructure);
 800d682:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d686:	4618      	mov	r0, r3
 800d688:	f7ff fde6 	bl	800d258 <HASH_Init>

  /* Configure the number of valid bits in last word of the data */
  HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);
 800d68c:	8b7b      	ldrh	r3, [r7, #26]
 800d68e:	b29b      	uxth	r3, r3
 800d690:	4618      	mov	r0, r3
 800d692:	f7ff fe3d 	bl	800d310 <HASH_SetLastWordValidBitsNbr>

  /* Write the Input block in the IN FIFO */
  for(i=0; i<Ilen; i+=4)
 800d696:	2300      	movs	r3, #0
 800d698:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d69a:	e00a      	b.n	800d6b2 <HASH_MD5+0x7a>
  {
    HASH_DataIn(*(uint32_t*)inputaddr);
 800d69c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	4618      	mov	r0, r3
 800d6a2:	f7ff fe4d 	bl	800d340 <HASH_DataIn>
    inputaddr+=4;
 800d6a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d6a8:	3304      	adds	r3, #4
 800d6aa:	667b      	str	r3, [r7, #100]	; 0x64

  /* Configure the number of valid bits in last word of the data */
  HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);

  /* Write the Input block in the IN FIFO */
  for(i=0; i<Ilen; i+=4)
 800d6ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d6ae:	3304      	adds	r3, #4
 800d6b0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d6b2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d6b4:	68bb      	ldr	r3, [r7, #8]
 800d6b6:	429a      	cmp	r2, r3
 800d6b8:	d3f0      	bcc.n	800d69c <HASH_MD5+0x64>
    HASH_DataIn(*(uint32_t*)inputaddr);
    inputaddr+=4;
  }

  /* Start the HASH processor */
  HASH_StartDigest();
 800d6ba:	f7ff fe8d 	bl	800d3d8 <HASH_StartDigest>

  /* wait until the Busy flag is RESET */
  do
  {
    busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 800d6be:	2008      	movs	r0, #8
 800d6c0:	f7ff ff50 	bl	800d564 <HASH_GetFlagStatus>
 800d6c4:	4603      	mov	r3, r0
 800d6c6:	663b      	str	r3, [r7, #96]	; 0x60
    counter++;
 800d6c8:	697b      	ldr	r3, [r7, #20]
 800d6ca:	3301      	adds	r3, #1
 800d6cc:	617b      	str	r3, [r7, #20]
  }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
 800d6ce:	697b      	ldr	r3, [r7, #20]
 800d6d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d6d4:	d002      	beq.n	800d6dc <HASH_MD5+0xa4>
 800d6d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d1f0      	bne.n	800d6be <HASH_MD5+0x86>

  if (busystatus != RESET)
 800d6dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d003      	beq.n	800d6ea <HASH_MD5+0xb2>
  {
     status = ERROR;
 800d6e2:	2300      	movs	r3, #0
 800d6e4:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 800d6e8:	e025      	b.n	800d736 <HASH_MD5+0xfe>
  }
  else
  {
    /* Read the message digest */
    HASH_GetDigest(&MD5_MessageDigest);
 800d6ea:	f107 031c 	add.w	r3, r7, #28
 800d6ee:	4618      	mov	r0, r3
 800d6f0:	f7ff fe44 	bl	800d37c <HASH_GetDigest>
    *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[0]);
 800d6f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d6f6:	69fa      	ldr	r2, [r7, #28]
 800d6f8:	65ba      	str	r2, [r7, #88]	; 0x58
 800d6fa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d6fc:	ba12      	rev	r2, r2
 800d6fe:	601a      	str	r2, [r3, #0]
    outputaddr+=4;
 800d700:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d702:	3304      	adds	r3, #4
 800d704:	65fb      	str	r3, [r7, #92]	; 0x5c
    *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[1]);
 800d706:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d708:	6a3a      	ldr	r2, [r7, #32]
 800d70a:	657a      	str	r2, [r7, #84]	; 0x54
 800d70c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d70e:	ba12      	rev	r2, r2
 800d710:	601a      	str	r2, [r3, #0]
    outputaddr+=4;
 800d712:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d714:	3304      	adds	r3, #4
 800d716:	65fb      	str	r3, [r7, #92]	; 0x5c
    *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[2]);
 800d718:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d71a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d71c:	653a      	str	r2, [r7, #80]	; 0x50
 800d71e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d720:	ba12      	rev	r2, r2
 800d722:	601a      	str	r2, [r3, #0]
    outputaddr+=4;
 800d724:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d726:	3304      	adds	r3, #4
 800d728:	65fb      	str	r3, [r7, #92]	; 0x5c
    *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[3]);
 800d72a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d72c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d72e:	64fa      	str	r2, [r7, #76]	; 0x4c
 800d730:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d732:	ba12      	rev	r2, r2
 800d734:	601a      	str	r2, [r3, #0]
  }
  return status; 
 800d736:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
}
 800d73a:	4618      	mov	r0, r3
 800d73c:	3770      	adds	r7, #112	; 0x70
 800d73e:	46bd      	mov	sp, r7
 800d740:	bd80      	pop	{r7, pc}
 800d742:	bf00      	nop

0800d744 <HMAC_MD5>:
  *          - SUCCESS: digest computation done
  *          - ERROR: digest computation failed
  */
ErrorStatus HMAC_MD5(uint8_t *Key, uint32_t Keylen, uint8_t *Input, 
                     uint32_t Ilen, uint8_t Output[16])
{
 800d744:	b580      	push	{r7, lr}
 800d746:	b09c      	sub	sp, #112	; 0x70
 800d748:	af00      	add	r7, sp, #0
 800d74a:	60f8      	str	r0, [r7, #12]
 800d74c:	60b9      	str	r1, [r7, #8]
 800d74e:	607a      	str	r2, [r7, #4]
 800d750:	603b      	str	r3, [r7, #0]
  HASH_InitTypeDef MD5_HASH_InitStructure;
  HASH_MsgDigest MD5_MessageDigest;
  __IO uint16_t nbvalidbitsdata = 0;
 800d752:	2300      	movs	r3, #0
 800d754:	82fb      	strh	r3, [r7, #22]
  __IO uint16_t nbvalidbitskey = 0;
 800d756:	2300      	movs	r3, #0
 800d758:	82bb      	strh	r3, [r7, #20]
  uint32_t i = 0;
 800d75a:	2300      	movs	r3, #0
 800d75c:	66fb      	str	r3, [r7, #108]	; 0x6c
  __IO uint32_t counter = 0;
 800d75e:	2300      	movs	r3, #0
 800d760:	613b      	str	r3, [r7, #16]
  uint32_t busystatus = 0;
 800d762:	2300      	movs	r3, #0
 800d764:	65fb      	str	r3, [r7, #92]	; 0x5c
  ErrorStatus status = SUCCESS;
 800d766:	2301      	movs	r3, #1
 800d768:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
  uint32_t keyaddr    = (uint32_t)Key;
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t inputaddr  = (uint32_t)Input;
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	663b      	str	r3, [r7, #96]	; 0x60
  uint32_t outputaddr = (uint32_t)Output;
 800d774:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d776:	65bb      	str	r3, [r7, #88]	; 0x58

  /* Number of valid bits in last word of the Input data */
  nbvalidbitsdata = 8 * (Ilen % 4);
 800d778:	683b      	ldr	r3, [r7, #0]
 800d77a:	b29b      	uxth	r3, r3
 800d77c:	f003 0303 	and.w	r3, r3, #3
 800d780:	b29b      	uxth	r3, r3
 800d782:	00db      	lsls	r3, r3, #3
 800d784:	b29b      	uxth	r3, r3
 800d786:	82fb      	strh	r3, [r7, #22]

  /* Number of valid bits in last word of the Key */
  nbvalidbitskey = 8 * (Keylen % 4);
 800d788:	68bb      	ldr	r3, [r7, #8]
 800d78a:	b29b      	uxth	r3, r3
 800d78c:	f003 0303 	and.w	r3, r3, #3
 800d790:	b29b      	uxth	r3, r3
 800d792:	00db      	lsls	r3, r3, #3
 800d794:	b29b      	uxth	r3, r3
 800d796:	82bb      	strh	r3, [r7, #20]
   
  /* HASH peripheral initialization */
  HASH_DeInit();
 800d798:	f7ff fd52 	bl	800d240 <HASH_DeInit>

  /* HASH Configuration */
  MD5_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_MD5;
 800d79c:	2380      	movs	r3, #128	; 0x80
 800d79e:	63bb      	str	r3, [r7, #56]	; 0x38
  MD5_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HMAC;
 800d7a0:	2340      	movs	r3, #64	; 0x40
 800d7a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  MD5_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
 800d7a4:	2320      	movs	r3, #32
 800d7a6:	643b      	str	r3, [r7, #64]	; 0x40
  if(Keylen > 64)
 800d7a8:	68bb      	ldr	r3, [r7, #8]
 800d7aa:	2b40      	cmp	r3, #64	; 0x40
 800d7ac:	d903      	bls.n	800d7b6 <HMAC_MD5+0x72>
  {
    /* HMAC long Key */
    MD5_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_LongKey;
 800d7ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800d7b2:	647b      	str	r3, [r7, #68]	; 0x44
 800d7b4:	e001      	b.n	800d7ba <HMAC_MD5+0x76>
  }
  else
  {
    /* HMAC short Key */
    MD5_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_ShortKey;
 800d7b6:	2300      	movs	r3, #0
 800d7b8:	647b      	str	r3, [r7, #68]	; 0x44
  }
  HASH_Init(&MD5_HASH_InitStructure);
 800d7ba:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800d7be:	4618      	mov	r0, r3
 800d7c0:	f7ff fd4a 	bl	800d258 <HASH_Init>

  /* Configure the number of valid bits in last word of the Key */
  HASH_SetLastWordValidBitsNbr(nbvalidbitskey);
 800d7c4:	8abb      	ldrh	r3, [r7, #20]
 800d7c6:	b29b      	uxth	r3, r3
 800d7c8:	4618      	mov	r0, r3
 800d7ca:	f7ff fda1 	bl	800d310 <HASH_SetLastWordValidBitsNbr>

  /* Write the Key */
  for(i=0; i<Keylen; i+=4)
 800d7ce:	2300      	movs	r3, #0
 800d7d0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d7d2:	e00a      	b.n	800d7ea <HMAC_MD5+0xa6>
  {
    HASH_DataIn(*(uint32_t*)keyaddr);
 800d7d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	4618      	mov	r0, r3
 800d7da:	f7ff fdb1 	bl	800d340 <HASH_DataIn>
    keyaddr+=4;
 800d7de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d7e0:	3304      	adds	r3, #4
 800d7e2:	667b      	str	r3, [r7, #100]	; 0x64

  /* Configure the number of valid bits in last word of the Key */
  HASH_SetLastWordValidBitsNbr(nbvalidbitskey);

  /* Write the Key */
  for(i=0; i<Keylen; i+=4)
 800d7e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d7e6:	3304      	adds	r3, #4
 800d7e8:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d7ea:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d7ec:	68bb      	ldr	r3, [r7, #8]
 800d7ee:	429a      	cmp	r2, r3
 800d7f0:	d3f0      	bcc.n	800d7d4 <HMAC_MD5+0x90>
    HASH_DataIn(*(uint32_t*)keyaddr);
    keyaddr+=4;
  }
  
  /* Start the HASH processor */
  HASH_StartDigest();
 800d7f2:	f7ff fdf1 	bl	800d3d8 <HASH_StartDigest>

  /* wait until the Busy flag is RESET */
  do
  {
    busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 800d7f6:	2008      	movs	r0, #8
 800d7f8:	f7ff feb4 	bl	800d564 <HASH_GetFlagStatus>
 800d7fc:	4603      	mov	r3, r0
 800d7fe:	65fb      	str	r3, [r7, #92]	; 0x5c
    counter++;
 800d800:	693b      	ldr	r3, [r7, #16]
 800d802:	3301      	adds	r3, #1
 800d804:	613b      	str	r3, [r7, #16]
  }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
 800d806:	693b      	ldr	r3, [r7, #16]
 800d808:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d80c:	d002      	beq.n	800d814 <HMAC_MD5+0xd0>
 800d80e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d810:	2b00      	cmp	r3, #0
 800d812:	d1f0      	bne.n	800d7f6 <HMAC_MD5+0xb2>

  if (busystatus != RESET)
 800d814:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d816:	2b00      	cmp	r3, #0
 800d818:	d003      	beq.n	800d822 <HMAC_MD5+0xde>
  {
     status = ERROR;
 800d81a:	2300      	movs	r3, #0
 800d81c:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 800d820:	e089      	b.n	800d936 <HMAC_MD5+0x1f2>
  }
  else
  {
    /* Configure the number of valid bits in last word of the Input data */
    HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);
 800d822:	8afb      	ldrh	r3, [r7, #22]
 800d824:	b29b      	uxth	r3, r3
 800d826:	4618      	mov	r0, r3
 800d828:	f7ff fd72 	bl	800d310 <HASH_SetLastWordValidBitsNbr>

    /* Write the Input block in the IN FIFO */
    for(i=0; i<Ilen; i+=4)
 800d82c:	2300      	movs	r3, #0
 800d82e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d830:	e00a      	b.n	800d848 <HMAC_MD5+0x104>
    {
      HASH_DataIn(*(uint32_t*)inputaddr);
 800d832:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	4618      	mov	r0, r3
 800d838:	f7ff fd82 	bl	800d340 <HASH_DataIn>
      inputaddr+=4;
 800d83c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d83e:	3304      	adds	r3, #4
 800d840:	663b      	str	r3, [r7, #96]	; 0x60
  {
    /* Configure the number of valid bits in last word of the Input data */
    HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);

    /* Write the Input block in the IN FIFO */
    for(i=0; i<Ilen; i+=4)
 800d842:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d844:	3304      	adds	r3, #4
 800d846:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d848:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d84a:	683b      	ldr	r3, [r7, #0]
 800d84c:	429a      	cmp	r2, r3
 800d84e:	d3f0      	bcc.n	800d832 <HMAC_MD5+0xee>
      HASH_DataIn(*(uint32_t*)inputaddr);
      inputaddr+=4;
    }

    /* Start the HASH processor */
    HASH_StartDigest();
 800d850:	f7ff fdc2 	bl	800d3d8 <HASH_StartDigest>

    /* wait until the Busy flag is RESET */
    counter =0;
 800d854:	2300      	movs	r3, #0
 800d856:	613b      	str	r3, [r7, #16]
    do
    {
       busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 800d858:	2008      	movs	r0, #8
 800d85a:	f7ff fe83 	bl	800d564 <HASH_GetFlagStatus>
 800d85e:	4603      	mov	r3, r0
 800d860:	65fb      	str	r3, [r7, #92]	; 0x5c
       counter++;
 800d862:	693b      	ldr	r3, [r7, #16]
 800d864:	3301      	adds	r3, #1
 800d866:	613b      	str	r3, [r7, #16]
    }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
 800d868:	693b      	ldr	r3, [r7, #16]
 800d86a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d86e:	d002      	beq.n	800d876 <HMAC_MD5+0x132>
 800d870:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d872:	2b00      	cmp	r3, #0
 800d874:	d1f0      	bne.n	800d858 <HMAC_MD5+0x114>

    if (busystatus != RESET)
 800d876:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d003      	beq.n	800d884 <HMAC_MD5+0x140>
    {
      status = ERROR;
 800d87c:	2300      	movs	r3, #0
 800d87e:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 800d882:	e058      	b.n	800d936 <HMAC_MD5+0x1f2>
    }
    else
    {  
      /* Configure the number of valid bits in last word of the Key */
      HASH_SetLastWordValidBitsNbr(nbvalidbitskey);
 800d884:	8abb      	ldrh	r3, [r7, #20]
 800d886:	b29b      	uxth	r3, r3
 800d888:	4618      	mov	r0, r3
 800d88a:	f7ff fd41 	bl	800d310 <HASH_SetLastWordValidBitsNbr>

      /* Write the Key */
      keyaddr = (uint32_t)Key;
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	667b      	str	r3, [r7, #100]	; 0x64
      for(i=0; i<Keylen; i+=4)
 800d892:	2300      	movs	r3, #0
 800d894:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d896:	e00a      	b.n	800d8ae <HMAC_MD5+0x16a>
      {
        HASH_DataIn(*(uint32_t*)keyaddr);
 800d898:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	4618      	mov	r0, r3
 800d89e:	f7ff fd4f 	bl	800d340 <HASH_DataIn>
        keyaddr+=4;
 800d8a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d8a4:	3304      	adds	r3, #4
 800d8a6:	667b      	str	r3, [r7, #100]	; 0x64
      /* Configure the number of valid bits in last word of the Key */
      HASH_SetLastWordValidBitsNbr(nbvalidbitskey);

      /* Write the Key */
      keyaddr = (uint32_t)Key;
      for(i=0; i<Keylen; i+=4)
 800d8a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d8aa:	3304      	adds	r3, #4
 800d8ac:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d8ae:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d8b0:	68bb      	ldr	r3, [r7, #8]
 800d8b2:	429a      	cmp	r2, r3
 800d8b4:	d3f0      	bcc.n	800d898 <HMAC_MD5+0x154>
        HASH_DataIn(*(uint32_t*)keyaddr);
        keyaddr+=4;
      }
  
       /* Start the HASH processor */
       HASH_StartDigest();
 800d8b6:	f7ff fd8f 	bl	800d3d8 <HASH_StartDigest>

       /* wait until the Busy flag is RESET */
       counter =0;
 800d8ba:	2300      	movs	r3, #0
 800d8bc:	613b      	str	r3, [r7, #16]
       do
       {
          busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 800d8be:	2008      	movs	r0, #8
 800d8c0:	f7ff fe50 	bl	800d564 <HASH_GetFlagStatus>
 800d8c4:	4603      	mov	r3, r0
 800d8c6:	65fb      	str	r3, [r7, #92]	; 0x5c
          counter++;
 800d8c8:	693b      	ldr	r3, [r7, #16]
 800d8ca:	3301      	adds	r3, #1
 800d8cc:	613b      	str	r3, [r7, #16]
      }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
 800d8ce:	693b      	ldr	r3, [r7, #16]
 800d8d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d8d4:	d002      	beq.n	800d8dc <HMAC_MD5+0x198>
 800d8d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d1f0      	bne.n	800d8be <HMAC_MD5+0x17a>

      if (busystatus != RESET)
 800d8dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d003      	beq.n	800d8ea <HMAC_MD5+0x1a6>
      {
         status = ERROR;
 800d8e2:	2300      	movs	r3, #0
 800d8e4:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 800d8e8:	e025      	b.n	800d936 <HMAC_MD5+0x1f2>
      }
      else
      {
         /* Read the message digest */
         HASH_GetDigest(&MD5_MessageDigest);
 800d8ea:	f107 0318 	add.w	r3, r7, #24
 800d8ee:	4618      	mov	r0, r3
 800d8f0:	f7ff fd44 	bl	800d37c <HASH_GetDigest>
         *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[0]);
 800d8f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d8f6:	69ba      	ldr	r2, [r7, #24]
 800d8f8:	657a      	str	r2, [r7, #84]	; 0x54
 800d8fa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d8fc:	ba12      	rev	r2, r2
 800d8fe:	601a      	str	r2, [r3, #0]
         outputaddr+=4;
 800d900:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d902:	3304      	adds	r3, #4
 800d904:	65bb      	str	r3, [r7, #88]	; 0x58
         *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[1]);
 800d906:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d908:	69fa      	ldr	r2, [r7, #28]
 800d90a:	653a      	str	r2, [r7, #80]	; 0x50
 800d90c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d90e:	ba12      	rev	r2, r2
 800d910:	601a      	str	r2, [r3, #0]
         outputaddr+=4;
 800d912:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d914:	3304      	adds	r3, #4
 800d916:	65bb      	str	r3, [r7, #88]	; 0x58
         *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[2]);
 800d918:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d91a:	6a3a      	ldr	r2, [r7, #32]
 800d91c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800d91e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d920:	ba12      	rev	r2, r2
 800d922:	601a      	str	r2, [r3, #0]
         outputaddr+=4;
 800d924:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d926:	3304      	adds	r3, #4
 800d928:	65bb      	str	r3, [r7, #88]	; 0x58
         *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[3]);
 800d92a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d92c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d92e:	64ba      	str	r2, [r7, #72]	; 0x48
 800d930:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d932:	ba12      	rev	r2, r2
 800d934:	601a      	str	r2, [r3, #0]
      }
    }
  }
  return status;  
 800d936:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
}
 800d93a:	4618      	mov	r0, r3
 800d93c:	3770      	adds	r7, #112	; 0x70
 800d93e:	46bd      	mov	sp, r7
 800d940:	bd80      	pop	{r7, pc}
 800d942:	bf00      	nop

0800d944 <HASH_SHA1>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: digest computation done
  *          - ERROR: digest computation failed
  */
ErrorStatus HASH_SHA1(uint8_t *Input, uint32_t Ilen, uint8_t Output[20])
{
 800d944:	b580      	push	{r7, lr}
 800d946:	b09c      	sub	sp, #112	; 0x70
 800d948:	af00      	add	r7, sp, #0
 800d94a:	60f8      	str	r0, [r7, #12]
 800d94c:	60b9      	str	r1, [r7, #8]
 800d94e:	607a      	str	r2, [r7, #4]
  HASH_InitTypeDef SHA1_HASH_InitStructure;
  HASH_MsgDigest SHA1_MessageDigest;
  __IO uint16_t nbvalidbitsdata = 0;
 800d950:	2300      	movs	r3, #0
 800d952:	82fb      	strh	r3, [r7, #22]
  uint32_t i = 0;
 800d954:	2300      	movs	r3, #0
 800d956:	66fb      	str	r3, [r7, #108]	; 0x6c
  __IO uint32_t counter = 0;
 800d958:	2300      	movs	r3, #0
 800d95a:	613b      	str	r3, [r7, #16]
  uint32_t busystatus = 0;
 800d95c:	2300      	movs	r3, #0
 800d95e:	663b      	str	r3, [r7, #96]	; 0x60
  ErrorStatus status = SUCCESS;
 800d960:	2301      	movs	r3, #1
 800d962:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
  uint32_t inputaddr  = (uint32_t)Input;
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t outputaddr = (uint32_t)Output;
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Number of valid bits in last word of the Input data */
  nbvalidbitsdata = 8 * (Ilen % 4);
 800d96e:	68bb      	ldr	r3, [r7, #8]
 800d970:	b29b      	uxth	r3, r3
 800d972:	f003 0303 	and.w	r3, r3, #3
 800d976:	b29b      	uxth	r3, r3
 800d978:	00db      	lsls	r3, r3, #3
 800d97a:	b29b      	uxth	r3, r3
 800d97c:	82fb      	strh	r3, [r7, #22]

  /* HASH peripheral initialization */
  HASH_DeInit();
 800d97e:	f7ff fc5f 	bl	800d240 <HASH_DeInit>

  /* HASH Configuration */
  SHA1_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_SHA1;
 800d982:	2300      	movs	r3, #0
 800d984:	63bb      	str	r3, [r7, #56]	; 0x38
  SHA1_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HASH;
 800d986:	2300      	movs	r3, #0
 800d988:	63fb      	str	r3, [r7, #60]	; 0x3c
  SHA1_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
 800d98a:	2320      	movs	r3, #32
 800d98c:	643b      	str	r3, [r7, #64]	; 0x40
  HASH_Init(&SHA1_HASH_InitStructure);
 800d98e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800d992:	4618      	mov	r0, r3
 800d994:	f7ff fc60 	bl	800d258 <HASH_Init>

  /* Configure the number of valid bits in last word of the data */
  HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);
 800d998:	8afb      	ldrh	r3, [r7, #22]
 800d99a:	b29b      	uxth	r3, r3
 800d99c:	4618      	mov	r0, r3
 800d99e:	f7ff fcb7 	bl	800d310 <HASH_SetLastWordValidBitsNbr>

  /* Write the Input block in the IN FIFO */
  for(i=0; i<Ilen; i+=4)
 800d9a2:	2300      	movs	r3, #0
 800d9a4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d9a6:	e00a      	b.n	800d9be <HASH_SHA1+0x7a>
  {
    HASH_DataIn(*(uint32_t*)inputaddr);
 800d9a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	4618      	mov	r0, r3
 800d9ae:	f7ff fcc7 	bl	800d340 <HASH_DataIn>
    inputaddr+=4;
 800d9b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d9b4:	3304      	adds	r3, #4
 800d9b6:	667b      	str	r3, [r7, #100]	; 0x64

  /* Configure the number of valid bits in last word of the data */
  HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);

  /* Write the Input block in the IN FIFO */
  for(i=0; i<Ilen; i+=4)
 800d9b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d9ba:	3304      	adds	r3, #4
 800d9bc:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d9be:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d9c0:	68bb      	ldr	r3, [r7, #8]
 800d9c2:	429a      	cmp	r2, r3
 800d9c4:	d3f0      	bcc.n	800d9a8 <HASH_SHA1+0x64>
    HASH_DataIn(*(uint32_t*)inputaddr);
    inputaddr+=4;
  }

  /* Start the HASH processor */
  HASH_StartDigest();
 800d9c6:	f7ff fd07 	bl	800d3d8 <HASH_StartDigest>

  /* wait until the Busy flag is RESET */
  do
  {
    busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 800d9ca:	2008      	movs	r0, #8
 800d9cc:	f7ff fdca 	bl	800d564 <HASH_GetFlagStatus>
 800d9d0:	4603      	mov	r3, r0
 800d9d2:	663b      	str	r3, [r7, #96]	; 0x60
    counter++;
 800d9d4:	693b      	ldr	r3, [r7, #16]
 800d9d6:	3301      	adds	r3, #1
 800d9d8:	613b      	str	r3, [r7, #16]
  }while ((counter != SHA1BUSY_TIMEOUT) && (busystatus != RESET));
 800d9da:	693b      	ldr	r3, [r7, #16]
 800d9dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d9e0:	d002      	beq.n	800d9e8 <HASH_SHA1+0xa4>
 800d9e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d1f0      	bne.n	800d9ca <HASH_SHA1+0x86>

  if (busystatus != RESET)
 800d9e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d003      	beq.n	800d9f6 <HASH_SHA1+0xb2>
  {
     status = ERROR;
 800d9ee:	2300      	movs	r3, #0
 800d9f0:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 800d9f4:	e02e      	b.n	800da54 <HASH_SHA1+0x110>
  }
  else
  {
    /* Read the message digest */
    HASH_GetDigest(&SHA1_MessageDigest);
 800d9f6:	f107 0318 	add.w	r3, r7, #24
 800d9fa:	4618      	mov	r0, r3
 800d9fc:	f7ff fcbe 	bl	800d37c <HASH_GetDigest>
    *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[0]);
 800da00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800da02:	69ba      	ldr	r2, [r7, #24]
 800da04:	65ba      	str	r2, [r7, #88]	; 0x58
 800da06:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800da08:	ba12      	rev	r2, r2
 800da0a:	601a      	str	r2, [r3, #0]
    outputaddr+=4;
 800da0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800da0e:	3304      	adds	r3, #4
 800da10:	65fb      	str	r3, [r7, #92]	; 0x5c
    *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[1]);
 800da12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800da14:	69fa      	ldr	r2, [r7, #28]
 800da16:	657a      	str	r2, [r7, #84]	; 0x54
 800da18:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800da1a:	ba12      	rev	r2, r2
 800da1c:	601a      	str	r2, [r3, #0]
    outputaddr+=4;
 800da1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800da20:	3304      	adds	r3, #4
 800da22:	65fb      	str	r3, [r7, #92]	; 0x5c
    *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[2]);
 800da24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800da26:	6a3a      	ldr	r2, [r7, #32]
 800da28:	653a      	str	r2, [r7, #80]	; 0x50
 800da2a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800da2c:	ba12      	rev	r2, r2
 800da2e:	601a      	str	r2, [r3, #0]
    outputaddr+=4;
 800da30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800da32:	3304      	adds	r3, #4
 800da34:	65fb      	str	r3, [r7, #92]	; 0x5c
    *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[3]);
 800da36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800da38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800da3a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800da3c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800da3e:	ba12      	rev	r2, r2
 800da40:	601a      	str	r2, [r3, #0]
    outputaddr+=4;
 800da42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800da44:	3304      	adds	r3, #4
 800da46:	65fb      	str	r3, [r7, #92]	; 0x5c
    *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[4]);
 800da48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800da4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800da4c:	64ba      	str	r2, [r7, #72]	; 0x48
 800da4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800da50:	ba12      	rev	r2, r2
 800da52:	601a      	str	r2, [r3, #0]
  }
  return status;
 800da54:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
}
 800da58:	4618      	mov	r0, r3
 800da5a:	3770      	adds	r7, #112	; 0x70
 800da5c:	46bd      	mov	sp, r7
 800da5e:	bd80      	pop	{r7, pc}

0800da60 <HMAC_SHA1>:
  *          - SUCCESS: digest computation done
  *          - ERROR: digest computation failed
  */
ErrorStatus HMAC_SHA1(uint8_t *Key, uint32_t Keylen, uint8_t *Input,
                      uint32_t Ilen, uint8_t Output[20])
{
 800da60:	b580      	push	{r7, lr}
 800da62:	b09e      	sub	sp, #120	; 0x78
 800da64:	af00      	add	r7, sp, #0
 800da66:	60f8      	str	r0, [r7, #12]
 800da68:	60b9      	str	r1, [r7, #8]
 800da6a:	607a      	str	r2, [r7, #4]
 800da6c:	603b      	str	r3, [r7, #0]
  HASH_InitTypeDef SHA1_HASH_InitStructure;
  HASH_MsgDigest SHA1_MessageDigest;
  __IO uint16_t nbvalidbitsdata = 0;
 800da6e:	2300      	movs	r3, #0
 800da70:	837b      	strh	r3, [r7, #26]
  __IO uint16_t nbvalidbitskey = 0;
 800da72:	2300      	movs	r3, #0
 800da74:	833b      	strh	r3, [r7, #24]
  uint32_t i = 0;
 800da76:	2300      	movs	r3, #0
 800da78:	677b      	str	r3, [r7, #116]	; 0x74
  __IO uint32_t counter = 0;
 800da7a:	2300      	movs	r3, #0
 800da7c:	617b      	str	r3, [r7, #20]
  uint32_t busystatus = 0;
 800da7e:	2300      	movs	r3, #0
 800da80:	667b      	str	r3, [r7, #100]	; 0x64
  ErrorStatus status = SUCCESS;
 800da82:	2301      	movs	r3, #1
 800da84:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
  uint32_t keyaddr    = (uint32_t)Key;
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t inputaddr  = (uint32_t)Input;
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	66bb      	str	r3, [r7, #104]	; 0x68
  uint32_t outputaddr = (uint32_t)Output;
 800da90:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800da94:	663b      	str	r3, [r7, #96]	; 0x60

  /* Number of valid bits in last word of the Input data */
  nbvalidbitsdata = 8 * (Ilen % 4);
 800da96:	683b      	ldr	r3, [r7, #0]
 800da98:	b29b      	uxth	r3, r3
 800da9a:	f003 0303 	and.w	r3, r3, #3
 800da9e:	b29b      	uxth	r3, r3
 800daa0:	00db      	lsls	r3, r3, #3
 800daa2:	b29b      	uxth	r3, r3
 800daa4:	837b      	strh	r3, [r7, #26]

  /* Number of valid bits in last word of the Key */
  nbvalidbitskey = 8 * (Keylen % 4);
 800daa6:	68bb      	ldr	r3, [r7, #8]
 800daa8:	b29b      	uxth	r3, r3
 800daaa:	f003 0303 	and.w	r3, r3, #3
 800daae:	b29b      	uxth	r3, r3
 800dab0:	00db      	lsls	r3, r3, #3
 800dab2:	b29b      	uxth	r3, r3
 800dab4:	833b      	strh	r3, [r7, #24]

  /* HASH peripheral initialization */
  HASH_DeInit();
 800dab6:	f7ff fbc3 	bl	800d240 <HASH_DeInit>

  /* HASH Configuration */
  SHA1_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_SHA1;
 800daba:	2300      	movs	r3, #0
 800dabc:	63fb      	str	r3, [r7, #60]	; 0x3c
  SHA1_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HMAC;
 800dabe:	2340      	movs	r3, #64	; 0x40
 800dac0:	643b      	str	r3, [r7, #64]	; 0x40
  SHA1_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
 800dac2:	2320      	movs	r3, #32
 800dac4:	647b      	str	r3, [r7, #68]	; 0x44
  if(Keylen > 64)
 800dac6:	68bb      	ldr	r3, [r7, #8]
 800dac8:	2b40      	cmp	r3, #64	; 0x40
 800daca:	d903      	bls.n	800dad4 <HMAC_SHA1+0x74>
  {
    /* HMAC long Key */
    SHA1_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_LongKey;
 800dacc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800dad0:	64bb      	str	r3, [r7, #72]	; 0x48
 800dad2:	e001      	b.n	800dad8 <HMAC_SHA1+0x78>
  }
  else
  {
    /* HMAC short Key */
    SHA1_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_ShortKey;
 800dad4:	2300      	movs	r3, #0
 800dad6:	64bb      	str	r3, [r7, #72]	; 0x48
  }
  HASH_Init(&SHA1_HASH_InitStructure);
 800dad8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800dadc:	4618      	mov	r0, r3
 800dade:	f7ff fbbb 	bl	800d258 <HASH_Init>

  /* Configure the number of valid bits in last word of the Key */
  HASH_SetLastWordValidBitsNbr(nbvalidbitskey);
 800dae2:	8b3b      	ldrh	r3, [r7, #24]
 800dae4:	b29b      	uxth	r3, r3
 800dae6:	4618      	mov	r0, r3
 800dae8:	f7ff fc12 	bl	800d310 <HASH_SetLastWordValidBitsNbr>

  /* Write the Key */
  for(i=0; i<Keylen; i+=4)
 800daec:	2300      	movs	r3, #0
 800daee:	677b      	str	r3, [r7, #116]	; 0x74
 800daf0:	e00a      	b.n	800db08 <HMAC_SHA1+0xa8>
  {
    HASH_DataIn(*(uint32_t*)keyaddr);
 800daf2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	4618      	mov	r0, r3
 800daf8:	f7ff fc22 	bl	800d340 <HASH_DataIn>
    keyaddr+=4;
 800dafc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dafe:	3304      	adds	r3, #4
 800db00:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* Configure the number of valid bits in last word of the Key */
  HASH_SetLastWordValidBitsNbr(nbvalidbitskey);

  /* Write the Key */
  for(i=0; i<Keylen; i+=4)
 800db02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800db04:	3304      	adds	r3, #4
 800db06:	677b      	str	r3, [r7, #116]	; 0x74
 800db08:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800db0a:	68bb      	ldr	r3, [r7, #8]
 800db0c:	429a      	cmp	r2, r3
 800db0e:	d3f0      	bcc.n	800daf2 <HMAC_SHA1+0x92>
    HASH_DataIn(*(uint32_t*)keyaddr);
    keyaddr+=4;
  }

  /* Start the HASH processor */
  HASH_StartDigest();
 800db10:	f7ff fc62 	bl	800d3d8 <HASH_StartDigest>

  /* wait until the Busy flag is RESET */
  do
  {
    busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 800db14:	2008      	movs	r0, #8
 800db16:	f7ff fd25 	bl	800d564 <HASH_GetFlagStatus>
 800db1a:	4603      	mov	r3, r0
 800db1c:	667b      	str	r3, [r7, #100]	; 0x64
    counter++;
 800db1e:	697b      	ldr	r3, [r7, #20]
 800db20:	3301      	adds	r3, #1
 800db22:	617b      	str	r3, [r7, #20]
  }while ((counter != SHA1BUSY_TIMEOUT) && (busystatus != RESET));
 800db24:	697b      	ldr	r3, [r7, #20]
 800db26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800db2a:	d002      	beq.n	800db32 <HMAC_SHA1+0xd2>
 800db2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d1f0      	bne.n	800db14 <HMAC_SHA1+0xb4>

  if (busystatus != RESET)
 800db32:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800db34:	2b00      	cmp	r3, #0
 800db36:	d003      	beq.n	800db40 <HMAC_SHA1+0xe0>
  {
     status = ERROR;
 800db38:	2300      	movs	r3, #0
 800db3a:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 800db3e:	e092      	b.n	800dc66 <HMAC_SHA1+0x206>
  }
  else
  {
    /* Configure the number of valid bits in last word of the Input data */
    HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);
 800db40:	8b7b      	ldrh	r3, [r7, #26]
 800db42:	b29b      	uxth	r3, r3
 800db44:	4618      	mov	r0, r3
 800db46:	f7ff fbe3 	bl	800d310 <HASH_SetLastWordValidBitsNbr>

    /* Write the Input block in the IN FIFO */
    for(i=0; i<Ilen; i+=4)
 800db4a:	2300      	movs	r3, #0
 800db4c:	677b      	str	r3, [r7, #116]	; 0x74
 800db4e:	e00a      	b.n	800db66 <HMAC_SHA1+0x106>
    {
      HASH_DataIn(*(uint32_t*)inputaddr);
 800db50:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	4618      	mov	r0, r3
 800db56:	f7ff fbf3 	bl	800d340 <HASH_DataIn>
      inputaddr+=4;
 800db5a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800db5c:	3304      	adds	r3, #4
 800db5e:	66bb      	str	r3, [r7, #104]	; 0x68
  {
    /* Configure the number of valid bits in last word of the Input data */
    HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);

    /* Write the Input block in the IN FIFO */
    for(i=0; i<Ilen; i+=4)
 800db60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800db62:	3304      	adds	r3, #4
 800db64:	677b      	str	r3, [r7, #116]	; 0x74
 800db66:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800db68:	683b      	ldr	r3, [r7, #0]
 800db6a:	429a      	cmp	r2, r3
 800db6c:	d3f0      	bcc.n	800db50 <HMAC_SHA1+0xf0>
      HASH_DataIn(*(uint32_t*)inputaddr);
      inputaddr+=4;
    }

    /* Start the HASH processor */
    HASH_StartDigest();
 800db6e:	f7ff fc33 	bl	800d3d8 <HASH_StartDigest>


    /* wait until the Busy flag is RESET */
    counter =0;
 800db72:	2300      	movs	r3, #0
 800db74:	617b      	str	r3, [r7, #20]
    do
    {
      busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 800db76:	2008      	movs	r0, #8
 800db78:	f7ff fcf4 	bl	800d564 <HASH_GetFlagStatus>
 800db7c:	4603      	mov	r3, r0
 800db7e:	667b      	str	r3, [r7, #100]	; 0x64
      counter++;
 800db80:	697b      	ldr	r3, [r7, #20]
 800db82:	3301      	adds	r3, #1
 800db84:	617b      	str	r3, [r7, #20]
    }while ((counter != SHA1BUSY_TIMEOUT) && (busystatus != RESET));
 800db86:	697b      	ldr	r3, [r7, #20]
 800db88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800db8c:	d002      	beq.n	800db94 <HMAC_SHA1+0x134>
 800db8e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800db90:	2b00      	cmp	r3, #0
 800db92:	d1f0      	bne.n	800db76 <HMAC_SHA1+0x116>

    if (busystatus != RESET)
 800db94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800db96:	2b00      	cmp	r3, #0
 800db98:	d003      	beq.n	800dba2 <HMAC_SHA1+0x142>
    {
      status = ERROR;
 800db9a:	2300      	movs	r3, #0
 800db9c:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 800dba0:	e061      	b.n	800dc66 <HMAC_SHA1+0x206>
    }
    else
    {  
      /* Configure the number of valid bits in last word of the Key */
      HASH_SetLastWordValidBitsNbr(nbvalidbitskey);
 800dba2:	8b3b      	ldrh	r3, [r7, #24]
 800dba4:	b29b      	uxth	r3, r3
 800dba6:	4618      	mov	r0, r3
 800dba8:	f7ff fbb2 	bl	800d310 <HASH_SetLastWordValidBitsNbr>

      /* Write the Key */
      keyaddr = (uint32_t)Key;
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	66fb      	str	r3, [r7, #108]	; 0x6c
      for(i=0; i<Keylen; i+=4)
 800dbb0:	2300      	movs	r3, #0
 800dbb2:	677b      	str	r3, [r7, #116]	; 0x74
 800dbb4:	e00a      	b.n	800dbcc <HMAC_SHA1+0x16c>
      {
        HASH_DataIn(*(uint32_t*)keyaddr);
 800dbb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	4618      	mov	r0, r3
 800dbbc:	f7ff fbc0 	bl	800d340 <HASH_DataIn>
        keyaddr+=4;
 800dbc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dbc2:	3304      	adds	r3, #4
 800dbc4:	66fb      	str	r3, [r7, #108]	; 0x6c
      /* Configure the number of valid bits in last word of the Key */
      HASH_SetLastWordValidBitsNbr(nbvalidbitskey);

      /* Write the Key */
      keyaddr = (uint32_t)Key;
      for(i=0; i<Keylen; i+=4)
 800dbc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800dbc8:	3304      	adds	r3, #4
 800dbca:	677b      	str	r3, [r7, #116]	; 0x74
 800dbcc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800dbce:	68bb      	ldr	r3, [r7, #8]
 800dbd0:	429a      	cmp	r2, r3
 800dbd2:	d3f0      	bcc.n	800dbb6 <HMAC_SHA1+0x156>
        HASH_DataIn(*(uint32_t*)keyaddr);
        keyaddr+=4;
      }

      /* Start the HASH processor */
      HASH_StartDigest();
 800dbd4:	f7ff fc00 	bl	800d3d8 <HASH_StartDigest>

      /* wait until the Busy flag is RESET */
      counter =0;
 800dbd8:	2300      	movs	r3, #0
 800dbda:	617b      	str	r3, [r7, #20]
      do
      {
        busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 800dbdc:	2008      	movs	r0, #8
 800dbde:	f7ff fcc1 	bl	800d564 <HASH_GetFlagStatus>
 800dbe2:	4603      	mov	r3, r0
 800dbe4:	667b      	str	r3, [r7, #100]	; 0x64
        counter++;
 800dbe6:	697b      	ldr	r3, [r7, #20]
 800dbe8:	3301      	adds	r3, #1
 800dbea:	617b      	str	r3, [r7, #20]
      }while ((counter != SHA1BUSY_TIMEOUT) && (busystatus != RESET));
 800dbec:	697b      	ldr	r3, [r7, #20]
 800dbee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dbf2:	d002      	beq.n	800dbfa <HMAC_SHA1+0x19a>
 800dbf4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d1f0      	bne.n	800dbdc <HMAC_SHA1+0x17c>

      if (busystatus != RESET)
 800dbfa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d003      	beq.n	800dc08 <HMAC_SHA1+0x1a8>
      {
        status = ERROR;
 800dc00:	2300      	movs	r3, #0
 800dc02:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 800dc06:	e02e      	b.n	800dc66 <HMAC_SHA1+0x206>
      }
      else
      {
        /* Read the message digest */
        HASH_GetDigest(&SHA1_MessageDigest);
 800dc08:	f107 031c 	add.w	r3, r7, #28
 800dc0c:	4618      	mov	r0, r3
 800dc0e:	f7ff fbb5 	bl	800d37c <HASH_GetDigest>
        *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[0]);
 800dc12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dc14:	69fa      	ldr	r2, [r7, #28]
 800dc16:	65fa      	str	r2, [r7, #92]	; 0x5c
 800dc18:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800dc1a:	ba12      	rev	r2, r2
 800dc1c:	601a      	str	r2, [r3, #0]
        outputaddr+=4;
 800dc1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dc20:	3304      	adds	r3, #4
 800dc22:	663b      	str	r3, [r7, #96]	; 0x60
        *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[1]);
 800dc24:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dc26:	6a3a      	ldr	r2, [r7, #32]
 800dc28:	65ba      	str	r2, [r7, #88]	; 0x58
 800dc2a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800dc2c:	ba12      	rev	r2, r2
 800dc2e:	601a      	str	r2, [r3, #0]
        outputaddr+=4;
 800dc30:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dc32:	3304      	adds	r3, #4
 800dc34:	663b      	str	r3, [r7, #96]	; 0x60
        *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[2]);
 800dc36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dc38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dc3a:	657a      	str	r2, [r7, #84]	; 0x54
 800dc3c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800dc3e:	ba12      	rev	r2, r2
 800dc40:	601a      	str	r2, [r3, #0]
        outputaddr+=4;
 800dc42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dc44:	3304      	adds	r3, #4
 800dc46:	663b      	str	r3, [r7, #96]	; 0x60
        *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[3]);
 800dc48:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dc4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dc4c:	653a      	str	r2, [r7, #80]	; 0x50
 800dc4e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800dc50:	ba12      	rev	r2, r2
 800dc52:	601a      	str	r2, [r3, #0]
        outputaddr+=4;
 800dc54:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dc56:	3304      	adds	r3, #4
 800dc58:	663b      	str	r3, [r7, #96]	; 0x60
        *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[4]);
 800dc5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dc5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dc5e:	64fa      	str	r2, [r7, #76]	; 0x4c
 800dc60:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800dc62:	ba12      	rev	r2, r2
 800dc64:	601a      	str	r2, [r3, #0]
      }
    }  
  }
  return status;  
 800dc66:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
}
 800dc6a:	4618      	mov	r0, r3
 800dc6c:	3778      	adds	r7, #120	; 0x78
 800dc6e:	46bd      	mov	sp, r7
 800dc70:	bd80      	pop	{r7, pc}
 800dc72:	bf00      	nop

0800dc74 <I2C_DeInit>:
  * @brief  Deinitialize the I2Cx peripheral registers to their default reset values.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval None
  */
void I2C_DeInit(I2C_TypeDef* I2Cx)
{
 800dc74:	b580      	push	{r7, lr}
 800dc76:	b082      	sub	sp, #8
 800dc78:	af00      	add	r7, sp, #0
 800dc7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  if (I2Cx == I2C1)
 800dc7c:	687a      	ldr	r2, [r7, #4]
 800dc7e:	4b17      	ldr	r3, [pc, #92]	; (800dcdc <I2C_DeInit+0x68>)
 800dc80:	429a      	cmp	r2, r3
 800dc82:	d10a      	bne.n	800dc9a <I2C_DeInit+0x26>
  {
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
 800dc84:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800dc88:	2101      	movs	r1, #1
 800dc8a:	f002 f8bd 	bl	800fe08 <RCC_APB1PeriphResetCmd>
    /* Release I2C1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);    
 800dc8e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800dc92:	2100      	movs	r1, #0
 800dc94:	f002 f8b8 	bl	800fe08 <RCC_APB1PeriphResetCmd>
 800dc98:	e01c      	b.n	800dcd4 <I2C_DeInit+0x60>
  }
  else if (I2Cx == I2C2)
 800dc9a:	687a      	ldr	r2, [r7, #4]
 800dc9c:	4b10      	ldr	r3, [pc, #64]	; (800dce0 <I2C_DeInit+0x6c>)
 800dc9e:	429a      	cmp	r2, r3
 800dca0:	d10a      	bne.n	800dcb8 <I2C_DeInit+0x44>
  {
    /* Enable I2C2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
 800dca2:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800dca6:	2101      	movs	r1, #1
 800dca8:	f002 f8ae 	bl	800fe08 <RCC_APB1PeriphResetCmd>
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);      
 800dcac:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800dcb0:	2100      	movs	r1, #0
 800dcb2:	f002 f8a9 	bl	800fe08 <RCC_APB1PeriphResetCmd>
 800dcb6:	e00d      	b.n	800dcd4 <I2C_DeInit+0x60>
  }
  else 
  {
    if (I2Cx == I2C3)
 800dcb8:	687a      	ldr	r2, [r7, #4]
 800dcba:	4b0a      	ldr	r3, [pc, #40]	; (800dce4 <I2C_DeInit+0x70>)
 800dcbc:	429a      	cmp	r2, r3
 800dcbe:	d109      	bne.n	800dcd4 <I2C_DeInit+0x60>
    {
      /* Enable I2C3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
 800dcc0:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800dcc4:	2101      	movs	r1, #1
 800dcc6:	f002 f89f 	bl	800fe08 <RCC_APB1PeriphResetCmd>
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
 800dcca:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800dcce:	2100      	movs	r1, #0
 800dcd0:	f002 f89a 	bl	800fe08 <RCC_APB1PeriphResetCmd>
    }
  }
}
 800dcd4:	3708      	adds	r7, #8
 800dcd6:	46bd      	mov	sp, r7
 800dcd8:	bd80      	pop	{r7, pc}
 800dcda:	bf00      	nop
 800dcdc:	40005400 	.word	0x40005400
 800dce0:	40005800 	.word	0x40005800
 800dce4:	40005c00 	.word	0x40005c00

0800dce8 <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
  *         the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 800dce8:	b580      	push	{r7, lr}
 800dcea:	b08a      	sub	sp, #40	; 0x28
 800dcec:	af00      	add	r7, sp, #0
 800dcee:	6078      	str	r0, [r7, #4]
 800dcf0:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, freqrange = 0;
 800dcf2:	2300      	movs	r3, #0
 800dcf4:	84fb      	strh	r3, [r7, #38]	; 0x26
 800dcf6:	2300      	movs	r3, #0
 800dcf8:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t result = 0x04;
 800dcfa:	2304      	movs	r3, #4
 800dcfc:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint32_t pclk1 = 8000000;
 800dcfe:	4b57      	ldr	r3, [pc, #348]	; (800de5c <I2C_Init+0x174>)
 800dd00:	61fb      	str	r3, [r7, #28]
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	889b      	ldrh	r3, [r3, #4]
 800dd06:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 800dd08:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800dd0a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800dd0e:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 800dd10:	f107 030c 	add.w	r3, r7, #12
 800dd14:	4618      	mov	r0, r3
 800dd16:	f001 fddb 	bl	800f8d0 <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 800dd1a:	697b      	ldr	r3, [r7, #20]
 800dd1c:	61fb      	str	r3, [r7, #28]
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 800dd1e:	69fa      	ldr	r2, [r7, #28]
 800dd20:	4b4f      	ldr	r3, [pc, #316]	; (800de60 <I2C_Init+0x178>)
 800dd22:	fba3 1302 	umull	r1, r3, r3, r2
 800dd26:	0c9b      	lsrs	r3, r3, #18
 800dd28:	847b      	strh	r3, [r7, #34]	; 0x22
  tmpreg |= freqrange;
 800dd2a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800dd2c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dd2e:	4313      	orrs	r3, r2
 800dd30:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800dd36:	809a      	strh	r2, [r3, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	881b      	ldrh	r3, [r3, #0]
 800dd3c:	b29b      	uxth	r3, r3
 800dd3e:	f023 0301 	bic.w	r3, r3, #1
 800dd42:	b29a      	uxth	r2, r3
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	801a      	strh	r2, [r3, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;
 800dd48:	2300      	movs	r3, #0
 800dd4a:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 800dd4c:	683b      	ldr	r3, [r7, #0]
 800dd4e:	681a      	ldr	r2, [r3, #0]
 800dd50:	4b44      	ldr	r3, [pc, #272]	; (800de64 <I2C_Init+0x17c>)
 800dd52:	429a      	cmp	r2, r3
 800dd54:	d815      	bhi.n	800dd82 <I2C_Init+0x9a>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 800dd56:	683b      	ldr	r3, [r7, #0]
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	005b      	lsls	r3, r3, #1
 800dd5c:	69fa      	ldr	r2, [r7, #28]
 800dd5e:	fbb2 f3f3 	udiv	r3, r2, r3
 800dd62:	84bb      	strh	r3, [r7, #36]	; 0x24
    /* Test if CCR value is under 0x4*/
    if (result < 0x04)
 800dd64:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dd66:	2b03      	cmp	r3, #3
 800dd68:	d801      	bhi.n	800dd6e <I2C_Init+0x86>
    {
      /* Set minimum allowed value */
      result = 0x04;  
 800dd6a:	2304      	movs	r3, #4
 800dd6c:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
 800dd6e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800dd70:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dd72:	4313      	orrs	r3, r2
 800dd74:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 800dd76:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dd78:	3301      	adds	r3, #1
 800dd7a:	b29a      	uxth	r2, r3
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	841a      	strh	r2, [r3, #32]
 800dd80:	e040      	b.n	800de04 <I2C_Init+0x11c>
  /* Configure speed in fast mode */
  /* To use the I2C at 400 KHz (in fast mode), the PCLK1 frequency (I2C peripheral
     input clock) must be a multiple of 10 MHz */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 800dd82:	683b      	ldr	r3, [r7, #0]
 800dd84:	88da      	ldrh	r2, [r3, #6]
 800dd86:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 800dd8a:	429a      	cmp	r2, r3
 800dd8c:	d109      	bne.n	800dda2 <I2C_Init+0xba>
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 800dd8e:	683b      	ldr	r3, [r7, #0]
 800dd90:	681a      	ldr	r2, [r3, #0]
 800dd92:	4613      	mov	r3, r2
 800dd94:	005b      	lsls	r3, r3, #1
 800dd96:	4413      	add	r3, r2
 800dd98:	69fa      	ldr	r2, [r7, #28]
 800dd9a:	fbb2 f3f3 	udiv	r3, r2, r3
 800dd9e:	84bb      	strh	r3, [r7, #36]	; 0x24
 800dda0:	e00e      	b.n	800ddc0 <I2C_Init+0xd8>
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 800dda2:	683b      	ldr	r3, [r7, #0]
 800dda4:	681a      	ldr	r2, [r3, #0]
 800dda6:	4613      	mov	r3, r2
 800dda8:	009b      	lsls	r3, r3, #2
 800ddaa:	4413      	add	r3, r2
 800ddac:	009a      	lsls	r2, r3, #2
 800ddae:	4413      	add	r3, r2
 800ddb0:	69fa      	ldr	r2, [r7, #28]
 800ddb2:	fbb2 f3f3 	udiv	r3, r2, r3
 800ddb6:	84bb      	strh	r3, [r7, #36]	; 0x24
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 800ddb8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ddba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ddbe:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* Test if CCR value is under 0x1*/
    if ((result & I2C_CCR_CCR) == 0)
 800ddc0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ddc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d103      	bne.n	800ddd2 <I2C_Init+0xea>
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 800ddca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ddcc:	f043 0301 	orr.w	r3, r3, #1
 800ddd0:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
 800ddd2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ddd4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ddd6:	4313      	orrs	r3, r2
 800ddd8:	b29b      	uxth	r3, r3
 800ddda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ddde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dde2:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 800dde4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dde6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800ddea:	fb02 f303 	mul.w	r3, r2, r3
 800ddee:	4a1e      	ldr	r2, [pc, #120]	; (800de68 <I2C_Init+0x180>)
 800ddf0:	fb82 1203 	smull	r1, r2, r2, r3
 800ddf4:	1192      	asrs	r2, r2, #6
 800ddf6:	17db      	asrs	r3, r3, #31
 800ddf8:	1ad3      	subs	r3, r2, r3
 800ddfa:	b29b      	uxth	r3, r3
 800ddfc:	3301      	adds	r3, #1
 800ddfe:	b29a      	uxth	r2, r3
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	841a      	strh	r2, [r3, #32]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800de08:	839a      	strh	r2, [r3, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	881b      	ldrh	r3, [r3, #0]
 800de0e:	b29b      	uxth	r3, r3
 800de10:	f043 0301 	orr.w	r3, r3, #1
 800de14:	b29a      	uxth	r2, r3
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	881b      	ldrh	r3, [r3, #0]
 800de1e:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
 800de20:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800de22:	f423 6381 	bic.w	r3, r3, #1032	; 0x408
 800de26:	f023 0302 	bic.w	r3, r3, #2
 800de2a:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 800de2c:	683b      	ldr	r3, [r7, #0]
 800de2e:	889a      	ldrh	r2, [r3, #4]
 800de30:	683b      	ldr	r3, [r7, #0]
 800de32:	895b      	ldrh	r3, [r3, #10]
 800de34:	4313      	orrs	r3, r2
 800de36:	b29a      	uxth	r2, r3
 800de38:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800de3a:	4313      	orrs	r3, r2
 800de3c:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800de42:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 800de44:	683b      	ldr	r3, [r7, #0]
 800de46:	899a      	ldrh	r2, [r3, #12]
 800de48:	683b      	ldr	r3, [r7, #0]
 800de4a:	891b      	ldrh	r3, [r3, #8]
 800de4c:	4313      	orrs	r3, r2
 800de4e:	b29a      	uxth	r2, r3
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	811a      	strh	r2, [r3, #8]
}
 800de54:	3728      	adds	r7, #40	; 0x28
 800de56:	46bd      	mov	sp, r7
 800de58:	bd80      	pop	{r7, pc}
 800de5a:	bf00      	nop
 800de5c:	007a1200 	.word	0x007a1200
 800de60:	431bde83 	.word	0x431bde83
 800de64:	000186a0 	.word	0x000186a0
 800de68:	10624dd3 	.word	0x10624dd3

0800de6c <I2C_StructInit>:
  * @brief  Fills each I2C_InitStruct member with its default value.
  * @param  I2C_InitStruct: pointer to an I2C_InitTypeDef structure which will be initialized.
  * @retval None
  */
void I2C_StructInit(I2C_InitTypeDef* I2C_InitStruct)
{
 800de6c:	b480      	push	{r7}
 800de6e:	b083      	sub	sp, #12
 800de70:	af00      	add	r7, sp, #0
 800de72:	6078      	str	r0, [r7, #4]
/*---------------- Reset I2C init structure parameters values ----------------*/
  /* initialize the I2C_ClockSpeed member */
  I2C_InitStruct->I2C_ClockSpeed = 5000;
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	f241 3288 	movw	r2, #5000	; 0x1388
 800de7a:	601a      	str	r2, [r3, #0]
  /* Initialize the I2C_Mode member */
  I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	2200      	movs	r2, #0
 800de80:	809a      	strh	r2, [r3, #4]
  /* Initialize the I2C_DutyCycle member */
  I2C_InitStruct->I2C_DutyCycle = I2C_DutyCycle_2;
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 800de88:	80da      	strh	r2, [r3, #6]
  /* Initialize the I2C_OwnAddress1 member */
  I2C_InitStruct->I2C_OwnAddress1 = 0;
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	2200      	movs	r2, #0
 800de8e:	811a      	strh	r2, [r3, #8]
  /* Initialize the I2C_Ack member */
  I2C_InitStruct->I2C_Ack = I2C_Ack_Disable;
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	2200      	movs	r2, #0
 800de94:	815a      	strh	r2, [r3, #10]
  /* Initialize the I2C_AcknowledgedAddress member */
  I2C_InitStruct->I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800de9c:	819a      	strh	r2, [r3, #12]
}
 800de9e:	370c      	adds	r7, #12
 800dea0:	46bd      	mov	sp, r7
 800dea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dea6:	4770      	bx	lr

0800dea8 <I2C_Cmd>:
  * @param  NewState: new state of the I2Cx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800dea8:	b480      	push	{r7}
 800deaa:	b083      	sub	sp, #12
 800deac:	af00      	add	r7, sp, #0
 800deae:	6078      	str	r0, [r7, #4]
 800deb0:	460b      	mov	r3, r1
 800deb2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800deb4:	78fb      	ldrb	r3, [r7, #3]
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d008      	beq.n	800decc <I2C_Cmd+0x24>
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	881b      	ldrh	r3, [r3, #0]
 800debe:	b29b      	uxth	r3, r3
 800dec0:	f043 0301 	orr.w	r3, r3, #1
 800dec4:	b29a      	uxth	r2, r3
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	801a      	strh	r2, [r3, #0]
 800deca:	e007      	b.n	800dedc <I2C_Cmd+0x34>
  }
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	881b      	ldrh	r3, [r3, #0]
 800ded0:	b29b      	uxth	r3, r3
 800ded2:	f023 0301 	bic.w	r3, r3, #1
 800ded6:	b29a      	uxth	r2, r3
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	801a      	strh	r2, [r3, #0]
  }
}
 800dedc:	370c      	adds	r7, #12
 800dede:	46bd      	mov	sp, r7
 800dee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dee4:	4770      	bx	lr
 800dee6:	bf00      	nop

0800dee8 <I2C_AnalogFilterCmd>:
  * @note   This function should be called before initializing and enabling
            the I2C Peripheral.
  * @retval None
  */
void I2C_AnalogFilterCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800dee8:	b480      	push	{r7}
 800deea:	b083      	sub	sp, #12
 800deec:	af00      	add	r7, sp, #0
 800deee:	6078      	str	r0, [r7, #4]
 800def0:	460b      	mov	r3, r1
 800def2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800def4:	78fb      	ldrb	r3, [r7, #3]
 800def6:	2b00      	cmp	r3, #0
 800def8:	d008      	beq.n	800df0c <I2C_AnalogFilterCmd+0x24>
  {
    /* Enable the analog filter */
    I2Cx->FLTR &= (uint16_t)~((uint16_t)I2C_FLTR_ANOFF);    
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800defe:	b29b      	uxth	r3, r3
 800df00:	f023 0310 	bic.w	r3, r3, #16
 800df04:	b29a      	uxth	r2, r3
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	849a      	strh	r2, [r3, #36]	; 0x24
 800df0a:	e007      	b.n	800df1c <I2C_AnalogFilterCmd+0x34>
  }
  else
  {
    /* Disable the analog filter */
    I2Cx->FLTR |= I2C_FLTR_ANOFF;
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800df10:	b29b      	uxth	r3, r3
 800df12:	f043 0310 	orr.w	r3, r3, #16
 800df16:	b29a      	uxth	r2, r3
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	849a      	strh	r2, [r3, #36]	; 0x24
  }
}
 800df1c:	370c      	adds	r7, #12
 800df1e:	46bd      	mov	sp, r7
 800df20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df24:	4770      	bx	lr
 800df26:	bf00      	nop

0800df28 <I2C_DigitalFilterConfig>:
  * @note   This function should be called before initializing and enabling
            the I2C Peripheral.
  * @retval None
  */
void I2C_DigitalFilterConfig(I2C_TypeDef* I2Cx, uint16_t I2C_DigitalFilter)
{
 800df28:	b480      	push	{r7}
 800df2a:	b085      	sub	sp, #20
 800df2c:	af00      	add	r7, sp, #0
 800df2e:	6078      	str	r0, [r7, #4]
 800df30:	460b      	mov	r3, r1
 800df32:	807b      	strh	r3, [r7, #2]
  uint16_t tmpreg = 0;
 800df34:	2300      	movs	r3, #0
 800df36:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIGITAL_FILTER(I2C_DigitalFilter));
  
  /* Get the old register value */
  tmpreg = I2Cx->FLTR;
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800df3c:	81fb      	strh	r3, [r7, #14]
  
  /* Reset I2Cx DNF bit [3:0] */
  tmpreg &= (uint16_t)~((uint16_t)I2C_FLTR_DNF);
 800df3e:	89fb      	ldrh	r3, [r7, #14]
 800df40:	f023 030f 	bic.w	r3, r3, #15
 800df44:	81fb      	strh	r3, [r7, #14]
  
  /* Set I2Cx DNF coefficient */
  tmpreg |= (uint16_t)((uint16_t)I2C_DigitalFilter & I2C_FLTR_DNF);
 800df46:	887b      	ldrh	r3, [r7, #2]
 800df48:	f003 030f 	and.w	r3, r3, #15
 800df4c:	b29a      	uxth	r2, r3
 800df4e:	89fb      	ldrh	r3, [r7, #14]
 800df50:	4313      	orrs	r3, r2
 800df52:	b29b      	uxth	r3, r3
 800df54:	81fb      	strh	r3, [r7, #14]
  
  /* Store the new register value */
  I2Cx->FLTR = tmpreg;
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	89fa      	ldrh	r2, [r7, #14]
 800df5a:	849a      	strh	r2, [r3, #36]	; 0x24
}
 800df5c:	3714      	adds	r7, #20
 800df5e:	46bd      	mov	sp, r7
 800df60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df64:	4770      	bx	lr
 800df66:	bf00      	nop

0800df68 <I2C_GenerateSTART>:
  * @param  NewState: new state of the I2C START condition generation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800df68:	b480      	push	{r7}
 800df6a:	b083      	sub	sp, #12
 800df6c:	af00      	add	r7, sp, #0
 800df6e:	6078      	str	r0, [r7, #4]
 800df70:	460b      	mov	r3, r1
 800df72:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800df74:	78fb      	ldrb	r3, [r7, #3]
 800df76:	2b00      	cmp	r3, #0
 800df78:	d008      	beq.n	800df8c <I2C_GenerateSTART+0x24>
  {
    /* Generate a START condition */
    I2Cx->CR1 |= I2C_CR1_START;
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	881b      	ldrh	r3, [r3, #0]
 800df7e:	b29b      	uxth	r3, r3
 800df80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800df84:	b29a      	uxth	r2, r3
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	801a      	strh	r2, [r3, #0]
 800df8a:	e007      	b.n	800df9c <I2C_GenerateSTART+0x34>
  }
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	881b      	ldrh	r3, [r3, #0]
 800df90:	b29b      	uxth	r3, r3
 800df92:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800df96:	b29a      	uxth	r2, r3
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	801a      	strh	r2, [r3, #0]
  }
}
 800df9c:	370c      	adds	r7, #12
 800df9e:	46bd      	mov	sp, r7
 800dfa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfa4:	4770      	bx	lr
 800dfa6:	bf00      	nop

0800dfa8 <I2C_GenerateSTOP>:
  * @param  NewState: new state of the I2C STOP condition generation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800dfa8:	b480      	push	{r7}
 800dfaa:	b083      	sub	sp, #12
 800dfac:	af00      	add	r7, sp, #0
 800dfae:	6078      	str	r0, [r7, #4]
 800dfb0:	460b      	mov	r3, r1
 800dfb2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800dfb4:	78fb      	ldrb	r3, [r7, #3]
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d008      	beq.n	800dfcc <I2C_GenerateSTOP+0x24>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	881b      	ldrh	r3, [r3, #0]
 800dfbe:	b29b      	uxth	r3, r3
 800dfc0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800dfc4:	b29a      	uxth	r2, r3
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	801a      	strh	r2, [r3, #0]
 800dfca:	e007      	b.n	800dfdc <I2C_GenerateSTOP+0x34>
  }
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	881b      	ldrh	r3, [r3, #0]
 800dfd0:	b29b      	uxth	r3, r3
 800dfd2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800dfd6:	b29a      	uxth	r2, r3
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	801a      	strh	r2, [r3, #0]
  }
}
 800dfdc:	370c      	adds	r7, #12
 800dfde:	46bd      	mov	sp, r7
 800dfe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfe4:	4770      	bx	lr
 800dfe6:	bf00      	nop

0800dfe8 <I2C_Send7bitAddress>:
  *            @arg I2C_Direction_Transmitter: Transmitter mode
  *            @arg I2C_Direction_Receiver: Receiver mode
  * @retval None.
  */
void I2C_Send7bitAddress(I2C_TypeDef* I2Cx, uint8_t Address, uint8_t I2C_Direction)
{
 800dfe8:	b480      	push	{r7}
 800dfea:	b083      	sub	sp, #12
 800dfec:	af00      	add	r7, sp, #0
 800dfee:	6078      	str	r0, [r7, #4]
 800dff0:	4613      	mov	r3, r2
 800dff2:	460a      	mov	r2, r1
 800dff4:	70fa      	strb	r2, [r7, #3]
 800dff6:	70bb      	strb	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
 800dff8:	78bb      	ldrb	r3, [r7, #2]
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d004      	beq.n	800e008 <I2C_Send7bitAddress+0x20>
  {
    /* Set the address bit0 for read */
    Address |= I2C_OAR1_ADD0;
 800dffe:	78fb      	ldrb	r3, [r7, #3]
 800e000:	f043 0301 	orr.w	r3, r3, #1
 800e004:	70fb      	strb	r3, [r7, #3]
 800e006:	e003      	b.n	800e010 <I2C_Send7bitAddress+0x28>
  }
  else
  {
    /* Reset the address bit0 for write */
    Address &= (uint8_t)~((uint8_t)I2C_OAR1_ADD0);
 800e008:	78fb      	ldrb	r3, [r7, #3]
 800e00a:	f023 0301 	bic.w	r3, r3, #1
 800e00e:	70fb      	strb	r3, [r7, #3]
  }
  /* Send the address */
  I2Cx->DR = Address;
 800e010:	78fb      	ldrb	r3, [r7, #3]
 800e012:	b29a      	uxth	r2, r3
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	821a      	strh	r2, [r3, #16]
}
 800e018:	370c      	adds	r7, #12
 800e01a:	46bd      	mov	sp, r7
 800e01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e020:	4770      	bx	lr
 800e022:	bf00      	nop

0800e024 <I2C_AcknowledgeConfig>:
  * @param  NewState: new state of the I2C Acknowledgement.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800e024:	b480      	push	{r7}
 800e026:	b083      	sub	sp, #12
 800e028:	af00      	add	r7, sp, #0
 800e02a:	6078      	str	r0, [r7, #4]
 800e02c:	460b      	mov	r3, r1
 800e02e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800e030:	78fb      	ldrb	r3, [r7, #3]
 800e032:	2b00      	cmp	r3, #0
 800e034:	d008      	beq.n	800e048 <I2C_AcknowledgeConfig+0x24>
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= I2C_CR1_ACK;
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	881b      	ldrh	r3, [r3, #0]
 800e03a:	b29b      	uxth	r3, r3
 800e03c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800e040:	b29a      	uxth	r2, r3
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	801a      	strh	r2, [r3, #0]
 800e046:	e007      	b.n	800e058 <I2C_AcknowledgeConfig+0x34>
  }
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	881b      	ldrh	r3, [r3, #0]
 800e04c:	b29b      	uxth	r3, r3
 800e04e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e052:	b29a      	uxth	r2, r3
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	801a      	strh	r2, [r3, #0]
  }
}
 800e058:	370c      	adds	r7, #12
 800e05a:	46bd      	mov	sp, r7
 800e05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e060:	4770      	bx	lr
 800e062:	bf00      	nop

0800e064 <I2C_OwnAddress2Config>:
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @param  Address: specifies the 7bit I2C own address2.
  * @retval None.
  */
void I2C_OwnAddress2Config(I2C_TypeDef* I2Cx, uint8_t Address)
{
 800e064:	b480      	push	{r7}
 800e066:	b085      	sub	sp, #20
 800e068:	af00      	add	r7, sp, #0
 800e06a:	6078      	str	r0, [r7, #4]
 800e06c:	460b      	mov	r3, r1
 800e06e:	70fb      	strb	r3, [r7, #3]
  uint16_t tmpreg = 0;
 800e070:	2300      	movs	r3, #0
 800e072:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Get the old register value */
  tmpreg = I2Cx->OAR2;
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	899b      	ldrh	r3, [r3, #12]
 800e078:	81fb      	strh	r3, [r7, #14]

  /* Reset I2Cx Own address2 bit [7:1] */
  tmpreg &= (uint16_t)~((uint16_t)I2C_OAR2_ADD2);
 800e07a:	89fb      	ldrh	r3, [r7, #14]
 800e07c:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 800e080:	81fb      	strh	r3, [r7, #14]

  /* Set I2Cx Own address2 */
  tmpreg |= (uint16_t)((uint16_t)Address & (uint16_t)0x00FE);
 800e082:	78fb      	ldrb	r3, [r7, #3]
 800e084:	b29b      	uxth	r3, r3
 800e086:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800e08a:	b29a      	uxth	r2, r3
 800e08c:	89fb      	ldrh	r3, [r7, #14]
 800e08e:	4313      	orrs	r3, r2
 800e090:	b29b      	uxth	r3, r3
 800e092:	81fb      	strh	r3, [r7, #14]

  /* Store the new register value */
  I2Cx->OAR2 = tmpreg;
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	89fa      	ldrh	r2, [r7, #14]
 800e098:	819a      	strh	r2, [r3, #12]
}
 800e09a:	3714      	adds	r7, #20
 800e09c:	46bd      	mov	sp, r7
 800e09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0a2:	4770      	bx	lr

0800e0a4 <I2C_DualAddressCmd>:
  * @param  NewState: new state of the I2C dual addressing mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_DualAddressCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800e0a4:	b480      	push	{r7}
 800e0a6:	b083      	sub	sp, #12
 800e0a8:	af00      	add	r7, sp, #0
 800e0aa:	6078      	str	r0, [r7, #4]
 800e0ac:	460b      	mov	r3, r1
 800e0ae:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800e0b0:	78fb      	ldrb	r3, [r7, #3]
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d008      	beq.n	800e0c8 <I2C_DualAddressCmd+0x24>
  {
    /* Enable dual addressing mode */
    I2Cx->OAR2 |= I2C_OAR2_ENDUAL;
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	899b      	ldrh	r3, [r3, #12]
 800e0ba:	b29b      	uxth	r3, r3
 800e0bc:	f043 0301 	orr.w	r3, r3, #1
 800e0c0:	b29a      	uxth	r2, r3
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	819a      	strh	r2, [r3, #12]
 800e0c6:	e007      	b.n	800e0d8 <I2C_DualAddressCmd+0x34>
  }
  else
  {
    /* Disable dual addressing mode */
    I2Cx->OAR2 &= (uint16_t)~((uint16_t)I2C_OAR2_ENDUAL);
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	899b      	ldrh	r3, [r3, #12]
 800e0cc:	b29b      	uxth	r3, r3
 800e0ce:	f023 0301 	bic.w	r3, r3, #1
 800e0d2:	b29a      	uxth	r2, r3
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	819a      	strh	r2, [r3, #12]
  }
}
 800e0d8:	370c      	adds	r7, #12
 800e0da:	46bd      	mov	sp, r7
 800e0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0e0:	4770      	bx	lr
 800e0e2:	bf00      	nop

0800e0e4 <I2C_GeneralCallCmd>:
  * @param  NewState: new state of the I2C General call.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_GeneralCallCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800e0e4:	b480      	push	{r7}
 800e0e6:	b083      	sub	sp, #12
 800e0e8:	af00      	add	r7, sp, #0
 800e0ea:	6078      	str	r0, [r7, #4]
 800e0ec:	460b      	mov	r3, r1
 800e0ee:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800e0f0:	78fb      	ldrb	r3, [r7, #3]
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d008      	beq.n	800e108 <I2C_GeneralCallCmd+0x24>
  {
    /* Enable generall call */
    I2Cx->CR1 |= I2C_CR1_ENGC;
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	881b      	ldrh	r3, [r3, #0]
 800e0fa:	b29b      	uxth	r3, r3
 800e0fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e100:	b29a      	uxth	r2, r3
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	801a      	strh	r2, [r3, #0]
 800e106:	e007      	b.n	800e118 <I2C_GeneralCallCmd+0x34>
  }
  else
  {
    /* Disable generall call */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENGC);
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	881b      	ldrh	r3, [r3, #0]
 800e10c:	b29b      	uxth	r3, r3
 800e10e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e112:	b29a      	uxth	r2, r3
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	801a      	strh	r2, [r3, #0]
  }
}
 800e118:	370c      	adds	r7, #12
 800e11a:	46bd      	mov	sp, r7
 800e11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e120:	4770      	bx	lr
 800e122:	bf00      	nop

0800e124 <I2C_SoftwareResetCmd>:
  * @param  NewState: new state of the I2C software reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_SoftwareResetCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800e124:	b480      	push	{r7}
 800e126:	b083      	sub	sp, #12
 800e128:	af00      	add	r7, sp, #0
 800e12a:	6078      	str	r0, [r7, #4]
 800e12c:	460b      	mov	r3, r1
 800e12e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800e130:	78fb      	ldrb	r3, [r7, #3]
 800e132:	2b00      	cmp	r3, #0
 800e134:	d00a      	beq.n	800e14c <I2C_SoftwareResetCmd+0x28>
  {
    /* Peripheral under reset */
    I2Cx->CR1 |= I2C_CR1_SWRST;
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	881b      	ldrh	r3, [r3, #0]
 800e13a:	b29b      	uxth	r3, r3
 800e13c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e140:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e144:	b29a      	uxth	r2, r3
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	801a      	strh	r2, [r3, #0]
 800e14a:	e007      	b.n	800e15c <I2C_SoftwareResetCmd+0x38>
  }
  else
  {
    /* Peripheral not under reset */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_SWRST);
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	881b      	ldrh	r3, [r3, #0]
 800e150:	b29b      	uxth	r3, r3
 800e152:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800e156:	b29a      	uxth	r2, r3
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	801a      	strh	r2, [r3, #0]
  }
}
 800e15c:	370c      	adds	r7, #12
 800e15e:	46bd      	mov	sp, r7
 800e160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e164:	4770      	bx	lr
 800e166:	bf00      	nop

0800e168 <I2C_StretchClockCmd>:
  * @param  NewState: new state of the I2Cx Clock stretching.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_StretchClockCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800e168:	b480      	push	{r7}
 800e16a:	b083      	sub	sp, #12
 800e16c:	af00      	add	r7, sp, #0
 800e16e:	6078      	str	r0, [r7, #4]
 800e170:	460b      	mov	r3, r1
 800e172:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState == DISABLE)
 800e174:	78fb      	ldrb	r3, [r7, #3]
 800e176:	2b00      	cmp	r3, #0
 800e178:	d108      	bne.n	800e18c <I2C_StretchClockCmd+0x24>
  {
    /* Enable the selected I2C Clock stretching */
    I2Cx->CR1 |= I2C_CR1_NOSTRETCH;
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	881b      	ldrh	r3, [r3, #0]
 800e17e:	b29b      	uxth	r3, r3
 800e180:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e184:	b29a      	uxth	r2, r3
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	801a      	strh	r2, [r3, #0]
 800e18a:	e007      	b.n	800e19c <I2C_StretchClockCmd+0x34>
  }
  else
  {
    /* Disable the selected I2C Clock stretching */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_NOSTRETCH);
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	881b      	ldrh	r3, [r3, #0]
 800e190:	b29b      	uxth	r3, r3
 800e192:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e196:	b29a      	uxth	r2, r3
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	801a      	strh	r2, [r3, #0]
  }
}
 800e19c:	370c      	adds	r7, #12
 800e19e:	46bd      	mov	sp, r7
 800e1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1a4:	4770      	bx	lr
 800e1a6:	bf00      	nop

0800e1a8 <I2C_FastModeDutyCycleConfig>:
  *            @arg I2C_DutyCycle_2: I2C fast mode Tlow/Thigh = 2
  *            @arg I2C_DutyCycle_16_9: I2C fast mode Tlow/Thigh = 16/9
  * @retval None
  */
void I2C_FastModeDutyCycleConfig(I2C_TypeDef* I2Cx, uint16_t I2C_DutyCycle)
{
 800e1a8:	b480      	push	{r7}
 800e1aa:	b083      	sub	sp, #12
 800e1ac:	af00      	add	r7, sp, #0
 800e1ae:	6078      	str	r0, [r7, #4]
 800e1b0:	460b      	mov	r3, r1
 800e1b2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DUTY_CYCLE(I2C_DutyCycle));
  if (I2C_DutyCycle != I2C_DutyCycle_16_9)
 800e1b4:	887b      	ldrh	r3, [r7, #2]
 800e1b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e1ba:	d008      	beq.n	800e1ce <I2C_FastModeDutyCycleConfig+0x26>
  {
    /* I2C fast mode Tlow/Thigh=2 */
    I2Cx->CCR &= I2C_DutyCycle_2;
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	8b9b      	ldrh	r3, [r3, #28]
 800e1c0:	b29b      	uxth	r3, r3
 800e1c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e1c6:	b29a      	uxth	r2, r3
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	839a      	strh	r2, [r3, #28]
 800e1cc:	e007      	b.n	800e1de <I2C_FastModeDutyCycleConfig+0x36>
  }
  else
  {
    /* I2C fast mode Tlow/Thigh=16/9 */
    I2Cx->CCR |= I2C_DutyCycle_16_9;
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	8b9b      	ldrh	r3, [r3, #28]
 800e1d2:	b29b      	uxth	r3, r3
 800e1d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e1d8:	b29a      	uxth	r2, r3
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	839a      	strh	r2, [r3, #28]
  }
}
 800e1de:	370c      	adds	r7, #12
 800e1e0:	46bd      	mov	sp, r7
 800e1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1e6:	4770      	bx	lr

0800e1e8 <I2C_NACKPositionConfig>:
  *          is intended to used in SMBUS mode. 
  *            
  * @retval None
  */
void I2C_NACKPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_NACKPosition)
{
 800e1e8:	b480      	push	{r7}
 800e1ea:	b083      	sub	sp, #12
 800e1ec:	af00      	add	r7, sp, #0
 800e1ee:	6078      	str	r0, [r7, #4]
 800e1f0:	460b      	mov	r3, r1
 800e1f2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_NACK_POSITION(I2C_NACKPosition));
  
  /* Check the input parameter */
  if (I2C_NACKPosition == I2C_NACKPosition_Next)
 800e1f4:	887b      	ldrh	r3, [r7, #2]
 800e1f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e1fa:	d108      	bne.n	800e20e <I2C_NACKPositionConfig+0x26>
  {
    /* Next byte in shift register is the last received byte */
    I2Cx->CR1 |= I2C_NACKPosition_Next;
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	881b      	ldrh	r3, [r3, #0]
 800e200:	b29b      	uxth	r3, r3
 800e202:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800e206:	b29a      	uxth	r2, r3
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	801a      	strh	r2, [r3, #0]
 800e20c:	e007      	b.n	800e21e <I2C_NACKPositionConfig+0x36>
  }
  else
  {
    /* Current byte in shift register is the last received byte */
    I2Cx->CR1 &= I2C_NACKPosition_Current;
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	881b      	ldrh	r3, [r3, #0]
 800e212:	b29b      	uxth	r3, r3
 800e214:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e218:	b29a      	uxth	r2, r3
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	801a      	strh	r2, [r3, #0]
  }
}
 800e21e:	370c      	adds	r7, #12
 800e220:	46bd      	mov	sp, r7
 800e222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e226:	4770      	bx	lr

0800e228 <I2C_SMBusAlertConfig>:
  *            @arg I2C_SMBusAlert_Low: SMBAlert pin driven low
  *            @arg I2C_SMBusAlert_High: SMBAlert pin driven high
  * @retval None
  */
void I2C_SMBusAlertConfig(I2C_TypeDef* I2Cx, uint16_t I2C_SMBusAlert)
{
 800e228:	b480      	push	{r7}
 800e22a:	b083      	sub	sp, #12
 800e22c:	af00      	add	r7, sp, #0
 800e22e:	6078      	str	r0, [r7, #4]
 800e230:	460b      	mov	r3, r1
 800e232:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_SMBUS_ALERT(I2C_SMBusAlert));
  if (I2C_SMBusAlert == I2C_SMBusAlert_Low)
 800e234:	887b      	ldrh	r3, [r7, #2]
 800e236:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e23a:	d108      	bne.n	800e24e <I2C_SMBusAlertConfig+0x26>
  {
    /* Drive the SMBusAlert pin Low */
    I2Cx->CR1 |= I2C_SMBusAlert_Low;
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	881b      	ldrh	r3, [r3, #0]
 800e240:	b29b      	uxth	r3, r3
 800e242:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800e246:	b29a      	uxth	r2, r3
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	801a      	strh	r2, [r3, #0]
 800e24c:	e007      	b.n	800e25e <I2C_SMBusAlertConfig+0x36>
  }
  else
  {
    /* Drive the SMBusAlert pin High  */
    I2Cx->CR1 &= I2C_SMBusAlert_High;
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	881b      	ldrh	r3, [r3, #0]
 800e252:	b29b      	uxth	r3, r3
 800e254:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e258:	b29a      	uxth	r2, r3
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	801a      	strh	r2, [r3, #0]
  }
}
 800e25e:	370c      	adds	r7, #12
 800e260:	46bd      	mov	sp, r7
 800e262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e266:	4770      	bx	lr

0800e268 <I2C_ARPCmd>:
  * @param  NewState: new state of the I2Cx ARP. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_ARPCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800e268:	b480      	push	{r7}
 800e26a:	b083      	sub	sp, #12
 800e26c:	af00      	add	r7, sp, #0
 800e26e:	6078      	str	r0, [r7, #4]
 800e270:	460b      	mov	r3, r1
 800e272:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800e274:	78fb      	ldrb	r3, [r7, #3]
 800e276:	2b00      	cmp	r3, #0
 800e278:	d008      	beq.n	800e28c <I2C_ARPCmd+0x24>
  {
    /* Enable the selected I2C ARP */
    I2Cx->CR1 |= I2C_CR1_ENARP;
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	881b      	ldrh	r3, [r3, #0]
 800e27e:	b29b      	uxth	r3, r3
 800e280:	f043 0310 	orr.w	r3, r3, #16
 800e284:	b29a      	uxth	r2, r3
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	801a      	strh	r2, [r3, #0]
 800e28a:	e007      	b.n	800e29c <I2C_ARPCmd+0x34>
  }
  else
  {
    /* Disable the selected I2C ARP */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENARP);
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	881b      	ldrh	r3, [r3, #0]
 800e290:	b29b      	uxth	r3, r3
 800e292:	f023 0310 	bic.w	r3, r3, #16
 800e296:	b29a      	uxth	r2, r3
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	801a      	strh	r2, [r3, #0]
  }
}
 800e29c:	370c      	adds	r7, #12
 800e29e:	46bd      	mov	sp, r7
 800e2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2a4:	4770      	bx	lr
 800e2a6:	bf00      	nop

0800e2a8 <I2C_SendData>:
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @param  Data: Byte to be transmitted..
  * @retval None
  */
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
 800e2a8:	b480      	push	{r7}
 800e2aa:	b083      	sub	sp, #12
 800e2ac:	af00      	add	r7, sp, #0
 800e2ae:	6078      	str	r0, [r7, #4]
 800e2b0:	460b      	mov	r3, r1
 800e2b2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Write in the DR register the data to be sent */
  I2Cx->DR = Data;
 800e2b4:	78fb      	ldrb	r3, [r7, #3]
 800e2b6:	b29a      	uxth	r2, r3
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	821a      	strh	r2, [r3, #16]
}
 800e2bc:	370c      	adds	r7, #12
 800e2be:	46bd      	mov	sp, r7
 800e2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2c4:	4770      	bx	lr
 800e2c6:	bf00      	nop

0800e2c8 <I2C_ReceiveData>:
  * @brief  Returns the most recent received data by the I2Cx peripheral.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval The value of the received data.
  */
uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
{
 800e2c8:	b480      	push	{r7}
 800e2ca:	b083      	sub	sp, #12
 800e2cc:	af00      	add	r7, sp, #0
 800e2ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the data in the DR register */
  return (uint8_t)I2Cx->DR;
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	8a1b      	ldrh	r3, [r3, #16]
 800e2d4:	b29b      	uxth	r3, r3
 800e2d6:	b2db      	uxtb	r3, r3
}
 800e2d8:	4618      	mov	r0, r3
 800e2da:	370c      	adds	r7, #12
 800e2dc:	46bd      	mov	sp, r7
 800e2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2e2:	4770      	bx	lr

0800e2e4 <I2C_TransmitPEC>:
  * @param  NewState: new state of the I2C PEC transmission.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_TransmitPEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800e2e4:	b480      	push	{r7}
 800e2e6:	b083      	sub	sp, #12
 800e2e8:	af00      	add	r7, sp, #0
 800e2ea:	6078      	str	r0, [r7, #4]
 800e2ec:	460b      	mov	r3, r1
 800e2ee:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800e2f0:	78fb      	ldrb	r3, [r7, #3]
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d008      	beq.n	800e308 <I2C_TransmitPEC+0x24>
  {
    /* Enable the selected I2C PEC transmission */
    I2Cx->CR1 |= I2C_CR1_PEC;
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	881b      	ldrh	r3, [r3, #0]
 800e2fa:	b29b      	uxth	r3, r3
 800e2fc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800e300:	b29a      	uxth	r2, r3
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	801a      	strh	r2, [r3, #0]
 800e306:	e007      	b.n	800e318 <I2C_TransmitPEC+0x34>
  }
  else
  {
    /* Disable the selected I2C PEC transmission */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PEC);
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	881b      	ldrh	r3, [r3, #0]
 800e30c:	b29b      	uxth	r3, r3
 800e30e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e312:	b29a      	uxth	r2, r3
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	801a      	strh	r2, [r3, #0]
  }
}
 800e318:	370c      	adds	r7, #12
 800e31a:	46bd      	mov	sp, r7
 800e31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e320:	4770      	bx	lr
 800e322:	bf00      	nop

0800e324 <I2C_PECPositionConfig>:
  *          is intended to used in I2C mode.
  *                
  * @retval None
  */
void I2C_PECPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_PECPosition)
{
 800e324:	b480      	push	{r7}
 800e326:	b083      	sub	sp, #12
 800e328:	af00      	add	r7, sp, #0
 800e32a:	6078      	str	r0, [r7, #4]
 800e32c:	460b      	mov	r3, r1
 800e32e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_PEC_POSITION(I2C_PECPosition));
  if (I2C_PECPosition == I2C_PECPosition_Next)
 800e330:	887b      	ldrh	r3, [r7, #2]
 800e332:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e336:	d108      	bne.n	800e34a <I2C_PECPositionConfig+0x26>
  {
    /* Next byte in shift register is PEC */
    I2Cx->CR1 |= I2C_PECPosition_Next;
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	881b      	ldrh	r3, [r3, #0]
 800e33c:	b29b      	uxth	r3, r3
 800e33e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800e342:	b29a      	uxth	r2, r3
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	801a      	strh	r2, [r3, #0]
 800e348:	e007      	b.n	800e35a <I2C_PECPositionConfig+0x36>
  }
  else
  {
    /* Current byte in shift register is PEC */
    I2Cx->CR1 &= I2C_PECPosition_Current;
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	881b      	ldrh	r3, [r3, #0]
 800e34e:	b29b      	uxth	r3, r3
 800e350:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e354:	b29a      	uxth	r2, r3
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	801a      	strh	r2, [r3, #0]
  }
}
 800e35a:	370c      	adds	r7, #12
 800e35c:	46bd      	mov	sp, r7
 800e35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e362:	4770      	bx	lr

0800e364 <I2C_CalculatePEC>:
  * @param  NewState: new state of the I2Cx PEC value calculation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_CalculatePEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800e364:	b480      	push	{r7}
 800e366:	b083      	sub	sp, #12
 800e368:	af00      	add	r7, sp, #0
 800e36a:	6078      	str	r0, [r7, #4]
 800e36c:	460b      	mov	r3, r1
 800e36e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800e370:	78fb      	ldrb	r3, [r7, #3]
 800e372:	2b00      	cmp	r3, #0
 800e374:	d008      	beq.n	800e388 <I2C_CalculatePEC+0x24>
  {
    /* Enable the selected I2C PEC calculation */
    I2Cx->CR1 |= I2C_CR1_ENPEC;
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	881b      	ldrh	r3, [r3, #0]
 800e37a:	b29b      	uxth	r3, r3
 800e37c:	f043 0320 	orr.w	r3, r3, #32
 800e380:	b29a      	uxth	r2, r3
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	801a      	strh	r2, [r3, #0]
 800e386:	e007      	b.n	800e398 <I2C_CalculatePEC+0x34>
  }
  else
  {
    /* Disable the selected I2C PEC calculation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENPEC);
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	881b      	ldrh	r3, [r3, #0]
 800e38c:	b29b      	uxth	r3, r3
 800e38e:	f023 0320 	bic.w	r3, r3, #32
 800e392:	b29a      	uxth	r2, r3
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	801a      	strh	r2, [r3, #0]
  }
}
 800e398:	370c      	adds	r7, #12
 800e39a:	46bd      	mov	sp, r7
 800e39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3a0:	4770      	bx	lr
 800e3a2:	bf00      	nop

0800e3a4 <I2C_GetPEC>:
  * @brief  Returns the PEC value for the specified I2C.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval The PEC value.
  */
uint8_t I2C_GetPEC(I2C_TypeDef* I2Cx)
{
 800e3a4:	b480      	push	{r7}
 800e3a6:	b083      	sub	sp, #12
 800e3a8:	af00      	add	r7, sp, #0
 800e3aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the selected I2C PEC value */
  return ((I2Cx->SR2) >> 8);
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	8b1b      	ldrh	r3, [r3, #24]
 800e3b0:	b29b      	uxth	r3, r3
 800e3b2:	0a1b      	lsrs	r3, r3, #8
 800e3b4:	b29b      	uxth	r3, r3
 800e3b6:	b2db      	uxtb	r3, r3
}
 800e3b8:	4618      	mov	r0, r3
 800e3ba:	370c      	adds	r7, #12
 800e3bc:	46bd      	mov	sp, r7
 800e3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3c2:	4770      	bx	lr

0800e3c4 <I2C_DMACmd>:
  * @param  NewState: new state of the I2C DMA transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_DMACmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800e3c4:	b480      	push	{r7}
 800e3c6:	b083      	sub	sp, #12
 800e3c8:	af00      	add	r7, sp, #0
 800e3ca:	6078      	str	r0, [r7, #4]
 800e3cc:	460b      	mov	r3, r1
 800e3ce:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800e3d0:	78fb      	ldrb	r3, [r7, #3]
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d008      	beq.n	800e3e8 <I2C_DMACmd+0x24>
  {
    /* Enable the selected I2C DMA requests */
    I2Cx->CR2 |= I2C_CR2_DMAEN;
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	889b      	ldrh	r3, [r3, #4]
 800e3da:	b29b      	uxth	r3, r3
 800e3dc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800e3e0:	b29a      	uxth	r2, r3
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	809a      	strh	r2, [r3, #4]
 800e3e6:	e007      	b.n	800e3f8 <I2C_DMACmd+0x34>
  }
  else
  {
    /* Disable the selected I2C DMA requests */
    I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_DMAEN);
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	889b      	ldrh	r3, [r3, #4]
 800e3ec:	b29b      	uxth	r3, r3
 800e3ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e3f2:	b29a      	uxth	r2, r3
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	809a      	strh	r2, [r3, #4]
  }
}
 800e3f8:	370c      	adds	r7, #12
 800e3fa:	46bd      	mov	sp, r7
 800e3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e400:	4770      	bx	lr
 800e402:	bf00      	nop

0800e404 <I2C_DMALastTransferCmd>:
  * @param  NewState: new state of the I2C DMA last transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_DMALastTransferCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800e404:	b480      	push	{r7}
 800e406:	b083      	sub	sp, #12
 800e408:	af00      	add	r7, sp, #0
 800e40a:	6078      	str	r0, [r7, #4]
 800e40c:	460b      	mov	r3, r1
 800e40e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800e410:	78fb      	ldrb	r3, [r7, #3]
 800e412:	2b00      	cmp	r3, #0
 800e414:	d008      	beq.n	800e428 <I2C_DMALastTransferCmd+0x24>
  {
    /* Next DMA transfer is the last transfer */
    I2Cx->CR2 |= I2C_CR2_LAST;
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	889b      	ldrh	r3, [r3, #4]
 800e41a:	b29b      	uxth	r3, r3
 800e41c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800e420:	b29a      	uxth	r2, r3
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	809a      	strh	r2, [r3, #4]
 800e426:	e007      	b.n	800e438 <I2C_DMALastTransferCmd+0x34>
  }
  else
  {
    /* Next DMA transfer is not the last transfer */
    I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_LAST);
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	889b      	ldrh	r3, [r3, #4]
 800e42c:	b29b      	uxth	r3, r3
 800e42e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e432:	b29a      	uxth	r2, r3
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	809a      	strh	r2, [r3, #4]
  }
}
 800e438:	370c      	adds	r7, #12
 800e43a:	46bd      	mov	sp, r7
 800e43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e440:	4770      	bx	lr
 800e442:	bf00      	nop

0800e444 <I2C_ReadRegister>:
  *            @arg I2C_Register_CCR:   CCR register.
  *            @arg I2C_Register_TRISE: TRISE register.
  * @retval The value of the read register.
  */
uint16_t I2C_ReadRegister(I2C_TypeDef* I2Cx, uint8_t I2C_Register)
{
 800e444:	b480      	push	{r7}
 800e446:	b085      	sub	sp, #20
 800e448:	af00      	add	r7, sp, #0
 800e44a:	6078      	str	r0, [r7, #4]
 800e44c:	460b      	mov	r3, r1
 800e44e:	70fb      	strb	r3, [r7, #3]
  __IO uint32_t tmp = 0;
 800e450:	2300      	movs	r3, #0
 800e452:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_REGISTER(I2C_Register));

  tmp = (uint32_t) I2Cx;
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	60fb      	str	r3, [r7, #12]
  tmp += I2C_Register;
 800e458:	78fa      	ldrb	r2, [r7, #3]
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	4413      	add	r3, r2
 800e45e:	60fb      	str	r3, [r7, #12]

  /* Return the selected register value */
  return (*(__IO uint16_t *) tmp);
 800e460:	68fb      	ldr	r3, [r7, #12]
 800e462:	881b      	ldrh	r3, [r3, #0]
 800e464:	b29b      	uxth	r3, r3
}
 800e466:	4618      	mov	r0, r3
 800e468:	3714      	adds	r7, #20
 800e46a:	46bd      	mov	sp, r7
 800e46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e470:	4770      	bx	lr
 800e472:	bf00      	nop

0800e474 <I2C_ITConfig>:
  * @param  NewState: new state of the specified I2C interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_ITConfig(I2C_TypeDef* I2Cx, uint16_t I2C_IT, FunctionalState NewState)
{
 800e474:	b480      	push	{r7}
 800e476:	b083      	sub	sp, #12
 800e478:	af00      	add	r7, sp, #0
 800e47a:	6078      	str	r0, [r7, #4]
 800e47c:	4613      	mov	r3, r2
 800e47e:	460a      	mov	r2, r1
 800e480:	807a      	strh	r2, [r7, #2]
 800e482:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_I2C_CONFIG_IT(I2C_IT));
  
  if (NewState != DISABLE)
 800e484:	787b      	ldrb	r3, [r7, #1]
 800e486:	2b00      	cmp	r3, #0
 800e488:	d008      	beq.n	800e49c <I2C_ITConfig+0x28>
  {
    /* Enable the selected I2C interrupts */
    I2Cx->CR2 |= I2C_IT;
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	889b      	ldrh	r3, [r3, #4]
 800e48e:	b29a      	uxth	r2, r3
 800e490:	887b      	ldrh	r3, [r7, #2]
 800e492:	4313      	orrs	r3, r2
 800e494:	b29a      	uxth	r2, r3
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	809a      	strh	r2, [r3, #4]
 800e49a:	e009      	b.n	800e4b0 <I2C_ITConfig+0x3c>
  }
  else
  {
    /* Disable the selected I2C interrupts */
    I2Cx->CR2 &= (uint16_t)~I2C_IT;
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	889b      	ldrh	r3, [r3, #4]
 800e4a0:	b29a      	uxth	r2, r3
 800e4a2:	887b      	ldrh	r3, [r7, #2]
 800e4a4:	43db      	mvns	r3, r3
 800e4a6:	b29b      	uxth	r3, r3
 800e4a8:	4013      	ands	r3, r2
 800e4aa:	b29a      	uxth	r2, r3
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	809a      	strh	r2, [r3, #4]
  }
}
 800e4b0:	370c      	adds	r7, #12
 800e4b2:	46bd      	mov	sp, r7
 800e4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4b8:	4770      	bx	lr
 800e4ba:	bf00      	nop

0800e4bc <I2C_CheckEvent>:
  * @retval An ErrorStatus enumeration value:
  *           - SUCCESS: Last event is equal to the I2C_EVENT
  *           - ERROR: Last event is different from the I2C_EVENT
  */
ErrorStatus I2C_CheckEvent(I2C_TypeDef* I2Cx, uint32_t I2C_EVENT)
{
 800e4bc:	b480      	push	{r7}
 800e4be:	b087      	sub	sp, #28
 800e4c0:	af00      	add	r7, sp, #0
 800e4c2:	6078      	str	r0, [r7, #4]
 800e4c4:	6039      	str	r1, [r7, #0]
  uint32_t lastevent = 0;
 800e4c6:	2300      	movs	r3, #0
 800e4c8:	613b      	str	r3, [r7, #16]
  uint32_t flag1 = 0, flag2 = 0;
 800e4ca:	2300      	movs	r3, #0
 800e4cc:	60fb      	str	r3, [r7, #12]
 800e4ce:	2300      	movs	r3, #0
 800e4d0:	60bb      	str	r3, [r7, #8]
  ErrorStatus status = ERROR;
 800e4d2:	2300      	movs	r3, #0
 800e4d4:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	8a9b      	ldrh	r3, [r3, #20]
 800e4da:	b29b      	uxth	r3, r3
 800e4dc:	60fb      	str	r3, [r7, #12]
  flag2 = I2Cx->SR2;
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	8b1b      	ldrh	r3, [r3, #24]
 800e4e2:	b29b      	uxth	r3, r3
 800e4e4:	60bb      	str	r3, [r7, #8]
  flag2 = flag2 << 16;
 800e4e6:	68bb      	ldr	r3, [r7, #8]
 800e4e8:	041b      	lsls	r3, r3, #16
 800e4ea:	60bb      	str	r3, [r7, #8]

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 800e4ec:	68fa      	ldr	r2, [r7, #12]
 800e4ee:	68bb      	ldr	r3, [r7, #8]
 800e4f0:	4313      	orrs	r3, r2
 800e4f2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800e4f6:	613b      	str	r3, [r7, #16]

  /* Check whether the last event contains the I2C_EVENT */
  if ((lastevent & I2C_EVENT) == I2C_EVENT)
 800e4f8:	693a      	ldr	r2, [r7, #16]
 800e4fa:	683b      	ldr	r3, [r7, #0]
 800e4fc:	401a      	ands	r2, r3
 800e4fe:	683b      	ldr	r3, [r7, #0]
 800e500:	429a      	cmp	r2, r3
 800e502:	d102      	bne.n	800e50a <I2C_CheckEvent+0x4e>
  {
    /* SUCCESS: last event is equal to I2C_EVENT */
    status = SUCCESS;
 800e504:	2301      	movs	r3, #1
 800e506:	75fb      	strb	r3, [r7, #23]
 800e508:	e001      	b.n	800e50e <I2C_CheckEvent+0x52>
  }
  else
  {
    /* ERROR: last event is different from I2C_EVENT */
    status = ERROR;
 800e50a:	2300      	movs	r3, #0
 800e50c:	75fb      	strb	r3, [r7, #23]
  }
  /* Return status */
  return status;
 800e50e:	7dfb      	ldrb	r3, [r7, #23]
}
 800e510:	4618      	mov	r0, r3
 800e512:	371c      	adds	r7, #28
 800e514:	46bd      	mov	sp, r7
 800e516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e51a:	4770      	bx	lr

0800e51c <I2C_GetLastEvent>:
  *         in stm32f4xx_i2c.h file.
  *    
  * @retval The last event
  */
uint32_t I2C_GetLastEvent(I2C_TypeDef* I2Cx)
{
 800e51c:	b480      	push	{r7}
 800e51e:	b087      	sub	sp, #28
 800e520:	af00      	add	r7, sp, #0
 800e522:	6078      	str	r0, [r7, #4]
  uint32_t lastevent = 0;
 800e524:	2300      	movs	r3, #0
 800e526:	617b      	str	r3, [r7, #20]
  uint32_t flag1 = 0, flag2 = 0;
 800e528:	2300      	movs	r3, #0
 800e52a:	613b      	str	r3, [r7, #16]
 800e52c:	2300      	movs	r3, #0
 800e52e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	8a9b      	ldrh	r3, [r3, #20]
 800e534:	b29b      	uxth	r3, r3
 800e536:	613b      	str	r3, [r7, #16]
  flag2 = I2Cx->SR2;
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	8b1b      	ldrh	r3, [r3, #24]
 800e53c:	b29b      	uxth	r3, r3
 800e53e:	60fb      	str	r3, [r7, #12]
  flag2 = flag2 << 16;
 800e540:	68fb      	ldr	r3, [r7, #12]
 800e542:	041b      	lsls	r3, r3, #16
 800e544:	60fb      	str	r3, [r7, #12]

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 800e546:	693a      	ldr	r2, [r7, #16]
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	4313      	orrs	r3, r2
 800e54c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800e550:	617b      	str	r3, [r7, #20]

  /* Return status */
  return lastevent;
 800e552:	697b      	ldr	r3, [r7, #20]
}
 800e554:	4618      	mov	r0, r3
 800e556:	371c      	adds	r7, #28
 800e558:	46bd      	mov	sp, r7
 800e55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e55e:	4770      	bx	lr

0800e560 <I2C_GetFlagStatus>:
  *                                Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_FLAG_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 800e560:	b480      	push	{r7}
 800e562:	b087      	sub	sp, #28
 800e564:	af00      	add	r7, sp, #0
 800e566:	6078      	str	r0, [r7, #4]
 800e568:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 800e56a:	2300      	movs	r3, #0
 800e56c:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 800e56e:	2300      	movs	r3, #0
 800e570:	613b      	str	r3, [r7, #16]
 800e572:	2300      	movs	r3, #0
 800e574:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	60fb      	str	r3, [r7, #12]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 800e57a:	683b      	ldr	r3, [r7, #0]
 800e57c:	0f1b      	lsrs	r3, r3, #28
 800e57e:	613b      	str	r3, [r7, #16]
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_MASK;
 800e580:	683b      	ldr	r3, [r7, #0]
 800e582:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800e586:	603b      	str	r3, [r7, #0]
  
  if(i2creg != 0)
 800e588:	693b      	ldr	r3, [r7, #16]
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d003      	beq.n	800e596 <I2C_GetFlagStatus+0x36>
  {
    /* Get the I2Cx SR1 register address */
    i2cxbase += 0x14;
 800e58e:	68fb      	ldr	r3, [r7, #12]
 800e590:	3314      	adds	r3, #20
 800e592:	60fb      	str	r3, [r7, #12]
 800e594:	e005      	b.n	800e5a2 <I2C_GetFlagStatus+0x42>
  }
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 800e596:	683b      	ldr	r3, [r7, #0]
 800e598:	0c1b      	lsrs	r3, r3, #16
 800e59a:	603b      	str	r3, [r7, #0]
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	3318      	adds	r3, #24
 800e5a0:	60fb      	str	r3, [r7, #12]
  }
  
  if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	681a      	ldr	r2, [r3, #0]
 800e5a6:	683b      	ldr	r3, [r7, #0]
 800e5a8:	4013      	ands	r3, r2
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d002      	beq.n	800e5b4 <I2C_GetFlagStatus+0x54>
  {
    /* I2C_FLAG is set */
    bitstatus = SET;
 800e5ae:	2301      	movs	r3, #1
 800e5b0:	75fb      	strb	r3, [r7, #23]
 800e5b2:	e001      	b.n	800e5b8 <I2C_GetFlagStatus+0x58>
  }
  else
  {
    /* I2C_FLAG is reset */
    bitstatus = RESET;
 800e5b4:	2300      	movs	r3, #0
 800e5b6:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return the I2C_FLAG status */
  return  bitstatus;
 800e5b8:	7dfb      	ldrb	r3, [r7, #23]
}
 800e5ba:	4618      	mov	r0, r3
 800e5bc:	371c      	adds	r7, #28
 800e5be:	46bd      	mov	sp, r7
 800e5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5c4:	4770      	bx	lr
 800e5c6:	bf00      	nop

0800e5c8 <I2C_ClearFlag>:
  *          register (I2C_SendData()).
  *  
  * @retval None
  */
void I2C_ClearFlag(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 800e5c8:	b480      	push	{r7}
 800e5ca:	b085      	sub	sp, #20
 800e5cc:	af00      	add	r7, sp, #0
 800e5ce:	6078      	str	r0, [r7, #4]
 800e5d0:	6039      	str	r1, [r7, #0]
  uint32_t flagpos = 0;
 800e5d2:	2300      	movs	r3, #0
 800e5d4:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_CLEAR_FLAG(I2C_FLAG));
  /* Get the I2C flag position */
  flagpos = I2C_FLAG & FLAG_MASK;
 800e5d6:	683b      	ldr	r3, [r7, #0]
 800e5d8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800e5dc:	60fb      	str	r3, [r7, #12]
  /* Clear the selected I2C flag */
  I2Cx->SR1 = (uint16_t)~flagpos;
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	b29b      	uxth	r3, r3
 800e5e2:	43db      	mvns	r3, r3
 800e5e4:	b29a      	uxth	r2, r3
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	829a      	strh	r2, [r3, #20]
}
 800e5ea:	3714      	adds	r7, #20
 800e5ec:	46bd      	mov	sp, r7
 800e5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5f2:	4770      	bx	lr

0800e5f4 <I2C_GetITStatus>:
  *                              Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_IT_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_IT (SET or RESET).
  */
ITStatus I2C_GetITStatus(I2C_TypeDef* I2Cx, uint32_t I2C_IT)
{
 800e5f4:	b480      	push	{r7}
 800e5f6:	b085      	sub	sp, #20
 800e5f8:	af00      	add	r7, sp, #0
 800e5fa:	6078      	str	r0, [r7, #4]
 800e5fc:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 800e5fe:	2300      	movs	r3, #0
 800e600:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 800e602:	2300      	movs	r3, #0
 800e604:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_IT(I2C_IT));

  /* Check if the interrupt source is enabled or not */
  enablestatus = (uint32_t)(((I2C_IT & ITEN_MASK) >> 16) & (I2Cx->CR2)) ;
 800e606:	683b      	ldr	r3, [r7, #0]
 800e608:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800e60c:	0c1a      	lsrs	r2, r3, #16
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	889b      	ldrh	r3, [r3, #4]
 800e612:	b29b      	uxth	r3, r3
 800e614:	4013      	ands	r3, r2
 800e616:	60bb      	str	r3, [r7, #8]
  
  /* Get bit[23:0] of the flag */
  I2C_IT &= FLAG_MASK;
 800e618:	683b      	ldr	r3, [r7, #0]
 800e61a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800e61e:	603b      	str	r3, [r7, #0]

  /* Check the status of the specified I2C flag */
  if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	8a9b      	ldrh	r3, [r3, #20]
 800e624:	b29b      	uxth	r3, r3
 800e626:	461a      	mov	r2, r3
 800e628:	683b      	ldr	r3, [r7, #0]
 800e62a:	4013      	ands	r3, r2
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d005      	beq.n	800e63c <I2C_GetITStatus+0x48>
 800e630:	68bb      	ldr	r3, [r7, #8]
 800e632:	2b00      	cmp	r3, #0
 800e634:	d002      	beq.n	800e63c <I2C_GetITStatus+0x48>
  {
    /* I2C_IT is set */
    bitstatus = SET;
 800e636:	2301      	movs	r3, #1
 800e638:	73fb      	strb	r3, [r7, #15]
 800e63a:	e001      	b.n	800e640 <I2C_GetITStatus+0x4c>
  }
  else
  {
    /* I2C_IT is reset */
    bitstatus = RESET;
 800e63c:	2300      	movs	r3, #0
 800e63e:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the I2C_IT status */
  return  bitstatus;
 800e640:	7bfb      	ldrb	r3, [r7, #15]
}
 800e642:	4618      	mov	r0, r3
 800e644:	3714      	adds	r7, #20
 800e646:	46bd      	mov	sp, r7
 800e648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e64c:	4770      	bx	lr
 800e64e:	bf00      	nop

0800e650 <I2C_ClearITPendingBit>:
  *          I2C_SR1 register (I2C_GetITStatus()) followed by a write operation to 
  *          I2C_DR register (I2C_SendData()).
  * @retval None
  */
void I2C_ClearITPendingBit(I2C_TypeDef* I2Cx, uint32_t I2C_IT)
{
 800e650:	b480      	push	{r7}
 800e652:	b085      	sub	sp, #20
 800e654:	af00      	add	r7, sp, #0
 800e656:	6078      	str	r0, [r7, #4]
 800e658:	6039      	str	r1, [r7, #0]
  uint32_t flagpos = 0;
 800e65a:	2300      	movs	r3, #0
 800e65c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_CLEAR_IT(I2C_IT));

  /* Get the I2C flag position */
  flagpos = I2C_IT & FLAG_MASK;
 800e65e:	683b      	ldr	r3, [r7, #0]
 800e660:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800e664:	60fb      	str	r3, [r7, #12]

  /* Clear the selected I2C flag */
  I2Cx->SR1 = (uint16_t)~flagpos;
 800e666:	68fb      	ldr	r3, [r7, #12]
 800e668:	b29b      	uxth	r3, r3
 800e66a:	43db      	mvns	r3, r3
 800e66c:	b29a      	uxth	r2, r3
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	829a      	strh	r2, [r3, #20]
}
 800e672:	3714      	adds	r7, #20
 800e674:	46bd      	mov	sp, r7
 800e676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e67a:	4770      	bx	lr

0800e67c <IWDG_WriteAccessCmd>:
  *            @arg IWDG_WriteAccess_Enable: Enable write access to IWDG_PR and IWDG_RLR registers
  *            @arg IWDG_WriteAccess_Disable: Disable write access to IWDG_PR and IWDG_RLR registers
  * @retval None
  */
void IWDG_WriteAccessCmd(uint16_t IWDG_WriteAccess)
{
 800e67c:	b480      	push	{r7}
 800e67e:	b083      	sub	sp, #12
 800e680:	af00      	add	r7, sp, #0
 800e682:	4603      	mov	r3, r0
 800e684:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_IWDG_WRITE_ACCESS(IWDG_WriteAccess));
  IWDG->KR = IWDG_WriteAccess;
 800e686:	4b04      	ldr	r3, [pc, #16]	; (800e698 <IWDG_WriteAccessCmd+0x1c>)
 800e688:	88fa      	ldrh	r2, [r7, #6]
 800e68a:	601a      	str	r2, [r3, #0]
}
 800e68c:	370c      	adds	r7, #12
 800e68e:	46bd      	mov	sp, r7
 800e690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e694:	4770      	bx	lr
 800e696:	bf00      	nop
 800e698:	40003000 	.word	0x40003000

0800e69c <IWDG_SetPrescaler>:
  *            @arg IWDG_Prescaler_128: IWDG prescaler set to 128
  *            @arg IWDG_Prescaler_256: IWDG prescaler set to 256
  * @retval None
  */
void IWDG_SetPrescaler(uint8_t IWDG_Prescaler)
{
 800e69c:	b480      	push	{r7}
 800e69e:	b083      	sub	sp, #12
 800e6a0:	af00      	add	r7, sp, #0
 800e6a2:	4603      	mov	r3, r0
 800e6a4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_IWDG_PRESCALER(IWDG_Prescaler));
  IWDG->PR = IWDG_Prescaler;
 800e6a6:	4b04      	ldr	r3, [pc, #16]	; (800e6b8 <IWDG_SetPrescaler+0x1c>)
 800e6a8:	79fa      	ldrb	r2, [r7, #7]
 800e6aa:	605a      	str	r2, [r3, #4]
}
 800e6ac:	370c      	adds	r7, #12
 800e6ae:	46bd      	mov	sp, r7
 800e6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6b4:	4770      	bx	lr
 800e6b6:	bf00      	nop
 800e6b8:	40003000 	.word	0x40003000

0800e6bc <IWDG_SetReload>:
  * @param  Reload: specifies the IWDG Reload value.
  *          This parameter must be a number between 0 and 0x0FFF.
  * @retval None
  */
void IWDG_SetReload(uint16_t Reload)
{
 800e6bc:	b480      	push	{r7}
 800e6be:	b083      	sub	sp, #12
 800e6c0:	af00      	add	r7, sp, #0
 800e6c2:	4603      	mov	r3, r0
 800e6c4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_IWDG_RELOAD(Reload));
  IWDG->RLR = Reload;
 800e6c6:	4b04      	ldr	r3, [pc, #16]	; (800e6d8 <IWDG_SetReload+0x1c>)
 800e6c8:	88fa      	ldrh	r2, [r7, #6]
 800e6ca:	609a      	str	r2, [r3, #8]
}
 800e6cc:	370c      	adds	r7, #12
 800e6ce:	46bd      	mov	sp, r7
 800e6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6d4:	4770      	bx	lr
 800e6d6:	bf00      	nop
 800e6d8:	40003000 	.word	0x40003000

0800e6dc <IWDG_ReloadCounter>:
  *         (write access to IWDG_PR and IWDG_RLR registers disabled).
  * @param  None
  * @retval None
  */
void IWDG_ReloadCounter(void)
{
 800e6dc:	b480      	push	{r7}
 800e6de:	af00      	add	r7, sp, #0
  IWDG->KR = KR_KEY_RELOAD;
 800e6e0:	4b03      	ldr	r3, [pc, #12]	; (800e6f0 <IWDG_ReloadCounter+0x14>)
 800e6e2:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800e6e6:	601a      	str	r2, [r3, #0]
}
 800e6e8:	46bd      	mov	sp, r7
 800e6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ee:	4770      	bx	lr
 800e6f0:	40003000 	.word	0x40003000

0800e6f4 <IWDG_Enable>:
  * @brief  Enables IWDG (write access to IWDG_PR and IWDG_RLR registers disabled).
  * @param  None
  * @retval None
  */
void IWDG_Enable(void)
{
 800e6f4:	b480      	push	{r7}
 800e6f6:	af00      	add	r7, sp, #0
  IWDG->KR = KR_KEY_ENABLE;
 800e6f8:	4b03      	ldr	r3, [pc, #12]	; (800e708 <IWDG_Enable+0x14>)
 800e6fa:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800e6fe:	601a      	str	r2, [r3, #0]
}
 800e700:	46bd      	mov	sp, r7
 800e702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e706:	4770      	bx	lr
 800e708:	40003000 	.word	0x40003000

0800e70c <IWDG_GetFlagStatus>:
  *            @arg IWDG_FLAG_PVU: Prescaler Value Update on going
  *            @arg IWDG_FLAG_RVU: Reload Value Update on going
  * @retval The new state of IWDG_FLAG (SET or RESET).
  */
FlagStatus IWDG_GetFlagStatus(uint16_t IWDG_FLAG)
{
 800e70c:	b480      	push	{r7}
 800e70e:	b085      	sub	sp, #20
 800e710:	af00      	add	r7, sp, #0
 800e712:	4603      	mov	r3, r0
 800e714:	80fb      	strh	r3, [r7, #6]
  FlagStatus bitstatus = RESET;
 800e716:	2300      	movs	r3, #0
 800e718:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_IWDG_FLAG(IWDG_FLAG));
  if ((IWDG->SR & IWDG_FLAG) != (uint32_t)RESET)
 800e71a:	4b09      	ldr	r3, [pc, #36]	; (800e740 <IWDG_GetFlagStatus+0x34>)
 800e71c:	68da      	ldr	r2, [r3, #12]
 800e71e:	88fb      	ldrh	r3, [r7, #6]
 800e720:	4013      	ands	r3, r2
 800e722:	2b00      	cmp	r3, #0
 800e724:	d002      	beq.n	800e72c <IWDG_GetFlagStatus+0x20>
  {
    bitstatus = SET;
 800e726:	2301      	movs	r3, #1
 800e728:	73fb      	strb	r3, [r7, #15]
 800e72a:	e001      	b.n	800e730 <IWDG_GetFlagStatus+0x24>
  }
  else
  {
    bitstatus = RESET;
 800e72c:	2300      	movs	r3, #0
 800e72e:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the flag status */
  return bitstatus;
 800e730:	7bfb      	ldrb	r3, [r7, #15]
}
 800e732:	4618      	mov	r0, r3
 800e734:	3714      	adds	r7, #20
 800e736:	46bd      	mov	sp, r7
 800e738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e73c:	4770      	bx	lr
 800e73e:	bf00      	nop
 800e740:	40003000 	.word	0x40003000

0800e744 <LTDC_DeInit>:
  * @param  None
  * @retval None
  */

void LTDC_DeInit(void)
{
 800e744:	b580      	push	{r7, lr}
 800e746:	af00      	add	r7, sp, #0
  /* Enable LTDC reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_LTDC, ENABLE);
 800e748:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800e74c:	2101      	movs	r1, #1
 800e74e:	f001 fb79 	bl	800fe44 <RCC_APB2PeriphResetCmd>
  /* Release LTDC from reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_LTDC, DISABLE);
 800e752:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800e756:	2100      	movs	r1, #0
 800e758:	f001 fb74 	bl	800fe44 <RCC_APB2PeriphResetCmd>
}
 800e75c:	bd80      	pop	{r7, pc}
 800e75e:	bf00      	nop

0800e760 <LTDC_Init>:
  *         the configuration information for the specified LTDC peripheral.
  * @retval None
  */

void LTDC_Init(LTDC_InitTypeDef* LTDC_InitStruct)
{
 800e760:	b480      	push	{r7}
 800e762:	b089      	sub	sp, #36	; 0x24
 800e764:	af00      	add	r7, sp, #0
 800e766:	6078      	str	r0, [r7, #4]
  uint32_t horizontalsync = 0;
 800e768:	2300      	movs	r3, #0
 800e76a:	61fb      	str	r3, [r7, #28]
  uint32_t accumulatedHBP = 0;
 800e76c:	2300      	movs	r3, #0
 800e76e:	61bb      	str	r3, [r7, #24]
  uint32_t accumulatedactiveW = 0;
 800e770:	2300      	movs	r3, #0
 800e772:	617b      	str	r3, [r7, #20]
  uint32_t totalwidth = 0;
 800e774:	2300      	movs	r3, #0
 800e776:	613b      	str	r3, [r7, #16]
  uint32_t backgreen = 0;
 800e778:	2300      	movs	r3, #0
 800e77a:	60fb      	str	r3, [r7, #12]
  uint32_t backred = 0;
 800e77c:	2300      	movs	r3, #0
 800e77e:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LTDC_BackBlueValue(LTDC_InitStruct->LTDC_BackgroundBlueValue));
  assert_param(IS_LTDC_BackGreenValue(LTDC_InitStruct->LTDC_BackgroundGreenValue));
  assert_param(IS_LTDC_BackRedValue(LTDC_InitStruct->LTDC_BackgroundRedValue));

  /* Sets Synchronization size */
  LTDC->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800e780:	4a3f      	ldr	r2, [pc, #252]	; (800e880 <LTDC_Init+0x120>)
 800e782:	4b3f      	ldr	r3, [pc, #252]	; (800e880 <LTDC_Init+0x120>)
 800e784:	6899      	ldr	r1, [r3, #8]
 800e786:	4b3f      	ldr	r3, [pc, #252]	; (800e884 <LTDC_Init+0x124>)
 800e788:	400b      	ands	r3, r1
 800e78a:	6093      	str	r3, [r2, #8]
  horizontalsync = (LTDC_InitStruct->LTDC_HorizontalSync << 16);
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	691b      	ldr	r3, [r3, #16]
 800e790:	041b      	lsls	r3, r3, #16
 800e792:	61fb      	str	r3, [r7, #28]
  LTDC->SSCR |= (horizontalsync | LTDC_InitStruct->LTDC_VerticalSync);
 800e794:	4b3a      	ldr	r3, [pc, #232]	; (800e880 <LTDC_Init+0x120>)
 800e796:	4a3a      	ldr	r2, [pc, #232]	; (800e880 <LTDC_Init+0x120>)
 800e798:	6891      	ldr	r1, [r2, #8]
 800e79a:	687a      	ldr	r2, [r7, #4]
 800e79c:	6950      	ldr	r0, [r2, #20]
 800e79e:	69fa      	ldr	r2, [r7, #28]
 800e7a0:	4302      	orrs	r2, r0
 800e7a2:	430a      	orrs	r2, r1
 800e7a4:	609a      	str	r2, [r3, #8]

  /* Sets Accumulated Back porch */
  LTDC->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800e7a6:	4a36      	ldr	r2, [pc, #216]	; (800e880 <LTDC_Init+0x120>)
 800e7a8:	4b35      	ldr	r3, [pc, #212]	; (800e880 <LTDC_Init+0x120>)
 800e7aa:	68d9      	ldr	r1, [r3, #12]
 800e7ac:	4b35      	ldr	r3, [pc, #212]	; (800e884 <LTDC_Init+0x124>)
 800e7ae:	400b      	ands	r3, r1
 800e7b0:	60d3      	str	r3, [r2, #12]
  accumulatedHBP = (LTDC_InitStruct->LTDC_AccumulatedHBP << 16);
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	699b      	ldr	r3, [r3, #24]
 800e7b6:	041b      	lsls	r3, r3, #16
 800e7b8:	61bb      	str	r3, [r7, #24]
  LTDC->BPCR |= (accumulatedHBP | LTDC_InitStruct->LTDC_AccumulatedVBP);
 800e7ba:	4b31      	ldr	r3, [pc, #196]	; (800e880 <LTDC_Init+0x120>)
 800e7bc:	4a30      	ldr	r2, [pc, #192]	; (800e880 <LTDC_Init+0x120>)
 800e7be:	68d1      	ldr	r1, [r2, #12]
 800e7c0:	687a      	ldr	r2, [r7, #4]
 800e7c2:	69d0      	ldr	r0, [r2, #28]
 800e7c4:	69ba      	ldr	r2, [r7, #24]
 800e7c6:	4302      	orrs	r2, r0
 800e7c8:	430a      	orrs	r2, r1
 800e7ca:	60da      	str	r2, [r3, #12]

  /* Sets Accumulated Active Width */
  LTDC->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800e7cc:	4a2c      	ldr	r2, [pc, #176]	; (800e880 <LTDC_Init+0x120>)
 800e7ce:	4b2c      	ldr	r3, [pc, #176]	; (800e880 <LTDC_Init+0x120>)
 800e7d0:	6919      	ldr	r1, [r3, #16]
 800e7d2:	4b2c      	ldr	r3, [pc, #176]	; (800e884 <LTDC_Init+0x124>)
 800e7d4:	400b      	ands	r3, r1
 800e7d6:	6113      	str	r3, [r2, #16]
  accumulatedactiveW = (LTDC_InitStruct->LTDC_AccumulatedActiveW << 16);
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	6a1b      	ldr	r3, [r3, #32]
 800e7dc:	041b      	lsls	r3, r3, #16
 800e7de:	617b      	str	r3, [r7, #20]
  LTDC->AWCR |= (accumulatedactiveW | LTDC_InitStruct->LTDC_AccumulatedActiveH);
 800e7e0:	4b27      	ldr	r3, [pc, #156]	; (800e880 <LTDC_Init+0x120>)
 800e7e2:	4a27      	ldr	r2, [pc, #156]	; (800e880 <LTDC_Init+0x120>)
 800e7e4:	6911      	ldr	r1, [r2, #16]
 800e7e6:	687a      	ldr	r2, [r7, #4]
 800e7e8:	6a50      	ldr	r0, [r2, #36]	; 0x24
 800e7ea:	697a      	ldr	r2, [r7, #20]
 800e7ec:	4302      	orrs	r2, r0
 800e7ee:	430a      	orrs	r2, r1
 800e7f0:	611a      	str	r2, [r3, #16]

  /* Sets Total Width */
  LTDC->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800e7f2:	4a23      	ldr	r2, [pc, #140]	; (800e880 <LTDC_Init+0x120>)
 800e7f4:	4b22      	ldr	r3, [pc, #136]	; (800e880 <LTDC_Init+0x120>)
 800e7f6:	6959      	ldr	r1, [r3, #20]
 800e7f8:	4b22      	ldr	r3, [pc, #136]	; (800e884 <LTDC_Init+0x124>)
 800e7fa:	400b      	ands	r3, r1
 800e7fc:	6153      	str	r3, [r2, #20]
  totalwidth = (LTDC_InitStruct->LTDC_TotalWidth << 16);
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e802:	041b      	lsls	r3, r3, #16
 800e804:	613b      	str	r3, [r7, #16]
  LTDC->TWCR |= (totalwidth | LTDC_InitStruct->LTDC_TotalHeigh);
 800e806:	4b1e      	ldr	r3, [pc, #120]	; (800e880 <LTDC_Init+0x120>)
 800e808:	4a1d      	ldr	r2, [pc, #116]	; (800e880 <LTDC_Init+0x120>)
 800e80a:	6951      	ldr	r1, [r2, #20]
 800e80c:	687a      	ldr	r2, [r7, #4]
 800e80e:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 800e810:	693a      	ldr	r2, [r7, #16]
 800e812:	4302      	orrs	r2, r0
 800e814:	430a      	orrs	r2, r1
 800e816:	615a      	str	r2, [r3, #20]

  LTDC->GCR &= (uint32_t)GCR_MASK;
 800e818:	4a19      	ldr	r2, [pc, #100]	; (800e880 <LTDC_Init+0x120>)
 800e81a:	4b19      	ldr	r3, [pc, #100]	; (800e880 <LTDC_Init+0x120>)
 800e81c:	6999      	ldr	r1, [r3, #24]
 800e81e:	4b1a      	ldr	r3, [pc, #104]	; (800e888 <LTDC_Init+0x128>)
 800e820:	400b      	ands	r3, r1
 800e822:	6193      	str	r3, [r2, #24]
  LTDC->GCR |=  (uint32_t)(LTDC_InitStruct->LTDC_HSPolarity | LTDC_InitStruct->LTDC_VSPolarity | \
 800e824:	4b16      	ldr	r3, [pc, #88]	; (800e880 <LTDC_Init+0x120>)
 800e826:	4a16      	ldr	r2, [pc, #88]	; (800e880 <LTDC_Init+0x120>)
 800e828:	6991      	ldr	r1, [r2, #24]
 800e82a:	687a      	ldr	r2, [r7, #4]
 800e82c:	6810      	ldr	r0, [r2, #0]
 800e82e:	687a      	ldr	r2, [r7, #4]
 800e830:	6852      	ldr	r2, [r2, #4]
 800e832:	4310      	orrs	r0, r2
                           LTDC_InitStruct->LTDC_DEPolarity | LTDC_InitStruct->LTDC_PCPolarity);
 800e834:	687a      	ldr	r2, [r7, #4]
 800e836:	6892      	ldr	r2, [r2, #8]
  LTDC->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
  totalwidth = (LTDC_InitStruct->LTDC_TotalWidth << 16);
  LTDC->TWCR |= (totalwidth | LTDC_InitStruct->LTDC_TotalHeigh);

  LTDC->GCR &= (uint32_t)GCR_MASK;
  LTDC->GCR |=  (uint32_t)(LTDC_InitStruct->LTDC_HSPolarity | LTDC_InitStruct->LTDC_VSPolarity | \
 800e838:	4310      	orrs	r0, r2
                           LTDC_InitStruct->LTDC_DEPolarity | LTDC_InitStruct->LTDC_PCPolarity);
 800e83a:	687a      	ldr	r2, [r7, #4]
 800e83c:	68d2      	ldr	r2, [r2, #12]
  LTDC->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
  totalwidth = (LTDC_InitStruct->LTDC_TotalWidth << 16);
  LTDC->TWCR |= (totalwidth | LTDC_InitStruct->LTDC_TotalHeigh);

  LTDC->GCR &= (uint32_t)GCR_MASK;
  LTDC->GCR |=  (uint32_t)(LTDC_InitStruct->LTDC_HSPolarity | LTDC_InitStruct->LTDC_VSPolarity | \
 800e83e:	4302      	orrs	r2, r0
 800e840:	430a      	orrs	r2, r1
 800e842:	619a      	str	r2, [r3, #24]
                           LTDC_InitStruct->LTDC_DEPolarity | LTDC_InitStruct->LTDC_PCPolarity);

  /* sets the background color value */
  backgreen = (LTDC_InitStruct->LTDC_BackgroundGreenValue << 8);
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e848:	021b      	lsls	r3, r3, #8
 800e84a:	60fb      	str	r3, [r7, #12]
  backred = (LTDC_InitStruct->LTDC_BackgroundRedValue << 16);
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e850:	041b      	lsls	r3, r3, #16
 800e852:	60bb      	str	r3, [r7, #8]

  LTDC->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800e854:	4b0a      	ldr	r3, [pc, #40]	; (800e880 <LTDC_Init+0x120>)
 800e856:	4a0a      	ldr	r2, [pc, #40]	; (800e880 <LTDC_Init+0x120>)
 800e858:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800e85a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800e85e:	62da      	str	r2, [r3, #44]	; 0x2c
  LTDC->BCCR |= (backred | backgreen | LTDC_InitStruct->LTDC_BackgroundBlueValue);
 800e860:	4b07      	ldr	r3, [pc, #28]	; (800e880 <LTDC_Init+0x120>)
 800e862:	4a07      	ldr	r2, [pc, #28]	; (800e880 <LTDC_Init+0x120>)
 800e864:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800e866:	68b8      	ldr	r0, [r7, #8]
 800e868:	68fa      	ldr	r2, [r7, #12]
 800e86a:	4310      	orrs	r0, r2
 800e86c:	687a      	ldr	r2, [r7, #4]
 800e86e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800e870:	4302      	orrs	r2, r0
 800e872:	430a      	orrs	r2, r1
 800e874:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800e876:	3724      	adds	r7, #36	; 0x24
 800e878:	46bd      	mov	sp, r7
 800e87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e87e:	4770      	bx	lr
 800e880:	40016800 	.word	0x40016800
 800e884:	f000f800 	.word	0xf000f800
 800e888:	0ffe888f 	.word	0x0ffe888f

0800e88c <LTDC_StructInit>:
  *         be initialized.
  * @retval None
  */

void LTDC_StructInit(LTDC_InitTypeDef* LTDC_InitStruct)
{
 800e88c:	b480      	push	{r7}
 800e88e:	b083      	sub	sp, #12
 800e890:	af00      	add	r7, sp, #0
 800e892:	6078      	str	r0, [r7, #4]
  /*--------------- Reset LTDC init structure parameters values ----------------*/
  LTDC_InitStruct->LTDC_HSPolarity = LTDC_HSPolarity_AL;      /*!< Initialize the LTDC_HSPolarity member */ 
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	2200      	movs	r2, #0
 800e898:	601a      	str	r2, [r3, #0]
  LTDC_InitStruct->LTDC_VSPolarity = LTDC_VSPolarity_AL;      /*!< Initialize the LTDC_VSPolarity member */
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	2200      	movs	r2, #0
 800e89e:	605a      	str	r2, [r3, #4]
  LTDC_InitStruct->LTDC_DEPolarity = LTDC_DEPolarity_AL;      /*!< Initialize the LTDC_DEPolarity member */
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	2200      	movs	r2, #0
 800e8a4:	609a      	str	r2, [r3, #8]
  LTDC_InitStruct->LTDC_PCPolarity = LTDC_PCPolarity_IPC;     /*!< Initialize the LTDC_PCPolarity member */
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	2200      	movs	r2, #0
 800e8aa:	60da      	str	r2, [r3, #12]
  LTDC_InitStruct->LTDC_HorizontalSync = 0x00;                /*!< Initialize the LTDC_HorizontalSync member */
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	2200      	movs	r2, #0
 800e8b0:	611a      	str	r2, [r3, #16]
  LTDC_InitStruct->LTDC_VerticalSync = 0x00;                  /*!< Initialize the LTDC_VerticalSync member */
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	2200      	movs	r2, #0
 800e8b6:	615a      	str	r2, [r3, #20]
  LTDC_InitStruct->LTDC_AccumulatedHBP = 0x00;                /*!< Initialize the LTDC_AccumulatedHBP member */
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	2200      	movs	r2, #0
 800e8bc:	619a      	str	r2, [r3, #24]
  LTDC_InitStruct->LTDC_AccumulatedVBP = 0x00;                /*!< Initialize the LTDC_AccumulatedVBP member */
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	2200      	movs	r2, #0
 800e8c2:	61da      	str	r2, [r3, #28]
  LTDC_InitStruct->LTDC_AccumulatedActiveW = 0x00;            /*!< Initialize the LTDC_AccumulatedActiveW member */
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	2200      	movs	r2, #0
 800e8c8:	621a      	str	r2, [r3, #32]
  LTDC_InitStruct->LTDC_AccumulatedActiveH = 0x00;            /*!< Initialize the LTDC_AccumulatedActiveH member */
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	2200      	movs	r2, #0
 800e8ce:	625a      	str	r2, [r3, #36]	; 0x24
  LTDC_InitStruct->LTDC_TotalWidth = 0x00;                    /*!< Initialize the LTDC_TotalWidth member */
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	2200      	movs	r2, #0
 800e8d4:	629a      	str	r2, [r3, #40]	; 0x28
  LTDC_InitStruct->LTDC_TotalHeigh = 0x00;                    /*!< Initialize the LTDC_TotalHeigh member */
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	2200      	movs	r2, #0
 800e8da:	62da      	str	r2, [r3, #44]	; 0x2c
  LTDC_InitStruct->LTDC_BackgroundRedValue = 0x00;            /*!< Initialize the LTDC_BackgroundRedValue member */
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	2200      	movs	r2, #0
 800e8e0:	631a      	str	r2, [r3, #48]	; 0x30
  LTDC_InitStruct->LTDC_BackgroundGreenValue = 0x00;          /*!< Initialize the LTDC_BackgroundGreenValue member */
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	2200      	movs	r2, #0
 800e8e6:	635a      	str	r2, [r3, #52]	; 0x34
  LTDC_InitStruct->LTDC_BackgroundBlueValue = 0x00;           /*!< Initialize the LTDC_BackgroundBlueValue member */
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	2200      	movs	r2, #0
 800e8ec:	639a      	str	r2, [r3, #56]	; 0x38
}
 800e8ee:	370c      	adds	r7, #12
 800e8f0:	46bd      	mov	sp, r7
 800e8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8f6:	4770      	bx	lr

0800e8f8 <LTDC_Cmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */

void LTDC_Cmd(FunctionalState NewState)
{
 800e8f8:	b480      	push	{r7}
 800e8fa:	b083      	sub	sp, #12
 800e8fc:	af00      	add	r7, sp, #0
 800e8fe:	4603      	mov	r3, r0
 800e900:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800e902:	79fb      	ldrb	r3, [r7, #7]
 800e904:	2b00      	cmp	r3, #0
 800e906:	d006      	beq.n	800e916 <LTDC_Cmd+0x1e>
  {
    /* Enable LTDC by setting LTDCEN bit */
    LTDC->GCR |= (uint32_t)LTDC_GCR_LTDCEN;
 800e908:	4b08      	ldr	r3, [pc, #32]	; (800e92c <LTDC_Cmd+0x34>)
 800e90a:	4a08      	ldr	r2, [pc, #32]	; (800e92c <LTDC_Cmd+0x34>)
 800e90c:	6992      	ldr	r2, [r2, #24]
 800e90e:	f042 0201 	orr.w	r2, r2, #1
 800e912:	619a      	str	r2, [r3, #24]
 800e914:	e005      	b.n	800e922 <LTDC_Cmd+0x2a>
  }
  else
  {
    /* Disable LTDC by clearing LTDCEN bit */
    LTDC->GCR &= ~(uint32_t)LTDC_GCR_LTDCEN;
 800e916:	4b05      	ldr	r3, [pc, #20]	; (800e92c <LTDC_Cmd+0x34>)
 800e918:	4a04      	ldr	r2, [pc, #16]	; (800e92c <LTDC_Cmd+0x34>)
 800e91a:	6992      	ldr	r2, [r2, #24]
 800e91c:	f022 0201 	bic.w	r2, r2, #1
 800e920:	619a      	str	r2, [r3, #24]
  }
}
 800e922:	370c      	adds	r7, #12
 800e924:	46bd      	mov	sp, r7
 800e926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e92a:	4770      	bx	lr
 800e92c:	40016800 	.word	0x40016800

0800e930 <LTDC_DitherCmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */

void LTDC_DitherCmd(FunctionalState NewState)
{
 800e930:	b480      	push	{r7}
 800e932:	b083      	sub	sp, #12
 800e934:	af00      	add	r7, sp, #0
 800e936:	4603      	mov	r3, r0
 800e938:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800e93a:	79fb      	ldrb	r3, [r7, #7]
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d006      	beq.n	800e94e <LTDC_DitherCmd+0x1e>
  {
    /* Enable Dither by setting DTEN bit */
    LTDC->GCR |= (uint32_t)LTDC_GCR_DTEN;
 800e940:	4b08      	ldr	r3, [pc, #32]	; (800e964 <LTDC_DitherCmd+0x34>)
 800e942:	4a08      	ldr	r2, [pc, #32]	; (800e964 <LTDC_DitherCmd+0x34>)
 800e944:	6992      	ldr	r2, [r2, #24]
 800e946:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800e94a:	619a      	str	r2, [r3, #24]
 800e94c:	e005      	b.n	800e95a <LTDC_DitherCmd+0x2a>
  }
  else
  {
    /* Disable Dither by clearing DTEN bit */
    LTDC->GCR &= ~(uint32_t)LTDC_GCR_DTEN;
 800e94e:	4b05      	ldr	r3, [pc, #20]	; (800e964 <LTDC_DitherCmd+0x34>)
 800e950:	4a04      	ldr	r2, [pc, #16]	; (800e964 <LTDC_DitherCmd+0x34>)
 800e952:	6992      	ldr	r2, [r2, #24]
 800e954:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800e958:	619a      	str	r2, [r3, #24]
  }
}
 800e95a:	370c      	adds	r7, #12
 800e95c:	46bd      	mov	sp, r7
 800e95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e962:	4770      	bx	lr
 800e964:	40016800 	.word	0x40016800

0800e968 <LTDC_GetRGBWidth>:
  *         the Dither RGB width.
  * @retval None
  */

LTDC_RGBTypeDef LTDC_GetRGBWidth(void)
{
 800e968:	b480      	push	{r7}
 800e96a:	b087      	sub	sp, #28
 800e96c:	af00      	add	r7, sp, #0
 800e96e:	6078      	str	r0, [r7, #4]
  LTDC_RGBTypeDef LTDC_RGB_InitStruct;

  LTDC->GCR &= (uint32_t)GCR_MASK;
 800e970:	4a11      	ldr	r2, [pc, #68]	; (800e9b8 <LTDC_GetRGBWidth+0x50>)
 800e972:	4b11      	ldr	r3, [pc, #68]	; (800e9b8 <LTDC_GetRGBWidth+0x50>)
 800e974:	6999      	ldr	r1, [r3, #24]
 800e976:	4b11      	ldr	r3, [pc, #68]	; (800e9bc <LTDC_GetRGBWidth+0x54>)
 800e978:	400b      	ands	r3, r1
 800e97a:	6193      	str	r3, [r2, #24]

  LTDC_RGB_InitStruct.LTDC_BlueWidth = (uint32_t)((LTDC->GCR >> 4) & 0x7);
 800e97c:	4b0e      	ldr	r3, [pc, #56]	; (800e9b8 <LTDC_GetRGBWidth+0x50>)
 800e97e:	699b      	ldr	r3, [r3, #24]
 800e980:	091b      	lsrs	r3, r3, #4
 800e982:	f003 0307 	and.w	r3, r3, #7
 800e986:	60fb      	str	r3, [r7, #12]
  LTDC_RGB_InitStruct.LTDC_GreenWidth = (uint32_t)((LTDC->GCR >> 8) & 0x7);
 800e988:	4b0b      	ldr	r3, [pc, #44]	; (800e9b8 <LTDC_GetRGBWidth+0x50>)
 800e98a:	699b      	ldr	r3, [r3, #24]
 800e98c:	0a1b      	lsrs	r3, r3, #8
 800e98e:	f003 0307 	and.w	r3, r3, #7
 800e992:	613b      	str	r3, [r7, #16]
  LTDC_RGB_InitStruct.LTDC_RedWidth = (uint32_t)((LTDC->GCR >> 12) & 0x7);
 800e994:	4b08      	ldr	r3, [pc, #32]	; (800e9b8 <LTDC_GetRGBWidth+0x50>)
 800e996:	699b      	ldr	r3, [r3, #24]
 800e998:	0b1b      	lsrs	r3, r3, #12
 800e99a:	f003 0307 	and.w	r3, r3, #7
 800e99e:	617b      	str	r3, [r7, #20]

  return LTDC_RGB_InitStruct;
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	f107 020c 	add.w	r2, r7, #12
 800e9a6:	ca07      	ldmia	r2, {r0, r1, r2}
 800e9a8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 800e9ac:	6878      	ldr	r0, [r7, #4]
 800e9ae:	371c      	adds	r7, #28
 800e9b0:	46bd      	mov	sp, r7
 800e9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9b6:	4770      	bx	lr
 800e9b8:	40016800 	.word	0x40016800
 800e9bc:	0ffe888f 	.word	0x0ffe888f

0800e9c0 <LTDC_RGBStructInit>:
  *         be initialized.
  * @retval None
  */

void LTDC_RGBStructInit(LTDC_RGBTypeDef* LTDC_RGB_InitStruct)
{
 800e9c0:	b480      	push	{r7}
 800e9c2:	b083      	sub	sp, #12
 800e9c4:	af00      	add	r7, sp, #0
 800e9c6:	6078      	str	r0, [r7, #4]
  LTDC_RGB_InitStruct->LTDC_BlueWidth = 0x02;
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	2202      	movs	r2, #2
 800e9cc:	601a      	str	r2, [r3, #0]
  LTDC_RGB_InitStruct->LTDC_GreenWidth = 0x02;
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	2202      	movs	r2, #2
 800e9d2:	605a      	str	r2, [r3, #4]
  LTDC_RGB_InitStruct->LTDC_RedWidth = 0x02;
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	2202      	movs	r2, #2
 800e9d8:	609a      	str	r2, [r3, #8]
}
 800e9da:	370c      	adds	r7, #12
 800e9dc:	46bd      	mov	sp, r7
 800e9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9e2:	4770      	bx	lr

0800e9e4 <LTDC_LIPConfig>:
  * @param  LTDC_LIPositionConfig: Line Interrupt Position.
  * @retval None
  */

void LTDC_LIPConfig(uint32_t LTDC_LIPositionConfig)
{
 800e9e4:	b480      	push	{r7}
 800e9e6:	b083      	sub	sp, #12
 800e9e8:	af00      	add	r7, sp, #0
 800e9ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(LTDC_LIPositionConfig));

  /* Sets the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)LTDC_LIPositionConfig;
 800e9ec:	4b03      	ldr	r3, [pc, #12]	; (800e9fc <LTDC_LIPConfig+0x18>)
 800e9ee:	687a      	ldr	r2, [r7, #4]
 800e9f0:	641a      	str	r2, [r3, #64]	; 0x40
}
 800e9f2:	370c      	adds	r7, #12
 800e9f4:	46bd      	mov	sp, r7
 800e9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9fa:	4770      	bx	lr
 800e9fc:	40016800 	.word	0x40016800

0800ea00 <LTDC_ReloadConfig>:
  *     @arg LTDC_VBReload: Immediate reload.  
  * @retval None
  */

void LTDC_ReloadConfig(uint32_t LTDC_Reload)
{
 800ea00:	b480      	push	{r7}
 800ea02:	b083      	sub	sp, #12
 800ea04:	af00      	add	r7, sp, #0
 800ea06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_RELOAD(LTDC_Reload));

  /* Sets the Reload type */
  LTDC->SRCR = (uint32_t)LTDC_Reload;
 800ea08:	4b03      	ldr	r3, [pc, #12]	; (800ea18 <LTDC_ReloadConfig+0x18>)
 800ea0a:	687a      	ldr	r2, [r7, #4]
 800ea0c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800ea0e:	370c      	adds	r7, #12
 800ea10:	46bd      	mov	sp, r7
 800ea12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea16:	4770      	bx	lr
 800ea18:	40016800 	.word	0x40016800

0800ea1c <LTDC_LayerInit>:
  *         the configuration information for the specified LTDC peripheral.
  * @retval None
  */

void LTDC_LayerInit(LTDC_Layer_TypeDef* LTDC_Layerx, LTDC_Layer_InitTypeDef* LTDC_Layer_InitStruct)
{
 800ea1c:	b480      	push	{r7}
 800ea1e:	b089      	sub	sp, #36	; 0x24
 800ea20:	af00      	add	r7, sp, #0
 800ea22:	6078      	str	r0, [r7, #4]
 800ea24:	6039      	str	r1, [r7, #0]

  uint32_t whsppos = 0;
 800ea26:	2300      	movs	r3, #0
 800ea28:	61fb      	str	r3, [r7, #28]
  uint32_t wvsppos = 0;
 800ea2a:	2300      	movs	r3, #0
 800ea2c:	61bb      	str	r3, [r7, #24]
  uint32_t dcgreen = 0;
 800ea2e:	2300      	movs	r3, #0
 800ea30:	617b      	str	r3, [r7, #20]
  uint32_t dcred = 0;
 800ea32:	2300      	movs	r3, #0
 800ea34:	613b      	str	r3, [r7, #16]
  uint32_t dcalpha = 0;
 800ea36:	2300      	movs	r3, #0
 800ea38:	60fb      	str	r3, [r7, #12]
  uint32_t cfbp = 0;
 800ea3a:	2300      	movs	r3, #0
 800ea3c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LTDC_CFBP(LTDC_Layer_InitStruct->LTDC_CFBPitch));
  assert_param(IS_LTDC_CFBLL(LTDC_Layer_InitStruct->LTDC_CFBLineLength));
  assert_param(IS_LTDC_CFBLNBR(LTDC_Layer_InitStruct->LTDC_CFBLineNumber));

  /* Configures the horizontal start and stop position */
  whsppos = LTDC_Layer_InitStruct->LTDC_HorizontalStop << 16;
 800ea3e:	683b      	ldr	r3, [r7, #0]
 800ea40:	685b      	ldr	r3, [r3, #4]
 800ea42:	041b      	lsls	r3, r3, #16
 800ea44:	61fb      	str	r3, [r7, #28]
  LTDC_Layerx->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	685b      	ldr	r3, [r3, #4]
 800ea4a:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	605a      	str	r2, [r3, #4]
  LTDC_Layerx->WHPCR = (LTDC_Layer_InitStruct->LTDC_HorizontalStart | whsppos);
 800ea52:	683b      	ldr	r3, [r7, #0]
 800ea54:	681a      	ldr	r2, [r3, #0]
 800ea56:	69fb      	ldr	r3, [r7, #28]
 800ea58:	431a      	orrs	r2, r3
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	605a      	str	r2, [r3, #4]

  /* Configures the vertical start and stop position */
  wvsppos = LTDC_Layer_InitStruct->LTDC_VerticalStop << 16;
 800ea5e:	683b      	ldr	r3, [r7, #0]
 800ea60:	68db      	ldr	r3, [r3, #12]
 800ea62:	041b      	lsls	r3, r3, #16
 800ea64:	61bb      	str	r3, [r7, #24]
  LTDC_Layerx->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	689b      	ldr	r3, [r3, #8]
 800ea6a:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	609a      	str	r2, [r3, #8]
  LTDC_Layerx->WVPCR  = (LTDC_Layer_InitStruct->LTDC_VerticalStart | wvsppos);
 800ea72:	683b      	ldr	r3, [r7, #0]
 800ea74:	689a      	ldr	r2, [r3, #8]
 800ea76:	69bb      	ldr	r3, [r7, #24]
 800ea78:	431a      	orrs	r2, r3
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	609a      	str	r2, [r3, #8]

  /* Specifies the pixel format */
  LTDC_Layerx->PFCR &= ~(LTDC_LxPFCR_PF);
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	691b      	ldr	r3, [r3, #16]
 800ea82:	f023 0207 	bic.w	r2, r3, #7
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	611a      	str	r2, [r3, #16]
  LTDC_Layerx->PFCR = (LTDC_Layer_InitStruct->LTDC_PixelFormat);
 800ea8a:	683b      	ldr	r3, [r7, #0]
 800ea8c:	691a      	ldr	r2, [r3, #16]
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	611a      	str	r2, [r3, #16]

  /* Configures the default color values */
  dcgreen = (LTDC_Layer_InitStruct->LTDC_DefaultColorGreen << 8);
 800ea92:	683b      	ldr	r3, [r7, #0]
 800ea94:	69db      	ldr	r3, [r3, #28]
 800ea96:	021b      	lsls	r3, r3, #8
 800ea98:	617b      	str	r3, [r7, #20]
  dcred = (LTDC_Layer_InitStruct->LTDC_DefaultColorRed << 16);
 800ea9a:	683b      	ldr	r3, [r7, #0]
 800ea9c:	6a1b      	ldr	r3, [r3, #32]
 800ea9e:	041b      	lsls	r3, r3, #16
 800eaa0:	613b      	str	r3, [r7, #16]
  dcalpha = (LTDC_Layer_InitStruct->LTDC_DefaultColorAlpha << 24);
 800eaa2:	683b      	ldr	r3, [r7, #0]
 800eaa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eaa6:	061b      	lsls	r3, r3, #24
 800eaa8:	60fb      	str	r3, [r7, #12]
  LTDC_Layerx->DCCR &=  ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	699b      	ldr	r3, [r3, #24]
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	2200      	movs	r2, #0
 800eab2:	619a      	str	r2, [r3, #24]
  LTDC_Layerx->DCCR = (LTDC_Layer_InitStruct->LTDC_DefaultColorBlue | dcgreen | \
 800eab4:	683b      	ldr	r3, [r7, #0]
 800eab6:	699a      	ldr	r2, [r3, #24]
 800eab8:	697b      	ldr	r3, [r7, #20]
 800eaba:	431a      	orrs	r2, r3
 800eabc:	693b      	ldr	r3, [r7, #16]
 800eabe:	431a      	orrs	r2, r3
                        dcred | dcalpha);
 800eac0:	68fb      	ldr	r3, [r7, #12]
 800eac2:	431a      	orrs	r2, r3
  /* Configures the default color values */
  dcgreen = (LTDC_Layer_InitStruct->LTDC_DefaultColorGreen << 8);
  dcred = (LTDC_Layer_InitStruct->LTDC_DefaultColorRed << 16);
  dcalpha = (LTDC_Layer_InitStruct->LTDC_DefaultColorAlpha << 24);
  LTDC_Layerx->DCCR &=  ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
  LTDC_Layerx->DCCR = (LTDC_Layer_InitStruct->LTDC_DefaultColorBlue | dcgreen | \
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	619a      	str	r2, [r3, #24]
                        dcred | dcalpha);

  /* Specifies the constant alpha value */      
  LTDC_Layerx->CACR &= ~(LTDC_LxCACR_CONSTA);
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	695b      	ldr	r3, [r3, #20]
 800eacc:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	615a      	str	r2, [r3, #20]
  LTDC_Layerx->CACR = (LTDC_Layer_InitStruct->LTDC_ConstantAlpha);
 800ead4:	683b      	ldr	r3, [r7, #0]
 800ead6:	695a      	ldr	r2, [r3, #20]
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	615a      	str	r2, [r3, #20]

  /* Specifies the blending factors */
  LTDC_Layerx->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	69db      	ldr	r3, [r3, #28]
 800eae0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800eae4:	f023 0307 	bic.w	r3, r3, #7
 800eae8:	687a      	ldr	r2, [r7, #4]
 800eaea:	61d3      	str	r3, [r2, #28]
  LTDC_Layerx->BFCR = (LTDC_Layer_InitStruct->LTDC_BlendingFactor_1 | LTDC_Layer_InitStruct->LTDC_BlendingFactor_2);
 800eaec:	683b      	ldr	r3, [r7, #0]
 800eaee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800eaf0:	683b      	ldr	r3, [r7, #0]
 800eaf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eaf4:	431a      	orrs	r2, r3
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	61da      	str	r2, [r3, #28]

  /* Configures the color frame buffer start address */
  LTDC_Layerx->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	2200      	movs	r2, #0
 800eb02:	629a      	str	r2, [r3, #40]	; 0x28
  LTDC_Layerx->CFBAR = (LTDC_Layer_InitStruct->LTDC_CFBStartAdress);
 800eb04:	683b      	ldr	r3, [r7, #0]
 800eb06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Configures the color frame buffer pitch in byte */
  cfbp = (LTDC_Layer_InitStruct->LTDC_CFBPitch << 16);
 800eb0c:	683b      	ldr	r3, [r7, #0]
 800eb0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb10:	041b      	lsls	r3, r3, #16
 800eb12:	60bb      	str	r3, [r7, #8]
  LTDC_Layerx->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb18:	f003 22e0 	and.w	r2, r3, #3758153728	; 0xe000e000
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	62da      	str	r2, [r3, #44]	; 0x2c
  LTDC_Layerx->CFBLR  = (LTDC_Layer_InitStruct->LTDC_CFBLineLength | cfbp);
 800eb20:	683b      	ldr	r3, [r7, #0]
 800eb22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800eb24:	68bb      	ldr	r3, [r7, #8]
 800eb26:	431a      	orrs	r2, r3
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Configures the frame buffer line number */
  LTDC_Layerx->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb30:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800eb34:	f023 0307 	bic.w	r3, r3, #7
 800eb38:	687a      	ldr	r2, [r7, #4]
 800eb3a:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_Layerx->CFBLNR  = (LTDC_Layer_InitStruct->LTDC_CFBLineNumber);
 800eb3c:	683b      	ldr	r3, [r7, #0]
 800eb3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	631a      	str	r2, [r3, #48]	; 0x30

}
 800eb44:	3724      	adds	r7, #36	; 0x24
 800eb46:	46bd      	mov	sp, r7
 800eb48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb4c:	4770      	bx	lr
 800eb4e:	bf00      	nop

0800eb50 <LTDC_LayerStructInit>:
  *         be initialized.
  * @retval None
  */

void LTDC_LayerStructInit(LTDC_Layer_InitTypeDef * LTDC_Layer_InitStruct)
{
 800eb50:	b480      	push	{r7}
 800eb52:	b083      	sub	sp, #12
 800eb54:	af00      	add	r7, sp, #0
 800eb56:	6078      	str	r0, [r7, #4]
  /*--------------- Reset Layer structure parameters values -------------------*/

  /*!< Initialize the horizontal limit member */
  LTDC_Layer_InitStruct->LTDC_HorizontalStart = 0x00;
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	2200      	movs	r2, #0
 800eb5c:	601a      	str	r2, [r3, #0]
  LTDC_Layer_InitStruct->LTDC_HorizontalStop = 0x00;
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	2200      	movs	r2, #0
 800eb62:	605a      	str	r2, [r3, #4]

  /*!< Initialize the vertical limit member */
  LTDC_Layer_InitStruct->LTDC_VerticalStart = 0x00;
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	2200      	movs	r2, #0
 800eb68:	609a      	str	r2, [r3, #8]
  LTDC_Layer_InitStruct->LTDC_VerticalStop = 0x00;
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	2200      	movs	r2, #0
 800eb6e:	60da      	str	r2, [r3, #12]

  /*!< Initialize the pixel format member */
  LTDC_Layer_InitStruct->LTDC_PixelFormat = LTDC_Pixelformat_ARGB8888;
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	2200      	movs	r2, #0
 800eb74:	611a      	str	r2, [r3, #16]

  /*!< Initialize the constant alpha value */
  LTDC_Layer_InitStruct->LTDC_ConstantAlpha = 0xFF;
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	22ff      	movs	r2, #255	; 0xff
 800eb7a:	615a      	str	r2, [r3, #20]

  /*!< Initialize the default color values */
  LTDC_Layer_InitStruct->LTDC_DefaultColorBlue = 0x00;
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	2200      	movs	r2, #0
 800eb80:	619a      	str	r2, [r3, #24]
  LTDC_Layer_InitStruct->LTDC_DefaultColorGreen = 0x00;
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	2200      	movs	r2, #0
 800eb86:	61da      	str	r2, [r3, #28]
  LTDC_Layer_InitStruct->LTDC_DefaultColorRed = 0x00;
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	2200      	movs	r2, #0
 800eb8c:	621a      	str	r2, [r3, #32]
  LTDC_Layer_InitStruct->LTDC_DefaultColorAlpha = 0x00;
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	2200      	movs	r2, #0
 800eb92:	625a      	str	r2, [r3, #36]	; 0x24

  /*!< Initialize the blending factors */
  LTDC_Layer_InitStruct->LTDC_BlendingFactor_1 = LTDC_BlendingFactor1_PAxCA;
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800eb9a:	629a      	str	r2, [r3, #40]	; 0x28
  LTDC_Layer_InitStruct->LTDC_BlendingFactor_2 = LTDC_BlendingFactor2_PAxCA;
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	2207      	movs	r2, #7
 800eba0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*!< Initialize the frame buffer start address */
  LTDC_Layer_InitStruct->LTDC_CFBStartAdress = 0x00;
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	2200      	movs	r2, #0
 800eba6:	631a      	str	r2, [r3, #48]	; 0x30

  /*!< Initialize the frame buffer pitch and line length */
  LTDC_Layer_InitStruct->LTDC_CFBLineLength = 0x00;
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	2200      	movs	r2, #0
 800ebac:	635a      	str	r2, [r3, #52]	; 0x34
  LTDC_Layer_InitStruct->LTDC_CFBPitch = 0x00;
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	2200      	movs	r2, #0
 800ebb2:	639a      	str	r2, [r3, #56]	; 0x38

  /*!< Initialize the frame buffer line number */
  LTDC_Layer_InitStruct->LTDC_CFBLineNumber = 0x00;
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	2200      	movs	r2, #0
 800ebb8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800ebba:	370c      	adds	r7, #12
 800ebbc:	46bd      	mov	sp, r7
 800ebbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebc2:	4770      	bx	lr

0800ebc4 <LTDC_LayerCmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */

void LTDC_LayerCmd(LTDC_Layer_TypeDef* LTDC_Layerx, FunctionalState NewState)
{
 800ebc4:	b480      	push	{r7}
 800ebc6:	b083      	sub	sp, #12
 800ebc8:	af00      	add	r7, sp, #0
 800ebca:	6078      	str	r0, [r7, #4]
 800ebcc:	460b      	mov	r3, r1
 800ebce:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800ebd0:	78fb      	ldrb	r3, [r7, #3]
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d006      	beq.n	800ebe4 <LTDC_LayerCmd+0x20>
  {
    /* Enable LTDC_Layer by setting LEN bit */
    LTDC_Layerx->CR |= (uint32_t)LTDC_LxCR_LEN;
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	681b      	ldr	r3, [r3, #0]
 800ebda:	f043 0201 	orr.w	r2, r3, #1
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	601a      	str	r2, [r3, #0]
 800ebe2:	e005      	b.n	800ebf0 <LTDC_LayerCmd+0x2c>
  }
  else
  {
    /* Disable LTDC_Layer by clearing LEN bit */
    LTDC_Layerx->CR &= ~(uint32_t)LTDC_LxCR_LEN;
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	f023 0201 	bic.w	r2, r3, #1
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	601a      	str	r2, [r3, #0]
  }
}
 800ebf0:	370c      	adds	r7, #12
 800ebf2:	46bd      	mov	sp, r7
 800ebf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebf8:	4770      	bx	lr
 800ebfa:	bf00      	nop

0800ebfc <LTDC_GetPosStatus>:
  *         the current position.
  * @retval None
  */

LTDC_PosTypeDef LTDC_GetPosStatus(void)
{
 800ebfc:	b480      	push	{r7}
 800ebfe:	b085      	sub	sp, #20
 800ec00:	af00      	add	r7, sp, #0
 800ec02:	6078      	str	r0, [r7, #4]
  LTDC_PosTypeDef LTDC_Pos_InitStruct;

  LTDC->CPSR &= ~(LTDC_CPSR_CYPOS | LTDC_CPSR_CXPOS);
 800ec04:	4b0c      	ldr	r3, [pc, #48]	; (800ec38 <LTDC_GetPosStatus+0x3c>)
 800ec06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ec08:	4b0b      	ldr	r3, [pc, #44]	; (800ec38 <LTDC_GetPosStatus+0x3c>)
 800ec0a:	2200      	movs	r2, #0
 800ec0c:	645a      	str	r2, [r3, #68]	; 0x44

  LTDC_Pos_InitStruct.LTDC_POSX = (uint32_t)(LTDC->CPSR >> 16);
 800ec0e:	4b0a      	ldr	r3, [pc, #40]	; (800ec38 <LTDC_GetPosStatus+0x3c>)
 800ec10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ec12:	0c1b      	lsrs	r3, r3, #16
 800ec14:	60bb      	str	r3, [r7, #8]
  LTDC_Pos_InitStruct.LTDC_POSY = (uint32_t)(LTDC->CPSR & 0xFFFF);
 800ec16:	4b08      	ldr	r3, [pc, #32]	; (800ec38 <LTDC_GetPosStatus+0x3c>)
 800ec18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ec1a:	b29b      	uxth	r3, r3
 800ec1c:	60fb      	str	r3, [r7, #12]

  return LTDC_Pos_InitStruct;
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	f107 0208 	add.w	r2, r7, #8
 800ec24:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ec28:	e883 0003 	stmia.w	r3, {r0, r1}
}
 800ec2c:	6878      	ldr	r0, [r7, #4]
 800ec2e:	3714      	adds	r7, #20
 800ec30:	46bd      	mov	sp, r7
 800ec32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec36:	4770      	bx	lr
 800ec38:	40016800 	.word	0x40016800

0800ec3c <LTDC_PosStructInit>:
  *         be initialized.
  * @retval None
  */

void LTDC_PosStructInit(LTDC_PosTypeDef* LTDC_Pos_InitStruct)
{
 800ec3c:	b480      	push	{r7}
 800ec3e:	b083      	sub	sp, #12
 800ec40:	af00      	add	r7, sp, #0
 800ec42:	6078      	str	r0, [r7, #4]
  LTDC_Pos_InitStruct->LTDC_POSX = 0x00;
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	2200      	movs	r2, #0
 800ec48:	601a      	str	r2, [r3, #0]
  LTDC_Pos_InitStruct->LTDC_POSY = 0x00;
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	2200      	movs	r2, #0
 800ec4e:	605a      	str	r2, [r3, #4]
}
 800ec50:	370c      	adds	r7, #12
 800ec52:	46bd      	mov	sp, r7
 800ec54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec58:	4770      	bx	lr
 800ec5a:	bf00      	nop

0800ec5c <LTDC_GetCDStatus>:
  *     @arg LTDC_CD_HSYNC:  Horizontal Synchronization current status.
  * @retval The new state of LTDC_CD (SET or RESET).
  */

FlagStatus LTDC_GetCDStatus(uint32_t LTDC_CD)
{
 800ec5c:	b480      	push	{r7}
 800ec5e:	b085      	sub	sp, #20
 800ec60:	af00      	add	r7, sp, #0
 800ec62:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus;

  /* Check the parameters */
  assert_param(IS_LTDC_GET_CD(LTDC_CD));

  if ((LTDC->CDSR & LTDC_CD) != (uint32_t)RESET)
 800ec64:	4b08      	ldr	r3, [pc, #32]	; (800ec88 <LTDC_GetCDStatus+0x2c>)
 800ec66:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	4013      	ands	r3, r2
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d002      	beq.n	800ec76 <LTDC_GetCDStatus+0x1a>
  {
    bitstatus = SET;
 800ec70:	2301      	movs	r3, #1
 800ec72:	73fb      	strb	r3, [r7, #15]
 800ec74:	e001      	b.n	800ec7a <LTDC_GetCDStatus+0x1e>
  }
  else
  {
    bitstatus = RESET;
 800ec76:	2300      	movs	r3, #0
 800ec78:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800ec7a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec7c:	4618      	mov	r0, r3
 800ec7e:	3714      	adds	r7, #20
 800ec80:	46bd      	mov	sp, r7
 800ec82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec86:	4770      	bx	lr
 800ec88:	40016800 	.word	0x40016800

0800ec8c <LTDC_ColorKeyingConfig>:
  *         one of the following values: LTDC_Layer1, LTDC_Layer2   
  * @retval None
  */

void LTDC_ColorKeyingConfig(LTDC_Layer_TypeDef* LTDC_Layerx, LTDC_ColorKeying_InitTypeDef* LTDC_colorkeying_InitStruct, FunctionalState NewState)
{ 
 800ec8c:	b480      	push	{r7}
 800ec8e:	b087      	sub	sp, #28
 800ec90:	af00      	add	r7, sp, #0
 800ec92:	60f8      	str	r0, [r7, #12]
 800ec94:	60b9      	str	r1, [r7, #8]
 800ec96:	4613      	mov	r3, r2
 800ec98:	71fb      	strb	r3, [r7, #7]
  uint32_t ckgreen = 0;
 800ec9a:	2300      	movs	r3, #0
 800ec9c:	617b      	str	r3, [r7, #20]
  uint32_t ckred = 0;
 800ec9e:	2300      	movs	r3, #0
 800eca0:	613b      	str	r3, [r7, #16]
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_LTDC_CKEYING(LTDC_colorkeying_InitStruct->LTDC_ColorKeyBlue));
  assert_param(IS_LTDC_CKEYING(LTDC_colorkeying_InitStruct->LTDC_ColorKeyGreen));
  assert_param(IS_LTDC_CKEYING(LTDC_colorkeying_InitStruct->LTDC_ColorKeyRed));
  
  if (NewState != DISABLE)
 800eca2:	79fb      	ldrb	r3, [r7, #7]
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d01f      	beq.n	800ece8 <LTDC_ColorKeyingConfig+0x5c>
  {
    /* Enable LTDC color keying by setting COLKEN bit */
    LTDC_Layerx->CR |= (uint32_t)LTDC_LxCR_COLKEN;
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	681b      	ldr	r3, [r3, #0]
 800ecac:	f043 0202 	orr.w	r2, r3, #2
 800ecb0:	68fb      	ldr	r3, [r7, #12]
 800ecb2:	601a      	str	r2, [r3, #0]
    
    /* Sets the color keying values */
    ckgreen = (LTDC_colorkeying_InitStruct->LTDC_ColorKeyGreen << 8);
 800ecb4:	68bb      	ldr	r3, [r7, #8]
 800ecb6:	685b      	ldr	r3, [r3, #4]
 800ecb8:	021b      	lsls	r3, r3, #8
 800ecba:	617b      	str	r3, [r7, #20]
    ckred = (LTDC_colorkeying_InitStruct->LTDC_ColorKeyRed << 16);
 800ecbc:	68bb      	ldr	r3, [r7, #8]
 800ecbe:	689b      	ldr	r3, [r3, #8]
 800ecc0:	041b      	lsls	r3, r3, #16
 800ecc2:	613b      	str	r3, [r7, #16]
    LTDC_Layerx->CKCR  &= ~(LTDC_LxCKCR_CKBLUE | LTDC_LxCKCR_CKGREEN | LTDC_LxCKCR_CKRED);
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	68db      	ldr	r3, [r3, #12]
 800ecc8:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	60da      	str	r2, [r3, #12]
    LTDC_Layerx->CKCR |= (LTDC_colorkeying_InitStruct->LTDC_ColorKeyBlue | ckgreen | ckred);
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	68da      	ldr	r2, [r3, #12]
 800ecd4:	68bb      	ldr	r3, [r7, #8]
 800ecd6:	6819      	ldr	r1, [r3, #0]
 800ecd8:	697b      	ldr	r3, [r7, #20]
 800ecda:	4319      	orrs	r1, r3
 800ecdc:	693b      	ldr	r3, [r7, #16]
 800ecde:	430b      	orrs	r3, r1
 800ece0:	431a      	orrs	r2, r3
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	60da      	str	r2, [r3, #12]
 800ece6:	e005      	b.n	800ecf4 <LTDC_ColorKeyingConfig+0x68>
  }
  else
  {
    /* Disable LTDC color keying by clearing COLKEN bit */
    LTDC_Layerx->CR &= ~(uint32_t)LTDC_LxCR_COLKEN;
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	681b      	ldr	r3, [r3, #0]
 800ecec:	f023 0202 	bic.w	r2, r3, #2
 800ecf0:	68fb      	ldr	r3, [r7, #12]
 800ecf2:	601a      	str	r2, [r3, #0]
  }
  
  /* Reload shadow register */
  LTDC->SRCR = LTDC_IMReload;
 800ecf4:	4b03      	ldr	r3, [pc, #12]	; (800ed04 <LTDC_ColorKeyingConfig+0x78>)
 800ecf6:	2201      	movs	r2, #1
 800ecf8:	625a      	str	r2, [r3, #36]	; 0x24
}
 800ecfa:	371c      	adds	r7, #28
 800ecfc:	46bd      	mov	sp, r7
 800ecfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed02:	4770      	bx	lr
 800ed04:	40016800 	.word	0x40016800

0800ed08 <LTDC_ColorKeyingStructInit>:
  *         be initialized.
  * @retval None
  */

void LTDC_ColorKeyingStructInit(LTDC_ColorKeying_InitTypeDef* LTDC_colorkeying_InitStruct)
{
 800ed08:	b480      	push	{r7}
 800ed0a:	b083      	sub	sp, #12
 800ed0c:	af00      	add	r7, sp, #0
 800ed0e:	6078      	str	r0, [r7, #4]
  /*!< Initialize the color keying values */
  LTDC_colorkeying_InitStruct->LTDC_ColorKeyBlue = 0x00;
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	2200      	movs	r2, #0
 800ed14:	601a      	str	r2, [r3, #0]
  LTDC_colorkeying_InitStruct->LTDC_ColorKeyGreen = 0x00;
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	2200      	movs	r2, #0
 800ed1a:	605a      	str	r2, [r3, #4]
  LTDC_colorkeying_InitStruct->LTDC_ColorKeyRed = 0x00;
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	2200      	movs	r2, #0
 800ed20:	609a      	str	r2, [r3, #8]
}
 800ed22:	370c      	adds	r7, #12
 800ed24:	46bd      	mov	sp, r7
 800ed26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed2a:	4770      	bx	lr

0800ed2c <LTDC_CLUTCmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */

void LTDC_CLUTCmd(LTDC_Layer_TypeDef* LTDC_Layerx, FunctionalState NewState)
{
 800ed2c:	b480      	push	{r7}
 800ed2e:	b083      	sub	sp, #12
 800ed30:	af00      	add	r7, sp, #0
 800ed32:	6078      	str	r0, [r7, #4]
 800ed34:	460b      	mov	r3, r1
 800ed36:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800ed38:	78fb      	ldrb	r3, [r7, #3]
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d006      	beq.n	800ed4c <LTDC_CLUTCmd+0x20>
  {
    /* Enable CLUT by setting CLUTEN bit */
    LTDC_Layerx->CR |= (uint32_t)LTDC_LxCR_CLUTEN;
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	f043 0210 	orr.w	r2, r3, #16
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	601a      	str	r2, [r3, #0]
 800ed4a:	e005      	b.n	800ed58 <LTDC_CLUTCmd+0x2c>
  }
  else
  {
    /* Disable CLUT by clearing CLUTEN bit */
    LTDC_Layerx->CR &= ~(uint32_t)LTDC_LxCR_CLUTEN;
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	681b      	ldr	r3, [r3, #0]
 800ed50:	f023 0210 	bic.w	r2, r3, #16
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	601a      	str	r2, [r3, #0]
  }
  
  /* Reload shadow register */
  LTDC->SRCR = LTDC_IMReload;
 800ed58:	4b03      	ldr	r3, [pc, #12]	; (800ed68 <LTDC_CLUTCmd+0x3c>)
 800ed5a:	2201      	movs	r2, #1
 800ed5c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800ed5e:	370c      	adds	r7, #12
 800ed60:	46bd      	mov	sp, r7
 800ed62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed66:	4770      	bx	lr
 800ed68:	40016800 	.word	0x40016800

0800ed6c <LTDC_CLUTInit>:
  *         one of the following values: LTDC_Layer1, LTDC_Layer2   
  * @retval None
  */

void LTDC_CLUTInit(LTDC_Layer_TypeDef* LTDC_Layerx, LTDC_CLUT_InitTypeDef* LTDC_CLUT_InitStruct)
{  
 800ed6c:	b480      	push	{r7}
 800ed6e:	b087      	sub	sp, #28
 800ed70:	af00      	add	r7, sp, #0
 800ed72:	6078      	str	r0, [r7, #4]
 800ed74:	6039      	str	r1, [r7, #0]
  uint32_t green = 0;
 800ed76:	2300      	movs	r3, #0
 800ed78:	617b      	str	r3, [r7, #20]
  uint32_t red = 0;
 800ed7a:	2300      	movs	r3, #0
 800ed7c:	613b      	str	r3, [r7, #16]
  uint32_t clutadd = 0;
 800ed7e:	2300      	movs	r3, #0
 800ed80:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LTDC_CLUTWR(LTDC_CLUT_InitStruct->LTDC_RedValue));
  assert_param(IS_LTDC_CLUTWR(LTDC_CLUT_InitStruct->LTDC_GreenValue));
  assert_param(IS_LTDC_CLUTWR(LTDC_CLUT_InitStruct->LTDC_BlueValue));
    
  /* Specifies the CLUT address and RGB value */
  green = (LTDC_CLUT_InitStruct->LTDC_GreenValue << 8);
 800ed82:	683b      	ldr	r3, [r7, #0]
 800ed84:	689b      	ldr	r3, [r3, #8]
 800ed86:	021b      	lsls	r3, r3, #8
 800ed88:	617b      	str	r3, [r7, #20]
  red = (LTDC_CLUT_InitStruct->LTDC_RedValue << 16);
 800ed8a:	683b      	ldr	r3, [r7, #0]
 800ed8c:	68db      	ldr	r3, [r3, #12]
 800ed8e:	041b      	lsls	r3, r3, #16
 800ed90:	613b      	str	r3, [r7, #16]
  clutadd = (LTDC_CLUT_InitStruct->LTDC_CLUTAdress << 24);
 800ed92:	683b      	ldr	r3, [r7, #0]
 800ed94:	681b      	ldr	r3, [r3, #0]
 800ed96:	061b      	lsls	r3, r3, #24
 800ed98:	60fb      	str	r3, [r7, #12]
  LTDC_Layerx->CLUTWR  = (clutadd | LTDC_CLUT_InitStruct->LTDC_BlueValue | \
 800ed9a:	683b      	ldr	r3, [r7, #0]
 800ed9c:	685a      	ldr	r2, [r3, #4]
 800ed9e:	68fb      	ldr	r3, [r7, #12]
 800eda0:	431a      	orrs	r2, r3
 800eda2:	697b      	ldr	r3, [r7, #20]
 800eda4:	431a      	orrs	r2, r3
                              green | red);
 800eda6:	693b      	ldr	r3, [r7, #16]
 800eda8:	431a      	orrs	r2, r3
    
  /* Specifies the CLUT address and RGB value */
  green = (LTDC_CLUT_InitStruct->LTDC_GreenValue << 8);
  red = (LTDC_CLUT_InitStruct->LTDC_RedValue << 16);
  clutadd = (LTDC_CLUT_InitStruct->LTDC_CLUTAdress << 24);
  LTDC_Layerx->CLUTWR  = (clutadd | LTDC_CLUT_InitStruct->LTDC_BlueValue | \
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	641a      	str	r2, [r3, #64]	; 0x40
                              green | red);
}
 800edae:	371c      	adds	r7, #28
 800edb0:	46bd      	mov	sp, r7
 800edb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edb6:	4770      	bx	lr

0800edb8 <LTDC_CLUTStructInit>:
  *         be initialized.
  * @retval None
  */

void LTDC_CLUTStructInit(LTDC_CLUT_InitTypeDef* LTDC_CLUT_InitStruct)
{
 800edb8:	b480      	push	{r7}
 800edba:	b083      	sub	sp, #12
 800edbc:	af00      	add	r7, sp, #0
 800edbe:	6078      	str	r0, [r7, #4]
  /*!< Initialize the CLUT adress and RGB values */
  LTDC_CLUT_InitStruct->LTDC_CLUTAdress = 0x00;
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	2200      	movs	r2, #0
 800edc4:	601a      	str	r2, [r3, #0]
  LTDC_CLUT_InitStruct->LTDC_BlueValue = 0x00;
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	2200      	movs	r2, #0
 800edca:	605a      	str	r2, [r3, #4]
  LTDC_CLUT_InitStruct->LTDC_GreenValue = 0x00;
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	2200      	movs	r2, #0
 800edd0:	609a      	str	r2, [r3, #8]
  LTDC_CLUT_InitStruct->LTDC_RedValue = 0x00;
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	2200      	movs	r2, #0
 800edd6:	60da      	str	r2, [r3, #12]
}
 800edd8:	370c      	adds	r7, #12
 800edda:	46bd      	mov	sp, r7
 800eddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ede0:	4770      	bx	lr
 800ede2:	bf00      	nop

0800ede4 <LTDC_LayerPosition>:
  * @retval Reload of the shadow registers values must be applied after layer 
  *         position reconfiguration.
  */

void LTDC_LayerPosition(LTDC_Layer_TypeDef* LTDC_Layerx, uint16_t OffsetX, uint16_t OffsetY)
{
 800ede4:	b480      	push	{r7}
 800ede6:	b089      	sub	sp, #36	; 0x24
 800ede8:	af00      	add	r7, sp, #0
 800edea:	6078      	str	r0, [r7, #4]
 800edec:	4613      	mov	r3, r2
 800edee:	460a      	mov	r2, r1
 800edf0:	807a      	strh	r2, [r7, #2]
 800edf2:	803b      	strh	r3, [r7, #0]
  uint32_t horizontal_start;
  uint32_t horizontal_stop;
  uint32_t vertical_start;
  uint32_t vertical_stop;
  
  LTDC_Layerx->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	685b      	ldr	r3, [r3, #4]
 800edf8:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	605a      	str	r2, [r3, #4]
  LTDC_Layerx->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	689b      	ldr	r3, [r3, #8]
 800ee04:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	609a      	str	r2, [r3, #8]
  
  /* Reconfigures the horizontal and vertical start position */
  tempreg = LTDC->BPCR;
 800ee0c:	4b2b      	ldr	r3, [pc, #172]	; (800eebc <LTDC_LayerPosition+0xd8>)
 800ee0e:	68db      	ldr	r3, [r3, #12]
 800ee10:	61bb      	str	r3, [r7, #24]
  horizontal_start = (tempreg >> 16) + 1 + OffsetX;
 800ee12:	69bb      	ldr	r3, [r7, #24]
 800ee14:	0c1a      	lsrs	r2, r3, #16
 800ee16:	887b      	ldrh	r3, [r7, #2]
 800ee18:	4413      	add	r3, r2
 800ee1a:	3301      	adds	r3, #1
 800ee1c:	617b      	str	r3, [r7, #20]
  vertical_start = (tempreg & 0xFFFF) + 1 + OffsetY;
 800ee1e:	69bb      	ldr	r3, [r7, #24]
 800ee20:	b29a      	uxth	r2, r3
 800ee22:	883b      	ldrh	r3, [r7, #0]
 800ee24:	4413      	add	r3, r2
 800ee26:	3301      	adds	r3, #1
 800ee28:	613b      	str	r3, [r7, #16]
  
  /* Reconfigures the horizontal and vertical stop position */
  /* Get the number of byte per pixel */
  
  tempreg = LTDC_Layerx->PFCR;
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	691b      	ldr	r3, [r3, #16]
 800ee2e:	61bb      	str	r3, [r7, #24]
  
  if (tempreg == LTDC_Pixelformat_ARGB8888)
 800ee30:	69bb      	ldr	r3, [r7, #24]
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	d102      	bne.n	800ee3c <LTDC_LayerPosition+0x58>
  {
    temp = 4;
 800ee36:	2304      	movs	r3, #4
 800ee38:	61fb      	str	r3, [r7, #28]
 800ee3a:	e016      	b.n	800ee6a <LTDC_LayerPosition+0x86>
  }
  else if (tempreg == LTDC_Pixelformat_RGB888)
 800ee3c:	69bb      	ldr	r3, [r7, #24]
 800ee3e:	2b01      	cmp	r3, #1
 800ee40:	d102      	bne.n	800ee48 <LTDC_LayerPosition+0x64>
  {
    temp = 3;
 800ee42:	2303      	movs	r3, #3
 800ee44:	61fb      	str	r3, [r7, #28]
 800ee46:	e010      	b.n	800ee6a <LTDC_LayerPosition+0x86>
  }
  else if ((tempreg == LTDC_Pixelformat_ARGB4444) || 
 800ee48:	69bb      	ldr	r3, [r7, #24]
 800ee4a:	2b04      	cmp	r3, #4
 800ee4c:	d008      	beq.n	800ee60 <LTDC_LayerPosition+0x7c>
 800ee4e:	69bb      	ldr	r3, [r7, #24]
 800ee50:	2b02      	cmp	r3, #2
 800ee52:	d005      	beq.n	800ee60 <LTDC_LayerPosition+0x7c>
          (tempreg == LTDC_Pixelformat_RGB565)    ||  
 800ee54:	69bb      	ldr	r3, [r7, #24]
 800ee56:	2b03      	cmp	r3, #3
 800ee58:	d002      	beq.n	800ee60 <LTDC_LayerPosition+0x7c>
          (tempreg == LTDC_Pixelformat_ARGB1555)  ||
 800ee5a:	69bb      	ldr	r3, [r7, #24]
 800ee5c:	2b07      	cmp	r3, #7
 800ee5e:	d102      	bne.n	800ee66 <LTDC_LayerPosition+0x82>
          (tempreg == LTDC_Pixelformat_AL88))
  {
    temp = 2;  
 800ee60:	2302      	movs	r3, #2
 800ee62:	61fb      	str	r3, [r7, #28]
 800ee64:	e001      	b.n	800ee6a <LTDC_LayerPosition+0x86>
  }
  else
  {
    temp = 1;
 800ee66:	2301      	movs	r3, #1
 800ee68:	61fb      	str	r3, [r7, #28]
  }  
    
  tempreg = LTDC_Layerx->CFBLR;
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee6e:	61bb      	str	r3, [r7, #24]
  horizontal_stop = (((tempreg & 0x1FFF) - 3)/temp) + horizontal_start - 1;
 800ee70:	69bb      	ldr	r3, [r7, #24]
 800ee72:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ee76:	1eda      	subs	r2, r3, #3
 800ee78:	69fb      	ldr	r3, [r7, #28]
 800ee7a:	fbb2 f2f3 	udiv	r2, r2, r3
 800ee7e:	697b      	ldr	r3, [r7, #20]
 800ee80:	4413      	add	r3, r2
 800ee82:	3b01      	subs	r3, #1
 800ee84:	60fb      	str	r3, [r7, #12]
  
  tempreg = LTDC_Layerx->CFBLNR;
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee8a:	61bb      	str	r3, [r7, #24]
  vertical_stop = (tempreg & 0x7FF) + vertical_start - 1;  
 800ee8c:	69bb      	ldr	r3, [r7, #24]
 800ee8e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800ee92:	693b      	ldr	r3, [r7, #16]
 800ee94:	4413      	add	r3, r2
 800ee96:	3b01      	subs	r3, #1
 800ee98:	60bb      	str	r3, [r7, #8]
  
  LTDC_Layerx->WHPCR = horizontal_start | (horizontal_stop << 16);
 800ee9a:	68fb      	ldr	r3, [r7, #12]
 800ee9c:	041a      	lsls	r2, r3, #16
 800ee9e:	697b      	ldr	r3, [r7, #20]
 800eea0:	431a      	orrs	r2, r3
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	605a      	str	r2, [r3, #4]
  LTDC_Layerx->WVPCR = vertical_start | (vertical_stop << 16);  
 800eea6:	68bb      	ldr	r3, [r7, #8]
 800eea8:	041a      	lsls	r2, r3, #16
 800eeaa:	693b      	ldr	r3, [r7, #16]
 800eeac:	431a      	orrs	r2, r3
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	609a      	str	r2, [r3, #8]
}
 800eeb2:	3724      	adds	r7, #36	; 0x24
 800eeb4:	46bd      	mov	sp, r7
 800eeb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeba:	4770      	bx	lr
 800eebc:	40016800 	.word	0x40016800

0800eec0 <LTDC_LayerAlpha>:
  * @retval Reload of the shadow registers values must be applied after constant 
  *         alpha reconfiguration.         
  */

void LTDC_LayerAlpha(LTDC_Layer_TypeDef* LTDC_Layerx, uint8_t ConstantAlpha)
{  
 800eec0:	b480      	push	{r7}
 800eec2:	b083      	sub	sp, #12
 800eec4:	af00      	add	r7, sp, #0
 800eec6:	6078      	str	r0, [r7, #4]
 800eec8:	460b      	mov	r3, r1
 800eeca:	70fb      	strb	r3, [r7, #3]
  /* reconfigure the constant alpha value */      
  LTDC_Layerx->CACR = ConstantAlpha;
 800eecc:	78fa      	ldrb	r2, [r7, #3]
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	615a      	str	r2, [r3, #20]
}
 800eed2:	370c      	adds	r7, #12
 800eed4:	46bd      	mov	sp, r7
 800eed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeda:	4770      	bx	lr

0800eedc <LTDC_LayerAddress>:
  * @retval Reload of the shadow registers values must be applied after layer 
  *         address reconfiguration.
  */

void LTDC_LayerAddress(LTDC_Layer_TypeDef* LTDC_Layerx, uint32_t Address)
{
 800eedc:	b480      	push	{r7}
 800eede:	b083      	sub	sp, #12
 800eee0:	af00      	add	r7, sp, #0
 800eee2:	6078      	str	r0, [r7, #4]
 800eee4:	6039      	str	r1, [r7, #0]
  /* Reconfigures the color frame buffer start address */
  LTDC_Layerx->CFBAR = Address;
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	683a      	ldr	r2, [r7, #0]
 800eeea:	629a      	str	r2, [r3, #40]	; 0x28
}
 800eeec:	370c      	adds	r7, #12
 800eeee:	46bd      	mov	sp, r7
 800eef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eef4:	4770      	bx	lr
 800eef6:	bf00      	nop

0800eef8 <LTDC_LayerSize>:
  * @retval Reload of the shadow registers values must be applied after layer 
  *         size reconfiguration.
  */

void LTDC_LayerSize(LTDC_Layer_TypeDef* LTDC_Layerx, uint32_t Width, uint32_t Height)
{
 800eef8:	b480      	push	{r7}
 800eefa:	b08b      	sub	sp, #44	; 0x2c
 800eefc:	af00      	add	r7, sp, #0
 800eefe:	60f8      	str	r0, [r7, #12]
 800ef00:	60b9      	str	r1, [r7, #8]
 800ef02:	607a      	str	r2, [r7, #4]
  uint32_t horizontal_start;
  uint32_t horizontal_stop;
  uint32_t vertical_start;
  uint32_t vertical_stop;  
  
  tempreg = LTDC_Layerx->PFCR;
 800ef04:	68fb      	ldr	r3, [r7, #12]
 800ef06:	691b      	ldr	r3, [r3, #16]
 800ef08:	623b      	str	r3, [r7, #32]
  
  if (tempreg == LTDC_Pixelformat_ARGB8888)
 800ef0a:	6a3b      	ldr	r3, [r7, #32]
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d103      	bne.n	800ef18 <LTDC_LayerSize+0x20>
  {
    temp = 4;
 800ef10:	2304      	movs	r3, #4
 800ef12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ef16:	e019      	b.n	800ef4c <LTDC_LayerSize+0x54>
  }
  else if (tempreg == LTDC_Pixelformat_RGB888)
 800ef18:	6a3b      	ldr	r3, [r7, #32]
 800ef1a:	2b01      	cmp	r3, #1
 800ef1c:	d103      	bne.n	800ef26 <LTDC_LayerSize+0x2e>
  {
    temp = 3;
 800ef1e:	2303      	movs	r3, #3
 800ef20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ef24:	e012      	b.n	800ef4c <LTDC_LayerSize+0x54>
  }
  else if ((tempreg == LTDC_Pixelformat_ARGB4444) || \
 800ef26:	6a3b      	ldr	r3, [r7, #32]
 800ef28:	2b04      	cmp	r3, #4
 800ef2a:	d008      	beq.n	800ef3e <LTDC_LayerSize+0x46>
 800ef2c:	6a3b      	ldr	r3, [r7, #32]
 800ef2e:	2b02      	cmp	r3, #2
 800ef30:	d005      	beq.n	800ef3e <LTDC_LayerSize+0x46>
          (tempreg == LTDC_Pixelformat_RGB565)    || \
 800ef32:	6a3b      	ldr	r3, [r7, #32]
 800ef34:	2b03      	cmp	r3, #3
 800ef36:	d002      	beq.n	800ef3e <LTDC_LayerSize+0x46>
          (tempreg == LTDC_Pixelformat_ARGB1555)  || \
 800ef38:	6a3b      	ldr	r3, [r7, #32]
 800ef3a:	2b07      	cmp	r3, #7
 800ef3c:	d103      	bne.n	800ef46 <LTDC_LayerSize+0x4e>
          (tempreg == LTDC_Pixelformat_AL88))
  {
    temp = 2;  
 800ef3e:	2302      	movs	r3, #2
 800ef40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ef44:	e002      	b.n	800ef4c <LTDC_LayerSize+0x54>
  }
  else
  {
    temp = 1;
 800ef46:	2301      	movs	r3, #1
 800ef48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* update horizontal and vertical stop */
  tempreg = LTDC_Layerx->WHPCR;
 800ef4c:	68fb      	ldr	r3, [r7, #12]
 800ef4e:	685b      	ldr	r3, [r3, #4]
 800ef50:	623b      	str	r3, [r7, #32]
  horizontal_start = (tempreg & 0x1FFF);
 800ef52:	6a3b      	ldr	r3, [r7, #32]
 800ef54:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ef58:	61fb      	str	r3, [r7, #28]
  horizontal_stop = Width + horizontal_start - 1;  
 800ef5a:	68ba      	ldr	r2, [r7, #8]
 800ef5c:	69fb      	ldr	r3, [r7, #28]
 800ef5e:	4413      	add	r3, r2
 800ef60:	3b01      	subs	r3, #1
 800ef62:	61bb      	str	r3, [r7, #24]

  tempreg = LTDC_Layerx->WVPCR;
 800ef64:	68fb      	ldr	r3, [r7, #12]
 800ef66:	689b      	ldr	r3, [r3, #8]
 800ef68:	623b      	str	r3, [r7, #32]
  vertical_start = (tempreg & 0x1FFF);
 800ef6a:	6a3b      	ldr	r3, [r7, #32]
 800ef6c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ef70:	617b      	str	r3, [r7, #20]
  vertical_stop = Height + vertical_start - 1;  
 800ef72:	687a      	ldr	r2, [r7, #4]
 800ef74:	697b      	ldr	r3, [r7, #20]
 800ef76:	4413      	add	r3, r2
 800ef78:	3b01      	subs	r3, #1
 800ef7a:	613b      	str	r3, [r7, #16]
  
  LTDC_Layerx->WHPCR = horizontal_start | (horizontal_stop << 16);
 800ef7c:	69bb      	ldr	r3, [r7, #24]
 800ef7e:	041a      	lsls	r2, r3, #16
 800ef80:	69fb      	ldr	r3, [r7, #28]
 800ef82:	431a      	orrs	r2, r3
 800ef84:	68fb      	ldr	r3, [r7, #12]
 800ef86:	605a      	str	r2, [r3, #4]
  LTDC_Layerx->WVPCR = vertical_start | (vertical_stop << 16);  
 800ef88:	693b      	ldr	r3, [r7, #16]
 800ef8a:	041a      	lsls	r2, r3, #16
 800ef8c:	697b      	ldr	r3, [r7, #20]
 800ef8e:	431a      	orrs	r2, r3
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	609a      	str	r2, [r3, #8]

  /* Reconfigures the color frame buffer pitch in byte */
  LTDC_Layerx->CFBLR  = ((Width * temp) << 16) | ((Width * temp) + 3);  
 800ef94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ef98:	68ba      	ldr	r2, [r7, #8]
 800ef9a:	fb02 f303 	mul.w	r3, r2, r3
 800ef9e:	041a      	lsls	r2, r3, #16
 800efa0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800efa4:	68b9      	ldr	r1, [r7, #8]
 800efa6:	fb01 f303 	mul.w	r3, r1, r3
 800efaa:	3303      	adds	r3, #3
 800efac:	431a      	orrs	r2, r3
 800efae:	68fb      	ldr	r3, [r7, #12]
 800efb0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reconfigures the frame buffer line number */
  LTDC_Layerx->CFBLNR  = Height;  
 800efb2:	68fb      	ldr	r3, [r7, #12]
 800efb4:	687a      	ldr	r2, [r7, #4]
 800efb6:	631a      	str	r2, [r3, #48]	; 0x30
  
}
 800efb8:	372c      	adds	r7, #44	; 0x2c
 800efba:	46bd      	mov	sp, r7
 800efbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efc0:	4770      	bx	lr
 800efc2:	bf00      	nop

0800efc4 <LTDC_LayerPixelFormat>:
  * @retval Reload of the shadow registers values must be applied after layer 
  *         pixel format reconfiguration.
  */

void LTDC_LayerPixelFormat(LTDC_Layer_TypeDef* LTDC_Layerx, uint32_t PixelFormat)
{
 800efc4:	b480      	push	{r7}
 800efc6:	b085      	sub	sp, #20
 800efc8:	af00      	add	r7, sp, #0
 800efca:	6078      	str	r0, [r7, #4]
 800efcc:	6039      	str	r1, [r7, #0]

  uint8_t temp;
  uint32_t tempreg;
  
  tempreg = LTDC_Layerx->PFCR;
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	691b      	ldr	r3, [r3, #16]
 800efd2:	60bb      	str	r3, [r7, #8]
  
  if (tempreg == LTDC_Pixelformat_ARGB8888)
 800efd4:	68bb      	ldr	r3, [r7, #8]
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d102      	bne.n	800efe0 <LTDC_LayerPixelFormat+0x1c>
  {
    temp = 4;
 800efda:	2304      	movs	r3, #4
 800efdc:	73fb      	strb	r3, [r7, #15]
 800efde:	e016      	b.n	800f00e <LTDC_LayerPixelFormat+0x4a>
  }
  else if (tempreg == LTDC_Pixelformat_RGB888)
 800efe0:	68bb      	ldr	r3, [r7, #8]
 800efe2:	2b01      	cmp	r3, #1
 800efe4:	d102      	bne.n	800efec <LTDC_LayerPixelFormat+0x28>
  {
    temp = 3;
 800efe6:	2303      	movs	r3, #3
 800efe8:	73fb      	strb	r3, [r7, #15]
 800efea:	e010      	b.n	800f00e <LTDC_LayerPixelFormat+0x4a>
  }
  else if ((tempreg == LTDC_Pixelformat_ARGB4444) || \
 800efec:	68bb      	ldr	r3, [r7, #8]
 800efee:	2b04      	cmp	r3, #4
 800eff0:	d008      	beq.n	800f004 <LTDC_LayerPixelFormat+0x40>
 800eff2:	68bb      	ldr	r3, [r7, #8]
 800eff4:	2b02      	cmp	r3, #2
 800eff6:	d005      	beq.n	800f004 <LTDC_LayerPixelFormat+0x40>
          (tempreg == LTDC_Pixelformat_RGB565)    || \
 800eff8:	68bb      	ldr	r3, [r7, #8]
 800effa:	2b03      	cmp	r3, #3
 800effc:	d002      	beq.n	800f004 <LTDC_LayerPixelFormat+0x40>
          (tempreg == LTDC_Pixelformat_ARGB1555)  || \
 800effe:	68bb      	ldr	r3, [r7, #8]
 800f000:	2b07      	cmp	r3, #7
 800f002:	d102      	bne.n	800f00a <LTDC_LayerPixelFormat+0x46>
          (tempreg == LTDC_Pixelformat_AL88))  
  {
    temp = 2;  
 800f004:	2302      	movs	r3, #2
 800f006:	73fb      	strb	r3, [r7, #15]
 800f008:	e001      	b.n	800f00e <LTDC_LayerPixelFormat+0x4a>
  }
  else
  {
    temp = 1;
 800f00a:	2301      	movs	r3, #1
 800f00c:	73fb      	strb	r3, [r7, #15]
  }
  
  tempreg = (LTDC_Layerx->CFBLR >> 16);
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f012:	0c1b      	lsrs	r3, r3, #16
 800f014:	60bb      	str	r3, [r7, #8]
  tempreg = (tempreg / temp); 
 800f016:	7bfb      	ldrb	r3, [r7, #15]
 800f018:	68ba      	ldr	r2, [r7, #8]
 800f01a:	fbb2 f3f3 	udiv	r3, r2, r3
 800f01e:	60bb      	str	r3, [r7, #8]
  
  if (PixelFormat == LTDC_Pixelformat_ARGB8888)
 800f020:	683b      	ldr	r3, [r7, #0]
 800f022:	2b00      	cmp	r3, #0
 800f024:	d102      	bne.n	800f02c <LTDC_LayerPixelFormat+0x68>
  {
    temp = 4;
 800f026:	2304      	movs	r3, #4
 800f028:	73fb      	strb	r3, [r7, #15]
 800f02a:	e016      	b.n	800f05a <LTDC_LayerPixelFormat+0x96>
  }
  else if (PixelFormat == LTDC_Pixelformat_RGB888)
 800f02c:	683b      	ldr	r3, [r7, #0]
 800f02e:	2b01      	cmp	r3, #1
 800f030:	d102      	bne.n	800f038 <LTDC_LayerPixelFormat+0x74>
  {
    temp = 3;
 800f032:	2303      	movs	r3, #3
 800f034:	73fb      	strb	r3, [r7, #15]
 800f036:	e010      	b.n	800f05a <LTDC_LayerPixelFormat+0x96>
  }
  else if ((PixelFormat == LTDC_Pixelformat_ARGB4444) || \
 800f038:	683b      	ldr	r3, [r7, #0]
 800f03a:	2b04      	cmp	r3, #4
 800f03c:	d008      	beq.n	800f050 <LTDC_LayerPixelFormat+0x8c>
 800f03e:	683b      	ldr	r3, [r7, #0]
 800f040:	2b02      	cmp	r3, #2
 800f042:	d005      	beq.n	800f050 <LTDC_LayerPixelFormat+0x8c>
          (PixelFormat == LTDC_Pixelformat_RGB565)    || \
 800f044:	683b      	ldr	r3, [r7, #0]
 800f046:	2b03      	cmp	r3, #3
 800f048:	d002      	beq.n	800f050 <LTDC_LayerPixelFormat+0x8c>
          (PixelFormat == LTDC_Pixelformat_ARGB1555)  || \
 800f04a:	683b      	ldr	r3, [r7, #0]
 800f04c:	2b07      	cmp	r3, #7
 800f04e:	d102      	bne.n	800f056 <LTDC_LayerPixelFormat+0x92>
          (PixelFormat == LTDC_Pixelformat_AL88))
  {
    temp = 2;  
 800f050:	2302      	movs	r3, #2
 800f052:	73fb      	strb	r3, [r7, #15]
 800f054:	e001      	b.n	800f05a <LTDC_LayerPixelFormat+0x96>
  }
  else
  {
    temp = 1;
 800f056:	2301      	movs	r3, #1
 800f058:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Reconfigures the color frame buffer pitch in byte */
  LTDC_Layerx->CFBLR  = ((tempreg * temp) << 16) | ((tempreg * temp) + 3);  
 800f05a:	7bfb      	ldrb	r3, [r7, #15]
 800f05c:	68ba      	ldr	r2, [r7, #8]
 800f05e:	fb02 f303 	mul.w	r3, r2, r3
 800f062:	041a      	lsls	r2, r3, #16
 800f064:	7bfb      	ldrb	r3, [r7, #15]
 800f066:	68b9      	ldr	r1, [r7, #8]
 800f068:	fb01 f303 	mul.w	r3, r1, r3
 800f06c:	3303      	adds	r3, #3
 800f06e:	431a      	orrs	r2, r3
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reconfigures the color frame buffer start address */
  LTDC_Layerx->PFCR = PixelFormat;
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	683a      	ldr	r2, [r7, #0]
 800f078:	611a      	str	r2, [r3, #16]
    
}
 800f07a:	3714      	adds	r7, #20
 800f07c:	46bd      	mov	sp, r7
 800f07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f082:	4770      	bx	lr

0800f084 <LTDC_ITConfig>:
  * @param NewState: new state of the specified LTDC interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void LTDC_ITConfig(uint32_t LTDC_IT, FunctionalState NewState)
{
 800f084:	b480      	push	{r7}
 800f086:	b083      	sub	sp, #12
 800f088:	af00      	add	r7, sp, #0
 800f08a:	6078      	str	r0, [r7, #4]
 800f08c:	460b      	mov	r3, r1
 800f08e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_LTDC_IT(LTDC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800f090:	78fb      	ldrb	r3, [r7, #3]
 800f092:	2b00      	cmp	r3, #0
 800f094:	d006      	beq.n	800f0a4 <LTDC_ITConfig+0x20>
  {
    LTDC->IER |= LTDC_IT;
 800f096:	4b09      	ldr	r3, [pc, #36]	; (800f0bc <LTDC_ITConfig+0x38>)
 800f098:	4a08      	ldr	r2, [pc, #32]	; (800f0bc <LTDC_ITConfig+0x38>)
 800f09a:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800f09c:	687a      	ldr	r2, [r7, #4]
 800f09e:	430a      	orrs	r2, r1
 800f0a0:	635a      	str	r2, [r3, #52]	; 0x34
 800f0a2:	e006      	b.n	800f0b2 <LTDC_ITConfig+0x2e>
  }
  else
  {
    LTDC->IER &= (uint32_t)~LTDC_IT;
 800f0a4:	4b05      	ldr	r3, [pc, #20]	; (800f0bc <LTDC_ITConfig+0x38>)
 800f0a6:	4a05      	ldr	r2, [pc, #20]	; (800f0bc <LTDC_ITConfig+0x38>)
 800f0a8:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800f0aa:	687a      	ldr	r2, [r7, #4]
 800f0ac:	43d2      	mvns	r2, r2
 800f0ae:	400a      	ands	r2, r1
 800f0b0:	635a      	str	r2, [r3, #52]	; 0x34
  }
}
 800f0b2:	370c      	adds	r7, #12
 800f0b4:	46bd      	mov	sp, r7
 800f0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ba:	4770      	bx	lr
 800f0bc:	40016800 	.word	0x40016800

0800f0c0 <LTDC_GetFlagStatus>:
  *     @arg LTDC_FLAG_TERR: Transfer Error Interrupt flag.
  *     @arg LTDC_FLAG_RR:   Register Reload interrupt flag.
  * @retval The new state of LTDC_FLAG (SET or RESET).
  */
FlagStatus LTDC_GetFlagStatus(uint32_t LTDC_FLAG)
{
 800f0c0:	b480      	push	{r7}
 800f0c2:	b085      	sub	sp, #20
 800f0c4:	af00      	add	r7, sp, #0
 800f0c6:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 800f0c8:	2300      	movs	r3, #0
 800f0ca:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_LTDC_FLAG(LTDC_FLAG));

  if ((LTDC->ISR & LTDC_FLAG) != (uint32_t)RESET)
 800f0cc:	4b08      	ldr	r3, [pc, #32]	; (800f0f0 <LTDC_GetFlagStatus+0x30>)
 800f0ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	4013      	ands	r3, r2
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d002      	beq.n	800f0de <LTDC_GetFlagStatus+0x1e>
  {
    bitstatus = SET;
 800f0d8:	2301      	movs	r3, #1
 800f0da:	73fb      	strb	r3, [r7, #15]
 800f0dc:	e001      	b.n	800f0e2 <LTDC_GetFlagStatus+0x22>
  }
  else
  {
    bitstatus = RESET;
 800f0de:	2300      	movs	r3, #0
 800f0e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800f0e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800f0e4:	4618      	mov	r0, r3
 800f0e6:	3714      	adds	r7, #20
 800f0e8:	46bd      	mov	sp, r7
 800f0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ee:	4770      	bx	lr
 800f0f0:	40016800 	.word	0x40016800

0800f0f4 <LTDC_ClearFlag>:
  *     @arg LTDC_FLAG_TERR: Transfer Error Interrupt flag.
  *     @arg LTDC_FLAG_RR:   Register Reload interrupt flag.  
  * @retval None
  */
void LTDC_ClearFlag(uint32_t LTDC_FLAG)
{
 800f0f4:	b480      	push	{r7}
 800f0f6:	b083      	sub	sp, #12
 800f0f8:	af00      	add	r7, sp, #0
 800f0fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_FLAG(LTDC_FLAG));

  /* Clear the corresponding LTDC flag */
  LTDC->ICR = (uint32_t)LTDC_FLAG;
 800f0fc:	4b03      	ldr	r3, [pc, #12]	; (800f10c <LTDC_ClearFlag+0x18>)
 800f0fe:	687a      	ldr	r2, [r7, #4]
 800f100:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800f102:	370c      	adds	r7, #12
 800f104:	46bd      	mov	sp, r7
 800f106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f10a:	4770      	bx	lr
 800f10c:	40016800 	.word	0x40016800

0800f110 <LTDC_GetITStatus>:
  *     @arg LTDC_IT_TERR: Transfer Error Interrupt Enable.
  *     @arg LTDC_IT_RR:   Register Reload interrupt Enable.
  * @retval The new state of the LTDC_IT (SET or RESET).
  */
ITStatus LTDC_GetITStatus(uint32_t LTDC_IT)
{
 800f110:	b480      	push	{r7}
 800f112:	b085      	sub	sp, #20
 800f114:	af00      	add	r7, sp, #0
 800f116:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 800f118:	2300      	movs	r3, #0
 800f11a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_LTDC_IT(LTDC_IT));

  if ((LTDC->ISR & LTDC_IT) != (uint32_t)RESET)
 800f11c:	4b0f      	ldr	r3, [pc, #60]	; (800f15c <LTDC_GetITStatus+0x4c>)
 800f11e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	4013      	ands	r3, r2
 800f124:	2b00      	cmp	r3, #0
 800f126:	d002      	beq.n	800f12e <LTDC_GetITStatus+0x1e>
  {
    bitstatus = SET;
 800f128:	2301      	movs	r3, #1
 800f12a:	73fb      	strb	r3, [r7, #15]
 800f12c:	e001      	b.n	800f132 <LTDC_GetITStatus+0x22>
  }
  else
  {
    bitstatus = RESET;
 800f12e:	2300      	movs	r3, #0
 800f130:	73fb      	strb	r3, [r7, #15]
  }

  if (((LTDC->IER & LTDC_IT) != (uint32_t)RESET) && (bitstatus != (uint32_t)RESET))
 800f132:	4b0a      	ldr	r3, [pc, #40]	; (800f15c <LTDC_GetITStatus+0x4c>)
 800f134:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	4013      	ands	r3, r2
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d005      	beq.n	800f14a <LTDC_GetITStatus+0x3a>
 800f13e:	7bfb      	ldrb	r3, [r7, #15]
 800f140:	2b00      	cmp	r3, #0
 800f142:	d002      	beq.n	800f14a <LTDC_GetITStatus+0x3a>
  {
    bitstatus = SET;
 800f144:	2301      	movs	r3, #1
 800f146:	73fb      	strb	r3, [r7, #15]
 800f148:	e001      	b.n	800f14e <LTDC_GetITStatus+0x3e>
  }
  else
  {
    bitstatus = RESET;
 800f14a:	2300      	movs	r3, #0
 800f14c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800f14e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f150:	4618      	mov	r0, r3
 800f152:	3714      	adds	r7, #20
 800f154:	46bd      	mov	sp, r7
 800f156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f15a:	4770      	bx	lr
 800f15c:	40016800 	.word	0x40016800

0800f160 <LTDC_ClearITPendingBit>:
  *     @arg LTDC_IT_TERRIE: Transfer Error Interrupt.
  *     @arg LTDC_IT_RRIE:   Register Reload interrupt.
  * @retval None
  */
void LTDC_ClearITPendingBit(uint32_t LTDC_IT)
{
 800f160:	b480      	push	{r7}
 800f162:	b083      	sub	sp, #12
 800f164:	af00      	add	r7, sp, #0
 800f166:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_IT(LTDC_IT));

  /* Clear the corresponding LTDC Interrupt */
  LTDC->ICR = (uint32_t)LTDC_IT;
 800f168:	4b03      	ldr	r3, [pc, #12]	; (800f178 <LTDC_ClearITPendingBit+0x18>)
 800f16a:	687a      	ldr	r2, [r7, #4]
 800f16c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800f16e:	370c      	adds	r7, #12
 800f170:	46bd      	mov	sp, r7
 800f172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f176:	4770      	bx	lr
 800f178:	40016800 	.word	0x40016800

0800f17c <PWR_DeInit>:
  * @brief  Deinitializes the PWR peripheral registers to their default reset values.     
  * @param  None
  * @retval None
  */
void PWR_DeInit(void)
{
 800f17c:	b580      	push	{r7, lr}
 800f17e:	af00      	add	r7, sp, #0
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, ENABLE);
 800f180:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800f184:	2101      	movs	r1, #1
 800f186:	f000 fe3f 	bl	800fe08 <RCC_APB1PeriphResetCmd>
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, DISABLE);
 800f18a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800f18e:	2100      	movs	r1, #0
 800f190:	f000 fe3a 	bl	800fe08 <RCC_APB1PeriphResetCmd>
}
 800f194:	bd80      	pop	{r7, pc}
 800f196:	bf00      	nop

0800f198 <PWR_BackupAccessCmd>:
  * @param  NewState: new state of the access to the backup domain.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_BackupAccessCmd(FunctionalState NewState)
{
 800f198:	b480      	push	{r7}
 800f19a:	b083      	sub	sp, #12
 800f19c:	af00      	add	r7, sp, #0
 800f19e:	4603      	mov	r3, r0
 800f1a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)NewState;
 800f1a2:	4b04      	ldr	r3, [pc, #16]	; (800f1b4 <PWR_BackupAccessCmd+0x1c>)
 800f1a4:	79fa      	ldrb	r2, [r7, #7]
 800f1a6:	601a      	str	r2, [r3, #0]
}
 800f1a8:	370c      	adds	r7, #12
 800f1aa:	46bd      	mov	sp, r7
 800f1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1b0:	4770      	bx	lr
 800f1b2:	bf00      	nop
 800f1b4:	420e0020 	.word	0x420e0020

0800f1b8 <PWR_PVDLevelConfig>:
  *         more details about the voltage threshold corresponding to each 
  *         detection level.
  * @retval None
  */
void PWR_PVDLevelConfig(uint32_t PWR_PVDLevel)
{
 800f1b8:	b480      	push	{r7}
 800f1ba:	b085      	sub	sp, #20
 800f1bc:	af00      	add	r7, sp, #0
 800f1be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800f1c0:	2300      	movs	r3, #0
 800f1c2:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(PWR_PVDLevel));
  
  tmpreg = PWR->CR;
 800f1c4:	4b09      	ldr	r3, [pc, #36]	; (800f1ec <PWR_PVDLevelConfig+0x34>)
 800f1c6:	681b      	ldr	r3, [r3, #0]
 800f1c8:	60fb      	str	r3, [r7, #12]
  
  /* Clear PLS[7:5] bits */
  tmpreg &= CR_PLS_MASK;
 800f1ca:	68fb      	ldr	r3, [r7, #12]
 800f1cc:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 800f1d0:	60fb      	str	r3, [r7, #12]
  
  /* Set PLS[7:5] bits according to PWR_PVDLevel value */
  tmpreg |= PWR_PVDLevel;
 800f1d2:	68fa      	ldr	r2, [r7, #12]
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	4313      	orrs	r3, r2
 800f1d8:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  PWR->CR = tmpreg;
 800f1da:	4b04      	ldr	r3, [pc, #16]	; (800f1ec <PWR_PVDLevelConfig+0x34>)
 800f1dc:	68fa      	ldr	r2, [r7, #12]
 800f1de:	601a      	str	r2, [r3, #0]
}
 800f1e0:	3714      	adds	r7, #20
 800f1e2:	46bd      	mov	sp, r7
 800f1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1e8:	4770      	bx	lr
 800f1ea:	bf00      	nop
 800f1ec:	40007000 	.word	0x40007000

0800f1f0 <PWR_PVDCmd>:
  * @param  NewState: new state of the PVD.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_PVDCmd(FunctionalState NewState)
{
 800f1f0:	b480      	push	{r7}
 800f1f2:	b083      	sub	sp, #12
 800f1f4:	af00      	add	r7, sp, #0
 800f1f6:	4603      	mov	r3, r0
 800f1f8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)NewState;
 800f1fa:	4b04      	ldr	r3, [pc, #16]	; (800f20c <PWR_PVDCmd+0x1c>)
 800f1fc:	79fa      	ldrb	r2, [r7, #7]
 800f1fe:	601a      	str	r2, [r3, #0]
}
 800f200:	370c      	adds	r7, #12
 800f202:	46bd      	mov	sp, r7
 800f204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f208:	4770      	bx	lr
 800f20a:	bf00      	nop
 800f20c:	420e0010 	.word	0x420e0010

0800f210 <PWR_WakeUpPinCmd>:
  * @param  NewState: new state of the WakeUp Pin functionality.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_WakeUpPinCmd(FunctionalState NewState)
{
 800f210:	b480      	push	{r7}
 800f212:	b083      	sub	sp, #12
 800f214:	af00      	add	r7, sp, #0
 800f216:	4603      	mov	r3, r0
 800f218:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_EWUP_BB = (uint32_t)NewState;
 800f21a:	4b04      	ldr	r3, [pc, #16]	; (800f22c <PWR_WakeUpPinCmd+0x1c>)
 800f21c:	79fa      	ldrb	r2, [r7, #7]
 800f21e:	601a      	str	r2, [r3, #0]
}
 800f220:	370c      	adds	r7, #12
 800f222:	46bd      	mov	sp, r7
 800f224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f228:	4770      	bx	lr
 800f22a:	bf00      	nop
 800f22c:	420e00a0 	.word	0x420e00a0

0800f230 <PWR_BackupRegulatorCmd>:
  * @param  NewState: new state of the Backup Regulator.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_BackupRegulatorCmd(FunctionalState NewState)
{
 800f230:	b480      	push	{r7}
 800f232:	b083      	sub	sp, #12
 800f234:	af00      	add	r7, sp, #0
 800f236:	4603      	mov	r3, r0
 800f238:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_BRE_BB = (uint32_t)NewState;
 800f23a:	4b04      	ldr	r3, [pc, #16]	; (800f24c <PWR_BackupRegulatorCmd+0x1c>)
 800f23c:	79fa      	ldrb	r2, [r7, #7]
 800f23e:	601a      	str	r2, [r3, #0]
}
 800f240:	370c      	adds	r7, #12
 800f242:	46bd      	mov	sp, r7
 800f244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f248:	4770      	bx	lr
 800f24a:	bf00      	nop
 800f24c:	420e00a4 	.word	0x420e00a4

0800f250 <PWR_MainRegulatorModeConfig>:
  *            @arg PWR_Regulator_Voltage_Scale3: Regulator voltage output Scale 3 mode, 
  *                                                System frequency up to 120 MHz (only for STM32F42xxx/43xxx devices)
  * @retval None
  */
void PWR_MainRegulatorModeConfig(uint32_t PWR_Regulator_Voltage)
{
 800f250:	b480      	push	{r7}
 800f252:	b085      	sub	sp, #20
 800f254:	af00      	add	r7, sp, #0
 800f256:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800f258:	2300      	movs	r3, #0
 800f25a:	60fb      	str	r3, [r7, #12]
	
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR_VOLTAGE(PWR_Regulator_Voltage));

  tmpreg = PWR->CR;
 800f25c:	4b09      	ldr	r3, [pc, #36]	; (800f284 <PWR_MainRegulatorModeConfig+0x34>)
 800f25e:	681b      	ldr	r3, [r3, #0]
 800f260:	60fb      	str	r3, [r7, #12]
  
  /* Clear VOS[15:14] bits */
  tmpreg &= CR_VOS_MASK;
 800f262:	68fb      	ldr	r3, [r7, #12]
 800f264:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800f268:	60fb      	str	r3, [r7, #12]
  
  /* Set VOS[15:14] bits according to PWR_Regulator_Voltage value */
  tmpreg |= PWR_Regulator_Voltage;
 800f26a:	68fa      	ldr	r2, [r7, #12]
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	4313      	orrs	r3, r2
 800f270:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  PWR->CR = tmpreg;
 800f272:	4b04      	ldr	r3, [pc, #16]	; (800f284 <PWR_MainRegulatorModeConfig+0x34>)
 800f274:	68fa      	ldr	r2, [r7, #12]
 800f276:	601a      	str	r2, [r3, #0]
}
 800f278:	3714      	adds	r7, #20
 800f27a:	46bd      	mov	sp, r7
 800f27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f280:	4770      	bx	lr
 800f282:	bf00      	nop
 800f284:	40007000 	.word	0x40007000

0800f288 <PWR_OverDriveCmd>:
  * @param  NewState: new state of the Over Drive mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_OverDriveCmd(FunctionalState NewState)
{
 800f288:	b480      	push	{r7}
 800f28a:	b083      	sub	sp, #12
 800f28c:	af00      	add	r7, sp, #0
 800f28e:	4603      	mov	r3, r0
 800f290:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  /* Set/Reset the ODEN bit to enable/disable the Over Drive mode */
  *(__IO uint32_t *) CR_ODEN_BB = (uint32_t)NewState;
 800f292:	4b04      	ldr	r3, [pc, #16]	; (800f2a4 <PWR_OverDriveCmd+0x1c>)
 800f294:	79fa      	ldrb	r2, [r7, #7]
 800f296:	601a      	str	r2, [r3, #0]
}
 800f298:	370c      	adds	r7, #12
 800f29a:	46bd      	mov	sp, r7
 800f29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2a0:	4770      	bx	lr
 800f2a2:	bf00      	nop
 800f2a4:	420e0040 	.word	0x420e0040

0800f2a8 <PWR_OverDriveSWCmd>:
  * @param  NewState: new state of the Over Drive switching mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_OverDriveSWCmd(FunctionalState NewState)
{
 800f2a8:	b480      	push	{r7}
 800f2aa:	b083      	sub	sp, #12
 800f2ac:	af00      	add	r7, sp, #0
 800f2ae:	4603      	mov	r3, r0
 800f2b0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Set/Reset the ODSWEN bit to enable/disable the Over Drive switching mode */
  *(__IO uint32_t *) CR_ODSWEN_BB = (uint32_t)NewState;
 800f2b2:	4b04      	ldr	r3, [pc, #16]	; (800f2c4 <PWR_OverDriveSWCmd+0x1c>)
 800f2b4:	79fa      	ldrb	r2, [r7, #7]
 800f2b6:	601a      	str	r2, [r3, #0]
}
 800f2b8:	370c      	adds	r7, #12
 800f2ba:	46bd      	mov	sp, r7
 800f2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2c0:	4770      	bx	lr
 800f2c2:	bf00      	nop
 800f2c4:	420e0044 	.word	0x420e0044

0800f2c8 <PWR_UnderDriveCmd>:
  * @param  NewState: new state of the Under Drive mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_UnderDriveCmd(FunctionalState NewState)
{
 800f2c8:	b480      	push	{r7}
 800f2ca:	b083      	sub	sp, #12
 800f2cc:	af00      	add	r7, sp, #0
 800f2ce:	4603      	mov	r3, r0
 800f2d0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800f2d2:	79fb      	ldrb	r3, [r7, #7]
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	d006      	beq.n	800f2e6 <PWR_UnderDriveCmd+0x1e>
  {
    /* Set the UDEN[1:0] bits to enable the Under Drive mode */
    PWR->CR |= (uint32_t)PWR_CR_UDEN;
 800f2d8:	4b08      	ldr	r3, [pc, #32]	; (800f2fc <PWR_UnderDriveCmd+0x34>)
 800f2da:	4a08      	ldr	r2, [pc, #32]	; (800f2fc <PWR_UnderDriveCmd+0x34>)
 800f2dc:	6812      	ldr	r2, [r2, #0]
 800f2de:	f442 2240 	orr.w	r2, r2, #786432	; 0xc0000
 800f2e2:	601a      	str	r2, [r3, #0]
 800f2e4:	e005      	b.n	800f2f2 <PWR_UnderDriveCmd+0x2a>
  }
  else
  {
    /* Reset the UDEN[1:0] bits to disable the Under Drive mode */
    PWR->CR &= (uint32_t)(~PWR_CR_UDEN);
 800f2e6:	4b05      	ldr	r3, [pc, #20]	; (800f2fc <PWR_UnderDriveCmd+0x34>)
 800f2e8:	4a04      	ldr	r2, [pc, #16]	; (800f2fc <PWR_UnderDriveCmd+0x34>)
 800f2ea:	6812      	ldr	r2, [r2, #0]
 800f2ec:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 800f2f0:	601a      	str	r2, [r3, #0]
  }
}
 800f2f2:	370c      	adds	r7, #12
 800f2f4:	46bd      	mov	sp, r7
 800f2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2fa:	4770      	bx	lr
 800f2fc:	40007000 	.word	0x40007000

0800f300 <PWR_FlashPowerDownCmd>:
  * @param  NewState: new state of the Flash power mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_FlashPowerDownCmd(FunctionalState NewState)
{
 800f300:	b480      	push	{r7}
 800f302:	b083      	sub	sp, #12
 800f304:	af00      	add	r7, sp, #0
 800f306:	4603      	mov	r3, r0
 800f308:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_FPDS_BB = (uint32_t)NewState;
 800f30a:	4b04      	ldr	r3, [pc, #16]	; (800f31c <PWR_FlashPowerDownCmd+0x1c>)
 800f30c:	79fa      	ldrb	r2, [r7, #7]
 800f30e:	601a      	str	r2, [r3, #0]
}
 800f310:	370c      	adds	r7, #12
 800f312:	46bd      	mov	sp, r7
 800f314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f318:	4770      	bx	lr
 800f31a:	bf00      	nop
 800f31c:	420e0024 	.word	0x420e0024

0800f320 <PWR_EnterSTOPMode>:
  *            @arg PWR_STOPEntry_WFI: enter STOP mode with WFI instruction
  *            @arg PWR_STOPEntry_WFE: enter STOP mode with WFE instruction
  * @retval None
  */
void PWR_EnterSTOPMode(uint32_t PWR_Regulator, uint8_t PWR_STOPEntry)
{
 800f320:	b480      	push	{r7}
 800f322:	b085      	sub	sp, #20
 800f324:	af00      	add	r7, sp, #0
 800f326:	6078      	str	r0, [r7, #4]
 800f328:	460b      	mov	r3, r1
 800f32a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg = 0;
 800f32c:	2300      	movs	r3, #0
 800f32e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(PWR_Regulator));
  assert_param(IS_PWR_STOP_ENTRY(PWR_STOPEntry));
  
  /* Select the regulator state in STOP mode ---------------------------------*/
  tmpreg = PWR->CR;
 800f330:	4b13      	ldr	r3, [pc, #76]	; (800f380 <PWR_EnterSTOPMode+0x60>)
 800f332:	681b      	ldr	r3, [r3, #0]
 800f334:	60fb      	str	r3, [r7, #12]
  /* Clear PDDS and LPDS bits */
  tmpreg &= CR_DS_MASK;
 800f336:	68fb      	ldr	r3, [r7, #12]
 800f338:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800f33c:	f023 0303 	bic.w	r3, r3, #3
 800f340:	60fb      	str	r3, [r7, #12]
  
  /* Set LPDS, MRLVDS and LPLVDS bits according to PWR_Regulator value */
  tmpreg |= PWR_Regulator;
 800f342:	68fa      	ldr	r2, [r7, #12]
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	4313      	orrs	r3, r2
 800f348:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  PWR->CR = tmpreg;
 800f34a:	4b0d      	ldr	r3, [pc, #52]	; (800f380 <PWR_EnterSTOPMode+0x60>)
 800f34c:	68fa      	ldr	r2, [r7, #12]
 800f34e:	601a      	str	r2, [r3, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 800f350:	4b0c      	ldr	r3, [pc, #48]	; (800f384 <PWR_EnterSTOPMode+0x64>)
 800f352:	4a0c      	ldr	r2, [pc, #48]	; (800f384 <PWR_EnterSTOPMode+0x64>)
 800f354:	6912      	ldr	r2, [r2, #16]
 800f356:	f042 0204 	orr.w	r2, r2, #4
 800f35a:	611a      	str	r2, [r3, #16]
  
  /* Select STOP mode entry --------------------------------------------------*/
  if(PWR_STOPEntry == PWR_STOPEntry_WFI)
 800f35c:	78fb      	ldrb	r3, [r7, #3]
 800f35e:	2b01      	cmp	r3, #1
 800f360:	d101      	bne.n	800f366 <PWR_EnterSTOPMode+0x46>
    Wait For Interrupt is a hint instruction that suspends execution
    until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
 800f362:	bf30      	wfi
 800f364:	e000      	b.n	800f368 <PWR_EnterSTOPMode+0x48>
    Wait For Event is a hint instruction that permits the processor to enter
    a low-power state until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __WFE(void)
{
  __ASM volatile ("wfe");
 800f366:	bf20      	wfe
  {
    /* Request Wait For Event */
    __WFE();
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);  
 800f368:	4b06      	ldr	r3, [pc, #24]	; (800f384 <PWR_EnterSTOPMode+0x64>)
 800f36a:	4a06      	ldr	r2, [pc, #24]	; (800f384 <PWR_EnterSTOPMode+0x64>)
 800f36c:	6912      	ldr	r2, [r2, #16]
 800f36e:	f022 0204 	bic.w	r2, r2, #4
 800f372:	611a      	str	r2, [r3, #16]
}
 800f374:	3714      	adds	r7, #20
 800f376:	46bd      	mov	sp, r7
 800f378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f37c:	4770      	bx	lr
 800f37e:	bf00      	nop
 800f380:	40007000 	.word	0x40007000
 800f384:	e000ed00 	.word	0xe000ed00

0800f388 <PWR_EnterUnderDriveSTOPMode>:
  *            @arg PWR_STOPEntry_WFI: enter STOP mode with WFI instruction
  *            @arg PWR_STOPEntry_WFE: enter STOP mode with WFE instruction
  * @retval None
  */
void PWR_EnterUnderDriveSTOPMode(uint32_t PWR_Regulator, uint8_t PWR_STOPEntry)
{
 800f388:	b480      	push	{r7}
 800f38a:	b085      	sub	sp, #20
 800f38c:	af00      	add	r7, sp, #0
 800f38e:	6078      	str	r0, [r7, #4]
 800f390:	460b      	mov	r3, r1
 800f392:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg = 0;
 800f394:	2300      	movs	r3, #0
 800f396:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR_UNDERDRIVE(PWR_Regulator));
  assert_param(IS_PWR_STOP_ENTRY(PWR_STOPEntry));
  
  /* Select the regulator state in STOP mode ---------------------------------*/
  tmpreg = PWR->CR;
 800f398:	4b13      	ldr	r3, [pc, #76]	; (800f3e8 <PWR_EnterUnderDriveSTOPMode+0x60>)
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	60fb      	str	r3, [r7, #12]
  /* Clear PDDS and LPDS bits */
  tmpreg &= CR_DS_MASK;
 800f39e:	68fb      	ldr	r3, [r7, #12]
 800f3a0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800f3a4:	f023 0303 	bic.w	r3, r3, #3
 800f3a8:	60fb      	str	r3, [r7, #12]
  
  /* Set LPDS, MRLUDS and LPLUDS bits according to PWR_Regulator value */
  tmpreg |= PWR_Regulator;
 800f3aa:	68fa      	ldr	r2, [r7, #12]
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	4313      	orrs	r3, r2
 800f3b0:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  PWR->CR = tmpreg;
 800f3b2:	4b0d      	ldr	r3, [pc, #52]	; (800f3e8 <PWR_EnterUnderDriveSTOPMode+0x60>)
 800f3b4:	68fa      	ldr	r2, [r7, #12]
 800f3b6:	601a      	str	r2, [r3, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 800f3b8:	4b0c      	ldr	r3, [pc, #48]	; (800f3ec <PWR_EnterUnderDriveSTOPMode+0x64>)
 800f3ba:	4a0c      	ldr	r2, [pc, #48]	; (800f3ec <PWR_EnterUnderDriveSTOPMode+0x64>)
 800f3bc:	6912      	ldr	r2, [r2, #16]
 800f3be:	f042 0204 	orr.w	r2, r2, #4
 800f3c2:	611a      	str	r2, [r3, #16]
  
  /* Select STOP mode entry --------------------------------------------------*/
  if(PWR_STOPEntry == PWR_STOPEntry_WFI)
 800f3c4:	78fb      	ldrb	r3, [r7, #3]
 800f3c6:	2b01      	cmp	r3, #1
 800f3c8:	d101      	bne.n	800f3ce <PWR_EnterUnderDriveSTOPMode+0x46>
    Wait For Interrupt is a hint instruction that suspends execution
    until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
 800f3ca:	bf30      	wfi
 800f3cc:	e000      	b.n	800f3d0 <PWR_EnterUnderDriveSTOPMode+0x48>
    Wait For Event is a hint instruction that permits the processor to enter
    a low-power state until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __WFE(void)
{
  __ASM volatile ("wfe");
 800f3ce:	bf20      	wfe
  {
    /* Request Wait For Event */
    __WFE();
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);  
 800f3d0:	4b06      	ldr	r3, [pc, #24]	; (800f3ec <PWR_EnterUnderDriveSTOPMode+0x64>)
 800f3d2:	4a06      	ldr	r2, [pc, #24]	; (800f3ec <PWR_EnterUnderDriveSTOPMode+0x64>)
 800f3d4:	6912      	ldr	r2, [r2, #16]
 800f3d6:	f022 0204 	bic.w	r2, r2, #4
 800f3da:	611a      	str	r2, [r3, #16]
}
 800f3dc:	3714      	adds	r7, #20
 800f3de:	46bd      	mov	sp, r7
 800f3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3e4:	4770      	bx	lr
 800f3e6:	bf00      	nop
 800f3e8:	40007000 	.word	0x40007000
 800f3ec:	e000ed00 	.word	0xe000ed00

0800f3f0 <PWR_EnterSTANDBYMode>:
  *          - WKUP pin 1 (PA0) if enabled.       
  * @param  None
  * @retval None
  */
void PWR_EnterSTANDBYMode(void)
{
 800f3f0:	b480      	push	{r7}
 800f3f2:	af00      	add	r7, sp, #0
  /* Clear Wakeup flag */
  PWR->CR |= PWR_CR_CWUF;
 800f3f4:	4b0b      	ldr	r3, [pc, #44]	; (800f424 <PWR_EnterSTANDBYMode+0x34>)
 800f3f6:	4a0b      	ldr	r2, [pc, #44]	; (800f424 <PWR_EnterSTANDBYMode+0x34>)
 800f3f8:	6812      	ldr	r2, [r2, #0]
 800f3fa:	f042 0204 	orr.w	r2, r2, #4
 800f3fe:	601a      	str	r2, [r3, #0]
  
  /* Select STANDBY mode */
  PWR->CR |= PWR_CR_PDDS;
 800f400:	4b08      	ldr	r3, [pc, #32]	; (800f424 <PWR_EnterSTANDBYMode+0x34>)
 800f402:	4a08      	ldr	r2, [pc, #32]	; (800f424 <PWR_EnterSTANDBYMode+0x34>)
 800f404:	6812      	ldr	r2, [r2, #0]
 800f406:	f042 0202 	orr.w	r2, r2, #2
 800f40a:	601a      	str	r2, [r3, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 800f40c:	4b06      	ldr	r3, [pc, #24]	; (800f428 <PWR_EnterSTANDBYMode+0x38>)
 800f40e:	4a06      	ldr	r2, [pc, #24]	; (800f428 <PWR_EnterSTANDBYMode+0x38>)
 800f410:	6912      	ldr	r2, [r2, #16]
 800f412:	f042 0204 	orr.w	r2, r2, #4
 800f416:	611a      	str	r2, [r3, #16]
    Wait For Interrupt is a hint instruction that suspends execution
    until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
 800f418:	bf30      	wfi
#if defined ( __CC_ARM   )
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
}
 800f41a:	46bd      	mov	sp, r7
 800f41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f420:	4770      	bx	lr
 800f422:	bf00      	nop
 800f424:	40007000 	.word	0x40007000
 800f428:	e000ed00 	.word	0xe000ed00

0800f42c <PWR_GetFlagStatus>:
  *            @arg PWR_FLAG_UDRDY: This flag indicates that the Under-drive mode
  *                 is enabled in Stop mode (STM32F42xxx/43xxx devices)
  * @retval The new state of PWR_FLAG (SET or RESET).
  */
FlagStatus PWR_GetFlagStatus(uint32_t PWR_FLAG)
{
 800f42c:	b480      	push	{r7}
 800f42e:	b085      	sub	sp, #20
 800f430:	af00      	add	r7, sp, #0
 800f432:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 800f434:	2300      	movs	r3, #0
 800f436:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_PWR_GET_FLAG(PWR_FLAG));
  
  if ((PWR->CSR & PWR_FLAG) != (uint32_t)RESET)
 800f438:	4b08      	ldr	r3, [pc, #32]	; (800f45c <PWR_GetFlagStatus+0x30>)
 800f43a:	685a      	ldr	r2, [r3, #4]
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	4013      	ands	r3, r2
 800f440:	2b00      	cmp	r3, #0
 800f442:	d002      	beq.n	800f44a <PWR_GetFlagStatus+0x1e>
  {
    bitstatus = SET;
 800f444:	2301      	movs	r3, #1
 800f446:	73fb      	strb	r3, [r7, #15]
 800f448:	e001      	b.n	800f44e <PWR_GetFlagStatus+0x22>
  }
  else
  {
    bitstatus = RESET;
 800f44a:	2300      	movs	r3, #0
 800f44c:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the flag status */
  return bitstatus;
 800f44e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f450:	4618      	mov	r0, r3
 800f452:	3714      	adds	r7, #20
 800f454:	46bd      	mov	sp, r7
 800f456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f45a:	4770      	bx	lr
 800f45c:	40007000 	.word	0x40007000

0800f460 <PWR_ClearFlag>:
  *            @arg PWR_FLAG_SB: StandBy flag
  *            @arg PWR_FLAG_UDRDY: Under-drive ready flag (STM32F42xxx/43xxx devices)
  * @retval None
  */
void PWR_ClearFlag(uint32_t PWR_FLAG)
{
 800f460:	b480      	push	{r7}
 800f462:	b083      	sub	sp, #12
 800f464:	af00      	add	r7, sp, #0
 800f466:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_CLEAR_FLAG(PWR_FLAG));
  
#if defined (STM32F427_437xx) || defined (STM32F429_439xx)
  if (PWR_FLAG != PWR_FLAG_UDRDY)
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800f46e:	d007      	beq.n	800f480 <PWR_ClearFlag+0x20>
  {
    PWR->CR |=  PWR_FLAG << 2;
 800f470:	4b09      	ldr	r3, [pc, #36]	; (800f498 <PWR_ClearFlag+0x38>)
 800f472:	4a09      	ldr	r2, [pc, #36]	; (800f498 <PWR_ClearFlag+0x38>)
 800f474:	6811      	ldr	r1, [r2, #0]
 800f476:	687a      	ldr	r2, [r7, #4]
 800f478:	0092      	lsls	r2, r2, #2
 800f47a:	430a      	orrs	r2, r1
 800f47c:	601a      	str	r2, [r3, #0]
 800f47e:	e005      	b.n	800f48c <PWR_ClearFlag+0x2c>
  }
  else
  {
    PWR->CSR |= PWR_FLAG_UDRDY;
 800f480:	4b05      	ldr	r3, [pc, #20]	; (800f498 <PWR_ClearFlag+0x38>)
 800f482:	4a05      	ldr	r2, [pc, #20]	; (800f498 <PWR_ClearFlag+0x38>)
 800f484:	6852      	ldr	r2, [r2, #4]
 800f486:	f442 2240 	orr.w	r2, r2, #786432	; 0xc0000
 800f48a:	605a      	str	r2, [r3, #4]
#endif /* STM32F427_437xx ||  STM32F429_439xx */

#if defined (STM32F40_41xxx) || defined (STM32F401xx) 
  PWR->CR |=  PWR_FLAG << 2;
#endif /* STM32F40_41xxx */
}
 800f48c:	370c      	adds	r7, #12
 800f48e:	46bd      	mov	sp, r7
 800f490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f494:	4770      	bx	lr
 800f496:	bf00      	nop
 800f498:	40007000 	.word	0x40007000

0800f49c <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 800f49c:	b480      	push	{r7}
 800f49e:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800f4a0:	4b16      	ldr	r3, [pc, #88]	; (800f4fc <RCC_DeInit+0x60>)
 800f4a2:	4a16      	ldr	r2, [pc, #88]	; (800f4fc <RCC_DeInit+0x60>)
 800f4a4:	6812      	ldr	r2, [r2, #0]
 800f4a6:	f042 0201 	orr.w	r2, r2, #1
 800f4aa:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800f4ac:	4b13      	ldr	r3, [pc, #76]	; (800f4fc <RCC_DeInit+0x60>)
 800f4ae:	2200      	movs	r2, #0
 800f4b0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON, PLLON, PLLI2S and PLLSAI(STM32F42/43xxx devices) bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 800f4b2:	4a12      	ldr	r2, [pc, #72]	; (800f4fc <RCC_DeInit+0x60>)
 800f4b4:	4b11      	ldr	r3, [pc, #68]	; (800f4fc <RCC_DeInit+0x60>)
 800f4b6:	681b      	ldr	r3, [r3, #0]
 800f4b8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800f4bc:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800f4c0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800f4c2:	4b0e      	ldr	r3, [pc, #56]	; (800f4fc <RCC_DeInit+0x60>)
 800f4c4:	4a0e      	ldr	r2, [pc, #56]	; (800f500 <RCC_DeInit+0x64>)
 800f4c6:	605a      	str	r2, [r3, #4]

  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
 800f4c8:	4b0c      	ldr	r3, [pc, #48]	; (800f4fc <RCC_DeInit+0x60>)
 800f4ca:	4a0e      	ldr	r2, [pc, #56]	; (800f504 <RCC_DeInit+0x68>)
 800f4cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset PLLSAICFGR register, only available for STM32F42/43xxx devices */
  RCC->PLLSAICFGR = 0x24003000;
 800f4d0:	4b0a      	ldr	r3, [pc, #40]	; (800f4fc <RCC_DeInit+0x60>)
 800f4d2:	4a0d      	ldr	r2, [pc, #52]	; (800f508 <RCC_DeInit+0x6c>)
 800f4d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 
  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800f4d8:	4b08      	ldr	r3, [pc, #32]	; (800f4fc <RCC_DeInit+0x60>)
 800f4da:	4a08      	ldr	r2, [pc, #32]	; (800f4fc <RCC_DeInit+0x60>)
 800f4dc:	6812      	ldr	r2, [r2, #0]
 800f4de:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800f4e2:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800f4e4:	4b05      	ldr	r3, [pc, #20]	; (800f4fc <RCC_DeInit+0x60>)
 800f4e6:	2200      	movs	r2, #0
 800f4e8:	60da      	str	r2, [r3, #12]

  /* Disable Timers clock prescalers selection, only available for STM32F42/43xxx devices */
  RCC->DCKCFGR = 0x00000000; 
 800f4ea:	4b04      	ldr	r3, [pc, #16]	; (800f4fc <RCC_DeInit+0x60>)
 800f4ec:	2200      	movs	r2, #0
 800f4ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

}
 800f4f2:	46bd      	mov	sp, r7
 800f4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4f8:	4770      	bx	lr
 800f4fa:	bf00      	nop
 800f4fc:	40023800 	.word	0x40023800
 800f500:	24003010 	.word	0x24003010
 800f504:	20003000 	.word	0x20003000
 800f508:	24003000 	.word	0x24003000

0800f50c <RCC_HSEConfig>:
  *            @arg RCC_HSE_ON: turn ON the HSE oscillator
  *            @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint8_t RCC_HSE)
{
 800f50c:	b480      	push	{r7}
 800f50e:	b083      	sub	sp, #12
 800f510:	af00      	add	r7, sp, #0
 800f512:	4603      	mov	r3, r0
 800f514:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
 800f516:	4b05      	ldr	r3, [pc, #20]	; (800f52c <RCC_HSEConfig+0x20>)
 800f518:	2200      	movs	r2, #0
 800f51a:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
 800f51c:	4b03      	ldr	r3, [pc, #12]	; (800f52c <RCC_HSEConfig+0x20>)
 800f51e:	79fa      	ldrb	r2, [r7, #7]
 800f520:	701a      	strb	r2, [r3, #0]
}
 800f522:	370c      	adds	r7, #12
 800f524:	46bd      	mov	sp, r7
 800f526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f52a:	4770      	bx	lr
 800f52c:	40023802 	.word	0x40023802

0800f530 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 800f530:	b580      	push	{r7, lr}
 800f532:	b082      	sub	sp, #8
 800f534:	af00      	add	r7, sp, #0
  __IO uint32_t startupcounter = 0;
 800f536:	2300      	movs	r3, #0
 800f538:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
 800f53a:	2300      	movs	r3, #0
 800f53c:	71fb      	strb	r3, [r7, #7]
  FlagStatus hsestatus = RESET;
 800f53e:	2300      	movs	r3, #0
 800f540:	71bb      	strb	r3, [r7, #6]
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 800f542:	2031      	movs	r0, #49	; 0x31
 800f544:	f000 fd56 	bl	800fff4 <RCC_GetFlagStatus>
 800f548:	4603      	mov	r3, r0
 800f54a:	71bb      	strb	r3, [r7, #6]
    startupcounter++;
 800f54c:	683b      	ldr	r3, [r7, #0]
 800f54e:	3301      	adds	r3, #1
 800f550:	603b      	str	r3, [r7, #0]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 800f552:	683b      	ldr	r3, [r7, #0]
 800f554:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800f558:	d002      	beq.n	800f560 <RCC_WaitForHSEStartUp+0x30>
 800f55a:	79bb      	ldrb	r3, [r7, #6]
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d0f0      	beq.n	800f542 <RCC_WaitForHSEStartUp+0x12>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 800f560:	2031      	movs	r0, #49	; 0x31
 800f562:	f000 fd47 	bl	800fff4 <RCC_GetFlagStatus>
 800f566:	4603      	mov	r3, r0
 800f568:	2b00      	cmp	r3, #0
 800f56a:	d002      	beq.n	800f572 <RCC_WaitForHSEStartUp+0x42>
  {
    status = SUCCESS;
 800f56c:	2301      	movs	r3, #1
 800f56e:	71fb      	strb	r3, [r7, #7]
 800f570:	e001      	b.n	800f576 <RCC_WaitForHSEStartUp+0x46>
  }
  else
  {
    status = ERROR;
 800f572:	2300      	movs	r3, #0
 800f574:	71fb      	strb	r3, [r7, #7]
  }
  return (status);
 800f576:	79fb      	ldrb	r3, [r7, #7]
}
 800f578:	4618      	mov	r0, r3
 800f57a:	3708      	adds	r7, #8
 800f57c:	46bd      	mov	sp, r7
 800f57e:	bd80      	pop	{r7, pc}

0800f580 <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *         This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
 800f580:	b480      	push	{r7}
 800f582:	b085      	sub	sp, #20
 800f584:	af00      	add	r7, sp, #0
 800f586:	4603      	mov	r3, r0
 800f588:	71fb      	strb	r3, [r7, #7]
  uint32_t tmpreg = 0;
 800f58a:	2300      	movs	r3, #0
 800f58c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));

  tmpreg = RCC->CR;
 800f58e:	4b0a      	ldr	r3, [pc, #40]	; (800f5b8 <RCC_AdjustHSICalibrationValue+0x38>)
 800f590:	681b      	ldr	r3, [r3, #0]
 800f592:	60fb      	str	r3, [r7, #12]

  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
 800f594:	68fb      	ldr	r3, [r7, #12]
 800f596:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800f59a:	60fb      	str	r3, [r7, #12]

  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 800f59c:	79fb      	ldrb	r3, [r7, #7]
 800f59e:	00db      	lsls	r3, r3, #3
 800f5a0:	68fa      	ldr	r2, [r7, #12]
 800f5a2:	4313      	orrs	r3, r2
 800f5a4:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CR = tmpreg;
 800f5a6:	4b04      	ldr	r3, [pc, #16]	; (800f5b8 <RCC_AdjustHSICalibrationValue+0x38>)
 800f5a8:	68fa      	ldr	r2, [r7, #12]
 800f5aa:	601a      	str	r2, [r3, #0]
}
 800f5ac:	3714      	adds	r7, #20
 800f5ae:	46bd      	mov	sp, r7
 800f5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5b4:	4770      	bx	lr
 800f5b6:	bf00      	nop
 800f5b8:	40023800 	.word	0x40023800

0800f5bc <RCC_HSICmd>:
  * @note   When the HSI is stopped, HSIRDY flag goes low after 6 HSI oscillator
  *         clock cycles.  
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
 800f5bc:	b480      	push	{r7}
 800f5be:	b083      	sub	sp, #12
 800f5c0:	af00      	add	r7, sp, #0
 800f5c2:	4603      	mov	r3, r0
 800f5c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 800f5c6:	4b04      	ldr	r3, [pc, #16]	; (800f5d8 <RCC_HSICmd+0x1c>)
 800f5c8:	79fa      	ldrb	r2, [r7, #7]
 800f5ca:	601a      	str	r2, [r3, #0]
}
 800f5cc:	370c      	adds	r7, #12
 800f5ce:	46bd      	mov	sp, r7
 800f5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5d4:	4770      	bx	lr
 800f5d6:	bf00      	nop
 800f5d8:	42470000 	.word	0x42470000

0800f5dc <RCC_LSEConfig>:
  *            @arg RCC_LSE_ON: turn ON the LSE oscillator
  *            @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
 800f5dc:	b480      	push	{r7}
 800f5de:	b083      	sub	sp, #12
 800f5e0:	af00      	add	r7, sp, #0
 800f5e2:	4603      	mov	r3, r0
 800f5e4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 800f5e6:	4b0c      	ldr	r3, [pc, #48]	; (800f618 <RCC_LSEConfig+0x3c>)
 800f5e8:	2200      	movs	r2, #0
 800f5ea:	701a      	strb	r2, [r3, #0]

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 800f5ec:	4b0a      	ldr	r3, [pc, #40]	; (800f618 <RCC_LSEConfig+0x3c>)
 800f5ee:	2200      	movs	r2, #0
 800f5f0:	701a      	strb	r2, [r3, #0]

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
 800f5f2:	79fb      	ldrb	r3, [r7, #7]
 800f5f4:	2b01      	cmp	r3, #1
 800f5f6:	d002      	beq.n	800f5fe <RCC_LSEConfig+0x22>
 800f5f8:	2b04      	cmp	r3, #4
 800f5fa:	d004      	beq.n	800f606 <RCC_LSEConfig+0x2a>
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
      break;
    default:
      break;
 800f5fc:	e007      	b.n	800f60e <RCC_LSEConfig+0x32>
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 800f5fe:	4b06      	ldr	r3, [pc, #24]	; (800f618 <RCC_LSEConfig+0x3c>)
 800f600:	2201      	movs	r2, #1
 800f602:	701a      	strb	r2, [r3, #0]
      break;
 800f604:	e003      	b.n	800f60e <RCC_LSEConfig+0x32>
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 800f606:	4b04      	ldr	r3, [pc, #16]	; (800f618 <RCC_LSEConfig+0x3c>)
 800f608:	2205      	movs	r2, #5
 800f60a:	701a      	strb	r2, [r3, #0]
      break;
 800f60c:	bf00      	nop
    default:
      break;
  }
}
 800f60e:	370c      	adds	r7, #12
 800f610:	46bd      	mov	sp, r7
 800f612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f616:	4770      	bx	lr
 800f618:	40023870 	.word	0x40023870

0800f61c <RCC_LSICmd>:
  * @note   When the LSI is stopped, LSIRDY flag goes low after 6 LSI oscillator
  *         clock cycles. 
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
 800f61c:	b480      	push	{r7}
 800f61e:	b083      	sub	sp, #12
 800f620:	af00      	add	r7, sp, #0
 800f622:	4603      	mov	r3, r0
 800f624:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 800f626:	4b04      	ldr	r3, [pc, #16]	; (800f638 <RCC_LSICmd+0x1c>)
 800f628:	79fa      	ldrb	r2, [r7, #7]
 800f62a:	601a      	str	r2, [r3, #0]
}
 800f62c:	370c      	adds	r7, #12
 800f62e:	46bd      	mov	sp, r7
 800f630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f634:	4770      	bx	lr
 800f636:	bf00      	nop
 800f638:	42470e80 	.word	0x42470e80

0800f63c <RCC_PLLConfig>:
  *         correctly.
  *   
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PLLQ)
{
 800f63c:	b480      	push	{r7}
 800f63e:	b085      	sub	sp, #20
 800f640:	af00      	add	r7, sp, #0
 800f642:	60f8      	str	r0, [r7, #12]
 800f644:	60b9      	str	r1, [r7, #8]
 800f646:	607a      	str	r2, [r7, #4]
 800f648:	603b      	str	r3, [r7, #0]
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 800f64a:	4b0a      	ldr	r3, [pc, #40]	; (800f674 <RCC_PLLConfig+0x38>)
 800f64c:	687a      	ldr	r2, [r7, #4]
 800f64e:	0191      	lsls	r1, r2, #6
 800f650:	68ba      	ldr	r2, [r7, #8]
 800f652:	4311      	orrs	r1, r2
 800f654:	683a      	ldr	r2, [r7, #0]
 800f656:	0852      	lsrs	r2, r2, #1
 800f658:	3a01      	subs	r2, #1
 800f65a:	0412      	lsls	r2, r2, #16
 800f65c:	4311      	orrs	r1, r2
 800f65e:	68fa      	ldr	r2, [r7, #12]
 800f660:	4311      	orrs	r1, r2
                 (PLLQ << 24);
 800f662:	69ba      	ldr	r2, [r7, #24]
 800f664:	0612      	lsls	r2, r2, #24
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 800f666:	430a      	orrs	r2, r1
 800f668:	605a      	str	r2, [r3, #4]
                 (PLLQ << 24);
}
 800f66a:	3714      	adds	r7, #20
 800f66c:	46bd      	mov	sp, r7
 800f66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f672:	4770      	bx	lr
 800f674:	40023800 	.word	0x40023800

0800f678 <RCC_PLLCmd>:
  * @note   The main PLL is disabled by hardware when entering STOP and STANDBY modes.
  * @param  NewState: new state of the main PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
 800f678:	b480      	push	{r7}
 800f67a:	b083      	sub	sp, #12
 800f67c:	af00      	add	r7, sp, #0
 800f67e:	4603      	mov	r3, r0
 800f680:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 800f682:	4b04      	ldr	r3, [pc, #16]	; (800f694 <RCC_PLLCmd+0x1c>)
 800f684:	79fa      	ldrb	r2, [r7, #7]
 800f686:	601a      	str	r2, [r3, #0]
}
 800f688:	370c      	adds	r7, #12
 800f68a:	46bd      	mov	sp, r7
 800f68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f690:	4770      	bx	lr
 800f692:	bf00      	nop
 800f694:	42470060 	.word	0x42470060

0800f698 <RCC_PLLI2SConfig>:
  * @note   the PLLI2SR parameter is only available with STM32F42xxx/43xxx devices.  
  *   
  * @retval None
  */
void RCC_PLLI2SConfig(uint32_t PLLI2SN, uint32_t PLLI2SQ, uint32_t PLLI2SR)
{
 800f698:	b480      	push	{r7}
 800f69a:	b085      	sub	sp, #20
 800f69c:	af00      	add	r7, sp, #0
 800f69e:	60f8      	str	r0, [r7, #12]
 800f6a0:	60b9      	str	r1, [r7, #8]
 800f6a2:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
  assert_param(IS_RCC_PLLI2SQ_VALUE(PLLI2SQ));
  assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));

  RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SQ << 24) | (PLLI2SR << 28);
 800f6a4:	4b07      	ldr	r3, [pc, #28]	; (800f6c4 <RCC_PLLI2SConfig+0x2c>)
 800f6a6:	68fa      	ldr	r2, [r7, #12]
 800f6a8:	0191      	lsls	r1, r2, #6
 800f6aa:	68ba      	ldr	r2, [r7, #8]
 800f6ac:	0612      	lsls	r2, r2, #24
 800f6ae:	4311      	orrs	r1, r2
 800f6b0:	687a      	ldr	r2, [r7, #4]
 800f6b2:	0712      	lsls	r2, r2, #28
 800f6b4:	430a      	orrs	r2, r1
 800f6b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800f6ba:	3714      	adds	r7, #20
 800f6bc:	46bd      	mov	sp, r7
 800f6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6c2:	4770      	bx	lr
 800f6c4:	40023800 	.word	0x40023800

0800f6c8 <RCC_PLLI2SCmd>:
  * @note   The PLLI2S is disabled by hardware when entering STOP and STANDBY modes.  
  * @param  NewState: new state of the PLLI2S. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLI2SCmd(FunctionalState NewState)
{
 800f6c8:	b480      	push	{r7}
 800f6ca:	b083      	sub	sp, #12
 800f6cc:	af00      	add	r7, sp, #0
 800f6ce:	4603      	mov	r3, r0
 800f6d0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
 800f6d2:	4b04      	ldr	r3, [pc, #16]	; (800f6e4 <RCC_PLLI2SCmd+0x1c>)
 800f6d4:	79fa      	ldrb	r2, [r7, #7]
 800f6d6:	601a      	str	r2, [r3, #0]
}
 800f6d8:	370c      	adds	r7, #12
 800f6da:	46bd      	mov	sp, r7
 800f6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6e0:	4770      	bx	lr
 800f6e2:	bf00      	nop
 800f6e4:	42470068 	.word	0x42470068

0800f6e8 <RCC_PLLSAIConfig>:
  *          This parameter must be a number between 2 and 7.
  *   
  * @retval None
  */
void RCC_PLLSAIConfig(uint32_t PLLSAIN, uint32_t PLLSAIQ, uint32_t PLLSAIR)
{
 800f6e8:	b480      	push	{r7}
 800f6ea:	b085      	sub	sp, #20
 800f6ec:	af00      	add	r7, sp, #0
 800f6ee:	60f8      	str	r0, [r7, #12]
 800f6f0:	60b9      	str	r1, [r7, #8]
 800f6f2:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAIN_VALUE(PLLSAIN));
  assert_param(IS_RCC_PLLSAIR_VALUE(PLLSAIR));

  RCC->PLLSAICFGR = (PLLSAIN << 6) | (PLLSAIQ << 24) | (PLLSAIR << 28);
 800f6f4:	4b07      	ldr	r3, [pc, #28]	; (800f714 <RCC_PLLSAIConfig+0x2c>)
 800f6f6:	68fa      	ldr	r2, [r7, #12]
 800f6f8:	0191      	lsls	r1, r2, #6
 800f6fa:	68ba      	ldr	r2, [r7, #8]
 800f6fc:	0612      	lsls	r2, r2, #24
 800f6fe:	4311      	orrs	r1, r2
 800f700:	687a      	ldr	r2, [r7, #4]
 800f702:	0712      	lsls	r2, r2, #28
 800f704:	430a      	orrs	r2, r1
 800f706:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800f70a:	3714      	adds	r7, #20
 800f70c:	46bd      	mov	sp, r7
 800f70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f712:	4770      	bx	lr
 800f714:	40023800 	.word	0x40023800

0800f718 <RCC_PLLSAICmd>:
  * @note   The PLLSAI is disabled by hardware when entering STOP and STANDBY modes.  
  * @param  NewState: new state of the PLLSAI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLSAICmd(FunctionalState NewState)
{
 800f718:	b480      	push	{r7}
 800f71a:	b083      	sub	sp, #12
 800f71c:	af00      	add	r7, sp, #0
 800f71e:	4603      	mov	r3, r0
 800f720:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLSAION_BB = (uint32_t)NewState;
 800f722:	4b04      	ldr	r3, [pc, #16]	; (800f734 <RCC_PLLSAICmd+0x1c>)
 800f724:	79fa      	ldrb	r2, [r7, #7]
 800f726:	601a      	str	r2, [r3, #0]
}
 800f728:	370c      	adds	r7, #12
 800f72a:	46bd      	mov	sp, r7
 800f72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f730:	4770      	bx	lr
 800f732:	bf00      	nop
 800f734:	42470070 	.word	0x42470070

0800f738 <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
 800f738:	b480      	push	{r7}
 800f73a:	b083      	sub	sp, #12
 800f73c:	af00      	add	r7, sp, #0
 800f73e:	4603      	mov	r3, r0
 800f740:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 800f742:	4b04      	ldr	r3, [pc, #16]	; (800f754 <RCC_ClockSecuritySystemCmd+0x1c>)
 800f744:	79fa      	ldrb	r2, [r7, #7]
 800f746:	601a      	str	r2, [r3, #0]
}
 800f748:	370c      	adds	r7, #12
 800f74a:	46bd      	mov	sp, r7
 800f74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f750:	4770      	bx	lr
 800f752:	bf00      	nop
 800f754:	4247004c 	.word	0x4247004c

0800f758 <RCC_MCO1Config>:
  *            @arg RCC_MCO1Div_4: division by 4 applied to MCO1 clock
  *            @arg RCC_MCO1Div_5: division by 5 applied to MCO1 clock
  * @retval None
  */
void RCC_MCO1Config(uint32_t RCC_MCO1Source, uint32_t RCC_MCO1Div)
{
 800f758:	b480      	push	{r7}
 800f75a:	b085      	sub	sp, #20
 800f75c:	af00      	add	r7, sp, #0
 800f75e:	6078      	str	r0, [r7, #4]
 800f760:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800f762:	2300      	movs	r3, #0
 800f764:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
  assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  

  tmpreg = RCC->CFGR;
 800f766:	4b0a      	ldr	r3, [pc, #40]	; (800f790 <RCC_MCO1Config+0x38>)
 800f768:	689b      	ldr	r3, [r3, #8]
 800f76a:	60fb      	str	r3, [r7, #12]

  /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
  tmpreg &= CFGR_MCO1_RESET_MASK;
 800f76c:	68fb      	ldr	r3, [r7, #12]
 800f76e:	f023 63ec 	bic.w	r3, r3, #123731968	; 0x7600000
 800f772:	60fb      	str	r3, [r7, #12]

  /* Select MCO1 clock source and prescaler */
  tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
 800f774:	687a      	ldr	r2, [r7, #4]
 800f776:	683b      	ldr	r3, [r7, #0]
 800f778:	4313      	orrs	r3, r2
 800f77a:	68fa      	ldr	r2, [r7, #12]
 800f77c:	4313      	orrs	r3, r2
 800f77e:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 800f780:	4b03      	ldr	r3, [pc, #12]	; (800f790 <RCC_MCO1Config+0x38>)
 800f782:	68fa      	ldr	r2, [r7, #12]
 800f784:	609a      	str	r2, [r3, #8]
}
 800f786:	3714      	adds	r7, #20
 800f788:	46bd      	mov	sp, r7
 800f78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f78e:	4770      	bx	lr
 800f790:	40023800 	.word	0x40023800

0800f794 <RCC_MCO2Config>:
  *            @arg RCC_MCO2Div_4: division by 4 applied to MCO2 clock
  *            @arg RCC_MCO2Div_5: division by 5 applied to MCO2 clock
  * @retval None
  */
void RCC_MCO2Config(uint32_t RCC_MCO2Source, uint32_t RCC_MCO2Div)
{
 800f794:	b480      	push	{r7}
 800f796:	b085      	sub	sp, #20
 800f798:	af00      	add	r7, sp, #0
 800f79a:	6078      	str	r0, [r7, #4]
 800f79c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800f79e:	2300      	movs	r3, #0
 800f7a0:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
  assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
  
  tmpreg = RCC->CFGR;
 800f7a2:	4b0a      	ldr	r3, [pc, #40]	; (800f7cc <RCC_MCO2Config+0x38>)
 800f7a4:	689b      	ldr	r3, [r3, #8]
 800f7a6:	60fb      	str	r3, [r7, #12]
  
  /* Clear MCO2 and MCO2PRE[2:0] bits */
  tmpreg &= CFGR_MCO2_RESET_MASK;
 800f7a8:	68fb      	ldr	r3, [r7, #12]
 800f7aa:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800f7ae:	60fb      	str	r3, [r7, #12]

  /* Select MCO2 clock source and prescaler */
  tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
 800f7b0:	687a      	ldr	r2, [r7, #4]
 800f7b2:	683b      	ldr	r3, [r7, #0]
 800f7b4:	4313      	orrs	r3, r2
 800f7b6:	68fa      	ldr	r2, [r7, #12]
 800f7b8:	4313      	orrs	r3, r2
 800f7ba:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 800f7bc:	4b03      	ldr	r3, [pc, #12]	; (800f7cc <RCC_MCO2Config+0x38>)
 800f7be:	68fa      	ldr	r2, [r7, #12]
 800f7c0:	609a      	str	r2, [r3, #8]
}
 800f7c2:	3714      	adds	r7, #20
 800f7c4:	46bd      	mov	sp, r7
 800f7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ca:	4770      	bx	lr
 800f7cc:	40023800 	.word	0x40023800

0800f7d0 <RCC_SYSCLKConfig>:
  *            @arg RCC_SYSCLKSource_HSE:    HSE selected as system clock source
  *            @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
 800f7d0:	b480      	push	{r7}
 800f7d2:	b085      	sub	sp, #20
 800f7d4:	af00      	add	r7, sp, #0
 800f7d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800f7d8:	2300      	movs	r3, #0
 800f7da:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
 800f7dc:	4b09      	ldr	r3, [pc, #36]	; (800f804 <RCC_SYSCLKConfig+0x34>)
 800f7de:	689b      	ldr	r3, [r3, #8]
 800f7e0:	60fb      	str	r3, [r7, #12]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 800f7e2:	68fb      	ldr	r3, [r7, #12]
 800f7e4:	f023 0303 	bic.w	r3, r3, #3
 800f7e8:	60fb      	str	r3, [r7, #12]

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 800f7ea:	68fa      	ldr	r2, [r7, #12]
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	4313      	orrs	r3, r2
 800f7f0:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 800f7f2:	4b04      	ldr	r3, [pc, #16]	; (800f804 <RCC_SYSCLKConfig+0x34>)
 800f7f4:	68fa      	ldr	r2, [r7, #12]
 800f7f6:	609a      	str	r2, [r3, #8]
}
 800f7f8:	3714      	adds	r7, #20
 800f7fa:	46bd      	mov	sp, r7
 800f7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f800:	4770      	bx	lr
 800f802:	bf00      	nop
 800f804:	40023800 	.word	0x40023800

0800f808 <RCC_GetSYSCLKSource>:
  *              - 0x00: HSI used as system clock
  *              - 0x04: HSE used as system clock
  *              - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
 800f808:	b480      	push	{r7}
 800f80a:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 800f80c:	4b05      	ldr	r3, [pc, #20]	; (800f824 <RCC_GetSYSCLKSource+0x1c>)
 800f80e:	689b      	ldr	r3, [r3, #8]
 800f810:	b2db      	uxtb	r3, r3
 800f812:	f003 030c 	and.w	r3, r3, #12
 800f816:	b2db      	uxtb	r3, r3
}
 800f818:	4618      	mov	r0, r3
 800f81a:	46bd      	mov	sp, r7
 800f81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f820:	4770      	bx	lr
 800f822:	bf00      	nop
 800f824:	40023800 	.word	0x40023800

0800f828 <RCC_HCLKConfig>:
  *            @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *            @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
 800f828:	b480      	push	{r7}
 800f82a:	b085      	sub	sp, #20
 800f82c:	af00      	add	r7, sp, #0
 800f82e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800f830:	2300      	movs	r3, #0
 800f832:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
 800f834:	4b09      	ldr	r3, [pc, #36]	; (800f85c <RCC_HCLKConfig+0x34>)
 800f836:	689b      	ldr	r3, [r3, #8]
 800f838:	60fb      	str	r3, [r7, #12]

  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
 800f83a:	68fb      	ldr	r3, [r7, #12]
 800f83c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800f840:	60fb      	str	r3, [r7, #12]

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 800f842:	68fa      	ldr	r2, [r7, #12]
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	4313      	orrs	r3, r2
 800f848:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 800f84a:	4b04      	ldr	r3, [pc, #16]	; (800f85c <RCC_HCLKConfig+0x34>)
 800f84c:	68fa      	ldr	r2, [r7, #12]
 800f84e:	609a      	str	r2, [r3, #8]
}
 800f850:	3714      	adds	r7, #20
 800f852:	46bd      	mov	sp, r7
 800f854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f858:	4770      	bx	lr
 800f85a:	bf00      	nop
 800f85c:	40023800 	.word	0x40023800

0800f860 <RCC_PCLK1Config>:
  *            @arg RCC_HCLK_Div8:  APB1 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
 800f860:	b480      	push	{r7}
 800f862:	b085      	sub	sp, #20
 800f864:	af00      	add	r7, sp, #0
 800f866:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800f868:	2300      	movs	r3, #0
 800f86a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 800f86c:	4b09      	ldr	r3, [pc, #36]	; (800f894 <RCC_PCLK1Config+0x34>)
 800f86e:	689b      	ldr	r3, [r3, #8]
 800f870:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
 800f872:	68fb      	ldr	r3, [r7, #12]
 800f874:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800f878:	60fb      	str	r3, [r7, #12]

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 800f87a:	68fa      	ldr	r2, [r7, #12]
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	4313      	orrs	r3, r2
 800f880:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 800f882:	4b04      	ldr	r3, [pc, #16]	; (800f894 <RCC_PCLK1Config+0x34>)
 800f884:	68fa      	ldr	r2, [r7, #12]
 800f886:	609a      	str	r2, [r3, #8]
}
 800f888:	3714      	adds	r7, #20
 800f88a:	46bd      	mov	sp, r7
 800f88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f890:	4770      	bx	lr
 800f892:	bf00      	nop
 800f894:	40023800 	.word	0x40023800

0800f898 <RCC_PCLK2Config>:
  *            @arg RCC_HCLK_Div8:  APB2 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
 800f898:	b480      	push	{r7}
 800f89a:	b085      	sub	sp, #20
 800f89c:	af00      	add	r7, sp, #0
 800f89e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800f8a0:	2300      	movs	r3, #0
 800f8a2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 800f8a4:	4b09      	ldr	r3, [pc, #36]	; (800f8cc <RCC_PCLK2Config+0x34>)
 800f8a6:	689b      	ldr	r3, [r3, #8]
 800f8a8:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
 800f8aa:	68fb      	ldr	r3, [r7, #12]
 800f8ac:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800f8b0:	60fb      	str	r3, [r7, #12]

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	00db      	lsls	r3, r3, #3
 800f8b6:	68fa      	ldr	r2, [r7, #12]
 800f8b8:	4313      	orrs	r3, r2
 800f8ba:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 800f8bc:	4b03      	ldr	r3, [pc, #12]	; (800f8cc <RCC_PCLK2Config+0x34>)
 800f8be:	68fa      	ldr	r2, [r7, #12]
 800f8c0:	609a      	str	r2, [r3, #8]
}
 800f8c2:	3714      	adds	r7, #20
 800f8c4:	46bd      	mov	sp, r7
 800f8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ca:	4770      	bx	lr
 800f8cc:	40023800 	.word	0x40023800

0800f8d0 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 800f8d0:	b480      	push	{r7}
 800f8d2:	b089      	sub	sp, #36	; 0x24
 800f8d4:	af00      	add	r7, sp, #0
 800f8d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 800f8d8:	2300      	movs	r3, #0
 800f8da:	61bb      	str	r3, [r7, #24]
 800f8dc:	2300      	movs	r3, #0
 800f8de:	617b      	str	r3, [r7, #20]
 800f8e0:	2300      	movs	r3, #0
 800f8e2:	61fb      	str	r3, [r7, #28]
 800f8e4:	2302      	movs	r3, #2
 800f8e6:	613b      	str	r3, [r7, #16]
 800f8e8:	2300      	movs	r3, #0
 800f8ea:	60fb      	str	r3, [r7, #12]
 800f8ec:	2302      	movs	r3, #2
 800f8ee:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800f8f0:	4b48      	ldr	r3, [pc, #288]	; (800fa14 <RCC_GetClocksFreq+0x144>)
 800f8f2:	689b      	ldr	r3, [r3, #8]
 800f8f4:	f003 030c 	and.w	r3, r3, #12
 800f8f8:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 800f8fa:	69bb      	ldr	r3, [r7, #24]
 800f8fc:	2b04      	cmp	r3, #4
 800f8fe:	d007      	beq.n	800f910 <RCC_GetClocksFreq+0x40>
 800f900:	2b08      	cmp	r3, #8
 800f902:	d009      	beq.n	800f918 <RCC_GetClocksFreq+0x48>
 800f904:	2b00      	cmp	r3, #0
 800f906:	d13f      	bne.n	800f988 <RCC_GetClocksFreq+0xb8>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	4a43      	ldr	r2, [pc, #268]	; (800fa18 <RCC_GetClocksFreq+0x148>)
 800f90c:	601a      	str	r2, [r3, #0]
      break;
 800f90e:	e03f      	b.n	800f990 <RCC_GetClocksFreq+0xc0>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	4a42      	ldr	r2, [pc, #264]	; (800fa1c <RCC_GetClocksFreq+0x14c>)
 800f914:	601a      	str	r2, [r3, #0]
      break;
 800f916:	e03b      	b.n	800f990 <RCC_GetClocksFreq+0xc0>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800f918:	4b3e      	ldr	r3, [pc, #248]	; (800fa14 <RCC_GetClocksFreq+0x144>)
 800f91a:	685b      	ldr	r3, [r3, #4]
 800f91c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f920:	0d9b      	lsrs	r3, r3, #22
 800f922:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800f924:	4b3b      	ldr	r3, [pc, #236]	; (800fa14 <RCC_GetClocksFreq+0x144>)
 800f926:	685b      	ldr	r3, [r3, #4]
 800f928:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f92c:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 800f92e:	68fb      	ldr	r3, [r7, #12]
 800f930:	2b00      	cmp	r3, #0
 800f932:	d00d      	beq.n	800f950 <RCC_GetClocksFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800f934:	4a39      	ldr	r2, [pc, #228]	; (800fa1c <RCC_GetClocksFreq+0x14c>)
 800f936:	68bb      	ldr	r3, [r7, #8]
 800f938:	fbb2 f2f3 	udiv	r2, r2, r3
 800f93c:	4b35      	ldr	r3, [pc, #212]	; (800fa14 <RCC_GetClocksFreq+0x144>)
 800f93e:	6859      	ldr	r1, [r3, #4]
 800f940:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800f944:	400b      	ands	r3, r1
 800f946:	099b      	lsrs	r3, r3, #6
 800f948:	fb03 f302 	mul.w	r3, r3, r2
 800f94c:	61fb      	str	r3, [r7, #28]
 800f94e:	e00c      	b.n	800f96a <RCC_GetClocksFreq+0x9a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 800f950:	4a31      	ldr	r2, [pc, #196]	; (800fa18 <RCC_GetClocksFreq+0x148>)
 800f952:	68bb      	ldr	r3, [r7, #8]
 800f954:	fbb2 f2f3 	udiv	r2, r2, r3
 800f958:	4b2e      	ldr	r3, [pc, #184]	; (800fa14 <RCC_GetClocksFreq+0x144>)
 800f95a:	6859      	ldr	r1, [r3, #4]
 800f95c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800f960:	400b      	ands	r3, r1
 800f962:	099b      	lsrs	r3, r3, #6
 800f964:	fb03 f302 	mul.w	r3, r3, r2
 800f968:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800f96a:	4b2a      	ldr	r3, [pc, #168]	; (800fa14 <RCC_GetClocksFreq+0x144>)
 800f96c:	685b      	ldr	r3, [r3, #4]
 800f96e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800f972:	0c1b      	lsrs	r3, r3, #16
 800f974:	3301      	adds	r3, #1
 800f976:	005b      	lsls	r3, r3, #1
 800f978:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 800f97a:	69fa      	ldr	r2, [r7, #28]
 800f97c:	693b      	ldr	r3, [r7, #16]
 800f97e:	fbb2 f2f3 	udiv	r2, r2, r3
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	601a      	str	r2, [r3, #0]
      break;
 800f986:	e003      	b.n	800f990 <RCC_GetClocksFreq+0xc0>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	4a23      	ldr	r2, [pc, #140]	; (800fa18 <RCC_GetClocksFreq+0x148>)
 800f98c:	601a      	str	r2, [r3, #0]
      break;
 800f98e:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 800f990:	4b20      	ldr	r3, [pc, #128]	; (800fa14 <RCC_GetClocksFreq+0x144>)
 800f992:	689b      	ldr	r3, [r3, #8]
 800f994:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f998:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 800f99a:	69bb      	ldr	r3, [r7, #24]
 800f99c:	091b      	lsrs	r3, r3, #4
 800f99e:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 800f9a0:	4a1f      	ldr	r2, [pc, #124]	; (800fa20 <RCC_GetClocksFreq+0x150>)
 800f9a2:	69bb      	ldr	r3, [r7, #24]
 800f9a4:	4413      	add	r3, r2
 800f9a6:	781b      	ldrb	r3, [r3, #0]
 800f9a8:	b2db      	uxtb	r3, r3
 800f9aa:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	681a      	ldr	r2, [r3, #0]
 800f9b0:	697b      	ldr	r3, [r7, #20]
 800f9b2:	40da      	lsrs	r2, r3
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 800f9b8:	4b16      	ldr	r3, [pc, #88]	; (800fa14 <RCC_GetClocksFreq+0x144>)
 800f9ba:	689b      	ldr	r3, [r3, #8]
 800f9bc:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800f9c0:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 800f9c2:	69bb      	ldr	r3, [r7, #24]
 800f9c4:	0a9b      	lsrs	r3, r3, #10
 800f9c6:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 800f9c8:	4a15      	ldr	r2, [pc, #84]	; (800fa20 <RCC_GetClocksFreq+0x150>)
 800f9ca:	69bb      	ldr	r3, [r7, #24]
 800f9cc:	4413      	add	r3, r2
 800f9ce:	781b      	ldrb	r3, [r3, #0]
 800f9d0:	b2db      	uxtb	r3, r3
 800f9d2:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	685a      	ldr	r2, [r3, #4]
 800f9d8:	697b      	ldr	r3, [r7, #20]
 800f9da:	40da      	lsrs	r2, r3
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 800f9e0:	4b0c      	ldr	r3, [pc, #48]	; (800fa14 <RCC_GetClocksFreq+0x144>)
 800f9e2:	689b      	ldr	r3, [r3, #8]
 800f9e4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800f9e8:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 800f9ea:	69bb      	ldr	r3, [r7, #24]
 800f9ec:	0b5b      	lsrs	r3, r3, #13
 800f9ee:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 800f9f0:	4a0b      	ldr	r2, [pc, #44]	; (800fa20 <RCC_GetClocksFreq+0x150>)
 800f9f2:	69bb      	ldr	r3, [r7, #24]
 800f9f4:	4413      	add	r3, r2
 800f9f6:	781b      	ldrb	r3, [r3, #0]
 800f9f8:	b2db      	uxtb	r3, r3
 800f9fa:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	685a      	ldr	r2, [r3, #4]
 800fa00:	697b      	ldr	r3, [r7, #20]
 800fa02:	40da      	lsrs	r2, r3
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	60da      	str	r2, [r3, #12]
}
 800fa08:	3724      	adds	r7, #36	; 0x24
 800fa0a:	46bd      	mov	sp, r7
 800fa0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa10:	4770      	bx	lr
 800fa12:	bf00      	nop
 800fa14:	40023800 	.word	0x40023800
 800fa18:	00f42400 	.word	0x00f42400
 800fa1c:	007a1200 	.word	0x007a1200
 800fa20:	20000078 	.word	0x20000078

0800fa24 <RCC_RTCCLKConfig>:
  *         RTC clock source).
  *  
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
 800fa24:	b480      	push	{r7}
 800fa26:	b085      	sub	sp, #20
 800fa28:	af00      	add	r7, sp, #0
 800fa2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800fa2c:	2300      	movs	r3, #0
 800fa2e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800fa36:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800fa3a:	d111      	bne.n	800fa60 <RCC_RTCCLKConfig+0x3c>
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;
 800fa3c:	4b0f      	ldr	r3, [pc, #60]	; (800fa7c <RCC_RTCCLKConfig+0x58>)
 800fa3e:	689b      	ldr	r3, [r3, #8]
 800fa40:	60fb      	str	r3, [r7, #12]

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;
 800fa42:	68fb      	ldr	r3, [r7, #12]
 800fa44:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800fa48:	60fb      	str	r3, [r7, #12]

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800fa50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fa54:	68fa      	ldr	r2, [r7, #12]
 800fa56:	4313      	orrs	r3, r2
 800fa58:	60fb      	str	r3, [r7, #12]

    /* Store the new value */
    RCC->CFGR = tmpreg;
 800fa5a:	4b08      	ldr	r3, [pc, #32]	; (800fa7c <RCC_RTCCLKConfig+0x58>)
 800fa5c:	68fa      	ldr	r2, [r7, #12]
 800fa5e:	609a      	str	r2, [r3, #8]
  }
    
  /* Select the RTC clock source */
  RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
 800fa60:	4b06      	ldr	r3, [pc, #24]	; (800fa7c <RCC_RTCCLKConfig+0x58>)
 800fa62:	4a06      	ldr	r2, [pc, #24]	; (800fa7c <RCC_RTCCLKConfig+0x58>)
 800fa64:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800fa66:	687a      	ldr	r2, [r7, #4]
 800fa68:	f3c2 020b 	ubfx	r2, r2, #0, #12
 800fa6c:	430a      	orrs	r2, r1
 800fa6e:	671a      	str	r2, [r3, #112]	; 0x70
}
 800fa70:	3714      	adds	r7, #20
 800fa72:	46bd      	mov	sp, r7
 800fa74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa78:	4770      	bx	lr
 800fa7a:	bf00      	nop
 800fa7c:	40023800 	.word	0x40023800

0800fa80 <RCC_RTCCLKCmd>:
  *         using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
 800fa80:	b480      	push	{r7}
 800fa82:	b083      	sub	sp, #12
 800fa84:	af00      	add	r7, sp, #0
 800fa86:	4603      	mov	r3, r0
 800fa88:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 800fa8a:	4b04      	ldr	r3, [pc, #16]	; (800fa9c <RCC_RTCCLKCmd+0x1c>)
 800fa8c:	79fa      	ldrb	r2, [r7, #7]
 800fa8e:	601a      	str	r2, [r3, #0]
}
 800fa90:	370c      	adds	r7, #12
 800fa92:	46bd      	mov	sp, r7
 800fa94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa98:	4770      	bx	lr
 800fa9a:	bf00      	nop
 800fa9c:	42470e3c 	.word	0x42470e3c

0800faa0 <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
 800faa0:	b480      	push	{r7}
 800faa2:	b083      	sub	sp, #12
 800faa4:	af00      	add	r7, sp, #0
 800faa6:	4603      	mov	r3, r0
 800faa8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 800faaa:	4b04      	ldr	r3, [pc, #16]	; (800fabc <RCC_BackupResetCmd+0x1c>)
 800faac:	79fa      	ldrb	r2, [r7, #7]
 800faae:	601a      	str	r2, [r3, #0]
}
 800fab0:	370c      	adds	r7, #12
 800fab2:	46bd      	mov	sp, r7
 800fab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fab8:	4770      	bx	lr
 800faba:	bf00      	nop
 800fabc:	42470e40 	.word	0x42470e40

0800fac0 <RCC_I2SCLKConfig>:
  *            @arg RCC_I2S2CLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as I2S clock source
  * @retval None
  */
void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
{
 800fac0:	b480      	push	{r7}
 800fac2:	b083      	sub	sp, #12
 800fac4:	af00      	add	r7, sp, #0
 800fac6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));

  *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;
 800fac8:	4b03      	ldr	r3, [pc, #12]	; (800fad8 <RCC_I2SCLKConfig+0x18>)
 800faca:	687a      	ldr	r2, [r7, #4]
 800facc:	601a      	str	r2, [r3, #0]
}
 800face:	370c      	adds	r7, #12
 800fad0:	46bd      	mov	sp, r7
 800fad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fad6:	4770      	bx	lr
 800fad8:	4247015c 	.word	0x4247015c

0800fadc <RCC_SAIPLLI2SClkDivConfig>:
  *          SAI1 clock frequency = f(PLLI2S_Q) / RCC_PLLI2SDivQ 
  *              
  * @retval None
  */
void RCC_SAIPLLI2SClkDivConfig(uint32_t RCC_PLLI2SDivQ)  
{
 800fadc:	b480      	push	{r7}
 800fade:	b085      	sub	sp, #20
 800fae0:	af00      	add	r7, sp, #0
 800fae2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800fae4:	2300      	movs	r3, #0
 800fae6:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(RCC_PLLI2SDivQ));
  
  tmpreg = RCC->DCKCFGR;
 800fae8:	4b0a      	ldr	r3, [pc, #40]	; (800fb14 <RCC_SAIPLLI2SClkDivConfig+0x38>)
 800faea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800faee:	60fb      	str	r3, [r7, #12]

  /* Clear PLLI2SDIVQ[4:0] bits */
  tmpreg &= ~(RCC_DCKCFGR_PLLI2SDIVQ);
 800faf0:	68fb      	ldr	r3, [r7, #12]
 800faf2:	f023 031f 	bic.w	r3, r3, #31
 800faf6:	60fb      	str	r3, [r7, #12]

  /* Set PLLI2SDIVQ values */
  tmpreg |= (RCC_PLLI2SDivQ - 1);
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	3b01      	subs	r3, #1
 800fafc:	68fa      	ldr	r2, [r7, #12]
 800fafe:	4313      	orrs	r3, r2
 800fb00:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
 800fb02:	4b04      	ldr	r3, [pc, #16]	; (800fb14 <RCC_SAIPLLI2SClkDivConfig+0x38>)
 800fb04:	68fa      	ldr	r2, [r7, #12]
 800fb06:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
 800fb0a:	3714      	adds	r7, #20
 800fb0c:	46bd      	mov	sp, r7
 800fb0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb12:	4770      	bx	lr
 800fb14:	40023800 	.word	0x40023800

0800fb18 <RCC_SAIPLLSAIClkDivConfig>:
  *          SAI1 clock frequency = f(PLLSAI_Q) / RCC_PLLSAIDivQ  
  *              
  * @retval None
  */
void RCC_SAIPLLSAIClkDivConfig(uint32_t RCC_PLLSAIDivQ)  
{
 800fb18:	b480      	push	{r7}
 800fb1a:	b085      	sub	sp, #20
 800fb1c:	af00      	add	r7, sp, #0
 800fb1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800fb20:	2300      	movs	r3, #0
 800fb22:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(RCC_PLLSAIDivQ));
  
  tmpreg = RCC->DCKCFGR;
 800fb24:	4b0b      	ldr	r3, [pc, #44]	; (800fb54 <RCC_SAIPLLSAIClkDivConfig+0x3c>)
 800fb26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fb2a:	60fb      	str	r3, [r7, #12]

  /* Clear PLLI2SDIVQ[4:0] and PLLSAIDIVQ[4:0] bits */
  tmpreg &= ~(RCC_DCKCFGR_PLLSAIDIVQ);
 800fb2c:	68fb      	ldr	r3, [r7, #12]
 800fb2e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 800fb32:	60fb      	str	r3, [r7, #12]

  /* Set PLLSAIDIVQ values */
  tmpreg |= ((RCC_PLLSAIDivQ - 1) << 8);
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	3b01      	subs	r3, #1
 800fb38:	021b      	lsls	r3, r3, #8
 800fb3a:	68fa      	ldr	r2, [r7, #12]
 800fb3c:	4313      	orrs	r3, r2
 800fb3e:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
 800fb40:	4b04      	ldr	r3, [pc, #16]	; (800fb54 <RCC_SAIPLLSAIClkDivConfig+0x3c>)
 800fb42:	68fa      	ldr	r2, [r7, #12]
 800fb44:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
 800fb48:	3714      	adds	r7, #20
 800fb4a:	46bd      	mov	sp, r7
 800fb4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb50:	4770      	bx	lr
 800fb52:	bf00      	nop
 800fb54:	40023800 	.word	0x40023800

0800fb58 <RCC_SAIBlockACLKConfig>:
  *            @arg RCC_SAIACLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as SAI1 Block A clock
  * @retval None
  */
void RCC_SAIBlockACLKConfig(uint32_t RCC_SAIBlockACLKSource)
{
 800fb58:	b480      	push	{r7}
 800fb5a:	b085      	sub	sp, #20
 800fb5c:	af00      	add	r7, sp, #0
 800fb5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800fb60:	2300      	movs	r3, #0
 800fb62:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_SAIACLK_SOURCE(RCC_SAIBlockACLKSource));
  
  tmpreg = RCC->DCKCFGR;
 800fb64:	4b0a      	ldr	r3, [pc, #40]	; (800fb90 <RCC_SAIBlockACLKConfig+0x38>)
 800fb66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fb6a:	60fb      	str	r3, [r7, #12]

  /* Clear RCC_DCKCFGR_SAI1ASRC[1:0] bits */
  tmpreg &= ~RCC_DCKCFGR_SAI1ASRC;
 800fb6c:	68fb      	ldr	r3, [r7, #12]
 800fb6e:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800fb72:	60fb      	str	r3, [r7, #12]

  /* Set SAI Block A source selection value */
  tmpreg |= RCC_SAIBlockACLKSource;
 800fb74:	68fa      	ldr	r2, [r7, #12]
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	4313      	orrs	r3, r2
 800fb7a:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
 800fb7c:	4b04      	ldr	r3, [pc, #16]	; (800fb90 <RCC_SAIBlockACLKConfig+0x38>)
 800fb7e:	68fa      	ldr	r2, [r7, #12]
 800fb80:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
 800fb84:	3714      	adds	r7, #20
 800fb86:	46bd      	mov	sp, r7
 800fb88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb8c:	4770      	bx	lr
 800fb8e:	bf00      	nop
 800fb90:	40023800 	.word	0x40023800

0800fb94 <RCC_SAIBlockBCLKConfig>:
  *            @arg RCC_SAIBCLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as SAI1 Block B clock
  * @retval None
  */
void RCC_SAIBlockBCLKConfig(uint32_t RCC_SAIBlockBCLKSource)
{
 800fb94:	b480      	push	{r7}
 800fb96:	b085      	sub	sp, #20
 800fb98:	af00      	add	r7, sp, #0
 800fb9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800fb9c:	2300      	movs	r3, #0
 800fb9e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_SAIBCLK_SOURCE(RCC_SAIBlockBCLKSource));
  
  tmpreg = RCC->DCKCFGR;
 800fba0:	4b0a      	ldr	r3, [pc, #40]	; (800fbcc <RCC_SAIBlockBCLKConfig+0x38>)
 800fba2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fba6:	60fb      	str	r3, [r7, #12]

  /* Clear RCC_DCKCFGR_SAI1BSRC[1:0] bits */
  tmpreg &= ~RCC_DCKCFGR_SAI1BSRC;
 800fba8:	68fb      	ldr	r3, [r7, #12]
 800fbaa:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800fbae:	60fb      	str	r3, [r7, #12]

  /* Set SAI Block B source selection value */
  tmpreg |= RCC_SAIBlockBCLKSource;
 800fbb0:	68fa      	ldr	r2, [r7, #12]
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	4313      	orrs	r3, r2
 800fbb6:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
 800fbb8:	4b04      	ldr	r3, [pc, #16]	; (800fbcc <RCC_SAIBlockBCLKConfig+0x38>)
 800fbba:	68fa      	ldr	r2, [r7, #12]
 800fbbc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
 800fbc0:	3714      	adds	r7, #20
 800fbc2:	46bd      	mov	sp, r7
 800fbc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbc8:	4770      	bx	lr
 800fbca:	bf00      	nop
 800fbcc:	40023800 	.word	0x40023800

0800fbd0 <RCC_LTDCCLKDivConfig>:
  *          LTDC clock frequency = f(PLLSAI_R) / RCC_PLLSAIDivR  
  *            
  * @retval None
  */
void RCC_LTDCCLKDivConfig(uint32_t RCC_PLLSAIDivR)
{
 800fbd0:	b480      	push	{r7}
 800fbd2:	b085      	sub	sp, #20
 800fbd4:	af00      	add	r7, sp, #0
 800fbd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800fbd8:	2300      	movs	r3, #0
 800fbda:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAI_DIVR_VALUE(RCC_PLLSAIDivR));
  
  tmpreg = RCC->DCKCFGR;
 800fbdc:	4b0a      	ldr	r3, [pc, #40]	; (800fc08 <RCC_LTDCCLKDivConfig+0x38>)
 800fbde:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fbe2:	60fb      	str	r3, [r7, #12]

  /* Clear PLLSAIDIVR[2:0] bits */
  tmpreg &= ~RCC_DCKCFGR_PLLSAIDIVR;
 800fbe4:	68fb      	ldr	r3, [r7, #12]
 800fbe6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800fbea:	60fb      	str	r3, [r7, #12]

  /* Set PLLSAIDIVR values */
  tmpreg |= RCC_PLLSAIDivR;
 800fbec:	68fa      	ldr	r2, [r7, #12]
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	4313      	orrs	r3, r2
 800fbf2:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
 800fbf4:	4b04      	ldr	r3, [pc, #16]	; (800fc08 <RCC_LTDCCLKDivConfig+0x38>)
 800fbf6:	68fa      	ldr	r2, [r7, #12]
 800fbf8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
 800fbfc:	3714      	adds	r7, #20
 800fbfe:	46bd      	mov	sp, r7
 800fc00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc04:	4770      	bx	lr
 800fc06:	bf00      	nop
 800fc08:	40023800 	.word	0x40023800

0800fc0c <RCC_TIMCLKPresConfig>:
  *                 else it is equal to [(HPRE * PPREx) / 4] if PPREx is corresponding 
  *                 to division by 8 or more.
  * @retval None
  */
void RCC_TIMCLKPresConfig(uint32_t RCC_TIMCLKPrescaler)
{
 800fc0c:	b480      	push	{r7}
 800fc0e:	b083      	sub	sp, #12
 800fc10:	af00      	add	r7, sp, #0
 800fc12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_TIMCLK_PRESCALER(RCC_TIMCLKPrescaler));

  *(__IO uint32_t *) DCKCFGR_TIMPRE_BB = RCC_TIMCLKPrescaler;
 800fc14:	4b03      	ldr	r3, [pc, #12]	; (800fc24 <RCC_TIMCLKPresConfig+0x18>)
 800fc16:	687a      	ldr	r2, [r7, #4]
 800fc18:	601a      	str	r2, [r3, #0]
  
}
 800fc1a:	370c      	adds	r7, #12
 800fc1c:	46bd      	mov	sp, r7
 800fc1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc22:	4770      	bx	lr
 800fc24:	424711e0 	.word	0x424711e0

0800fc28 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 800fc28:	b480      	push	{r7}
 800fc2a:	b083      	sub	sp, #12
 800fc2c:	af00      	add	r7, sp, #0
 800fc2e:	6078      	str	r0, [r7, #4]
 800fc30:	460b      	mov	r3, r1
 800fc32:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800fc34:	78fb      	ldrb	r3, [r7, #3]
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d006      	beq.n	800fc48 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 800fc3a:	4b09      	ldr	r3, [pc, #36]	; (800fc60 <RCC_AHB1PeriphClockCmd+0x38>)
 800fc3c:	4a08      	ldr	r2, [pc, #32]	; (800fc60 <RCC_AHB1PeriphClockCmd+0x38>)
 800fc3e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800fc40:	687a      	ldr	r2, [r7, #4]
 800fc42:	430a      	orrs	r2, r1
 800fc44:	631a      	str	r2, [r3, #48]	; 0x30
 800fc46:	e006      	b.n	800fc56 <RCC_AHB1PeriphClockCmd+0x2e>
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 800fc48:	4b05      	ldr	r3, [pc, #20]	; (800fc60 <RCC_AHB1PeriphClockCmd+0x38>)
 800fc4a:	4a05      	ldr	r2, [pc, #20]	; (800fc60 <RCC_AHB1PeriphClockCmd+0x38>)
 800fc4c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800fc4e:	687a      	ldr	r2, [r7, #4]
 800fc50:	43d2      	mvns	r2, r2
 800fc52:	400a      	ands	r2, r1
 800fc54:	631a      	str	r2, [r3, #48]	; 0x30
  }
}
 800fc56:	370c      	adds	r7, #12
 800fc58:	46bd      	mov	sp, r7
 800fc5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc5e:	4770      	bx	lr
 800fc60:	40023800 	.word	0x40023800

0800fc64 <RCC_AHB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 800fc64:	b480      	push	{r7}
 800fc66:	b083      	sub	sp, #12
 800fc68:	af00      	add	r7, sp, #0
 800fc6a:	6078      	str	r0, [r7, #4]
 800fc6c:	460b      	mov	r3, r1
 800fc6e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800fc70:	78fb      	ldrb	r3, [r7, #3]
 800fc72:	2b00      	cmp	r3, #0
 800fc74:	d006      	beq.n	800fc84 <RCC_AHB2PeriphClockCmd+0x20>
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 800fc76:	4b09      	ldr	r3, [pc, #36]	; (800fc9c <RCC_AHB2PeriphClockCmd+0x38>)
 800fc78:	4a08      	ldr	r2, [pc, #32]	; (800fc9c <RCC_AHB2PeriphClockCmd+0x38>)
 800fc7a:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800fc7c:	687a      	ldr	r2, [r7, #4]
 800fc7e:	430a      	orrs	r2, r1
 800fc80:	635a      	str	r2, [r3, #52]	; 0x34
 800fc82:	e006      	b.n	800fc92 <RCC_AHB2PeriphClockCmd+0x2e>
  }
  else
  {
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
 800fc84:	4b05      	ldr	r3, [pc, #20]	; (800fc9c <RCC_AHB2PeriphClockCmd+0x38>)
 800fc86:	4a05      	ldr	r2, [pc, #20]	; (800fc9c <RCC_AHB2PeriphClockCmd+0x38>)
 800fc88:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800fc8a:	687a      	ldr	r2, [r7, #4]
 800fc8c:	43d2      	mvns	r2, r2
 800fc8e:	400a      	ands	r2, r1
 800fc90:	635a      	str	r2, [r3, #52]	; 0x34
  }
}
 800fc92:	370c      	adds	r7, #12
 800fc94:	46bd      	mov	sp, r7
 800fc96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc9a:	4770      	bx	lr
 800fc9c:	40023800 	.word	0x40023800

0800fca0 <RCC_AHB3PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 800fca0:	b480      	push	{r7}
 800fca2:	b083      	sub	sp, #12
 800fca4:	af00      	add	r7, sp, #0
 800fca6:	6078      	str	r0, [r7, #4]
 800fca8:	460b      	mov	r3, r1
 800fcaa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800fcac:	78fb      	ldrb	r3, [r7, #3]
 800fcae:	2b00      	cmp	r3, #0
 800fcb0:	d006      	beq.n	800fcc0 <RCC_AHB3PeriphClockCmd+0x20>
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
 800fcb2:	4b09      	ldr	r3, [pc, #36]	; (800fcd8 <RCC_AHB3PeriphClockCmd+0x38>)
 800fcb4:	4a08      	ldr	r2, [pc, #32]	; (800fcd8 <RCC_AHB3PeriphClockCmd+0x38>)
 800fcb6:	6b91      	ldr	r1, [r2, #56]	; 0x38
 800fcb8:	687a      	ldr	r2, [r7, #4]
 800fcba:	430a      	orrs	r2, r1
 800fcbc:	639a      	str	r2, [r3, #56]	; 0x38
 800fcbe:	e006      	b.n	800fcce <RCC_AHB3PeriphClockCmd+0x2e>
  }
  else
  {
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
 800fcc0:	4b05      	ldr	r3, [pc, #20]	; (800fcd8 <RCC_AHB3PeriphClockCmd+0x38>)
 800fcc2:	4a05      	ldr	r2, [pc, #20]	; (800fcd8 <RCC_AHB3PeriphClockCmd+0x38>)
 800fcc4:	6b91      	ldr	r1, [r2, #56]	; 0x38
 800fcc6:	687a      	ldr	r2, [r7, #4]
 800fcc8:	43d2      	mvns	r2, r2
 800fcca:	400a      	ands	r2, r1
 800fccc:	639a      	str	r2, [r3, #56]	; 0x38
  }
}
 800fcce:	370c      	adds	r7, #12
 800fcd0:	46bd      	mov	sp, r7
 800fcd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcd6:	4770      	bx	lr
 800fcd8:	40023800 	.word	0x40023800

0800fcdc <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 800fcdc:	b480      	push	{r7}
 800fcde:	b083      	sub	sp, #12
 800fce0:	af00      	add	r7, sp, #0
 800fce2:	6078      	str	r0, [r7, #4]
 800fce4:	460b      	mov	r3, r1
 800fce6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800fce8:	78fb      	ldrb	r3, [r7, #3]
 800fcea:	2b00      	cmp	r3, #0
 800fcec:	d006      	beq.n	800fcfc <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 800fcee:	4b09      	ldr	r3, [pc, #36]	; (800fd14 <RCC_APB1PeriphClockCmd+0x38>)
 800fcf0:	4a08      	ldr	r2, [pc, #32]	; (800fd14 <RCC_APB1PeriphClockCmd+0x38>)
 800fcf2:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800fcf4:	687a      	ldr	r2, [r7, #4]
 800fcf6:	430a      	orrs	r2, r1
 800fcf8:	641a      	str	r2, [r3, #64]	; 0x40
 800fcfa:	e006      	b.n	800fd0a <RCC_APB1PeriphClockCmd+0x2e>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 800fcfc:	4b05      	ldr	r3, [pc, #20]	; (800fd14 <RCC_APB1PeriphClockCmd+0x38>)
 800fcfe:	4a05      	ldr	r2, [pc, #20]	; (800fd14 <RCC_APB1PeriphClockCmd+0x38>)
 800fd00:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800fd02:	687a      	ldr	r2, [r7, #4]
 800fd04:	43d2      	mvns	r2, r2
 800fd06:	400a      	ands	r2, r1
 800fd08:	641a      	str	r2, [r3, #64]	; 0x40
  }
}
 800fd0a:	370c      	adds	r7, #12
 800fd0c:	46bd      	mov	sp, r7
 800fd0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd12:	4770      	bx	lr
 800fd14:	40023800 	.word	0x40023800

0800fd18 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 800fd18:	b480      	push	{r7}
 800fd1a:	b083      	sub	sp, #12
 800fd1c:	af00      	add	r7, sp, #0
 800fd1e:	6078      	str	r0, [r7, #4]
 800fd20:	460b      	mov	r3, r1
 800fd22:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800fd24:	78fb      	ldrb	r3, [r7, #3]
 800fd26:	2b00      	cmp	r3, #0
 800fd28:	d006      	beq.n	800fd38 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800fd2a:	4b09      	ldr	r3, [pc, #36]	; (800fd50 <RCC_APB2PeriphClockCmd+0x38>)
 800fd2c:	4a08      	ldr	r2, [pc, #32]	; (800fd50 <RCC_APB2PeriphClockCmd+0x38>)
 800fd2e:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800fd30:	687a      	ldr	r2, [r7, #4]
 800fd32:	430a      	orrs	r2, r1
 800fd34:	645a      	str	r2, [r3, #68]	; 0x44
 800fd36:	e006      	b.n	800fd46 <RCC_APB2PeriphClockCmd+0x2e>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 800fd38:	4b05      	ldr	r3, [pc, #20]	; (800fd50 <RCC_APB2PeriphClockCmd+0x38>)
 800fd3a:	4a05      	ldr	r2, [pc, #20]	; (800fd50 <RCC_APB2PeriphClockCmd+0x38>)
 800fd3c:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800fd3e:	687a      	ldr	r2, [r7, #4]
 800fd40:	43d2      	mvns	r2, r2
 800fd42:	400a      	ands	r2, r1
 800fd44:	645a      	str	r2, [r3, #68]	; 0x44
  }
}
 800fd46:	370c      	adds	r7, #12
 800fd48:	46bd      	mov	sp, r7
 800fd4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd4e:	4770      	bx	lr
 800fd50:	40023800 	.word	0x40023800

0800fd54 <RCC_AHB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphResetCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 800fd54:	b480      	push	{r7}
 800fd56:	b083      	sub	sp, #12
 800fd58:	af00      	add	r7, sp, #0
 800fd5a:	6078      	str	r0, [r7, #4]
 800fd5c:	460b      	mov	r3, r1
 800fd5e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800fd60:	78fb      	ldrb	r3, [r7, #3]
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	d006      	beq.n	800fd74 <RCC_AHB1PeriphResetCmd+0x20>
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 800fd66:	4b09      	ldr	r3, [pc, #36]	; (800fd8c <RCC_AHB1PeriphResetCmd+0x38>)
 800fd68:	4a08      	ldr	r2, [pc, #32]	; (800fd8c <RCC_AHB1PeriphResetCmd+0x38>)
 800fd6a:	6911      	ldr	r1, [r2, #16]
 800fd6c:	687a      	ldr	r2, [r7, #4]
 800fd6e:	430a      	orrs	r2, r1
 800fd70:	611a      	str	r2, [r3, #16]
 800fd72:	e006      	b.n	800fd82 <RCC_AHB1PeriphResetCmd+0x2e>
  }
  else
  {
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
 800fd74:	4b05      	ldr	r3, [pc, #20]	; (800fd8c <RCC_AHB1PeriphResetCmd+0x38>)
 800fd76:	4a05      	ldr	r2, [pc, #20]	; (800fd8c <RCC_AHB1PeriphResetCmd+0x38>)
 800fd78:	6911      	ldr	r1, [r2, #16]
 800fd7a:	687a      	ldr	r2, [r7, #4]
 800fd7c:	43d2      	mvns	r2, r2
 800fd7e:	400a      	ands	r2, r1
 800fd80:	611a      	str	r2, [r3, #16]
  }
}
 800fd82:	370c      	adds	r7, #12
 800fd84:	46bd      	mov	sp, r7
 800fd86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd8a:	4770      	bx	lr
 800fd8c:	40023800 	.word	0x40023800

0800fd90 <RCC_AHB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphResetCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 800fd90:	b480      	push	{r7}
 800fd92:	b083      	sub	sp, #12
 800fd94:	af00      	add	r7, sp, #0
 800fd96:	6078      	str	r0, [r7, #4]
 800fd98:	460b      	mov	r3, r1
 800fd9a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800fd9c:	78fb      	ldrb	r3, [r7, #3]
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	d006      	beq.n	800fdb0 <RCC_AHB2PeriphResetCmd+0x20>
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
 800fda2:	4b09      	ldr	r3, [pc, #36]	; (800fdc8 <RCC_AHB2PeriphResetCmd+0x38>)
 800fda4:	4a08      	ldr	r2, [pc, #32]	; (800fdc8 <RCC_AHB2PeriphResetCmd+0x38>)
 800fda6:	6951      	ldr	r1, [r2, #20]
 800fda8:	687a      	ldr	r2, [r7, #4]
 800fdaa:	430a      	orrs	r2, r1
 800fdac:	615a      	str	r2, [r3, #20]
 800fdae:	e006      	b.n	800fdbe <RCC_AHB2PeriphResetCmd+0x2e>
  }
  else
  {
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
 800fdb0:	4b05      	ldr	r3, [pc, #20]	; (800fdc8 <RCC_AHB2PeriphResetCmd+0x38>)
 800fdb2:	4a05      	ldr	r2, [pc, #20]	; (800fdc8 <RCC_AHB2PeriphResetCmd+0x38>)
 800fdb4:	6951      	ldr	r1, [r2, #20]
 800fdb6:	687a      	ldr	r2, [r7, #4]
 800fdb8:	43d2      	mvns	r2, r2
 800fdba:	400a      	ands	r2, r1
 800fdbc:	615a      	str	r2, [r3, #20]
  }
}
 800fdbe:	370c      	adds	r7, #12
 800fdc0:	46bd      	mov	sp, r7
 800fdc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdc6:	4770      	bx	lr
 800fdc8:	40023800 	.word	0x40023800

0800fdcc <RCC_AHB3PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphResetCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 800fdcc:	b480      	push	{r7}
 800fdce:	b083      	sub	sp, #12
 800fdd0:	af00      	add	r7, sp, #0
 800fdd2:	6078      	str	r0, [r7, #4]
 800fdd4:	460b      	mov	r3, r1
 800fdd6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800fdd8:	78fb      	ldrb	r3, [r7, #3]
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	d006      	beq.n	800fdec <RCC_AHB3PeriphResetCmd+0x20>
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
 800fdde:	4b09      	ldr	r3, [pc, #36]	; (800fe04 <RCC_AHB3PeriphResetCmd+0x38>)
 800fde0:	4a08      	ldr	r2, [pc, #32]	; (800fe04 <RCC_AHB3PeriphResetCmd+0x38>)
 800fde2:	6991      	ldr	r1, [r2, #24]
 800fde4:	687a      	ldr	r2, [r7, #4]
 800fde6:	430a      	orrs	r2, r1
 800fde8:	619a      	str	r2, [r3, #24]
 800fdea:	e006      	b.n	800fdfa <RCC_AHB3PeriphResetCmd+0x2e>
  }
  else
  {
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
 800fdec:	4b05      	ldr	r3, [pc, #20]	; (800fe04 <RCC_AHB3PeriphResetCmd+0x38>)
 800fdee:	4a05      	ldr	r2, [pc, #20]	; (800fe04 <RCC_AHB3PeriphResetCmd+0x38>)
 800fdf0:	6991      	ldr	r1, [r2, #24]
 800fdf2:	687a      	ldr	r2, [r7, #4]
 800fdf4:	43d2      	mvns	r2, r2
 800fdf6:	400a      	ands	r2, r1
 800fdf8:	619a      	str	r2, [r3, #24]
  }
}
 800fdfa:	370c      	adds	r7, #12
 800fdfc:	46bd      	mov	sp, r7
 800fdfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe02:	4770      	bx	lr
 800fe04:	40023800 	.word	0x40023800

0800fe08 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 800fe08:	b480      	push	{r7}
 800fe0a:	b083      	sub	sp, #12
 800fe0c:	af00      	add	r7, sp, #0
 800fe0e:	6078      	str	r0, [r7, #4]
 800fe10:	460b      	mov	r3, r1
 800fe12:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800fe14:	78fb      	ldrb	r3, [r7, #3]
 800fe16:	2b00      	cmp	r3, #0
 800fe18:	d006      	beq.n	800fe28 <RCC_APB1PeriphResetCmd+0x20>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 800fe1a:	4b09      	ldr	r3, [pc, #36]	; (800fe40 <RCC_APB1PeriphResetCmd+0x38>)
 800fe1c:	4a08      	ldr	r2, [pc, #32]	; (800fe40 <RCC_APB1PeriphResetCmd+0x38>)
 800fe1e:	6a11      	ldr	r1, [r2, #32]
 800fe20:	687a      	ldr	r2, [r7, #4]
 800fe22:	430a      	orrs	r2, r1
 800fe24:	621a      	str	r2, [r3, #32]
 800fe26:	e006      	b.n	800fe36 <RCC_APB1PeriphResetCmd+0x2e>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 800fe28:	4b05      	ldr	r3, [pc, #20]	; (800fe40 <RCC_APB1PeriphResetCmd+0x38>)
 800fe2a:	4a05      	ldr	r2, [pc, #20]	; (800fe40 <RCC_APB1PeriphResetCmd+0x38>)
 800fe2c:	6a11      	ldr	r1, [r2, #32]
 800fe2e:	687a      	ldr	r2, [r7, #4]
 800fe30:	43d2      	mvns	r2, r2
 800fe32:	400a      	ands	r2, r1
 800fe34:	621a      	str	r2, [r3, #32]
  }
}
 800fe36:	370c      	adds	r7, #12
 800fe38:	46bd      	mov	sp, r7
 800fe3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe3e:	4770      	bx	lr
 800fe40:	40023800 	.word	0x40023800

0800fe44 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 800fe44:	b480      	push	{r7}
 800fe46:	b083      	sub	sp, #12
 800fe48:	af00      	add	r7, sp, #0
 800fe4a:	6078      	str	r0, [r7, #4]
 800fe4c:	460b      	mov	r3, r1
 800fe4e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800fe50:	78fb      	ldrb	r3, [r7, #3]
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	d006      	beq.n	800fe64 <RCC_APB2PeriphResetCmd+0x20>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 800fe56:	4b09      	ldr	r3, [pc, #36]	; (800fe7c <RCC_APB2PeriphResetCmd+0x38>)
 800fe58:	4a08      	ldr	r2, [pc, #32]	; (800fe7c <RCC_APB2PeriphResetCmd+0x38>)
 800fe5a:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800fe5c:	687a      	ldr	r2, [r7, #4]
 800fe5e:	430a      	orrs	r2, r1
 800fe60:	625a      	str	r2, [r3, #36]	; 0x24
 800fe62:	e006      	b.n	800fe72 <RCC_APB2PeriphResetCmd+0x2e>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 800fe64:	4b05      	ldr	r3, [pc, #20]	; (800fe7c <RCC_APB2PeriphResetCmd+0x38>)
 800fe66:	4a05      	ldr	r2, [pc, #20]	; (800fe7c <RCC_APB2PeriphResetCmd+0x38>)
 800fe68:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800fe6a:	687a      	ldr	r2, [r7, #4]
 800fe6c:	43d2      	mvns	r2, r2
 800fe6e:	400a      	ands	r2, r1
 800fe70:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800fe72:	370c      	adds	r7, #12
 800fe74:	46bd      	mov	sp, r7
 800fe76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe7a:	4770      	bx	lr
 800fe7c:	40023800 	.word	0x40023800

0800fe80 <RCC_AHB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 800fe80:	b480      	push	{r7}
 800fe82:	b083      	sub	sp, #12
 800fe84:	af00      	add	r7, sp, #0
 800fe86:	6078      	str	r0, [r7, #4]
 800fe88:	460b      	mov	r3, r1
 800fe8a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800fe8c:	78fb      	ldrb	r3, [r7, #3]
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	d006      	beq.n	800fea0 <RCC_AHB1PeriphClockLPModeCmd+0x20>
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
 800fe92:	4b09      	ldr	r3, [pc, #36]	; (800feb8 <RCC_AHB1PeriphClockLPModeCmd+0x38>)
 800fe94:	4a08      	ldr	r2, [pc, #32]	; (800feb8 <RCC_AHB1PeriphClockLPModeCmd+0x38>)
 800fe96:	6d11      	ldr	r1, [r2, #80]	; 0x50
 800fe98:	687a      	ldr	r2, [r7, #4]
 800fe9a:	430a      	orrs	r2, r1
 800fe9c:	651a      	str	r2, [r3, #80]	; 0x50
 800fe9e:	e006      	b.n	800feae <RCC_AHB1PeriphClockLPModeCmd+0x2e>
  }
  else
  {
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
 800fea0:	4b05      	ldr	r3, [pc, #20]	; (800feb8 <RCC_AHB1PeriphClockLPModeCmd+0x38>)
 800fea2:	4a05      	ldr	r2, [pc, #20]	; (800feb8 <RCC_AHB1PeriphClockLPModeCmd+0x38>)
 800fea4:	6d11      	ldr	r1, [r2, #80]	; 0x50
 800fea6:	687a      	ldr	r2, [r7, #4]
 800fea8:	43d2      	mvns	r2, r2
 800feaa:	400a      	ands	r2, r1
 800feac:	651a      	str	r2, [r3, #80]	; 0x50
  }
}
 800feae:	370c      	adds	r7, #12
 800feb0:	46bd      	mov	sp, r7
 800feb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feb6:	4770      	bx	lr
 800feb8:	40023800 	.word	0x40023800

0800febc <RCC_AHB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 800febc:	b480      	push	{r7}
 800febe:	b083      	sub	sp, #12
 800fec0:	af00      	add	r7, sp, #0
 800fec2:	6078      	str	r0, [r7, #4]
 800fec4:	460b      	mov	r3, r1
 800fec6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800fec8:	78fb      	ldrb	r3, [r7, #3]
 800feca:	2b00      	cmp	r3, #0
 800fecc:	d006      	beq.n	800fedc <RCC_AHB2PeriphClockLPModeCmd+0x20>
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
 800fece:	4b09      	ldr	r3, [pc, #36]	; (800fef4 <RCC_AHB2PeriphClockLPModeCmd+0x38>)
 800fed0:	4a08      	ldr	r2, [pc, #32]	; (800fef4 <RCC_AHB2PeriphClockLPModeCmd+0x38>)
 800fed2:	6d51      	ldr	r1, [r2, #84]	; 0x54
 800fed4:	687a      	ldr	r2, [r7, #4]
 800fed6:	430a      	orrs	r2, r1
 800fed8:	655a      	str	r2, [r3, #84]	; 0x54
 800feda:	e006      	b.n	800feea <RCC_AHB2PeriphClockLPModeCmd+0x2e>
  }
  else
  {
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
 800fedc:	4b05      	ldr	r3, [pc, #20]	; (800fef4 <RCC_AHB2PeriphClockLPModeCmd+0x38>)
 800fede:	4a05      	ldr	r2, [pc, #20]	; (800fef4 <RCC_AHB2PeriphClockLPModeCmd+0x38>)
 800fee0:	6d51      	ldr	r1, [r2, #84]	; 0x54
 800fee2:	687a      	ldr	r2, [r7, #4]
 800fee4:	43d2      	mvns	r2, r2
 800fee6:	400a      	ands	r2, r1
 800fee8:	655a      	str	r2, [r3, #84]	; 0x54
  }
}
 800feea:	370c      	adds	r7, #12
 800feec:	46bd      	mov	sp, r7
 800feee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fef2:	4770      	bx	lr
 800fef4:	40023800 	.word	0x40023800

0800fef8 <RCC_AHB3PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 800fef8:	b480      	push	{r7}
 800fefa:	b083      	sub	sp, #12
 800fefc:	af00      	add	r7, sp, #0
 800fefe:	6078      	str	r0, [r7, #4]
 800ff00:	460b      	mov	r3, r1
 800ff02:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800ff04:	78fb      	ldrb	r3, [r7, #3]
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	d006      	beq.n	800ff18 <RCC_AHB3PeriphClockLPModeCmd+0x20>
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
 800ff0a:	4b09      	ldr	r3, [pc, #36]	; (800ff30 <RCC_AHB3PeriphClockLPModeCmd+0x38>)
 800ff0c:	4a08      	ldr	r2, [pc, #32]	; (800ff30 <RCC_AHB3PeriphClockLPModeCmd+0x38>)
 800ff0e:	6d91      	ldr	r1, [r2, #88]	; 0x58
 800ff10:	687a      	ldr	r2, [r7, #4]
 800ff12:	430a      	orrs	r2, r1
 800ff14:	659a      	str	r2, [r3, #88]	; 0x58
 800ff16:	e006      	b.n	800ff26 <RCC_AHB3PeriphClockLPModeCmd+0x2e>
  }
  else
  {
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
 800ff18:	4b05      	ldr	r3, [pc, #20]	; (800ff30 <RCC_AHB3PeriphClockLPModeCmd+0x38>)
 800ff1a:	4a05      	ldr	r2, [pc, #20]	; (800ff30 <RCC_AHB3PeriphClockLPModeCmd+0x38>)
 800ff1c:	6d91      	ldr	r1, [r2, #88]	; 0x58
 800ff1e:	687a      	ldr	r2, [r7, #4]
 800ff20:	43d2      	mvns	r2, r2
 800ff22:	400a      	ands	r2, r1
 800ff24:	659a      	str	r2, [r3, #88]	; 0x58
  }
}
 800ff26:	370c      	adds	r7, #12
 800ff28:	46bd      	mov	sp, r7
 800ff2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff2e:	4770      	bx	lr
 800ff30:	40023800 	.word	0x40023800

0800ff34 <RCC_APB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 800ff34:	b480      	push	{r7}
 800ff36:	b083      	sub	sp, #12
 800ff38:	af00      	add	r7, sp, #0
 800ff3a:	6078      	str	r0, [r7, #4]
 800ff3c:	460b      	mov	r3, r1
 800ff3e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800ff40:	78fb      	ldrb	r3, [r7, #3]
 800ff42:	2b00      	cmp	r3, #0
 800ff44:	d006      	beq.n	800ff54 <RCC_APB1PeriphClockLPModeCmd+0x20>
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
 800ff46:	4b09      	ldr	r3, [pc, #36]	; (800ff6c <RCC_APB1PeriphClockLPModeCmd+0x38>)
 800ff48:	4a08      	ldr	r2, [pc, #32]	; (800ff6c <RCC_APB1PeriphClockLPModeCmd+0x38>)
 800ff4a:	6e11      	ldr	r1, [r2, #96]	; 0x60
 800ff4c:	687a      	ldr	r2, [r7, #4]
 800ff4e:	430a      	orrs	r2, r1
 800ff50:	661a      	str	r2, [r3, #96]	; 0x60
 800ff52:	e006      	b.n	800ff62 <RCC_APB1PeriphClockLPModeCmd+0x2e>
  }
  else
  {
    RCC->APB1LPENR &= ~RCC_APB1Periph;
 800ff54:	4b05      	ldr	r3, [pc, #20]	; (800ff6c <RCC_APB1PeriphClockLPModeCmd+0x38>)
 800ff56:	4a05      	ldr	r2, [pc, #20]	; (800ff6c <RCC_APB1PeriphClockLPModeCmd+0x38>)
 800ff58:	6e11      	ldr	r1, [r2, #96]	; 0x60
 800ff5a:	687a      	ldr	r2, [r7, #4]
 800ff5c:	43d2      	mvns	r2, r2
 800ff5e:	400a      	ands	r2, r1
 800ff60:	661a      	str	r2, [r3, #96]	; 0x60
  }
}
 800ff62:	370c      	adds	r7, #12
 800ff64:	46bd      	mov	sp, r7
 800ff66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff6a:	4770      	bx	lr
 800ff6c:	40023800 	.word	0x40023800

0800ff70 <RCC_APB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 800ff70:	b480      	push	{r7}
 800ff72:	b083      	sub	sp, #12
 800ff74:	af00      	add	r7, sp, #0
 800ff76:	6078      	str	r0, [r7, #4]
 800ff78:	460b      	mov	r3, r1
 800ff7a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800ff7c:	78fb      	ldrb	r3, [r7, #3]
 800ff7e:	2b00      	cmp	r3, #0
 800ff80:	d006      	beq.n	800ff90 <RCC_APB2PeriphClockLPModeCmd+0x20>
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
 800ff82:	4b09      	ldr	r3, [pc, #36]	; (800ffa8 <RCC_APB2PeriphClockLPModeCmd+0x38>)
 800ff84:	4a08      	ldr	r2, [pc, #32]	; (800ffa8 <RCC_APB2PeriphClockLPModeCmd+0x38>)
 800ff86:	6e51      	ldr	r1, [r2, #100]	; 0x64
 800ff88:	687a      	ldr	r2, [r7, #4]
 800ff8a:	430a      	orrs	r2, r1
 800ff8c:	665a      	str	r2, [r3, #100]	; 0x64
 800ff8e:	e006      	b.n	800ff9e <RCC_APB2PeriphClockLPModeCmd+0x2e>
  }
  else
  {
    RCC->APB2LPENR &= ~RCC_APB2Periph;
 800ff90:	4b05      	ldr	r3, [pc, #20]	; (800ffa8 <RCC_APB2PeriphClockLPModeCmd+0x38>)
 800ff92:	4a05      	ldr	r2, [pc, #20]	; (800ffa8 <RCC_APB2PeriphClockLPModeCmd+0x38>)
 800ff94:	6e51      	ldr	r1, [r2, #100]	; 0x64
 800ff96:	687a      	ldr	r2, [r7, #4]
 800ff98:	43d2      	mvns	r2, r2
 800ff9a:	400a      	ands	r2, r1
 800ff9c:	665a      	str	r2, [r3, #100]	; 0x64
  }
}
 800ff9e:	370c      	adds	r7, #12
 800ffa0:	46bd      	mov	sp, r7
 800ffa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffa6:	4770      	bx	lr
 800ffa8:	40023800 	.word	0x40023800

0800ffac <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
 800ffac:	b480      	push	{r7}
 800ffae:	b083      	sub	sp, #12
 800ffb0:	af00      	add	r7, sp, #0
 800ffb2:	4602      	mov	r2, r0
 800ffb4:	460b      	mov	r3, r1
 800ffb6:	71fa      	strb	r2, [r7, #7]
 800ffb8:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800ffba:	79bb      	ldrb	r3, [r7, #6]
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	d008      	beq.n	800ffd2 <RCC_ITConfig+0x26>
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 800ffc0:	4b0b      	ldr	r3, [pc, #44]	; (800fff0 <RCC_ITConfig+0x44>)
 800ffc2:	4a0b      	ldr	r2, [pc, #44]	; (800fff0 <RCC_ITConfig+0x44>)
 800ffc4:	7812      	ldrb	r2, [r2, #0]
 800ffc6:	b2d1      	uxtb	r1, r2
 800ffc8:	79fa      	ldrb	r2, [r7, #7]
 800ffca:	430a      	orrs	r2, r1
 800ffcc:	b2d2      	uxtb	r2, r2
 800ffce:	701a      	strb	r2, [r3, #0]
 800ffd0:	e009      	b.n	800ffe6 <RCC_ITConfig+0x3a>
  }
  else
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 800ffd2:	4b07      	ldr	r3, [pc, #28]	; (800fff0 <RCC_ITConfig+0x44>)
 800ffd4:	4a06      	ldr	r2, [pc, #24]	; (800fff0 <RCC_ITConfig+0x44>)
 800ffd6:	7812      	ldrb	r2, [r2, #0]
 800ffd8:	b2d1      	uxtb	r1, r2
 800ffda:	79fa      	ldrb	r2, [r7, #7]
 800ffdc:	43d2      	mvns	r2, r2
 800ffde:	b2d2      	uxtb	r2, r2
 800ffe0:	400a      	ands	r2, r1
 800ffe2:	b2d2      	uxtb	r2, r2
 800ffe4:	701a      	strb	r2, [r3, #0]
  }
}
 800ffe6:	370c      	adds	r7, #12
 800ffe8:	46bd      	mov	sp, r7
 800ffea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffee:	4770      	bx	lr
 800fff0:	4002380d 	.word	0x4002380d

0800fff4 <RCC_GetFlagStatus>:
  *            @arg RCC_FLAG_WWDGRST: Window Watchdog reset
  *            @arg RCC_FLAG_LPWRRST: Low Power reset
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
 800fff4:	b480      	push	{r7}
 800fff6:	b087      	sub	sp, #28
 800fff8:	af00      	add	r7, sp, #0
 800fffa:	4603      	mov	r3, r0
 800fffc:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 800fffe:	2300      	movs	r3, #0
 8010000:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
 8010002:	2300      	movs	r3, #0
 8010004:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
 8010006:	2300      	movs	r3, #0
 8010008:	74fb      	strb	r3, [r7, #19]

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 801000a:	79fb      	ldrb	r3, [r7, #7]
 801000c:	095b      	lsrs	r3, r3, #5
 801000e:	b2db      	uxtb	r3, r3
 8010010:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
 8010012:	68fb      	ldr	r3, [r7, #12]
 8010014:	2b01      	cmp	r3, #1
 8010016:	d103      	bne.n	8010020 <RCC_GetFlagStatus+0x2c>
  {
    statusreg = RCC->CR;
 8010018:	4b12      	ldr	r3, [pc, #72]	; (8010064 <RCC_GetFlagStatus+0x70>)
 801001a:	681b      	ldr	r3, [r3, #0]
 801001c:	617b      	str	r3, [r7, #20]
 801001e:	e009      	b.n	8010034 <RCC_GetFlagStatus+0x40>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 8010020:	68fb      	ldr	r3, [r7, #12]
 8010022:	2b02      	cmp	r3, #2
 8010024:	d103      	bne.n	801002e <RCC_GetFlagStatus+0x3a>
  {
    statusreg = RCC->BDCR;
 8010026:	4b0f      	ldr	r3, [pc, #60]	; (8010064 <RCC_GetFlagStatus+0x70>)
 8010028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801002a:	617b      	str	r3, [r7, #20]
 801002c:	e002      	b.n	8010034 <RCC_GetFlagStatus+0x40>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 801002e:	4b0d      	ldr	r3, [pc, #52]	; (8010064 <RCC_GetFlagStatus+0x70>)
 8010030:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010032:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
 8010034:	79fb      	ldrb	r3, [r7, #7]
 8010036:	f003 031f 	and.w	r3, r3, #31
 801003a:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 801003c:	68fb      	ldr	r3, [r7, #12]
 801003e:	697a      	ldr	r2, [r7, #20]
 8010040:	fa22 f303 	lsr.w	r3, r2, r3
 8010044:	f003 0301 	and.w	r3, r3, #1
 8010048:	2b00      	cmp	r3, #0
 801004a:	d002      	beq.n	8010052 <RCC_GetFlagStatus+0x5e>
  {
    bitstatus = SET;
 801004c:	2301      	movs	r3, #1
 801004e:	74fb      	strb	r3, [r7, #19]
 8010050:	e001      	b.n	8010056 <RCC_GetFlagStatus+0x62>
  }
  else
  {
    bitstatus = RESET;
 8010052:	2300      	movs	r3, #0
 8010054:	74fb      	strb	r3, [r7, #19]
  }
  /* Return the flag status */
  return bitstatus;
 8010056:	7cfb      	ldrb	r3, [r7, #19]
}
 8010058:	4618      	mov	r0, r3
 801005a:	371c      	adds	r7, #28
 801005c:	46bd      	mov	sp, r7
 801005e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010062:	4770      	bx	lr
 8010064:	40023800 	.word	0x40023800

08010068 <RCC_ClearFlag>:
  *         RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
 8010068:	b480      	push	{r7}
 801006a:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
 801006c:	4b04      	ldr	r3, [pc, #16]	; (8010080 <RCC_ClearFlag+0x18>)
 801006e:	4a04      	ldr	r2, [pc, #16]	; (8010080 <RCC_ClearFlag+0x18>)
 8010070:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8010072:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8010076:	675a      	str	r2, [r3, #116]	; 0x74
}
 8010078:	46bd      	mov	sp, r7
 801007a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801007e:	4770      	bx	lr
 8010080:	40023800 	.word	0x40023800

08010084 <RCC_GetITStatus>:
  *            @arg RCC_IT_PLLSAIRDY: PLLSAI clock ready interrupt (only for STM32F42xxx/43xxx devices)    
  *            @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
 8010084:	b480      	push	{r7}
 8010086:	b085      	sub	sp, #20
 8010088:	af00      	add	r7, sp, #0
 801008a:	4603      	mov	r3, r0
 801008c:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
 801008e:	2300      	movs	r3, #0
 8010090:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 8010092:	4b09      	ldr	r3, [pc, #36]	; (80100b8 <RCC_GetITStatus+0x34>)
 8010094:	68da      	ldr	r2, [r3, #12]
 8010096:	79fb      	ldrb	r3, [r7, #7]
 8010098:	4013      	ands	r3, r2
 801009a:	2b00      	cmp	r3, #0
 801009c:	d002      	beq.n	80100a4 <RCC_GetITStatus+0x20>
  {
    bitstatus = SET;
 801009e:	2301      	movs	r3, #1
 80100a0:	73fb      	strb	r3, [r7, #15]
 80100a2:	e001      	b.n	80100a8 <RCC_GetITStatus+0x24>
  }
  else
  {
    bitstatus = RESET;
 80100a4:	2300      	movs	r3, #0
 80100a6:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the RCC_IT status */
  return  bitstatus;
 80100a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80100aa:	4618      	mov	r0, r3
 80100ac:	3714      	adds	r7, #20
 80100ae:	46bd      	mov	sp, r7
 80100b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100b4:	4770      	bx	lr
 80100b6:	bf00      	nop
 80100b8:	40023800 	.word	0x40023800

080100bc <RCC_ClearITPendingBit>:
  *            @arg RCC_IT_PLLSAIRDY: PLLSAI ready interrupt (only for STM32F42xxx/43xxx devices)   
  *            @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
 80100bc:	b480      	push	{r7}
 80100be:	b083      	sub	sp, #12
 80100c0:	af00      	add	r7, sp, #0
 80100c2:	4603      	mov	r3, r0
 80100c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 80100c6:	4b04      	ldr	r3, [pc, #16]	; (80100d8 <RCC_ClearITPendingBit+0x1c>)
 80100c8:	79fa      	ldrb	r2, [r7, #7]
 80100ca:	701a      	strb	r2, [r3, #0]
}
 80100cc:	370c      	adds	r7, #12
 80100ce:	46bd      	mov	sp, r7
 80100d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100d4:	4770      	bx	lr
 80100d6:	bf00      	nop
 80100d8:	4002380e 	.word	0x4002380e

080100dc <RNG_DeInit>:
  * @brief  De-initializes the RNG peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void RNG_DeInit(void)
{
 80100dc:	b580      	push	{r7, lr}
 80100de:	af00      	add	r7, sp, #0
  /* Enable RNG reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_RNG, ENABLE);
 80100e0:	2040      	movs	r0, #64	; 0x40
 80100e2:	2101      	movs	r1, #1
 80100e4:	f7ff fe54 	bl	800fd90 <RCC_AHB2PeriphResetCmd>

  /* Release RNG from reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_RNG, DISABLE);
 80100e8:	2040      	movs	r0, #64	; 0x40
 80100ea:	2100      	movs	r1, #0
 80100ec:	f7ff fe50 	bl	800fd90 <RCC_AHB2PeriphResetCmd>
}
 80100f0:	bd80      	pop	{r7, pc}
 80100f2:	bf00      	nop

080100f4 <RNG_Cmd>:
  * @param  NewState: new state of the RNG peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RNG_Cmd(FunctionalState NewState)
{
 80100f4:	b480      	push	{r7}
 80100f6:	b083      	sub	sp, #12
 80100f8:	af00      	add	r7, sp, #0
 80100fa:	4603      	mov	r3, r0
 80100fc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80100fe:	79fb      	ldrb	r3, [r7, #7]
 8010100:	2b00      	cmp	r3, #0
 8010102:	d006      	beq.n	8010112 <RNG_Cmd+0x1e>
  {
    /* Enable the RNG */
    RNG->CR |= RNG_CR_RNGEN;
 8010104:	4b08      	ldr	r3, [pc, #32]	; (8010128 <RNG_Cmd+0x34>)
 8010106:	4a08      	ldr	r2, [pc, #32]	; (8010128 <RNG_Cmd+0x34>)
 8010108:	6812      	ldr	r2, [r2, #0]
 801010a:	f042 0204 	orr.w	r2, r2, #4
 801010e:	601a      	str	r2, [r3, #0]
 8010110:	e005      	b.n	801011e <RNG_Cmd+0x2a>
  }
  else
  {
    /* Disable the RNG */
    RNG->CR &= ~RNG_CR_RNGEN;
 8010112:	4b05      	ldr	r3, [pc, #20]	; (8010128 <RNG_Cmd+0x34>)
 8010114:	4a04      	ldr	r2, [pc, #16]	; (8010128 <RNG_Cmd+0x34>)
 8010116:	6812      	ldr	r2, [r2, #0]
 8010118:	f022 0204 	bic.w	r2, r2, #4
 801011c:	601a      	str	r2, [r3, #0]
  }
}
 801011e:	370c      	adds	r7, #12
 8010120:	46bd      	mov	sp, r7
 8010122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010126:	4770      	bx	lr
 8010128:	50060800 	.word	0x50060800

0801012c <RNG_GetRandomNumber>:
  *         
  * @param  None
  * @retval 32-bit random number.
  */
uint32_t RNG_GetRandomNumber(void)
{
 801012c:	b480      	push	{r7}
 801012e:	af00      	add	r7, sp, #0
  /* Return the 32 bit random number from the DR register */
  return RNG->DR;
 8010130:	4b03      	ldr	r3, [pc, #12]	; (8010140 <RNG_GetRandomNumber+0x14>)
 8010132:	689b      	ldr	r3, [r3, #8]
}
 8010134:	4618      	mov	r0, r3
 8010136:	46bd      	mov	sp, r7
 8010138:	f85d 7b04 	ldr.w	r7, [sp], #4
 801013c:	4770      	bx	lr
 801013e:	bf00      	nop
 8010140:	50060800 	.word	0x50060800

08010144 <RNG_ITConfig>:
  * @param  NewState: new state of the RNG interrupt.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RNG_ITConfig(FunctionalState NewState)
{
 8010144:	b480      	push	{r7}
 8010146:	b083      	sub	sp, #12
 8010148:	af00      	add	r7, sp, #0
 801014a:	4603      	mov	r3, r0
 801014c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 801014e:	79fb      	ldrb	r3, [r7, #7]
 8010150:	2b00      	cmp	r3, #0
 8010152:	d006      	beq.n	8010162 <RNG_ITConfig+0x1e>
  {
    /* Enable the RNG interrupt */
    RNG->CR |= RNG_CR_IE;
 8010154:	4b08      	ldr	r3, [pc, #32]	; (8010178 <RNG_ITConfig+0x34>)
 8010156:	4a08      	ldr	r2, [pc, #32]	; (8010178 <RNG_ITConfig+0x34>)
 8010158:	6812      	ldr	r2, [r2, #0]
 801015a:	f042 0208 	orr.w	r2, r2, #8
 801015e:	601a      	str	r2, [r3, #0]
 8010160:	e005      	b.n	801016e <RNG_ITConfig+0x2a>
  }
  else
  {
    /* Disable the RNG interrupt */
    RNG->CR &= ~RNG_CR_IE;
 8010162:	4b05      	ldr	r3, [pc, #20]	; (8010178 <RNG_ITConfig+0x34>)
 8010164:	4a04      	ldr	r2, [pc, #16]	; (8010178 <RNG_ITConfig+0x34>)
 8010166:	6812      	ldr	r2, [r2, #0]
 8010168:	f022 0208 	bic.w	r2, r2, #8
 801016c:	601a      	str	r2, [r3, #0]
  }
}
 801016e:	370c      	adds	r7, #12
 8010170:	46bd      	mov	sp, r7
 8010172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010176:	4770      	bx	lr
 8010178:	50060800 	.word	0x50060800

0801017c <RNG_GetFlagStatus>:
  *            @arg RNG_FLAG_CECS: Clock Error Current flag.
  *            @arg RNG_FLAG_SECS: Seed Error Current flag.
  * @retval The new state of RNG_FLAG (SET or RESET).
  */
FlagStatus RNG_GetFlagStatus(uint8_t RNG_FLAG)
{
 801017c:	b480      	push	{r7}
 801017e:	b085      	sub	sp, #20
 8010180:	af00      	add	r7, sp, #0
 8010182:	4603      	mov	r3, r0
 8010184:	71fb      	strb	r3, [r7, #7]
  FlagStatus bitstatus = RESET;
 8010186:	2300      	movs	r3, #0
 8010188:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RNG_GET_FLAG(RNG_FLAG));

  /* Check the status of the specified RNG flag */
  if ((RNG->SR & RNG_FLAG) != (uint8_t)RESET)
 801018a:	4b09      	ldr	r3, [pc, #36]	; (80101b0 <RNG_GetFlagStatus+0x34>)
 801018c:	685a      	ldr	r2, [r3, #4]
 801018e:	79fb      	ldrb	r3, [r7, #7]
 8010190:	4013      	ands	r3, r2
 8010192:	2b00      	cmp	r3, #0
 8010194:	d002      	beq.n	801019c <RNG_GetFlagStatus+0x20>
  {
    /* RNG_FLAG is set */
    bitstatus = SET;
 8010196:	2301      	movs	r3, #1
 8010198:	73fb      	strb	r3, [r7, #15]
 801019a:	e001      	b.n	80101a0 <RNG_GetFlagStatus+0x24>
  }
  else
  {
    /* RNG_FLAG is reset */
    bitstatus = RESET;
 801019c:	2300      	movs	r3, #0
 801019e:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the RNG_FLAG status */
  return  bitstatus;
 80101a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80101a2:	4618      	mov	r0, r3
 80101a4:	3714      	adds	r7, #20
 80101a6:	46bd      	mov	sp, r7
 80101a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101ac:	4770      	bx	lr
 80101ae:	bf00      	nop
 80101b0:	50060800 	.word	0x50060800

080101b4 <RNG_ClearFlag>:
  *         This flag is cleared only by reading the Random number data (using 
  *         RNG_GetRandomNumber() function).                           
  * @retval None
  */
void RNG_ClearFlag(uint8_t RNG_FLAG)
{
 80101b4:	b480      	push	{r7}
 80101b6:	b083      	sub	sp, #12
 80101b8:	af00      	add	r7, sp, #0
 80101ba:	4603      	mov	r3, r0
 80101bc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RNG_CLEAR_FLAG(RNG_FLAG));
  /* Clear the selected RNG flags */
  RNG->SR = ~(uint32_t)(((uint32_t)RNG_FLAG) << 4);
 80101be:	4b05      	ldr	r3, [pc, #20]	; (80101d4 <RNG_ClearFlag+0x20>)
 80101c0:	79fa      	ldrb	r2, [r7, #7]
 80101c2:	0112      	lsls	r2, r2, #4
 80101c4:	43d2      	mvns	r2, r2
 80101c6:	605a      	str	r2, [r3, #4]
}
 80101c8:	370c      	adds	r7, #12
 80101ca:	46bd      	mov	sp, r7
 80101cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101d0:	4770      	bx	lr
 80101d2:	bf00      	nop
 80101d4:	50060800 	.word	0x50060800

080101d8 <RNG_GetITStatus>:
  *            @arg RNG_IT_CEI: Clock Error Interrupt.
  *            @arg RNG_IT_SEI: Seed Error Interrupt.                   
  * @retval The new state of RNG_IT (SET or RESET).
  */
ITStatus RNG_GetITStatus(uint8_t RNG_IT)
{
 80101d8:	b480      	push	{r7}
 80101da:	b085      	sub	sp, #20
 80101dc:	af00      	add	r7, sp, #0
 80101de:	4603      	mov	r3, r0
 80101e0:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
 80101e2:	2300      	movs	r3, #0
 80101e4:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RNG_GET_IT(RNG_IT));

  /* Check the status of the specified RNG interrupt */
  if ((RNG->SR & RNG_IT) != (uint8_t)RESET)
 80101e6:	4b09      	ldr	r3, [pc, #36]	; (801020c <RNG_GetITStatus+0x34>)
 80101e8:	685a      	ldr	r2, [r3, #4]
 80101ea:	79fb      	ldrb	r3, [r7, #7]
 80101ec:	4013      	ands	r3, r2
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	d002      	beq.n	80101f8 <RNG_GetITStatus+0x20>
  {
    /* RNG_IT is set */
    bitstatus = SET;
 80101f2:	2301      	movs	r3, #1
 80101f4:	73fb      	strb	r3, [r7, #15]
 80101f6:	e001      	b.n	80101fc <RNG_GetITStatus+0x24>
  }
  else
  {
    /* RNG_IT is reset */
    bitstatus = RESET;
 80101f8:	2300      	movs	r3, #0
 80101fa:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the RNG_IT status */
  return bitstatus;
 80101fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80101fe:	4618      	mov	r0, r3
 8010200:	3714      	adds	r7, #20
 8010202:	46bd      	mov	sp, r7
 8010204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010208:	4770      	bx	lr
 801020a:	bf00      	nop
 801020c:	50060800 	.word	0x50060800

08010210 <RNG_ClearITPendingBit>:
  *            @arg RNG_IT_CEI: Clock Error Interrupt.
  *            @arg RNG_IT_SEI: Seed Error Interrupt.
  * @retval None
  */
void RNG_ClearITPendingBit(uint8_t RNG_IT)
{
 8010210:	b480      	push	{r7}
 8010212:	b083      	sub	sp, #12
 8010214:	af00      	add	r7, sp, #0
 8010216:	4603      	mov	r3, r0
 8010218:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RNG_IT(RNG_IT));

  /* Clear the selected RNG interrupt pending bit */
  RNG->SR = (uint8_t)~RNG_IT;
 801021a:	4b05      	ldr	r3, [pc, #20]	; (8010230 <RNG_ClearITPendingBit+0x20>)
 801021c:	79fa      	ldrb	r2, [r7, #7]
 801021e:	43d2      	mvns	r2, r2
 8010220:	b2d2      	uxtb	r2, r2
 8010222:	605a      	str	r2, [r3, #4]
}
 8010224:	370c      	adds	r7, #12
 8010226:	46bd      	mov	sp, r7
 8010228:	f85d 7b04 	ldr.w	r7, [sp], #4
 801022c:	4770      	bx	lr
 801022e:	bf00      	nop
 8010230:	50060800 	.word	0x50060800

08010234 <RTC_DeInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are deinitialized
  *          - ERROR: RTC registers are not deinitialized
  */
ErrorStatus RTC_DeInit(void)
{
 8010234:	b580      	push	{r7, lr}
 8010236:	b084      	sub	sp, #16
 8010238:	af00      	add	r7, sp, #0
  __IO uint32_t wutcounter = 0x00;
 801023a:	2300      	movs	r3, #0
 801023c:	607b      	str	r3, [r7, #4]
  uint32_t wutwfstatus = 0x00;
 801023e:	2300      	movs	r3, #0
 8010240:	60bb      	str	r3, [r7, #8]
  ErrorStatus status = ERROR;
 8010242:	2300      	movs	r3, #0
 8010244:	73fb      	strb	r3, [r7, #15]
  
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8010246:	4b36      	ldr	r3, [pc, #216]	; (8010320 <RTC_DeInit+0xec>)
 8010248:	22ca      	movs	r2, #202	; 0xca
 801024a:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 801024c:	4b34      	ldr	r3, [pc, #208]	; (8010320 <RTC_DeInit+0xec>)
 801024e:	2253      	movs	r2, #83	; 0x53
 8010250:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 8010252:	f000 f8d1 	bl	80103f8 <RTC_EnterInitMode>
 8010256:	4603      	mov	r3, r0
 8010258:	2b00      	cmp	r3, #0
 801025a:	d102      	bne.n	8010262 <RTC_DeInit+0x2e>
  {
    status = ERROR;
 801025c:	2300      	movs	r3, #0
 801025e:	73fb      	strb	r3, [r7, #15]
 8010260:	e055      	b.n	801030e <RTC_DeInit+0xda>
  }  
  else
  {
    /* Reset TR, DR and CR registers */
    RTC->TR = (uint32_t)0x00000000;
 8010262:	4b2f      	ldr	r3, [pc, #188]	; (8010320 <RTC_DeInit+0xec>)
 8010264:	2200      	movs	r2, #0
 8010266:	601a      	str	r2, [r3, #0]
    RTC->DR = (uint32_t)0x00002101;
 8010268:	4b2d      	ldr	r3, [pc, #180]	; (8010320 <RTC_DeInit+0xec>)
 801026a:	f242 1201 	movw	r2, #8449	; 0x2101
 801026e:	605a      	str	r2, [r3, #4]
    /* Reset All CR bits except CR[2:0] */
    RTC->CR &= (uint32_t)0x00000007;
 8010270:	4b2b      	ldr	r3, [pc, #172]	; (8010320 <RTC_DeInit+0xec>)
 8010272:	4a2b      	ldr	r2, [pc, #172]	; (8010320 <RTC_DeInit+0xec>)
 8010274:	6892      	ldr	r2, [r2, #8]
 8010276:	f002 0207 	and.w	r2, r2, #7
 801027a:	609a      	str	r2, [r3, #8]
  
    /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
    do
    {
      wutwfstatus = RTC->ISR & RTC_ISR_WUTWF;
 801027c:	4b28      	ldr	r3, [pc, #160]	; (8010320 <RTC_DeInit+0xec>)
 801027e:	68db      	ldr	r3, [r3, #12]
 8010280:	f003 0304 	and.w	r3, r3, #4
 8010284:	60bb      	str	r3, [r7, #8]
      wutcounter++;  
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	3301      	adds	r3, #1
 801028a:	607b      	str	r3, [r7, #4]
    } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010292:	d002      	beq.n	801029a <RTC_DeInit+0x66>
 8010294:	68bb      	ldr	r3, [r7, #8]
 8010296:	2b00      	cmp	r3, #0
 8010298:	d0f0      	beq.n	801027c <RTC_DeInit+0x48>
    
    if ((RTC->ISR & RTC_ISR_WUTWF) == RESET)
 801029a:	4b21      	ldr	r3, [pc, #132]	; (8010320 <RTC_DeInit+0xec>)
 801029c:	68db      	ldr	r3, [r3, #12]
 801029e:	f003 0304 	and.w	r3, r3, #4
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	d102      	bne.n	80102ac <RTC_DeInit+0x78>
    {
      status = ERROR;
 80102a6:	2300      	movs	r3, #0
 80102a8:	73fb      	strb	r3, [r7, #15]
 80102aa:	e030      	b.n	801030e <RTC_DeInit+0xda>
    }
    else
    {
      /* Reset all RTC CR register bits */
      RTC->CR &= (uint32_t)0x00000000;
 80102ac:	4b1c      	ldr	r3, [pc, #112]	; (8010320 <RTC_DeInit+0xec>)
 80102ae:	689b      	ldr	r3, [r3, #8]
 80102b0:	4b1b      	ldr	r3, [pc, #108]	; (8010320 <RTC_DeInit+0xec>)
 80102b2:	2200      	movs	r2, #0
 80102b4:	609a      	str	r2, [r3, #8]
      RTC->WUTR = (uint32_t)0x0000FFFF;
 80102b6:	4b1a      	ldr	r3, [pc, #104]	; (8010320 <RTC_DeInit+0xec>)
 80102b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80102bc:	615a      	str	r2, [r3, #20]
      RTC->PRER = (uint32_t)0x007F00FF;
 80102be:	4b18      	ldr	r3, [pc, #96]	; (8010320 <RTC_DeInit+0xec>)
 80102c0:	4a18      	ldr	r2, [pc, #96]	; (8010324 <RTC_DeInit+0xf0>)
 80102c2:	611a      	str	r2, [r3, #16]
      RTC->CALIBR = (uint32_t)0x00000000;
 80102c4:	4b16      	ldr	r3, [pc, #88]	; (8010320 <RTC_DeInit+0xec>)
 80102c6:	2200      	movs	r2, #0
 80102c8:	619a      	str	r2, [r3, #24]
      RTC->ALRMAR = (uint32_t)0x00000000;        
 80102ca:	4b15      	ldr	r3, [pc, #84]	; (8010320 <RTC_DeInit+0xec>)
 80102cc:	2200      	movs	r2, #0
 80102ce:	61da      	str	r2, [r3, #28]
      RTC->ALRMBR = (uint32_t)0x00000000;
 80102d0:	4b13      	ldr	r3, [pc, #76]	; (8010320 <RTC_DeInit+0xec>)
 80102d2:	2200      	movs	r2, #0
 80102d4:	621a      	str	r2, [r3, #32]
      RTC->SHIFTR = (uint32_t)0x00000000;
 80102d6:	4b12      	ldr	r3, [pc, #72]	; (8010320 <RTC_DeInit+0xec>)
 80102d8:	2200      	movs	r2, #0
 80102da:	62da      	str	r2, [r3, #44]	; 0x2c
      RTC->CALR = (uint32_t)0x00000000;
 80102dc:	4b10      	ldr	r3, [pc, #64]	; (8010320 <RTC_DeInit+0xec>)
 80102de:	2200      	movs	r2, #0
 80102e0:	63da      	str	r2, [r3, #60]	; 0x3c
      RTC->ALRMASSR = (uint32_t)0x00000000;
 80102e2:	4b0f      	ldr	r3, [pc, #60]	; (8010320 <RTC_DeInit+0xec>)
 80102e4:	2200      	movs	r2, #0
 80102e6:	645a      	str	r2, [r3, #68]	; 0x44
      RTC->ALRMBSSR = (uint32_t)0x00000000;
 80102e8:	4b0d      	ldr	r3, [pc, #52]	; (8010320 <RTC_DeInit+0xec>)
 80102ea:	2200      	movs	r2, #0
 80102ec:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Reset ISR register and exit initialization mode */
      RTC->ISR = (uint32_t)0x00000000;
 80102ee:	4b0c      	ldr	r3, [pc, #48]	; (8010320 <RTC_DeInit+0xec>)
 80102f0:	2200      	movs	r2, #0
 80102f2:	60da      	str	r2, [r3, #12]
      
      /* Reset Tamper and alternate functions configuration register */
      RTC->TAFCR = 0x00000000;
 80102f4:	4b0a      	ldr	r3, [pc, #40]	; (8010320 <RTC_DeInit+0xec>)
 80102f6:	2200      	movs	r2, #0
 80102f8:	641a      	str	r2, [r3, #64]	; 0x40
  
      if(RTC_WaitForSynchro() == ERROR)
 80102fa:	f000 f8c5 	bl	8010488 <RTC_WaitForSynchro>
 80102fe:	4603      	mov	r3, r0
 8010300:	2b00      	cmp	r3, #0
 8010302:	d102      	bne.n	801030a <RTC_DeInit+0xd6>
      {
        status = ERROR;
 8010304:	2300      	movs	r3, #0
 8010306:	73fb      	strb	r3, [r7, #15]
 8010308:	e001      	b.n	801030e <RTC_DeInit+0xda>
      }
      else
      {
        status = SUCCESS;      
 801030a:	2301      	movs	r3, #1
 801030c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;  
 801030e:	4b04      	ldr	r3, [pc, #16]	; (8010320 <RTC_DeInit+0xec>)
 8010310:	22ff      	movs	r2, #255	; 0xff
 8010312:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
 8010314:	7bfb      	ldrb	r3, [r7, #15]
}
 8010316:	4618      	mov	r0, r3
 8010318:	3710      	adds	r7, #16
 801031a:	46bd      	mov	sp, r7
 801031c:	bd80      	pop	{r7, pc}
 801031e:	bf00      	nop
 8010320:	40002800 	.word	0x40002800
 8010324:	007f00ff 	.word	0x007f00ff

08010328 <RTC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are initialized
  *          - ERROR: RTC registers are not initialized  
  */
ErrorStatus RTC_Init(RTC_InitTypeDef* RTC_InitStruct)
{
 8010328:	b580      	push	{r7, lr}
 801032a:	b084      	sub	sp, #16
 801032c:	af00      	add	r7, sp, #0
 801032e:	6078      	str	r0, [r7, #4]
  ErrorStatus status = ERROR;
 8010330:	2300      	movs	r3, #0
 8010332:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RTC_HOUR_FORMAT(RTC_InitStruct->RTC_HourFormat));
  assert_param(IS_RTC_ASYNCH_PREDIV(RTC_InitStruct->RTC_AsynchPrediv));
  assert_param(IS_RTC_SYNCH_PREDIV(RTC_InitStruct->RTC_SynchPrediv));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8010334:	4b19      	ldr	r3, [pc, #100]	; (801039c <RTC_Init+0x74>)
 8010336:	22ca      	movs	r2, #202	; 0xca
 8010338:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 801033a:	4b18      	ldr	r3, [pc, #96]	; (801039c <RTC_Init+0x74>)
 801033c:	2253      	movs	r2, #83	; 0x53
 801033e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 8010340:	f000 f85a 	bl	80103f8 <RTC_EnterInitMode>
 8010344:	4603      	mov	r3, r0
 8010346:	2b00      	cmp	r3, #0
 8010348:	d102      	bne.n	8010350 <RTC_Init+0x28>
  {
    status = ERROR;
 801034a:	2300      	movs	r3, #0
 801034c:	73fb      	strb	r3, [r7, #15]
 801034e:	e01c      	b.n	801038a <RTC_Init+0x62>
  } 
  else
  {
    /* Clear RTC CR FMT Bit */
    RTC->CR &= ((uint32_t)~(RTC_CR_FMT));
 8010350:	4b12      	ldr	r3, [pc, #72]	; (801039c <RTC_Init+0x74>)
 8010352:	4a12      	ldr	r2, [pc, #72]	; (801039c <RTC_Init+0x74>)
 8010354:	6892      	ldr	r2, [r2, #8]
 8010356:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801035a:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    RTC->CR |=  ((uint32_t)(RTC_InitStruct->RTC_HourFormat));
 801035c:	4b0f      	ldr	r3, [pc, #60]	; (801039c <RTC_Init+0x74>)
 801035e:	4a0f      	ldr	r2, [pc, #60]	; (801039c <RTC_Init+0x74>)
 8010360:	6891      	ldr	r1, [r2, #8]
 8010362:	687a      	ldr	r2, [r7, #4]
 8010364:	6812      	ldr	r2, [r2, #0]
 8010366:	430a      	orrs	r2, r1
 8010368:	609a      	str	r2, [r3, #8]
  
    /* Configure the RTC PRER */
    RTC->PRER = (uint32_t)(RTC_InitStruct->RTC_SynchPrediv);
 801036a:	4b0c      	ldr	r3, [pc, #48]	; (801039c <RTC_Init+0x74>)
 801036c:	687a      	ldr	r2, [r7, #4]
 801036e:	6892      	ldr	r2, [r2, #8]
 8010370:	611a      	str	r2, [r3, #16]
    RTC->PRER |= (uint32_t)(RTC_InitStruct->RTC_AsynchPrediv << 16);
 8010372:	4b0a      	ldr	r3, [pc, #40]	; (801039c <RTC_Init+0x74>)
 8010374:	4a09      	ldr	r2, [pc, #36]	; (801039c <RTC_Init+0x74>)
 8010376:	6911      	ldr	r1, [r2, #16]
 8010378:	687a      	ldr	r2, [r7, #4]
 801037a:	6852      	ldr	r2, [r2, #4]
 801037c:	0412      	lsls	r2, r2, #16
 801037e:	430a      	orrs	r2, r1
 8010380:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    RTC_ExitInitMode();
 8010382:	f000 f873 	bl	801046c <RTC_ExitInitMode>

    status = SUCCESS;    
 8010386:	2301      	movs	r3, #1
 8010388:	73fb      	strb	r3, [r7, #15]
  }
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 801038a:	4b04      	ldr	r3, [pc, #16]	; (801039c <RTC_Init+0x74>)
 801038c:	22ff      	movs	r2, #255	; 0xff
 801038e:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
 8010390:	7bfb      	ldrb	r3, [r7, #15]
}
 8010392:	4618      	mov	r0, r3
 8010394:	3710      	adds	r7, #16
 8010396:	46bd      	mov	sp, r7
 8010398:	bd80      	pop	{r7, pc}
 801039a:	bf00      	nop
 801039c:	40002800 	.word	0x40002800

080103a0 <RTC_StructInit>:
  * @param  RTC_InitStruct: pointer to a RTC_InitTypeDef structure which will be 
  *         initialized.
  * @retval None
  */
void RTC_StructInit(RTC_InitTypeDef* RTC_InitStruct)
{
 80103a0:	b480      	push	{r7}
 80103a2:	b083      	sub	sp, #12
 80103a4:	af00      	add	r7, sp, #0
 80103a6:	6078      	str	r0, [r7, #4]
  /* Initialize the RTC_HourFormat member */
  RTC_InitStruct->RTC_HourFormat = RTC_HourFormat_24;
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	2200      	movs	r2, #0
 80103ac:	601a      	str	r2, [r3, #0]
    
  /* Initialize the RTC_AsynchPrediv member */
  RTC_InitStruct->RTC_AsynchPrediv = (uint32_t)0x7F;
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	227f      	movs	r2, #127	; 0x7f
 80103b2:	605a      	str	r2, [r3, #4]

  /* Initialize the RTC_SynchPrediv member */
  RTC_InitStruct->RTC_SynchPrediv = (uint32_t)0xFF; 
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	22ff      	movs	r2, #255	; 0xff
 80103b8:	609a      	str	r2, [r3, #8]
}
 80103ba:	370c      	adds	r7, #12
 80103bc:	46bd      	mov	sp, r7
 80103be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103c2:	4770      	bx	lr

080103c4 <RTC_WriteProtectionCmd>:
  * @param  NewState: new state of the write protection.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RTC_WriteProtectionCmd(FunctionalState NewState)
{
 80103c4:	b480      	push	{r7}
 80103c6:	b083      	sub	sp, #12
 80103c8:	af00      	add	r7, sp, #0
 80103ca:	4603      	mov	r3, r0
 80103cc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 80103ce:	79fb      	ldrb	r3, [r7, #7]
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	d003      	beq.n	80103dc <RTC_WriteProtectionCmd+0x18>
  {
    /* Enable the write protection for RTC registers */
    RTC->WPR = 0xFF;   
 80103d4:	4b07      	ldr	r3, [pc, #28]	; (80103f4 <RTC_WriteProtectionCmd+0x30>)
 80103d6:	22ff      	movs	r2, #255	; 0xff
 80103d8:	625a      	str	r2, [r3, #36]	; 0x24
 80103da:	e005      	b.n	80103e8 <RTC_WriteProtectionCmd+0x24>
  }
  else
  {
    /* Disable the write protection for RTC registers */
    RTC->WPR = 0xCA;
 80103dc:	4b05      	ldr	r3, [pc, #20]	; (80103f4 <RTC_WriteProtectionCmd+0x30>)
 80103de:	22ca      	movs	r2, #202	; 0xca
 80103e0:	625a      	str	r2, [r3, #36]	; 0x24
    RTC->WPR = 0x53;    
 80103e2:	4b04      	ldr	r3, [pc, #16]	; (80103f4 <RTC_WriteProtectionCmd+0x30>)
 80103e4:	2253      	movs	r2, #83	; 0x53
 80103e6:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 80103e8:	370c      	adds	r7, #12
 80103ea:	46bd      	mov	sp, r7
 80103ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103f0:	4770      	bx	lr
 80103f2:	bf00      	nop
 80103f4:	40002800 	.word	0x40002800

080103f8 <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC is in Init mode
  *          - ERROR: RTC is not in Init mode  
  */
ErrorStatus RTC_EnterInitMode(void)
{
 80103f8:	b480      	push	{r7}
 80103fa:	b085      	sub	sp, #20
 80103fc:	af00      	add	r7, sp, #0
  __IO uint32_t initcounter = 0x00;
 80103fe:	2300      	movs	r3, #0
 8010400:	607b      	str	r3, [r7, #4]
  ErrorStatus status = ERROR;
 8010402:	2300      	movs	r3, #0
 8010404:	73fb      	strb	r3, [r7, #15]
  uint32_t initstatus = 0x00;
 8010406:	2300      	movs	r3, #0
 8010408:	60bb      	str	r3, [r7, #8]
     
  /* Check if the Initialization mode is set */
  if ((RTC->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 801040a:	4b17      	ldr	r3, [pc, #92]	; (8010468 <RTC_EnterInitMode+0x70>)
 801040c:	68db      	ldr	r3, [r3, #12]
 801040e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010412:	2b00      	cmp	r3, #0
 8010414:	d11e      	bne.n	8010454 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    RTC->ISR = (uint32_t)RTC_INIT_MASK;
 8010416:	4b14      	ldr	r3, [pc, #80]	; (8010468 <RTC_EnterInitMode+0x70>)
 8010418:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801041c:	60da      	str	r2, [r3, #12]
    
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    do
    {
      initstatus = RTC->ISR & RTC_ISR_INITF;
 801041e:	4b12      	ldr	r3, [pc, #72]	; (8010468 <RTC_EnterInitMode+0x70>)
 8010420:	68db      	ldr	r3, [r3, #12]
 8010422:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010426:	60bb      	str	r3, [r7, #8]
      initcounter++;  
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	3301      	adds	r3, #1
 801042c:	607b      	str	r3, [r7, #4]
    } while((initcounter != INITMODE_TIMEOUT) && (initstatus == 0x00));
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010434:	d002      	beq.n	801043c <RTC_EnterInitMode+0x44>
 8010436:	68bb      	ldr	r3, [r7, #8]
 8010438:	2b00      	cmp	r3, #0
 801043a:	d0f0      	beq.n	801041e <RTC_EnterInitMode+0x26>
    
    if ((RTC->ISR & RTC_ISR_INITF) != RESET)
 801043c:	4b0a      	ldr	r3, [pc, #40]	; (8010468 <RTC_EnterInitMode+0x70>)
 801043e:	68db      	ldr	r3, [r3, #12]
 8010440:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010444:	2b00      	cmp	r3, #0
 8010446:	d002      	beq.n	801044e <RTC_EnterInitMode+0x56>
    {
      status = SUCCESS;
 8010448:	2301      	movs	r3, #1
 801044a:	73fb      	strb	r3, [r7, #15]
 801044c:	e004      	b.n	8010458 <RTC_EnterInitMode+0x60>
    }
    else
    {
      status = ERROR;
 801044e:	2300      	movs	r3, #0
 8010450:	73fb      	strb	r3, [r7, #15]
 8010452:	e001      	b.n	8010458 <RTC_EnterInitMode+0x60>
    }        
  }
  else
  {
    status = SUCCESS;  
 8010454:	2301      	movs	r3, #1
 8010456:	73fb      	strb	r3, [r7, #15]
  } 
    
  return (status);  
 8010458:	7bfb      	ldrb	r3, [r7, #15]
}
 801045a:	4618      	mov	r0, r3
 801045c:	3714      	adds	r7, #20
 801045e:	46bd      	mov	sp, r7
 8010460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010464:	4770      	bx	lr
 8010466:	bf00      	nop
 8010468:	40002800 	.word	0x40002800

0801046c <RTC_ExitInitMode>:
  *         RTC_WriteProtectionCmd(DISABLE) before calling this function.      
  * @param  None
  * @retval None
  */
void RTC_ExitInitMode(void)
{ 
 801046c:	b480      	push	{r7}
 801046e:	af00      	add	r7, sp, #0
  /* Exit Initialization mode */
  RTC->ISR &= (uint32_t)~RTC_ISR_INIT;  
 8010470:	4b04      	ldr	r3, [pc, #16]	; (8010484 <RTC_ExitInitMode+0x18>)
 8010472:	4a04      	ldr	r2, [pc, #16]	; (8010484 <RTC_ExitInitMode+0x18>)
 8010474:	68d2      	ldr	r2, [r2, #12]
 8010476:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801047a:	60da      	str	r2, [r3, #12]
}
 801047c:	46bd      	mov	sp, r7
 801047e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010482:	4770      	bx	lr
 8010484:	40002800 	.word	0x40002800

08010488 <RTC_WaitForSynchro>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are synchronised
  *          - ERROR: RTC registers are not synchronised
  */
ErrorStatus RTC_WaitForSynchro(void)
{
 8010488:	b480      	push	{r7}
 801048a:	b085      	sub	sp, #20
 801048c:	af00      	add	r7, sp, #0
  __IO uint32_t synchrocounter = 0;
 801048e:	2300      	movs	r3, #0
 8010490:	607b      	str	r3, [r7, #4]
  ErrorStatus status = ERROR;
 8010492:	2300      	movs	r3, #0
 8010494:	73fb      	strb	r3, [r7, #15]
  uint32_t synchrostatus = 0x00;
 8010496:	2300      	movs	r3, #0
 8010498:	60bb      	str	r3, [r7, #8]

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 801049a:	4b18      	ldr	r3, [pc, #96]	; (80104fc <RTC_WaitForSynchro+0x74>)
 801049c:	22ca      	movs	r2, #202	; 0xca
 801049e:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 80104a0:	4b16      	ldr	r3, [pc, #88]	; (80104fc <RTC_WaitForSynchro+0x74>)
 80104a2:	2253      	movs	r2, #83	; 0x53
 80104a4:	625a      	str	r2, [r3, #36]	; 0x24
    
  /* Clear RSF flag */
  RTC->ISR &= (uint32_t)RTC_RSF_MASK;
 80104a6:	4b15      	ldr	r3, [pc, #84]	; (80104fc <RTC_WaitForSynchro+0x74>)
 80104a8:	4a14      	ldr	r2, [pc, #80]	; (80104fc <RTC_WaitForSynchro+0x74>)
 80104aa:	68d2      	ldr	r2, [r2, #12]
 80104ac:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80104b0:	60da      	str	r2, [r3, #12]
    
  /* Wait the registers to be synchronised */
  do
  {
    synchrostatus = RTC->ISR & RTC_ISR_RSF;
 80104b2:	4b12      	ldr	r3, [pc, #72]	; (80104fc <RTC_WaitForSynchro+0x74>)
 80104b4:	68db      	ldr	r3, [r3, #12]
 80104b6:	f003 0320 	and.w	r3, r3, #32
 80104ba:	60bb      	str	r3, [r7, #8]
    synchrocounter++;  
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	3301      	adds	r3, #1
 80104c0:	607b      	str	r3, [r7, #4]
  } while((synchrocounter != SYNCHRO_TIMEOUT) && (synchrostatus == 0x00));
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80104c8:	d002      	beq.n	80104d0 <RTC_WaitForSynchro+0x48>
 80104ca:	68bb      	ldr	r3, [r7, #8]
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	d0f0      	beq.n	80104b2 <RTC_WaitForSynchro+0x2a>
    
  if ((RTC->ISR & RTC_ISR_RSF) != RESET)
 80104d0:	4b0a      	ldr	r3, [pc, #40]	; (80104fc <RTC_WaitForSynchro+0x74>)
 80104d2:	68db      	ldr	r3, [r3, #12]
 80104d4:	f003 0320 	and.w	r3, r3, #32
 80104d8:	2b00      	cmp	r3, #0
 80104da:	d002      	beq.n	80104e2 <RTC_WaitForSynchro+0x5a>
  {
    status = SUCCESS;
 80104dc:	2301      	movs	r3, #1
 80104de:	73fb      	strb	r3, [r7, #15]
 80104e0:	e001      	b.n	80104e6 <RTC_WaitForSynchro+0x5e>
  }
  else
  {
    status = ERROR;
 80104e2:	2300      	movs	r3, #0
 80104e4:	73fb      	strb	r3, [r7, #15]
  }        

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 80104e6:	4b05      	ldr	r3, [pc, #20]	; (80104fc <RTC_WaitForSynchro+0x74>)
 80104e8:	22ff      	movs	r2, #255	; 0xff
 80104ea:	625a      	str	r2, [r3, #36]	; 0x24
    
  return (status); 
 80104ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80104ee:	4618      	mov	r0, r3
 80104f0:	3714      	adds	r7, #20
 80104f2:	46bd      	mov	sp, r7
 80104f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104f8:	4770      	bx	lr
 80104fa:	bf00      	nop
 80104fc:	40002800 	.word	0x40002800

08010500 <RTC_RefClockCmd>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC reference clock detection is enabled
  *          - ERROR: RTC reference clock detection is disabled  
  */
ErrorStatus RTC_RefClockCmd(FunctionalState NewState)
{ 
 8010500:	b580      	push	{r7, lr}
 8010502:	b084      	sub	sp, #16
 8010504:	af00      	add	r7, sp, #0
 8010506:	4603      	mov	r3, r0
 8010508:	71fb      	strb	r3, [r7, #7]
  ErrorStatus status = ERROR;
 801050a:	2300      	movs	r3, #0
 801050c:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 801050e:	4b15      	ldr	r3, [pc, #84]	; (8010564 <RTC_RefClockCmd+0x64>)
 8010510:	22ca      	movs	r2, #202	; 0xca
 8010512:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8010514:	4b13      	ldr	r3, [pc, #76]	; (8010564 <RTC_RefClockCmd+0x64>)
 8010516:	2253      	movs	r2, #83	; 0x53
 8010518:	625a      	str	r2, [r3, #36]	; 0x24
    
  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 801051a:	f7ff ff6d 	bl	80103f8 <RTC_EnterInitMode>
 801051e:	4603      	mov	r3, r0
 8010520:	2b00      	cmp	r3, #0
 8010522:	d102      	bne.n	801052a <RTC_RefClockCmd+0x2a>
  {
    status = ERROR;
 8010524:	2300      	movs	r3, #0
 8010526:	73fb      	strb	r3, [r7, #15]
 8010528:	e013      	b.n	8010552 <RTC_RefClockCmd+0x52>
  } 
  else
  {  
    if (NewState != DISABLE)
 801052a:	79fb      	ldrb	r3, [r7, #7]
 801052c:	2b00      	cmp	r3, #0
 801052e:	d006      	beq.n	801053e <RTC_RefClockCmd+0x3e>
    {
      /* Enable the RTC reference clock detection */
      RTC->CR |= RTC_CR_REFCKON;   
 8010530:	4b0c      	ldr	r3, [pc, #48]	; (8010564 <RTC_RefClockCmd+0x64>)
 8010532:	4a0c      	ldr	r2, [pc, #48]	; (8010564 <RTC_RefClockCmd+0x64>)
 8010534:	6892      	ldr	r2, [r2, #8]
 8010536:	f042 0210 	orr.w	r2, r2, #16
 801053a:	609a      	str	r2, [r3, #8]
 801053c:	e005      	b.n	801054a <RTC_RefClockCmd+0x4a>
    }
    else
    {
      /* Disable the RTC reference clock detection */
      RTC->CR &= ~RTC_CR_REFCKON;    
 801053e:	4b09      	ldr	r3, [pc, #36]	; (8010564 <RTC_RefClockCmd+0x64>)
 8010540:	4a08      	ldr	r2, [pc, #32]	; (8010564 <RTC_RefClockCmd+0x64>)
 8010542:	6892      	ldr	r2, [r2, #8]
 8010544:	f022 0210 	bic.w	r2, r2, #16
 8010548:	609a      	str	r2, [r3, #8]
    }
    /* Exit Initialization mode */
    RTC_ExitInitMode();
 801054a:	f7ff ff8f 	bl	801046c <RTC_ExitInitMode>
    
    status = SUCCESS;
 801054e:	2301      	movs	r3, #1
 8010550:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;  
 8010552:	4b04      	ldr	r3, [pc, #16]	; (8010564 <RTC_RefClockCmd+0x64>)
 8010554:	22ff      	movs	r2, #255	; 0xff
 8010556:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status; 
 8010558:	7bfb      	ldrb	r3, [r7, #15]
}
 801055a:	4618      	mov	r0, r3
 801055c:	3710      	adds	r7, #16
 801055e:	46bd      	mov	sp, r7
 8010560:	bd80      	pop	{r7, pc}
 8010562:	bf00      	nop
 8010564:	40002800 	.word	0x40002800

08010568 <RTC_BypassShadowCmd>:
  * @param  NewState: new state of the Bypass Shadow feature.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
*/
void RTC_BypassShadowCmd(FunctionalState NewState)
{
 8010568:	b480      	push	{r7}
 801056a:	b083      	sub	sp, #12
 801056c:	af00      	add	r7, sp, #0
 801056e:	4603      	mov	r3, r0
 8010570:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8010572:	4b0f      	ldr	r3, [pc, #60]	; (80105b0 <RTC_BypassShadowCmd+0x48>)
 8010574:	22ca      	movs	r2, #202	; 0xca
 8010576:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8010578:	4b0d      	ldr	r3, [pc, #52]	; (80105b0 <RTC_BypassShadowCmd+0x48>)
 801057a:	2253      	movs	r2, #83	; 0x53
 801057c:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (NewState != DISABLE)
 801057e:	79fb      	ldrb	r3, [r7, #7]
 8010580:	2b00      	cmp	r3, #0
 8010582:	d006      	beq.n	8010592 <RTC_BypassShadowCmd+0x2a>
  {
    /* Set the BYPSHAD bit */
    RTC->CR |= (uint8_t)RTC_CR_BYPSHAD;
 8010584:	4b0a      	ldr	r3, [pc, #40]	; (80105b0 <RTC_BypassShadowCmd+0x48>)
 8010586:	4a0a      	ldr	r2, [pc, #40]	; (80105b0 <RTC_BypassShadowCmd+0x48>)
 8010588:	6892      	ldr	r2, [r2, #8]
 801058a:	f042 0220 	orr.w	r2, r2, #32
 801058e:	609a      	str	r2, [r3, #8]
 8010590:	e005      	b.n	801059e <RTC_BypassShadowCmd+0x36>
  }
  else
  {
    /* Reset the BYPSHAD bit */
    RTC->CR &= (uint8_t)~RTC_CR_BYPSHAD;
 8010592:	4b07      	ldr	r3, [pc, #28]	; (80105b0 <RTC_BypassShadowCmd+0x48>)
 8010594:	4a06      	ldr	r2, [pc, #24]	; (80105b0 <RTC_BypassShadowCmd+0x48>)
 8010596:	6892      	ldr	r2, [r2, #8]
 8010598:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 801059c:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;
 801059e:	4b04      	ldr	r3, [pc, #16]	; (80105b0 <RTC_BypassShadowCmd+0x48>)
 80105a0:	22ff      	movs	r2, #255	; 0xff
 80105a2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80105a4:	370c      	adds	r7, #12
 80105a6:	46bd      	mov	sp, r7
 80105a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ac:	4770      	bx	lr
 80105ae:	bf00      	nop
 80105b0:	40002800 	.word	0x40002800

080105b4 <RTC_SetTime>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Time register is configured
  *          - ERROR: RTC Time register is not configured
  */
ErrorStatus RTC_SetTime(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_TimeStruct)
{
 80105b4:	b590      	push	{r4, r7, lr}
 80105b6:	b085      	sub	sp, #20
 80105b8:	af00      	add	r7, sp, #0
 80105ba:	6078      	str	r0, [r7, #4]
 80105bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80105be:	2300      	movs	r3, #0
 80105c0:	60fb      	str	r3, [r7, #12]
  ErrorStatus status = ERROR;
 80105c2:	2300      	movs	r3, #0
 80105c4:	72fb      	strb	r3, [r7, #11]
    
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));
  
  if (RTC_Format == RTC_Format_BIN)
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	d109      	bne.n	80105e0 <RTC_SetTime+0x2c>
  {
    if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80105cc:	4b3d      	ldr	r3, [pc, #244]	; (80106c4 <RTC_SetTime+0x110>)
 80105ce:	689b      	ldr	r3, [r3, #8]
 80105d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	d114      	bne.n	8010602 <RTC_SetTime+0x4e>
      assert_param(IS_RTC_HOUR12(RTC_TimeStruct->RTC_Hours));
      assert_param(IS_RTC_H12(RTC_TimeStruct->RTC_H12));
    } 
    else
    {
      RTC_TimeStruct->RTC_H12 = 0x00;
 80105d8:	683b      	ldr	r3, [r7, #0]
 80105da:	2200      	movs	r2, #0
 80105dc:	70da      	strb	r2, [r3, #3]
 80105de:	e010      	b.n	8010602 <RTC_SetTime+0x4e>
    assert_param(IS_RTC_MINUTES(RTC_TimeStruct->RTC_Minutes));
    assert_param(IS_RTC_SECONDS(RTC_TimeStruct->RTC_Seconds));
  }
  else
  {
    if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80105e0:	4b38      	ldr	r3, [pc, #224]	; (80106c4 <RTC_SetTime+0x110>)
 80105e2:	689b      	ldr	r3, [r3, #8]
 80105e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	d007      	beq.n	80105fc <RTC_SetTime+0x48>
    {
      tmpreg = RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours);
 80105ec:	683b      	ldr	r3, [r7, #0]
 80105ee:	781b      	ldrb	r3, [r3, #0]
 80105f0:	4618      	mov	r0, r3
 80105f2:	f001 f885 	bl	8011700 <RTC_Bcd2ToByte>
 80105f6:	4603      	mov	r3, r0
 80105f8:	60fb      	str	r3, [r7, #12]
 80105fa:	e002      	b.n	8010602 <RTC_SetTime+0x4e>
      assert_param(IS_RTC_HOUR12(tmpreg));
      assert_param(IS_RTC_H12(RTC_TimeStruct->RTC_H12)); 
    } 
    else
    {
      RTC_TimeStruct->RTC_H12 = 0x00;
 80105fc:	683b      	ldr	r3, [r7, #0]
 80105fe:	2200      	movs	r2, #0
 8010600:	70da      	strb	r2, [r3, #3]
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds)));
  }
  
  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	2b00      	cmp	r3, #0
 8010606:	d00f      	beq.n	8010628 <RTC_SetTime+0x74>
  {
    tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 8010608:	683b      	ldr	r3, [r7, #0]
 801060a:	781b      	ldrb	r3, [r3, #0]
 801060c:	041a      	lsls	r2, r3, #16
             ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 801060e:	683b      	ldr	r3, [r7, #0]
 8010610:	785b      	ldrb	r3, [r3, #1]
 8010612:	021b      	lsls	r3, r3, #8
  }
  
  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 8010614:	431a      	orrs	r2, r3
             ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
             ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
 8010616:	683b      	ldr	r3, [r7, #0]
 8010618:	789b      	ldrb	r3, [r3, #2]
  
  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
             ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 801061a:	431a      	orrs	r2, r3
             ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
             ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
 801061c:	683b      	ldr	r3, [r7, #0]
 801061e:	78db      	ldrb	r3, [r3, #3]
 8010620:	041b      	lsls	r3, r3, #16
  }
  
  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 8010622:	4313      	orrs	r3, r2
 8010624:	60fb      	str	r3, [r7, #12]
 8010626:	e01b      	b.n	8010660 <RTC_SetTime+0xac>
             ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
             ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
  }  
  else
  {
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 8010628:	683b      	ldr	r3, [r7, #0]
 801062a:	781b      	ldrb	r3, [r3, #0]
 801062c:	4618      	mov	r0, r3
 801062e:	f001 f849 	bl	80116c4 <RTC_ByteToBcd2>
 8010632:	4603      	mov	r3, r0
 8010634:	041c      	lsls	r4, r3, #16
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 8010636:	683b      	ldr	r3, [r7, #0]
 8010638:	785b      	ldrb	r3, [r3, #1]
 801063a:	4618      	mov	r0, r3
 801063c:	f001 f842 	bl	80116c4 <RTC_ByteToBcd2>
 8010640:	4603      	mov	r3, r0
 8010642:	021b      	lsls	r3, r3, #8
             ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
             ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
  }  
  else
  {
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 8010644:	431c      	orrs	r4, r3
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
 8010646:	683b      	ldr	r3, [r7, #0]
 8010648:	789b      	ldrb	r3, [r3, #2]
 801064a:	4618      	mov	r0, r3
 801064c:	f001 f83a 	bl	80116c4 <RTC_ByteToBcd2>
 8010650:	4603      	mov	r3, r0
             ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
  }  
  else
  {
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 8010652:	ea44 0203 	orr.w	r2, r4, r3
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
                   (((uint32_t)RTC_TimeStruct->RTC_H12) << 16));
 8010656:	683b      	ldr	r3, [r7, #0]
 8010658:	78db      	ldrb	r3, [r3, #3]
 801065a:	041b      	lsls	r3, r3, #16
             ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
             ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
  }  
  else
  {
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 801065c:	4313      	orrs	r3, r2
 801065e:	60fb      	str	r3, [r7, #12]
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
                   (((uint32_t)RTC_TimeStruct->RTC_H12) << 16));
  }  

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8010660:	4b18      	ldr	r3, [pc, #96]	; (80106c4 <RTC_SetTime+0x110>)
 8010662:	22ca      	movs	r2, #202	; 0xca
 8010664:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8010666:	4b17      	ldr	r3, [pc, #92]	; (80106c4 <RTC_SetTime+0x110>)
 8010668:	2253      	movs	r2, #83	; 0x53
 801066a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 801066c:	f7ff fec4 	bl	80103f8 <RTC_EnterInitMode>
 8010670:	4603      	mov	r3, r0
 8010672:	2b00      	cmp	r3, #0
 8010674:	d102      	bne.n	801067c <RTC_SetTime+0xc8>
  {
    status = ERROR;
 8010676:	2300      	movs	r3, #0
 8010678:	72fb      	strb	r3, [r7, #11]
 801067a:	e01b      	b.n	80106b4 <RTC_SetTime+0x100>
  } 
  else
  {
    /* Set the RTC_TR register */
    RTC->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 801067c:	4a11      	ldr	r2, [pc, #68]	; (80106c4 <RTC_SetTime+0x110>)
 801067e:	68fb      	ldr	r3, [r7, #12]
 8010680:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8010684:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8010688:	6013      	str	r3, [r2, #0]

    /* Exit Initialization mode */
    RTC_ExitInitMode(); 
 801068a:	f7ff feef 	bl	801046c <RTC_ExitInitMode>

    /* If  RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((RTC->CR & RTC_CR_BYPSHAD) == RESET)
 801068e:	4b0d      	ldr	r3, [pc, #52]	; (80106c4 <RTC_SetTime+0x110>)
 8010690:	689b      	ldr	r3, [r3, #8]
 8010692:	f003 0320 	and.w	r3, r3, #32
 8010696:	2b00      	cmp	r3, #0
 8010698:	d10a      	bne.n	80106b0 <RTC_SetTime+0xfc>
    {
    if(RTC_WaitForSynchro() == ERROR)
 801069a:	f7ff fef5 	bl	8010488 <RTC_WaitForSynchro>
 801069e:	4603      	mov	r3, r0
 80106a0:	2b00      	cmp	r3, #0
 80106a2:	d102      	bne.n	80106aa <RTC_SetTime+0xf6>
    {
      status = ERROR;
 80106a4:	2300      	movs	r3, #0
 80106a6:	72fb      	strb	r3, [r7, #11]
 80106a8:	e004      	b.n	80106b4 <RTC_SetTime+0x100>
    }
    else
    {
      status = SUCCESS;
 80106aa:	2301      	movs	r3, #1
 80106ac:	72fb      	strb	r3, [r7, #11]
 80106ae:	e001      	b.n	80106b4 <RTC_SetTime+0x100>
    }
  }
    else
    {
      status = SUCCESS;
 80106b0:	2301      	movs	r3, #1
 80106b2:	72fb      	strb	r3, [r7, #11]
    }
  }
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 80106b4:	4b03      	ldr	r3, [pc, #12]	; (80106c4 <RTC_SetTime+0x110>)
 80106b6:	22ff      	movs	r2, #255	; 0xff
 80106b8:	625a      	str	r2, [r3, #36]	; 0x24
    
  return status;
 80106ba:	7afb      	ldrb	r3, [r7, #11]
}
 80106bc:	4618      	mov	r0, r3
 80106be:	3714      	adds	r7, #20
 80106c0:	46bd      	mov	sp, r7
 80106c2:	bd90      	pop	{r4, r7, pc}
 80106c4:	40002800 	.word	0x40002800

080106c8 <RTC_TimeStructInit>:
  * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure which will be 
  *         initialized.
  * @retval None
  */
void RTC_TimeStructInit(RTC_TimeTypeDef* RTC_TimeStruct)
{
 80106c8:	b480      	push	{r7}
 80106ca:	b083      	sub	sp, #12
 80106cc:	af00      	add	r7, sp, #0
 80106ce:	6078      	str	r0, [r7, #4]
  /* Time = 00h:00min:00sec */
  RTC_TimeStruct->RTC_H12 = RTC_H12_AM;
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	2200      	movs	r2, #0
 80106d4:	70da      	strb	r2, [r3, #3]
  RTC_TimeStruct->RTC_Hours = 0;
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	2200      	movs	r2, #0
 80106da:	701a      	strb	r2, [r3, #0]
  RTC_TimeStruct->RTC_Minutes = 0;
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	2200      	movs	r2, #0
 80106e0:	705a      	strb	r2, [r3, #1]
  RTC_TimeStruct->RTC_Seconds = 0; 
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	2200      	movs	r2, #0
 80106e6:	709a      	strb	r2, [r3, #2]
}
 80106e8:	370c      	adds	r7, #12
 80106ea:	46bd      	mov	sp, r7
 80106ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106f0:	4770      	bx	lr
 80106f2:	bf00      	nop

080106f4 <RTC_GetTime>:
  * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure that will 
  *                        contain the returned current time configuration.     
  * @retval None
  */
void RTC_GetTime(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_TimeStruct)
{
 80106f4:	b580      	push	{r7, lr}
 80106f6:	b084      	sub	sp, #16
 80106f8:	af00      	add	r7, sp, #0
 80106fa:	6078      	str	r0, [r7, #4]
 80106fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80106fe:	2300      	movs	r3, #0
 8010700:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));

  /* Get the RTC_TR register */
  tmpreg = (uint32_t)(RTC->TR & RTC_TR_RESERVED_MASK); 
 8010702:	4b22      	ldr	r3, [pc, #136]	; (801078c <RTC_GetTime+0x98>)
 8010704:	681b      	ldr	r3, [r3, #0]
 8010706:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 801070a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 801070e:	60fb      	str	r3, [r7, #12]
  
  /* Fill the structure fields with the read parameters */
  RTC_TimeStruct->RTC_Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8010710:	68fb      	ldr	r3, [r7, #12]
 8010712:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8010716:	0c1b      	lsrs	r3, r3, #16
 8010718:	b2da      	uxtb	r2, r3
 801071a:	683b      	ldr	r3, [r7, #0]
 801071c:	701a      	strb	r2, [r3, #0]
  RTC_TimeStruct->RTC_Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 801071e:	68fb      	ldr	r3, [r7, #12]
 8010720:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8010724:	0a1b      	lsrs	r3, r3, #8
 8010726:	b2da      	uxtb	r2, r3
 8010728:	683b      	ldr	r3, [r7, #0]
 801072a:	705a      	strb	r2, [r3, #1]
  RTC_TimeStruct->RTC_Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 801072c:	68fb      	ldr	r3, [r7, #12]
 801072e:	b2db      	uxtb	r3, r3
 8010730:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010734:	b2da      	uxtb	r2, r3
 8010736:	683b      	ldr	r3, [r7, #0]
 8010738:	709a      	strb	r2, [r3, #2]
  RTC_TimeStruct->RTC_H12 = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);  
 801073a:	68fb      	ldr	r3, [r7, #12]
 801073c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010740:	0c1b      	lsrs	r3, r3, #16
 8010742:	b2da      	uxtb	r2, r3
 8010744:	683b      	ldr	r3, [r7, #0]
 8010746:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (RTC_Format == RTC_Format_BIN)
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	2b00      	cmp	r3, #0
 801074c:	d11a      	bne.n	8010784 <RTC_GetTime+0x90>
  {
    /* Convert the structure parameters to Binary format */
    RTC_TimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours);
 801074e:	683b      	ldr	r3, [r7, #0]
 8010750:	781b      	ldrb	r3, [r3, #0]
 8010752:	4618      	mov	r0, r3
 8010754:	f000 ffd4 	bl	8011700 <RTC_Bcd2ToByte>
 8010758:	4603      	mov	r3, r0
 801075a:	461a      	mov	r2, r3
 801075c:	683b      	ldr	r3, [r7, #0]
 801075e:	701a      	strb	r2, [r3, #0]
    RTC_TimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes);
 8010760:	683b      	ldr	r3, [r7, #0]
 8010762:	785b      	ldrb	r3, [r3, #1]
 8010764:	4618      	mov	r0, r3
 8010766:	f000 ffcb 	bl	8011700 <RTC_Bcd2ToByte>
 801076a:	4603      	mov	r3, r0
 801076c:	461a      	mov	r2, r3
 801076e:	683b      	ldr	r3, [r7, #0]
 8010770:	705a      	strb	r2, [r3, #1]
    RTC_TimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds);   
 8010772:	683b      	ldr	r3, [r7, #0]
 8010774:	789b      	ldrb	r3, [r3, #2]
 8010776:	4618      	mov	r0, r3
 8010778:	f000 ffc2 	bl	8011700 <RTC_Bcd2ToByte>
 801077c:	4603      	mov	r3, r0
 801077e:	461a      	mov	r2, r3
 8010780:	683b      	ldr	r3, [r7, #0]
 8010782:	709a      	strb	r2, [r3, #2]
  }
}
 8010784:	3710      	adds	r7, #16
 8010786:	46bd      	mov	sp, r7
 8010788:	bd80      	pop	{r7, pc}
 801078a:	bf00      	nop
 801078c:	40002800 	.word	0x40002800

08010790 <RTC_GetSubSecond>:
  *         SSR register.
  * @param  None
  * @retval RTC current Calendar Sub seconds value.
  */
uint32_t RTC_GetSubSecond(void)
{
 8010790:	b480      	push	{r7}
 8010792:	b083      	sub	sp, #12
 8010794:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0;
 8010796:	2300      	movs	r3, #0
 8010798:	607b      	str	r3, [r7, #4]
  
  /* Get sub seconds values from the correspondent registers*/
  tmpreg = (uint32_t)(RTC->SSR);
 801079a:	4b06      	ldr	r3, [pc, #24]	; (80107b4 <RTC_GetSubSecond+0x24>)
 801079c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801079e:	607b      	str	r3, [r7, #4]
  
  /* Read DR register to unfroze calendar registers */
  (void) (RTC->DR);
 80107a0:	4b04      	ldr	r3, [pc, #16]	; (80107b4 <RTC_GetSubSecond+0x24>)
 80107a2:	685b      	ldr	r3, [r3, #4]
  
  return (tmpreg);
 80107a4:	687b      	ldr	r3, [r7, #4]
}
 80107a6:	4618      	mov	r0, r3
 80107a8:	370c      	adds	r7, #12
 80107aa:	46bd      	mov	sp, r7
 80107ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107b0:	4770      	bx	lr
 80107b2:	bf00      	nop
 80107b4:	40002800 	.word	0x40002800

080107b8 <RTC_SetDate>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Date register is configured
  *          - ERROR: RTC Date register is not configured
  */
ErrorStatus RTC_SetDate(uint32_t RTC_Format, RTC_DateTypeDef* RTC_DateStruct)
{
 80107b8:	b590      	push	{r4, r7, lr}
 80107ba:	b085      	sub	sp, #20
 80107bc:	af00      	add	r7, sp, #0
 80107be:	6078      	str	r0, [r7, #4]
 80107c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80107c2:	2300      	movs	r3, #0
 80107c4:	60fb      	str	r3, [r7, #12]
  ErrorStatus status = ERROR;
 80107c6:	2300      	movs	r3, #0
 80107c8:	72fb      	strb	r3, [r7, #11]
  
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));

  if ((RTC_Format == RTC_Format_BIN) && ((RTC_DateStruct->RTC_Month & 0x10) == 0x10))
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	2b00      	cmp	r3, #0
 80107ce:	d10e      	bne.n	80107ee <RTC_SetDate+0x36>
 80107d0:	683b      	ldr	r3, [r7, #0]
 80107d2:	785b      	ldrb	r3, [r3, #1]
 80107d4:	f003 0310 	and.w	r3, r3, #16
 80107d8:	2b00      	cmp	r3, #0
 80107da:	d008      	beq.n	80107ee <RTC_SetDate+0x36>
  {
    RTC_DateStruct->RTC_Month = (RTC_DateStruct->RTC_Month & (uint32_t)~(0x10)) + 0x0A;
 80107dc:	683b      	ldr	r3, [r7, #0]
 80107de:	785b      	ldrb	r3, [r3, #1]
 80107e0:	f023 0310 	bic.w	r3, r3, #16
 80107e4:	b2db      	uxtb	r3, r3
 80107e6:	330a      	adds	r3, #10
 80107e8:	b2da      	uxtb	r2, r3
 80107ea:	683b      	ldr	r3, [r7, #0]
 80107ec:	705a      	strb	r2, [r3, #1]
  }  
  if (RTC_Format == RTC_Format_BIN)
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	2b00      	cmp	r3, #0
 80107f2:	d00d      	beq.n	8010810 <RTC_SetDate+0x58>
    assert_param(IS_RTC_DATE(RTC_DateStruct->RTC_Date));
  }
  else
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(RTC_DateStruct->RTC_Year)));
    tmpreg = RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
 80107f4:	683b      	ldr	r3, [r7, #0]
 80107f6:	785b      	ldrb	r3, [r3, #1]
 80107f8:	4618      	mov	r0, r3
 80107fa:	f000 ff81 	bl	8011700 <RTC_Bcd2ToByte>
 80107fe:	4603      	mov	r3, r0
 8010800:	60fb      	str	r3, [r7, #12]
    assert_param(IS_RTC_MONTH(tmpreg));
    tmpreg = RTC_Bcd2ToByte(RTC_DateStruct->RTC_Date);
 8010802:	683b      	ldr	r3, [r7, #0]
 8010804:	789b      	ldrb	r3, [r3, #2]
 8010806:	4618      	mov	r0, r3
 8010808:	f000 ff7a 	bl	8011700 <RTC_Bcd2ToByte>
 801080c:	4603      	mov	r3, r0
 801080e:	60fb      	str	r3, [r7, #12]
    assert_param(IS_RTC_DATE(tmpreg));
  }
  assert_param(IS_RTC_WEEKDAY(RTC_DateStruct->RTC_WeekDay));

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	2b00      	cmp	r3, #0
 8010814:	d00f      	beq.n	8010836 <RTC_SetDate+0x7e>
  {
    tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 8010816:	683b      	ldr	r3, [r7, #0]
 8010818:	78db      	ldrb	r3, [r3, #3]
 801081a:	041a      	lsls	r2, r3, #16
              (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 801081c:	683b      	ldr	r3, [r7, #0]
 801081e:	785b      	ldrb	r3, [r3, #1]
 8010820:	021b      	lsls	r3, r3, #8
  assert_param(IS_RTC_WEEKDAY(RTC_DateStruct->RTC_WeekDay));

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 8010822:	431a      	orrs	r2, r3
              (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
              ((uint32_t)RTC_DateStruct->RTC_Date) | \
 8010824:	683b      	ldr	r3, [r7, #0]
 8010826:	789b      	ldrb	r3, [r3, #2]

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
              (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 8010828:	431a      	orrs	r2, r3
              ((uint32_t)RTC_DateStruct->RTC_Date) | \
              (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
 801082a:	683b      	ldr	r3, [r7, #0]
 801082c:	781b      	ldrb	r3, [r3, #0]
 801082e:	035b      	lsls	r3, r3, #13
  assert_param(IS_RTC_WEEKDAY(RTC_DateStruct->RTC_WeekDay));

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 8010830:	4313      	orrs	r3, r2
 8010832:	60fb      	str	r3, [r7, #12]
 8010834:	e01b      	b.n	801086e <RTC_SetDate+0xb6>
              ((uint32_t)RTC_DateStruct->RTC_Date) | \
              (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 8010836:	683b      	ldr	r3, [r7, #0]
 8010838:	78db      	ldrb	r3, [r3, #3]
 801083a:	4618      	mov	r0, r3
 801083c:	f000 ff42 	bl	80116c4 <RTC_ByteToBcd2>
 8010840:	4603      	mov	r3, r0
 8010842:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 8010844:	683b      	ldr	r3, [r7, #0]
 8010846:	785b      	ldrb	r3, [r3, #1]
 8010848:	4618      	mov	r0, r3
 801084a:	f000 ff3b 	bl	80116c4 <RTC_ByteToBcd2>
 801084e:	4603      	mov	r3, r0
 8010850:	021b      	lsls	r3, r3, #8
              ((uint32_t)RTC_DateStruct->RTC_Date) | \
              (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 8010852:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Date)) | \
 8010854:	683b      	ldr	r3, [r7, #0]
 8010856:	789b      	ldrb	r3, [r3, #2]
 8010858:	4618      	mov	r0, r3
 801085a:	f000 ff33 	bl	80116c4 <RTC_ByteToBcd2>
 801085e:	4603      	mov	r3, r0
              (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 8010860:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Date)) | \
              ((uint32_t)RTC_DateStruct->RTC_WeekDay << 13));
 8010864:	683b      	ldr	r3, [r7, #0]
 8010866:	781b      	ldrb	r3, [r3, #0]
 8010868:	035b      	lsls	r3, r3, #13
              ((uint32_t)RTC_DateStruct->RTC_Date) | \
              (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 801086a:	4313      	orrs	r3, r2
 801086c:	60fb      	str	r3, [r7, #12]
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Date)) | \
              ((uint32_t)RTC_DateStruct->RTC_WeekDay << 13));
  }

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 801086e:	4b19      	ldr	r3, [pc, #100]	; (80108d4 <RTC_SetDate+0x11c>)
 8010870:	22ca      	movs	r2, #202	; 0xca
 8010872:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8010874:	4b17      	ldr	r3, [pc, #92]	; (80108d4 <RTC_SetDate+0x11c>)
 8010876:	2253      	movs	r2, #83	; 0x53
 8010878:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 801087a:	f7ff fdbd 	bl	80103f8 <RTC_EnterInitMode>
 801087e:	4603      	mov	r3, r0
 8010880:	2b00      	cmp	r3, #0
 8010882:	d102      	bne.n	801088a <RTC_SetDate+0xd2>
  {
    status = ERROR;
 8010884:	2300      	movs	r3, #0
 8010886:	72fb      	strb	r3, [r7, #11]
 8010888:	e01b      	b.n	80108c2 <RTC_SetDate+0x10a>
  } 
  else
  {
    /* Set the RTC_DR register */
    RTC->DR = (uint32_t)(tmpreg & RTC_DR_RESERVED_MASK);
 801088a:	4a12      	ldr	r2, [pc, #72]	; (80108d4 <RTC_SetDate+0x11c>)
 801088c:	68fb      	ldr	r3, [r7, #12]
 801088e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8010892:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8010896:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    RTC_ExitInitMode(); 
 8010898:	f7ff fde8 	bl	801046c <RTC_ExitInitMode>

    /* If  RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((RTC->CR & RTC_CR_BYPSHAD) == RESET)
 801089c:	4b0d      	ldr	r3, [pc, #52]	; (80108d4 <RTC_SetDate+0x11c>)
 801089e:	689b      	ldr	r3, [r3, #8]
 80108a0:	f003 0320 	and.w	r3, r3, #32
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	d10a      	bne.n	80108be <RTC_SetDate+0x106>
    {
    if(RTC_WaitForSynchro() == ERROR)
 80108a8:	f7ff fdee 	bl	8010488 <RTC_WaitForSynchro>
 80108ac:	4603      	mov	r3, r0
 80108ae:	2b00      	cmp	r3, #0
 80108b0:	d102      	bne.n	80108b8 <RTC_SetDate+0x100>
    {
      status = ERROR;
 80108b2:	2300      	movs	r3, #0
 80108b4:	72fb      	strb	r3, [r7, #11]
 80108b6:	e004      	b.n	80108c2 <RTC_SetDate+0x10a>
    }
    else
    {
      status = SUCCESS;
 80108b8:	2301      	movs	r3, #1
 80108ba:	72fb      	strb	r3, [r7, #11]
 80108bc:	e001      	b.n	80108c2 <RTC_SetDate+0x10a>
    }
  }
    else
    {
      status = SUCCESS;
 80108be:	2301      	movs	r3, #1
 80108c0:	72fb      	strb	r3, [r7, #11]
    }
  }
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;   
 80108c2:	4b04      	ldr	r3, [pc, #16]	; (80108d4 <RTC_SetDate+0x11c>)
 80108c4:	22ff      	movs	r2, #255	; 0xff
 80108c6:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
 80108c8:	7afb      	ldrb	r3, [r7, #11]
}
 80108ca:	4618      	mov	r0, r3
 80108cc:	3714      	adds	r7, #20
 80108ce:	46bd      	mov	sp, r7
 80108d0:	bd90      	pop	{r4, r7, pc}
 80108d2:	bf00      	nop
 80108d4:	40002800 	.word	0x40002800

080108d8 <RTC_DateStructInit>:
  * @param  RTC_DateStruct: pointer to a RTC_DateTypeDef structure which will be 
  *         initialized.
  * @retval None
  */
void RTC_DateStructInit(RTC_DateTypeDef* RTC_DateStruct)
{
 80108d8:	b480      	push	{r7}
 80108da:	b083      	sub	sp, #12
 80108dc:	af00      	add	r7, sp, #0
 80108de:	6078      	str	r0, [r7, #4]
  /* Monday, January 01 xx00 */
  RTC_DateStruct->RTC_WeekDay = RTC_Weekday_Monday;
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	2201      	movs	r2, #1
 80108e4:	701a      	strb	r2, [r3, #0]
  RTC_DateStruct->RTC_Date = 1;
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	2201      	movs	r2, #1
 80108ea:	709a      	strb	r2, [r3, #2]
  RTC_DateStruct->RTC_Month = RTC_Month_January;
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	2201      	movs	r2, #1
 80108f0:	705a      	strb	r2, [r3, #1]
  RTC_DateStruct->RTC_Year = 0;
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	2200      	movs	r2, #0
 80108f6:	70da      	strb	r2, [r3, #3]
}
 80108f8:	370c      	adds	r7, #12
 80108fa:	46bd      	mov	sp, r7
 80108fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010900:	4770      	bx	lr
 8010902:	bf00      	nop

08010904 <RTC_GetDate>:
  * @param RTC_DateStruct: pointer to a RTC_DateTypeDef structure that will 
  *                        contain the returned current date configuration.     
  * @retval None
  */
void RTC_GetDate(uint32_t RTC_Format, RTC_DateTypeDef* RTC_DateStruct)
{
 8010904:	b580      	push	{r7, lr}
 8010906:	b084      	sub	sp, #16
 8010908:	af00      	add	r7, sp, #0
 801090a:	6078      	str	r0, [r7, #4]
 801090c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801090e:	2300      	movs	r3, #0
 8010910:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));
  
  /* Get the RTC_TR register */
  tmpreg = (uint32_t)(RTC->DR & RTC_DR_RESERVED_MASK); 
 8010912:	4b22      	ldr	r3, [pc, #136]	; (801099c <RTC_GetDate+0x98>)
 8010914:	685b      	ldr	r3, [r3, #4]
 8010916:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 801091a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 801091e:	60fb      	str	r3, [r7, #12]

  /* Fill the structure fields with the read parameters */
  RTC_DateStruct->RTC_Year = (uint8_t)((tmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 8010920:	68fb      	ldr	r3, [r7, #12]
 8010922:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8010926:	0c1b      	lsrs	r3, r3, #16
 8010928:	b2da      	uxtb	r2, r3
 801092a:	683b      	ldr	r3, [r7, #0]
 801092c:	70da      	strb	r2, [r3, #3]
  RTC_DateStruct->RTC_Month = (uint8_t)((tmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 801092e:	68fb      	ldr	r3, [r7, #12]
 8010930:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 8010934:	0a1b      	lsrs	r3, r3, #8
 8010936:	b2da      	uxtb	r2, r3
 8010938:	683b      	ldr	r3, [r7, #0]
 801093a:	705a      	strb	r2, [r3, #1]
  RTC_DateStruct->RTC_Date = (uint8_t)(tmpreg & (RTC_DR_DT | RTC_DR_DU));
 801093c:	68fb      	ldr	r3, [r7, #12]
 801093e:	b2db      	uxtb	r3, r3
 8010940:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010944:	b2da      	uxtb	r2, r3
 8010946:	683b      	ldr	r3, [r7, #0]
 8010948:	709a      	strb	r2, [r3, #2]
  RTC_DateStruct->RTC_WeekDay = (uint8_t)((tmpreg & (RTC_DR_WDU)) >> 13);
 801094a:	68fb      	ldr	r3, [r7, #12]
 801094c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8010950:	0b5b      	lsrs	r3, r3, #13
 8010952:	b2da      	uxtb	r2, r3
 8010954:	683b      	ldr	r3, [r7, #0]
 8010956:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (RTC_Format == RTC_Format_BIN)
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	2b00      	cmp	r3, #0
 801095c:	d11a      	bne.n	8010994 <RTC_GetDate+0x90>
  {
    /* Convert the structure parameters to Binary format */
    RTC_DateStruct->RTC_Year = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Year);
 801095e:	683b      	ldr	r3, [r7, #0]
 8010960:	78db      	ldrb	r3, [r3, #3]
 8010962:	4618      	mov	r0, r3
 8010964:	f000 fecc 	bl	8011700 <RTC_Bcd2ToByte>
 8010968:	4603      	mov	r3, r0
 801096a:	461a      	mov	r2, r3
 801096c:	683b      	ldr	r3, [r7, #0]
 801096e:	70da      	strb	r2, [r3, #3]
    RTC_DateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
 8010970:	683b      	ldr	r3, [r7, #0]
 8010972:	785b      	ldrb	r3, [r3, #1]
 8010974:	4618      	mov	r0, r3
 8010976:	f000 fec3 	bl	8011700 <RTC_Bcd2ToByte>
 801097a:	4603      	mov	r3, r0
 801097c:	461a      	mov	r2, r3
 801097e:	683b      	ldr	r3, [r7, #0]
 8010980:	705a      	strb	r2, [r3, #1]
    RTC_DateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Date);
 8010982:	683b      	ldr	r3, [r7, #0]
 8010984:	789b      	ldrb	r3, [r3, #2]
 8010986:	4618      	mov	r0, r3
 8010988:	f000 feba 	bl	8011700 <RTC_Bcd2ToByte>
 801098c:	4603      	mov	r3, r0
 801098e:	461a      	mov	r2, r3
 8010990:	683b      	ldr	r3, [r7, #0]
 8010992:	709a      	strb	r2, [r3, #2]
  }
}
 8010994:	3710      	adds	r7, #16
 8010996:	46bd      	mov	sp, r7
 8010998:	bd80      	pop	{r7, pc}
 801099a:	bf00      	nop
 801099c:	40002800 	.word	0x40002800

080109a0 <RTC_SetAlarm>:
  * @param  RTC_AlarmStruct: pointer to a RTC_AlarmTypeDef structure that 
  *                          contains the alarm configuration parameters.     
  * @retval None
  */
void RTC_SetAlarm(uint32_t RTC_Format, uint32_t RTC_Alarm, RTC_AlarmTypeDef* RTC_AlarmStruct)
{
 80109a0:	b590      	push	{r4, r7, lr}
 80109a2:	b087      	sub	sp, #28
 80109a4:	af00      	add	r7, sp, #0
 80109a6:	60f8      	str	r0, [r7, #12]
 80109a8:	60b9      	str	r1, [r7, #8]
 80109aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 80109ac:	2300      	movs	r3, #0
 80109ae:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(RTC_Format));
  assert_param(IS_RTC_ALARM(RTC_Alarm));
  assert_param(IS_ALARM_MASK(RTC_AlarmStruct->RTC_AlarmMask));
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel));

  if (RTC_Format == RTC_Format_BIN)
 80109b0:	68fb      	ldr	r3, [r7, #12]
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	d109      	bne.n	80109ca <RTC_SetAlarm+0x2a>
  {
    if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80109b6:	4b47      	ldr	r3, [pc, #284]	; (8010ad4 <RTC_SetAlarm+0x134>)
 80109b8:	689b      	ldr	r3, [r3, #8]
 80109ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80109be:	2b00      	cmp	r3, #0
 80109c0:	d127      	bne.n	8010a12 <RTC_SetAlarm+0x72>
      assert_param(IS_RTC_HOUR12(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours));
      assert_param(IS_RTC_H12(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12));
    } 
    else
    {
      RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = 0x00;
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	2200      	movs	r2, #0
 80109c6:	70da      	strb	r2, [r3, #3]
 80109c8:	e023      	b.n	8010a12 <RTC_SetAlarm+0x72>
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_AlarmStruct->RTC_AlarmDateWeekDay));
    }
  }
  else
  {
    if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80109ca:	4b42      	ldr	r3, [pc, #264]	; (8010ad4 <RTC_SetAlarm+0x134>)
 80109cc:	689b      	ldr	r3, [r3, #8]
 80109ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	d007      	beq.n	80109e6 <RTC_SetAlarm+0x46>
    {
      tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours);
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	781b      	ldrb	r3, [r3, #0]
 80109da:	4618      	mov	r0, r3
 80109dc:	f000 fe90 	bl	8011700 <RTC_Bcd2ToByte>
 80109e0:	4603      	mov	r3, r0
 80109e2:	617b      	str	r3, [r7, #20]
 80109e4:	e002      	b.n	80109ec <RTC_SetAlarm+0x4c>
      assert_param(IS_RTC_HOUR12(tmpreg));
      assert_param(IS_RTC_H12(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12));
    } 
    else
    {
      RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = 0x00;
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	2200      	movs	r2, #0
 80109ea:	70da      	strb	r2, [r3, #3]
    }
    
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)));
    
    if(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel == RTC_AlarmDateWeekDaySel_Date)
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	689b      	ldr	r3, [r3, #8]
 80109f0:	2b00      	cmp	r3, #0
 80109f2:	d107      	bne.n	8010a04 <RTC_SetAlarm+0x64>
    {
      tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	7b1b      	ldrb	r3, [r3, #12]
 80109f8:	4618      	mov	r0, r3
 80109fa:	f000 fe81 	bl	8011700 <RTC_Bcd2ToByte>
 80109fe:	4603      	mov	r3, r0
 8010a00:	617b      	str	r3, [r7, #20]
 8010a02:	e006      	b.n	8010a12 <RTC_SetAlarm+0x72>
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(tmpreg));    
    }
    else
    {
      tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	7b1b      	ldrb	r3, [r3, #12]
 8010a08:	4618      	mov	r0, r3
 8010a0a:	f000 fe79 	bl	8011700 <RTC_Bcd2ToByte>
 8010a0e:	4603      	mov	r3, r0
 8010a10:	617b      	str	r3, [r7, #20]
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(tmpreg));      
    }    
  }

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
 8010a12:	68fb      	ldr	r3, [r7, #12]
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	d019      	beq.n	8010a4c <RTC_SetAlarm+0xac>
  {
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	781b      	ldrb	r3, [r3, #0]
 8010a1c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	785b      	ldrb	r3, [r3, #1]
 8010a22:	021b      	lsls	r3, r3, #8
  }

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 8010a24:	431a      	orrs	r2, r3
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	789b      	ldrb	r3, [r3, #2]

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 8010a2a:	431a      	orrs	r2, r3
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	78db      	ldrb	r3, [r3, #3]
 8010a30:	041b      	lsls	r3, r3, #16
  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
 8010a32:	431a      	orrs	r2, r3
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	7b1b      	ldrb	r3, [r3, #12]
 8010a38:	061b      	lsls	r3, r3, #24
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 8010a3a:	431a      	orrs	r2, r3
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	689b      	ldr	r3, [r3, #8]
  {
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 8010a40:	431a      	orrs	r2, r3
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	685b      	ldr	r3, [r3, #4]
  }

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 8010a46:	4313      	orrs	r3, r2
 8010a48:	617b      	str	r3, [r7, #20]
 8010a4a:	e02b      	b.n	8010aa4 <RTC_SetAlarm+0x104>
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	781b      	ldrb	r3, [r3, #0]
 8010a50:	4618      	mov	r0, r3
 8010a52:	f000 fe37 	bl	80116c4 <RTC_ByteToBcd2>
 8010a56:	4603      	mov	r3, r0
 8010a58:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	785b      	ldrb	r3, [r3, #1]
 8010a5e:	4618      	mov	r0, r3
 8010a60:	f000 fe30 	bl	80116c4 <RTC_ByteToBcd2>
 8010a64:	4603      	mov	r3, r0
 8010a66:	021b      	lsls	r3, r3, #8
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 8010a68:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	789b      	ldrb	r3, [r3, #2]
 8010a6e:	4618      	mov	r0, r3
 8010a70:	f000 fe28 	bl	80116c4 <RTC_ByteToBcd2>
 8010a74:	4603      	mov	r3, r0
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 8010a76:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	78db      	ldrb	r3, [r3, #3]
 8010a7e:	041b      	lsls	r3, r3, #16
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
 8010a80:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	7b1b      	ldrb	r3, [r3, #12]
 8010a88:	4618      	mov	r0, r3
 8010a8a:	f000 fe1b 	bl	80116c4 <RTC_ByteToBcd2>
 8010a8e:	4603      	mov	r3, r0
 8010a90:	061b      	lsls	r3, r3, #24
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 8010a92:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	689b      	ldr	r3, [r3, #8]
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 8010a9a:	431a      	orrs	r2, r3
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	685b      	ldr	r3, [r3, #4]
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 8010aa0:	4313      	orrs	r3, r2
 8010aa2:	617b      	str	r3, [r7, #20]
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
  } 

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8010aa4:	4b0b      	ldr	r3, [pc, #44]	; (8010ad4 <RTC_SetAlarm+0x134>)
 8010aa6:	22ca      	movs	r2, #202	; 0xca
 8010aa8:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8010aaa:	4b0a      	ldr	r3, [pc, #40]	; (8010ad4 <RTC_SetAlarm+0x134>)
 8010aac:	2253      	movs	r2, #83	; 0x53
 8010aae:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (RTC_Alarm == RTC_Alarm_A)
 8010ab0:	68bb      	ldr	r3, [r7, #8]
 8010ab2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010ab6:	d103      	bne.n	8010ac0 <RTC_SetAlarm+0x120>
  {
    RTC->ALRMAR = (uint32_t)tmpreg;
 8010ab8:	4b06      	ldr	r3, [pc, #24]	; (8010ad4 <RTC_SetAlarm+0x134>)
 8010aba:	697a      	ldr	r2, [r7, #20]
 8010abc:	61da      	str	r2, [r3, #28]
 8010abe:	e002      	b.n	8010ac6 <RTC_SetAlarm+0x126>
  }
  else
  {
    RTC->ALRMBR = (uint32_t)tmpreg;
 8010ac0:	4b04      	ldr	r3, [pc, #16]	; (8010ad4 <RTC_SetAlarm+0x134>)
 8010ac2:	697a      	ldr	r2, [r7, #20]
 8010ac4:	621a      	str	r2, [r3, #32]
  }

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;   
 8010ac6:	4b03      	ldr	r3, [pc, #12]	; (8010ad4 <RTC_SetAlarm+0x134>)
 8010ac8:	22ff      	movs	r2, #255	; 0xff
 8010aca:	625a      	str	r2, [r3, #36]	; 0x24
}
 8010acc:	371c      	adds	r7, #28
 8010ace:	46bd      	mov	sp, r7
 8010ad0:	bd90      	pop	{r4, r7, pc}
 8010ad2:	bf00      	nop
 8010ad4:	40002800 	.word	0x40002800

08010ad8 <RTC_AlarmStructInit>:
  * @param  RTC_AlarmStruct: pointer to a @ref RTC_AlarmTypeDef structure which
  *         will be initialized.
  * @retval None
  */
void RTC_AlarmStructInit(RTC_AlarmTypeDef* RTC_AlarmStruct)
{
 8010ad8:	b480      	push	{r7}
 8010ada:	b083      	sub	sp, #12
 8010adc:	af00      	add	r7, sp, #0
 8010ade:	6078      	str	r0, [r7, #4]
  /* Alarm Time Settings : Time = 00h:00mn:00sec */
  RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = RTC_H12_AM;
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	2200      	movs	r2, #0
 8010ae4:	70da      	strb	r2, [r3, #3]
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = 0;
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	2200      	movs	r2, #0
 8010aea:	701a      	strb	r2, [r3, #0]
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = 0;
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	2200      	movs	r2, #0
 8010af0:	705a      	strb	r2, [r3, #1]
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = 0;
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	2200      	movs	r2, #0
 8010af6:	709a      	strb	r2, [r3, #2]

  /* Alarm Date Settings : Date = 1st day of the month */
  RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = RTC_AlarmDateWeekDaySel_Date;
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	2200      	movs	r2, #0
 8010afc:	609a      	str	r2, [r3, #8]
  RTC_AlarmStruct->RTC_AlarmDateWeekDay = 1;
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	2201      	movs	r2, #1
 8010b02:	731a      	strb	r2, [r3, #12]

  /* Alarm Masks Settings : Mask =  all fields are not masked */
  RTC_AlarmStruct->RTC_AlarmMask = RTC_AlarmMask_None;
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	2200      	movs	r2, #0
 8010b08:	605a      	str	r2, [r3, #4]
}
 8010b0a:	370c      	adds	r7, #12
 8010b0c:	46bd      	mov	sp, r7
 8010b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b12:	4770      	bx	lr

08010b14 <RTC_GetAlarm>:
  * @param  RTC_AlarmStruct: pointer to a RTC_AlarmTypeDef structure that will 
  *                          contains the output alarm configuration values.     
  * @retval None
  */
void RTC_GetAlarm(uint32_t RTC_Format, uint32_t RTC_Alarm, RTC_AlarmTypeDef* RTC_AlarmStruct)
{
 8010b14:	b580      	push	{r7, lr}
 8010b16:	b086      	sub	sp, #24
 8010b18:	af00      	add	r7, sp, #0
 8010b1a:	60f8      	str	r0, [r7, #12]
 8010b1c:	60b9      	str	r1, [r7, #8]
 8010b1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8010b20:	2300      	movs	r3, #0
 8010b22:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));
  assert_param(IS_RTC_ALARM(RTC_Alarm)); 

  /* Get the RTC_ALRMxR register */
  if (RTC_Alarm == RTC_Alarm_A)
 8010b24:	68bb      	ldr	r3, [r7, #8]
 8010b26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010b2a:	d103      	bne.n	8010b34 <RTC_GetAlarm+0x20>
  {
    tmpreg = (uint32_t)(RTC->ALRMAR);
 8010b2c:	4b2e      	ldr	r3, [pc, #184]	; (8010be8 <RTC_GetAlarm+0xd4>)
 8010b2e:	69db      	ldr	r3, [r3, #28]
 8010b30:	617b      	str	r3, [r7, #20]
 8010b32:	e002      	b.n	8010b3a <RTC_GetAlarm+0x26>
  }
  else
  {
    tmpreg = (uint32_t)(RTC->ALRMBR);
 8010b34:	4b2c      	ldr	r3, [pc, #176]	; (8010be8 <RTC_GetAlarm+0xd4>)
 8010b36:	6a1b      	ldr	r3, [r3, #32]
 8010b38:	617b      	str	r3, [r7, #20]
  }

  /* Fill the structure with the read parameters */
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = (uint32_t)((tmpreg & (RTC_ALRMAR_HT | \
 8010b3a:	697b      	ldr	r3, [r7, #20]
 8010b3c:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8010b40:	0c1b      	lsrs	r3, r3, #16
 8010b42:	b2da      	uxtb	r2, r3
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	701a      	strb	r2, [r3, #0]
                                                     RTC_ALRMAR_HU)) >> 16);
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = (uint32_t)((tmpreg & (RTC_ALRMAR_MNT | \
 8010b48:	697b      	ldr	r3, [r7, #20]
 8010b4a:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8010b4e:	0a1b      	lsrs	r3, r3, #8
 8010b50:	b2da      	uxtb	r2, r3
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	705a      	strb	r2, [r3, #1]
                                                     RTC_ALRMAR_MNU)) >> 8);
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = (uint32_t)(tmpreg & (RTC_ALRMAR_ST | \
 8010b56:	697b      	ldr	r3, [r7, #20]
 8010b58:	b2db      	uxtb	r3, r3
 8010b5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010b5e:	b2da      	uxtb	r2, r3
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	709a      	strb	r2, [r3, #2]
                                                     RTC_ALRMAR_SU));
  RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = (uint32_t)((tmpreg & RTC_ALRMAR_PM) >> 16);
 8010b64:	697b      	ldr	r3, [r7, #20]
 8010b66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010b6a:	0c1b      	lsrs	r3, r3, #16
 8010b6c:	b2da      	uxtb	r2, r3
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	70da      	strb	r2, [r3, #3]
  RTC_AlarmStruct->RTC_AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 24);
 8010b72:	697b      	ldr	r3, [r7, #20]
 8010b74:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
 8010b78:	0e1b      	lsrs	r3, r3, #24
 8010b7a:	b2da      	uxtb	r2, r3
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	731a      	strb	r2, [r3, #12]
  RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 8010b80:	697b      	ldr	r3, [r7, #20]
 8010b82:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	609a      	str	r2, [r3, #8]
  RTC_AlarmStruct->RTC_AlarmMask = (uint32_t)(tmpreg & RTC_AlarmMask_All);
 8010b8a:	697b      	ldr	r3, [r7, #20]
 8010b8c:	f003 3280 	and.w	r2, r3, #2155905152	; 0x80808080
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	605a      	str	r2, [r3, #4]

  if (RTC_Format == RTC_Format_BIN)
 8010b94:	68fb      	ldr	r3, [r7, #12]
 8010b96:	2b00      	cmp	r3, #0
 8010b98:	d123      	bne.n	8010be2 <RTC_GetAlarm+0xce>
  {
    RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	781b      	ldrb	r3, [r3, #0]
 8010b9e:	4618      	mov	r0, r3
 8010ba0:	f000 fdae 	bl	8011700 <RTC_Bcd2ToByte>
 8010ba4:	4603      	mov	r3, r0
 8010ba6:	461a      	mov	r2, r3
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	701a      	strb	r2, [r3, #0]
                                                        RTC_AlarmTime.RTC_Hours);
    RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	785b      	ldrb	r3, [r3, #1]
 8010bb0:	4618      	mov	r0, r3
 8010bb2:	f000 fda5 	bl	8011700 <RTC_Bcd2ToByte>
 8010bb6:	4603      	mov	r3, r0
 8010bb8:	461a      	mov	r2, r3
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	705a      	strb	r2, [r3, #1]
                                                        RTC_AlarmTime.RTC_Minutes);
    RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	789b      	ldrb	r3, [r3, #2]
 8010bc2:	4618      	mov	r0, r3
 8010bc4:	f000 fd9c 	bl	8011700 <RTC_Bcd2ToByte>
 8010bc8:	4603      	mov	r3, r0
 8010bca:	461a      	mov	r2, r3
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	709a      	strb	r2, [r3, #2]
                                                        RTC_AlarmTime.RTC_Seconds);
    RTC_AlarmStruct->RTC_AlarmDateWeekDay = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	7b1b      	ldrb	r3, [r3, #12]
 8010bd4:	4618      	mov	r0, r3
 8010bd6:	f000 fd93 	bl	8011700 <RTC_Bcd2ToByte>
 8010bda:	4603      	mov	r3, r0
 8010bdc:	461a      	mov	r2, r3
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	731a      	strb	r2, [r3, #12]
  }  
}
 8010be2:	3718      	adds	r7, #24
 8010be4:	46bd      	mov	sp, r7
 8010be6:	bd80      	pop	{r7, pc}
 8010be8:	40002800 	.word	0x40002800

08010bec <RTC_AlarmCmd>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Alarm is enabled/disabled
  *          - ERROR: RTC Alarm is not enabled/disabled  
  */
ErrorStatus RTC_AlarmCmd(uint32_t RTC_Alarm, FunctionalState NewState)
{
 8010bec:	b480      	push	{r7}
 8010bee:	b087      	sub	sp, #28
 8010bf0:	af00      	add	r7, sp, #0
 8010bf2:	6078      	str	r0, [r7, #4]
 8010bf4:	460b      	mov	r3, r1
 8010bf6:	70fb      	strb	r3, [r7, #3]
  __IO uint32_t alarmcounter = 0x00;
 8010bf8:	2300      	movs	r3, #0
 8010bfa:	60fb      	str	r3, [r7, #12]
  uint32_t alarmstatus = 0x00;
 8010bfc:	2300      	movs	r3, #0
 8010bfe:	613b      	str	r3, [r7, #16]
  ErrorStatus status = ERROR;
 8010c00:	2300      	movs	r3, #0
 8010c02:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_RTC_CMD_ALARM(RTC_Alarm));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8010c04:	4b1f      	ldr	r3, [pc, #124]	; (8010c84 <RTC_AlarmCmd+0x98>)
 8010c06:	22ca      	movs	r2, #202	; 0xca
 8010c08:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8010c0a:	4b1e      	ldr	r3, [pc, #120]	; (8010c84 <RTC_AlarmCmd+0x98>)
 8010c0c:	2253      	movs	r2, #83	; 0x53
 8010c0e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm state */
  if (NewState != DISABLE)
 8010c10:	78fb      	ldrb	r3, [r7, #3]
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	d008      	beq.n	8010c28 <RTC_AlarmCmd+0x3c>
  {
    RTC->CR |= (uint32_t)RTC_Alarm;
 8010c16:	4b1b      	ldr	r3, [pc, #108]	; (8010c84 <RTC_AlarmCmd+0x98>)
 8010c18:	4a1a      	ldr	r2, [pc, #104]	; (8010c84 <RTC_AlarmCmd+0x98>)
 8010c1a:	6891      	ldr	r1, [r2, #8]
 8010c1c:	687a      	ldr	r2, [r7, #4]
 8010c1e:	430a      	orrs	r2, r1
 8010c20:	609a      	str	r2, [r3, #8]

    status = SUCCESS;    
 8010c22:	2301      	movs	r3, #1
 8010c24:	75fb      	strb	r3, [r7, #23]
 8010c26:	e022      	b.n	8010c6e <RTC_AlarmCmd+0x82>
  }
  else
  { 
    /* Disable the Alarm in RTC_CR register */
    RTC->CR &= (uint32_t)~RTC_Alarm;
 8010c28:	4b16      	ldr	r3, [pc, #88]	; (8010c84 <RTC_AlarmCmd+0x98>)
 8010c2a:	4a16      	ldr	r2, [pc, #88]	; (8010c84 <RTC_AlarmCmd+0x98>)
 8010c2c:	6891      	ldr	r1, [r2, #8]
 8010c2e:	687a      	ldr	r2, [r7, #4]
 8010c30:	43d2      	mvns	r2, r2
 8010c32:	400a      	ands	r2, r1
 8010c34:	609a      	str	r2, [r3, #8]
   
    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    do
    {
      alarmstatus = RTC->ISR & (RTC_Alarm >> 8);
 8010c36:	4b13      	ldr	r3, [pc, #76]	; (8010c84 <RTC_AlarmCmd+0x98>)
 8010c38:	68da      	ldr	r2, [r3, #12]
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	0a1b      	lsrs	r3, r3, #8
 8010c3e:	4013      	ands	r3, r2
 8010c40:	613b      	str	r3, [r7, #16]
      alarmcounter++;  
 8010c42:	68fb      	ldr	r3, [r7, #12]
 8010c44:	3301      	adds	r3, #1
 8010c46:	60fb      	str	r3, [r7, #12]
    } while((alarmcounter != INITMODE_TIMEOUT) && (alarmstatus == 0x00));
 8010c48:	68fb      	ldr	r3, [r7, #12]
 8010c4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010c4e:	d002      	beq.n	8010c56 <RTC_AlarmCmd+0x6a>
 8010c50:	693b      	ldr	r3, [r7, #16]
 8010c52:	2b00      	cmp	r3, #0
 8010c54:	d0ef      	beq.n	8010c36 <RTC_AlarmCmd+0x4a>
    
    if ((RTC->ISR & (RTC_Alarm >> 8)) == RESET)
 8010c56:	4b0b      	ldr	r3, [pc, #44]	; (8010c84 <RTC_AlarmCmd+0x98>)
 8010c58:	68da      	ldr	r2, [r3, #12]
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	0a1b      	lsrs	r3, r3, #8
 8010c5e:	4013      	ands	r3, r2
 8010c60:	2b00      	cmp	r3, #0
 8010c62:	d102      	bne.n	8010c6a <RTC_AlarmCmd+0x7e>
    {
      status = ERROR;
 8010c64:	2300      	movs	r3, #0
 8010c66:	75fb      	strb	r3, [r7, #23]
 8010c68:	e001      	b.n	8010c6e <RTC_AlarmCmd+0x82>
    } 
    else
    {
      status = SUCCESS;
 8010c6a:	2301      	movs	r3, #1
 8010c6c:	75fb      	strb	r3, [r7, #23]
    }        
  } 

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8010c6e:	4b05      	ldr	r3, [pc, #20]	; (8010c84 <RTC_AlarmCmd+0x98>)
 8010c70:	22ff      	movs	r2, #255	; 0xff
 8010c72:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
 8010c74:	7dfb      	ldrb	r3, [r7, #23]
}
 8010c76:	4618      	mov	r0, r3
 8010c78:	371c      	adds	r7, #28
 8010c7a:	46bd      	mov	sp, r7
 8010c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c80:	4770      	bx	lr
 8010c82:	bf00      	nop
 8010c84:	40002800 	.word	0x40002800

08010c88 <RTC_AlarmSubSecondConfig>:
  *     @arg RTC_AlarmSubSecondMask_None   : SS[14:0] are compared and must match
  *                                          to activate alarm
  * @retval None
  */
void RTC_AlarmSubSecondConfig(uint32_t RTC_Alarm, uint32_t RTC_AlarmSubSecondValue, uint32_t RTC_AlarmSubSecondMask)
{
 8010c88:	b480      	push	{r7}
 8010c8a:	b087      	sub	sp, #28
 8010c8c:	af00      	add	r7, sp, #0
 8010c8e:	60f8      	str	r0, [r7, #12]
 8010c90:	60b9      	str	r1, [r7, #8]
 8010c92:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8010c94:	2300      	movs	r3, #0
 8010c96:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM(RTC_Alarm));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(RTC_AlarmSubSecondValue));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(RTC_AlarmSubSecondMask));
  
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8010c98:	4b0e      	ldr	r3, [pc, #56]	; (8010cd4 <RTC_AlarmSubSecondConfig+0x4c>)
 8010c9a:	22ca      	movs	r2, #202	; 0xca
 8010c9c:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8010c9e:	4b0d      	ldr	r3, [pc, #52]	; (8010cd4 <RTC_AlarmSubSecondConfig+0x4c>)
 8010ca0:	2253      	movs	r2, #83	; 0x53
 8010ca2:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Configure the Alarm A or Alarm B Sub Second registers */
  tmpreg = (uint32_t) (uint32_t)(RTC_AlarmSubSecondValue) | (uint32_t)(RTC_AlarmSubSecondMask);
 8010ca4:	68ba      	ldr	r2, [r7, #8]
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	4313      	orrs	r3, r2
 8010caa:	617b      	str	r3, [r7, #20]
  
  if (RTC_Alarm == RTC_Alarm_A)
 8010cac:	68fb      	ldr	r3, [r7, #12]
 8010cae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010cb2:	d103      	bne.n	8010cbc <RTC_AlarmSubSecondConfig+0x34>
  {
    /* Configure the Alarm A Sub Second register */
    RTC->ALRMASSR = tmpreg;
 8010cb4:	4b07      	ldr	r3, [pc, #28]	; (8010cd4 <RTC_AlarmSubSecondConfig+0x4c>)
 8010cb6:	697a      	ldr	r2, [r7, #20]
 8010cb8:	645a      	str	r2, [r3, #68]	; 0x44
 8010cba:	e002      	b.n	8010cc2 <RTC_AlarmSubSecondConfig+0x3a>
  }
  else
  {
    /* Configure the Alarm B Sub Second register */
    RTC->ALRMBSSR = tmpreg;
 8010cbc:	4b05      	ldr	r3, [pc, #20]	; (8010cd4 <RTC_AlarmSubSecondConfig+0x4c>)
 8010cbe:	697a      	ldr	r2, [r7, #20]
 8010cc0:	649a      	str	r2, [r3, #72]	; 0x48
  }

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;
 8010cc2:	4b04      	ldr	r3, [pc, #16]	; (8010cd4 <RTC_AlarmSubSecondConfig+0x4c>)
 8010cc4:	22ff      	movs	r2, #255	; 0xff
 8010cc6:	625a      	str	r2, [r3, #36]	; 0x24

}
 8010cc8:	371c      	adds	r7, #28
 8010cca:	46bd      	mov	sp, r7
 8010ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cd0:	4770      	bx	lr
 8010cd2:	bf00      	nop
 8010cd4:	40002800 	.word	0x40002800

08010cd8 <RTC_GetAlarmSubSecond>:
  *     @arg RTC_Alarm_B: to select Alarm B
  * @param  None
  * @retval RTC Alarm Sub seconds value.
  */
uint32_t RTC_GetAlarmSubSecond(uint32_t RTC_Alarm)
{
 8010cd8:	b480      	push	{r7}
 8010cda:	b085      	sub	sp, #20
 8010cdc:	af00      	add	r7, sp, #0
 8010cde:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8010ce0:	2300      	movs	r3, #0
 8010ce2:	60fb      	str	r3, [r7, #12]
  
  /* Get the RTC_ALRMxR register */
  if (RTC_Alarm == RTC_Alarm_A)
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010cea:	d105      	bne.n	8010cf8 <RTC_GetAlarmSubSecond+0x20>
  {
    tmpreg = (uint32_t)((RTC->ALRMASSR) & RTC_ALRMASSR_SS);
 8010cec:	4b08      	ldr	r3, [pc, #32]	; (8010d10 <RTC_GetAlarmSubSecond+0x38>)
 8010cee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010cf0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8010cf4:	60fb      	str	r3, [r7, #12]
 8010cf6:	e004      	b.n	8010d02 <RTC_GetAlarmSubSecond+0x2a>
  }
  else
  {
    tmpreg = (uint32_t)((RTC->ALRMBSSR) & RTC_ALRMBSSR_SS);
 8010cf8:	4b05      	ldr	r3, [pc, #20]	; (8010d10 <RTC_GetAlarmSubSecond+0x38>)
 8010cfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010cfc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8010d00:	60fb      	str	r3, [r7, #12]
  } 
  
  return (tmpreg);
 8010d02:	68fb      	ldr	r3, [r7, #12]
}
 8010d04:	4618      	mov	r0, r3
 8010d06:	3714      	adds	r7, #20
 8010d08:	46bd      	mov	sp, r7
 8010d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d0e:	4770      	bx	lr
 8010d10:	40002800 	.word	0x40002800

08010d14 <RTC_WakeUpClockConfig>:
  *            @arg RTC_WakeUpClock_CK_SPRE_16bits: RTC Wakeup Counter Clock = CK_SPRE
  *            @arg RTC_WakeUpClock_CK_SPRE_17bits: RTC Wakeup Counter Clock = CK_SPRE
  * @retval None
  */
void RTC_WakeUpClockConfig(uint32_t RTC_WakeUpClock)
{
 8010d14:	b480      	push	{r7}
 8010d16:	b083      	sub	sp, #12
 8010d18:	af00      	add	r7, sp, #0
 8010d1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(RTC_WakeUpClock));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8010d1c:	4b0c      	ldr	r3, [pc, #48]	; (8010d50 <RTC_WakeUpClockConfig+0x3c>)
 8010d1e:	22ca      	movs	r2, #202	; 0xca
 8010d20:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8010d22:	4b0b      	ldr	r3, [pc, #44]	; (8010d50 <RTC_WakeUpClockConfig+0x3c>)
 8010d24:	2253      	movs	r2, #83	; 0x53
 8010d26:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear the Wakeup Timer clock source bits in CR register */
  RTC->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8010d28:	4b09      	ldr	r3, [pc, #36]	; (8010d50 <RTC_WakeUpClockConfig+0x3c>)
 8010d2a:	4a09      	ldr	r2, [pc, #36]	; (8010d50 <RTC_WakeUpClockConfig+0x3c>)
 8010d2c:	6892      	ldr	r2, [r2, #8]
 8010d2e:	f022 0207 	bic.w	r2, r2, #7
 8010d32:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  RTC->CR |= (uint32_t)RTC_WakeUpClock;
 8010d34:	4b06      	ldr	r3, [pc, #24]	; (8010d50 <RTC_WakeUpClockConfig+0x3c>)
 8010d36:	4a06      	ldr	r2, [pc, #24]	; (8010d50 <RTC_WakeUpClockConfig+0x3c>)
 8010d38:	6891      	ldr	r1, [r2, #8]
 8010d3a:	687a      	ldr	r2, [r7, #4]
 8010d3c:	430a      	orrs	r2, r1
 8010d3e:	609a      	str	r2, [r3, #8]
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8010d40:	4b03      	ldr	r3, [pc, #12]	; (8010d50 <RTC_WakeUpClockConfig+0x3c>)
 8010d42:	22ff      	movs	r2, #255	; 0xff
 8010d44:	625a      	str	r2, [r3, #36]	; 0x24
}
 8010d46:	370c      	adds	r7, #12
 8010d48:	46bd      	mov	sp, r7
 8010d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d4e:	4770      	bx	lr
 8010d50:	40002800 	.word	0x40002800

08010d54 <RTC_SetWakeUpCounter>:
  * @param  RTC_WakeUpCounter: specifies the WakeUp counter.
  *          This parameter can be a value from 0x0000 to 0xFFFF. 
  * @retval None
  */
void RTC_SetWakeUpCounter(uint32_t RTC_WakeUpCounter)
{
 8010d54:	b480      	push	{r7}
 8010d56:	b083      	sub	sp, #12
 8010d58:	af00      	add	r7, sp, #0
 8010d5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_COUNTER(RTC_WakeUpCounter));
  
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8010d5c:	4b08      	ldr	r3, [pc, #32]	; (8010d80 <RTC_SetWakeUpCounter+0x2c>)
 8010d5e:	22ca      	movs	r2, #202	; 0xca
 8010d60:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8010d62:	4b07      	ldr	r3, [pc, #28]	; (8010d80 <RTC_SetWakeUpCounter+0x2c>)
 8010d64:	2253      	movs	r2, #83	; 0x53
 8010d66:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Configure the Wakeup Timer counter */
  RTC->WUTR = (uint32_t)RTC_WakeUpCounter;
 8010d68:	4b05      	ldr	r3, [pc, #20]	; (8010d80 <RTC_SetWakeUpCounter+0x2c>)
 8010d6a:	687a      	ldr	r2, [r7, #4]
 8010d6c:	615a      	str	r2, [r3, #20]
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8010d6e:	4b04      	ldr	r3, [pc, #16]	; (8010d80 <RTC_SetWakeUpCounter+0x2c>)
 8010d70:	22ff      	movs	r2, #255	; 0xff
 8010d72:	625a      	str	r2, [r3, #36]	; 0x24
}
 8010d74:	370c      	adds	r7, #12
 8010d76:	46bd      	mov	sp, r7
 8010d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d7c:	4770      	bx	lr
 8010d7e:	bf00      	nop
 8010d80:	40002800 	.word	0x40002800

08010d84 <RTC_GetWakeUpCounter>:
  * @brief  Returns the RTC WakeUp timer counter value.
  * @param  None
  * @retval The RTC WakeUp Counter value.
  */
uint32_t RTC_GetWakeUpCounter(void)
{
 8010d84:	b480      	push	{r7}
 8010d86:	af00      	add	r7, sp, #0
  /* Get the counter value */
  return ((uint32_t)(RTC->WUTR & RTC_WUTR_WUT));
 8010d88:	4b03      	ldr	r3, [pc, #12]	; (8010d98 <RTC_GetWakeUpCounter+0x14>)
 8010d8a:	695b      	ldr	r3, [r3, #20]
 8010d8c:	b29b      	uxth	r3, r3
}
 8010d8e:	4618      	mov	r0, r3
 8010d90:	46bd      	mov	sp, r7
 8010d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d96:	4770      	bx	lr
 8010d98:	40002800 	.word	0x40002800

08010d9c <RTC_WakeUpCmd>:
  * @param  NewState: new state of the WakeUp timer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
ErrorStatus RTC_WakeUpCmd(FunctionalState NewState)
{
 8010d9c:	b480      	push	{r7}
 8010d9e:	b087      	sub	sp, #28
 8010da0:	af00      	add	r7, sp, #0
 8010da2:	4603      	mov	r3, r0
 8010da4:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t wutcounter = 0x00;
 8010da6:	2300      	movs	r3, #0
 8010da8:	60fb      	str	r3, [r7, #12]
  uint32_t wutwfstatus = 0x00;
 8010daa:	2300      	movs	r3, #0
 8010dac:	613b      	str	r3, [r7, #16]
  ErrorStatus status = ERROR;
 8010dae:	2300      	movs	r3, #0
 8010db0:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8010db2:	4b1e      	ldr	r3, [pc, #120]	; (8010e2c <RTC_WakeUpCmd+0x90>)
 8010db4:	22ca      	movs	r2, #202	; 0xca
 8010db6:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8010db8:	4b1c      	ldr	r3, [pc, #112]	; (8010e2c <RTC_WakeUpCmd+0x90>)
 8010dba:	2253      	movs	r2, #83	; 0x53
 8010dbc:	625a      	str	r2, [r3, #36]	; 0x24

  if (NewState != DISABLE)
 8010dbe:	79fb      	ldrb	r3, [r7, #7]
 8010dc0:	2b00      	cmp	r3, #0
 8010dc2:	d008      	beq.n	8010dd6 <RTC_WakeUpCmd+0x3a>
  {
    /* Enable the Wakeup Timer */
    RTC->CR |= (uint32_t)RTC_CR_WUTE;
 8010dc4:	4b19      	ldr	r3, [pc, #100]	; (8010e2c <RTC_WakeUpCmd+0x90>)
 8010dc6:	4a19      	ldr	r2, [pc, #100]	; (8010e2c <RTC_WakeUpCmd+0x90>)
 8010dc8:	6892      	ldr	r2, [r2, #8]
 8010dca:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8010dce:	609a      	str	r2, [r3, #8]
    status = SUCCESS;    
 8010dd0:	2301      	movs	r3, #1
 8010dd2:	75fb      	strb	r3, [r7, #23]
 8010dd4:	e01f      	b.n	8010e16 <RTC_WakeUpCmd+0x7a>
  }
  else
  {
    /* Disable the Wakeup Timer */
    RTC->CR &= (uint32_t)~RTC_CR_WUTE;
 8010dd6:	4b15      	ldr	r3, [pc, #84]	; (8010e2c <RTC_WakeUpCmd+0x90>)
 8010dd8:	4a14      	ldr	r2, [pc, #80]	; (8010e2c <RTC_WakeUpCmd+0x90>)
 8010dda:	6892      	ldr	r2, [r2, #8]
 8010ddc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010de0:	609a      	str	r2, [r3, #8]
    /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
    do
    {
      wutwfstatus = RTC->ISR & RTC_ISR_WUTWF;
 8010de2:	4b12      	ldr	r3, [pc, #72]	; (8010e2c <RTC_WakeUpCmd+0x90>)
 8010de4:	68db      	ldr	r3, [r3, #12]
 8010de6:	f003 0304 	and.w	r3, r3, #4
 8010dea:	613b      	str	r3, [r7, #16]
      wutcounter++;  
 8010dec:	68fb      	ldr	r3, [r7, #12]
 8010dee:	3301      	adds	r3, #1
 8010df0:	60fb      	str	r3, [r7, #12]
    } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
 8010df2:	68fb      	ldr	r3, [r7, #12]
 8010df4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010df8:	d002      	beq.n	8010e00 <RTC_WakeUpCmd+0x64>
 8010dfa:	693b      	ldr	r3, [r7, #16]
 8010dfc:	2b00      	cmp	r3, #0
 8010dfe:	d0f0      	beq.n	8010de2 <RTC_WakeUpCmd+0x46>
    
    if ((RTC->ISR & RTC_ISR_WUTWF) == RESET)
 8010e00:	4b0a      	ldr	r3, [pc, #40]	; (8010e2c <RTC_WakeUpCmd+0x90>)
 8010e02:	68db      	ldr	r3, [r3, #12]
 8010e04:	f003 0304 	and.w	r3, r3, #4
 8010e08:	2b00      	cmp	r3, #0
 8010e0a:	d102      	bne.n	8010e12 <RTC_WakeUpCmd+0x76>
    {
      status = ERROR;
 8010e0c:	2300      	movs	r3, #0
 8010e0e:	75fb      	strb	r3, [r7, #23]
 8010e10:	e001      	b.n	8010e16 <RTC_WakeUpCmd+0x7a>
    }
    else
    {
      status = SUCCESS;
 8010e12:	2301      	movs	r3, #1
 8010e14:	75fb      	strb	r3, [r7, #23]
    }    
  }

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8010e16:	4b05      	ldr	r3, [pc, #20]	; (8010e2c <RTC_WakeUpCmd+0x90>)
 8010e18:	22ff      	movs	r2, #255	; 0xff
 8010e1a:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
 8010e1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8010e1e:	4618      	mov	r0, r3
 8010e20:	371c      	adds	r7, #28
 8010e22:	46bd      	mov	sp, r7
 8010e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e28:	4770      	bx	lr
 8010e2a:	bf00      	nop
 8010e2c:	40002800 	.word	0x40002800

08010e30 <RTC_DayLightSavingConfig>:
  *            @arg RTC_StoreOperation_Reset: BCK Bit Reset
  *            @arg RTC_StoreOperation_Set: BCK Bit Set
  * @retval None
  */
void RTC_DayLightSavingConfig(uint32_t RTC_DayLightSaving, uint32_t RTC_StoreOperation)
{
 8010e30:	b480      	push	{r7}
 8010e32:	b083      	sub	sp, #12
 8010e34:	af00      	add	r7, sp, #0
 8010e36:	6078      	str	r0, [r7, #4]
 8010e38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_DAYLIGHT_SAVING(RTC_DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(RTC_StoreOperation));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8010e3a:	4b0e      	ldr	r3, [pc, #56]	; (8010e74 <RTC_DayLightSavingConfig+0x44>)
 8010e3c:	22ca      	movs	r2, #202	; 0xca
 8010e3e:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8010e40:	4b0c      	ldr	r3, [pc, #48]	; (8010e74 <RTC_DayLightSavingConfig+0x44>)
 8010e42:	2253      	movs	r2, #83	; 0x53
 8010e44:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear the bits to be configured */
  RTC->CR &= (uint32_t)~(RTC_CR_BCK);
 8010e46:	4b0b      	ldr	r3, [pc, #44]	; (8010e74 <RTC_DayLightSavingConfig+0x44>)
 8010e48:	4a0a      	ldr	r2, [pc, #40]	; (8010e74 <RTC_DayLightSavingConfig+0x44>)
 8010e4a:	6892      	ldr	r2, [r2, #8]
 8010e4c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8010e50:	609a      	str	r2, [r3, #8]

  /* Configure the RTC_CR register */
  RTC->CR |= (uint32_t)(RTC_DayLightSaving | RTC_StoreOperation);
 8010e52:	4b08      	ldr	r3, [pc, #32]	; (8010e74 <RTC_DayLightSavingConfig+0x44>)
 8010e54:	4a07      	ldr	r2, [pc, #28]	; (8010e74 <RTC_DayLightSavingConfig+0x44>)
 8010e56:	6891      	ldr	r1, [r2, #8]
 8010e58:	6878      	ldr	r0, [r7, #4]
 8010e5a:	683a      	ldr	r2, [r7, #0]
 8010e5c:	4302      	orrs	r2, r0
 8010e5e:	430a      	orrs	r2, r1
 8010e60:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8010e62:	4b04      	ldr	r3, [pc, #16]	; (8010e74 <RTC_DayLightSavingConfig+0x44>)
 8010e64:	22ff      	movs	r2, #255	; 0xff
 8010e66:	625a      	str	r2, [r3, #36]	; 0x24
}
 8010e68:	370c      	adds	r7, #12
 8010e6a:	46bd      	mov	sp, r7
 8010e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e70:	4770      	bx	lr
 8010e72:	bf00      	nop
 8010e74:	40002800 	.word	0x40002800

08010e78 <RTC_GetStoreOperation>:
  * @retval RTC Day Light Saving stored operation.
  *          - RTC_StoreOperation_Reset
  *          - RTC_StoreOperation_Set       
  */
uint32_t RTC_GetStoreOperation(void)
{
 8010e78:	b480      	push	{r7}
 8010e7a:	af00      	add	r7, sp, #0
  return (RTC->CR & RTC_CR_BCK);
 8010e7c:	4b04      	ldr	r3, [pc, #16]	; (8010e90 <RTC_GetStoreOperation+0x18>)
 8010e7e:	689b      	ldr	r3, [r3, #8]
 8010e80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
}
 8010e84:	4618      	mov	r0, r3
 8010e86:	46bd      	mov	sp, r7
 8010e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e8c:	4770      	bx	lr
 8010e8e:	bf00      	nop
 8010e90:	40002800 	.word	0x40002800

08010e94 <RTC_OutputConfig>:
  *            @arg RTC_OutputPolarity_Low: The output pin is low when the 
  *                                 ALRAF/ALRBF/WUTF is high (depending on OSEL)
  * @retval None
  */
void RTC_OutputConfig(uint32_t RTC_Output, uint32_t RTC_OutputPolarity)
{
 8010e94:	b480      	push	{r7}
 8010e96:	b083      	sub	sp, #12
 8010e98:	af00      	add	r7, sp, #0
 8010e9a:	6078      	str	r0, [r7, #4]
 8010e9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_OUTPUT(RTC_Output));
  assert_param(IS_RTC_OUTPUT_POL(RTC_OutputPolarity));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8010e9e:	4b0e      	ldr	r3, [pc, #56]	; (8010ed8 <RTC_OutputConfig+0x44>)
 8010ea0:	22ca      	movs	r2, #202	; 0xca
 8010ea2:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8010ea4:	4b0c      	ldr	r3, [pc, #48]	; (8010ed8 <RTC_OutputConfig+0x44>)
 8010ea6:	2253      	movs	r2, #83	; 0x53
 8010ea8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear the bits to be configured */
  RTC->CR &= (uint32_t)~(RTC_CR_OSEL | RTC_CR_POL);
 8010eaa:	4b0b      	ldr	r3, [pc, #44]	; (8010ed8 <RTC_OutputConfig+0x44>)
 8010eac:	4a0a      	ldr	r2, [pc, #40]	; (8010ed8 <RTC_OutputConfig+0x44>)
 8010eae:	6892      	ldr	r2, [r2, #8]
 8010eb0:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 8010eb4:	609a      	str	r2, [r3, #8]

  /* Configure the output selection and polarity */
  RTC->CR |= (uint32_t)(RTC_Output | RTC_OutputPolarity);
 8010eb6:	4b08      	ldr	r3, [pc, #32]	; (8010ed8 <RTC_OutputConfig+0x44>)
 8010eb8:	4a07      	ldr	r2, [pc, #28]	; (8010ed8 <RTC_OutputConfig+0x44>)
 8010eba:	6891      	ldr	r1, [r2, #8]
 8010ebc:	6878      	ldr	r0, [r7, #4]
 8010ebe:	683a      	ldr	r2, [r7, #0]
 8010ec0:	4302      	orrs	r2, r0
 8010ec2:	430a      	orrs	r2, r1
 8010ec4:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8010ec6:	4b04      	ldr	r3, [pc, #16]	; (8010ed8 <RTC_OutputConfig+0x44>)
 8010ec8:	22ff      	movs	r2, #255	; 0xff
 8010eca:	625a      	str	r2, [r3, #36]	; 0x24
}
 8010ecc:	370c      	adds	r7, #12
 8010ece:	46bd      	mov	sp, r7
 8010ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ed4:	4770      	bx	lr
 8010ed6:	bf00      	nop
 8010ed8:	40002800 	.word	0x40002800

08010edc <RTC_CoarseCalibConfig>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Coarse calibration are initialized
  *          - ERROR: RTC Coarse calibration are not initialized     
  */
ErrorStatus RTC_CoarseCalibConfig(uint32_t RTC_CalibSign, uint32_t Value)
{
 8010edc:	b580      	push	{r7, lr}
 8010ede:	b084      	sub	sp, #16
 8010ee0:	af00      	add	r7, sp, #0
 8010ee2:	6078      	str	r0, [r7, #4]
 8010ee4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8010ee6:	2300      	movs	r3, #0
 8010ee8:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_SIGN(RTC_CalibSign));
  assert_param(IS_RTC_CALIB_VALUE(Value)); 

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8010eea:	4b0f      	ldr	r3, [pc, #60]	; (8010f28 <RTC_CoarseCalibConfig+0x4c>)
 8010eec:	22ca      	movs	r2, #202	; 0xca
 8010eee:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8010ef0:	4b0d      	ldr	r3, [pc, #52]	; (8010f28 <RTC_CoarseCalibConfig+0x4c>)
 8010ef2:	2253      	movs	r2, #83	; 0x53
 8010ef4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 8010ef6:	f7ff fa7f 	bl	80103f8 <RTC_EnterInitMode>
 8010efa:	4603      	mov	r3, r0
 8010efc:	2b00      	cmp	r3, #0
 8010efe:	d102      	bne.n	8010f06 <RTC_CoarseCalibConfig+0x2a>
  {
    status = ERROR;
 8010f00:	2300      	movs	r3, #0
 8010f02:	73fb      	strb	r3, [r7, #15]
 8010f04:	e008      	b.n	8010f18 <RTC_CoarseCalibConfig+0x3c>
  } 
  else
  {
    /* Set the coarse calibration value */
    RTC->CALIBR = (uint32_t)(RTC_CalibSign | Value);
 8010f06:	4b08      	ldr	r3, [pc, #32]	; (8010f28 <RTC_CoarseCalibConfig+0x4c>)
 8010f08:	6879      	ldr	r1, [r7, #4]
 8010f0a:	683a      	ldr	r2, [r7, #0]
 8010f0c:	430a      	orrs	r2, r1
 8010f0e:	619a      	str	r2, [r3, #24]
    /* Exit Initialization mode */
    RTC_ExitInitMode();
 8010f10:	f7ff faac 	bl	801046c <RTC_ExitInitMode>
    
    status = SUCCESS;
 8010f14:	2301      	movs	r3, #1
 8010f16:	73fb      	strb	r3, [r7, #15]
  } 

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8010f18:	4b03      	ldr	r3, [pc, #12]	; (8010f28 <RTC_CoarseCalibConfig+0x4c>)
 8010f1a:	22ff      	movs	r2, #255	; 0xff
 8010f1c:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
 8010f1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f20:	4618      	mov	r0, r3
 8010f22:	3710      	adds	r7, #16
 8010f24:	46bd      	mov	sp, r7
 8010f26:	bd80      	pop	{r7, pc}
 8010f28:	40002800 	.word	0x40002800

08010f2c <RTC_CoarseCalibCmd>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Coarse calibration are enabled/disabled
  *          - ERROR: RTC Coarse calibration are not enabled/disabled    
  */
ErrorStatus RTC_CoarseCalibCmd(FunctionalState NewState)
{
 8010f2c:	b580      	push	{r7, lr}
 8010f2e:	b084      	sub	sp, #16
 8010f30:	af00      	add	r7, sp, #0
 8010f32:	4603      	mov	r3, r0
 8010f34:	71fb      	strb	r3, [r7, #7]
  ErrorStatus status = ERROR;
 8010f36:	2300      	movs	r3, #0
 8010f38:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8010f3a:	4b15      	ldr	r3, [pc, #84]	; (8010f90 <RTC_CoarseCalibCmd+0x64>)
 8010f3c:	22ca      	movs	r2, #202	; 0xca
 8010f3e:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8010f40:	4b13      	ldr	r3, [pc, #76]	; (8010f90 <RTC_CoarseCalibCmd+0x64>)
 8010f42:	2253      	movs	r2, #83	; 0x53
 8010f44:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 8010f46:	f7ff fa57 	bl	80103f8 <RTC_EnterInitMode>
 8010f4a:	4603      	mov	r3, r0
 8010f4c:	2b00      	cmp	r3, #0
 8010f4e:	d102      	bne.n	8010f56 <RTC_CoarseCalibCmd+0x2a>
  {
    status =  ERROR;
 8010f50:	2300      	movs	r3, #0
 8010f52:	73fb      	strb	r3, [r7, #15]
 8010f54:	e013      	b.n	8010f7e <RTC_CoarseCalibCmd+0x52>
  }
  else
  {
    if (NewState != DISABLE)
 8010f56:	79fb      	ldrb	r3, [r7, #7]
 8010f58:	2b00      	cmp	r3, #0
 8010f5a:	d006      	beq.n	8010f6a <RTC_CoarseCalibCmd+0x3e>
    {
      /* Enable the Coarse Calibration */
      RTC->CR |= (uint32_t)RTC_CR_DCE;
 8010f5c:	4b0c      	ldr	r3, [pc, #48]	; (8010f90 <RTC_CoarseCalibCmd+0x64>)
 8010f5e:	4a0c      	ldr	r2, [pc, #48]	; (8010f90 <RTC_CoarseCalibCmd+0x64>)
 8010f60:	6892      	ldr	r2, [r2, #8]
 8010f62:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8010f66:	609a      	str	r2, [r3, #8]
 8010f68:	e005      	b.n	8010f76 <RTC_CoarseCalibCmd+0x4a>
    }
    else
    { 
      /* Disable the Coarse Calibration */
      RTC->CR &= (uint32_t)~RTC_CR_DCE;
 8010f6a:	4b09      	ldr	r3, [pc, #36]	; (8010f90 <RTC_CoarseCalibCmd+0x64>)
 8010f6c:	4a08      	ldr	r2, [pc, #32]	; (8010f90 <RTC_CoarseCalibCmd+0x64>)
 8010f6e:	6892      	ldr	r2, [r2, #8]
 8010f70:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010f74:	609a      	str	r2, [r3, #8]
    }
    /* Exit Initialization mode */
    RTC_ExitInitMode();
 8010f76:	f7ff fa79 	bl	801046c <RTC_ExitInitMode>
    
    status = SUCCESS;
 8010f7a:	2301      	movs	r3, #1
 8010f7c:	73fb      	strb	r3, [r7, #15]
  } 
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8010f7e:	4b04      	ldr	r3, [pc, #16]	; (8010f90 <RTC_CoarseCalibCmd+0x64>)
 8010f80:	22ff      	movs	r2, #255	; 0xff
 8010f82:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
 8010f84:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f86:	4618      	mov	r0, r3
 8010f88:	3710      	adds	r7, #16
 8010f8a:	46bd      	mov	sp, r7
 8010f8c:	bd80      	pop	{r7, pc}
 8010f8e:	bf00      	nop
 8010f90:	40002800 	.word	0x40002800

08010f94 <RTC_CalibOutputCmd>:
  * @param  NewState: new state of the digital calibration Output.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RTC_CalibOutputCmd(FunctionalState NewState)
{
 8010f94:	b480      	push	{r7}
 8010f96:	b083      	sub	sp, #12
 8010f98:	af00      	add	r7, sp, #0
 8010f9a:	4603      	mov	r3, r0
 8010f9c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8010f9e:	4b0f      	ldr	r3, [pc, #60]	; (8010fdc <RTC_CalibOutputCmd+0x48>)
 8010fa0:	22ca      	movs	r2, #202	; 0xca
 8010fa2:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8010fa4:	4b0d      	ldr	r3, [pc, #52]	; (8010fdc <RTC_CalibOutputCmd+0x48>)
 8010fa6:	2253      	movs	r2, #83	; 0x53
 8010fa8:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (NewState != DISABLE)
 8010faa:	79fb      	ldrb	r3, [r7, #7]
 8010fac:	2b00      	cmp	r3, #0
 8010fae:	d006      	beq.n	8010fbe <RTC_CalibOutputCmd+0x2a>
  {
    /* Enable the RTC clock output */
    RTC->CR |= (uint32_t)RTC_CR_COE;
 8010fb0:	4b0a      	ldr	r3, [pc, #40]	; (8010fdc <RTC_CalibOutputCmd+0x48>)
 8010fb2:	4a0a      	ldr	r2, [pc, #40]	; (8010fdc <RTC_CalibOutputCmd+0x48>)
 8010fb4:	6892      	ldr	r2, [r2, #8]
 8010fb6:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8010fba:	609a      	str	r2, [r3, #8]
 8010fbc:	e005      	b.n	8010fca <RTC_CalibOutputCmd+0x36>
  }
  else
  { 
    /* Disable the RTC clock output */
    RTC->CR &= (uint32_t)~RTC_CR_COE;
 8010fbe:	4b07      	ldr	r3, [pc, #28]	; (8010fdc <RTC_CalibOutputCmd+0x48>)
 8010fc0:	4a06      	ldr	r2, [pc, #24]	; (8010fdc <RTC_CalibOutputCmd+0x48>)
 8010fc2:	6892      	ldr	r2, [r2, #8]
 8010fc4:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8010fc8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8010fca:	4b04      	ldr	r3, [pc, #16]	; (8010fdc <RTC_CalibOutputCmd+0x48>)
 8010fcc:	22ff      	movs	r2, #255	; 0xff
 8010fce:	625a      	str	r2, [r3, #36]	; 0x24
}
 8010fd0:	370c      	adds	r7, #12
 8010fd2:	46bd      	mov	sp, r7
 8010fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fd8:	4770      	bx	lr
 8010fda:	bf00      	nop
 8010fdc:	40002800 	.word	0x40002800

08010fe0 <RTC_CalibOutputConfig>:
  *     @arg RTC_CalibOutput_512Hz: A signal has a regular waveform at 512Hz. 
  *     @arg RTC_CalibOutput_1Hz  : A signal has a regular waveform at 1Hz.
  * @retval None
*/
void RTC_CalibOutputConfig(uint32_t RTC_CalibOutput)
{
 8010fe0:	b480      	push	{r7}
 8010fe2:	b083      	sub	sp, #12
 8010fe4:	af00      	add	r7, sp, #0
 8010fe6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_OUTPUT(RTC_CalibOutput));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8010fe8:	4b0c      	ldr	r3, [pc, #48]	; (801101c <RTC_CalibOutputConfig+0x3c>)
 8010fea:	22ca      	movs	r2, #202	; 0xca
 8010fec:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8010fee:	4b0b      	ldr	r3, [pc, #44]	; (801101c <RTC_CalibOutputConfig+0x3c>)
 8010ff0:	2253      	movs	r2, #83	; 0x53
 8010ff2:	625a      	str	r2, [r3, #36]	; 0x24
  
  /*clear flags before configuration */
  RTC->CR &= (uint32_t)~(RTC_CR_COSEL);
 8010ff4:	4b09      	ldr	r3, [pc, #36]	; (801101c <RTC_CalibOutputConfig+0x3c>)
 8010ff6:	4a09      	ldr	r2, [pc, #36]	; (801101c <RTC_CalibOutputConfig+0x3c>)
 8010ff8:	6892      	ldr	r2, [r2, #8]
 8010ffa:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8010ffe:	609a      	str	r2, [r3, #8]

  /* Configure the RTC_CR register */
  RTC->CR |= (uint32_t)RTC_CalibOutput;
 8011000:	4b06      	ldr	r3, [pc, #24]	; (801101c <RTC_CalibOutputConfig+0x3c>)
 8011002:	4a06      	ldr	r2, [pc, #24]	; (801101c <RTC_CalibOutputConfig+0x3c>)
 8011004:	6891      	ldr	r1, [r2, #8]
 8011006:	687a      	ldr	r2, [r7, #4]
 8011008:	430a      	orrs	r2, r1
 801100a:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;
 801100c:	4b03      	ldr	r3, [pc, #12]	; (801101c <RTC_CalibOutputConfig+0x3c>)
 801100e:	22ff      	movs	r2, #255	; 0xff
 8011010:	625a      	str	r2, [r3, #36]	; 0x24
}
 8011012:	370c      	adds	r7, #12
 8011014:	46bd      	mov	sp, r7
 8011016:	f85d 7b04 	ldr.w	r7, [sp], #4
 801101a:	4770      	bx	lr
 801101c:	40002800 	.word	0x40002800

08011020 <RTC_SmoothCalibConfig>:
  *          - ERROR: RTC Calib registers are not configured
*/
ErrorStatus RTC_SmoothCalibConfig(uint32_t RTC_SmoothCalibPeriod,
                                  uint32_t RTC_SmoothCalibPlusPulses,
                                  uint32_t RTC_SmouthCalibMinusPulsesValue)
{
 8011020:	b480      	push	{r7}
 8011022:	b087      	sub	sp, #28
 8011024:	af00      	add	r7, sp, #0
 8011026:	60f8      	str	r0, [r7, #12]
 8011028:	60b9      	str	r1, [r7, #8]
 801102a:	607a      	str	r2, [r7, #4]
  ErrorStatus status = ERROR;
 801102c:	2300      	movs	r3, #0
 801102e:	75fb      	strb	r3, [r7, #23]
  uint32_t recalpfcount = 0;
 8011030:	2300      	movs	r3, #0
 8011032:	613b      	str	r3, [r7, #16]
  assert_param(IS_RTC_SMOOTH_CALIB_PERIOD(RTC_SmoothCalibPeriod));
  assert_param(IS_RTC_SMOOTH_CALIB_PLUS(RTC_SmoothCalibPlusPulses));
  assert_param(IS_RTC_SMOOTH_CALIB_MINUS(RTC_SmouthCalibMinusPulsesValue));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8011034:	4b1a      	ldr	r3, [pc, #104]	; (80110a0 <RTC_SmoothCalibConfig+0x80>)
 8011036:	22ca      	movs	r2, #202	; 0xca
 8011038:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 801103a:	4b19      	ldr	r3, [pc, #100]	; (80110a0 <RTC_SmoothCalibConfig+0x80>)
 801103c:	2253      	movs	r2, #83	; 0x53
 801103e:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* check if a calibration is pending*/
  if ((RTC->ISR & RTC_ISR_RECALPF) != RESET)
 8011040:	4b17      	ldr	r3, [pc, #92]	; (80110a0 <RTC_SmoothCalibConfig+0x80>)
 8011042:	68db      	ldr	r3, [r3, #12]
 8011044:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011048:	2b00      	cmp	r3, #0
 801104a:	d00d      	beq.n	8011068 <RTC_SmoothCalibConfig+0x48>
  {
    /* wait until the Calibration is completed*/
    while (((RTC->ISR & RTC_ISR_RECALPF) != RESET) && (recalpfcount != RECALPF_TIMEOUT))
 801104c:	e002      	b.n	8011054 <RTC_SmoothCalibConfig+0x34>
    {
      recalpfcount++;
 801104e:	693b      	ldr	r3, [r7, #16]
 8011050:	3301      	adds	r3, #1
 8011052:	613b      	str	r3, [r7, #16]
  
  /* check if a calibration is pending*/
  if ((RTC->ISR & RTC_ISR_RECALPF) != RESET)
  {
    /* wait until the Calibration is completed*/
    while (((RTC->ISR & RTC_ISR_RECALPF) != RESET) && (recalpfcount != RECALPF_TIMEOUT))
 8011054:	4b12      	ldr	r3, [pc, #72]	; (80110a0 <RTC_SmoothCalibConfig+0x80>)
 8011056:	68db      	ldr	r3, [r3, #12]
 8011058:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801105c:	2b00      	cmp	r3, #0
 801105e:	d003      	beq.n	8011068 <RTC_SmoothCalibConfig+0x48>
 8011060:	693b      	ldr	r3, [r7, #16]
 8011062:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8011066:	d1f2      	bne.n	801104e <RTC_SmoothCalibConfig+0x2e>
      recalpfcount++;
    }
  }

  /* check if the calibration pending is completed or if there is no calibration operation at all*/
  if ((RTC->ISR & RTC_ISR_RECALPF) == RESET)
 8011068:	4b0d      	ldr	r3, [pc, #52]	; (80110a0 <RTC_SmoothCalibConfig+0x80>)
 801106a:	68db      	ldr	r3, [r3, #12]
 801106c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011070:	2b00      	cmp	r3, #0
 8011072:	d109      	bne.n	8011088 <RTC_SmoothCalibConfig+0x68>
  {
    /* Configure the Smooth calibration settings */
    RTC->CALR = (uint32_t)((uint32_t)RTC_SmoothCalibPeriod | (uint32_t)RTC_SmoothCalibPlusPulses | (uint32_t)RTC_SmouthCalibMinusPulsesValue);
 8011074:	4b0a      	ldr	r3, [pc, #40]	; (80110a0 <RTC_SmoothCalibConfig+0x80>)
 8011076:	68f9      	ldr	r1, [r7, #12]
 8011078:	68ba      	ldr	r2, [r7, #8]
 801107a:	4311      	orrs	r1, r2
 801107c:	687a      	ldr	r2, [r7, #4]
 801107e:	430a      	orrs	r2, r1
 8011080:	63da      	str	r2, [r3, #60]	; 0x3c

    status = SUCCESS;
 8011082:	2301      	movs	r3, #1
 8011084:	75fb      	strb	r3, [r7, #23]
 8011086:	e001      	b.n	801108c <RTC_SmoothCalibConfig+0x6c>
  }
  else
  {
    status = ERROR;
 8011088:	2300      	movs	r3, #0
 801108a:	75fb      	strb	r3, [r7, #23]
  }

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;
 801108c:	4b04      	ldr	r3, [pc, #16]	; (80110a0 <RTC_SmoothCalibConfig+0x80>)
 801108e:	22ff      	movs	r2, #255	; 0xff
 8011090:	625a      	str	r2, [r3, #36]	; 0x24
  
  return (ErrorStatus)(status);
 8011092:	7dfb      	ldrb	r3, [r7, #23]
}
 8011094:	4618      	mov	r0, r3
 8011096:	371c      	adds	r7, #28
 8011098:	46bd      	mov	sp, r7
 801109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801109e:	4770      	bx	lr
 80110a0:	40002800 	.word	0x40002800

080110a4 <RTC_TimeStampCmd>:
  * @param  NewState: new state of the TimeStamp.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RTC_TimeStampCmd(uint32_t RTC_TimeStampEdge, FunctionalState NewState)
{
 80110a4:	b480      	push	{r7}
 80110a6:	b085      	sub	sp, #20
 80110a8:	af00      	add	r7, sp, #0
 80110aa:	6078      	str	r0, [r7, #4]
 80110ac:	460b      	mov	r3, r1
 80110ae:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg = 0;
 80110b0:	2300      	movs	r3, #0
 80110b2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RTC_TIMESTAMP_EDGE(RTC_TimeStampEdge));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(RTC->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 80110b4:	4b12      	ldr	r3, [pc, #72]	; (8011100 <RTC_TimeStampCmd+0x5c>)
 80110b6:	689b      	ldr	r3, [r3, #8]
 80110b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80110bc:	f023 0308 	bic.w	r3, r3, #8
 80110c0:	60fb      	str	r3, [r7, #12]

  /* Get the new configuration */
  if (NewState != DISABLE)
 80110c2:	78fb      	ldrb	r3, [r7, #3]
 80110c4:	2b00      	cmp	r3, #0
 80110c6:	d006      	beq.n	80110d6 <RTC_TimeStampCmd+0x32>
  {
    tmpreg |= (uint32_t)(RTC_TimeStampEdge | RTC_CR_TSE);
 80110c8:	687a      	ldr	r2, [r7, #4]
 80110ca:	68fb      	ldr	r3, [r7, #12]
 80110cc:	4313      	orrs	r3, r2
 80110ce:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80110d2:	60fb      	str	r3, [r7, #12]
 80110d4:	e003      	b.n	80110de <RTC_TimeStampCmd+0x3a>
  }
  else
  {
    tmpreg |= (uint32_t)(RTC_TimeStampEdge);
 80110d6:	68fa      	ldr	r2, [r7, #12]
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	4313      	orrs	r3, r2
 80110dc:	60fb      	str	r3, [r7, #12]
  }

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 80110de:	4b08      	ldr	r3, [pc, #32]	; (8011100 <RTC_TimeStampCmd+0x5c>)
 80110e0:	22ca      	movs	r2, #202	; 0xca
 80110e2:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 80110e4:	4b06      	ldr	r3, [pc, #24]	; (8011100 <RTC_TimeStampCmd+0x5c>)
 80110e6:	2253      	movs	r2, #83	; 0x53
 80110e8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Time Stamp TSEDGE and Enable bits */
  RTC->CR = (uint32_t)tmpreg;
 80110ea:	4b05      	ldr	r3, [pc, #20]	; (8011100 <RTC_TimeStampCmd+0x5c>)
 80110ec:	68fa      	ldr	r2, [r7, #12]
 80110ee:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 80110f0:	4b03      	ldr	r3, [pc, #12]	; (8011100 <RTC_TimeStampCmd+0x5c>)
 80110f2:	22ff      	movs	r2, #255	; 0xff
 80110f4:	625a      	str	r2, [r3, #36]	; 0x24
}
 80110f6:	3714      	adds	r7, #20
 80110f8:	46bd      	mov	sp, r7
 80110fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110fe:	4770      	bx	lr
 8011100:	40002800 	.word	0x40002800

08011104 <RTC_GetTimeStamp>:
  *                             contains the TimeStamp date values.     
  * @retval None
  */
void RTC_GetTimeStamp(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_StampTimeStruct, 
                                      RTC_DateTypeDef* RTC_StampDateStruct)
{
 8011104:	b580      	push	{r7, lr}
 8011106:	b086      	sub	sp, #24
 8011108:	af00      	add	r7, sp, #0
 801110a:	60f8      	str	r0, [r7, #12]
 801110c:	60b9      	str	r1, [r7, #8]
 801110e:	607a      	str	r2, [r7, #4]
  uint32_t tmptime = 0, tmpdate = 0;
 8011110:	2300      	movs	r3, #0
 8011112:	617b      	str	r3, [r7, #20]
 8011114:	2300      	movs	r3, #0
 8011116:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));

  /* Get the TimeStamp time and date registers values */
  tmptime = (uint32_t)(RTC->TSTR & RTC_TR_RESERVED_MASK);
 8011118:	4b3e      	ldr	r3, [pc, #248]	; (8011214 <RTC_GetTimeStamp+0x110>)
 801111a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801111c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8011120:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8011124:	617b      	str	r3, [r7, #20]
  tmpdate = (uint32_t)(RTC->TSDR & RTC_DR_RESERVED_MASK);
 8011126:	4b3b      	ldr	r3, [pc, #236]	; (8011214 <RTC_GetTimeStamp+0x110>)
 8011128:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801112a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 801112e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8011132:	613b      	str	r3, [r7, #16]

  /* Fill the Time structure fields with the read parameters */
  RTC_StampTimeStruct->RTC_Hours = (uint8_t)((tmptime & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8011134:	697b      	ldr	r3, [r7, #20]
 8011136:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 801113a:	0c1b      	lsrs	r3, r3, #16
 801113c:	b2da      	uxtb	r2, r3
 801113e:	68bb      	ldr	r3, [r7, #8]
 8011140:	701a      	strb	r2, [r3, #0]
  RTC_StampTimeStruct->RTC_Minutes = (uint8_t)((tmptime & (RTC_TR_MNT | RTC_TR_MNU)) >> 8);
 8011142:	697b      	ldr	r3, [r7, #20]
 8011144:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8011148:	0a1b      	lsrs	r3, r3, #8
 801114a:	b2da      	uxtb	r2, r3
 801114c:	68bb      	ldr	r3, [r7, #8]
 801114e:	705a      	strb	r2, [r3, #1]
  RTC_StampTimeStruct->RTC_Seconds = (uint8_t)(tmptime & (RTC_TR_ST | RTC_TR_SU));
 8011150:	697b      	ldr	r3, [r7, #20]
 8011152:	b2db      	uxtb	r3, r3
 8011154:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011158:	b2da      	uxtb	r2, r3
 801115a:	68bb      	ldr	r3, [r7, #8]
 801115c:	709a      	strb	r2, [r3, #2]
  RTC_StampTimeStruct->RTC_H12 = (uint8_t)((tmptime & (RTC_TR_PM)) >> 16);  
 801115e:	697b      	ldr	r3, [r7, #20]
 8011160:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011164:	0c1b      	lsrs	r3, r3, #16
 8011166:	b2da      	uxtb	r2, r3
 8011168:	68bb      	ldr	r3, [r7, #8]
 801116a:	70da      	strb	r2, [r3, #3]

  /* Fill the Date structure fields with the read parameters */
  RTC_StampDateStruct->RTC_Year = 0;
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	2200      	movs	r2, #0
 8011170:	70da      	strb	r2, [r3, #3]
  RTC_StampDateStruct->RTC_Month = (uint8_t)((tmpdate & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 8011172:	693b      	ldr	r3, [r7, #16]
 8011174:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 8011178:	0a1b      	lsrs	r3, r3, #8
 801117a:	b2da      	uxtb	r2, r3
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	705a      	strb	r2, [r3, #1]
  RTC_StampDateStruct->RTC_Date = (uint8_t)(tmpdate & (RTC_DR_DT | RTC_DR_DU));
 8011180:	693b      	ldr	r3, [r7, #16]
 8011182:	b2db      	uxtb	r3, r3
 8011184:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011188:	b2da      	uxtb	r2, r3
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	709a      	strb	r2, [r3, #2]
  RTC_StampDateStruct->RTC_WeekDay = (uint8_t)((tmpdate & (RTC_DR_WDU)) >> 13);
 801118e:	693b      	ldr	r3, [r7, #16]
 8011190:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8011194:	0b5b      	lsrs	r3, r3, #13
 8011196:	b2da      	uxtb	r2, r3
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (RTC_Format == RTC_Format_BIN)
 801119c:	68fb      	ldr	r3, [r7, #12]
 801119e:	2b00      	cmp	r3, #0
 80111a0:	d135      	bne.n	801120e <RTC_GetTimeStamp+0x10a>
  {
    /* Convert the Time structure parameters to Binary format */
    RTC_StampTimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Hours);
 80111a2:	68bb      	ldr	r3, [r7, #8]
 80111a4:	781b      	ldrb	r3, [r3, #0]
 80111a6:	4618      	mov	r0, r3
 80111a8:	f000 faaa 	bl	8011700 <RTC_Bcd2ToByte>
 80111ac:	4603      	mov	r3, r0
 80111ae:	461a      	mov	r2, r3
 80111b0:	68bb      	ldr	r3, [r7, #8]
 80111b2:	701a      	strb	r2, [r3, #0]
    RTC_StampTimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Minutes);
 80111b4:	68bb      	ldr	r3, [r7, #8]
 80111b6:	785b      	ldrb	r3, [r3, #1]
 80111b8:	4618      	mov	r0, r3
 80111ba:	f000 faa1 	bl	8011700 <RTC_Bcd2ToByte>
 80111be:	4603      	mov	r3, r0
 80111c0:	461a      	mov	r2, r3
 80111c2:	68bb      	ldr	r3, [r7, #8]
 80111c4:	705a      	strb	r2, [r3, #1]
    RTC_StampTimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Seconds);
 80111c6:	68bb      	ldr	r3, [r7, #8]
 80111c8:	789b      	ldrb	r3, [r3, #2]
 80111ca:	4618      	mov	r0, r3
 80111cc:	f000 fa98 	bl	8011700 <RTC_Bcd2ToByte>
 80111d0:	4603      	mov	r3, r0
 80111d2:	461a      	mov	r2, r3
 80111d4:	68bb      	ldr	r3, [r7, #8]
 80111d6:	709a      	strb	r2, [r3, #2]

    /* Convert the Date structure parameters to Binary format */
    RTC_StampDateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Month);
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	785b      	ldrb	r3, [r3, #1]
 80111dc:	4618      	mov	r0, r3
 80111de:	f000 fa8f 	bl	8011700 <RTC_Bcd2ToByte>
 80111e2:	4603      	mov	r3, r0
 80111e4:	461a      	mov	r2, r3
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	705a      	strb	r2, [r3, #1]
    RTC_StampDateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Date);
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	789b      	ldrb	r3, [r3, #2]
 80111ee:	4618      	mov	r0, r3
 80111f0:	f000 fa86 	bl	8011700 <RTC_Bcd2ToByte>
 80111f4:	4603      	mov	r3, r0
 80111f6:	461a      	mov	r2, r3
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	709a      	strb	r2, [r3, #2]
    RTC_StampDateStruct->RTC_WeekDay = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_WeekDay);
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	781b      	ldrb	r3, [r3, #0]
 8011200:	4618      	mov	r0, r3
 8011202:	f000 fa7d 	bl	8011700 <RTC_Bcd2ToByte>
 8011206:	4603      	mov	r3, r0
 8011208:	461a      	mov	r2, r3
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	701a      	strb	r2, [r3, #0]
  }
}
 801120e:	3718      	adds	r7, #24
 8011210:	46bd      	mov	sp, r7
 8011212:	bd80      	pop	{r7, pc}
 8011214:	40002800 	.word	0x40002800

08011218 <RTC_GetTimeStampSubSecond>:
  * @brief  Get the RTC timestamp Sub seconds value.
  * @param  None
  * @retval RTC current timestamp Sub seconds value.
  */
uint32_t RTC_GetTimeStampSubSecond(void)
{
 8011218:	b480      	push	{r7}
 801121a:	af00      	add	r7, sp, #0
  /* Get timestamp sub seconds values from the correspondent registers */
  return (uint32_t)(RTC->TSSSR);
 801121c:	4b03      	ldr	r3, [pc, #12]	; (801122c <RTC_GetTimeStampSubSecond+0x14>)
 801121e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8011220:	4618      	mov	r0, r3
 8011222:	46bd      	mov	sp, r7
 8011224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011228:	4770      	bx	lr
 801122a:	bf00      	nop
 801122c:	40002800 	.word	0x40002800

08011230 <RTC_TamperTriggerConfig>:
  *     @arg RTC_TamperTrigger_LowLevel: Low Level of the tamper pin causes tamper event.
  *     @arg RTC_TamperTrigger_HighLevel: High Level of the tamper pin causes tamper event.
  * @retval None
  */
void RTC_TamperTriggerConfig(uint32_t RTC_Tamper, uint32_t RTC_TamperTrigger)
{
 8011230:	b480      	push	{r7}
 8011232:	b083      	sub	sp, #12
 8011234:	af00      	add	r7, sp, #0
 8011236:	6078      	str	r0, [r7, #4]
 8011238:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_TAMPER(RTC_Tamper)); 
  assert_param(IS_RTC_TAMPER_TRIGGER(RTC_TamperTrigger));
 
  if (RTC_TamperTrigger == RTC_TamperTrigger_RisingEdge)
 801123a:	683b      	ldr	r3, [r7, #0]
 801123c:	2b00      	cmp	r3, #0
 801123e:	d108      	bne.n	8011252 <RTC_TamperTriggerConfig+0x22>
  {  
    /* Configure the RTC_TAFCR register */
    RTC->TAFCR &= (uint32_t)((uint32_t)~(RTC_Tamper << 1));	
 8011240:	4b0a      	ldr	r3, [pc, #40]	; (801126c <RTC_TamperTriggerConfig+0x3c>)
 8011242:	4a0a      	ldr	r2, [pc, #40]	; (801126c <RTC_TamperTriggerConfig+0x3c>)
 8011244:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8011246:	687a      	ldr	r2, [r7, #4]
 8011248:	0052      	lsls	r2, r2, #1
 801124a:	43d2      	mvns	r2, r2
 801124c:	400a      	ands	r2, r1
 801124e:	641a      	str	r2, [r3, #64]	; 0x40
 8011250:	e006      	b.n	8011260 <RTC_TamperTriggerConfig+0x30>
  }
  else
  { 
    /* Configure the RTC_TAFCR register */
    RTC->TAFCR |= (uint32_t)(RTC_Tamper << 1);  
 8011252:	4b06      	ldr	r3, [pc, #24]	; (801126c <RTC_TamperTriggerConfig+0x3c>)
 8011254:	4a05      	ldr	r2, [pc, #20]	; (801126c <RTC_TamperTriggerConfig+0x3c>)
 8011256:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8011258:	687a      	ldr	r2, [r7, #4]
 801125a:	0052      	lsls	r2, r2, #1
 801125c:	430a      	orrs	r2, r1
 801125e:	641a      	str	r2, [r3, #64]	; 0x40
  }  
}
 8011260:	370c      	adds	r7, #12
 8011262:	46bd      	mov	sp, r7
 8011264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011268:	4770      	bx	lr
 801126a:	bf00      	nop
 801126c:	40002800 	.word	0x40002800

08011270 <RTC_TamperCmd>:
  * @param  NewState: new state of the tamper pin.
  *          This parameter can be: ENABLE or DISABLE.                   
  * @retval None
  */
void RTC_TamperCmd(uint32_t RTC_Tamper, FunctionalState NewState)
{
 8011270:	b480      	push	{r7}
 8011272:	b083      	sub	sp, #12
 8011274:	af00      	add	r7, sp, #0
 8011276:	6078      	str	r0, [r7, #4]
 8011278:	460b      	mov	r3, r1
 801127a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RTC_TAMPER(RTC_Tamper));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 801127c:	78fb      	ldrb	r3, [r7, #3]
 801127e:	2b00      	cmp	r3, #0
 8011280:	d006      	beq.n	8011290 <RTC_TamperCmd+0x20>
  {
    /* Enable the selected Tamper pin */
    RTC->TAFCR |= (uint32_t)RTC_Tamper;
 8011282:	4b09      	ldr	r3, [pc, #36]	; (80112a8 <RTC_TamperCmd+0x38>)
 8011284:	4a08      	ldr	r2, [pc, #32]	; (80112a8 <RTC_TamperCmd+0x38>)
 8011286:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8011288:	687a      	ldr	r2, [r7, #4]
 801128a:	430a      	orrs	r2, r1
 801128c:	641a      	str	r2, [r3, #64]	; 0x40
 801128e:	e006      	b.n	801129e <RTC_TamperCmd+0x2e>
  }
  else
  {
    /* Disable the selected Tamper pin */
    RTC->TAFCR &= (uint32_t)~RTC_Tamper;    
 8011290:	4b05      	ldr	r3, [pc, #20]	; (80112a8 <RTC_TamperCmd+0x38>)
 8011292:	4a05      	ldr	r2, [pc, #20]	; (80112a8 <RTC_TamperCmd+0x38>)
 8011294:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8011296:	687a      	ldr	r2, [r7, #4]
 8011298:	43d2      	mvns	r2, r2
 801129a:	400a      	ands	r2, r1
 801129c:	641a      	str	r2, [r3, #64]	; 0x40
  }  
}
 801129e:	370c      	adds	r7, #12
 80112a0:	46bd      	mov	sp, r7
 80112a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112a6:	4770      	bx	lr
 80112a8:	40002800 	.word	0x40002800

080112ac <RTC_TamperFilterConfig>:
  *     @arg RTC_TamperFilter_8Sample: Tamper is activated after 8 consecutive 
  *                                    samples at the active level 
  * @retval None
  */
void RTC_TamperFilterConfig(uint32_t RTC_TamperFilter)
{
 80112ac:	b480      	push	{r7}
 80112ae:	b083      	sub	sp, #12
 80112b0:	af00      	add	r7, sp, #0
 80112b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_TAMPER_FILTER(RTC_TamperFilter));
   
  /* Clear TAMPFLT[1:0] bits in the RTC_TAFCR register */
  RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPFLT);
 80112b4:	4b08      	ldr	r3, [pc, #32]	; (80112d8 <RTC_TamperFilterConfig+0x2c>)
 80112b6:	4a08      	ldr	r2, [pc, #32]	; (80112d8 <RTC_TamperFilterConfig+0x2c>)
 80112b8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80112ba:	f422 52c0 	bic.w	r2, r2, #6144	; 0x1800
 80112be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure the RTC_TAFCR register */
  RTC->TAFCR |= (uint32_t)RTC_TamperFilter;
 80112c0:	4b05      	ldr	r3, [pc, #20]	; (80112d8 <RTC_TamperFilterConfig+0x2c>)
 80112c2:	4a05      	ldr	r2, [pc, #20]	; (80112d8 <RTC_TamperFilterConfig+0x2c>)
 80112c4:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80112c6:	687a      	ldr	r2, [r7, #4]
 80112c8:	430a      	orrs	r2, r1
 80112ca:	641a      	str	r2, [r3, #64]	; 0x40
}
 80112cc:	370c      	adds	r7, #12
 80112ce:	46bd      	mov	sp, r7
 80112d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112d4:	4770      	bx	lr
 80112d6:	bf00      	nop
 80112d8:	40002800 	.word	0x40002800

080112dc <RTC_TamperSamplingFreqConfig>:
  *     @arg RTC_TamperSamplingFreq_RTCCLK_Div256: Each of the tamper inputs are sampled
  *                                           with a frequency =  RTCCLK / 256  
  * @retval None
  */
void RTC_TamperSamplingFreqConfig(uint32_t RTC_TamperSamplingFreq)
{
 80112dc:	b480      	push	{r7}
 80112de:	b083      	sub	sp, #12
 80112e0:	af00      	add	r7, sp, #0
 80112e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_TAMPER_SAMPLING_FREQ(RTC_TamperSamplingFreq));
 
  /* Clear TAMPFREQ[2:0] bits in the RTC_TAFCR register */
  RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPFREQ);
 80112e4:	4b08      	ldr	r3, [pc, #32]	; (8011308 <RTC_TamperSamplingFreqConfig+0x2c>)
 80112e6:	4a08      	ldr	r2, [pc, #32]	; (8011308 <RTC_TamperSamplingFreqConfig+0x2c>)
 80112e8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80112ea:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80112ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure the RTC_TAFCR register */
  RTC->TAFCR |= (uint32_t)RTC_TamperSamplingFreq;
 80112f0:	4b05      	ldr	r3, [pc, #20]	; (8011308 <RTC_TamperSamplingFreqConfig+0x2c>)
 80112f2:	4a05      	ldr	r2, [pc, #20]	; (8011308 <RTC_TamperSamplingFreqConfig+0x2c>)
 80112f4:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80112f6:	687a      	ldr	r2, [r7, #4]
 80112f8:	430a      	orrs	r2, r1
 80112fa:	641a      	str	r2, [r3, #64]	; 0x40
}
 80112fc:	370c      	adds	r7, #12
 80112fe:	46bd      	mov	sp, r7
 8011300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011304:	4770      	bx	lr
 8011306:	bf00      	nop
 8011308:	40002800 	.word	0x40002800

0801130c <RTC_TamperPinsPrechargeDuration>:
  *     @arg RTC_TamperPrechargeDuration_4RTCCLK: Tamper pins are precharged before sampling during 4 RTCCLK cycle    
  *     @arg RTC_TamperPrechargeDuration_8RTCCLK: Tamper pins are precharged before sampling during 8 RTCCLK cycle
  * @retval None
  */
void RTC_TamperPinsPrechargeDuration(uint32_t RTC_TamperPrechargeDuration)
{
 801130c:	b480      	push	{r7}
 801130e:	b083      	sub	sp, #12
 8011310:	af00      	add	r7, sp, #0
 8011312:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_TAMPER_PRECHARGE_DURATION(RTC_TamperPrechargeDuration));
   
  /* Clear TAMPPRCH[1:0] bits in the RTC_TAFCR register */
  RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPPRCH);
 8011314:	4b08      	ldr	r3, [pc, #32]	; (8011338 <RTC_TamperPinsPrechargeDuration+0x2c>)
 8011316:	4a08      	ldr	r2, [pc, #32]	; (8011338 <RTC_TamperPinsPrechargeDuration+0x2c>)
 8011318:	6c12      	ldr	r2, [r2, #64]	; 0x40
 801131a:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 801131e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure the RTC_TAFCR register */
  RTC->TAFCR |= (uint32_t)RTC_TamperPrechargeDuration;
 8011320:	4b05      	ldr	r3, [pc, #20]	; (8011338 <RTC_TamperPinsPrechargeDuration+0x2c>)
 8011322:	4a05      	ldr	r2, [pc, #20]	; (8011338 <RTC_TamperPinsPrechargeDuration+0x2c>)
 8011324:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8011326:	687a      	ldr	r2, [r7, #4]
 8011328:	430a      	orrs	r2, r1
 801132a:	641a      	str	r2, [r3, #64]	; 0x40
}
 801132c:	370c      	adds	r7, #12
 801132e:	46bd      	mov	sp, r7
 8011330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011334:	4770      	bx	lr
 8011336:	bf00      	nop
 8011338:	40002800 	.word	0x40002800

0801133c <RTC_TimeStampOnTamperDetectionCmd>:
  * @param  NewState: new state of the timestamp on tamper event.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RTC_TimeStampOnTamperDetectionCmd(FunctionalState NewState)
{
 801133c:	b480      	push	{r7}
 801133e:	b083      	sub	sp, #12
 8011340:	af00      	add	r7, sp, #0
 8011342:	4603      	mov	r3, r0
 8011344:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
   
  if (NewState != DISABLE)
 8011346:	79fb      	ldrb	r3, [r7, #7]
 8011348:	2b00      	cmp	r3, #0
 801134a:	d006      	beq.n	801135a <RTC_TimeStampOnTamperDetectionCmd+0x1e>
  {
    /* Save timestamp on tamper detection event */
    RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPTS;
 801134c:	4b08      	ldr	r3, [pc, #32]	; (8011370 <RTC_TimeStampOnTamperDetectionCmd+0x34>)
 801134e:	4a08      	ldr	r2, [pc, #32]	; (8011370 <RTC_TimeStampOnTamperDetectionCmd+0x34>)
 8011350:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8011352:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8011356:	641a      	str	r2, [r3, #64]	; 0x40
 8011358:	e005      	b.n	8011366 <RTC_TimeStampOnTamperDetectionCmd+0x2a>
  }
  else
  {
    /* Tamper detection does not cause a timestamp to be saved */
    RTC->TAFCR &= (uint32_t)~RTC_TAFCR_TAMPTS;    
 801135a:	4b05      	ldr	r3, [pc, #20]	; (8011370 <RTC_TimeStampOnTamperDetectionCmd+0x34>)
 801135c:	4a04      	ldr	r2, [pc, #16]	; (8011370 <RTC_TimeStampOnTamperDetectionCmd+0x34>)
 801135e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8011360:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8011364:	641a      	str	r2, [r3, #64]	; 0x40
  }
}
 8011366:	370c      	adds	r7, #12
 8011368:	46bd      	mov	sp, r7
 801136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801136e:	4770      	bx	lr
 8011370:	40002800 	.word	0x40002800

08011374 <RTC_TamperPullUpCmd>:
  * @param  NewState: new state of tamper pull up.
  *   This parameter can be: ENABLE or DISABLE.                   
  * @retval None
  */
void RTC_TamperPullUpCmd(FunctionalState NewState)
{
 8011374:	b480      	push	{r7}
 8011376:	b083      	sub	sp, #12
 8011378:	af00      	add	r7, sp, #0
 801137a:	4603      	mov	r3, r0
 801137c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
 if (NewState != DISABLE)
 801137e:	79fb      	ldrb	r3, [r7, #7]
 8011380:	2b00      	cmp	r3, #0
 8011382:	d006      	beq.n	8011392 <RTC_TamperPullUpCmd+0x1e>
  {
    /* Enable precharge of the selected Tamper pin */
    RTC->TAFCR &= (uint32_t)~RTC_TAFCR_TAMPPUDIS; 
 8011384:	4b08      	ldr	r3, [pc, #32]	; (80113a8 <RTC_TamperPullUpCmd+0x34>)
 8011386:	4a08      	ldr	r2, [pc, #32]	; (80113a8 <RTC_TamperPullUpCmd+0x34>)
 8011388:	6c12      	ldr	r2, [r2, #64]	; 0x40
 801138a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801138e:	641a      	str	r2, [r3, #64]	; 0x40
 8011390:	e005      	b.n	801139e <RTC_TamperPullUpCmd+0x2a>
  }
  else
  {
    /* Disable precharge of the selected Tamper pin */
    RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPPUDIS;    
 8011392:	4b05      	ldr	r3, [pc, #20]	; (80113a8 <RTC_TamperPullUpCmd+0x34>)
 8011394:	4a04      	ldr	r2, [pc, #16]	; (80113a8 <RTC_TamperPullUpCmd+0x34>)
 8011396:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8011398:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801139c:	641a      	str	r2, [r3, #64]	; 0x40
  } 
}
 801139e:	370c      	adds	r7, #12
 80113a0:	46bd      	mov	sp, r7
 80113a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113a6:	4770      	bx	lr
 80113a8:	40002800 	.word	0x40002800

080113ac <RTC_WriteBackupRegister>:
  *                          specify the register.
  * @param  Data: Data to be written in the specified RTC Backup data register.                     
  * @retval None
  */
void RTC_WriteBackupRegister(uint32_t RTC_BKP_DR, uint32_t Data)
{
 80113ac:	b480      	push	{r7}
 80113ae:	b085      	sub	sp, #20
 80113b0:	af00      	add	r7, sp, #0
 80113b2:	6078      	str	r0, [r7, #4]
 80113b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0;
 80113b6:	2300      	movs	r3, #0
 80113b8:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RTC_BKP(RTC_BKP_DR));

  tmp = RTC_BASE + 0x50;
 80113ba:	4b07      	ldr	r3, [pc, #28]	; (80113d8 <RTC_WriteBackupRegister+0x2c>)
 80113bc:	60fb      	str	r3, [r7, #12]
  tmp += (RTC_BKP_DR * 4);
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	009a      	lsls	r2, r3, #2
 80113c2:	68fb      	ldr	r3, [r7, #12]
 80113c4:	4413      	add	r3, r2
 80113c6:	60fb      	str	r3, [r7, #12]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80113c8:	68fb      	ldr	r3, [r7, #12]
 80113ca:	683a      	ldr	r2, [r7, #0]
 80113cc:	601a      	str	r2, [r3, #0]
}
 80113ce:	3714      	adds	r7, #20
 80113d0:	46bd      	mov	sp, r7
 80113d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113d6:	4770      	bx	lr
 80113d8:	40002850 	.word	0x40002850

080113dc <RTC_ReadBackupRegister>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to 
  *                          specify the register.                   
  * @retval None
  */
uint32_t RTC_ReadBackupRegister(uint32_t RTC_BKP_DR)
{
 80113dc:	b480      	push	{r7}
 80113de:	b085      	sub	sp, #20
 80113e0:	af00      	add	r7, sp, #0
 80113e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmp = 0;
 80113e4:	2300      	movs	r3, #0
 80113e6:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RTC_BKP(RTC_BKP_DR));

  tmp = RTC_BASE + 0x50;
 80113e8:	4b07      	ldr	r3, [pc, #28]	; (8011408 <RTC_ReadBackupRegister+0x2c>)
 80113ea:	60fb      	str	r3, [r7, #12]
  tmp += (RTC_BKP_DR * 4);
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	009a      	lsls	r2, r3, #2
 80113f0:	68fb      	ldr	r3, [r7, #12]
 80113f2:	4413      	add	r3, r2
 80113f4:	60fb      	str	r3, [r7, #12]
  
  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80113f6:	68fb      	ldr	r3, [r7, #12]
 80113f8:	681b      	ldr	r3, [r3, #0]
}
 80113fa:	4618      	mov	r0, r3
 80113fc:	3714      	adds	r7, #20
 80113fe:	46bd      	mov	sp, r7
 8011400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011404:	4770      	bx	lr
 8011406:	bf00      	nop
 8011408:	40002850 	.word	0x40002850

0801140c <RTC_TamperPinSelection>:
  *            @arg RTC_TamperPin_PC13: PC13 is selected as RTC Tamper Pin.
  *            @arg RTC_TamperPin_PI8: PI8 is selected as RTC Tamper Pin.    
  * @retval None
  */
void RTC_TamperPinSelection(uint32_t RTC_TamperPin)
{
 801140c:	b480      	push	{r7}
 801140e:	b083      	sub	sp, #12
 8011410:	af00      	add	r7, sp, #0
 8011412:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_TAMPER_PIN(RTC_TamperPin));
  
  RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPINSEL);
 8011414:	4b08      	ldr	r3, [pc, #32]	; (8011438 <RTC_TamperPinSelection+0x2c>)
 8011416:	4a08      	ldr	r2, [pc, #32]	; (8011438 <RTC_TamperPinSelection+0x2c>)
 8011418:	6c12      	ldr	r2, [r2, #64]	; 0x40
 801141a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 801141e:	641a      	str	r2, [r3, #64]	; 0x40
  RTC->TAFCR |= (uint32_t)(RTC_TamperPin);  
 8011420:	4b05      	ldr	r3, [pc, #20]	; (8011438 <RTC_TamperPinSelection+0x2c>)
 8011422:	4a05      	ldr	r2, [pc, #20]	; (8011438 <RTC_TamperPinSelection+0x2c>)
 8011424:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8011426:	687a      	ldr	r2, [r7, #4]
 8011428:	430a      	orrs	r2, r1
 801142a:	641a      	str	r2, [r3, #64]	; 0x40
}
 801142c:	370c      	adds	r7, #12
 801142e:	46bd      	mov	sp, r7
 8011430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011434:	4770      	bx	lr
 8011436:	bf00      	nop
 8011438:	40002800 	.word	0x40002800

0801143c <RTC_TimeStampPinSelection>:
  *            @arg RTC_TimeStampPin_PC13: PC13 is selected as RTC TimeStamp Pin.
  *            @arg RTC_TimeStampPin_PI8: PI8 is selected as RTC TimeStamp Pin.    
  * @retval None
  */
void RTC_TimeStampPinSelection(uint32_t RTC_TimeStampPin)
{
 801143c:	b480      	push	{r7}
 801143e:	b083      	sub	sp, #12
 8011440:	af00      	add	r7, sp, #0
 8011442:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));
  
  RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TSINSEL);
 8011444:	4b08      	ldr	r3, [pc, #32]	; (8011468 <RTC_TimeStampPinSelection+0x2c>)
 8011446:	4a08      	ldr	r2, [pc, #32]	; (8011468 <RTC_TimeStampPinSelection+0x2c>)
 8011448:	6c12      	ldr	r2, [r2, #64]	; 0x40
 801144a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 801144e:	641a      	str	r2, [r3, #64]	; 0x40
  RTC->TAFCR |= (uint32_t)(RTC_TimeStampPin);  
 8011450:	4b05      	ldr	r3, [pc, #20]	; (8011468 <RTC_TimeStampPinSelection+0x2c>)
 8011452:	4a05      	ldr	r2, [pc, #20]	; (8011468 <RTC_TimeStampPinSelection+0x2c>)
 8011454:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8011456:	687a      	ldr	r2, [r7, #4]
 8011458:	430a      	orrs	r2, r1
 801145a:	641a      	str	r2, [r3, #64]	; 0x40
}
 801145c:	370c      	adds	r7, #12
 801145e:	46bd      	mov	sp, r7
 8011460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011464:	4770      	bx	lr
 8011466:	bf00      	nop
 8011468:	40002800 	.word	0x40002800

0801146c <RTC_OutputTypeConfig>:
  *            @arg RTC_OutputType_PushPull:  RTC Output (PC13) is configured in 
  *                                    Push Pull mode.    
  * @retval None
  */
void RTC_OutputTypeConfig(uint32_t RTC_OutputType)
{
 801146c:	b480      	push	{r7}
 801146e:	b083      	sub	sp, #12
 8011470:	af00      	add	r7, sp, #0
 8011472:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_OUTPUT_TYPE(RTC_OutputType));
  
  RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_ALARMOUTTYPE);
 8011474:	4b08      	ldr	r3, [pc, #32]	; (8011498 <RTC_OutputTypeConfig+0x2c>)
 8011476:	4a08      	ldr	r2, [pc, #32]	; (8011498 <RTC_OutputTypeConfig+0x2c>)
 8011478:	6c12      	ldr	r2, [r2, #64]	; 0x40
 801147a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 801147e:	641a      	str	r2, [r3, #64]	; 0x40
  RTC->TAFCR |= (uint32_t)(RTC_OutputType);  
 8011480:	4b05      	ldr	r3, [pc, #20]	; (8011498 <RTC_OutputTypeConfig+0x2c>)
 8011482:	4a05      	ldr	r2, [pc, #20]	; (8011498 <RTC_OutputTypeConfig+0x2c>)
 8011484:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8011486:	687a      	ldr	r2, [r7, #4]
 8011488:	430a      	orrs	r2, r1
 801148a:	641a      	str	r2, [r3, #64]	; 0x40
}
 801148c:	370c      	adds	r7, #12
 801148e:	46bd      	mov	sp, r7
 8011490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011494:	4770      	bx	lr
 8011496:	bf00      	nop
 8011498:	40002800 	.word	0x40002800

0801149c <RTC_SynchroShiftConfig>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Shift registers are configured
  *          - ERROR: RTC Shift registers are not configured
*/
ErrorStatus RTC_SynchroShiftConfig(uint32_t RTC_ShiftAdd1S, uint32_t RTC_ShiftSubFS)
{
 801149c:	b580      	push	{r7, lr}
 801149e:	b084      	sub	sp, #16
 80114a0:	af00      	add	r7, sp, #0
 80114a2:	6078      	str	r0, [r7, #4]
 80114a4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80114a6:	2300      	movs	r3, #0
 80114a8:	73fb      	strb	r3, [r7, #15]
  uint32_t shpfcount = 0;
 80114aa:	2300      	movs	r3, #0
 80114ac:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_RTC_SHIFT_ADD1S(RTC_ShiftAdd1S));
  assert_param(IS_RTC_SHIFT_SUBFS(RTC_ShiftSubFS));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 80114ae:	4b21      	ldr	r3, [pc, #132]	; (8011534 <RTC_SynchroShiftConfig+0x98>)
 80114b0:	22ca      	movs	r2, #202	; 0xca
 80114b2:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 80114b4:	4b1f      	ldr	r3, [pc, #124]	; (8011534 <RTC_SynchroShiftConfig+0x98>)
 80114b6:	2253      	movs	r2, #83	; 0x53
 80114b8:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Check if a Shift is pending*/
  if ((RTC->ISR & RTC_ISR_SHPF) != RESET)
 80114ba:	4b1e      	ldr	r3, [pc, #120]	; (8011534 <RTC_SynchroShiftConfig+0x98>)
 80114bc:	68db      	ldr	r3, [r3, #12]
 80114be:	f003 0308 	and.w	r3, r3, #8
 80114c2:	2b00      	cmp	r3, #0
 80114c4:	d00d      	beq.n	80114e2 <RTC_SynchroShiftConfig+0x46>
  {
    /* Wait until the shift is completed*/
    while (((RTC->ISR & RTC_ISR_SHPF) != RESET) && (shpfcount != SHPF_TIMEOUT))
 80114c6:	e002      	b.n	80114ce <RTC_SynchroShiftConfig+0x32>
    {
      shpfcount++;
 80114c8:	68bb      	ldr	r3, [r7, #8]
 80114ca:	3301      	adds	r3, #1
 80114cc:	60bb      	str	r3, [r7, #8]
  
  /* Check if a Shift is pending*/
  if ((RTC->ISR & RTC_ISR_SHPF) != RESET)
  {
    /* Wait until the shift is completed*/
    while (((RTC->ISR & RTC_ISR_SHPF) != RESET) && (shpfcount != SHPF_TIMEOUT))
 80114ce:	4b19      	ldr	r3, [pc, #100]	; (8011534 <RTC_SynchroShiftConfig+0x98>)
 80114d0:	68db      	ldr	r3, [r3, #12]
 80114d2:	f003 0308 	and.w	r3, r3, #8
 80114d6:	2b00      	cmp	r3, #0
 80114d8:	d003      	beq.n	80114e2 <RTC_SynchroShiftConfig+0x46>
 80114da:	68bb      	ldr	r3, [r7, #8]
 80114dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80114e0:	d1f2      	bne.n	80114c8 <RTC_SynchroShiftConfig+0x2c>
      shpfcount++;
    }
  }

  /* Check if the Shift pending is completed or if there is no Shift operation at all*/
  if ((RTC->ISR & RTC_ISR_SHPF) == RESET)
 80114e2:	4b14      	ldr	r3, [pc, #80]	; (8011534 <RTC_SynchroShiftConfig+0x98>)
 80114e4:	68db      	ldr	r3, [r3, #12]
 80114e6:	f003 0308 	and.w	r3, r3, #8
 80114ea:	2b00      	cmp	r3, #0
 80114ec:	d118      	bne.n	8011520 <RTC_SynchroShiftConfig+0x84>
  {
    /* check if the reference clock detection is disabled */
    if((RTC->CR & RTC_CR_REFCKON) == RESET)
 80114ee:	4b11      	ldr	r3, [pc, #68]	; (8011534 <RTC_SynchroShiftConfig+0x98>)
 80114f0:	689b      	ldr	r3, [r3, #8]
 80114f2:	f003 0310 	and.w	r3, r3, #16
 80114f6:	2b00      	cmp	r3, #0
 80114f8:	d10f      	bne.n	801151a <RTC_SynchroShiftConfig+0x7e>
    {
      /* Configure the Shift settings */
      RTC->SHIFTR = (uint32_t)(uint32_t)(RTC_ShiftSubFS) | (uint32_t)(RTC_ShiftAdd1S);
 80114fa:	4b0e      	ldr	r3, [pc, #56]	; (8011534 <RTC_SynchroShiftConfig+0x98>)
 80114fc:	6839      	ldr	r1, [r7, #0]
 80114fe:	687a      	ldr	r2, [r7, #4]
 8011500:	430a      	orrs	r2, r1
 8011502:	62da      	str	r2, [r3, #44]	; 0x2c
    
      if(RTC_WaitForSynchro() == ERROR)
 8011504:	f7fe ffc0 	bl	8010488 <RTC_WaitForSynchro>
 8011508:	4603      	mov	r3, r0
 801150a:	2b00      	cmp	r3, #0
 801150c:	d102      	bne.n	8011514 <RTC_SynchroShiftConfig+0x78>
      {
        status = ERROR;
 801150e:	2300      	movs	r3, #0
 8011510:	73fb      	strb	r3, [r7, #15]
 8011512:	e007      	b.n	8011524 <RTC_SynchroShiftConfig+0x88>
      }
      else
      {
        status = SUCCESS;
 8011514:	2301      	movs	r3, #1
 8011516:	73fb      	strb	r3, [r7, #15]
 8011518:	e004      	b.n	8011524 <RTC_SynchroShiftConfig+0x88>
      }
    }
    else
    {
      status = ERROR;
 801151a:	2300      	movs	r3, #0
 801151c:	73fb      	strb	r3, [r7, #15]
 801151e:	e001      	b.n	8011524 <RTC_SynchroShiftConfig+0x88>
    }
  }
  else
  {
    status = ERROR;
 8011520:	2300      	movs	r3, #0
 8011522:	73fb      	strb	r3, [r7, #15]
  }

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;
 8011524:	4b03      	ldr	r3, [pc, #12]	; (8011534 <RTC_SynchroShiftConfig+0x98>)
 8011526:	22ff      	movs	r2, #255	; 0xff
 8011528:	625a      	str	r2, [r3, #36]	; 0x24
  
  return (ErrorStatus)(status);
 801152a:	7bfb      	ldrb	r3, [r7, #15]
}
 801152c:	4618      	mov	r0, r3
 801152e:	3710      	adds	r7, #16
 8011530:	46bd      	mov	sp, r7
 8011532:	bd80      	pop	{r7, pc}
 8011534:	40002800 	.word	0x40002800

08011538 <RTC_ITConfig>:
  * @param  NewState: new state of the specified RTC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RTC_ITConfig(uint32_t RTC_IT, FunctionalState NewState)
{
 8011538:	b480      	push	{r7}
 801153a:	b083      	sub	sp, #12
 801153c:	af00      	add	r7, sp, #0
 801153e:	6078      	str	r0, [r7, #4]
 8011540:	460b      	mov	r3, r1
 8011542:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RTC_CONFIG_IT(RTC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8011544:	4b19      	ldr	r3, [pc, #100]	; (80115ac <RTC_ITConfig+0x74>)
 8011546:	22ca      	movs	r2, #202	; 0xca
 8011548:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 801154a:	4b18      	ldr	r3, [pc, #96]	; (80115ac <RTC_ITConfig+0x74>)
 801154c:	2253      	movs	r2, #83	; 0x53
 801154e:	625a      	str	r2, [r3, #36]	; 0x24

  if (NewState != DISABLE)
 8011550:	78fb      	ldrb	r3, [r7, #3]
 8011552:	2b00      	cmp	r3, #0
 8011554:	d010      	beq.n	8011578 <RTC_ITConfig+0x40>
  {
    /* Configure the Interrupts in the RTC_CR register */
    RTC->CR |= (uint32_t)(RTC_IT & ~RTC_TAFCR_TAMPIE);
 8011556:	4b15      	ldr	r3, [pc, #84]	; (80115ac <RTC_ITConfig+0x74>)
 8011558:	4a14      	ldr	r2, [pc, #80]	; (80115ac <RTC_ITConfig+0x74>)
 801155a:	6891      	ldr	r1, [r2, #8]
 801155c:	687a      	ldr	r2, [r7, #4]
 801155e:	f022 0204 	bic.w	r2, r2, #4
 8011562:	430a      	orrs	r2, r1
 8011564:	609a      	str	r2, [r3, #8]
    /* Configure the Tamper Interrupt in the RTC_TAFCR */
    RTC->TAFCR |= (uint32_t)(RTC_IT & RTC_TAFCR_TAMPIE);
 8011566:	4b11      	ldr	r3, [pc, #68]	; (80115ac <RTC_ITConfig+0x74>)
 8011568:	4a10      	ldr	r2, [pc, #64]	; (80115ac <RTC_ITConfig+0x74>)
 801156a:	6c11      	ldr	r1, [r2, #64]	; 0x40
 801156c:	687a      	ldr	r2, [r7, #4]
 801156e:	f002 0204 	and.w	r2, r2, #4
 8011572:	430a      	orrs	r2, r1
 8011574:	641a      	str	r2, [r3, #64]	; 0x40
 8011576:	e011      	b.n	801159c <RTC_ITConfig+0x64>
  }
  else
  {
    /* Configure the Interrupts in the RTC_CR register */
    RTC->CR &= (uint32_t)~(RTC_IT & (uint32_t)~RTC_TAFCR_TAMPIE);
 8011578:	4b0c      	ldr	r3, [pc, #48]	; (80115ac <RTC_ITConfig+0x74>)
 801157a:	4a0c      	ldr	r2, [pc, #48]	; (80115ac <RTC_ITConfig+0x74>)
 801157c:	6891      	ldr	r1, [r2, #8]
 801157e:	687a      	ldr	r2, [r7, #4]
 8011580:	f022 0204 	bic.w	r2, r2, #4
 8011584:	43d2      	mvns	r2, r2
 8011586:	400a      	ands	r2, r1
 8011588:	609a      	str	r2, [r3, #8]
    /* Configure the Tamper Interrupt in the RTC_TAFCR */
    RTC->TAFCR &= (uint32_t)~(RTC_IT & RTC_TAFCR_TAMPIE);
 801158a:	4b08      	ldr	r3, [pc, #32]	; (80115ac <RTC_ITConfig+0x74>)
 801158c:	4a07      	ldr	r2, [pc, #28]	; (80115ac <RTC_ITConfig+0x74>)
 801158e:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8011590:	687a      	ldr	r2, [r7, #4]
 8011592:	f002 0204 	and.w	r2, r2, #4
 8011596:	43d2      	mvns	r2, r2
 8011598:	400a      	ands	r2, r1
 801159a:	641a      	str	r2, [r3, #64]	; 0x40
  }
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 801159c:	4b03      	ldr	r3, [pc, #12]	; (80115ac <RTC_ITConfig+0x74>)
 801159e:	22ff      	movs	r2, #255	; 0xff
 80115a0:	625a      	str	r2, [r3, #36]	; 0x24
}
 80115a2:	370c      	adds	r7, #12
 80115a4:	46bd      	mov	sp, r7
 80115a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115aa:	4770      	bx	lr
 80115ac:	40002800 	.word	0x40002800

080115b0 <RTC_GetFlagStatus>:
  *            @arg RTC_FLAG_ALRBWF: Alarm B Write flag
  *            @arg RTC_FLAG_ALRAWF: Alarm A write flag
  * @retval The new state of RTC_FLAG (SET or RESET).
  */
FlagStatus RTC_GetFlagStatus(uint32_t RTC_FLAG)
{
 80115b0:	b480      	push	{r7}
 80115b2:	b085      	sub	sp, #20
 80115b4:	af00      	add	r7, sp, #0
 80115b6:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 80115b8:	2300      	movs	r3, #0
 80115ba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpreg = 0;
 80115bc:	2300      	movs	r3, #0
 80115be:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_RTC_GET_FLAG(RTC_FLAG));
  
  /* Get all the flags */
  tmpreg = (uint32_t)(RTC->ISR & RTC_FLAGS_MASK);
 80115c0:	4b0a      	ldr	r3, [pc, #40]	; (80115ec <RTC_GetFlagStatus+0x3c>)
 80115c2:	68da      	ldr	r2, [r3, #12]
 80115c4:	4b0a      	ldr	r3, [pc, #40]	; (80115f0 <RTC_GetFlagStatus+0x40>)
 80115c6:	4013      	ands	r3, r2
 80115c8:	60bb      	str	r3, [r7, #8]
  
  /* Return the status of the flag */
  if ((tmpreg & RTC_FLAG) != (uint32_t)RESET)
 80115ca:	68ba      	ldr	r2, [r7, #8]
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	4013      	ands	r3, r2
 80115d0:	2b00      	cmp	r3, #0
 80115d2:	d002      	beq.n	80115da <RTC_GetFlagStatus+0x2a>
  {
    bitstatus = SET;
 80115d4:	2301      	movs	r3, #1
 80115d6:	73fb      	strb	r3, [r7, #15]
 80115d8:	e001      	b.n	80115de <RTC_GetFlagStatus+0x2e>
  }
  else
  {
    bitstatus = RESET;
 80115da:	2300      	movs	r3, #0
 80115dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80115de:	7bfb      	ldrb	r3, [r7, #15]
}
 80115e0:	4618      	mov	r0, r3
 80115e2:	3714      	adds	r7, #20
 80115e4:	46bd      	mov	sp, r7
 80115e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115ea:	4770      	bx	lr
 80115ec:	40002800 	.word	0x40002800
 80115f0:	00013f7f 	.word	0x00013f7f

080115f4 <RTC_ClearFlag>:
  *            @arg RTC_FLAG_ALRAF: Alarm A flag
  *            @arg RTC_FLAG_RSF: Registers Synchronized flag
  * @retval None
  */
void RTC_ClearFlag(uint32_t RTC_FLAG)
{
 80115f4:	b480      	push	{r7}
 80115f6:	b083      	sub	sp, #12
 80115f8:	af00      	add	r7, sp, #0
 80115fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_CLEAR_FLAG(RTC_FLAG));

  /* Clear the Flags in the RTC_ISR register */
  RTC->ISR = (uint32_t)((uint32_t)(~((RTC_FLAG | RTC_ISR_INIT)& 0x0000FFFF) | (uint32_t)(RTC->ISR & RTC_ISR_INIT)));  
 80115fc:	4b08      	ldr	r3, [pc, #32]	; (8011620 <RTC_ClearFlag+0x2c>)
 80115fe:	687a      	ldr	r2, [r7, #4]
 8011600:	b292      	uxth	r2, r2
 8011602:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8011606:	43d1      	mvns	r1, r2
 8011608:	4a05      	ldr	r2, [pc, #20]	; (8011620 <RTC_ClearFlag+0x2c>)
 801160a:	68d2      	ldr	r2, [r2, #12]
 801160c:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8011610:	430a      	orrs	r2, r1
 8011612:	60da      	str	r2, [r3, #12]
}
 8011614:	370c      	adds	r7, #12
 8011616:	46bd      	mov	sp, r7
 8011618:	f85d 7b04 	ldr.w	r7, [sp], #4
 801161c:	4770      	bx	lr
 801161e:	bf00      	nop
 8011620:	40002800 	.word	0x40002800

08011624 <RTC_GetITStatus>:
  *            @arg RTC_IT_ALRA: Alarm A interrupt 
  *            @arg RTC_IT_TAMP1: Tamper 1 event interrupt 
  * @retval The new state of RTC_IT (SET or RESET).
  */
ITStatus RTC_GetITStatus(uint32_t RTC_IT)
{
 8011624:	b480      	push	{r7}
 8011626:	b087      	sub	sp, #28
 8011628:	af00      	add	r7, sp, #0
 801162a:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 801162c:	2300      	movs	r3, #0
 801162e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg = 0, enablestatus = 0;
 8011630:	2300      	movs	r3, #0
 8011632:	613b      	str	r3, [r7, #16]
 8011634:	2300      	movs	r3, #0
 8011636:	60fb      	str	r3, [r7, #12]
 
  /* Check the parameters */
  assert_param(IS_RTC_GET_IT(RTC_IT));
  
  /* Get the TAMPER Interrupt enable bit and pending bit */
  tmpreg = (uint32_t)(RTC->TAFCR & (RTC_TAFCR_TAMPIE));
 8011638:	4b13      	ldr	r3, [pc, #76]	; (8011688 <RTC_GetITStatus+0x64>)
 801163a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801163c:	f003 0304 	and.w	r3, r3, #4
 8011640:	613b      	str	r3, [r7, #16]
 
  /* Get the Interrupt enable Status */
  enablestatus = (uint32_t)((RTC->CR & RTC_IT) | (tmpreg & (RTC_IT >> 15)));
 8011642:	4b11      	ldr	r3, [pc, #68]	; (8011688 <RTC_GetITStatus+0x64>)
 8011644:	689a      	ldr	r2, [r3, #8]
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	401a      	ands	r2, r3
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	0bd9      	lsrs	r1, r3, #15
 801164e:	693b      	ldr	r3, [r7, #16]
 8011650:	400b      	ands	r3, r1
 8011652:	4313      	orrs	r3, r2
 8011654:	60fb      	str	r3, [r7, #12]
  
  /* Get the Interrupt pending bit */
  tmpreg = (uint32_t)((RTC->ISR & (uint32_t)(RTC_IT >> 4)));
 8011656:	4b0c      	ldr	r3, [pc, #48]	; (8011688 <RTC_GetITStatus+0x64>)
 8011658:	68da      	ldr	r2, [r3, #12]
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	091b      	lsrs	r3, r3, #4
 801165e:	4013      	ands	r3, r2
 8011660:	613b      	str	r3, [r7, #16]
  
  /* Get the status of the Interrupt */
  if ((enablestatus != (uint32_t)RESET) && ((tmpreg & 0x0000FFFF) != (uint32_t)RESET))
 8011662:	68fb      	ldr	r3, [r7, #12]
 8011664:	2b00      	cmp	r3, #0
 8011666:	d006      	beq.n	8011676 <RTC_GetITStatus+0x52>
 8011668:	693b      	ldr	r3, [r7, #16]
 801166a:	b29b      	uxth	r3, r3
 801166c:	2b00      	cmp	r3, #0
 801166e:	d002      	beq.n	8011676 <RTC_GetITStatus+0x52>
  {
    bitstatus = SET;
 8011670:	2301      	movs	r3, #1
 8011672:	75fb      	strb	r3, [r7, #23]
 8011674:	e001      	b.n	801167a <RTC_GetITStatus+0x56>
  }
  else
  {
    bitstatus = RESET;
 8011676:	2300      	movs	r3, #0
 8011678:	75fb      	strb	r3, [r7, #23]
  }
  return bitstatus;
 801167a:	7dfb      	ldrb	r3, [r7, #23]
}
 801167c:	4618      	mov	r0, r3
 801167e:	371c      	adds	r7, #28
 8011680:	46bd      	mov	sp, r7
 8011682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011686:	4770      	bx	lr
 8011688:	40002800 	.word	0x40002800

0801168c <RTC_ClearITPendingBit>:
  *            @arg RTC_IT_ALRA: Alarm A interrupt 
  *            @arg RTC_IT_TAMP1: Tamper 1 event interrupt 
  * @retval None
  */
void RTC_ClearITPendingBit(uint32_t RTC_IT)
{
 801168c:	b480      	push	{r7}
 801168e:	b085      	sub	sp, #20
 8011690:	af00      	add	r7, sp, #0
 8011692:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8011694:	2300      	movs	r3, #0
 8011696:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_CLEAR_IT(RTC_IT));

  /* Get the RTC_ISR Interrupt pending bits mask */
  tmpreg = (uint32_t)(RTC_IT >> 4);
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	091b      	lsrs	r3, r3, #4
 801169c:	60fb      	str	r3, [r7, #12]

  /* Clear the interrupt pending bits in the RTC_ISR register */
  RTC->ISR = (uint32_t)((uint32_t)(~((tmpreg | RTC_ISR_INIT)& 0x0000FFFF) | (uint32_t)(RTC->ISR & RTC_ISR_INIT))); 
 801169e:	4b08      	ldr	r3, [pc, #32]	; (80116c0 <RTC_ClearITPendingBit+0x34>)
 80116a0:	68fa      	ldr	r2, [r7, #12]
 80116a2:	b292      	uxth	r2, r2
 80116a4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80116a8:	43d1      	mvns	r1, r2
 80116aa:	4a05      	ldr	r2, [pc, #20]	; (80116c0 <RTC_ClearITPendingBit+0x34>)
 80116ac:	68d2      	ldr	r2, [r2, #12]
 80116ae:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80116b2:	430a      	orrs	r2, r1
 80116b4:	60da      	str	r2, [r3, #12]
}
 80116b6:	3714      	adds	r7, #20
 80116b8:	46bd      	mov	sp, r7
 80116ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116be:	4770      	bx	lr
 80116c0:	40002800 	.word	0x40002800

080116c4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted.
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80116c4:	b480      	push	{r7}
 80116c6:	b085      	sub	sp, #20
 80116c8:	af00      	add	r7, sp, #0
 80116ca:	4603      	mov	r3, r0
 80116cc:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0;
 80116ce:	2300      	movs	r3, #0
 80116d0:	73fb      	strb	r3, [r7, #15]
  
  while (Value >= 10)
 80116d2:	e005      	b.n	80116e0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80116d4:	7bfb      	ldrb	r3, [r7, #15]
 80116d6:	3301      	adds	r3, #1
 80116d8:	73fb      	strb	r3, [r7, #15]
    Value -= 10;
 80116da:	79fb      	ldrb	r3, [r7, #7]
 80116dc:	3b0a      	subs	r3, #10
 80116de:	71fb      	strb	r3, [r7, #7]
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint8_t bcdhigh = 0;
  
  while (Value >= 10)
 80116e0:	79fb      	ldrb	r3, [r7, #7]
 80116e2:	2b09      	cmp	r3, #9
 80116e4:	d8f6      	bhi.n	80116d4 <RTC_ByteToBcd2+0x10>
  {
    bcdhigh++;
    Value -= 10;
  }
  
  return  ((uint8_t)(bcdhigh << 4) | Value);
 80116e6:	7bfb      	ldrb	r3, [r7, #15]
 80116e8:	011b      	lsls	r3, r3, #4
 80116ea:	b2da      	uxtb	r2, r3
 80116ec:	79fb      	ldrb	r3, [r7, #7]
 80116ee:	4313      	orrs	r3, r2
 80116f0:	b2db      	uxtb	r3, r3
}
 80116f2:	4618      	mov	r0, r3
 80116f4:	3714      	adds	r7, #20
 80116f6:	46bd      	mov	sp, r7
 80116f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116fc:	4770      	bx	lr
 80116fe:	bf00      	nop

08011700 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted.
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8011700:	b480      	push	{r7}
 8011702:	b085      	sub	sp, #20
 8011704:	af00      	add	r7, sp, #0
 8011706:	4603      	mov	r3, r0
 8011708:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0;
 801170a:	2300      	movs	r3, #0
 801170c:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 801170e:	79fb      	ldrb	r3, [r7, #7]
 8011710:	091b      	lsrs	r3, r3, #4
 8011712:	b2db      	uxtb	r3, r3
 8011714:	461a      	mov	r2, r3
 8011716:	0092      	lsls	r2, r2, #2
 8011718:	4413      	add	r3, r2
 801171a:	005b      	lsls	r3, r3, #1
 801171c:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & (uint8_t)0x0F));
 801171e:	79fb      	ldrb	r3, [r7, #7]
 8011720:	f003 030f 	and.w	r3, r3, #15
 8011724:	b2da      	uxtb	r2, r3
 8011726:	7bfb      	ldrb	r3, [r7, #15]
 8011728:	4413      	add	r3, r2
 801172a:	b2db      	uxtb	r3, r3
}
 801172c:	4618      	mov	r0, r3
 801172e:	3714      	adds	r7, #20
 8011730:	46bd      	mov	sp, r7
 8011732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011736:	4770      	bx	lr

08011738 <SAI_DeInit>:
  * @param  SAIx: To select the SAIx peripheral, where x can be the different instances 
  *                     
  * @retval None
  */
void SAI_DeInit(SAI_TypeDef* SAIx)
{
 8011738:	b580      	push	{r7, lr}
 801173a:	b082      	sub	sp, #8
 801173c:	af00      	add	r7, sp, #0
 801173e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SAI_PERIPH(SAIx));

  /* Enable SAI1 reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_SAI1, ENABLE);
 8011740:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8011744:	2101      	movs	r1, #1
 8011746:	f7fe fb7d 	bl	800fe44 <RCC_APB2PeriphResetCmd>
  /* Release SAI1 from reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_SAI1, DISABLE);  
 801174a:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 801174e:	2100      	movs	r1, #0
 8011750:	f7fe fb78 	bl	800fe44 <RCC_APB2PeriphResetCmd>
}
 8011754:	3708      	adds	r7, #8
 8011756:	46bd      	mov	sp, r7
 8011758:	bd80      	pop	{r7, pc}
 801175a:	bf00      	nop

0801175c <SAI_Init>:
  * @param  SAI_InitStruct: pointer to a SAI_InitTypeDef structure that
  *         contains the configuration information for the specified SAI Block peripheral.             
  * @retval None
  */
void SAI_Init(SAI_Block_TypeDef* SAI_Block_x, SAI_InitTypeDef* SAI_InitStruct)
{
 801175c:	b480      	push	{r7}
 801175e:	b085      	sub	sp, #20
 8011760:	af00      	add	r7, sp, #0
 8011762:	6078      	str	r0, [r7, #4]
 8011764:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8011766:	2300      	movs	r3, #0
 8011768:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(SAI_InitStruct->SAI_MasterDivider));
  assert_param(IS_SAI_BLOCK_FIFO_THRESHOLD(SAI_InitStruct->SAI_FIFOThreshold));

  /* SAI Block_x CR1 Configuration */
  /* Get the SAI Block_x CR1 value */
  tmpreg = SAI_Block_x->CR1;
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	681b      	ldr	r3, [r3, #0]
 801176e:	60fb      	str	r3, [r7, #12]
  /* Clear MODE, PRTCFG, DS, LSBFIRST, CKSTR, SYNCEN, OUTDRIV, NODIV, and MCKDIV bits */
  tmpreg &= CR1_CLEAR_MASK;
 8011770:	68fa      	ldr	r2, [r7, #12]
 8011772:	4b1c      	ldr	r3, [pc, #112]	; (80117e4 <SAI_Init+0x88>)
 8011774:	4013      	ands	r3, r2
 8011776:	60fb      	str	r3, [r7, #12]
  /* Set CKSTR bit according to SAI_ClockStrobing value   */
  /* Set SYNCEN bit according to SAI_Synchro value        */
  /* Set OUTDRIV bit according to SAI_OUTDRIV value       */
  /* Set NODIV bit according to SAI_NoDivider value       */
  /* Set MCKDIV bits according to SAI_MasterDivider value */
  tmpreg |= (uint32_t)(SAI_InitStruct->SAI_AudioMode     | SAI_InitStruct->SAI_Protocol  |
 8011778:	683b      	ldr	r3, [r7, #0]
 801177a:	681a      	ldr	r2, [r3, #0]
 801177c:	683b      	ldr	r3, [r7, #0]
 801177e:	685b      	ldr	r3, [r3, #4]
 8011780:	431a      	orrs	r2, r3
                       SAI_InitStruct->SAI_DataSize      | SAI_InitStruct->SAI_FirstBit  |  
 8011782:	683b      	ldr	r3, [r7, #0]
 8011784:	689b      	ldr	r3, [r3, #8]
  /* Set CKSTR bit according to SAI_ClockStrobing value   */
  /* Set SYNCEN bit according to SAI_Synchro value        */
  /* Set OUTDRIV bit according to SAI_OUTDRIV value       */
  /* Set NODIV bit according to SAI_NoDivider value       */
  /* Set MCKDIV bits according to SAI_MasterDivider value */
  tmpreg |= (uint32_t)(SAI_InitStruct->SAI_AudioMode     | SAI_InitStruct->SAI_Protocol  |
 8011786:	431a      	orrs	r2, r3
                       SAI_InitStruct->SAI_DataSize      | SAI_InitStruct->SAI_FirstBit  |  
 8011788:	683b      	ldr	r3, [r7, #0]
 801178a:	68db      	ldr	r3, [r3, #12]
 801178c:	431a      	orrs	r2, r3
                       SAI_InitStruct->SAI_ClockStrobing | SAI_InitStruct->SAI_Synchro   |  
 801178e:	683b      	ldr	r3, [r7, #0]
 8011790:	691b      	ldr	r3, [r3, #16]
  /* Set SYNCEN bit according to SAI_Synchro value        */
  /* Set OUTDRIV bit according to SAI_OUTDRIV value       */
  /* Set NODIV bit according to SAI_NoDivider value       */
  /* Set MCKDIV bits according to SAI_MasterDivider value */
  tmpreg |= (uint32_t)(SAI_InitStruct->SAI_AudioMode     | SAI_InitStruct->SAI_Protocol  |
                       SAI_InitStruct->SAI_DataSize      | SAI_InitStruct->SAI_FirstBit  |  
 8011792:	431a      	orrs	r2, r3
                       SAI_InitStruct->SAI_ClockStrobing | SAI_InitStruct->SAI_Synchro   |  
 8011794:	683b      	ldr	r3, [r7, #0]
 8011796:	695b      	ldr	r3, [r3, #20]
 8011798:	431a      	orrs	r2, r3
                       SAI_InitStruct->SAI_OUTDRIV       | SAI_InitStruct->SAI_NoDivider | 
 801179a:	683b      	ldr	r3, [r7, #0]
 801179c:	699b      	ldr	r3, [r3, #24]
  /* Set OUTDRIV bit according to SAI_OUTDRIV value       */
  /* Set NODIV bit according to SAI_NoDivider value       */
  /* Set MCKDIV bits according to SAI_MasterDivider value */
  tmpreg |= (uint32_t)(SAI_InitStruct->SAI_AudioMode     | SAI_InitStruct->SAI_Protocol  |
                       SAI_InitStruct->SAI_DataSize      | SAI_InitStruct->SAI_FirstBit  |  
                       SAI_InitStruct->SAI_ClockStrobing | SAI_InitStruct->SAI_Synchro   |  
 801179e:	431a      	orrs	r2, r3
                       SAI_InitStruct->SAI_OUTDRIV       | SAI_InitStruct->SAI_NoDivider | 
 80117a0:	683b      	ldr	r3, [r7, #0]
 80117a2:	69db      	ldr	r3, [r3, #28]
 80117a4:	431a      	orrs	r2, r3
                       (uint32_t)((SAI_InitStruct->SAI_MasterDivider) << 20));
 80117a6:	683b      	ldr	r3, [r7, #0]
 80117a8:	6a1b      	ldr	r3, [r3, #32]
 80117aa:	051b      	lsls	r3, r3, #20
  /* Set CKSTR bit according to SAI_ClockStrobing value   */
  /* Set SYNCEN bit according to SAI_Synchro value        */
  /* Set OUTDRIV bit according to SAI_OUTDRIV value       */
  /* Set NODIV bit according to SAI_NoDivider value       */
  /* Set MCKDIV bits according to SAI_MasterDivider value */
  tmpreg |= (uint32_t)(SAI_InitStruct->SAI_AudioMode     | SAI_InitStruct->SAI_Protocol  |
 80117ac:	4313      	orrs	r3, r2
 80117ae:	68fa      	ldr	r2, [r7, #12]
 80117b0:	4313      	orrs	r3, r2
 80117b2:	60fb      	str	r3, [r7, #12]
                       SAI_InitStruct->SAI_DataSize      | SAI_InitStruct->SAI_FirstBit  |  
                       SAI_InitStruct->SAI_ClockStrobing | SAI_InitStruct->SAI_Synchro   |  
                       SAI_InitStruct->SAI_OUTDRIV       | SAI_InitStruct->SAI_NoDivider | 
                       (uint32_t)((SAI_InitStruct->SAI_MasterDivider) << 20));
  /* Write to SAI_Block_x CR1 */
  SAI_Block_x->CR1 = tmpreg;
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	68fa      	ldr	r2, [r7, #12]
 80117b8:	601a      	str	r2, [r3, #0]
  
  /* SAI Block_x CR2 Configuration */
  /* Get the SAIBlock_x CR2 value */
  tmpreg = SAI_Block_x->CR2;
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	685b      	ldr	r3, [r3, #4]
 80117be:	60fb      	str	r3, [r7, #12]
  /* Clear FTH bits */
  tmpreg &= ~(SAI_xCR2_FTH);
 80117c0:	68fb      	ldr	r3, [r7, #12]
 80117c2:	f023 0303 	bic.w	r3, r3, #3
 80117c6:	60fb      	str	r3, [r7, #12]
  /* Configure the FIFO Level */
  /* Set FTH bits according to SAI_FIFOThreshold value */ 
  tmpreg |= (uint32_t)(SAI_InitStruct->SAI_FIFOThreshold);
 80117c8:	683b      	ldr	r3, [r7, #0]
 80117ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80117cc:	68fa      	ldr	r2, [r7, #12]
 80117ce:	4313      	orrs	r3, r2
 80117d0:	60fb      	str	r3, [r7, #12]
  /* Write to SAI_Block_x CR2 */
  SAI_Block_x->CR2 = tmpreg;
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	68fa      	ldr	r2, [r7, #12]
 80117d6:	605a      	str	r2, [r3, #4]
}
 80117d8:	3714      	adds	r7, #20
 80117da:	46bd      	mov	sp, r7
 80117dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117e0:	4770      	bx	lr
 80117e2:	bf00      	nop
 80117e4:	ff07c010 	.word	0xff07c010

080117e8 <SAI_FrameInit>:
  * @param  SAI_FrameInitStruct: pointer to an SAI_FrameInitTypeDef structure that
  *         contains the configuration of audio frame for a specified SAI Block                       
  * @retval None
  */
void SAI_FrameInit(SAI_Block_TypeDef* SAI_Block_x, SAI_FrameInitTypeDef* SAI_FrameInitStruct)
{
 80117e8:	b480      	push	{r7}
 80117ea:	b085      	sub	sp, #20
 80117ec:	af00      	add	r7, sp, #0
 80117ee:	6078      	str	r0, [r7, #4]
 80117f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80117f2:	2300      	movs	r3, #0
 80117f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SAI_BLOCK_FS_POLARITY(SAI_FrameInitStruct->SAI_FSPolarity));
  assert_param(IS_SAI_BLOCK_FS_OFFSET(SAI_FrameInitStruct->SAI_FSOffset));

  /* SAI Block_x FRCR Configuration */
  /* Get the SAI Block_x FRCR value */
  tmpreg = SAI_Block_x->FRCR;
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	689b      	ldr	r3, [r3, #8]
 80117fa:	60fb      	str	r3, [r7, #12]
  /* Clear FRL, FSALL, FSDEF, FSPOL, FSOFF bits */
  tmpreg &= FRCR_CLEAR_MASK;
 80117fc:	68fa      	ldr	r2, [r7, #12]
 80117fe:	4b0f      	ldr	r3, [pc, #60]	; (801183c <SAI_FrameInit+0x54>)
 8011800:	4013      	ands	r3, r2
 8011802:	60fb      	str	r3, [r7, #12]
  /* Set FRL bits according to SAI_FrameLength value         */
  /* Set FSALL bits according to SAI_ActiveFrameLength value */
  /* Set FSDEF bit according to SAI_FSDefinition value       */
  /* Set FSPOL bit according to SAI_FSPolarity value         */
  /* Set FSOFF bit according to SAI_FSOffset value           */
  tmpreg |= (uint32_t)((uint32_t)(SAI_FrameInitStruct->SAI_FrameLength - 1)  | 
 8011804:	683b      	ldr	r3, [r7, #0]
 8011806:	681b      	ldr	r3, [r3, #0]
 8011808:	1e5a      	subs	r2, r3, #1
                       SAI_FrameInitStruct->SAI_FSOffset     | 
 801180a:	683b      	ldr	r3, [r7, #0]
 801180c:	691b      	ldr	r3, [r3, #16]
  /* Set FRL bits according to SAI_FrameLength value         */
  /* Set FSALL bits according to SAI_ActiveFrameLength value */
  /* Set FSDEF bit according to SAI_FSDefinition value       */
  /* Set FSPOL bit according to SAI_FSPolarity value         */
  /* Set FSOFF bit according to SAI_FSOffset value           */
  tmpreg |= (uint32_t)((uint32_t)(SAI_FrameInitStruct->SAI_FrameLength - 1)  | 
 801180e:	431a      	orrs	r2, r3
                       SAI_FrameInitStruct->SAI_FSOffset     | 
                       SAI_FrameInitStruct->SAI_FSDefinition |    
 8011810:	683b      	ldr	r3, [r7, #0]
 8011812:	689b      	ldr	r3, [r3, #8]
  /* Set FSALL bits according to SAI_ActiveFrameLength value */
  /* Set FSDEF bit according to SAI_FSDefinition value       */
  /* Set FSPOL bit according to SAI_FSPolarity value         */
  /* Set FSOFF bit according to SAI_FSOffset value           */
  tmpreg |= (uint32_t)((uint32_t)(SAI_FrameInitStruct->SAI_FrameLength - 1)  | 
                       SAI_FrameInitStruct->SAI_FSOffset     | 
 8011814:	431a      	orrs	r2, r3
                       SAI_FrameInitStruct->SAI_FSDefinition |    
                       SAI_FrameInitStruct->SAI_FSPolarity   |                        
 8011816:	683b      	ldr	r3, [r7, #0]
 8011818:	68db      	ldr	r3, [r3, #12]
  /* Set FSDEF bit according to SAI_FSDefinition value       */
  /* Set FSPOL bit according to SAI_FSPolarity value         */
  /* Set FSOFF bit according to SAI_FSOffset value           */
  tmpreg |= (uint32_t)((uint32_t)(SAI_FrameInitStruct->SAI_FrameLength - 1)  | 
                       SAI_FrameInitStruct->SAI_FSOffset     | 
                       SAI_FrameInitStruct->SAI_FSDefinition |    
 801181a:	431a      	orrs	r2, r3
                       SAI_FrameInitStruct->SAI_FSPolarity   |                        
                       (uint32_t)((SAI_FrameInitStruct->SAI_ActiveFrameLength - 1) << 8));
 801181c:	683b      	ldr	r3, [r7, #0]
 801181e:	685b      	ldr	r3, [r3, #4]
 8011820:	3b01      	subs	r3, #1
 8011822:	021b      	lsls	r3, r3, #8
  /* Set FRL bits according to SAI_FrameLength value         */
  /* Set FSALL bits according to SAI_ActiveFrameLength value */
  /* Set FSDEF bit according to SAI_FSDefinition value       */
  /* Set FSPOL bit according to SAI_FSPolarity value         */
  /* Set FSOFF bit according to SAI_FSOffset value           */
  tmpreg |= (uint32_t)((uint32_t)(SAI_FrameInitStruct->SAI_FrameLength - 1)  | 
 8011824:	4313      	orrs	r3, r2
 8011826:	68fa      	ldr	r2, [r7, #12]
 8011828:	4313      	orrs	r3, r2
 801182a:	60fb      	str	r3, [r7, #12]
                       SAI_FrameInitStruct->SAI_FSDefinition |    
                       SAI_FrameInitStruct->SAI_FSPolarity   |                        
                       (uint32_t)((SAI_FrameInitStruct->SAI_ActiveFrameLength - 1) << 8));
                       
  /* Write to SAI_Block_x FRCR */
  SAI_Block_x->FRCR = tmpreg;
 801182c:	687b      	ldr	r3, [r7, #4]
 801182e:	68fa      	ldr	r2, [r7, #12]
 8011830:	609a      	str	r2, [r3, #8]
}
 8011832:	3714      	adds	r7, #20
 8011834:	46bd      	mov	sp, r7
 8011836:	f85d 7b04 	ldr.w	r7, [sp], #4
 801183a:	4770      	bx	lr
 801183c:	fff88000 	.word	0xfff88000

08011840 <SAI_SlotInit>:
  * @param  SAI_SlotInitStruct: pointer to an SAI_SlotInitTypeDef structure that
  *         contains the configuration of audio slot for a specified SAI Block                      
  * @retval None
  */
void SAI_SlotInit(SAI_Block_TypeDef* SAI_Block_x, SAI_SlotInitTypeDef* SAI_SlotInitStruct)
{
 8011840:	b480      	push	{r7}
 8011842:	b085      	sub	sp, #20
 8011844:	af00      	add	r7, sp, #0
 8011846:	6078      	str	r0, [r7, #4]
 8011848:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801184a:	2300      	movs	r3, #0
 801184c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(SAI_SlotInitStruct->SAI_SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(SAI_SlotInitStruct->SAI_SlotActive));

  /* SAI Block_x SLOTR Configuration */
  /* Get the SAI Block_x SLOTR value */
  tmpreg = SAI_Block_x->SLOTR;
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	68db      	ldr	r3, [r3, #12]
 8011852:	60fb      	str	r3, [r7, #12]
  /* Clear FBOFF, SLOTSZ, NBSLOT, SLOTEN bits */
  tmpreg &= SLOTR_CLEAR_MASK;
 8011854:	68fa      	ldr	r2, [r7, #12]
 8011856:	f24f 0320 	movw	r3, #61472	; 0xf020
 801185a:	4013      	ands	r3, r2
 801185c:	60fb      	str	r3, [r7, #12]
     audio frame and slots activated in audio frame */
  /* Set FBOFF bits according to SAI_FirstBitOffset value  */
  /* Set SLOTSZ bits according to SAI_SlotSize value       */
  /* Set NBSLOT bits according to SAI_SlotNumber value     */
  /* Set SLOTEN bits according to SAI_SlotActive value     */
  tmpreg |= (uint32_t)(SAI_SlotInitStruct->SAI_FirstBitOffset | 
 801185e:	683b      	ldr	r3, [r7, #0]
 8011860:	681a      	ldr	r2, [r3, #0]
                       SAI_SlotInitStruct->SAI_SlotSize       | 
 8011862:	683b      	ldr	r3, [r7, #0]
 8011864:	685b      	ldr	r3, [r3, #4]
     audio frame and slots activated in audio frame */
  /* Set FBOFF bits according to SAI_FirstBitOffset value  */
  /* Set SLOTSZ bits according to SAI_SlotSize value       */
  /* Set NBSLOT bits according to SAI_SlotNumber value     */
  /* Set SLOTEN bits according to SAI_SlotActive value     */
  tmpreg |= (uint32_t)(SAI_SlotInitStruct->SAI_FirstBitOffset | 
 8011866:	431a      	orrs	r2, r3
                       SAI_SlotInitStruct->SAI_SlotSize       | 
                       SAI_SlotInitStruct->SAI_SlotActive     |    
 8011868:	683b      	ldr	r3, [r7, #0]
 801186a:	68db      	ldr	r3, [r3, #12]
  /* Set FBOFF bits according to SAI_FirstBitOffset value  */
  /* Set SLOTSZ bits according to SAI_SlotSize value       */
  /* Set NBSLOT bits according to SAI_SlotNumber value     */
  /* Set SLOTEN bits according to SAI_SlotActive value     */
  tmpreg |= (uint32_t)(SAI_SlotInitStruct->SAI_FirstBitOffset | 
                       SAI_SlotInitStruct->SAI_SlotSize       | 
 801186c:	431a      	orrs	r2, r3
                       SAI_SlotInitStruct->SAI_SlotActive     |    
                       (uint32_t)((SAI_SlotInitStruct->SAI_SlotNumber - 1) <<  8));
 801186e:	683b      	ldr	r3, [r7, #0]
 8011870:	689b      	ldr	r3, [r3, #8]
 8011872:	3b01      	subs	r3, #1
 8011874:	021b      	lsls	r3, r3, #8
     audio frame and slots activated in audio frame */
  /* Set FBOFF bits according to SAI_FirstBitOffset value  */
  /* Set SLOTSZ bits according to SAI_SlotSize value       */
  /* Set NBSLOT bits according to SAI_SlotNumber value     */
  /* Set SLOTEN bits according to SAI_SlotActive value     */
  tmpreg |= (uint32_t)(SAI_SlotInitStruct->SAI_FirstBitOffset | 
 8011876:	4313      	orrs	r3, r2
 8011878:	68fa      	ldr	r2, [r7, #12]
 801187a:	4313      	orrs	r3, r2
 801187c:	60fb      	str	r3, [r7, #12]
                       SAI_SlotInitStruct->SAI_SlotSize       | 
                       SAI_SlotInitStruct->SAI_SlotActive     |    
                       (uint32_t)((SAI_SlotInitStruct->SAI_SlotNumber - 1) <<  8));
                       
  /* Write to SAI_Block_x SLOTR */
  SAI_Block_x->SLOTR = tmpreg;
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	68fa      	ldr	r2, [r7, #12]
 8011882:	60da      	str	r2, [r3, #12]
}
 8011884:	3714      	adds	r7, #20
 8011886:	46bd      	mov	sp, r7
 8011888:	f85d 7b04 	ldr.w	r7, [sp], #4
 801188c:	4770      	bx	lr
 801188e:	bf00      	nop

08011890 <SAI_StructInit>:
  * @param  SAI_InitStruct: pointer to a SAI_InitTypeDef structure which will 
  *         be initialized.  
  * @retval None
  */
void SAI_StructInit(SAI_InitTypeDef* SAI_InitStruct)
{
 8011890:	b480      	push	{r7}
 8011892:	b083      	sub	sp, #12
 8011894:	af00      	add	r7, sp, #0
 8011896:	6078      	str	r0, [r7, #4]
  /* Reset SAI init structure parameters values */
  /* Initialize the SAI_AudioMode member */
  SAI_InitStruct->SAI_AudioMode = SAI_Mode_MasterTx;
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	2200      	movs	r2, #0
 801189c:	601a      	str	r2, [r3, #0]
  /* Initialize the SAI_Protocol member */
  SAI_InitStruct->SAI_Protocol = SAI_Free_Protocol;
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	2200      	movs	r2, #0
 80118a2:	605a      	str	r2, [r3, #4]
  /* Initialize the SAI_DataSize member */
  SAI_InitStruct->SAI_DataSize = SAI_DataSize_8b;
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	2240      	movs	r2, #64	; 0x40
 80118a8:	609a      	str	r2, [r3, #8]
  /* Initialize the SAI_FirstBit member */
  SAI_InitStruct->SAI_FirstBit = SAI_FirstBit_MSB;
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	2200      	movs	r2, #0
 80118ae:	60da      	str	r2, [r3, #12]
  /* Initialize the SAI_ClockStrobing member */
  SAI_InitStruct->SAI_ClockStrobing = SAI_ClockStrobing_FallingEdge;
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	2200      	movs	r2, #0
 80118b4:	611a      	str	r2, [r3, #16]
  /* Initialize the SAI_Synchro member */
  SAI_InitStruct->SAI_Synchro = SAI_Asynchronous;
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	2200      	movs	r2, #0
 80118ba:	615a      	str	r2, [r3, #20]
  /* Initialize the SAI_OUTDRIV member */
  SAI_InitStruct->SAI_OUTDRIV = SAI_OutputDrive_Disabled;
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	2200      	movs	r2, #0
 80118c0:	619a      	str	r2, [r3, #24]
  /* Initialize the SAI_NoDivider member */
  SAI_InitStruct->SAI_NoDivider = SAI_MasterDivider_Enabled;
 80118c2:	687b      	ldr	r3, [r7, #4]
 80118c4:	2200      	movs	r2, #0
 80118c6:	61da      	str	r2, [r3, #28]
  /* Initialize the SAI_MasterDivider member */
  SAI_InitStruct->SAI_MasterDivider = 0;
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	2200      	movs	r2, #0
 80118cc:	621a      	str	r2, [r3, #32]
  /* Initialize the SAI_FIFOThreshold member */
  SAI_InitStruct->SAI_FIFOThreshold = SAI_Threshold_FIFOEmpty;
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	2200      	movs	r2, #0
 80118d2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80118d4:	370c      	adds	r7, #12
 80118d6:	46bd      	mov	sp, r7
 80118d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118dc:	4770      	bx	lr
 80118de:	bf00      	nop

080118e0 <SAI_FrameStructInit>:
  * @param  SAI_FrameInitStruct: pointer to a SAI_FrameInitTypeDef structure 
  *         which will be initialized.                     
  * @retval None
  */
void SAI_FrameStructInit(SAI_FrameInitTypeDef* SAI_FrameInitStruct)
{
 80118e0:	b480      	push	{r7}
 80118e2:	b083      	sub	sp, #12
 80118e4:	af00      	add	r7, sp, #0
 80118e6:	6078      	str	r0, [r7, #4]
  /* Reset SAI Frame init structure parameters values */
  /* Initialize the SAI_FrameLength member */
  SAI_FrameInitStruct->SAI_FrameLength = 8;
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	2208      	movs	r2, #8
 80118ec:	601a      	str	r2, [r3, #0]
  /* Initialize the SAI_ActiveFrameLength member */
  SAI_FrameInitStruct->SAI_ActiveFrameLength = 1;
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	2201      	movs	r2, #1
 80118f2:	605a      	str	r2, [r3, #4]
  /* Initialize the SAI_FSDefinition member */
  SAI_FrameInitStruct->SAI_FSDefinition = SAI_FS_StartFrame;
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	2200      	movs	r2, #0
 80118f8:	609a      	str	r2, [r3, #8]
  /* Initialize the SAI_FSPolarity member */
  SAI_FrameInitStruct->SAI_FSPolarity = SAI_FS_ActiveLow;
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	2200      	movs	r2, #0
 80118fe:	60da      	str	r2, [r3, #12]
  /* Initialize the SAI_FSOffset member */
  SAI_FrameInitStruct->SAI_FSOffset = SAI_FS_FirstBit;
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	2200      	movs	r2, #0
 8011904:	611a      	str	r2, [r3, #16]
}
 8011906:	370c      	adds	r7, #12
 8011908:	46bd      	mov	sp, r7
 801190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801190e:	4770      	bx	lr

08011910 <SAI_SlotStructInit>:
  * @param  SAI_SlotInitStruct: pointer to a SAI_SlotInitTypeDef structure 
  *         which will be initialized.                     
  * @retval None
  */
void SAI_SlotStructInit(SAI_SlotInitTypeDef* SAI_SlotInitStruct)
{
 8011910:	b480      	push	{r7}
 8011912:	b083      	sub	sp, #12
 8011914:	af00      	add	r7, sp, #0
 8011916:	6078      	str	r0, [r7, #4]
  /* Reset SAI Slot init structure parameters values */
  /* Initialize the SAI_FirstBitOffset member */
  SAI_SlotInitStruct->SAI_FirstBitOffset = 0;
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	2200      	movs	r2, #0
 801191c:	601a      	str	r2, [r3, #0]
  /* Initialize the SAI_SlotSize member */
  SAI_SlotInitStruct->SAI_SlotSize = SAI_SlotSize_DataSize;
 801191e:	687b      	ldr	r3, [r7, #4]
 8011920:	2200      	movs	r2, #0
 8011922:	605a      	str	r2, [r3, #4]
  /* Initialize the SAI_SlotNumber member */
  SAI_SlotInitStruct->SAI_SlotNumber = 1;
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	2201      	movs	r2, #1
 8011928:	609a      	str	r2, [r3, #8]
  /* Initialize the SAI_SlotActive member */
  SAI_SlotInitStruct->SAI_SlotActive = SAI_Slot_NotActive;
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	2200      	movs	r2, #0
 801192e:	60da      	str	r2, [r3, #12]

}
 8011930:	370c      	adds	r7, #12
 8011932:	46bd      	mov	sp, r7
 8011934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011938:	4770      	bx	lr
 801193a:	bf00      	nop

0801193c <SAI_Cmd>:
  * @param  NewState: new state of the SAI_Block_x peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SAI_Cmd(SAI_Block_TypeDef* SAI_Block_x, FunctionalState NewState)
{
 801193c:	b480      	push	{r7}
 801193e:	b083      	sub	sp, #12
 8011940:	af00      	add	r7, sp, #0
 8011942:	6078      	str	r0, [r7, #4]
 8011944:	460b      	mov	r3, r1
 8011946:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8011948:	78fb      	ldrb	r3, [r7, #3]
 801194a:	2b00      	cmp	r3, #0
 801194c:	d006      	beq.n	801195c <SAI_Cmd+0x20>
  {
    /* Enable the selected SAI peripheral */
    SAI_Block_x->CR1 |= SAI_xCR1_SAIEN;
 801194e:	687b      	ldr	r3, [r7, #4]
 8011950:	681b      	ldr	r3, [r3, #0]
 8011952:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	601a      	str	r2, [r3, #0]
 801195a:	e005      	b.n	8011968 <SAI_Cmd+0x2c>
  }
  else
  {
    /* Disable the selected SAI peripheral */
    SAI_Block_x->CR1 &= ~(SAI_xCR1_SAIEN);
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	681b      	ldr	r3, [r3, #0]
 8011960:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	601a      	str	r2, [r3, #0]
  }
}
 8011968:	370c      	adds	r7, #12
 801196a:	46bd      	mov	sp, r7
 801196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011970:	4770      	bx	lr
 8011972:	bf00      	nop

08011974 <SAI_MonoModeConfig>:
  *            @arg SAI_MonoMode : Set mono audio mode
  *            @arg SAI_StreoMode : Set streo audio mode                       
  * @retval None
  */
void SAI_MonoModeConfig(SAI_Block_TypeDef* SAI_Block_x, uint32_t SAI_Mono_StreoMode)
{
 8011974:	b480      	push	{r7}
 8011976:	b083      	sub	sp, #12
 8011978:	af00      	add	r7, sp, #0
 801197a:	6078      	str	r0, [r7, #4]
 801197c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
  assert_param(IS_SAI_BLOCK_MONO_STREO_MODE(SAI_MonoMode));
  /* Clear MONO bit */
  SAI_Block_x->CR1 &= ~(SAI_xCR1_MONO);
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	681b      	ldr	r3, [r3, #0]
 8011982:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	601a      	str	r2, [r3, #0]
  /* Set new Mono Mode value */
  SAI_Block_x->CR1 |= SAI_MonoMode;
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	681b      	ldr	r3, [r3, #0]
 801198e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	601a      	str	r2, [r3, #0]
}
 8011996:	370c      	adds	r7, #12
 8011998:	46bd      	mov	sp, r7
 801199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801199e:	4770      	bx	lr

080119a0 <SAI_TRIStateConfig>:
  *            @arg SAI_Output_NotReleased : SD output line is still drived by the SAI.
  *            @arg SAI_Output_Released : SD output line is released (HI-Z)                       
  * @retval None
  */
void SAI_TRIStateConfig(SAI_Block_TypeDef* SAI_Block_x, uint32_t SAI_TRIState)
{
 80119a0:	b480      	push	{r7}
 80119a2:	b083      	sub	sp, #12
 80119a4:	af00      	add	r7, sp, #0
 80119a6:	6078      	str	r0, [r7, #4]
 80119a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
  assert_param(IS_SAI_BLOCK_TRISTATE_MANAGEMENT(SAI_TRIState));
  /* Clear MONO bit */
  SAI_Block_x->CR1 &= ~(SAI_xCR1_MONO);
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	681b      	ldr	r3, [r3, #0]
 80119ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80119b2:	687b      	ldr	r3, [r7, #4]
 80119b4:	601a      	str	r2, [r3, #0]
  /* Set new Mono Mode value */
  SAI_Block_x->CR1 |= SAI_MonoMode;  
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	681b      	ldr	r3, [r3, #0]
 80119ba:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	601a      	str	r2, [r3, #0]
  
}
 80119c2:	370c      	adds	r7, #12
 80119c4:	46bd      	mov	sp, r7
 80119c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119ca:	4770      	bx	lr

080119cc <SAI_CompandingModeConfig>:
  *            @arg SAI_ULaw_2CPL_Companding : Set U law (algorithm 2's complement representation)
  *            @arg SAI_ALaw_2CPL_Companding : Set A law (algorithm 2's complement repesentation)  
  * @retval None
  */
void SAI_CompandingModeConfig(SAI_Block_TypeDef* SAI_Block_x, uint32_t SAI_CompandingMode)
{
 80119cc:	b480      	push	{r7}
 80119ce:	b083      	sub	sp, #12
 80119d0:	af00      	add	r7, sp, #0
 80119d2:	6078      	str	r0, [r7, #4]
 80119d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
  assert_param(IS_SAI_BLOCK_COMPANDING_MODE(SAI_CompandingMode));
  /* Clear Companding Mode bits */
  SAI_Block_x->CR2 &= ~(SAI_xCR2_COMP);
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	685b      	ldr	r3, [r3, #4]
 80119da:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	605a      	str	r2, [r3, #4]
  /* Set new Companding Mode value */
  SAI_Block_x->CR2 |= SAI_CompandingMode;
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	685a      	ldr	r2, [r3, #4]
 80119e6:	683b      	ldr	r3, [r7, #0]
 80119e8:	431a      	orrs	r2, r3
 80119ea:	687b      	ldr	r3, [r7, #4]
 80119ec:	605a      	str	r2, [r3, #4]
}
 80119ee:	370c      	adds	r7, #12
 80119f0:	46bd      	mov	sp, r7
 80119f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119f6:	4770      	bx	lr

080119f8 <SAI_MuteModeCmd>:
  * @param  NewState: new state of the SAIx block. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SAI_MuteModeCmd(SAI_Block_TypeDef* SAI_Block_x, FunctionalState NewState)
{
 80119f8:	b480      	push	{r7}
 80119fa:	b083      	sub	sp, #12
 80119fc:	af00      	add	r7, sp, #0
 80119fe:	6078      	str	r0, [r7, #4]
 8011a00:	460b      	mov	r3, r1
 8011a02:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8011a04:	78fb      	ldrb	r3, [r7, #3]
 8011a06:	2b00      	cmp	r3, #0
 8011a08:	d006      	beq.n	8011a18 <SAI_MuteModeCmd+0x20>
  {
    /* Enable the selected SAI block mute mode */
    SAI_Block_x->CR2 |= SAI_xCR2_MUTE;
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	685b      	ldr	r3, [r3, #4]
 8011a0e:	f043 0220 	orr.w	r2, r3, #32
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	605a      	str	r2, [r3, #4]
 8011a16:	e005      	b.n	8011a24 <SAI_MuteModeCmd+0x2c>
  }
  else
  {
    /* Disable the selected SAI SS output */
    SAI_Block_x->CR2 &= ~(SAI_xCR2_MUTE);
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	685b      	ldr	r3, [r3, #4]
 8011a1c:	f023 0220 	bic.w	r2, r3, #32
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	605a      	str	r2, [r3, #4]
  }
}
 8011a24:	370c      	adds	r7, #12
 8011a26:	46bd      	mov	sp, r7
 8011a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a2c:	4770      	bx	lr
 8011a2e:	bf00      	nop

08011a30 <SAI_MuteValueConfig>:
  *            @arg SAI_ZeroValue : bit value 0 is sent during Mute Mode
  *            @arg SAI_LastSentValue : Last value is sent during Mute Mode  
  * @retval None
  */
void SAI_MuteValueConfig(SAI_Block_TypeDef* SAI_Block_x, uint32_t SAI_MuteValue)
{
 8011a30:	b480      	push	{r7}
 8011a32:	b083      	sub	sp, #12
 8011a34:	af00      	add	r7, sp, #0
 8011a36:	6078      	str	r0, [r7, #4]
 8011a38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
  assert_param(IS_SAI_BLOCK_MUTE_VALUE(SAI_MuteValue));
  
  /* Clear Mute value bits */
  SAI_Block_x->CR2 &= ~(SAI_xCR2_MUTEVAL);
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	685b      	ldr	r3, [r3, #4]
 8011a3e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	605a      	str	r2, [r3, #4]
  /* Set new Mute value */
  SAI_Block_x->CR2 |= SAI_MuteValue;
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	685a      	ldr	r2, [r3, #4]
 8011a4a:	683b      	ldr	r3, [r7, #0]
 8011a4c:	431a      	orrs	r2, r3
 8011a4e:	687b      	ldr	r3, [r7, #4]
 8011a50:	605a      	str	r2, [r3, #4]
}
 8011a52:	370c      	adds	r7, #12
 8011a54:	46bd      	mov	sp, r7
 8011a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a5a:	4770      	bx	lr

08011a5c <SAI_MuteFrameCounterConfig>:
  *         This parameter can be a number between 0 and 63.  
 
  * @retval None
  */
void SAI_MuteFrameCounterConfig(SAI_Block_TypeDef* SAI_Block_x, uint32_t SAI_MuteCounter)
{
 8011a5c:	b480      	push	{r7}
 8011a5e:	b083      	sub	sp, #12
 8011a60:	af00      	add	r7, sp, #0
 8011a62:	6078      	str	r0, [r7, #4]
 8011a64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
  assert_param(IS_SAI_BLOCK_MUTE_COUNTER(SAI_MuteCounter));
  
  /* Clear Mute value bits */
  SAI_Block_x->CR2 &= ~(SAI_xCR2_MUTECNT);
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	685b      	ldr	r3, [r3, #4]
 8011a6a:	f423 52fc 	bic.w	r2, r3, #8064	; 0x1f80
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	605a      	str	r2, [r3, #4]
  /* Set new Mute value */
  SAI_Block_x->CR2 |= (SAI_MuteCounter << 7);
 8011a72:	687b      	ldr	r3, [r7, #4]
 8011a74:	685a      	ldr	r2, [r3, #4]
 8011a76:	683b      	ldr	r3, [r7, #0]
 8011a78:	01db      	lsls	r3, r3, #7
 8011a7a:	431a      	orrs	r2, r3
 8011a7c:	687b      	ldr	r3, [r7, #4]
 8011a7e:	605a      	str	r2, [r3, #4]
}
 8011a80:	370c      	adds	r7, #12
 8011a82:	46bd      	mov	sp, r7
 8011a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a88:	4770      	bx	lr
 8011a8a:	bf00      	nop

08011a8c <SAI_FlushFIFO>:
  * @param  NewState: new state of the selected SAI TI communication mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SAI_FlushFIFO(SAI_Block_TypeDef* SAI_Block_x)
{
 8011a8c:	b480      	push	{r7}
 8011a8e:	b083      	sub	sp, #12
 8011a90:	af00      	add	r7, sp, #0
 8011a92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));

  /* FIFO flush */
  SAI_Block_x->CR2 |= SAI_xCR2_FFLUSH;
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	685b      	ldr	r3, [r3, #4]
 8011a98:	f043 0208 	orr.w	r2, r3, #8
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	605a      	str	r2, [r3, #4]
}
 8011aa0:	370c      	adds	r7, #12
 8011aa2:	46bd      	mov	sp, r7
 8011aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aa8:	4770      	bx	lr
 8011aaa:	bf00      	nop

08011aac <SAI_ReceiveData>:
  * @param  SAI_Block_x: where x can be A or B to select the SAI Block peripheral. 
  *         
  * @retval The value of the received data.
  */
uint32_t SAI_ReceiveData(SAI_Block_TypeDef* SAI_Block_x)
{
 8011aac:	b480      	push	{r7}
 8011aae:	b083      	sub	sp, #12
 8011ab0:	af00      	add	r7, sp, #0
 8011ab2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
  
  /* Return the data in the DR register */
  return SAI_Block_x->DR;
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	69db      	ldr	r3, [r3, #28]
}
 8011ab8:	4618      	mov	r0, r3
 8011aba:	370c      	adds	r7, #12
 8011abc:	46bd      	mov	sp, r7
 8011abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ac2:	4770      	bx	lr

08011ac4 <SAI_SendData>:
  *        
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SAI_SendData(SAI_Block_TypeDef* SAI_Block_x, uint32_t Data)
{
 8011ac4:	b480      	push	{r7}
 8011ac6:	b083      	sub	sp, #12
 8011ac8:	af00      	add	r7, sp, #0
 8011aca:	6078      	str	r0, [r7, #4]
 8011acc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
  
  /* Write in the DR register the data to be sent */
  SAI_Block_x->DR = Data;
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	683a      	ldr	r2, [r7, #0]
 8011ad2:	61da      	str	r2, [r3, #28]
}
 8011ad4:	370c      	adds	r7, #12
 8011ad6:	46bd      	mov	sp, r7
 8011ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011adc:	4770      	bx	lr
 8011ade:	bf00      	nop

08011ae0 <SAI_DMACmd>:
  * @param  NewState: new state of the selected SAI block DMA transfer request.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SAI_DMACmd(SAI_Block_TypeDef* SAI_Block_x, FunctionalState NewState)
{
 8011ae0:	b480      	push	{r7}
 8011ae2:	b083      	sub	sp, #12
 8011ae4:	af00      	add	r7, sp, #0
 8011ae6:	6078      	str	r0, [r7, #4]
 8011ae8:	460b      	mov	r3, r1
 8011aea:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8011aec:	78fb      	ldrb	r3, [r7, #3]
 8011aee:	2b00      	cmp	r3, #0
 8011af0:	d006      	beq.n	8011b00 <SAI_DMACmd+0x20>
  {
    /* Enable the selected SAI block mute mode */
    SAI_Block_x->CR1 |= SAI_xCR1_DMAEN;
 8011af2:	687b      	ldr	r3, [r7, #4]
 8011af4:	681b      	ldr	r3, [r3, #0]
 8011af6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	601a      	str	r2, [r3, #0]
 8011afe:	e005      	b.n	8011b0c <SAI_DMACmd+0x2c>
  }
  else
  {
    /* Disable the selected SAI SS output */
    SAI_Block_x->CR1 &= ~(SAI_xCR1_DMAEN);
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	681b      	ldr	r3, [r3, #0]
 8011b04:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	601a      	str	r2, [r3, #0]
  }
}
 8011b0c:	370c      	adds	r7, #12
 8011b0e:	46bd      	mov	sp, r7
 8011b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b14:	4770      	bx	lr
 8011b16:	bf00      	nop

08011b18 <SAI_ITConfig>:
  * @param  NewState: new state of the specified SAI interrupt.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SAI_ITConfig(SAI_Block_TypeDef* SAI_Block_x, uint32_t SAI_IT, FunctionalState NewState)
{ 
 8011b18:	b480      	push	{r7}
 8011b1a:	b085      	sub	sp, #20
 8011b1c:	af00      	add	r7, sp, #0
 8011b1e:	60f8      	str	r0, [r7, #12]
 8011b20:	60b9      	str	r1, [r7, #8]
 8011b22:	4613      	mov	r3, r2
 8011b24:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SAI_BLOCK_CONFIG_IT(SAI_IT));

  if (NewState != DISABLE)
 8011b26:	79fb      	ldrb	r3, [r7, #7]
 8011b28:	2b00      	cmp	r3, #0
 8011b2a:	d006      	beq.n	8011b3a <SAI_ITConfig+0x22>
  {
    /* Enable the selected SAI Block interrupt */
    SAI_Block_x->IMR |= SAI_IT;
 8011b2c:	68fb      	ldr	r3, [r7, #12]
 8011b2e:	691a      	ldr	r2, [r3, #16]
 8011b30:	68bb      	ldr	r3, [r7, #8]
 8011b32:	431a      	orrs	r2, r3
 8011b34:	68fb      	ldr	r3, [r7, #12]
 8011b36:	611a      	str	r2, [r3, #16]
 8011b38:	e006      	b.n	8011b48 <SAI_ITConfig+0x30>
  }
  else
  {
    /* Disable the selected SAI Block interrupt */
    SAI_Block_x->IMR &= ~(SAI_IT);
 8011b3a:	68fb      	ldr	r3, [r7, #12]
 8011b3c:	691a      	ldr	r2, [r3, #16]
 8011b3e:	68bb      	ldr	r3, [r7, #8]
 8011b40:	43db      	mvns	r3, r3
 8011b42:	401a      	ands	r2, r3
 8011b44:	68fb      	ldr	r3, [r7, #12]
 8011b46:	611a      	str	r2, [r3, #16]
  }
}
 8011b48:	3714      	adds	r7, #20
 8011b4a:	46bd      	mov	sp, r7
 8011b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b50:	4770      	bx	lr
 8011b52:	bf00      	nop

08011b54 <SAI_GetFlagStatus>:
  *            @arg SAI_FLAG_AFSDET: anticipated frame synchronization detection flag.
  *            @arg SAI_FLAG_LFSDET: late frame synchronization detection flag.
  * @retval The new state of SAI_FLAG (SET or RESET).
  */
FlagStatus SAI_GetFlagStatus(SAI_Block_TypeDef* SAI_Block_x, uint32_t SAI_FLAG)
{
 8011b54:	b480      	push	{r7}
 8011b56:	b085      	sub	sp, #20
 8011b58:	af00      	add	r7, sp, #0
 8011b5a:	6078      	str	r0, [r7, #4]
 8011b5c:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8011b5e:	2300      	movs	r3, #0
 8011b60:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
  assert_param(IS_SAI_BLOCK_GET_FLAG(SAI_FLAG));
  
  /* Check the status of the specified SAI flag */
  if ((SAI_Block_x->SR & SAI_FLAG) != (uint32_t)RESET)
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	695a      	ldr	r2, [r3, #20]
 8011b66:	683b      	ldr	r3, [r7, #0]
 8011b68:	4013      	ands	r3, r2
 8011b6a:	2b00      	cmp	r3, #0
 8011b6c:	d002      	beq.n	8011b74 <SAI_GetFlagStatus+0x20>
  {
    /* SAI_FLAG is set */
    bitstatus = SET;
 8011b6e:	2301      	movs	r3, #1
 8011b70:	73fb      	strb	r3, [r7, #15]
 8011b72:	e001      	b.n	8011b78 <SAI_GetFlagStatus+0x24>
  }
  else
  {
    /* SAI_FLAG is reset */
    bitstatus = RESET;
 8011b74:	2300      	movs	r3, #0
 8011b76:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SAI_FLAG status */
  return  bitstatus;
 8011b78:	7bfb      	ldrb	r3, [r7, #15]
}
 8011b7a:	4618      	mov	r0, r3
 8011b7c:	3714      	adds	r7, #20
 8011b7e:	46bd      	mov	sp, r7
 8011b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b84:	4770      	bx	lr
 8011b86:	bf00      	nop

08011b88 <SAI_ClearFlag>:
  *          - When the audio block is receiver and the FIFO is not empty           
  *  
  * @retval None
  */
void SAI_ClearFlag(SAI_Block_TypeDef* SAI_Block_x, uint32_t SAI_FLAG)
{
 8011b88:	b480      	push	{r7}
 8011b8a:	b083      	sub	sp, #12
 8011b8c:	af00      	add	r7, sp, #0
 8011b8e:	6078      	str	r0, [r7, #4]
 8011b90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
  assert_param(IS_SAI_BLOCK_CLEAR_FLAG(SAI_FLAG));
    
  /* Clear the selected SAI Block flag */
  SAI_Block_x->CLRFR |= SAI_FLAG;
 8011b92:	687b      	ldr	r3, [r7, #4]
 8011b94:	699a      	ldr	r2, [r3, #24]
 8011b96:	683b      	ldr	r3, [r7, #0]
 8011b98:	431a      	orrs	r2, r3
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	619a      	str	r2, [r3, #24]
}
 8011b9e:	370c      	adds	r7, #12
 8011ba0:	46bd      	mov	sp, r7
 8011ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ba6:	4770      	bx	lr

08011ba8 <SAI_GetITStatus>:
  *            @arg SAI_IT_WCKCFG: wrong clock configuration interrupt 
  *                
  * @retval The new state of SAI_IT (SET or RESET).
  */
ITStatus SAI_GetITStatus(SAI_Block_TypeDef* SAI_Block_x, uint32_t SAI_IT)
{
 8011ba8:	b480      	push	{r7}
 8011baa:	b085      	sub	sp, #20
 8011bac:	af00      	add	r7, sp, #0
 8011bae:	6078      	str	r0, [r7, #4]
 8011bb0:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 8011bb2:	2300      	movs	r3, #0
 8011bb4:	73fb      	strb	r3, [r7, #15]
  uint32_t  enablestatus = 0;
 8011bb6:	2300      	movs	r3, #0
 8011bb8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
  assert_param(IS_SAI_BLOCK_CONFIG_IT(SAI_IT));
  
  /* Get the SAI_IT enable bit status */
  enablestatus = (SAI_Block_x->IMR & SAI_IT) ;
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	691a      	ldr	r2, [r3, #16]
 8011bbe:	683b      	ldr	r3, [r7, #0]
 8011bc0:	4013      	ands	r3, r2
 8011bc2:	60bb      	str	r3, [r7, #8]

  /* Check the status of the specified SAI interrupt */
  if (((SAI_Block_x->SR & SAI_IT) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 8011bc4:	687b      	ldr	r3, [r7, #4]
 8011bc6:	695a      	ldr	r2, [r3, #20]
 8011bc8:	683b      	ldr	r3, [r7, #0]
 8011bca:	4013      	ands	r3, r2
 8011bcc:	2b00      	cmp	r3, #0
 8011bce:	d005      	beq.n	8011bdc <SAI_GetITStatus+0x34>
 8011bd0:	68bb      	ldr	r3, [r7, #8]
 8011bd2:	2b00      	cmp	r3, #0
 8011bd4:	d002      	beq.n	8011bdc <SAI_GetITStatus+0x34>
  {
    /* SAI_IT is set */
    bitstatus = SET;
 8011bd6:	2301      	movs	r3, #1
 8011bd8:	73fb      	strb	r3, [r7, #15]
 8011bda:	e001      	b.n	8011be0 <SAI_GetITStatus+0x38>
  }
  else
  {
    /* SAI_IT is reset */
    bitstatus = RESET;
 8011bdc:	2300      	movs	r3, #0
 8011bde:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SAI_IT status */
  return bitstatus;
 8011be0:	7bfb      	ldrb	r3, [r7, #15]
}
 8011be2:	4618      	mov	r0, r3
 8011be4:	3714      	adds	r7, #20
 8011be6:	46bd      	mov	sp, r7
 8011be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bec:	4770      	bx	lr
 8011bee:	bf00      	nop

08011bf0 <SAI_ClearITPendingBit>:
  *          - When the audio block is receiver and the FIFO is not empty  
  *            
  * @retval None
  */
void SAI_ClearITPendingBit(SAI_Block_TypeDef* SAI_Block_x, uint32_t SAI_IT)
{
 8011bf0:	b480      	push	{r7}
 8011bf2:	b083      	sub	sp, #12
 8011bf4:	af00      	add	r7, sp, #0
 8011bf6:	6078      	str	r0, [r7, #4]
 8011bf8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
  assert_param(IS_SAI_BLOCK_CONFIG_IT(SAI_IT));

  /* Clear the selected SAI Block x interrupt pending bit */
  SAI_Block_x->CLRFR |= SAI_IT; 
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	699a      	ldr	r2, [r3, #24]
 8011bfe:	683b      	ldr	r3, [r7, #0]
 8011c00:	431a      	orrs	r2, r3
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	619a      	str	r2, [r3, #24]
}
 8011c06:	370c      	adds	r7, #12
 8011c08:	46bd      	mov	sp, r7
 8011c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c0e:	4770      	bx	lr

08011c10 <SAI_GetCmdStatus>:
  *          the end of audio frame.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState SAI_GetCmdStatus(SAI_Block_TypeDef* SAI_Block_x)
{
 8011c10:	b480      	push	{r7}
 8011c12:	b085      	sub	sp, #20
 8011c14:	af00      	add	r7, sp, #0
 8011c16:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 8011c18:	2300      	movs	r3, #0
 8011c1a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
  if ((SAI_Block_x->CR1 & (uint32_t)SAI_xCR1_SAIEN) != 0)
 8011c1c:	687b      	ldr	r3, [r7, #4]
 8011c1e:	681b      	ldr	r3, [r3, #0]
 8011c20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011c24:	2b00      	cmp	r3, #0
 8011c26:	d002      	beq.n	8011c2e <SAI_GetCmdStatus+0x1e>
  {
    /* The selected SAI Block x EN bit is set (audio frame transfer is ongoing) */
    state = ENABLE;
 8011c28:	2301      	movs	r3, #1
 8011c2a:	73fb      	strb	r3, [r7, #15]
 8011c2c:	e001      	b.n	8011c32 <SAI_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected SAI Block x EN bit is cleared (SAI Block is disabled and 
        all transfers are complete) */
    state = DISABLE;
 8011c2e:	2300      	movs	r3, #0
 8011c30:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 8011c32:	7bfb      	ldrb	r3, [r7, #15]
}
 8011c34:	4618      	mov	r0, r3
 8011c36:	3714      	adds	r7, #20
 8011c38:	46bd      	mov	sp, r7
 8011c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c3e:	4770      	bx	lr

08011c40 <SAI_GetFIFOStatus>:
  *           - SAI_FIFOStatus_HalfFull: if more than 1 half-full.
  *           - SAI_FIFOStatus_3QuartersFull: if more than 3 quarters-full.
  *           - SAI_FIFOStatus_Full: when FIFO is full
  */
uint32_t SAI_GetFIFOStatus(SAI_Block_TypeDef* SAI_Block_x)
{
 8011c40:	b480      	push	{r7}
 8011c42:	b085      	sub	sp, #20
 8011c44:	af00      	add	r7, sp, #0
 8011c46:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8011c48:	2300      	movs	r3, #0
 8011c4a:	60fb      	str	r3, [r7, #12]
 
  /* Check the parameters */
  assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
  
  /* Get the FIFO level bits */
  tmpreg = (uint32_t)((SAI_Block_x->SR & SAI_xSR_FLVL));
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	695b      	ldr	r3, [r3, #20]
 8011c50:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8011c54:	60fb      	str	r3, [r7, #12]
  
  return tmpreg;
 8011c56:	68fb      	ldr	r3, [r7, #12]
}
 8011c58:	4618      	mov	r0, r3
 8011c5a:	3714      	adds	r7, #20
 8011c5c:	46bd      	mov	sp, r7
 8011c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c62:	4770      	bx	lr

08011c64 <SDIO_DeInit>:
  * @brief  Deinitializes the SDIO peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void SDIO_DeInit(void)
{
 8011c64:	b580      	push	{r7, lr}
 8011c66:	af00      	add	r7, sp, #0
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_SDIO, ENABLE);
 8011c68:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8011c6c:	2101      	movs	r1, #1
 8011c6e:	f7fe f8e9 	bl	800fe44 <RCC_APB2PeriphResetCmd>
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_SDIO, DISABLE);
 8011c72:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8011c76:	2100      	movs	r1, #0
 8011c78:	f7fe f8e4 	bl	800fe44 <RCC_APB2PeriphResetCmd>
}
 8011c7c:	bd80      	pop	{r7, pc}
 8011c7e:	bf00      	nop

08011c80 <SDIO_Init>:
  * @param  SDIO_InitStruct : pointer to a SDIO_InitTypeDef structure 
  *         that contains the configuration information for the SDIO peripheral.
  * @retval None
  */
void SDIO_Init(SDIO_InitTypeDef* SDIO_InitStruct)
{
 8011c80:	b480      	push	{r7}
 8011c82:	b085      	sub	sp, #20
 8011c84:	af00      	add	r7, sp, #0
 8011c86:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8011c88:	2300      	movs	r3, #0
 8011c8a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(SDIO_InitStruct->SDIO_BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(SDIO_InitStruct->SDIO_HardwareFlowControl)); 
   
/*---------------------------- SDIO CLKCR Configuration ------------------------*/  
  /* Get the SDIO CLKCR value */
  tmpreg = SDIO->CLKCR;
 8011c8c:	4b12      	ldr	r3, [pc, #72]	; (8011cd8 <SDIO_Init+0x58>)
 8011c8e:	685b      	ldr	r3, [r3, #4]
 8011c90:	60fb      	str	r3, [r7, #12]
  
  /* Clear CLKDIV, PWRSAV, BYPASS, WIDBUS, NEGEDGE, HWFC_EN bits */
  tmpreg &= CLKCR_CLEAR_MASK;
 8011c92:	68fb      	ldr	r3, [r7, #12]
 8011c94:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8011c98:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8011c9c:	60fb      	str	r3, [r7, #12]
  /* Set PWRSAV bit according to SDIO_ClockPowerSave value */
  /* Set BYPASS bit according to SDIO_ClockBypass value */
  /* Set WIDBUS bits according to SDIO_BusWide value */
  /* Set NEGEDGE bits according to SDIO_ClockEdge value */
  /* Set HWFC_EN bits according to SDIO_HardwareFlowControl value */
  tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
 8011c9e:	687b      	ldr	r3, [r7, #4]
 8011ca0:	7d1b      	ldrb	r3, [r3, #20]
 8011ca2:	461a      	mov	r2, r3
 8011ca4:	687b      	ldr	r3, [r7, #4]
 8011ca6:	689b      	ldr	r3, [r3, #8]
 8011ca8:	431a      	orrs	r2, r3
             SDIO_InitStruct->SDIO_ClockBypass | SDIO_InitStruct->SDIO_BusWide |
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	685b      	ldr	r3, [r3, #4]
  /* Set PWRSAV bit according to SDIO_ClockPowerSave value */
  /* Set BYPASS bit according to SDIO_ClockBypass value */
  /* Set WIDBUS bits according to SDIO_BusWide value */
  /* Set NEGEDGE bits according to SDIO_ClockEdge value */
  /* Set HWFC_EN bits according to SDIO_HardwareFlowControl value */
  tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
 8011cae:	431a      	orrs	r2, r3
             SDIO_InitStruct->SDIO_ClockBypass | SDIO_InitStruct->SDIO_BusWide |
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	68db      	ldr	r3, [r3, #12]
 8011cb4:	431a      	orrs	r2, r3
             SDIO_InitStruct->SDIO_ClockEdge | SDIO_InitStruct->SDIO_HardwareFlowControl); 
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	681b      	ldr	r3, [r3, #0]
  /* Set BYPASS bit according to SDIO_ClockBypass value */
  /* Set WIDBUS bits according to SDIO_BusWide value */
  /* Set NEGEDGE bits according to SDIO_ClockEdge value */
  /* Set HWFC_EN bits according to SDIO_HardwareFlowControl value */
  tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
             SDIO_InitStruct->SDIO_ClockBypass | SDIO_InitStruct->SDIO_BusWide |
 8011cba:	431a      	orrs	r2, r3
             SDIO_InitStruct->SDIO_ClockEdge | SDIO_InitStruct->SDIO_HardwareFlowControl); 
 8011cbc:	687b      	ldr	r3, [r7, #4]
 8011cbe:	691b      	ldr	r3, [r3, #16]
 8011cc0:	4313      	orrs	r3, r2
  /* Set PWRSAV bit according to SDIO_ClockPowerSave value */
  /* Set BYPASS bit according to SDIO_ClockBypass value */
  /* Set WIDBUS bits according to SDIO_BusWide value */
  /* Set NEGEDGE bits according to SDIO_ClockEdge value */
  /* Set HWFC_EN bits according to SDIO_HardwareFlowControl value */
  tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
 8011cc2:	68fa      	ldr	r2, [r7, #12]
 8011cc4:	4313      	orrs	r3, r2
 8011cc6:	60fb      	str	r3, [r7, #12]
             SDIO_InitStruct->SDIO_ClockBypass | SDIO_InitStruct->SDIO_BusWide |
             SDIO_InitStruct->SDIO_ClockEdge | SDIO_InitStruct->SDIO_HardwareFlowControl); 
  
  /* Write to SDIO CLKCR */
  SDIO->CLKCR = tmpreg;
 8011cc8:	4b03      	ldr	r3, [pc, #12]	; (8011cd8 <SDIO_Init+0x58>)
 8011cca:	68fa      	ldr	r2, [r7, #12]
 8011ccc:	605a      	str	r2, [r3, #4]
}
 8011cce:	3714      	adds	r7, #20
 8011cd0:	46bd      	mov	sp, r7
 8011cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cd6:	4770      	bx	lr
 8011cd8:	40012c00 	.word	0x40012c00

08011cdc <SDIO_StructInit>:
  * @param  SDIO_InitStruct: pointer to an SDIO_InitTypeDef structure which 
  *         will be initialized.
  * @retval None
  */
void SDIO_StructInit(SDIO_InitTypeDef* SDIO_InitStruct)
{
 8011cdc:	b480      	push	{r7}
 8011cde:	b083      	sub	sp, #12
 8011ce0:	af00      	add	r7, sp, #0
 8011ce2:	6078      	str	r0, [r7, #4]
  /* SDIO_InitStruct members default value */
  SDIO_InitStruct->SDIO_ClockDiv = 0x00;
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	2200      	movs	r2, #0
 8011ce8:	751a      	strb	r2, [r3, #20]
  SDIO_InitStruct->SDIO_ClockEdge = SDIO_ClockEdge_Rising;
 8011cea:	687b      	ldr	r3, [r7, #4]
 8011cec:	2200      	movs	r2, #0
 8011cee:	601a      	str	r2, [r3, #0]
  SDIO_InitStruct->SDIO_ClockBypass = SDIO_ClockBypass_Disable;
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	2200      	movs	r2, #0
 8011cf4:	605a      	str	r2, [r3, #4]
  SDIO_InitStruct->SDIO_ClockPowerSave = SDIO_ClockPowerSave_Disable;
 8011cf6:	687b      	ldr	r3, [r7, #4]
 8011cf8:	2200      	movs	r2, #0
 8011cfa:	609a      	str	r2, [r3, #8]
  SDIO_InitStruct->SDIO_BusWide = SDIO_BusWide_1b;
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	2200      	movs	r2, #0
 8011d00:	60da      	str	r2, [r3, #12]
  SDIO_InitStruct->SDIO_HardwareFlowControl = SDIO_HardwareFlowControl_Disable;
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	2200      	movs	r2, #0
 8011d06:	611a      	str	r2, [r3, #16]
}
 8011d08:	370c      	adds	r7, #12
 8011d0a:	46bd      	mov	sp, r7
 8011d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d10:	4770      	bx	lr
 8011d12:	bf00      	nop

08011d14 <SDIO_ClockCmd>:
  * @param  NewState: new state of the SDIO Clock. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_ClockCmd(FunctionalState NewState)
{
 8011d14:	b480      	push	{r7}
 8011d16:	b083      	sub	sp, #12
 8011d18:	af00      	add	r7, sp, #0
 8011d1a:	4603      	mov	r3, r0
 8011d1c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CLKCR_CLKEN_BB = (uint32_t)NewState;
 8011d1e:	4b04      	ldr	r3, [pc, #16]	; (8011d30 <SDIO_ClockCmd+0x1c>)
 8011d20:	79fa      	ldrb	r2, [r7, #7]
 8011d22:	601a      	str	r2, [r3, #0]
}
 8011d24:	370c      	adds	r7, #12
 8011d26:	46bd      	mov	sp, r7
 8011d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d2c:	4770      	bx	lr
 8011d2e:	bf00      	nop
 8011d30:	422580a0 	.word	0x422580a0

08011d34 <SDIO_SetPowerState>:
  *            @arg SDIO_PowerState_OFF: SDIO Power OFF
  *            @arg SDIO_PowerState_ON: SDIO Power ON
  * @retval None
  */
void SDIO_SetPowerState(uint32_t SDIO_PowerState)
{
 8011d34:	b480      	push	{r7}
 8011d36:	b083      	sub	sp, #12
 8011d38:	af00      	add	r7, sp, #0
 8011d3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SDIO_POWER_STATE(SDIO_PowerState));
  
  SDIO->POWER = SDIO_PowerState;
 8011d3c:	4b03      	ldr	r3, [pc, #12]	; (8011d4c <SDIO_SetPowerState+0x18>)
 8011d3e:	687a      	ldr	r2, [r7, #4]
 8011d40:	601a      	str	r2, [r3, #0]
}
 8011d42:	370c      	adds	r7, #12
 8011d44:	46bd      	mov	sp, r7
 8011d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d4a:	4770      	bx	lr
 8011d4c:	40012c00 	.word	0x40012c00

08011d50 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(void)
{
 8011d50:	b480      	push	{r7}
 8011d52:	af00      	add	r7, sp, #0
  return (SDIO->POWER & (~PWR_PWRCTRL_MASK));
 8011d54:	4b04      	ldr	r3, [pc, #16]	; (8011d68 <SDIO_GetPowerState+0x18>)
 8011d56:	681b      	ldr	r3, [r3, #0]
 8011d58:	f003 0303 	and.w	r3, r3, #3
}
 8011d5c:	4618      	mov	r0, r3
 8011d5e:	46bd      	mov	sp, r7
 8011d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d64:	4770      	bx	lr
 8011d66:	bf00      	nop
 8011d68:	40012c00 	.word	0x40012c00

08011d6c <SDIO_SendCommand>:
  *         structure that contains the configuration information for the SDIO 
  *         command.
  * @retval None
  */
void SDIO_SendCommand(SDIO_CmdInitTypeDef *SDIO_CmdInitStruct)
{
 8011d6c:	b480      	push	{r7}
 8011d6e:	b085      	sub	sp, #20
 8011d70:	af00      	add	r7, sp, #0
 8011d72:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8011d74:	2300      	movs	r3, #0
 8011d76:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_WAIT(SDIO_CmdInitStruct->SDIO_Wait));
  assert_param(IS_SDIO_CPSM(SDIO_CmdInitStruct->SDIO_CPSM));
  
/*---------------------------- SDIO ARG Configuration ------------------------*/
  /* Set the SDIO Argument value */
  SDIO->ARG = SDIO_CmdInitStruct->SDIO_Argument;
 8011d78:	4b11      	ldr	r3, [pc, #68]	; (8011dc0 <SDIO_SendCommand+0x54>)
 8011d7a:	687a      	ldr	r2, [r7, #4]
 8011d7c:	6812      	ldr	r2, [r2, #0]
 8011d7e:	609a      	str	r2, [r3, #8]
  
/*---------------------------- SDIO CMD Configuration ------------------------*/  
  /* Get the SDIO CMD value */
  tmpreg = SDIO->CMD;
 8011d80:	4b0f      	ldr	r3, [pc, #60]	; (8011dc0 <SDIO_SendCommand+0x54>)
 8011d82:	68db      	ldr	r3, [r3, #12]
 8011d84:	60fb      	str	r3, [r7, #12]
  /* Clear CMDINDEX, WAITRESP, WAITINT, WAITPEND, CPSMEN bits */
  tmpreg &= CMD_CLEAR_MASK;
 8011d86:	68fb      	ldr	r3, [r7, #12]
 8011d88:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8011d8c:	f023 0307 	bic.w	r3, r3, #7
 8011d90:	60fb      	str	r3, [r7, #12]
  /* Set CMDINDEX bits according to SDIO_CmdIndex value */
  /* Set WAITRESP bits according to SDIO_Response value */
  /* Set WAITINT and WAITPEND bits according to SDIO_Wait value */
  /* Set CPSMEN bits according to SDIO_CPSM value */
  tmpreg |= (uint32_t)SDIO_CmdInitStruct->SDIO_CmdIndex | SDIO_CmdInitStruct->SDIO_Response
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	685a      	ldr	r2, [r3, #4]
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	689b      	ldr	r3, [r3, #8]
 8011d9a:	431a      	orrs	r2, r3
           | SDIO_CmdInitStruct->SDIO_Wait | SDIO_CmdInitStruct->SDIO_CPSM;
 8011d9c:	687b      	ldr	r3, [r7, #4]
 8011d9e:	68db      	ldr	r3, [r3, #12]
 8011da0:	431a      	orrs	r2, r3
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	691b      	ldr	r3, [r3, #16]
 8011da6:	4313      	orrs	r3, r2
  tmpreg &= CMD_CLEAR_MASK;
  /* Set CMDINDEX bits according to SDIO_CmdIndex value */
  /* Set WAITRESP bits according to SDIO_Response value */
  /* Set WAITINT and WAITPEND bits according to SDIO_Wait value */
  /* Set CPSMEN bits according to SDIO_CPSM value */
  tmpreg |= (uint32_t)SDIO_CmdInitStruct->SDIO_CmdIndex | SDIO_CmdInitStruct->SDIO_Response
 8011da8:	68fa      	ldr	r2, [r7, #12]
 8011daa:	4313      	orrs	r3, r2
 8011dac:	60fb      	str	r3, [r7, #12]
           | SDIO_CmdInitStruct->SDIO_Wait | SDIO_CmdInitStruct->SDIO_CPSM;
  
  /* Write to SDIO CMD */
  SDIO->CMD = tmpreg;
 8011dae:	4b04      	ldr	r3, [pc, #16]	; (8011dc0 <SDIO_SendCommand+0x54>)
 8011db0:	68fa      	ldr	r2, [r7, #12]
 8011db2:	60da      	str	r2, [r3, #12]
}
 8011db4:	3714      	adds	r7, #20
 8011db6:	46bd      	mov	sp, r7
 8011db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dbc:	4770      	bx	lr
 8011dbe:	bf00      	nop
 8011dc0:	40012c00 	.word	0x40012c00

08011dc4 <SDIO_CmdStructInit>:
  * @param  SDIO_CmdInitStruct: pointer to an SDIO_CmdInitTypeDef 
  *         structure which will be initialized.
  * @retval None
  */
void SDIO_CmdStructInit(SDIO_CmdInitTypeDef* SDIO_CmdInitStruct)
{
 8011dc4:	b480      	push	{r7}
 8011dc6:	b083      	sub	sp, #12
 8011dc8:	af00      	add	r7, sp, #0
 8011dca:	6078      	str	r0, [r7, #4]
  /* SDIO_CmdInitStruct members default value */
  SDIO_CmdInitStruct->SDIO_Argument = 0x00;
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	2200      	movs	r2, #0
 8011dd0:	601a      	str	r2, [r3, #0]
  SDIO_CmdInitStruct->SDIO_CmdIndex = 0x00;
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	2200      	movs	r2, #0
 8011dd6:	605a      	str	r2, [r3, #4]
  SDIO_CmdInitStruct->SDIO_Response = SDIO_Response_No;
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	2200      	movs	r2, #0
 8011ddc:	609a      	str	r2, [r3, #8]
  SDIO_CmdInitStruct->SDIO_Wait = SDIO_Wait_No;
 8011dde:	687b      	ldr	r3, [r7, #4]
 8011de0:	2200      	movs	r2, #0
 8011de2:	60da      	str	r2, [r3, #12]
  SDIO_CmdInitStruct->SDIO_CPSM = SDIO_CPSM_Disable;
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	2200      	movs	r2, #0
 8011de8:	611a      	str	r2, [r3, #16]
}
 8011dea:	370c      	adds	r7, #12
 8011dec:	46bd      	mov	sp, r7
 8011dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011df2:	4770      	bx	lr

08011df4 <SDIO_GetCommandResponse>:
  * @brief  Returns command index of last command for which response received.
  * @param  None
  * @retval Returns the command index of the last command response received.
  */
uint8_t SDIO_GetCommandResponse(void)
{
 8011df4:	b480      	push	{r7}
 8011df6:	af00      	add	r7, sp, #0
  return (uint8_t)(SDIO->RESPCMD);
 8011df8:	4b03      	ldr	r3, [pc, #12]	; (8011e08 <SDIO_GetCommandResponse+0x14>)
 8011dfa:	691b      	ldr	r3, [r3, #16]
 8011dfc:	b2db      	uxtb	r3, r3
}
 8011dfe:	4618      	mov	r0, r3
 8011e00:	46bd      	mov	sp, r7
 8011e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e06:	4770      	bx	lr
 8011e08:	40012c00 	.word	0x40012c00

08011e0c <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4
  * @retval The Corresponding response register value.
  */
uint32_t SDIO_GetResponse(uint32_t SDIO_RESP)
{
 8011e0c:	b480      	push	{r7}
 8011e0e:	b085      	sub	sp, #20
 8011e10:	af00      	add	r7, sp, #0
 8011e12:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmp = 0;
 8011e14:	2300      	movs	r3, #0
 8011e16:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(SDIO_RESP));

  tmp = SDIO_RESP_ADDR + SDIO_RESP;
 8011e18:	687a      	ldr	r2, [r7, #4]
 8011e1a:	4b05      	ldr	r3, [pc, #20]	; (8011e30 <SDIO_GetResponse+0x24>)
 8011e1c:	4413      	add	r3, r2
 8011e1e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp); 
 8011e20:	68fb      	ldr	r3, [r7, #12]
 8011e22:	681b      	ldr	r3, [r3, #0]
}
 8011e24:	4618      	mov	r0, r3
 8011e26:	3714      	adds	r7, #20
 8011e28:	46bd      	mov	sp, r7
 8011e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e2e:	4770      	bx	lr
 8011e30:	40012c14 	.word	0x40012c14

08011e34 <SDIO_DataConfig>:
  * @param  SDIO_DataInitStruct : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDIO command.
  * @retval None
  */
void SDIO_DataConfig(SDIO_DataInitTypeDef* SDIO_DataInitStruct)
{
 8011e34:	b480      	push	{r7}
 8011e36:	b085      	sub	sp, #20
 8011e38:	af00      	add	r7, sp, #0
 8011e3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8011e3c:	2300      	movs	r3, #0
 8011e3e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_MODE(SDIO_DataInitStruct->SDIO_TransferMode));
  assert_param(IS_SDIO_DPSM(SDIO_DataInitStruct->SDIO_DPSM));

/*---------------------------- SDIO DTIMER Configuration ---------------------*/
  /* Set the SDIO Data TimeOut value */
  SDIO->DTIMER = SDIO_DataInitStruct->SDIO_DataTimeOut;
 8011e40:	4b12      	ldr	r3, [pc, #72]	; (8011e8c <SDIO_DataConfig+0x58>)
 8011e42:	687a      	ldr	r2, [r7, #4]
 8011e44:	6812      	ldr	r2, [r2, #0]
 8011e46:	625a      	str	r2, [r3, #36]	; 0x24

/*---------------------------- SDIO DLEN Configuration -----------------------*/
  /* Set the SDIO DataLength value */
  SDIO->DLEN = SDIO_DataInitStruct->SDIO_DataLength;
 8011e48:	4b10      	ldr	r3, [pc, #64]	; (8011e8c <SDIO_DataConfig+0x58>)
 8011e4a:	687a      	ldr	r2, [r7, #4]
 8011e4c:	6852      	ldr	r2, [r2, #4]
 8011e4e:	629a      	str	r2, [r3, #40]	; 0x28

/*---------------------------- SDIO DCTRL Configuration ----------------------*/  
  /* Get the SDIO DCTRL value */
  tmpreg = SDIO->DCTRL;
 8011e50:	4b0e      	ldr	r3, [pc, #56]	; (8011e8c <SDIO_DataConfig+0x58>)
 8011e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e54:	60fb      	str	r3, [r7, #12]
  /* Clear DEN, DTMODE, DTDIR and DBCKSIZE bits */
  tmpreg &= DCTRL_CLEAR_MASK;
 8011e56:	68fb      	ldr	r3, [r7, #12]
 8011e58:	f023 03f7 	bic.w	r3, r3, #247	; 0xf7
 8011e5c:	60fb      	str	r3, [r7, #12]
  /* Set DEN bit according to SDIO_DPSM value */
  /* Set DTMODE bit according to SDIO_TransferMode value */
  /* Set DTDIR bit according to SDIO_TransferDir value */
  /* Set DBCKSIZE bits according to SDIO_DataBlockSize value */
  tmpreg |= (uint32_t)SDIO_DataInitStruct->SDIO_DataBlockSize | SDIO_DataInitStruct->SDIO_TransferDir
 8011e5e:	687b      	ldr	r3, [r7, #4]
 8011e60:	689a      	ldr	r2, [r3, #8]
 8011e62:	687b      	ldr	r3, [r7, #4]
 8011e64:	68db      	ldr	r3, [r3, #12]
 8011e66:	431a      	orrs	r2, r3
           | SDIO_DataInitStruct->SDIO_TransferMode | SDIO_DataInitStruct->SDIO_DPSM;
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	691b      	ldr	r3, [r3, #16]
 8011e6c:	431a      	orrs	r2, r3
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	695b      	ldr	r3, [r3, #20]
 8011e72:	4313      	orrs	r3, r2
  tmpreg &= DCTRL_CLEAR_MASK;
  /* Set DEN bit according to SDIO_DPSM value */
  /* Set DTMODE bit according to SDIO_TransferMode value */
  /* Set DTDIR bit according to SDIO_TransferDir value */
  /* Set DBCKSIZE bits according to SDIO_DataBlockSize value */
  tmpreg |= (uint32_t)SDIO_DataInitStruct->SDIO_DataBlockSize | SDIO_DataInitStruct->SDIO_TransferDir
 8011e74:	68fa      	ldr	r2, [r7, #12]
 8011e76:	4313      	orrs	r3, r2
 8011e78:	60fb      	str	r3, [r7, #12]
           | SDIO_DataInitStruct->SDIO_TransferMode | SDIO_DataInitStruct->SDIO_DPSM;

  /* Write to SDIO DCTRL */
  SDIO->DCTRL = tmpreg;
 8011e7a:	4b04      	ldr	r3, [pc, #16]	; (8011e8c <SDIO_DataConfig+0x58>)
 8011e7c:	68fa      	ldr	r2, [r7, #12]
 8011e7e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8011e80:	3714      	adds	r7, #20
 8011e82:	46bd      	mov	sp, r7
 8011e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e88:	4770      	bx	lr
 8011e8a:	bf00      	nop
 8011e8c:	40012c00 	.word	0x40012c00

08011e90 <SDIO_DataStructInit>:
  * @param  SDIO_DataInitStruct: pointer to an SDIO_DataInitTypeDef structure 
  *         which will be initialized.
  * @retval None
  */
void SDIO_DataStructInit(SDIO_DataInitTypeDef* SDIO_DataInitStruct)
{
 8011e90:	b480      	push	{r7}
 8011e92:	b083      	sub	sp, #12
 8011e94:	af00      	add	r7, sp, #0
 8011e96:	6078      	str	r0, [r7, #4]
  /* SDIO_DataInitStruct members default value */
  SDIO_DataInitStruct->SDIO_DataTimeOut = 0xFFFFFFFF;
 8011e98:	687b      	ldr	r3, [r7, #4]
 8011e9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011e9e:	601a      	str	r2, [r3, #0]
  SDIO_DataInitStruct->SDIO_DataLength = 0x00;
 8011ea0:	687b      	ldr	r3, [r7, #4]
 8011ea2:	2200      	movs	r2, #0
 8011ea4:	605a      	str	r2, [r3, #4]
  SDIO_DataInitStruct->SDIO_DataBlockSize = SDIO_DataBlockSize_1b;
 8011ea6:	687b      	ldr	r3, [r7, #4]
 8011ea8:	2200      	movs	r2, #0
 8011eaa:	609a      	str	r2, [r3, #8]
  SDIO_DataInitStruct->SDIO_TransferDir = SDIO_TransferDir_ToCard;
 8011eac:	687b      	ldr	r3, [r7, #4]
 8011eae:	2200      	movs	r2, #0
 8011eb0:	60da      	str	r2, [r3, #12]
  SDIO_DataInitStruct->SDIO_TransferMode = SDIO_TransferMode_Block;  
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	2200      	movs	r2, #0
 8011eb6:	611a      	str	r2, [r3, #16]
  SDIO_DataInitStruct->SDIO_DPSM = SDIO_DPSM_Disable;
 8011eb8:	687b      	ldr	r3, [r7, #4]
 8011eba:	2200      	movs	r2, #0
 8011ebc:	615a      	str	r2, [r3, #20]
}
 8011ebe:	370c      	adds	r7, #12
 8011ec0:	46bd      	mov	sp, r7
 8011ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ec6:	4770      	bx	lr

08011ec8 <SDIO_GetDataCounter>:
  * @brief  Returns number of remaining data bytes to be transferred.
  * @param  None
  * @retval Number of remaining data bytes to be transferred
  */
uint32_t SDIO_GetDataCounter(void)
{ 
 8011ec8:	b480      	push	{r7}
 8011eca:	af00      	add	r7, sp, #0
  return SDIO->DCOUNT;
 8011ecc:	4b03      	ldr	r3, [pc, #12]	; (8011edc <SDIO_GetDataCounter+0x14>)
 8011ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8011ed0:	4618      	mov	r0, r3
 8011ed2:	46bd      	mov	sp, r7
 8011ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ed8:	4770      	bx	lr
 8011eda:	bf00      	nop
 8011edc:	40012c00 	.word	0x40012c00

08011ee0 <SDIO_ReadData>:
  * @brief  Read one data word from Rx FIFO.
  * @param  None
  * @retval Data received
  */
uint32_t SDIO_ReadData(void)
{ 
 8011ee0:	b480      	push	{r7}
 8011ee2:	af00      	add	r7, sp, #0
  return SDIO->FIFO;
 8011ee4:	4b03      	ldr	r3, [pc, #12]	; (8011ef4 <SDIO_ReadData+0x14>)
 8011ee6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8011eea:	4618      	mov	r0, r3
 8011eec:	46bd      	mov	sp, r7
 8011eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ef2:	4770      	bx	lr
 8011ef4:	40012c00 	.word	0x40012c00

08011ef8 <SDIO_WriteData>:
  * @brief  Write one data word to Tx FIFO.
  * @param  Data: 32-bit data word to write.
  * @retval None
  */
void SDIO_WriteData(uint32_t Data)
{ 
 8011ef8:	b480      	push	{r7}
 8011efa:	b083      	sub	sp, #12
 8011efc:	af00      	add	r7, sp, #0
 8011efe:	6078      	str	r0, [r7, #4]
  SDIO->FIFO = Data;
 8011f00:	4b04      	ldr	r3, [pc, #16]	; (8011f14 <SDIO_WriteData+0x1c>)
 8011f02:	687a      	ldr	r2, [r7, #4]
 8011f04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 8011f08:	370c      	adds	r7, #12
 8011f0a:	46bd      	mov	sp, r7
 8011f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f10:	4770      	bx	lr
 8011f12:	bf00      	nop
 8011f14:	40012c00 	.word	0x40012c00

08011f18 <SDIO_GetFIFOCount>:
  * @brief  Returns the number of words left to be written to or read from FIFO.	
  * @param  None
  * @retval Remaining number of words.
  */
uint32_t SDIO_GetFIFOCount(void)
{ 
 8011f18:	b480      	push	{r7}
 8011f1a:	af00      	add	r7, sp, #0
  return SDIO->FIFOCNT;
 8011f1c:	4b03      	ldr	r3, [pc, #12]	; (8011f2c <SDIO_GetFIFOCount+0x14>)
 8011f1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
 8011f20:	4618      	mov	r0, r3
 8011f22:	46bd      	mov	sp, r7
 8011f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f28:	4770      	bx	lr
 8011f2a:	bf00      	nop
 8011f2c:	40012c00 	.word	0x40012c00

08011f30 <SDIO_StartSDIOReadWait>:
  * @param  NewState: new state of the Start SDIO Read Wait operation. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_StartSDIOReadWait(FunctionalState NewState)
{ 
 8011f30:	b480      	push	{r7}
 8011f32:	b083      	sub	sp, #12
 8011f34:	af00      	add	r7, sp, #0
 8011f36:	4603      	mov	r3, r0
 8011f38:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) DCTRL_RWSTART_BB = (uint32_t) NewState;
 8011f3a:	4b04      	ldr	r3, [pc, #16]	; (8011f4c <SDIO_StartSDIOReadWait+0x1c>)
 8011f3c:	79fa      	ldrb	r2, [r7, #7]
 8011f3e:	601a      	str	r2, [r3, #0]
}
 8011f40:	370c      	adds	r7, #12
 8011f42:	46bd      	mov	sp, r7
 8011f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f48:	4770      	bx	lr
 8011f4a:	bf00      	nop
 8011f4c:	422585a0 	.word	0x422585a0

08011f50 <SDIO_StopSDIOReadWait>:
  * @param  NewState: new state of the Stop SDIO Read Wait operation. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_StopSDIOReadWait(FunctionalState NewState)
{ 
 8011f50:	b480      	push	{r7}
 8011f52:	b083      	sub	sp, #12
 8011f54:	af00      	add	r7, sp, #0
 8011f56:	4603      	mov	r3, r0
 8011f58:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) DCTRL_RWSTOP_BB = (uint32_t) NewState;
 8011f5a:	4b04      	ldr	r3, [pc, #16]	; (8011f6c <SDIO_StopSDIOReadWait+0x1c>)
 8011f5c:	79fa      	ldrb	r2, [r7, #7]
 8011f5e:	601a      	str	r2, [r3, #0]
}
 8011f60:	370c      	adds	r7, #12
 8011f62:	46bd      	mov	sp, r7
 8011f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f68:	4770      	bx	lr
 8011f6a:	bf00      	nop
 8011f6c:	422585a4 	.word	0x422585a4

08011f70 <SDIO_SetSDIOReadWaitMode>:
  *            @arg SDIO_ReadWaitMode_CLK: Read Wait control by stopping SDIOCLK
  *            @arg SDIO_ReadWaitMode_DATA2: Read Wait control using SDIO_DATA2
  * @retval None
  */
void SDIO_SetSDIOReadWaitMode(uint32_t SDIO_ReadWaitMode)
{
 8011f70:	b480      	push	{r7}
 8011f72:	b083      	sub	sp, #12
 8011f74:	af00      	add	r7, sp, #0
 8011f76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SDIO_READWAIT_MODE(SDIO_ReadWaitMode));
  
  *(__IO uint32_t *) DCTRL_RWMOD_BB = SDIO_ReadWaitMode;
 8011f78:	4b03      	ldr	r3, [pc, #12]	; (8011f88 <SDIO_SetSDIOReadWaitMode+0x18>)
 8011f7a:	687a      	ldr	r2, [r7, #4]
 8011f7c:	601a      	str	r2, [r3, #0]
}
 8011f7e:	370c      	adds	r7, #12
 8011f80:	46bd      	mov	sp, r7
 8011f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f86:	4770      	bx	lr
 8011f88:	422585a8 	.word	0x422585a8

08011f8c <SDIO_SetSDIOOperation>:
  * @param  NewState: new state of SDIO specific operation. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_SetSDIOOperation(FunctionalState NewState)
{ 
 8011f8c:	b480      	push	{r7}
 8011f8e:	b083      	sub	sp, #12
 8011f90:	af00      	add	r7, sp, #0
 8011f92:	4603      	mov	r3, r0
 8011f94:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) DCTRL_SDIOEN_BB = (uint32_t)NewState;
 8011f96:	4b04      	ldr	r3, [pc, #16]	; (8011fa8 <SDIO_SetSDIOOperation+0x1c>)
 8011f98:	79fa      	ldrb	r2, [r7, #7]
 8011f9a:	601a      	str	r2, [r3, #0]
}
 8011f9c:	370c      	adds	r7, #12
 8011f9e:	46bd      	mov	sp, r7
 8011fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fa4:	4770      	bx	lr
 8011fa6:	bf00      	nop
 8011fa8:	422585ac 	.word	0x422585ac

08011fac <SDIO_SendSDIOSuspendCmd>:
  * @param  NewState: new state of the SD I/O Mode suspend command.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_SendSDIOSuspendCmd(FunctionalState NewState)
{ 
 8011fac:	b480      	push	{r7}
 8011fae:	b083      	sub	sp, #12
 8011fb0:	af00      	add	r7, sp, #0
 8011fb2:	4603      	mov	r3, r0
 8011fb4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CMD_SDIOSUSPEND_BB = (uint32_t)NewState;
 8011fb6:	4b04      	ldr	r3, [pc, #16]	; (8011fc8 <SDIO_SendSDIOSuspendCmd+0x1c>)
 8011fb8:	79fa      	ldrb	r2, [r7, #7]
 8011fba:	601a      	str	r2, [r3, #0]
}
 8011fbc:	370c      	adds	r7, #12
 8011fbe:	46bd      	mov	sp, r7
 8011fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fc4:	4770      	bx	lr
 8011fc6:	bf00      	nop
 8011fc8:	422581ac 	.word	0x422581ac

08011fcc <SDIO_CommandCompletionCmd>:
  * @param  NewState: new state of command completion signal. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_CommandCompletionCmd(FunctionalState NewState)
{ 
 8011fcc:	b480      	push	{r7}
 8011fce:	b083      	sub	sp, #12
 8011fd0:	af00      	add	r7, sp, #0
 8011fd2:	4603      	mov	r3, r0
 8011fd4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CMD_ENCMDCOMPL_BB = (uint32_t)NewState;
 8011fd6:	4b04      	ldr	r3, [pc, #16]	; (8011fe8 <SDIO_CommandCompletionCmd+0x1c>)
 8011fd8:	79fa      	ldrb	r2, [r7, #7]
 8011fda:	601a      	str	r2, [r3, #0]
}
 8011fdc:	370c      	adds	r7, #12
 8011fde:	46bd      	mov	sp, r7
 8011fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fe4:	4770      	bx	lr
 8011fe6:	bf00      	nop
 8011fe8:	422581b0 	.word	0x422581b0

08011fec <SDIO_CEATAITCmd>:
  * @param  NewState: new state of CE-ATA interrupt. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_CEATAITCmd(FunctionalState NewState)
{ 
 8011fec:	b480      	push	{r7}
 8011fee:	b083      	sub	sp, #12
 8011ff0:	af00      	add	r7, sp, #0
 8011ff2:	4603      	mov	r3, r0
 8011ff4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CMD_NIEN_BB = (uint32_t)((~((uint32_t)NewState)) & ((uint32_t)0x1));
 8011ff6:	4b07      	ldr	r3, [pc, #28]	; (8012014 <SDIO_CEATAITCmd+0x28>)
 8011ff8:	79fa      	ldrb	r2, [r7, #7]
 8011ffa:	f002 0201 	and.w	r2, r2, #1
 8011ffe:	2a00      	cmp	r2, #0
 8012000:	bf14      	ite	ne
 8012002:	2200      	movne	r2, #0
 8012004:	2201      	moveq	r2, #1
 8012006:	b2d2      	uxtb	r2, r2
 8012008:	601a      	str	r2, [r3, #0]
}
 801200a:	370c      	adds	r7, #12
 801200c:	46bd      	mov	sp, r7
 801200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012012:	4770      	bx	lr
 8012014:	422581b4 	.word	0x422581b4

08012018 <SDIO_SendCEATACmd>:
  * @param  NewState: new state of CE-ATA command. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_SendCEATACmd(FunctionalState NewState)
{ 
 8012018:	b480      	push	{r7}
 801201a:	b083      	sub	sp, #12
 801201c:	af00      	add	r7, sp, #0
 801201e:	4603      	mov	r3, r0
 8012020:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CMD_ATACMD_BB = (uint32_t)NewState;
 8012022:	4b04      	ldr	r3, [pc, #16]	; (8012034 <SDIO_SendCEATACmd+0x1c>)
 8012024:	79fa      	ldrb	r2, [r7, #7]
 8012026:	601a      	str	r2, [r3, #0]
}
 8012028:	370c      	adds	r7, #12
 801202a:	46bd      	mov	sp, r7
 801202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012030:	4770      	bx	lr
 8012032:	bf00      	nop
 8012034:	422581b8 	.word	0x422581b8

08012038 <SDIO_DMACmd>:
  * @param  NewState: new state of the selected SDIO DMA request.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_DMACmd(FunctionalState NewState)
{
 8012038:	b480      	push	{r7}
 801203a:	b083      	sub	sp, #12
 801203c:	af00      	add	r7, sp, #0
 801203e:	4603      	mov	r3, r0
 8012040:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) DCTRL_DMAEN_BB = (uint32_t)NewState;
 8012042:	4b04      	ldr	r3, [pc, #16]	; (8012054 <SDIO_DMACmd+0x1c>)
 8012044:	79fa      	ldrb	r2, [r7, #7]
 8012046:	601a      	str	r2, [r3, #0]
}
 8012048:	370c      	adds	r7, #12
 801204a:	46bd      	mov	sp, r7
 801204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012050:	4770      	bx	lr
 8012052:	bf00      	nop
 8012054:	4225858c 	.word	0x4225858c

08012058 <SDIO_ITConfig>:
  * @param  NewState: new state of the specified SDIO interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None 
  */
void SDIO_ITConfig(uint32_t SDIO_IT, FunctionalState NewState)
{
 8012058:	b480      	push	{r7}
 801205a:	b083      	sub	sp, #12
 801205c:	af00      	add	r7, sp, #0
 801205e:	6078      	str	r0, [r7, #4]
 8012060:	460b      	mov	r3, r1
 8012062:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SDIO_IT(SDIO_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8012064:	78fb      	ldrb	r3, [r7, #3]
 8012066:	2b00      	cmp	r3, #0
 8012068:	d006      	beq.n	8012078 <SDIO_ITConfig+0x20>
  {
    /* Enable the SDIO interrupts */
    SDIO->MASK |= SDIO_IT;
 801206a:	4b09      	ldr	r3, [pc, #36]	; (8012090 <SDIO_ITConfig+0x38>)
 801206c:	4a08      	ldr	r2, [pc, #32]	; (8012090 <SDIO_ITConfig+0x38>)
 801206e:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8012070:	687a      	ldr	r2, [r7, #4]
 8012072:	430a      	orrs	r2, r1
 8012074:	63da      	str	r2, [r3, #60]	; 0x3c
 8012076:	e006      	b.n	8012086 <SDIO_ITConfig+0x2e>
  }
  else
  {
    /* Disable the SDIO interrupts */
    SDIO->MASK &= ~SDIO_IT;
 8012078:	4b05      	ldr	r3, [pc, #20]	; (8012090 <SDIO_ITConfig+0x38>)
 801207a:	4a05      	ldr	r2, [pc, #20]	; (8012090 <SDIO_ITConfig+0x38>)
 801207c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 801207e:	687a      	ldr	r2, [r7, #4]
 8012080:	43d2      	mvns	r2, r2
 8012082:	400a      	ands	r2, r1
 8012084:	63da      	str	r2, [r3, #60]	; 0x3c
  } 
}
 8012086:	370c      	adds	r7, #12
 8012088:	46bd      	mov	sp, r7
 801208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801208e:	4770      	bx	lr
 8012090:	40012c00 	.word	0x40012c00

08012094 <SDIO_GetFlagStatus>:
  *            @arg SDIO_FLAG_SDIOIT:   SD I/O interrupt received
  *            @arg SDIO_FLAG_CEATAEND: CE-ATA command completion signal received for CMD61
  * @retval The new state of SDIO_FLAG (SET or RESET).
  */
FlagStatus SDIO_GetFlagStatus(uint32_t SDIO_FLAG)
{ 
 8012094:	b480      	push	{r7}
 8012096:	b085      	sub	sp, #20
 8012098:	af00      	add	r7, sp, #0
 801209a:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 801209c:	2300      	movs	r3, #0
 801209e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_SDIO_FLAG(SDIO_FLAG));
  
  if ((SDIO->STA & SDIO_FLAG) != (uint32_t)RESET)
 80120a0:	4b08      	ldr	r3, [pc, #32]	; (80120c4 <SDIO_GetFlagStatus+0x30>)
 80120a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80120a4:	687b      	ldr	r3, [r7, #4]
 80120a6:	4013      	ands	r3, r2
 80120a8:	2b00      	cmp	r3, #0
 80120aa:	d002      	beq.n	80120b2 <SDIO_GetFlagStatus+0x1e>
  {
    bitstatus = SET;
 80120ac:	2301      	movs	r3, #1
 80120ae:	73fb      	strb	r3, [r7, #15]
 80120b0:	e001      	b.n	80120b6 <SDIO_GetFlagStatus+0x22>
  }
  else
  {
    bitstatus = RESET;
 80120b2:	2300      	movs	r3, #0
 80120b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80120b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80120b8:	4618      	mov	r0, r3
 80120ba:	3714      	adds	r7, #20
 80120bc:	46bd      	mov	sp, r7
 80120be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120c2:	4770      	bx	lr
 80120c4:	40012c00 	.word	0x40012c00

080120c8 <SDIO_ClearFlag>:
  *            @arg SDIO_FLAG_SDIOIT:   SD I/O interrupt received
  *            @arg SDIO_FLAG_CEATAEND: CE-ATA command completion signal received for CMD61
  * @retval None
  */
void SDIO_ClearFlag(uint32_t SDIO_FLAG)
{ 
 80120c8:	b480      	push	{r7}
 80120ca:	b083      	sub	sp, #12
 80120cc:	af00      	add	r7, sp, #0
 80120ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SDIO_CLEAR_FLAG(SDIO_FLAG));
   
  SDIO->ICR = SDIO_FLAG;
 80120d0:	4b03      	ldr	r3, [pc, #12]	; (80120e0 <SDIO_ClearFlag+0x18>)
 80120d2:	687a      	ldr	r2, [r7, #4]
 80120d4:	639a      	str	r2, [r3, #56]	; 0x38
}
 80120d6:	370c      	adds	r7, #12
 80120d8:	46bd      	mov	sp, r7
 80120da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120de:	4770      	bx	lr
 80120e0:	40012c00 	.word	0x40012c00

080120e4 <SDIO_GetITStatus>:
  *            @arg SDIO_IT_SDIOIT:   SD I/O interrupt received interrupt
  *            @arg SDIO_IT_CEATAEND: CE-ATA command completion signal received for CMD61 interrupt
  * @retval The new state of SDIO_IT (SET or RESET).
  */
ITStatus SDIO_GetITStatus(uint32_t SDIO_IT)
{ 
 80120e4:	b480      	push	{r7}
 80120e6:	b085      	sub	sp, #20
 80120e8:	af00      	add	r7, sp, #0
 80120ea:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 80120ec:	2300      	movs	r3, #0
 80120ee:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_SDIO_GET_IT(SDIO_IT));
  if ((SDIO->STA & SDIO_IT) != (uint32_t)RESET)  
 80120f0:	4b08      	ldr	r3, [pc, #32]	; (8012114 <SDIO_GetITStatus+0x30>)
 80120f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80120f4:	687b      	ldr	r3, [r7, #4]
 80120f6:	4013      	ands	r3, r2
 80120f8:	2b00      	cmp	r3, #0
 80120fa:	d002      	beq.n	8012102 <SDIO_GetITStatus+0x1e>
  {
    bitstatus = SET;
 80120fc:	2301      	movs	r3, #1
 80120fe:	73fb      	strb	r3, [r7, #15]
 8012100:	e001      	b.n	8012106 <SDIO_GetITStatus+0x22>
  }
  else
  {
    bitstatus = RESET;
 8012102:	2300      	movs	r3, #0
 8012104:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8012106:	7bfb      	ldrb	r3, [r7, #15]
}
 8012108:	4618      	mov	r0, r3
 801210a:	3714      	adds	r7, #20
 801210c:	46bd      	mov	sp, r7
 801210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012112:	4770      	bx	lr
 8012114:	40012c00 	.word	0x40012c00

08012118 <SDIO_ClearITPendingBit>:
  *            @arg SDIO_IT_SDIOIT:   SD I/O interrupt received interrupt
  *            @arg SDIO_IT_CEATAEND: CE-ATA command completion signal received for CMD61
  * @retval None
  */
void SDIO_ClearITPendingBit(uint32_t SDIO_IT)
{ 
 8012118:	b480      	push	{r7}
 801211a:	b083      	sub	sp, #12
 801211c:	af00      	add	r7, sp, #0
 801211e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SDIO_CLEAR_IT(SDIO_IT));
   
  SDIO->ICR = SDIO_IT;
 8012120:	4b03      	ldr	r3, [pc, #12]	; (8012130 <SDIO_ClearITPendingBit+0x18>)
 8012122:	687a      	ldr	r2, [r7, #4]
 8012124:	639a      	str	r2, [r3, #56]	; 0x38
}
 8012126:	370c      	adds	r7, #12
 8012128:	46bd      	mov	sp, r7
 801212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801212e:	4770      	bx	lr
 8012130:	40012c00 	.word	0x40012c00

08012134 <SPI_I2S_DeInit>:
  *         is managed by the I2S peripheral clock).
  *             
  * @retval None
  */
void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
{
 8012134:	b580      	push	{r7, lr}
 8012136:	b082      	sub	sp, #8
 8012138:	af00      	add	r7, sp, #0
 801213a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  if (SPIx == SPI1)
 801213c:	687a      	ldr	r2, [r7, #4]
 801213e:	4b2d      	ldr	r3, [pc, #180]	; (80121f4 <SPI_I2S_DeInit+0xc0>)
 8012140:	429a      	cmp	r2, r3
 8012142:	d10a      	bne.n	801215a <SPI_I2S_DeInit+0x26>
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
 8012144:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8012148:	2101      	movs	r1, #1
 801214a:	f7fd fe7b 	bl	800fe44 <RCC_APB2PeriphResetCmd>
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 801214e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8012152:	2100      	movs	r1, #0
 8012154:	f7fd fe76 	bl	800fe44 <RCC_APB2PeriphResetCmd>
 8012158:	e049      	b.n	80121ee <SPI_I2S_DeInit+0xba>
  }
  else if (SPIx == SPI2)
 801215a:	687a      	ldr	r2, [r7, #4]
 801215c:	4b26      	ldr	r3, [pc, #152]	; (80121f8 <SPI_I2S_DeInit+0xc4>)
 801215e:	429a      	cmp	r2, r3
 8012160:	d10a      	bne.n	8012178 <SPI_I2S_DeInit+0x44>
  {
    /* Enable SPI2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
 8012162:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8012166:	2101      	movs	r1, #1
 8012168:	f7fd fe4e 	bl	800fe08 <RCC_APB1PeriphResetCmd>
    /* Release SPI2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
 801216c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8012170:	2100      	movs	r1, #0
 8012172:	f7fd fe49 	bl	800fe08 <RCC_APB1PeriphResetCmd>
 8012176:	e03a      	b.n	80121ee <SPI_I2S_DeInit+0xba>
  }
  else if (SPIx == SPI3)
 8012178:	687a      	ldr	r2, [r7, #4]
 801217a:	4b20      	ldr	r3, [pc, #128]	; (80121fc <SPI_I2S_DeInit+0xc8>)
 801217c:	429a      	cmp	r2, r3
 801217e:	d10a      	bne.n	8012196 <SPI_I2S_DeInit+0x62>
  {
    /* Enable SPI3 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
 8012180:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8012184:	2101      	movs	r1, #1
 8012186:	f7fd fe3f 	bl	800fe08 <RCC_APB1PeriphResetCmd>
    /* Release SPI3 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 801218a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 801218e:	2100      	movs	r1, #0
 8012190:	f7fd fe3a 	bl	800fe08 <RCC_APB1PeriphResetCmd>
 8012194:	e02b      	b.n	80121ee <SPI_I2S_DeInit+0xba>
  }
  else if (SPIx == SPI4)
 8012196:	687a      	ldr	r2, [r7, #4]
 8012198:	4b19      	ldr	r3, [pc, #100]	; (8012200 <SPI_I2S_DeInit+0xcc>)
 801219a:	429a      	cmp	r2, r3
 801219c:	d10a      	bne.n	80121b4 <SPI_I2S_DeInit+0x80>
  {
    /* Enable SPI4 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, ENABLE);
 801219e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80121a2:	2101      	movs	r1, #1
 80121a4:	f7fd fe4e 	bl	800fe44 <RCC_APB2PeriphResetCmd>
    /* Release SPI4 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, DISABLE);
 80121a8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80121ac:	2100      	movs	r1, #0
 80121ae:	f7fd fe49 	bl	800fe44 <RCC_APB2PeriphResetCmd>
 80121b2:	e01c      	b.n	80121ee <SPI_I2S_DeInit+0xba>
  }
  else if (SPIx == SPI5)
 80121b4:	687a      	ldr	r2, [r7, #4]
 80121b6:	4b13      	ldr	r3, [pc, #76]	; (8012204 <SPI_I2S_DeInit+0xd0>)
 80121b8:	429a      	cmp	r2, r3
 80121ba:	d10a      	bne.n	80121d2 <SPI_I2S_DeInit+0x9e>
  {
    /* Enable SPI5 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI5, ENABLE);
 80121bc:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80121c0:	2101      	movs	r1, #1
 80121c2:	f7fd fe3f 	bl	800fe44 <RCC_APB2PeriphResetCmd>
    /* Release SPI5 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI5, DISABLE);
 80121c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80121ca:	2100      	movs	r1, #0
 80121cc:	f7fd fe3a 	bl	800fe44 <RCC_APB2PeriphResetCmd>
 80121d0:	e00d      	b.n	80121ee <SPI_I2S_DeInit+0xba>
  }
  else 
  {
    if (SPIx == SPI6)
 80121d2:	687a      	ldr	r2, [r7, #4]
 80121d4:	4b0c      	ldr	r3, [pc, #48]	; (8012208 <SPI_I2S_DeInit+0xd4>)
 80121d6:	429a      	cmp	r2, r3
 80121d8:	d109      	bne.n	80121ee <SPI_I2S_DeInit+0xba>
    {
      /* Enable SPI6 reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
 80121da:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80121de:	2101      	movs	r1, #1
 80121e0:	f7fd fe30 	bl	800fe44 <RCC_APB2PeriphResetCmd>
      /* Release SPI6 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
 80121e4:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80121e8:	2100      	movs	r1, #0
 80121ea:	f7fd fe2b 	bl	800fe44 <RCC_APB2PeriphResetCmd>
    }
  }
}
 80121ee:	3708      	adds	r7, #8
 80121f0:	46bd      	mov	sp, r7
 80121f2:	bd80      	pop	{r7, pc}
 80121f4:	40013000 	.word	0x40013000
 80121f8:	40003800 	.word	0x40003800
 80121fc:	40003c00 	.word	0x40003c00
 8012200:	40013400 	.word	0x40013400
 8012204:	40015000 	.word	0x40015000
 8012208:	40015400 	.word	0x40015400

0801220c <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 801220c:	b480      	push	{r7}
 801220e:	b085      	sub	sp, #20
 8012210:	af00      	add	r7, sp, #0
 8012212:	6078      	str	r0, [r7, #4]
 8012214:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8012216:	2300      	movs	r3, #0
 8012218:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 801221a:	687b      	ldr	r3, [r7, #4]
 801221c:	881b      	ldrh	r3, [r3, #0]
 801221e:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 8012220:	89fb      	ldrh	r3, [r7, #14]
 8012222:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 8012226:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8012228:	683b      	ldr	r3, [r7, #0]
 801222a:	881a      	ldrh	r2, [r3, #0]
 801222c:	683b      	ldr	r3, [r7, #0]
 801222e:	885b      	ldrh	r3, [r3, #2]
 8012230:	4313      	orrs	r3, r2
 8012232:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8012234:	683b      	ldr	r3, [r7, #0]
 8012236:	889b      	ldrh	r3, [r3, #4]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8012238:	4313      	orrs	r3, r2
 801223a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 801223c:	683b      	ldr	r3, [r7, #0]
 801223e:	88db      	ldrh	r3, [r3, #6]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8012240:	4313      	orrs	r3, r2
 8012242:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8012244:	683b      	ldr	r3, [r7, #0]
 8012246:	891b      	ldrh	r3, [r3, #8]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8012248:	4313      	orrs	r3, r2
 801224a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 801224c:	683b      	ldr	r3, [r7, #0]
 801224e:	895b      	ldrh	r3, [r3, #10]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8012250:	4313      	orrs	r3, r2
 8012252:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8012254:	683b      	ldr	r3, [r7, #0]
 8012256:	899b      	ldrh	r3, [r3, #12]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8012258:	4313      	orrs	r3, r2
 801225a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 801225c:	683b      	ldr	r3, [r7, #0]
 801225e:	89db      	ldrh	r3, [r3, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8012260:	4313      	orrs	r3, r2
 8012262:	b29a      	uxth	r2, r3
 8012264:	89fb      	ldrh	r3, [r7, #14]
 8012266:	4313      	orrs	r3, r2
 8012268:	81fb      	strh	r3, [r7, #14]
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	89fa      	ldrh	r2, [r7, #14]
 801226e:	801a      	strh	r2, [r3, #0]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	8b9b      	ldrh	r3, [r3, #28]
 8012274:	b29b      	uxth	r3, r3
 8012276:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801227a:	b29a      	uxth	r2, r3
 801227c:	687b      	ldr	r3, [r7, #4]
 801227e:	839a      	strh	r2, [r3, #28]
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8012280:	683b      	ldr	r3, [r7, #0]
 8012282:	8a1a      	ldrh	r2, [r3, #16]
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	821a      	strh	r2, [r3, #16]
}
 8012288:	3714      	adds	r7, #20
 801228a:	46bd      	mov	sp, r7
 801228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012290:	4770      	bx	lr
 8012292:	bf00      	nop

08012294 <I2S_Init>:
  *         to the value of the the source clock frequency (in Hz).
  *  
  * @retval None
  */
void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
{
 8012294:	b480      	push	{r7}
 8012296:	b08b      	sub	sp, #44	; 0x2c
 8012298:	af00      	add	r7, sp, #0
 801229a:	6078      	str	r0, [r7, #4]
 801229c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, i2sdiv = 2, i2sodd = 0, packetlength = 1;
 801229e:	2300      	movs	r3, #0
 80122a0:	837b      	strh	r3, [r7, #26]
 80122a2:	2302      	movs	r3, #2
 80122a4:	84fb      	strh	r3, [r7, #38]	; 0x26
 80122a6:	2300      	movs	r3, #0
 80122a8:	84bb      	strh	r3, [r7, #36]	; 0x24
 80122aa:	2301      	movs	r3, #1
 80122ac:	847b      	strh	r3, [r7, #34]	; 0x22
  uint32_t tmp = 0, i2sclk = 0;
 80122ae:	2300      	movs	r3, #0
 80122b0:	61fb      	str	r3, [r7, #28]
 80122b2:	2300      	movs	r3, #0
 80122b4:	617b      	str	r3, [r7, #20]
#ifndef I2S_EXTERNAL_CLOCK_VAL
  uint32_t pllm = 0, plln = 0, pllr = 0;
 80122b6:	2300      	movs	r3, #0
 80122b8:	613b      	str	r3, [r7, #16]
 80122ba:	2300      	movs	r3, #0
 80122bc:	60fb      	str	r3, [r7, #12]
 80122be:	2300      	movs	r3, #0
 80122c0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	8b9b      	ldrh	r3, [r3, #28]
 80122c6:	b29b      	uxth	r3, r3
 80122c8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80122cc:	f023 030f 	bic.w	r3, r3, #15
 80122d0:	b29a      	uxth	r2, r3
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	839a      	strh	r2, [r3, #28]
  SPIx->I2SPR = 0x0002;
 80122d6:	687b      	ldr	r3, [r7, #4]
 80122d8:	2202      	movs	r2, #2
 80122da:	841a      	strh	r2, [r3, #32]
  
  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
 80122dc:	687b      	ldr	r3, [r7, #4]
 80122de:	8b9b      	ldrh	r3, [r3, #28]
 80122e0:	837b      	strh	r3, [r7, #26]
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 80122e2:	683b      	ldr	r3, [r7, #0]
 80122e4:	689b      	ldr	r3, [r3, #8]
 80122e6:	2b02      	cmp	r3, #2
 80122e8:	d104      	bne.n	80122f4 <I2S_Init+0x60>
  {
    i2sodd = (uint16_t)0;
 80122ea:	2300      	movs	r3, #0
 80122ec:	84bb      	strh	r3, [r7, #36]	; 0x24
    i2sdiv = (uint16_t)2;   
 80122ee:	2302      	movs	r3, #2
 80122f0:	84fb      	strh	r3, [r7, #38]	; 0x26
 80122f2:	e071      	b.n	80123d8 <I2S_Init+0x144>
  }
  /* If the requested audio frequency is not the default, compute the prescaler */
  else
  {
    /* Check the frame length (For the Prescaler computing) *******************/
    if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
 80122f4:	683b      	ldr	r3, [r7, #0]
 80122f6:	889b      	ldrh	r3, [r3, #4]
 80122f8:	2b00      	cmp	r3, #0
 80122fa:	d102      	bne.n	8012302 <I2S_Init+0x6e>
    {
      /* Packet length is 16 bits */
      packetlength = 1;
 80122fc:	2301      	movs	r3, #1
 80122fe:	847b      	strh	r3, [r7, #34]	; 0x22
 8012300:	e001      	b.n	8012306 <I2S_Init+0x72>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 2;
 8012302:	2302      	movs	r3, #2
 8012304:	847b      	strh	r3, [r7, #34]	; 0x22
    /* Set the I2S clock to the external clock  value */
    i2sclk = I2S_EXTERNAL_CLOCK_VAL;

  #else /* There is no define for External I2S clock source */
    /* Set PLLI2S as I2S clock source */
    if ((RCC->CFGR & RCC_CFGR_I2SSRC) != 0)
 8012306:	4b4c      	ldr	r3, [pc, #304]	; (8012438 <I2S_Init+0x1a4>)
 8012308:	689b      	ldr	r3, [r3, #8]
 801230a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801230e:	2b00      	cmp	r3, #0
 8012310:	d005      	beq.n	801231e <I2S_Init+0x8a>
    {
      RCC->CFGR &= ~(uint32_t)RCC_CFGR_I2SSRC;
 8012312:	4b49      	ldr	r3, [pc, #292]	; (8012438 <I2S_Init+0x1a4>)
 8012314:	4a48      	ldr	r2, [pc, #288]	; (8012438 <I2S_Init+0x1a4>)
 8012316:	6892      	ldr	r2, [r2, #8]
 8012318:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 801231c:	609a      	str	r2, [r3, #8]
    }    
    
    /* Get the PLLI2SN value */
    plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
 801231e:	4b46      	ldr	r3, [pc, #280]	; (8012438 <I2S_Init+0x1a4>)
 8012320:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8012324:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8012328:	4013      	ands	r3, r2
 801232a:	099b      	lsrs	r3, r3, #6
 801232c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012330:	60fb      	str	r3, [r7, #12]
                      (RCC_PLLI2SCFGR_PLLI2SN >> 6));
    
    /* Get the PLLI2SR value */
    pllr = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28) & \
 8012332:	4b41      	ldr	r3, [pc, #260]	; (8012438 <I2S_Init+0x1a4>)
 8012334:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012338:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 801233c:	0f1b      	lsrs	r3, r3, #28
 801233e:	f003 0307 	and.w	r3, r3, #7
 8012342:	60bb      	str	r3, [r7, #8]
                      (RCC_PLLI2SCFGR_PLLI2SR >> 28));
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
 8012344:	4b3c      	ldr	r3, [pc, #240]	; (8012438 <I2S_Init+0x1a4>)
 8012346:	685b      	ldr	r3, [r3, #4]
 8012348:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801234c:	613b      	str	r3, [r7, #16]

    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 801234e:	4a3b      	ldr	r2, [pc, #236]	; (801243c <I2S_Init+0x1a8>)
 8012350:	693b      	ldr	r3, [r7, #16]
 8012352:	fbb2 f3f3 	udiv	r3, r2, r3
 8012356:	68fa      	ldr	r2, [r7, #12]
 8012358:	fb02 f203 	mul.w	r2, r2, r3
 801235c:	68bb      	ldr	r3, [r7, #8]
 801235e:	fbb2 f3f3 	udiv	r3, r2, r3
 8012362:	617b      	str	r3, [r7, #20]
  #endif /* I2S_EXTERNAL_CLOCK_VAL */
    
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
 8012364:	683b      	ldr	r3, [r7, #0]
 8012366:	88db      	ldrh	r3, [r3, #6]
 8012368:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801236c:	d10f      	bne.n	801238e <I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      tmp = (uint16_t)(((((i2sclk / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 801236e:	697b      	ldr	r3, [r7, #20]
 8012370:	0a1a      	lsrs	r2, r3, #8
 8012372:	4613      	mov	r3, r2
 8012374:	009b      	lsls	r3, r3, #2
 8012376:	4413      	add	r3, r2
 8012378:	005b      	lsls	r3, r3, #1
 801237a:	461a      	mov	r2, r3
 801237c:	683b      	ldr	r3, [r7, #0]
 801237e:	689b      	ldr	r3, [r3, #8]
 8012380:	fbb2 f3f3 	udiv	r3, r2, r3
 8012384:	b29b      	uxth	r3, r3
 8012386:	3305      	adds	r3, #5
 8012388:	b29b      	uxth	r3, r3
 801238a:	61fb      	str	r3, [r7, #28]
 801238c:	e011      	b.n	80123b2 <I2S_Init+0x11e>
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint16_t)(((((i2sclk / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 801238e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012390:	015b      	lsls	r3, r3, #5
 8012392:	697a      	ldr	r2, [r7, #20]
 8012394:	fbb2 f2f3 	udiv	r2, r2, r3
 8012398:	4613      	mov	r3, r2
 801239a:	009b      	lsls	r3, r3, #2
 801239c:	4413      	add	r3, r2
 801239e:	005b      	lsls	r3, r3, #1
 80123a0:	461a      	mov	r2, r3
 80123a2:	683b      	ldr	r3, [r7, #0]
 80123a4:	689b      	ldr	r3, [r3, #8]
 80123a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80123aa:	b29b      	uxth	r3, r3
 80123ac:	3305      	adds	r3, #5
 80123ae:	b29b      	uxth	r3, r3
 80123b0:	61fb      	str	r3, [r7, #28]
    }
    
    /* Remove the flatting point */
    tmp = tmp / 10;  
 80123b2:	69fa      	ldr	r2, [r7, #28]
 80123b4:	4b22      	ldr	r3, [pc, #136]	; (8012440 <I2S_Init+0x1ac>)
 80123b6:	fba3 1302 	umull	r1, r3, r3, r2
 80123ba:	08db      	lsrs	r3, r3, #3
 80123bc:	61fb      	str	r3, [r7, #28]
      
    /* Check the parity of the divider */
    i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
 80123be:	69fb      	ldr	r3, [r7, #28]
 80123c0:	b29b      	uxth	r3, r3
 80123c2:	f003 0301 	and.w	r3, r3, #1
 80123c6:	84bb      	strh	r3, [r7, #36]	; 0x24
   
    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
 80123c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80123ca:	69fa      	ldr	r2, [r7, #28]
 80123cc:	1ad3      	subs	r3, r2, r3
 80123ce:	085b      	lsrs	r3, r3, #1
 80123d0:	84fb      	strh	r3, [r7, #38]	; 0x26
   
    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
 80123d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80123d4:	021b      	lsls	r3, r3, #8
 80123d6:	84bb      	strh	r3, [r7, #36]	; 0x24
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2) || (i2sdiv > 0xFF))
 80123d8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80123da:	2b01      	cmp	r3, #1
 80123dc:	d902      	bls.n	80123e4 <I2S_Init+0x150>
 80123de:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80123e0:	2bff      	cmp	r3, #255	; 0xff
 80123e2:	d903      	bls.n	80123ec <I2S_Init+0x158>
  {
    /* Set the default values */
    i2sdiv = 2;
 80123e4:	2302      	movs	r3, #2
 80123e6:	84fb      	strh	r3, [r7, #38]	; 0x26
    i2sodd = 0;
 80123e8:	2300      	movs	r3, #0
 80123ea:	84bb      	strh	r3, [r7, #36]	; 0x24
  }

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 80123ec:	683b      	ldr	r3, [r7, #0]
 80123ee:	88da      	ldrh	r2, [r3, #6]
 80123f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80123f2:	4313      	orrs	r3, r2
 80123f4:	b29a      	uxth	r2, r3
 80123f6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80123f8:	4313      	orrs	r3, r2
 80123fa:	b29a      	uxth	r2, r3
 80123fc:	687b      	ldr	r3, [r7, #4]
 80123fe:	841a      	strh	r2, [r3, #32]
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 8012400:	683b      	ldr	r3, [r7, #0]
 8012402:	881a      	ldrh	r2, [r3, #0]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 8012404:	683b      	ldr	r3, [r7, #0]
 8012406:	8859      	ldrh	r1, [r3, #2]
 8012408:	683b      	ldr	r3, [r7, #0]
 801240a:	8898      	ldrh	r0, [r3, #4]
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 801240c:	683b      	ldr	r3, [r7, #0]
 801240e:	899b      	ldrh	r3, [r3, #12]
  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 8012410:	4303      	orrs	r3, r0
 8012412:	b29b      	uxth	r3, r3
 8012414:	430b      	orrs	r3, r1
 8012416:	b29b      	uxth	r3, r3

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 8012418:	4313      	orrs	r3, r2
 801241a:	b29a      	uxth	r2, r3
 801241c:	8b7b      	ldrh	r3, [r7, #26]
 801241e:	4313      	orrs	r3, r2
 8012420:	b29b      	uxth	r3, r3
 8012422:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8012426:	837b      	strh	r3, [r7, #26]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 
  /* Write to SPIx I2SCFGR */  
  SPIx->I2SCFGR = tmpreg;
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	8b7a      	ldrh	r2, [r7, #26]
 801242c:	839a      	strh	r2, [r3, #28]
}
 801242e:	372c      	adds	r7, #44	; 0x2c
 8012430:	46bd      	mov	sp, r7
 8012432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012436:	4770      	bx	lr
 8012438:	40023800 	.word	0x40023800
 801243c:	007a1200 	.word	0x007a1200
 8012440:	cccccccd 	.word	0xcccccccd

08012444 <SPI_StructInit>:
  * @brief  Fills each SPI_InitStruct member with its default value.
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure which will be initialized.
  * @retval None
  */
void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
{
 8012444:	b480      	push	{r7}
 8012446:	b083      	sub	sp, #12
 8012448:	af00      	add	r7, sp, #0
 801244a:	6078      	str	r0, [r7, #4]
/*--------------- Reset SPI init structure parameters values -----------------*/
  /* Initialize the SPI_Direction member */
  SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 801244c:	687b      	ldr	r3, [r7, #4]
 801244e:	2200      	movs	r2, #0
 8012450:	801a      	strh	r2, [r3, #0]
  /* initialize the SPI_Mode member */
  SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	2200      	movs	r2, #0
 8012456:	805a      	strh	r2, [r3, #2]
  /* initialize the SPI_DataSize member */
  SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
 8012458:	687b      	ldr	r3, [r7, #4]
 801245a:	2200      	movs	r2, #0
 801245c:	809a      	strh	r2, [r3, #4]
  /* Initialize the SPI_CPOL member */
  SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
 801245e:	687b      	ldr	r3, [r7, #4]
 8012460:	2200      	movs	r2, #0
 8012462:	80da      	strh	r2, [r3, #6]
  /* Initialize the SPI_CPHA member */
  SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	2200      	movs	r2, #0
 8012468:	811a      	strh	r2, [r3, #8]
  /* Initialize the SPI_NSS member */
  SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
 801246a:	687b      	ldr	r3, [r7, #4]
 801246c:	2200      	movs	r2, #0
 801246e:	815a      	strh	r2, [r3, #10]
  /* Initialize the SPI_BaudRatePrescaler member */
  SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	2200      	movs	r2, #0
 8012474:	819a      	strh	r2, [r3, #12]
  /* Initialize the SPI_FirstBit member */
  SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
 8012476:	687b      	ldr	r3, [r7, #4]
 8012478:	2200      	movs	r2, #0
 801247a:	81da      	strh	r2, [r3, #14]
  /* Initialize the SPI_CRCPolynomial member */
  SPI_InitStruct->SPI_CRCPolynomial = 7;
 801247c:	687b      	ldr	r3, [r7, #4]
 801247e:	2207      	movs	r2, #7
 8012480:	821a      	strh	r2, [r3, #16]
}
 8012482:	370c      	adds	r7, #12
 8012484:	46bd      	mov	sp, r7
 8012486:	f85d 7b04 	ldr.w	r7, [sp], #4
 801248a:	4770      	bx	lr

0801248c <I2S_StructInit>:
  * @brief  Fills each I2S_InitStruct member with its default value.
  * @param  I2S_InitStruct: pointer to a I2S_InitTypeDef structure which will be initialized.
  * @retval None
  */
void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct)
{
 801248c:	b480      	push	{r7}
 801248e:	b083      	sub	sp, #12
 8012490:	af00      	add	r7, sp, #0
 8012492:	6078      	str	r0, [r7, #4]
/*--------------- Reset I2S init structure parameters values -----------------*/
  /* Initialize the I2S_Mode member */
  I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
 8012494:	687b      	ldr	r3, [r7, #4]
 8012496:	2200      	movs	r2, #0
 8012498:	801a      	strh	r2, [r3, #0]
  
  /* Initialize the I2S_Standard member */
  I2S_InitStruct->I2S_Standard = I2S_Standard_Phillips;
 801249a:	687b      	ldr	r3, [r7, #4]
 801249c:	2200      	movs	r2, #0
 801249e:	805a      	strh	r2, [r3, #2]
  
  /* Initialize the I2S_DataFormat member */
  I2S_InitStruct->I2S_DataFormat = I2S_DataFormat_16b;
 80124a0:	687b      	ldr	r3, [r7, #4]
 80124a2:	2200      	movs	r2, #0
 80124a4:	809a      	strh	r2, [r3, #4]
  
  /* Initialize the I2S_MCLKOutput member */
  I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;
 80124a6:	687b      	ldr	r3, [r7, #4]
 80124a8:	2200      	movs	r2, #0
 80124aa:	80da      	strh	r2, [r3, #6]
  
  /* Initialize the I2S_AudioFreq member */
  I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
 80124ac:	687b      	ldr	r3, [r7, #4]
 80124ae:	2202      	movs	r2, #2
 80124b0:	609a      	str	r2, [r3, #8]
  
  /* Initialize the I2S_CPOL member */
  I2S_InitStruct->I2S_CPOL = I2S_CPOL_Low;
 80124b2:	687b      	ldr	r3, [r7, #4]
 80124b4:	2200      	movs	r2, #0
 80124b6:	819a      	strh	r2, [r3, #12]
}
 80124b8:	370c      	adds	r7, #12
 80124ba:	46bd      	mov	sp, r7
 80124bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124c0:	4770      	bx	lr
 80124c2:	bf00      	nop

080124c4 <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 80124c4:	b480      	push	{r7}
 80124c6:	b083      	sub	sp, #12
 80124c8:	af00      	add	r7, sp, #0
 80124ca:	6078      	str	r0, [r7, #4]
 80124cc:	460b      	mov	r3, r1
 80124ce:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80124d0:	78fb      	ldrb	r3, [r7, #3]
 80124d2:	2b00      	cmp	r3, #0
 80124d4:	d008      	beq.n	80124e8 <SPI_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 80124d6:	687b      	ldr	r3, [r7, #4]
 80124d8:	881b      	ldrh	r3, [r3, #0]
 80124da:	b29b      	uxth	r3, r3
 80124dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80124e0:	b29a      	uxth	r2, r3
 80124e2:	687b      	ldr	r3, [r7, #4]
 80124e4:	801a      	strh	r2, [r3, #0]
 80124e6:	e007      	b.n	80124f8 <SPI_Cmd+0x34>
  }
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 80124e8:	687b      	ldr	r3, [r7, #4]
 80124ea:	881b      	ldrh	r3, [r3, #0]
 80124ec:	b29b      	uxth	r3, r3
 80124ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80124f2:	b29a      	uxth	r2, r3
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	801a      	strh	r2, [r3, #0]
  }
}
 80124f8:	370c      	adds	r7, #12
 80124fa:	46bd      	mov	sp, r7
 80124fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012500:	4770      	bx	lr
 8012502:	bf00      	nop

08012504 <I2S_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2S_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8012504:	b480      	push	{r7}
 8012506:	b083      	sub	sp, #12
 8012508:	af00      	add	r7, sp, #0
 801250a:	6078      	str	r0, [r7, #4]
 801250c:	460b      	mov	r3, r1
 801250e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_23_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8012510:	78fb      	ldrb	r3, [r7, #3]
 8012512:	2b00      	cmp	r3, #0
 8012514:	d008      	beq.n	8012528 <I2S_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral (in I2S mode) */
    SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
 8012516:	687b      	ldr	r3, [r7, #4]
 8012518:	8b9b      	ldrh	r3, [r3, #28]
 801251a:	b29b      	uxth	r3, r3
 801251c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8012520:	b29a      	uxth	r2, r3
 8012522:	687b      	ldr	r3, [r7, #4]
 8012524:	839a      	strh	r2, [r3, #28]
 8012526:	e007      	b.n	8012538 <I2S_Cmd+0x34>
  }
  else
  {
    /* Disable the selected SPI peripheral in I2S mode */
    SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SE);
 8012528:	687b      	ldr	r3, [r7, #4]
 801252a:	8b9b      	ldrh	r3, [r3, #28]
 801252c:	b29b      	uxth	r3, r3
 801252e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8012532:	b29a      	uxth	r2, r3
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	839a      	strh	r2, [r3, #28]
  }
}
 8012538:	370c      	adds	r7, #12
 801253a:	46bd      	mov	sp, r7
 801253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012540:	4770      	bx	lr
 8012542:	bf00      	nop

08012544 <SPI_DataSizeConfig>:
  *            @arg SPI_DataSize_16b: Set data frame format to 16bit
  *            @arg SPI_DataSize_8b: Set data frame format to 8bit
  * @retval None
  */
void SPI_DataSizeConfig(SPI_TypeDef* SPIx, uint16_t SPI_DataSize)
{
 8012544:	b480      	push	{r7}
 8012546:	b083      	sub	sp, #12
 8012548:	af00      	add	r7, sp, #0
 801254a:	6078      	str	r0, [r7, #4]
 801254c:	460b      	mov	r3, r1
 801254e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DATASIZE(SPI_DataSize));
  /* Clear DFF bit */
  SPIx->CR1 &= (uint16_t)~SPI_DataSize_16b;
 8012550:	687b      	ldr	r3, [r7, #4]
 8012552:	881b      	ldrh	r3, [r3, #0]
 8012554:	b29b      	uxth	r3, r3
 8012556:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801255a:	b29a      	uxth	r2, r3
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	801a      	strh	r2, [r3, #0]
  /* Set new DFF bit value */
  SPIx->CR1 |= SPI_DataSize;
 8012560:	687b      	ldr	r3, [r7, #4]
 8012562:	881b      	ldrh	r3, [r3, #0]
 8012564:	b29a      	uxth	r2, r3
 8012566:	887b      	ldrh	r3, [r7, #2]
 8012568:	4313      	orrs	r3, r2
 801256a:	b29a      	uxth	r2, r3
 801256c:	687b      	ldr	r3, [r7, #4]
 801256e:	801a      	strh	r2, [r3, #0]
}
 8012570:	370c      	adds	r7, #12
 8012572:	46bd      	mov	sp, r7
 8012574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012578:	4770      	bx	lr
 801257a:	bf00      	nop

0801257c <SPI_BiDirectionalLineConfig>:
  *            @arg SPI_Direction_Tx: Selects Tx transmission direction
  *            @arg SPI_Direction_Rx: Selects Rx receive direction
  * @retval None
  */
void SPI_BiDirectionalLineConfig(SPI_TypeDef* SPIx, uint16_t SPI_Direction)
{
 801257c:	b480      	push	{r7}
 801257e:	b083      	sub	sp, #12
 8012580:	af00      	add	r7, sp, #0
 8012582:	6078      	str	r0, [r7, #4]
 8012584:	460b      	mov	r3, r1
 8012586:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DIRECTION(SPI_Direction));
  if (SPI_Direction == SPI_Direction_Tx)
 8012588:	887b      	ldrh	r3, [r7, #2]
 801258a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801258e:	d108      	bne.n	80125a2 <SPI_BiDirectionalLineConfig+0x26>
  {
    /* Set the Tx only mode */
    SPIx->CR1 |= SPI_Direction_Tx;
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	881b      	ldrh	r3, [r3, #0]
 8012594:	b29b      	uxth	r3, r3
 8012596:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801259a:	b29a      	uxth	r2, r3
 801259c:	687b      	ldr	r3, [r7, #4]
 801259e:	801a      	strh	r2, [r3, #0]
 80125a0:	e007      	b.n	80125b2 <SPI_BiDirectionalLineConfig+0x36>
  }
  else
  {
    /* Set the Rx only mode */
    SPIx->CR1 &= SPI_Direction_Rx;
 80125a2:	687b      	ldr	r3, [r7, #4]
 80125a4:	881b      	ldrh	r3, [r3, #0]
 80125a6:	b29b      	uxth	r3, r3
 80125a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80125ac:	b29a      	uxth	r2, r3
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	801a      	strh	r2, [r3, #0]
  }
}
 80125b2:	370c      	adds	r7, #12
 80125b4:	46bd      	mov	sp, r7
 80125b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125ba:	4770      	bx	lr

080125bc <SPI_NSSInternalSoftwareConfig>:
  *            @arg SPI_NSSInternalSoft_Set: Set NSS pin internally
  *            @arg SPI_NSSInternalSoft_Reset: Reset NSS pin internally
  * @retval None
  */
void SPI_NSSInternalSoftwareConfig(SPI_TypeDef* SPIx, uint16_t SPI_NSSInternalSoft)
{
 80125bc:	b480      	push	{r7}
 80125be:	b083      	sub	sp, #12
 80125c0:	af00      	add	r7, sp, #0
 80125c2:	6078      	str	r0, [r7, #4]
 80125c4:	460b      	mov	r3, r1
 80125c6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));
  if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
 80125c8:	887a      	ldrh	r2, [r7, #2]
 80125ca:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80125ce:	429a      	cmp	r2, r3
 80125d0:	d008      	beq.n	80125e4 <SPI_NSSInternalSoftwareConfig+0x28>
  {
    /* Set NSS pin internally by software */
    SPIx->CR1 |= SPI_NSSInternalSoft_Set;
 80125d2:	687b      	ldr	r3, [r7, #4]
 80125d4:	881b      	ldrh	r3, [r3, #0]
 80125d6:	b29b      	uxth	r3, r3
 80125d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80125dc:	b29a      	uxth	r2, r3
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	801a      	strh	r2, [r3, #0]
 80125e2:	e007      	b.n	80125f4 <SPI_NSSInternalSoftwareConfig+0x38>
  }
  else
  {
    /* Reset NSS pin internally by software */
    SPIx->CR1 &= SPI_NSSInternalSoft_Reset;
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	881b      	ldrh	r3, [r3, #0]
 80125e8:	b29b      	uxth	r3, r3
 80125ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80125ee:	b29a      	uxth	r2, r3
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	801a      	strh	r2, [r3, #0]
  }
}
 80125f4:	370c      	adds	r7, #12
 80125f6:	46bd      	mov	sp, r7
 80125f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125fc:	4770      	bx	lr
 80125fe:	bf00      	nop

08012600 <SPI_SSOutputCmd>:
  * @param  NewState: new state of the SPIx SS output. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8012600:	b480      	push	{r7}
 8012602:	b083      	sub	sp, #12
 8012604:	af00      	add	r7, sp, #0
 8012606:	6078      	str	r0, [r7, #4]
 8012608:	460b      	mov	r3, r1
 801260a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 801260c:	78fb      	ldrb	r3, [r7, #3]
 801260e:	2b00      	cmp	r3, #0
 8012610:	d008      	beq.n	8012624 <SPI_SSOutputCmd+0x24>
  {
    /* Enable the selected SPI SS output */
    SPIx->CR2 |= (uint16_t)SPI_CR2_SSOE;
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	889b      	ldrh	r3, [r3, #4]
 8012616:	b29b      	uxth	r3, r3
 8012618:	f043 0304 	orr.w	r3, r3, #4
 801261c:	b29a      	uxth	r2, r3
 801261e:	687b      	ldr	r3, [r7, #4]
 8012620:	809a      	strh	r2, [r3, #4]
 8012622:	e007      	b.n	8012634 <SPI_SSOutputCmd+0x34>
  }
  else
  {
    /* Disable the selected SPI SS output */
    SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_SSOE);
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	889b      	ldrh	r3, [r3, #4]
 8012628:	b29b      	uxth	r3, r3
 801262a:	f023 0304 	bic.w	r3, r3, #4
 801262e:	b29a      	uxth	r2, r3
 8012630:	687b      	ldr	r3, [r7, #4]
 8012632:	809a      	strh	r2, [r3, #4]
  }
}
 8012634:	370c      	adds	r7, #12
 8012636:	46bd      	mov	sp, r7
 8012638:	f85d 7b04 	ldr.w	r7, [sp], #4
 801263c:	4770      	bx	lr
 801263e:	bf00      	nop

08012640 <SPI_TIModeCmd>:
  * @param  NewState: new state of the selected SPI TI communication mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_TIModeCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8012640:	b480      	push	{r7}
 8012642:	b083      	sub	sp, #12
 8012644:	af00      	add	r7, sp, #0
 8012646:	6078      	str	r0, [r7, #4]
 8012648:	460b      	mov	r3, r1
 801264a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 801264c:	78fb      	ldrb	r3, [r7, #3]
 801264e:	2b00      	cmp	r3, #0
 8012650:	d008      	beq.n	8012664 <SPI_TIModeCmd+0x24>
  {
    /* Enable the TI mode for the selected SPI peripheral */
    SPIx->CR2 |= SPI_CR2_FRF;
 8012652:	687b      	ldr	r3, [r7, #4]
 8012654:	889b      	ldrh	r3, [r3, #4]
 8012656:	b29b      	uxth	r3, r3
 8012658:	f043 0310 	orr.w	r3, r3, #16
 801265c:	b29a      	uxth	r2, r3
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	809a      	strh	r2, [r3, #4]
 8012662:	e007      	b.n	8012674 <SPI_TIModeCmd+0x34>
  }
  else
  {
    /* Disable the TI mode for the selected SPI peripheral */
    SPIx->CR2 &= (uint16_t)~SPI_CR2_FRF;
 8012664:	687b      	ldr	r3, [r7, #4]
 8012666:	889b      	ldrh	r3, [r3, #4]
 8012668:	b29b      	uxth	r3, r3
 801266a:	f023 0310 	bic.w	r3, r3, #16
 801266e:	b29a      	uxth	r2, r3
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	809a      	strh	r2, [r3, #4]
  }
}
 8012674:	370c      	adds	r7, #12
 8012676:	46bd      	mov	sp, r7
 8012678:	f85d 7b04 	ldr.w	r7, [sp], #4
 801267c:	4770      	bx	lr
 801267e:	bf00      	nop

08012680 <I2S_FullDuplexConfig>:
  * @note   The I2S full duplex extension can be configured in slave mode only.    
  *  
  * @retval None
  */
void I2S_FullDuplexConfig(SPI_TypeDef* I2Sxext, I2S_InitTypeDef* I2S_InitStruct)
{
 8012680:	b480      	push	{r7}
 8012682:	b085      	sub	sp, #20
 8012684:	af00      	add	r7, sp, #0
 8012686:	6078      	str	r0, [r7, #4]
 8012688:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, tmp = 0;
 801268a:	2300      	movs	r3, #0
 801268c:	81bb      	strh	r3, [r7, #12]
 801268e:	2300      	movs	r3, #0
 8012690:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_I2S_DATA_FORMAT(I2S_InitStruct->I2S_DataFormat));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  I2Sxext->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 8012692:	687b      	ldr	r3, [r7, #4]
 8012694:	8b9b      	ldrh	r3, [r3, #28]
 8012696:	b29b      	uxth	r3, r3
 8012698:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 801269c:	f023 030f 	bic.w	r3, r3, #15
 80126a0:	b29a      	uxth	r2, r3
 80126a2:	687b      	ldr	r3, [r7, #4]
 80126a4:	839a      	strh	r2, [r3, #28]
  I2Sxext->I2SPR = 0x0002;
 80126a6:	687b      	ldr	r3, [r7, #4]
 80126a8:	2202      	movs	r2, #2
 80126aa:	841a      	strh	r2, [r3, #32]
  
  /* Get the I2SCFGR register value */
  tmpreg = I2Sxext->I2SCFGR;
 80126ac:	687b      	ldr	r3, [r7, #4]
 80126ae:	8b9b      	ldrh	r3, [r3, #28]
 80126b0:	81bb      	strh	r3, [r7, #12]
  
  /* Get the mode to be configured for the extended I2S */
  if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterTx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveTx))
 80126b2:	683b      	ldr	r3, [r7, #0]
 80126b4:	881b      	ldrh	r3, [r3, #0]
 80126b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80126ba:	d003      	beq.n	80126c4 <I2S_FullDuplexConfig+0x44>
 80126bc:	683b      	ldr	r3, [r7, #0]
 80126be:	881b      	ldrh	r3, [r3, #0]
 80126c0:	2b00      	cmp	r3, #0
 80126c2:	d103      	bne.n	80126cc <I2S_FullDuplexConfig+0x4c>
  {
    tmp = I2S_Mode_SlaveRx;
 80126c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80126c8:	81fb      	strh	r3, [r7, #14]
 80126ca:	e00b      	b.n	80126e4 <I2S_FullDuplexConfig+0x64>
  }
  else
  {
    if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterRx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveRx))
 80126cc:	683b      	ldr	r3, [r7, #0]
 80126ce:	881b      	ldrh	r3, [r3, #0]
 80126d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80126d4:	d004      	beq.n	80126e0 <I2S_FullDuplexConfig+0x60>
 80126d6:	683b      	ldr	r3, [r7, #0]
 80126d8:	881b      	ldrh	r3, [r3, #0]
 80126da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80126de:	d101      	bne.n	80126e4 <I2S_FullDuplexConfig+0x64>
    {
      tmp = I2S_Mode_SlaveTx;
 80126e0:	2300      	movs	r3, #0
 80126e2:	81fb      	strh	r3, [r7, #14]
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 80126e4:	683b      	ldr	r3, [r7, #0]
 80126e6:	885a      	ldrh	r2, [r3, #2]
 80126e8:	683b      	ldr	r3, [r7, #0]
 80126ea:	8899      	ldrh	r1, [r3, #4]
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 80126ec:	683b      	ldr	r3, [r7, #0]
 80126ee:	899b      	ldrh	r3, [r3, #12]
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 80126f0:	430b      	orrs	r3, r1
 80126f2:	b29b      	uxth	r3, r3
 80126f4:	4313      	orrs	r3, r2
 80126f6:	b29a      	uxth	r2, r3
    }
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80126f8:	89fb      	ldrh	r3, [r7, #14]
 80126fa:	4313      	orrs	r3, r2
 80126fc:	b29a      	uxth	r2, r3
 80126fe:	89bb      	ldrh	r3, [r7, #12]
 8012700:	4313      	orrs	r3, r2
 8012702:	b29b      	uxth	r3, r3
 8012704:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8012708:	81bb      	strh	r3, [r7, #12]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 
  /* Write to SPIx I2SCFGR */  
  I2Sxext->I2SCFGR = tmpreg;
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	89ba      	ldrh	r2, [r7, #12]
 801270e:	839a      	strh	r2, [r3, #28]
}
 8012710:	3714      	adds	r7, #20
 8012712:	46bd      	mov	sp, r7
 8012714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012718:	4770      	bx	lr
 801271a:	bf00      	nop

0801271c <SPI_I2S_ReceiveData>:
  * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2, 3, 4, 5 or 6 
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode. 
  * @retval The value of the received data.
  */
uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
{
 801271c:	b480      	push	{r7}
 801271e:	b083      	sub	sp, #12
 8012720:	af00      	add	r7, sp, #0
 8012722:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Return the data in the DR register */
  return SPIx->DR;
 8012724:	687b      	ldr	r3, [r7, #4]
 8012726:	899b      	ldrh	r3, [r3, #12]
 8012728:	b29b      	uxth	r3, r3
}
 801272a:	4618      	mov	r0, r3
 801272c:	370c      	adds	r7, #12
 801272e:	46bd      	mov	sp, r7
 8012730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012734:	4770      	bx	lr
 8012736:	bf00      	nop

08012738 <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 8012738:	b480      	push	{r7}
 801273a:	b083      	sub	sp, #12
 801273c:	af00      	add	r7, sp, #0
 801273e:	6078      	str	r0, [r7, #4]
 8012740:	460b      	mov	r3, r1
 8012742:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8012744:	687b      	ldr	r3, [r7, #4]
 8012746:	887a      	ldrh	r2, [r7, #2]
 8012748:	819a      	strh	r2, [r3, #12]
}
 801274a:	370c      	adds	r7, #12
 801274c:	46bd      	mov	sp, r7
 801274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012752:	4770      	bx	lr

08012754 <SPI_CalculateCRC>:
  * @param  NewState: new state of the SPIx CRC value calculation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_CalculateCRC(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8012754:	b480      	push	{r7}
 8012756:	b083      	sub	sp, #12
 8012758:	af00      	add	r7, sp, #0
 801275a:	6078      	str	r0, [r7, #4]
 801275c:	460b      	mov	r3, r1
 801275e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8012760:	78fb      	ldrb	r3, [r7, #3]
 8012762:	2b00      	cmp	r3, #0
 8012764:	d008      	beq.n	8012778 <SPI_CalculateCRC+0x24>
  {
    /* Enable the selected SPI CRC calculation */
    SPIx->CR1 |= SPI_CR1_CRCEN;
 8012766:	687b      	ldr	r3, [r7, #4]
 8012768:	881b      	ldrh	r3, [r3, #0]
 801276a:	b29b      	uxth	r3, r3
 801276c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8012770:	b29a      	uxth	r2, r3
 8012772:	687b      	ldr	r3, [r7, #4]
 8012774:	801a      	strh	r2, [r3, #0]
 8012776:	e007      	b.n	8012788 <SPI_CalculateCRC+0x34>
  }
  else
  {
    /* Disable the selected SPI CRC calculation */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_CRCEN);
 8012778:	687b      	ldr	r3, [r7, #4]
 801277a:	881b      	ldrh	r3, [r3, #0]
 801277c:	b29b      	uxth	r3, r3
 801277e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8012782:	b29a      	uxth	r2, r3
 8012784:	687b      	ldr	r3, [r7, #4]
 8012786:	801a      	strh	r2, [r3, #0]
  }
}
 8012788:	370c      	adds	r7, #12
 801278a:	46bd      	mov	sp, r7
 801278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012790:	4770      	bx	lr
 8012792:	bf00      	nop

08012794 <SPI_TransmitCRC>:
  * @brief  Transmit the SPIx CRC value.
  * @param  SPIx: where x can be 1, 2, 3, 4, 5 or 6 to select the SPI peripheral.
  * @retval None
  */
void SPI_TransmitCRC(SPI_TypeDef* SPIx)
{
 8012794:	b480      	push	{r7}
 8012796:	b083      	sub	sp, #12
 8012798:	af00      	add	r7, sp, #0
 801279a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Enable the selected SPI CRC transmission */
  SPIx->CR1 |= SPI_CR1_CRCNEXT;
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	881b      	ldrh	r3, [r3, #0]
 80127a0:	b29b      	uxth	r3, r3
 80127a2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80127a6:	b29a      	uxth	r2, r3
 80127a8:	687b      	ldr	r3, [r7, #4]
 80127aa:	801a      	strh	r2, [r3, #0]
}
 80127ac:	370c      	adds	r7, #12
 80127ae:	46bd      	mov	sp, r7
 80127b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127b4:	4770      	bx	lr
 80127b6:	bf00      	nop

080127b8 <SPI_GetCRC>:
  *            @arg SPI_CRC_Tx: Selects Tx CRC register
  *            @arg SPI_CRC_Rx: Selects Rx CRC register
  * @retval The selected CRC register value..
  */
uint16_t SPI_GetCRC(SPI_TypeDef* SPIx, uint8_t SPI_CRC)
{
 80127b8:	b480      	push	{r7}
 80127ba:	b085      	sub	sp, #20
 80127bc:	af00      	add	r7, sp, #0
 80127be:	6078      	str	r0, [r7, #4]
 80127c0:	460b      	mov	r3, r1
 80127c2:	70fb      	strb	r3, [r7, #3]
  uint16_t crcreg = 0;
 80127c4:	2300      	movs	r3, #0
 80127c6:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_CRC(SPI_CRC));
  if (SPI_CRC != SPI_CRC_Rx)
 80127c8:	78fb      	ldrb	r3, [r7, #3]
 80127ca:	2b01      	cmp	r3, #1
 80127cc:	d003      	beq.n	80127d6 <SPI_GetCRC+0x1e>
  {
    /* Get the Tx CRC register */
    crcreg = SPIx->TXCRCR;
 80127ce:	687b      	ldr	r3, [r7, #4]
 80127d0:	8b1b      	ldrh	r3, [r3, #24]
 80127d2:	81fb      	strh	r3, [r7, #14]
 80127d4:	e002      	b.n	80127dc <SPI_GetCRC+0x24>
  }
  else
  {
    /* Get the Rx CRC register */
    crcreg = SPIx->RXCRCR;
 80127d6:	687b      	ldr	r3, [r7, #4]
 80127d8:	8a9b      	ldrh	r3, [r3, #20]
 80127da:	81fb      	strh	r3, [r7, #14]
  }
  /* Return the selected CRC register */
  return crcreg;
 80127dc:	89fb      	ldrh	r3, [r7, #14]
}
 80127de:	4618      	mov	r0, r3
 80127e0:	3714      	adds	r7, #20
 80127e2:	46bd      	mov	sp, r7
 80127e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127e8:	4770      	bx	lr
 80127ea:	bf00      	nop

080127ec <SPI_GetCRCPolynomial>:
  * @brief  Returns the CRC Polynomial register value for the specified SPI.
  * @param  SPIx: where x can be 1, 2, 3, 4, 5 or 6 to select the SPI peripheral.
  * @retval The CRC Polynomial register value.
  */
uint16_t SPI_GetCRCPolynomial(SPI_TypeDef* SPIx)
{
 80127ec:	b480      	push	{r7}
 80127ee:	b083      	sub	sp, #12
 80127f0:	af00      	add	r7, sp, #0
 80127f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Return the CRC polynomial register */
  return SPIx->CRCPR;
 80127f4:	687b      	ldr	r3, [r7, #4]
 80127f6:	8a1b      	ldrh	r3, [r3, #16]
 80127f8:	b29b      	uxth	r3, r3
}
 80127fa:	4618      	mov	r0, r3
 80127fc:	370c      	adds	r7, #12
 80127fe:	46bd      	mov	sp, r7
 8012800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012804:	4770      	bx	lr
 8012806:	bf00      	nop

08012808 <SPI_I2S_DMACmd>:
  * @param  NewState: new state of the selected SPI DMA transfer request.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_I2S_DMACmd(SPI_TypeDef* SPIx, uint16_t SPI_I2S_DMAReq, FunctionalState NewState)
{
 8012808:	b480      	push	{r7}
 801280a:	b083      	sub	sp, #12
 801280c:	af00      	add	r7, sp, #0
 801280e:	6078      	str	r0, [r7, #4]
 8012810:	4613      	mov	r3, r2
 8012812:	460a      	mov	r2, r1
 8012814:	807a      	strh	r2, [r7, #2]
 8012816:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));

  if (NewState != DISABLE)
 8012818:	787b      	ldrb	r3, [r7, #1]
 801281a:	2b00      	cmp	r3, #0
 801281c:	d008      	beq.n	8012830 <SPI_I2S_DMACmd+0x28>
  {
    /* Enable the selected SPI DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	889b      	ldrh	r3, [r3, #4]
 8012822:	b29a      	uxth	r2, r3
 8012824:	887b      	ldrh	r3, [r7, #2]
 8012826:	4313      	orrs	r3, r2
 8012828:	b29a      	uxth	r2, r3
 801282a:	687b      	ldr	r3, [r7, #4]
 801282c:	809a      	strh	r2, [r3, #4]
 801282e:	e009      	b.n	8012844 <SPI_I2S_DMACmd+0x3c>
  }
  else
  {
    /* Disable the selected SPI DMA requests */
    SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
 8012830:	687b      	ldr	r3, [r7, #4]
 8012832:	889b      	ldrh	r3, [r3, #4]
 8012834:	b29a      	uxth	r2, r3
 8012836:	887b      	ldrh	r3, [r7, #2]
 8012838:	43db      	mvns	r3, r3
 801283a:	b29b      	uxth	r3, r3
 801283c:	4013      	ands	r3, r2
 801283e:	b29a      	uxth	r2, r3
 8012840:	687b      	ldr	r3, [r7, #4]
 8012842:	809a      	strh	r2, [r3, #4]
  }
}
 8012844:	370c      	adds	r7, #12
 8012846:	46bd      	mov	sp, r7
 8012848:	f85d 7b04 	ldr.w	r7, [sp], #4
 801284c:	4770      	bx	lr
 801284e:	bf00      	nop

08012850 <SPI_I2S_ITConfig>:
  * @param  NewState: new state of the specified SPI interrupt.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_I2S_ITConfig(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT, FunctionalState NewState)
{
 8012850:	b480      	push	{r7}
 8012852:	b085      	sub	sp, #20
 8012854:	af00      	add	r7, sp, #0
 8012856:	6078      	str	r0, [r7, #4]
 8012858:	4613      	mov	r3, r2
 801285a:	460a      	mov	r2, r1
 801285c:	70fa      	strb	r2, [r7, #3]
 801285e:	70bb      	strb	r3, [r7, #2]
  uint16_t itpos = 0, itmask = 0 ;
 8012860:	2300      	movs	r3, #0
 8012862:	81fb      	strh	r3, [r7, #14]
 8012864:	2300      	movs	r3, #0
 8012866:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_CONFIG_IT(SPI_I2S_IT));

  /* Get the SPI IT index */
  itpos = SPI_I2S_IT >> 4;
 8012868:	78fb      	ldrb	r3, [r7, #3]
 801286a:	091b      	lsrs	r3, r3, #4
 801286c:	b2db      	uxtb	r3, r3
 801286e:	81fb      	strh	r3, [r7, #14]

  /* Set the IT mask */
  itmask = (uint16_t)1 << (uint16_t)itpos;
 8012870:	89fb      	ldrh	r3, [r7, #14]
 8012872:	2201      	movs	r2, #1
 8012874:	fa02 f303 	lsl.w	r3, r2, r3
 8012878:	81bb      	strh	r3, [r7, #12]

  if (NewState != DISABLE)
 801287a:	78bb      	ldrb	r3, [r7, #2]
 801287c:	2b00      	cmp	r3, #0
 801287e:	d008      	beq.n	8012892 <SPI_I2S_ITConfig+0x42>
  {
    /* Enable the selected SPI interrupt */
    SPIx->CR2 |= itmask;
 8012880:	687b      	ldr	r3, [r7, #4]
 8012882:	889b      	ldrh	r3, [r3, #4]
 8012884:	b29a      	uxth	r2, r3
 8012886:	89bb      	ldrh	r3, [r7, #12]
 8012888:	4313      	orrs	r3, r2
 801288a:	b29a      	uxth	r2, r3
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	809a      	strh	r2, [r3, #4]
 8012890:	e009      	b.n	80128a6 <SPI_I2S_ITConfig+0x56>
  }
  else
  {
    /* Disable the selected SPI interrupt */
    SPIx->CR2 &= (uint16_t)~itmask;
 8012892:	687b      	ldr	r3, [r7, #4]
 8012894:	889b      	ldrh	r3, [r3, #4]
 8012896:	b29a      	uxth	r2, r3
 8012898:	89bb      	ldrh	r3, [r7, #12]
 801289a:	43db      	mvns	r3, r3
 801289c:	b29b      	uxth	r3, r3
 801289e:	4013      	ands	r3, r2
 80128a0:	b29a      	uxth	r2, r3
 80128a2:	687b      	ldr	r3, [r7, #4]
 80128a4:	809a      	strh	r2, [r3, #4]
  }
}
 80128a6:	3714      	adds	r7, #20
 80128a8:	46bd      	mov	sp, r7
 80128aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128ae:	4770      	bx	lr

080128b0 <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 80128b0:	b480      	push	{r7}
 80128b2:	b085      	sub	sp, #20
 80128b4:	af00      	add	r7, sp, #0
 80128b6:	6078      	str	r0, [r7, #4]
 80128b8:	460b      	mov	r3, r1
 80128ba:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 80128bc:	2300      	movs	r3, #0
 80128be:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 80128c0:	687b      	ldr	r3, [r7, #4]
 80128c2:	891b      	ldrh	r3, [r3, #8]
 80128c4:	b29a      	uxth	r2, r3
 80128c6:	887b      	ldrh	r3, [r7, #2]
 80128c8:	4013      	ands	r3, r2
 80128ca:	b29b      	uxth	r3, r3
 80128cc:	2b00      	cmp	r3, #0
 80128ce:	d002      	beq.n	80128d6 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 80128d0:	2301      	movs	r3, #1
 80128d2:	73fb      	strb	r3, [r7, #15]
 80128d4:	e001      	b.n	80128da <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 80128d6:	2300      	movs	r3, #0
 80128d8:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 80128da:	7bfb      	ldrb	r3, [r7, #15]
}
 80128dc:	4618      	mov	r0, r3
 80128de:	3714      	adds	r7, #20
 80128e0:	46bd      	mov	sp, r7
 80128e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128e6:	4770      	bx	lr

080128e8 <SPI_I2S_ClearFlag>:
  *          write operation to SPI_CR1 register (SPI_Cmd() to enable the SPI).
  *  
  * @retval None
  */
void SPI_I2S_ClearFlag(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 80128e8:	b480      	push	{r7}
 80128ea:	b083      	sub	sp, #12
 80128ec:	af00      	add	r7, sp, #0
 80128ee:	6078      	str	r0, [r7, #4]
 80128f0:	460b      	mov	r3, r1
 80128f2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_CLEAR_FLAG(SPI_I2S_FLAG));
    
  /* Clear the selected SPI CRC Error (CRCERR) flag */
  SPIx->SR = (uint16_t)~SPI_I2S_FLAG;
 80128f4:	887b      	ldrh	r3, [r7, #2]
 80128f6:	43db      	mvns	r3, r3
 80128f8:	b29a      	uxth	r2, r3
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	811a      	strh	r2, [r3, #8]
}
 80128fe:	370c      	adds	r7, #12
 8012900:	46bd      	mov	sp, r7
 8012902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012906:	4770      	bx	lr

08012908 <SPI_I2S_GetITStatus>:
  *            @arg I2S_IT_UDR: Underrun interrupt.  
  *            @arg SPI_I2S_IT_TIFRFE: Format Error interrupt.  
  * @retval The new state of SPI_I2S_IT (SET or RESET).
  */
ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
{
 8012908:	b480      	push	{r7}
 801290a:	b085      	sub	sp, #20
 801290c:	af00      	add	r7, sp, #0
 801290e:	6078      	str	r0, [r7, #4]
 8012910:	460b      	mov	r3, r1
 8012912:	70fb      	strb	r3, [r7, #3]
  ITStatus bitstatus = RESET;
 8012914:	2300      	movs	r3, #0
 8012916:	73fb      	strb	r3, [r7, #15]
  uint16_t itpos = 0, itmask = 0, enablestatus = 0;
 8012918:	2300      	movs	r3, #0
 801291a:	81bb      	strh	r3, [r7, #12]
 801291c:	2300      	movs	r3, #0
 801291e:	817b      	strh	r3, [r7, #10]
 8012920:	2300      	movs	r3, #0
 8012922:	813b      	strh	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));

  /* Get the SPI_I2S_IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 8012924:	78fb      	ldrb	r3, [r7, #3]
 8012926:	f003 030f 	and.w	r3, r3, #15
 801292a:	2201      	movs	r2, #1
 801292c:	fa02 f303 	lsl.w	r3, r2, r3
 8012930:	81bb      	strh	r3, [r7, #12]

  /* Get the SPI_I2S_IT IT mask */
  itmask = SPI_I2S_IT >> 4;
 8012932:	78fb      	ldrb	r3, [r7, #3]
 8012934:	091b      	lsrs	r3, r3, #4
 8012936:	b2db      	uxtb	r3, r3
 8012938:	817b      	strh	r3, [r7, #10]

  /* Set the IT mask */
  itmask = 0x01 << itmask;
 801293a:	897b      	ldrh	r3, [r7, #10]
 801293c:	2201      	movs	r2, #1
 801293e:	fa02 f303 	lsl.w	r3, r2, r3
 8012942:	817b      	strh	r3, [r7, #10]

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	889b      	ldrh	r3, [r3, #4]
 8012948:	b29a      	uxth	r2, r3
 801294a:	897b      	ldrh	r3, [r7, #10]
 801294c:	4013      	ands	r3, r2
 801294e:	813b      	strh	r3, [r7, #8]

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	891b      	ldrh	r3, [r3, #8]
 8012954:	b29a      	uxth	r2, r3
 8012956:	89bb      	ldrh	r3, [r7, #12]
 8012958:	4013      	ands	r3, r2
 801295a:	b29b      	uxth	r3, r3
 801295c:	2b00      	cmp	r3, #0
 801295e:	d005      	beq.n	801296c <SPI_I2S_GetITStatus+0x64>
 8012960:	893b      	ldrh	r3, [r7, #8]
 8012962:	2b00      	cmp	r3, #0
 8012964:	d002      	beq.n	801296c <SPI_I2S_GetITStatus+0x64>
  {
    /* SPI_I2S_IT is set */
    bitstatus = SET;
 8012966:	2301      	movs	r3, #1
 8012968:	73fb      	strb	r3, [r7, #15]
 801296a:	e001      	b.n	8012970 <SPI_I2S_GetITStatus+0x68>
  }
  else
  {
    /* SPI_I2S_IT is reset */
    bitstatus = RESET;
 801296c:	2300      	movs	r3, #0
 801296e:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_IT status */
  return bitstatus;
 8012970:	7bfb      	ldrb	r3, [r7, #15]
}
 8012972:	4618      	mov	r0, r3
 8012974:	3714      	adds	r7, #20
 8012976:	46bd      	mov	sp, r7
 8012978:	f85d 7b04 	ldr.w	r7, [sp], #4
 801297c:	4770      	bx	lr
 801297e:	bf00      	nop

08012980 <SPI_I2S_ClearITPendingBit>:
  *          followed by a write operation to SPI_CR1 register (SPI_Cmd() to enable 
  *          the SPI).
  * @retval None
  */
void SPI_I2S_ClearITPendingBit(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
{
 8012980:	b480      	push	{r7}
 8012982:	b085      	sub	sp, #20
 8012984:	af00      	add	r7, sp, #0
 8012986:	6078      	str	r0, [r7, #4]
 8012988:	460b      	mov	r3, r1
 801298a:	70fb      	strb	r3, [r7, #3]
  uint16_t itpos = 0;
 801298c:	2300      	movs	r3, #0
 801298e:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_CLEAR_IT(SPI_I2S_IT));

  /* Get the SPI_I2S IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 8012990:	78fb      	ldrb	r3, [r7, #3]
 8012992:	f003 030f 	and.w	r3, r3, #15
 8012996:	2201      	movs	r2, #1
 8012998:	fa02 f303 	lsl.w	r3, r2, r3
 801299c:	81fb      	strh	r3, [r7, #14]

  /* Clear the selected SPI CRC Error (CRCERR) interrupt pending bit */
  SPIx->SR = (uint16_t)~itpos;
 801299e:	89fb      	ldrh	r3, [r7, #14]
 80129a0:	43db      	mvns	r3, r3
 80129a2:	b29a      	uxth	r2, r3
 80129a4:	687b      	ldr	r3, [r7, #4]
 80129a6:	811a      	strh	r2, [r3, #8]
}
 80129a8:	3714      	adds	r7, #20
 80129aa:	46bd      	mov	sp, r7
 80129ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129b0:	4770      	bx	lr
 80129b2:	bf00      	nop

080129b4 <SYSCFG_DeInit>:
  *   registers to their default reset values.
  * @param  None
  * @retval None
  */
void SYSCFG_DeInit(void)
{
 80129b4:	b580      	push	{r7, lr}
 80129b6:	af00      	add	r7, sp, #0
   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 80129b8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80129bc:	2101      	movs	r1, #1
 80129be:	f7fd fa41 	bl	800fe44 <RCC_APB2PeriphResetCmd>
   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, DISABLE);
 80129c2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80129c6:	2100      	movs	r1, #0
 80129c8:	f7fd fa3c 	bl	800fe44 <RCC_APB2PeriphResetCmd>
}
 80129cc:	bd80      	pop	{r7, pc}
 80129ce:	bf00      	nop

080129d0 <SYSCFG_MemoryRemapConfig>:
  *            @arg SYSCFG_MemoryRemap_SRAM:        Embedded SRAM (112kB) mapped at 0x00000000
  *            @arg SYSCFG_MemoryRemap_SDRAM:       FMC (External SDRAM)  mapped at 0x00000000 for STM32F42xxx/43xxx devices.            
  * @retval None
  */
void SYSCFG_MemoryRemapConfig(uint8_t SYSCFG_MemoryRemap)
{
 80129d0:	b480      	push	{r7}
 80129d2:	b083      	sub	sp, #12
 80129d4:	af00      	add	r7, sp, #0
 80129d6:	4603      	mov	r3, r0
 80129d8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_SYSCFG_MEMORY_REMAP_CONFING(SYSCFG_MemoryRemap));

  SYSCFG->MEMRMP = SYSCFG_MemoryRemap;
 80129da:	4b04      	ldr	r3, [pc, #16]	; (80129ec <SYSCFG_MemoryRemapConfig+0x1c>)
 80129dc:	79fa      	ldrb	r2, [r7, #7]
 80129de:	601a      	str	r2, [r3, #0]
}
 80129e0:	370c      	adds	r7, #12
 80129e2:	46bd      	mov	sp, r7
 80129e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129e8:	4770      	bx	lr
 80129ea:	bf00      	nop
 80129ec:	40013800 	.word	0x40013800

080129f0 <SYSCFG_MemorySwappingBank>:
  *            @arg DISABLE:(the default state) Flash Bank1 mapped at 0x08000000 (and aliased @0x0000 0000) 
                            and Flash Bank2 mapped at 0x08100000 (and aliased at 0x00100000)  
  * @retval None
  */
void SYSCFG_MemorySwappingBank(FunctionalState NewState)
{
 80129f0:	b480      	push	{r7}
 80129f2:	b083      	sub	sp, #12
 80129f4:	af00      	add	r7, sp, #0
 80129f6:	4603      	mov	r3, r0
 80129f8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) UFB_MODE_BB = (uint32_t)NewState;
 80129fa:	4b04      	ldr	r3, [pc, #16]	; (8012a0c <SYSCFG_MemorySwappingBank+0x1c>)
 80129fc:	79fa      	ldrb	r2, [r7, #7]
 80129fe:	601a      	str	r2, [r3, #0]
}
 8012a00:	370c      	adds	r7, #12
 8012a02:	46bd      	mov	sp, r7
 8012a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a08:	4770      	bx	lr
 8012a0a:	bf00      	nop
 8012a0c:	42270020 	.word	0x42270020

08012a10 <SYSCFG_EXTILineConfig>:
  *           be (0..7) for STM32F42xxx/43xxx devices. 
  *             
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 8012a10:	b490      	push	{r4, r7}
 8012a12:	b084      	sub	sp, #16
 8012a14:	af00      	add	r7, sp, #0
 8012a16:	4602      	mov	r2, r0
 8012a18:	460b      	mov	r3, r1
 8012a1a:	71fa      	strb	r2, [r7, #7]
 8012a1c:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 8012a1e:	2300      	movs	r3, #0
 8012a20:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8012a22:	79bb      	ldrb	r3, [r7, #6]
 8012a24:	f003 0303 	and.w	r3, r3, #3
 8012a28:	009b      	lsls	r3, r3, #2
 8012a2a:	220f      	movs	r2, #15
 8012a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8012a30:	60fb      	str	r3, [r7, #12]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 8012a32:	4b15      	ldr	r3, [pc, #84]	; (8012a88 <SYSCFG_EXTILineConfig+0x78>)
 8012a34:	79ba      	ldrb	r2, [r7, #6]
 8012a36:	0892      	lsrs	r2, r2, #2
 8012a38:	b2d2      	uxtb	r2, r2
 8012a3a:	4913      	ldr	r1, [pc, #76]	; (8012a88 <SYSCFG_EXTILineConfig+0x78>)
 8012a3c:	79b8      	ldrb	r0, [r7, #6]
 8012a3e:	0880      	lsrs	r0, r0, #2
 8012a40:	b2c0      	uxtb	r0, r0
 8012a42:	3002      	adds	r0, #2
 8012a44:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8012a48:	68f9      	ldr	r1, [r7, #12]
 8012a4a:	43c9      	mvns	r1, r1
 8012a4c:	4001      	ands	r1, r0
 8012a4e:	3202      	adds	r2, #2
 8012a50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 8012a54:	4b0c      	ldr	r3, [pc, #48]	; (8012a88 <SYSCFG_EXTILineConfig+0x78>)
 8012a56:	79ba      	ldrb	r2, [r7, #6]
 8012a58:	0892      	lsrs	r2, r2, #2
 8012a5a:	b2d2      	uxtb	r2, r2
 8012a5c:	490a      	ldr	r1, [pc, #40]	; (8012a88 <SYSCFG_EXTILineConfig+0x78>)
 8012a5e:	79b8      	ldrb	r0, [r7, #6]
 8012a60:	0880      	lsrs	r0, r0, #2
 8012a62:	b2c0      	uxtb	r0, r0
 8012a64:	3002      	adds	r0, #2
 8012a66:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8012a6a:	79fc      	ldrb	r4, [r7, #7]
 8012a6c:	79b9      	ldrb	r1, [r7, #6]
 8012a6e:	f001 0103 	and.w	r1, r1, #3
 8012a72:	0089      	lsls	r1, r1, #2
 8012a74:	fa04 f101 	lsl.w	r1, r4, r1
 8012a78:	4301      	orrs	r1, r0
 8012a7a:	3202      	adds	r2, #2
 8012a7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8012a80:	3710      	adds	r7, #16
 8012a82:	46bd      	mov	sp, r7
 8012a84:	bc90      	pop	{r4, r7}
 8012a86:	4770      	bx	lr
 8012a88:	40013800 	.word	0x40013800

08012a8c <SYSCFG_ETH_MediaInterfaceConfig>:
  *            @arg SYSCFG_ETH_MediaInterface_MII: MII mode selected
  *            @arg SYSCFG_ETH_MediaInterface_RMII: RMII mode selected 
  * @retval None 
  */
void SYSCFG_ETH_MediaInterfaceConfig(uint32_t SYSCFG_ETH_MediaInterface) 
{ 
 8012a8c:	b480      	push	{r7}
 8012a8e:	b083      	sub	sp, #12
 8012a90:	af00      	add	r7, sp, #0
 8012a92:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_ETH_MEDIA_INTERFACE(SYSCFG_ETH_MediaInterface)); 
  /* Configure MII_RMII selection bit */ 
  *(__IO uint32_t *) PMC_MII_RMII_SEL_BB = SYSCFG_ETH_MediaInterface; 
 8012a94:	4b03      	ldr	r3, [pc, #12]	; (8012aa4 <SYSCFG_ETH_MediaInterfaceConfig+0x18>)
 8012a96:	687a      	ldr	r2, [r7, #4]
 8012a98:	601a      	str	r2, [r3, #0]
}
 8012a9a:	370c      	adds	r7, #12
 8012a9c:	46bd      	mov	sp, r7
 8012a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aa2:	4770      	bx	lr
 8012aa4:	422700dc 	.word	0x422700dc

08012aa8 <SYSCFG_CompensationCellCmd>:
  *            @arg ENABLE: I/O compensation cell enabled  
  *            @arg DISABLE: I/O compensation cell power-down mode  
  * @retval None
  */
void SYSCFG_CompensationCellCmd(FunctionalState NewState)
{
 8012aa8:	b480      	push	{r7}
 8012aaa:	b083      	sub	sp, #12
 8012aac:	af00      	add	r7, sp, #0
 8012aae:	4603      	mov	r3, r0
 8012ab0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CMPCR_CMP_PD_BB = (uint32_t)NewState;
 8012ab2:	4b04      	ldr	r3, [pc, #16]	; (8012ac4 <SYSCFG_CompensationCellCmd+0x1c>)
 8012ab4:	79fa      	ldrb	r2, [r7, #7]
 8012ab6:	601a      	str	r2, [r3, #0]
}
 8012ab8:	370c      	adds	r7, #12
 8012aba:	46bd      	mov	sp, r7
 8012abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ac0:	4770      	bx	lr
 8012ac2:	bf00      	nop
 8012ac4:	42270400 	.word	0x42270400

08012ac8 <SYSCFG_GetCompensationCellStatus>:
  * @brief  Checks whether the I/O Compensation Cell ready flag is set or not.
  * @param  None
  * @retval The new state of the I/O Compensation Cell ready flag (SET or RESET)
  */
FlagStatus SYSCFG_GetCompensationCellStatus(void)
{
 8012ac8:	b480      	push	{r7}
 8012aca:	b083      	sub	sp, #12
 8012acc:	af00      	add	r7, sp, #0
  FlagStatus bitstatus = RESET;
 8012ace:	2300      	movs	r3, #0
 8012ad0:	71fb      	strb	r3, [r7, #7]
    
  if ((SYSCFG->CMPCR & SYSCFG_CMPCR_READY ) != (uint32_t)RESET)
 8012ad2:	4b09      	ldr	r3, [pc, #36]	; (8012af8 <SYSCFG_GetCompensationCellStatus+0x30>)
 8012ad4:	6a1b      	ldr	r3, [r3, #32]
 8012ad6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012ada:	2b00      	cmp	r3, #0
 8012adc:	d002      	beq.n	8012ae4 <SYSCFG_GetCompensationCellStatus+0x1c>
  {
    bitstatus = SET;
 8012ade:	2301      	movs	r3, #1
 8012ae0:	71fb      	strb	r3, [r7, #7]
 8012ae2:	e001      	b.n	8012ae8 <SYSCFG_GetCompensationCellStatus+0x20>
  }
  else
  {
    bitstatus = RESET;
 8012ae4:	2300      	movs	r3, #0
 8012ae6:	71fb      	strb	r3, [r7, #7]
  }
  return bitstatus;
 8012ae8:	79fb      	ldrb	r3, [r7, #7]
}
 8012aea:	4618      	mov	r0, r3
 8012aec:	370c      	adds	r7, #12
 8012aee:	46bd      	mov	sp, r7
 8012af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012af4:	4770      	bx	lr
 8012af6:	bf00      	nop
 8012af8:	40013800 	.word	0x40013800

08012afc <TIM_DeInit>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval None

  */
void TIM_DeInit(TIM_TypeDef* TIMx)
{
 8012afc:	b580      	push	{r7, lr}
 8012afe:	b082      	sub	sp, #8
 8012b00:	af00      	add	r7, sp, #0
 8012b02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
 8012b04:	687a      	ldr	r2, [r7, #4]
 8012b06:	4b5f      	ldr	r3, [pc, #380]	; (8012c84 <TIM_DeInit+0x188>)
 8012b08:	429a      	cmp	r2, r3
 8012b0a:	d108      	bne.n	8012b1e <TIM_DeInit+0x22>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
 8012b0c:	2001      	movs	r0, #1
 8012b0e:	2101      	movs	r1, #1
 8012b10:	f7fd f998 	bl	800fe44 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 8012b14:	2001      	movs	r0, #1
 8012b16:	2100      	movs	r1, #0
 8012b18:	f7fd f994 	bl	800fe44 <RCC_APB2PeriphResetCmd>
 8012b1c:	e0af      	b.n	8012c7e <TIM_DeInit+0x182>
  } 
  else if (TIMx == TIM2) 
 8012b1e:	687b      	ldr	r3, [r7, #4]
 8012b20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012b24:	d108      	bne.n	8012b38 <TIM_DeInit+0x3c>
  {     
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
 8012b26:	2001      	movs	r0, #1
 8012b28:	2101      	movs	r1, #1
 8012b2a:	f7fd f96d 	bl	800fe08 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 8012b2e:	2001      	movs	r0, #1
 8012b30:	2100      	movs	r1, #0
 8012b32:	f7fd f969 	bl	800fe08 <RCC_APB1PeriphResetCmd>
 8012b36:	e0a2      	b.n	8012c7e <TIM_DeInit+0x182>
  }  
  else if (TIMx == TIM3)
 8012b38:	687a      	ldr	r2, [r7, #4]
 8012b3a:	4b53      	ldr	r3, [pc, #332]	; (8012c88 <TIM_DeInit+0x18c>)
 8012b3c:	429a      	cmp	r2, r3
 8012b3e:	d108      	bne.n	8012b52 <TIM_DeInit+0x56>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
 8012b40:	2002      	movs	r0, #2
 8012b42:	2101      	movs	r1, #1
 8012b44:	f7fd f960 	bl	800fe08 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 8012b48:	2002      	movs	r0, #2
 8012b4a:	2100      	movs	r1, #0
 8012b4c:	f7fd f95c 	bl	800fe08 <RCC_APB1PeriphResetCmd>
 8012b50:	e095      	b.n	8012c7e <TIM_DeInit+0x182>
  }  
  else if (TIMx == TIM4)
 8012b52:	687a      	ldr	r2, [r7, #4]
 8012b54:	4b4d      	ldr	r3, [pc, #308]	; (8012c8c <TIM_DeInit+0x190>)
 8012b56:	429a      	cmp	r2, r3
 8012b58:	d108      	bne.n	8012b6c <TIM_DeInit+0x70>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
 8012b5a:	2004      	movs	r0, #4
 8012b5c:	2101      	movs	r1, #1
 8012b5e:	f7fd f953 	bl	800fe08 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
 8012b62:	2004      	movs	r0, #4
 8012b64:	2100      	movs	r1, #0
 8012b66:	f7fd f94f 	bl	800fe08 <RCC_APB1PeriphResetCmd>
 8012b6a:	e088      	b.n	8012c7e <TIM_DeInit+0x182>
  }  
  else if (TIMx == TIM5)
 8012b6c:	687a      	ldr	r2, [r7, #4]
 8012b6e:	4b48      	ldr	r3, [pc, #288]	; (8012c90 <TIM_DeInit+0x194>)
 8012b70:	429a      	cmp	r2, r3
 8012b72:	d108      	bne.n	8012b86 <TIM_DeInit+0x8a>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
 8012b74:	2008      	movs	r0, #8
 8012b76:	2101      	movs	r1, #1
 8012b78:	f7fd f946 	bl	800fe08 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
 8012b7c:	2008      	movs	r0, #8
 8012b7e:	2100      	movs	r1, #0
 8012b80:	f7fd f942 	bl	800fe08 <RCC_APB1PeriphResetCmd>
 8012b84:	e07b      	b.n	8012c7e <TIM_DeInit+0x182>
  }  
  else if (TIMx == TIM6)  
 8012b86:	687a      	ldr	r2, [r7, #4]
 8012b88:	4b42      	ldr	r3, [pc, #264]	; (8012c94 <TIM_DeInit+0x198>)
 8012b8a:	429a      	cmp	r2, r3
 8012b8c:	d108      	bne.n	8012ba0 <TIM_DeInit+0xa4>
  {    
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
 8012b8e:	2010      	movs	r0, #16
 8012b90:	2101      	movs	r1, #1
 8012b92:	f7fd f939 	bl	800fe08 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 8012b96:	2010      	movs	r0, #16
 8012b98:	2100      	movs	r1, #0
 8012b9a:	f7fd f935 	bl	800fe08 <RCC_APB1PeriphResetCmd>
 8012b9e:	e06e      	b.n	8012c7e <TIM_DeInit+0x182>
  }  
  else if (TIMx == TIM7)
 8012ba0:	687a      	ldr	r2, [r7, #4]
 8012ba2:	4b3d      	ldr	r3, [pc, #244]	; (8012c98 <TIM_DeInit+0x19c>)
 8012ba4:	429a      	cmp	r2, r3
 8012ba6:	d108      	bne.n	8012bba <TIM_DeInit+0xbe>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
 8012ba8:	2020      	movs	r0, #32
 8012baa:	2101      	movs	r1, #1
 8012bac:	f7fd f92c 	bl	800fe08 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 8012bb0:	2020      	movs	r0, #32
 8012bb2:	2100      	movs	r1, #0
 8012bb4:	f7fd f928 	bl	800fe08 <RCC_APB1PeriphResetCmd>
 8012bb8:	e061      	b.n	8012c7e <TIM_DeInit+0x182>
  }  
  else if (TIMx == TIM8)
 8012bba:	687a      	ldr	r2, [r7, #4]
 8012bbc:	4b37      	ldr	r3, [pc, #220]	; (8012c9c <TIM_DeInit+0x1a0>)
 8012bbe:	429a      	cmp	r2, r3
 8012bc0:	d108      	bne.n	8012bd4 <TIM_DeInit+0xd8>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
 8012bc2:	2002      	movs	r0, #2
 8012bc4:	2101      	movs	r1, #1
 8012bc6:	f7fd f93d 	bl	800fe44 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
 8012bca:	2002      	movs	r0, #2
 8012bcc:	2100      	movs	r1, #0
 8012bce:	f7fd f939 	bl	800fe44 <RCC_APB2PeriphResetCmd>
 8012bd2:	e054      	b.n	8012c7e <TIM_DeInit+0x182>
  }  
  else if (TIMx == TIM9)
 8012bd4:	687a      	ldr	r2, [r7, #4]
 8012bd6:	4b32      	ldr	r3, [pc, #200]	; (8012ca0 <TIM_DeInit+0x1a4>)
 8012bd8:	429a      	cmp	r2, r3
 8012bda:	d10a      	bne.n	8012bf2 <TIM_DeInit+0xf6>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
 8012bdc:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8012be0:	2101      	movs	r1, #1
 8012be2:	f7fd f92f 	bl	800fe44 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
 8012be6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8012bea:	2100      	movs	r1, #0
 8012bec:	f7fd f92a 	bl	800fe44 <RCC_APB2PeriphResetCmd>
 8012bf0:	e045      	b.n	8012c7e <TIM_DeInit+0x182>
   }  
  else if (TIMx == TIM10)
 8012bf2:	687a      	ldr	r2, [r7, #4]
 8012bf4:	4b2b      	ldr	r3, [pc, #172]	; (8012ca4 <TIM_DeInit+0x1a8>)
 8012bf6:	429a      	cmp	r2, r3
 8012bf8:	d10a      	bne.n	8012c10 <TIM_DeInit+0x114>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
 8012bfa:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8012bfe:	2101      	movs	r1, #1
 8012c00:	f7fd f920 	bl	800fe44 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
 8012c04:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8012c08:	2100      	movs	r1, #0
 8012c0a:	f7fd f91b 	bl	800fe44 <RCC_APB2PeriphResetCmd>
 8012c0e:	e036      	b.n	8012c7e <TIM_DeInit+0x182>
  }  
  else if (TIMx == TIM11) 
 8012c10:	687a      	ldr	r2, [r7, #4]
 8012c12:	4b25      	ldr	r3, [pc, #148]	; (8012ca8 <TIM_DeInit+0x1ac>)
 8012c14:	429a      	cmp	r2, r3
 8012c16:	d10a      	bne.n	8012c2e <TIM_DeInit+0x132>
  {     
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
 8012c18:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8012c1c:	2101      	movs	r1, #1
 8012c1e:	f7fd f911 	bl	800fe44 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
 8012c22:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8012c26:	2100      	movs	r1, #0
 8012c28:	f7fd f90c 	bl	800fe44 <RCC_APB2PeriphResetCmd>
 8012c2c:	e027      	b.n	8012c7e <TIM_DeInit+0x182>
  }  
  else if (TIMx == TIM12)
 8012c2e:	687a      	ldr	r2, [r7, #4]
 8012c30:	4b1e      	ldr	r3, [pc, #120]	; (8012cac <TIM_DeInit+0x1b0>)
 8012c32:	429a      	cmp	r2, r3
 8012c34:	d108      	bne.n	8012c48 <TIM_DeInit+0x14c>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
 8012c36:	2040      	movs	r0, #64	; 0x40
 8012c38:	2101      	movs	r1, #1
 8012c3a:	f7fd f8e5 	bl	800fe08 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
 8012c3e:	2040      	movs	r0, #64	; 0x40
 8012c40:	2100      	movs	r1, #0
 8012c42:	f7fd f8e1 	bl	800fe08 <RCC_APB1PeriphResetCmd>
 8012c46:	e01a      	b.n	8012c7e <TIM_DeInit+0x182>
  }  
  else if (TIMx == TIM13) 
 8012c48:	687a      	ldr	r2, [r7, #4]
 8012c4a:	4b19      	ldr	r3, [pc, #100]	; (8012cb0 <TIM_DeInit+0x1b4>)
 8012c4c:	429a      	cmp	r2, r3
 8012c4e:	d108      	bne.n	8012c62 <TIM_DeInit+0x166>
  {       
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
 8012c50:	2080      	movs	r0, #128	; 0x80
 8012c52:	2101      	movs	r1, #1
 8012c54:	f7fd f8d8 	bl	800fe08 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
 8012c58:	2080      	movs	r0, #128	; 0x80
 8012c5a:	2100      	movs	r1, #0
 8012c5c:	f7fd f8d4 	bl	800fe08 <RCC_APB1PeriphResetCmd>
 8012c60:	e00d      	b.n	8012c7e <TIM_DeInit+0x182>
  }  
  else
  { 
    if (TIMx == TIM14) 
 8012c62:	687a      	ldr	r2, [r7, #4]
 8012c64:	4b13      	ldr	r3, [pc, #76]	; (8012cb4 <TIM_DeInit+0x1b8>)
 8012c66:	429a      	cmp	r2, r3
 8012c68:	d109      	bne.n	8012c7e <TIM_DeInit+0x182>
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
 8012c6a:	f44f 7080 	mov.w	r0, #256	; 0x100
 8012c6e:	2101      	movs	r1, #1
 8012c70:	f7fd f8ca 	bl	800fe08 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
 8012c74:	f44f 7080 	mov.w	r0, #256	; 0x100
 8012c78:	2100      	movs	r1, #0
 8012c7a:	f7fd f8c5 	bl	800fe08 <RCC_APB1PeriphResetCmd>
    }   
  }
}
 8012c7e:	3708      	adds	r7, #8
 8012c80:	46bd      	mov	sp, r7
 8012c82:	bd80      	pop	{r7, pc}
 8012c84:	40010000 	.word	0x40010000
 8012c88:	40000400 	.word	0x40000400
 8012c8c:	40000800 	.word	0x40000800
 8012c90:	40000c00 	.word	0x40000c00
 8012c94:	40001000 	.word	0x40001000
 8012c98:	40001400 	.word	0x40001400
 8012c9c:	40010400 	.word	0x40010400
 8012ca0:	40014000 	.word	0x40014000
 8012ca4:	40014400 	.word	0x40014400
 8012ca8:	40014800 	.word	0x40014800
 8012cac:	40001800 	.word	0x40001800
 8012cb0:	40001c00 	.word	0x40001c00
 8012cb4:	40002000 	.word	0x40002000

08012cb8 <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8012cb8:	b480      	push	{r7}
 8012cba:	b085      	sub	sp, #20
 8012cbc:	af00      	add	r7, sp, #0
 8012cbe:	6078      	str	r0, [r7, #4]
 8012cc0:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 8012cc2:	2300      	movs	r3, #0
 8012cc4:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8012cc6:	687b      	ldr	r3, [r7, #4]
 8012cc8:	881b      	ldrh	r3, [r3, #0]
 8012cca:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8012ccc:	687a      	ldr	r2, [r7, #4]
 8012cce:	4b28      	ldr	r3, [pc, #160]	; (8012d70 <TIM_TimeBaseInit+0xb8>)
 8012cd0:	429a      	cmp	r2, r3
 8012cd2:	d013      	beq.n	8012cfc <TIM_TimeBaseInit+0x44>
 8012cd4:	687a      	ldr	r2, [r7, #4]
 8012cd6:	4b27      	ldr	r3, [pc, #156]	; (8012d74 <TIM_TimeBaseInit+0xbc>)
 8012cd8:	429a      	cmp	r2, r3
 8012cda:	d00f      	beq.n	8012cfc <TIM_TimeBaseInit+0x44>
 8012cdc:	687b      	ldr	r3, [r7, #4]
 8012cde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012ce2:	d00b      	beq.n	8012cfc <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 8012ce4:	687a      	ldr	r2, [r7, #4]
 8012ce6:	4b24      	ldr	r3, [pc, #144]	; (8012d78 <TIM_TimeBaseInit+0xc0>)
 8012ce8:	429a      	cmp	r2, r3
 8012cea:	d007      	beq.n	8012cfc <TIM_TimeBaseInit+0x44>
 8012cec:	687a      	ldr	r2, [r7, #4]
 8012cee:	4b23      	ldr	r3, [pc, #140]	; (8012d7c <TIM_TimeBaseInit+0xc4>)
 8012cf0:	429a      	cmp	r2, r3
 8012cf2:	d003      	beq.n	8012cfc <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8012cf4:	687a      	ldr	r2, [r7, #4]
 8012cf6:	4b22      	ldr	r3, [pc, #136]	; (8012d80 <TIM_TimeBaseInit+0xc8>)
 8012cf8:	429a      	cmp	r2, r3
 8012cfa:	d108      	bne.n	8012d0e <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8012cfc:	89fb      	ldrh	r3, [r7, #14]
 8012cfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012d02:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8012d04:	683b      	ldr	r3, [r7, #0]
 8012d06:	885a      	ldrh	r2, [r3, #2]
 8012d08:	89fb      	ldrh	r3, [r7, #14]
 8012d0a:	4313      	orrs	r3, r2
 8012d0c:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8012d0e:	687a      	ldr	r2, [r7, #4]
 8012d10:	4b1c      	ldr	r3, [pc, #112]	; (8012d84 <TIM_TimeBaseInit+0xcc>)
 8012d12:	429a      	cmp	r2, r3
 8012d14:	d00c      	beq.n	8012d30 <TIM_TimeBaseInit+0x78>
 8012d16:	687a      	ldr	r2, [r7, #4]
 8012d18:	4b1b      	ldr	r3, [pc, #108]	; (8012d88 <TIM_TimeBaseInit+0xd0>)
 8012d1a:	429a      	cmp	r2, r3
 8012d1c:	d008      	beq.n	8012d30 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8012d1e:	89fb      	ldrh	r3, [r7, #14]
 8012d20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012d24:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8012d26:	683b      	ldr	r3, [r7, #0]
 8012d28:	891a      	ldrh	r2, [r3, #8]
 8012d2a:	89fb      	ldrh	r3, [r7, #14]
 8012d2c:	4313      	orrs	r3, r2
 8012d2e:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8012d30:	687b      	ldr	r3, [r7, #4]
 8012d32:	89fa      	ldrh	r2, [r7, #14]
 8012d34:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8012d36:	683b      	ldr	r3, [r7, #0]
 8012d38:	685a      	ldr	r2, [r3, #4]
 8012d3a:	687b      	ldr	r3, [r7, #4]
 8012d3c:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8012d3e:	683b      	ldr	r3, [r7, #0]
 8012d40:	881a      	ldrh	r2, [r3, #0]
 8012d42:	687b      	ldr	r3, [r7, #4]
 8012d44:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 8012d46:	687a      	ldr	r2, [r7, #4]
 8012d48:	4b09      	ldr	r3, [pc, #36]	; (8012d70 <TIM_TimeBaseInit+0xb8>)
 8012d4a:	429a      	cmp	r2, r3
 8012d4c:	d003      	beq.n	8012d56 <TIM_TimeBaseInit+0x9e>
 8012d4e:	687a      	ldr	r2, [r7, #4]
 8012d50:	4b08      	ldr	r3, [pc, #32]	; (8012d74 <TIM_TimeBaseInit+0xbc>)
 8012d52:	429a      	cmp	r2, r3
 8012d54:	d104      	bne.n	8012d60 <TIM_TimeBaseInit+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8012d56:	683b      	ldr	r3, [r7, #0]
 8012d58:	7a9b      	ldrb	r3, [r3, #10]
 8012d5a:	461a      	mov	r2, r3
 8012d5c:	687b      	ldr	r3, [r7, #4]
 8012d5e:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8012d60:	687b      	ldr	r3, [r7, #4]
 8012d62:	2201      	movs	r2, #1
 8012d64:	829a      	strh	r2, [r3, #20]
}
 8012d66:	3714      	adds	r7, #20
 8012d68:	46bd      	mov	sp, r7
 8012d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d6e:	4770      	bx	lr
 8012d70:	40010000 	.word	0x40010000
 8012d74:	40010400 	.word	0x40010400
 8012d78:	40000400 	.word	0x40000400
 8012d7c:	40000800 	.word	0x40000800
 8012d80:	40000c00 	.word	0x40000c00
 8012d84:	40001000 	.word	0x40001000
 8012d88:	40001400 	.word	0x40001400

08012d8c <TIM_TimeBaseStructInit>:
  * @param  TIM_TimeBaseInitStruct : pointer to a TIM_TimeBaseInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8012d8c:	b480      	push	{r7}
 8012d8e:	b083      	sub	sp, #12
 8012d90:	af00      	add	r7, sp, #0
 8012d92:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFFFFFF;
 8012d94:	687b      	ldr	r3, [r7, #4]
 8012d96:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012d9a:	605a      	str	r2, [r3, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 8012d9c:	687b      	ldr	r3, [r7, #4]
 8012d9e:	2200      	movs	r2, #0
 8012da0:	801a      	strh	r2, [r3, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 8012da2:	687b      	ldr	r3, [r7, #4]
 8012da4:	2200      	movs	r2, #0
 8012da6:	811a      	strh	r2, [r3, #8]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 8012da8:	687b      	ldr	r3, [r7, #4]
 8012daa:	2200      	movs	r2, #0
 8012dac:	805a      	strh	r2, [r3, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 8012dae:	687b      	ldr	r3, [r7, #4]
 8012db0:	2200      	movs	r2, #0
 8012db2:	729a      	strb	r2, [r3, #10]
}
 8012db4:	370c      	adds	r7, #12
 8012db6:	46bd      	mov	sp, r7
 8012db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dbc:	4770      	bx	lr
 8012dbe:	bf00      	nop

08012dc0 <TIM_PrescalerConfig>:
  *            @arg TIM_PSCReloadMode_Update: The Prescaler is loaded at the update event.
  *            @arg TIM_PSCReloadMode_Immediate: The Prescaler is loaded immediatly.
  * @retval None
  */
void TIM_PrescalerConfig(TIM_TypeDef* TIMx, uint16_t Prescaler, uint16_t TIM_PSCReloadMode)
{
 8012dc0:	b480      	push	{r7}
 8012dc2:	b083      	sub	sp, #12
 8012dc4:	af00      	add	r7, sp, #0
 8012dc6:	6078      	str	r0, [r7, #4]
 8012dc8:	4613      	mov	r3, r2
 8012dca:	460a      	mov	r2, r1
 8012dcc:	807a      	strh	r2, [r7, #2]
 8012dce:	803b      	strh	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_PRESCALER_RELOAD(TIM_PSCReloadMode));
  /* Set the Prescaler value */
  TIMx->PSC = Prescaler;
 8012dd0:	687b      	ldr	r3, [r7, #4]
 8012dd2:	887a      	ldrh	r2, [r7, #2]
 8012dd4:	851a      	strh	r2, [r3, #40]	; 0x28
  /* Set or reset the UG Bit */
  TIMx->EGR = TIM_PSCReloadMode;
 8012dd6:	687b      	ldr	r3, [r7, #4]
 8012dd8:	883a      	ldrh	r2, [r7, #0]
 8012dda:	829a      	strh	r2, [r3, #20]
}
 8012ddc:	370c      	adds	r7, #12
 8012dde:	46bd      	mov	sp, r7
 8012de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012de4:	4770      	bx	lr
 8012de6:	bf00      	nop

08012de8 <TIM_CounterModeConfig>:
  *            @arg TIM_CounterMode_CenterAligned2: TIM Center Aligned Mode2
  *            @arg TIM_CounterMode_CenterAligned3: TIM Center Aligned Mode3
  * @retval None
  */
void TIM_CounterModeConfig(TIM_TypeDef* TIMx, uint16_t TIM_CounterMode)
{
 8012de8:	b480      	push	{r7}
 8012dea:	b085      	sub	sp, #20
 8012dec:	af00      	add	r7, sp, #0
 8012dee:	6078      	str	r0, [r7, #4]
 8012df0:	460b      	mov	r3, r1
 8012df2:	807b      	strh	r3, [r7, #2]
  uint16_t tmpcr1 = 0;
 8012df4:	2300      	movs	r3, #0
 8012df6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_COUNTER_MODE(TIM_CounterMode));

  tmpcr1 = TIMx->CR1;
 8012df8:	687b      	ldr	r3, [r7, #4]
 8012dfa:	881b      	ldrh	r3, [r3, #0]
 8012dfc:	81fb      	strh	r3, [r7, #14]

  /* Reset the CMS and DIR Bits */
  tmpcr1 &= (uint16_t)~(TIM_CR1_DIR | TIM_CR1_CMS);
 8012dfe:	89fb      	ldrh	r3, [r7, #14]
 8012e00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012e04:	81fb      	strh	r3, [r7, #14]

  /* Set the Counter Mode */
  tmpcr1 |= TIM_CounterMode;
 8012e06:	89fa      	ldrh	r2, [r7, #14]
 8012e08:	887b      	ldrh	r3, [r7, #2]
 8012e0a:	4313      	orrs	r3, r2
 8012e0c:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CR1 register */
  TIMx->CR1 = tmpcr1;
 8012e0e:	687b      	ldr	r3, [r7, #4]
 8012e10:	89fa      	ldrh	r2, [r7, #14]
 8012e12:	801a      	strh	r2, [r3, #0]
}
 8012e14:	3714      	adds	r7, #20
 8012e16:	46bd      	mov	sp, r7
 8012e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e1c:	4770      	bx	lr
 8012e1e:	bf00      	nop

08012e20 <TIM_SetCounter>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @param  Counter: specifies the Counter register new value.
  * @retval None
  */
void TIM_SetCounter(TIM_TypeDef* TIMx, uint32_t Counter)
{
 8012e20:	b480      	push	{r7}
 8012e22:	b083      	sub	sp, #12
 8012e24:	af00      	add	r7, sp, #0
 8012e26:	6078      	str	r0, [r7, #4]
 8012e28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
   assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Set the Counter Register value */
  TIMx->CNT = Counter;
 8012e2a:	687b      	ldr	r3, [r7, #4]
 8012e2c:	683a      	ldr	r2, [r7, #0]
 8012e2e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8012e30:	370c      	adds	r7, #12
 8012e32:	46bd      	mov	sp, r7
 8012e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e38:	4770      	bx	lr
 8012e3a:	bf00      	nop

08012e3c <TIM_SetAutoreload>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @param  Autoreload: specifies the Autoreload register new value.
  * @retval None
  */
void TIM_SetAutoreload(TIM_TypeDef* TIMx, uint32_t Autoreload)
{
 8012e3c:	b480      	push	{r7}
 8012e3e:	b083      	sub	sp, #12
 8012e40:	af00      	add	r7, sp, #0
 8012e42:	6078      	str	r0, [r7, #4]
 8012e44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  
  /* Set the Autoreload Register value */
  TIMx->ARR = Autoreload;
 8012e46:	687b      	ldr	r3, [r7, #4]
 8012e48:	683a      	ldr	r2, [r7, #0]
 8012e4a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8012e4c:	370c      	adds	r7, #12
 8012e4e:	46bd      	mov	sp, r7
 8012e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e54:	4770      	bx	lr
 8012e56:	bf00      	nop

08012e58 <TIM_GetCounter>:
  * @brief  Gets the TIMx Counter value.
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval Counter Register value
  */
uint32_t TIM_GetCounter(TIM_TypeDef* TIMx)
{
 8012e58:	b480      	push	{r7}
 8012e5a:	b083      	sub	sp, #12
 8012e5c:	af00      	add	r7, sp, #0
 8012e5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Counter Register value */
  return TIMx->CNT;
 8012e60:	687b      	ldr	r3, [r7, #4]
 8012e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8012e64:	4618      	mov	r0, r3
 8012e66:	370c      	adds	r7, #12
 8012e68:	46bd      	mov	sp, r7
 8012e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e6e:	4770      	bx	lr

08012e70 <TIM_GetPrescaler>:
  * @brief  Gets the TIMx Prescaler value.
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval Prescaler Register value.
  */
uint16_t TIM_GetPrescaler(TIM_TypeDef* TIMx)
{
 8012e70:	b480      	push	{r7}
 8012e72:	b083      	sub	sp, #12
 8012e74:	af00      	add	r7, sp, #0
 8012e76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Prescaler Register value */
  return TIMx->PSC;
 8012e78:	687b      	ldr	r3, [r7, #4]
 8012e7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012e7c:	b29b      	uxth	r3, r3
}
 8012e7e:	4618      	mov	r0, r3
 8012e80:	370c      	adds	r7, #12
 8012e82:	46bd      	mov	sp, r7
 8012e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e88:	4770      	bx	lr
 8012e8a:	bf00      	nop

08012e8c <TIM_UpdateDisableConfig>:
  * @param  NewState: new state of the TIMx UDIS bit
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_UpdateDisableConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8012e8c:	b480      	push	{r7}
 8012e8e:	b083      	sub	sp, #12
 8012e90:	af00      	add	r7, sp, #0
 8012e92:	6078      	str	r0, [r7, #4]
 8012e94:	460b      	mov	r3, r1
 8012e96:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8012e98:	78fb      	ldrb	r3, [r7, #3]
 8012e9a:	2b00      	cmp	r3, #0
 8012e9c:	d008      	beq.n	8012eb0 <TIM_UpdateDisableConfig+0x24>
  {
    /* Set the Update Disable Bit */
    TIMx->CR1 |= TIM_CR1_UDIS;
 8012e9e:	687b      	ldr	r3, [r7, #4]
 8012ea0:	881b      	ldrh	r3, [r3, #0]
 8012ea2:	b29b      	uxth	r3, r3
 8012ea4:	f043 0302 	orr.w	r3, r3, #2
 8012ea8:	b29a      	uxth	r2, r3
 8012eaa:	687b      	ldr	r3, [r7, #4]
 8012eac:	801a      	strh	r2, [r3, #0]
 8012eae:	e007      	b.n	8012ec0 <TIM_UpdateDisableConfig+0x34>
  }
  else
  {
    /* Reset the Update Disable Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_UDIS;
 8012eb0:	687b      	ldr	r3, [r7, #4]
 8012eb2:	881b      	ldrh	r3, [r3, #0]
 8012eb4:	b29b      	uxth	r3, r3
 8012eb6:	f023 0302 	bic.w	r3, r3, #2
 8012eba:	b29a      	uxth	r2, r3
 8012ebc:	687b      	ldr	r3, [r7, #4]
 8012ebe:	801a      	strh	r2, [r3, #0]
  }
}
 8012ec0:	370c      	adds	r7, #12
 8012ec2:	46bd      	mov	sp, r7
 8012ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ec8:	4770      	bx	lr
 8012eca:	bf00      	nop

08012ecc <TIM_UpdateRequestConfig>:
  *                 generation through the slave mode controller.
  *            @arg TIM_UpdateSource_Regular: Source of update is counter overflow/underflow.
  * @retval None
  */
void TIM_UpdateRequestConfig(TIM_TypeDef* TIMx, uint16_t TIM_UpdateSource)
{
 8012ecc:	b480      	push	{r7}
 8012ece:	b083      	sub	sp, #12
 8012ed0:	af00      	add	r7, sp, #0
 8012ed2:	6078      	str	r0, [r7, #4]
 8012ed4:	460b      	mov	r3, r1
 8012ed6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));

  if (TIM_UpdateSource != TIM_UpdateSource_Global)
 8012ed8:	887b      	ldrh	r3, [r7, #2]
 8012eda:	2b00      	cmp	r3, #0
 8012edc:	d008      	beq.n	8012ef0 <TIM_UpdateRequestConfig+0x24>
  {
    /* Set the URS Bit */
    TIMx->CR1 |= TIM_CR1_URS;
 8012ede:	687b      	ldr	r3, [r7, #4]
 8012ee0:	881b      	ldrh	r3, [r3, #0]
 8012ee2:	b29b      	uxth	r3, r3
 8012ee4:	f043 0304 	orr.w	r3, r3, #4
 8012ee8:	b29a      	uxth	r2, r3
 8012eea:	687b      	ldr	r3, [r7, #4]
 8012eec:	801a      	strh	r2, [r3, #0]
 8012eee:	e007      	b.n	8012f00 <TIM_UpdateRequestConfig+0x34>
  }
  else
  {
    /* Reset the URS Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_URS;
 8012ef0:	687b      	ldr	r3, [r7, #4]
 8012ef2:	881b      	ldrh	r3, [r3, #0]
 8012ef4:	b29b      	uxth	r3, r3
 8012ef6:	f023 0304 	bic.w	r3, r3, #4
 8012efa:	b29a      	uxth	r2, r3
 8012efc:	687b      	ldr	r3, [r7, #4]
 8012efe:	801a      	strh	r2, [r3, #0]
  }
}
 8012f00:	370c      	adds	r7, #12
 8012f02:	46bd      	mov	sp, r7
 8012f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f08:	4770      	bx	lr
 8012f0a:	bf00      	nop

08012f0c <TIM_ARRPreloadConfig>:
  * @param  NewState: new state of the TIMx peripheral Preload register
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8012f0c:	b480      	push	{r7}
 8012f0e:	b083      	sub	sp, #12
 8012f10:	af00      	add	r7, sp, #0
 8012f12:	6078      	str	r0, [r7, #4]
 8012f14:	460b      	mov	r3, r1
 8012f16:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8012f18:	78fb      	ldrb	r3, [r7, #3]
 8012f1a:	2b00      	cmp	r3, #0
 8012f1c:	d008      	beq.n	8012f30 <TIM_ARRPreloadConfig+0x24>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 8012f1e:	687b      	ldr	r3, [r7, #4]
 8012f20:	881b      	ldrh	r3, [r3, #0]
 8012f22:	b29b      	uxth	r3, r3
 8012f24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012f28:	b29a      	uxth	r2, r3
 8012f2a:	687b      	ldr	r3, [r7, #4]
 8012f2c:	801a      	strh	r2, [r3, #0]
 8012f2e:	e007      	b.n	8012f40 <TIM_ARRPreloadConfig+0x34>
  }
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
 8012f30:	687b      	ldr	r3, [r7, #4]
 8012f32:	881b      	ldrh	r3, [r3, #0]
 8012f34:	b29b      	uxth	r3, r3
 8012f36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012f3a:	b29a      	uxth	r2, r3
 8012f3c:	687b      	ldr	r3, [r7, #4]
 8012f3e:	801a      	strh	r2, [r3, #0]
  }
}
 8012f40:	370c      	adds	r7, #12
 8012f42:	46bd      	mov	sp, r7
 8012f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f48:	4770      	bx	lr
 8012f4a:	bf00      	nop

08012f4c <TIM_SelectOnePulseMode>:
  *            @arg TIM_OPMode_Single
  *            @arg TIM_OPMode_Repetitive
  * @retval None
  */
void TIM_SelectOnePulseMode(TIM_TypeDef* TIMx, uint16_t TIM_OPMode)
{
 8012f4c:	b480      	push	{r7}
 8012f4e:	b083      	sub	sp, #12
 8012f50:	af00      	add	r7, sp, #0
 8012f52:	6078      	str	r0, [r7, #4]
 8012f54:	460b      	mov	r3, r1
 8012f56:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_OPM_MODE(TIM_OPMode));

  /* Reset the OPM Bit */
  TIMx->CR1 &= (uint16_t)~TIM_CR1_OPM;
 8012f58:	687b      	ldr	r3, [r7, #4]
 8012f5a:	881b      	ldrh	r3, [r3, #0]
 8012f5c:	b29b      	uxth	r3, r3
 8012f5e:	f023 0308 	bic.w	r3, r3, #8
 8012f62:	b29a      	uxth	r2, r3
 8012f64:	687b      	ldr	r3, [r7, #4]
 8012f66:	801a      	strh	r2, [r3, #0]

  /* Configure the OPM Mode */
  TIMx->CR1 |= TIM_OPMode;
 8012f68:	687b      	ldr	r3, [r7, #4]
 8012f6a:	881b      	ldrh	r3, [r3, #0]
 8012f6c:	b29a      	uxth	r2, r3
 8012f6e:	887b      	ldrh	r3, [r7, #2]
 8012f70:	4313      	orrs	r3, r2
 8012f72:	b29a      	uxth	r2, r3
 8012f74:	687b      	ldr	r3, [r7, #4]
 8012f76:	801a      	strh	r2, [r3, #0]
}
 8012f78:	370c      	adds	r7, #12
 8012f7a:	46bd      	mov	sp, r7
 8012f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f80:	4770      	bx	lr
 8012f82:	bf00      	nop

08012f84 <TIM_SetClockDivision>:
  *            @arg TIM_CKD_DIV2: TDTS = 2*Tck_tim
  *            @arg TIM_CKD_DIV4: TDTS = 4*Tck_tim
  * @retval None
  */
void TIM_SetClockDivision(TIM_TypeDef* TIMx, uint16_t TIM_CKD)
{
 8012f84:	b480      	push	{r7}
 8012f86:	b083      	sub	sp, #12
 8012f88:	af00      	add	r7, sp, #0
 8012f8a:	6078      	str	r0, [r7, #4]
 8012f8c:	460b      	mov	r3, r1
 8012f8e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_CKD_DIV(TIM_CKD));

  /* Reset the CKD Bits */
  TIMx->CR1 &= (uint16_t)(~TIM_CR1_CKD);
 8012f90:	687b      	ldr	r3, [r7, #4]
 8012f92:	881b      	ldrh	r3, [r3, #0]
 8012f94:	b29b      	uxth	r3, r3
 8012f96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012f9a:	b29a      	uxth	r2, r3
 8012f9c:	687b      	ldr	r3, [r7, #4]
 8012f9e:	801a      	strh	r2, [r3, #0]

  /* Set the CKD value */
  TIMx->CR1 |= TIM_CKD;
 8012fa0:	687b      	ldr	r3, [r7, #4]
 8012fa2:	881b      	ldrh	r3, [r3, #0]
 8012fa4:	b29a      	uxth	r2, r3
 8012fa6:	887b      	ldrh	r3, [r7, #2]
 8012fa8:	4313      	orrs	r3, r2
 8012faa:	b29a      	uxth	r2, r3
 8012fac:	687b      	ldr	r3, [r7, #4]
 8012fae:	801a      	strh	r2, [r3, #0]
}
 8012fb0:	370c      	adds	r7, #12
 8012fb2:	46bd      	mov	sp, r7
 8012fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fb8:	4770      	bx	lr
 8012fba:	bf00      	nop

08012fbc <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8012fbc:	b480      	push	{r7}
 8012fbe:	b083      	sub	sp, #12
 8012fc0:	af00      	add	r7, sp, #0
 8012fc2:	6078      	str	r0, [r7, #4]
 8012fc4:	460b      	mov	r3, r1
 8012fc6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8012fc8:	78fb      	ldrb	r3, [r7, #3]
 8012fca:	2b00      	cmp	r3, #0
 8012fcc:	d008      	beq.n	8012fe0 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8012fce:	687b      	ldr	r3, [r7, #4]
 8012fd0:	881b      	ldrh	r3, [r3, #0]
 8012fd2:	b29b      	uxth	r3, r3
 8012fd4:	f043 0301 	orr.w	r3, r3, #1
 8012fd8:	b29a      	uxth	r2, r3
 8012fda:	687b      	ldr	r3, [r7, #4]
 8012fdc:	801a      	strh	r2, [r3, #0]
 8012fde:	e007      	b.n	8012ff0 <TIM_Cmd+0x34>
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8012fe0:	687b      	ldr	r3, [r7, #4]
 8012fe2:	881b      	ldrh	r3, [r3, #0]
 8012fe4:	b29b      	uxth	r3, r3
 8012fe6:	f023 0301 	bic.w	r3, r3, #1
 8012fea:	b29a      	uxth	r2, r3
 8012fec:	687b      	ldr	r3, [r7, #4]
 8012fee:	801a      	strh	r2, [r3, #0]
  }
}
 8012ff0:	370c      	adds	r7, #12
 8012ff2:	46bd      	mov	sp, r7
 8012ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ff8:	4770      	bx	lr
 8012ffa:	bf00      	nop

08012ffc <TIM_OC1Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8012ffc:	b480      	push	{r7}
 8012ffe:	b085      	sub	sp, #20
 8013000:	af00      	add	r7, sp, #0
 8013002:	6078      	str	r0, [r7, #4]
 8013004:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8013006:	2300      	movs	r3, #0
 8013008:	817b      	strh	r3, [r7, #10]
 801300a:	2300      	movs	r3, #0
 801300c:	81fb      	strh	r3, [r7, #14]
 801300e:	2300      	movs	r3, #0
 8013010:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 8013012:	687b      	ldr	r3, [r7, #4]
 8013014:	8c1b      	ldrh	r3, [r3, #32]
 8013016:	b29b      	uxth	r3, r3
 8013018:	f023 0301 	bic.w	r3, r3, #1
 801301c:	b29a      	uxth	r2, r3
 801301e:	687b      	ldr	r3, [r7, #4]
 8013020:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013022:	687b      	ldr	r3, [r7, #4]
 8013024:	8c1b      	ldrh	r3, [r3, #32]
 8013026:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013028:	687b      	ldr	r3, [r7, #4]
 801302a:	889b      	ldrh	r3, [r3, #4]
 801302c:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801302e:	687b      	ldr	r3, [r7, #4]
 8013030:	8b1b      	ldrh	r3, [r3, #24]
 8013032:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
 8013034:	897b      	ldrh	r3, [r7, #10]
 8013036:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801303a:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
 801303c:	897b      	ldrh	r3, [r7, #10]
 801303e:	f023 0303 	bic.w	r3, r3, #3
 8013042:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8013044:	683b      	ldr	r3, [r7, #0]
 8013046:	881a      	ldrh	r2, [r3, #0]
 8013048:	897b      	ldrh	r3, [r7, #10]
 801304a:	4313      	orrs	r3, r2
 801304c:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 801304e:	89fb      	ldrh	r3, [r7, #14]
 8013050:	f023 0302 	bic.w	r3, r3, #2
 8013054:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 8013056:	683b      	ldr	r3, [r7, #0]
 8013058:	899a      	ldrh	r2, [r3, #12]
 801305a:	89fb      	ldrh	r3, [r7, #14]
 801305c:	4313      	orrs	r3, r2
 801305e:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8013060:	683b      	ldr	r3, [r7, #0]
 8013062:	885a      	ldrh	r2, [r3, #2]
 8013064:	89fb      	ldrh	r3, [r7, #14]
 8013066:	4313      	orrs	r3, r2
 8013068:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 801306a:	687a      	ldr	r2, [r7, #4]
 801306c:	4b1e      	ldr	r3, [pc, #120]	; (80130e8 <TIM_OC1Init+0xec>)
 801306e:	429a      	cmp	r2, r3
 8013070:	d003      	beq.n	801307a <TIM_OC1Init+0x7e>
 8013072:	687a      	ldr	r2, [r7, #4]
 8013074:	4b1d      	ldr	r3, [pc, #116]	; (80130ec <TIM_OC1Init+0xf0>)
 8013076:	429a      	cmp	r2, r3
 8013078:	d123      	bne.n	80130c2 <TIM_OC1Init+0xc6>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 801307a:	89fb      	ldrh	r3, [r7, #14]
 801307c:	f023 0308 	bic.w	r3, r3, #8
 8013080:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 8013082:	683b      	ldr	r3, [r7, #0]
 8013084:	89da      	ldrh	r2, [r3, #14]
 8013086:	89fb      	ldrh	r3, [r7, #14]
 8013088:	4313      	orrs	r3, r2
 801308a:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
 801308c:	89fb      	ldrh	r3, [r7, #14]
 801308e:	f023 0304 	bic.w	r3, r3, #4
 8013092:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 8013094:	683b      	ldr	r3, [r7, #0]
 8013096:	889a      	ldrh	r2, [r3, #4]
 8013098:	89fb      	ldrh	r3, [r7, #14]
 801309a:	4313      	orrs	r3, r2
 801309c:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
 801309e:	89bb      	ldrh	r3, [r7, #12]
 80130a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80130a4:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
 80130a6:	89bb      	ldrh	r3, [r7, #12]
 80130a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80130ac:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 80130ae:	683b      	ldr	r3, [r7, #0]
 80130b0:	8a1a      	ldrh	r2, [r3, #16]
 80130b2:	89bb      	ldrh	r3, [r7, #12]
 80130b4:	4313      	orrs	r3, r2
 80130b6:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 80130b8:	683b      	ldr	r3, [r7, #0]
 80130ba:	8a5a      	ldrh	r2, [r3, #18]
 80130bc:	89bb      	ldrh	r3, [r7, #12]
 80130be:	4313      	orrs	r3, r2
 80130c0:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80130c2:	687b      	ldr	r3, [r7, #4]
 80130c4:	89ba      	ldrh	r2, [r7, #12]
 80130c6:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80130c8:	687b      	ldr	r3, [r7, #4]
 80130ca:	897a      	ldrh	r2, [r7, #10]
 80130cc:	831a      	strh	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 80130ce:	683b      	ldr	r3, [r7, #0]
 80130d0:	689a      	ldr	r2, [r3, #8]
 80130d2:	687b      	ldr	r3, [r7, #4]
 80130d4:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80130d6:	687b      	ldr	r3, [r7, #4]
 80130d8:	89fa      	ldrh	r2, [r7, #14]
 80130da:	841a      	strh	r2, [r3, #32]
}
 80130dc:	3714      	adds	r7, #20
 80130de:	46bd      	mov	sp, r7
 80130e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130e4:	4770      	bx	lr
 80130e6:	bf00      	nop
 80130e8:	40010000 	.word	0x40010000
 80130ec:	40010400 	.word	0x40010400

080130f0 <TIM_OC2Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80130f0:	b480      	push	{r7}
 80130f2:	b085      	sub	sp, #20
 80130f4:	af00      	add	r7, sp, #0
 80130f6:	6078      	str	r0, [r7, #4]
 80130f8:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 80130fa:	2300      	movs	r3, #0
 80130fc:	817b      	strh	r3, [r7, #10]
 80130fe:	2300      	movs	r3, #0
 8013100:	81fb      	strh	r3, [r7, #14]
 8013102:	2300      	movs	r3, #0
 8013104:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8013106:	687b      	ldr	r3, [r7, #4]
 8013108:	8c1b      	ldrh	r3, [r3, #32]
 801310a:	b29b      	uxth	r3, r3
 801310c:	f023 0310 	bic.w	r3, r3, #16
 8013110:	b29a      	uxth	r2, r3
 8013112:	687b      	ldr	r3, [r7, #4]
 8013114:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 8013116:	687b      	ldr	r3, [r7, #4]
 8013118:	8c1b      	ldrh	r3, [r3, #32]
 801311a:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801311c:	687b      	ldr	r3, [r7, #4]
 801311e:	889b      	ldrh	r3, [r3, #4]
 8013120:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8013122:	687b      	ldr	r3, [r7, #4]
 8013124:	8b1b      	ldrh	r3, [r3, #24]
 8013126:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
 8013128:	897b      	ldrh	r3, [r7, #10]
 801312a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801312e:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
 8013130:	897b      	ldrh	r3, [r7, #10]
 8013132:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013136:	817b      	strh	r3, [r7, #10]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8013138:	683b      	ldr	r3, [r7, #0]
 801313a:	881b      	ldrh	r3, [r3, #0]
 801313c:	021b      	lsls	r3, r3, #8
 801313e:	b29a      	uxth	r2, r3
 8013140:	897b      	ldrh	r3, [r7, #10]
 8013142:	4313      	orrs	r3, r2
 8013144:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
 8013146:	89fb      	ldrh	r3, [r7, #14]
 8013148:	f023 0320 	bic.w	r3, r3, #32
 801314c:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 801314e:	683b      	ldr	r3, [r7, #0]
 8013150:	899b      	ldrh	r3, [r3, #12]
 8013152:	011b      	lsls	r3, r3, #4
 8013154:	b29a      	uxth	r2, r3
 8013156:	89fb      	ldrh	r3, [r7, #14]
 8013158:	4313      	orrs	r3, r2
 801315a:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 801315c:	683b      	ldr	r3, [r7, #0]
 801315e:	885b      	ldrh	r3, [r3, #2]
 8013160:	011b      	lsls	r3, r3, #4
 8013162:	b29a      	uxth	r2, r3
 8013164:	89fb      	ldrh	r3, [r7, #14]
 8013166:	4313      	orrs	r3, r2
 8013168:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 801316a:	687a      	ldr	r2, [r7, #4]
 801316c:	4b22      	ldr	r3, [pc, #136]	; (80131f8 <TIM_OC2Init+0x108>)
 801316e:	429a      	cmp	r2, r3
 8013170:	d003      	beq.n	801317a <TIM_OC2Init+0x8a>
 8013172:	687a      	ldr	r2, [r7, #4]
 8013174:	4b21      	ldr	r3, [pc, #132]	; (80131fc <TIM_OC2Init+0x10c>)
 8013176:	429a      	cmp	r2, r3
 8013178:	d12b      	bne.n	80131d2 <TIM_OC2Init+0xe2>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 801317a:	89fb      	ldrh	r3, [r7, #14]
 801317c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013180:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 8013182:	683b      	ldr	r3, [r7, #0]
 8013184:	89db      	ldrh	r3, [r3, #14]
 8013186:	011b      	lsls	r3, r3, #4
 8013188:	b29a      	uxth	r2, r3
 801318a:	89fb      	ldrh	r3, [r7, #14]
 801318c:	4313      	orrs	r3, r2
 801318e:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
 8013190:	89fb      	ldrh	r3, [r7, #14]
 8013192:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013196:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 8013198:	683b      	ldr	r3, [r7, #0]
 801319a:	889b      	ldrh	r3, [r3, #4]
 801319c:	011b      	lsls	r3, r3, #4
 801319e:	b29a      	uxth	r2, r3
 80131a0:	89fb      	ldrh	r3, [r7, #14]
 80131a2:	4313      	orrs	r3, r2
 80131a4:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
 80131a6:	89bb      	ldrh	r3, [r7, #12]
 80131a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80131ac:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
 80131ae:	89bb      	ldrh	r3, [r7, #12]
 80131b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80131b4:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 80131b6:	683b      	ldr	r3, [r7, #0]
 80131b8:	8a1b      	ldrh	r3, [r3, #16]
 80131ba:	009b      	lsls	r3, r3, #2
 80131bc:	b29a      	uxth	r2, r3
 80131be:	89bb      	ldrh	r3, [r7, #12]
 80131c0:	4313      	orrs	r3, r2
 80131c2:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 80131c4:	683b      	ldr	r3, [r7, #0]
 80131c6:	8a5b      	ldrh	r3, [r3, #18]
 80131c8:	009b      	lsls	r3, r3, #2
 80131ca:	b29a      	uxth	r2, r3
 80131cc:	89bb      	ldrh	r3, [r7, #12]
 80131ce:	4313      	orrs	r3, r2
 80131d0:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80131d2:	687b      	ldr	r3, [r7, #4]
 80131d4:	89ba      	ldrh	r2, [r7, #12]
 80131d6:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80131d8:	687b      	ldr	r3, [r7, #4]
 80131da:	897a      	ldrh	r2, [r7, #10]
 80131dc:	831a      	strh	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 80131de:	683b      	ldr	r3, [r7, #0]
 80131e0:	689a      	ldr	r2, [r3, #8]
 80131e2:	687b      	ldr	r3, [r7, #4]
 80131e4:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80131e6:	687b      	ldr	r3, [r7, #4]
 80131e8:	89fa      	ldrh	r2, [r7, #14]
 80131ea:	841a      	strh	r2, [r3, #32]
}
 80131ec:	3714      	adds	r7, #20
 80131ee:	46bd      	mov	sp, r7
 80131f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131f4:	4770      	bx	lr
 80131f6:	bf00      	nop
 80131f8:	40010000 	.word	0x40010000
 80131fc:	40010400 	.word	0x40010400

08013200 <TIM_OC3Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8013200:	b480      	push	{r7}
 8013202:	b085      	sub	sp, #20
 8013204:	af00      	add	r7, sp, #0
 8013206:	6078      	str	r0, [r7, #4]
 8013208:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 801320a:	2300      	movs	r3, #0
 801320c:	817b      	strh	r3, [r7, #10]
 801320e:	2300      	movs	r3, #0
 8013210:	81fb      	strh	r3, [r7, #14]
 8013212:	2300      	movs	r3, #0
 8013214:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 8013216:	687b      	ldr	r3, [r7, #4]
 8013218:	8c1b      	ldrh	r3, [r3, #32]
 801321a:	b29b      	uxth	r3, r3
 801321c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013220:	b29a      	uxth	r2, r3
 8013222:	687b      	ldr	r3, [r7, #4]
 8013224:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013226:	687b      	ldr	r3, [r7, #4]
 8013228:	8c1b      	ldrh	r3, [r3, #32]
 801322a:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801322c:	687b      	ldr	r3, [r7, #4]
 801322e:	889b      	ldrh	r3, [r3, #4]
 8013230:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8013232:	687b      	ldr	r3, [r7, #4]
 8013234:	8b9b      	ldrh	r3, [r3, #28]
 8013236:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
 8013238:	897b      	ldrh	r3, [r7, #10]
 801323a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801323e:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 8013240:	897b      	ldrh	r3, [r7, #10]
 8013242:	f023 0303 	bic.w	r3, r3, #3
 8013246:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8013248:	683b      	ldr	r3, [r7, #0]
 801324a:	881a      	ldrh	r2, [r3, #0]
 801324c:	897b      	ldrh	r3, [r7, #10]
 801324e:	4313      	orrs	r3, r2
 8013250:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 8013252:	89fb      	ldrh	r3, [r7, #14]
 8013254:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8013258:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 801325a:	683b      	ldr	r3, [r7, #0]
 801325c:	899b      	ldrh	r3, [r3, #12]
 801325e:	021b      	lsls	r3, r3, #8
 8013260:	b29a      	uxth	r2, r3
 8013262:	89fb      	ldrh	r3, [r7, #14]
 8013264:	4313      	orrs	r3, r2
 8013266:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 8013268:	683b      	ldr	r3, [r7, #0]
 801326a:	885b      	ldrh	r3, [r3, #2]
 801326c:	021b      	lsls	r3, r3, #8
 801326e:	b29a      	uxth	r2, r3
 8013270:	89fb      	ldrh	r3, [r7, #14]
 8013272:	4313      	orrs	r3, r2
 8013274:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8013276:	687a      	ldr	r2, [r7, #4]
 8013278:	4b22      	ldr	r3, [pc, #136]	; (8013304 <TIM_OC3Init+0x104>)
 801327a:	429a      	cmp	r2, r3
 801327c:	d003      	beq.n	8013286 <TIM_OC3Init+0x86>
 801327e:	687a      	ldr	r2, [r7, #4]
 8013280:	4b21      	ldr	r3, [pc, #132]	; (8013308 <TIM_OC3Init+0x108>)
 8013282:	429a      	cmp	r2, r3
 8013284:	d12b      	bne.n	80132de <TIM_OC3Init+0xde>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 8013286:	89fb      	ldrh	r3, [r7, #14]
 8013288:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801328c:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 801328e:	683b      	ldr	r3, [r7, #0]
 8013290:	89db      	ldrh	r3, [r3, #14]
 8013292:	021b      	lsls	r3, r3, #8
 8013294:	b29a      	uxth	r2, r3
 8013296:	89fb      	ldrh	r3, [r7, #14]
 8013298:	4313      	orrs	r3, r2
 801329a:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
 801329c:	89fb      	ldrh	r3, [r7, #14]
 801329e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80132a2:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 80132a4:	683b      	ldr	r3, [r7, #0]
 80132a6:	889b      	ldrh	r3, [r3, #4]
 80132a8:	021b      	lsls	r3, r3, #8
 80132aa:	b29a      	uxth	r2, r3
 80132ac:	89fb      	ldrh	r3, [r7, #14]
 80132ae:	4313      	orrs	r3, r2
 80132b0:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
 80132b2:	89bb      	ldrh	r3, [r7, #12]
 80132b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80132b8:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
 80132ba:	89bb      	ldrh	r3, [r7, #12]
 80132bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80132c0:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 80132c2:	683b      	ldr	r3, [r7, #0]
 80132c4:	8a1b      	ldrh	r3, [r3, #16]
 80132c6:	011b      	lsls	r3, r3, #4
 80132c8:	b29a      	uxth	r2, r3
 80132ca:	89bb      	ldrh	r3, [r7, #12]
 80132cc:	4313      	orrs	r3, r2
 80132ce:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 80132d0:	683b      	ldr	r3, [r7, #0]
 80132d2:	8a5b      	ldrh	r3, [r3, #18]
 80132d4:	011b      	lsls	r3, r3, #4
 80132d6:	b29a      	uxth	r2, r3
 80132d8:	89bb      	ldrh	r3, [r7, #12]
 80132da:	4313      	orrs	r3, r2
 80132dc:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80132de:	687b      	ldr	r3, [r7, #4]
 80132e0:	89ba      	ldrh	r2, [r7, #12]
 80132e2:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80132e4:	687b      	ldr	r3, [r7, #4]
 80132e6:	897a      	ldrh	r2, [r7, #10]
 80132e8:	839a      	strh	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 80132ea:	683b      	ldr	r3, [r7, #0]
 80132ec:	689a      	ldr	r2, [r3, #8]
 80132ee:	687b      	ldr	r3, [r7, #4]
 80132f0:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80132f2:	687b      	ldr	r3, [r7, #4]
 80132f4:	89fa      	ldrh	r2, [r7, #14]
 80132f6:	841a      	strh	r2, [r3, #32]
}
 80132f8:	3714      	adds	r7, #20
 80132fa:	46bd      	mov	sp, r7
 80132fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013300:	4770      	bx	lr
 8013302:	bf00      	nop
 8013304:	40010000 	.word	0x40010000
 8013308:	40010400 	.word	0x40010400

0801330c <TIM_OC4Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 801330c:	b480      	push	{r7}
 801330e:	b085      	sub	sp, #20
 8013310:	af00      	add	r7, sp, #0
 8013312:	6078      	str	r0, [r7, #4]
 8013314:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8013316:	2300      	movs	r3, #0
 8013318:	81bb      	strh	r3, [r7, #12]
 801331a:	2300      	movs	r3, #0
 801331c:	817b      	strh	r3, [r7, #10]
 801331e:	2300      	movs	r3, #0
 8013320:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 8013322:	687b      	ldr	r3, [r7, #4]
 8013324:	8c1b      	ldrh	r3, [r3, #32]
 8013326:	b29b      	uxth	r3, r3
 8013328:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801332c:	b29a      	uxth	r2, r3
 801332e:	687b      	ldr	r3, [r7, #4]
 8013330:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013332:	687b      	ldr	r3, [r7, #4]
 8013334:	8c1b      	ldrh	r3, [r3, #32]
 8013336:	817b      	strh	r3, [r7, #10]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013338:	687b      	ldr	r3, [r7, #4]
 801333a:	889b      	ldrh	r3, [r3, #4]
 801333c:	81fb      	strh	r3, [r7, #14]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801333e:	687b      	ldr	r3, [r7, #4]
 8013340:	8b9b      	ldrh	r3, [r3, #28]
 8013342:	81bb      	strh	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
 8013344:	89bb      	ldrh	r3, [r7, #12]
 8013346:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801334a:	81bb      	strh	r3, [r7, #12]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
 801334c:	89bb      	ldrh	r3, [r7, #12]
 801334e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013352:	81bb      	strh	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8013354:	683b      	ldr	r3, [r7, #0]
 8013356:	881b      	ldrh	r3, [r3, #0]
 8013358:	021b      	lsls	r3, r3, #8
 801335a:	b29a      	uxth	r2, r3
 801335c:	89bb      	ldrh	r3, [r7, #12]
 801335e:	4313      	orrs	r3, r2
 8013360:	81bb      	strh	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 8013362:	897b      	ldrh	r3, [r7, #10]
 8013364:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8013368:	817b      	strh	r3, [r7, #10]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 801336a:	683b      	ldr	r3, [r7, #0]
 801336c:	899b      	ldrh	r3, [r3, #12]
 801336e:	031b      	lsls	r3, r3, #12
 8013370:	b29a      	uxth	r2, r3
 8013372:	897b      	ldrh	r3, [r7, #10]
 8013374:	4313      	orrs	r3, r2
 8013376:	817b      	strh	r3, [r7, #10]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8013378:	683b      	ldr	r3, [r7, #0]
 801337a:	885b      	ldrh	r3, [r3, #2]
 801337c:	031b      	lsls	r3, r3, #12
 801337e:	b29a      	uxth	r2, r3
 8013380:	897b      	ldrh	r3, [r7, #10]
 8013382:	4313      	orrs	r3, r2
 8013384:	817b      	strh	r3, [r7, #10]
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 8013386:	687a      	ldr	r2, [r7, #4]
 8013388:	4b11      	ldr	r3, [pc, #68]	; (80133d0 <TIM_OC4Init+0xc4>)
 801338a:	429a      	cmp	r2, r3
 801338c:	d003      	beq.n	8013396 <TIM_OC4Init+0x8a>
 801338e:	687a      	ldr	r2, [r7, #4]
 8013390:	4b10      	ldr	r3, [pc, #64]	; (80133d4 <TIM_OC4Init+0xc8>)
 8013392:	429a      	cmp	r2, r3
 8013394:	d10a      	bne.n	80133ac <TIM_OC4Init+0xa0>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
 8013396:	89fb      	ldrh	r3, [r7, #14]
 8013398:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801339c:	81fb      	strh	r3, [r7, #14]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 801339e:	683b      	ldr	r3, [r7, #0]
 80133a0:	8a1b      	ldrh	r3, [r3, #16]
 80133a2:	019b      	lsls	r3, r3, #6
 80133a4:	b29a      	uxth	r2, r3
 80133a6:	89fb      	ldrh	r3, [r7, #14]
 80133a8:	4313      	orrs	r3, r2
 80133aa:	81fb      	strh	r3, [r7, #14]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80133ac:	687b      	ldr	r3, [r7, #4]
 80133ae:	89fa      	ldrh	r2, [r7, #14]
 80133b0:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 80133b2:	687b      	ldr	r3, [r7, #4]
 80133b4:	89ba      	ldrh	r2, [r7, #12]
 80133b6:	839a      	strh	r2, [r3, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 80133b8:	683b      	ldr	r3, [r7, #0]
 80133ba:	689a      	ldr	r2, [r3, #8]
 80133bc:	687b      	ldr	r3, [r7, #4]
 80133be:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80133c0:	687b      	ldr	r3, [r7, #4]
 80133c2:	897a      	ldrh	r2, [r7, #10]
 80133c4:	841a      	strh	r2, [r3, #32]
}
 80133c6:	3714      	adds	r7, #20
 80133c8:	46bd      	mov	sp, r7
 80133ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133ce:	4770      	bx	lr
 80133d0:	40010000 	.word	0x40010000
 80133d4:	40010400 	.word	0x40010400

080133d8 <TIM_OCStructInit>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80133d8:	b480      	push	{r7}
 80133da:	b083      	sub	sp, #12
 80133dc:	af00      	add	r7, sp, #0
 80133de:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
 80133e0:	687b      	ldr	r3, [r7, #4]
 80133e2:	2200      	movs	r2, #0
 80133e4:	801a      	strh	r2, [r3, #0]
  TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
 80133e6:	687b      	ldr	r3, [r7, #4]
 80133e8:	2200      	movs	r2, #0
 80133ea:	805a      	strh	r2, [r3, #2]
  TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
 80133ec:	687b      	ldr	r3, [r7, #4]
 80133ee:	2200      	movs	r2, #0
 80133f0:	809a      	strh	r2, [r3, #4]
  TIM_OCInitStruct->TIM_Pulse = 0x00000000;
 80133f2:	687b      	ldr	r3, [r7, #4]
 80133f4:	2200      	movs	r2, #0
 80133f6:	609a      	str	r2, [r3, #8]
  TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
 80133f8:	687b      	ldr	r3, [r7, #4]
 80133fa:	2200      	movs	r2, #0
 80133fc:	819a      	strh	r2, [r3, #12]
  TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
 80133fe:	687b      	ldr	r3, [r7, #4]
 8013400:	2200      	movs	r2, #0
 8013402:	81da      	strh	r2, [r3, #14]
  TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
 8013404:	687b      	ldr	r3, [r7, #4]
 8013406:	2200      	movs	r2, #0
 8013408:	821a      	strh	r2, [r3, #16]
  TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
 801340a:	687b      	ldr	r3, [r7, #4]
 801340c:	2200      	movs	r2, #0
 801340e:	825a      	strh	r2, [r3, #18]
}
 8013410:	370c      	adds	r7, #12
 8013412:	46bd      	mov	sp, r7
 8013414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013418:	4770      	bx	lr
 801341a:	bf00      	nop

0801341c <TIM_SelectOCxM>:
  *            @arg TIM_ForcedAction_Active
  *            @arg TIM_ForcedAction_InActive
  * @retval None
  */
void TIM_SelectOCxM(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_OCMode)
{
 801341c:	b480      	push	{r7}
 801341e:	b085      	sub	sp, #20
 8013420:	af00      	add	r7, sp, #0
 8013422:	6078      	str	r0, [r7, #4]
 8013424:	4613      	mov	r3, r2
 8013426:	460a      	mov	r2, r1
 8013428:	807a      	strh	r2, [r7, #2]
 801342a:	803b      	strh	r3, [r7, #0]
  uint32_t tmp = 0;
 801342c:	2300      	movs	r3, #0
 801342e:	60fb      	str	r3, [r7, #12]
  uint16_t tmp1 = 0;
 8013430:	2300      	movs	r3, #0
 8013432:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_OCM(TIM_OCMode));

  tmp = (uint32_t) TIMx;
 8013434:	687b      	ldr	r3, [r7, #4]
 8013436:	60fb      	str	r3, [r7, #12]
  tmp += CCMR_OFFSET;
 8013438:	68fb      	ldr	r3, [r7, #12]
 801343a:	3318      	adds	r3, #24
 801343c:	60fb      	str	r3, [r7, #12]

  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;
 801343e:	887b      	ldrh	r3, [r7, #2]
 8013440:	2201      	movs	r2, #1
 8013442:	fa02 f303 	lsl.w	r3, r2, r3
 8013446:	817b      	strh	r3, [r7, #10]

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 8013448:	687b      	ldr	r3, [r7, #4]
 801344a:	8c1b      	ldrh	r3, [r3, #32]
 801344c:	b29a      	uxth	r2, r3
 801344e:	897b      	ldrh	r3, [r7, #10]
 8013450:	43db      	mvns	r3, r3
 8013452:	b29b      	uxth	r3, r3
 8013454:	4013      	ands	r3, r2
 8013456:	b29a      	uxth	r2, r3
 8013458:	687b      	ldr	r3, [r7, #4]
 801345a:	841a      	strh	r2, [r3, #32]

  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
 801345c:	887b      	ldrh	r3, [r7, #2]
 801345e:	2b00      	cmp	r3, #0
 8013460:	d002      	beq.n	8013468 <TIM_SelectOCxM+0x4c>
 8013462:	887b      	ldrh	r3, [r7, #2]
 8013464:	2b08      	cmp	r3, #8
 8013466:	d113      	bne.n	8013490 <TIM_SelectOCxM+0x74>
  {
    tmp += (TIM_Channel>>1);
 8013468:	887b      	ldrh	r3, [r7, #2]
 801346a:	085b      	lsrs	r3, r3, #1
 801346c:	b29b      	uxth	r3, r3
 801346e:	68fa      	ldr	r2, [r7, #12]
 8013470:	4413      	add	r3, r2
 8013472:	60fb      	str	r3, [r7, #12]

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC13M_MASK;
 8013474:	68fa      	ldr	r2, [r7, #12]
 8013476:	68fb      	ldr	r3, [r7, #12]
 8013478:	6819      	ldr	r1, [r3, #0]
 801347a:	f64f 738f 	movw	r3, #65423	; 0xff8f
 801347e:	400b      	ands	r3, r1
 8013480:	6013      	str	r3, [r2, #0]
   
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= TIM_OCMode;
 8013482:	68fb      	ldr	r3, [r7, #12]
 8013484:	68fa      	ldr	r2, [r7, #12]
 8013486:	6811      	ldr	r1, [r2, #0]
 8013488:	883a      	ldrh	r2, [r7, #0]
 801348a:	430a      	orrs	r2, r1
 801348c:	601a      	str	r2, [r3, #0]
 801348e:	e016      	b.n	80134be <TIM_SelectOCxM+0xa2>
  }
  else
  {
    tmp += (uint16_t)(TIM_Channel - (uint16_t)4)>> (uint16_t)1;
 8013490:	887b      	ldrh	r3, [r7, #2]
 8013492:	3b04      	subs	r3, #4
 8013494:	b29b      	uxth	r3, r3
 8013496:	085b      	lsrs	r3, r3, #1
 8013498:	b29b      	uxth	r3, r3
 801349a:	68fa      	ldr	r2, [r7, #12]
 801349c:	4413      	add	r3, r2
 801349e:	60fb      	str	r3, [r7, #12]

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC24M_MASK;
 80134a0:	68fa      	ldr	r2, [r7, #12]
 80134a2:	68fb      	ldr	r3, [r7, #12]
 80134a4:	6819      	ldr	r1, [r3, #0]
 80134a6:	f648 73ff 	movw	r3, #36863	; 0x8fff
 80134aa:	400b      	ands	r3, r1
 80134ac:	6013      	str	r3, [r2, #0]
    
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
 80134ae:	68fb      	ldr	r3, [r7, #12]
 80134b0:	68fa      	ldr	r2, [r7, #12]
 80134b2:	6811      	ldr	r1, [r2, #0]
 80134b4:	883a      	ldrh	r2, [r7, #0]
 80134b6:	0212      	lsls	r2, r2, #8
 80134b8:	b292      	uxth	r2, r2
 80134ba:	430a      	orrs	r2, r1
 80134bc:	601a      	str	r2, [r3, #0]
  }
}
 80134be:	3714      	adds	r7, #20
 80134c0:	46bd      	mov	sp, r7
 80134c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134c6:	4770      	bx	lr

080134c8 <TIM_SetCompare1>:
  * @param  TIMx: where x can be 1 to 14 except 6 and 7, to select the TIM peripheral.
  * @param  Compare1: specifies the Capture Compare1 register new value.
  * @retval None
  */
void TIM_SetCompare1(TIM_TypeDef* TIMx, uint32_t Compare1)
{
 80134c8:	b480      	push	{r7}
 80134ca:	b083      	sub	sp, #12
 80134cc:	af00      	add	r7, sp, #0
 80134ce:	6078      	str	r0, [r7, #4]
 80134d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
 80134d2:	687b      	ldr	r3, [r7, #4]
 80134d4:	683a      	ldr	r2, [r7, #0]
 80134d6:	635a      	str	r2, [r3, #52]	; 0x34
}
 80134d8:	370c      	adds	r7, #12
 80134da:	46bd      	mov	sp, r7
 80134dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134e0:	4770      	bx	lr
 80134e2:	bf00      	nop

080134e4 <TIM_SetCompare2>:
  *         peripheral.
  * @param  Compare2: specifies the Capture Compare2 register new value.
  * @retval None
  */
void TIM_SetCompare2(TIM_TypeDef* TIMx, uint32_t Compare2)
{
 80134e4:	b480      	push	{r7}
 80134e6:	b083      	sub	sp, #12
 80134e8:	af00      	add	r7, sp, #0
 80134ea:	6078      	str	r0, [r7, #4]
 80134ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Set the Capture Compare2 Register value */
  TIMx->CCR2 = Compare2;
 80134ee:	687b      	ldr	r3, [r7, #4]
 80134f0:	683a      	ldr	r2, [r7, #0]
 80134f2:	639a      	str	r2, [r3, #56]	; 0x38
}
 80134f4:	370c      	adds	r7, #12
 80134f6:	46bd      	mov	sp, r7
 80134f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134fc:	4770      	bx	lr
 80134fe:	bf00      	nop

08013500 <TIM_SetCompare3>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare3: specifies the Capture Compare3 register new value.
  * @retval None
  */
void TIM_SetCompare3(TIM_TypeDef* TIMx, uint32_t Compare3)
{
 8013500:	b480      	push	{r7}
 8013502:	b083      	sub	sp, #12
 8013504:	af00      	add	r7, sp, #0
 8013506:	6078      	str	r0, [r7, #4]
 8013508:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare3 Register value */
  TIMx->CCR3 = Compare3;
 801350a:	687b      	ldr	r3, [r7, #4]
 801350c:	683a      	ldr	r2, [r7, #0]
 801350e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8013510:	370c      	adds	r7, #12
 8013512:	46bd      	mov	sp, r7
 8013514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013518:	4770      	bx	lr
 801351a:	bf00      	nop

0801351c <TIM_SetCompare4>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare4: specifies the Capture Compare4 register new value.
  * @retval None
  */
void TIM_SetCompare4(TIM_TypeDef* TIMx, uint32_t Compare4)
{
 801351c:	b480      	push	{r7}
 801351e:	b083      	sub	sp, #12
 8013520:	af00      	add	r7, sp, #0
 8013522:	6078      	str	r0, [r7, #4]
 8013524:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare4 Register value */
  TIMx->CCR4 = Compare4;
 8013526:	687b      	ldr	r3, [r7, #4]
 8013528:	683a      	ldr	r2, [r7, #0]
 801352a:	641a      	str	r2, [r3, #64]	; 0x40
}
 801352c:	370c      	adds	r7, #12
 801352e:	46bd      	mov	sp, r7
 8013530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013534:	4770      	bx	lr
 8013536:	bf00      	nop

08013538 <TIM_ForcedOC1Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC1REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC1REF.
  * @retval None
  */
void TIM_ForcedOC1Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 8013538:	b480      	push	{r7}
 801353a:	b085      	sub	sp, #20
 801353c:	af00      	add	r7, sp, #0
 801353e:	6078      	str	r0, [r7, #4]
 8013540:	460b      	mov	r3, r1
 8013542:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8013544:	2300      	movs	r3, #0
 8013546:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 8013548:	687b      	ldr	r3, [r7, #4]
 801354a:	8b1b      	ldrh	r3, [r3, #24]
 801354c:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1M Bits */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1M;
 801354e:	89fb      	ldrh	r3, [r7, #14]
 8013550:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013554:	81fb      	strh	r3, [r7, #14]

  /* Configure The Forced output Mode */
  tmpccmr1 |= TIM_ForcedAction;
 8013556:	89fa      	ldrh	r2, [r7, #14]
 8013558:	887b      	ldrh	r3, [r7, #2]
 801355a:	4313      	orrs	r3, r2
 801355c:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 801355e:	687b      	ldr	r3, [r7, #4]
 8013560:	89fa      	ldrh	r2, [r7, #14]
 8013562:	831a      	strh	r2, [r3, #24]
}
 8013564:	3714      	adds	r7, #20
 8013566:	46bd      	mov	sp, r7
 8013568:	f85d 7b04 	ldr.w	r7, [sp], #4
 801356c:	4770      	bx	lr
 801356e:	bf00      	nop

08013570 <TIM_ForcedOC2Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC2REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC2REF.
  * @retval None
  */
void TIM_ForcedOC2Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 8013570:	b480      	push	{r7}
 8013572:	b085      	sub	sp, #20
 8013574:	af00      	add	r7, sp, #0
 8013576:	6078      	str	r0, [r7, #4]
 8013578:	460b      	mov	r3, r1
 801357a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 801357c:	2300      	movs	r3, #0
 801357e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 8013580:	687b      	ldr	r3, [r7, #4]
 8013582:	8b1b      	ldrh	r3, [r3, #24]
 8013584:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2M Bits */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC2M;
 8013586:	89fb      	ldrh	r3, [r7, #14]
 8013588:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801358c:	81fb      	strh	r3, [r7, #14]

  /* Configure The Forced output Mode */
  tmpccmr1 |= (uint16_t)(TIM_ForcedAction << 8);
 801358e:	887b      	ldrh	r3, [r7, #2]
 8013590:	021b      	lsls	r3, r3, #8
 8013592:	b29a      	uxth	r2, r3
 8013594:	89fb      	ldrh	r3, [r7, #14]
 8013596:	4313      	orrs	r3, r2
 8013598:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 801359a:	687b      	ldr	r3, [r7, #4]
 801359c:	89fa      	ldrh	r2, [r7, #14]
 801359e:	831a      	strh	r2, [r3, #24]
}
 80135a0:	3714      	adds	r7, #20
 80135a2:	46bd      	mov	sp, r7
 80135a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135a8:	4770      	bx	lr
 80135aa:	bf00      	nop

080135ac <TIM_ForcedOC3Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC3REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC3REF.
  * @retval None
  */
void TIM_ForcedOC3Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 80135ac:	b480      	push	{r7}
 80135ae:	b085      	sub	sp, #20
 80135b0:	af00      	add	r7, sp, #0
 80135b2:	6078      	str	r0, [r7, #4]
 80135b4:	460b      	mov	r3, r1
 80135b6:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 80135b8:	2300      	movs	r3, #0
 80135ba:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));

  tmpccmr2 = TIMx->CCMR2;
 80135bc:	687b      	ldr	r3, [r7, #4]
 80135be:	8b9b      	ldrh	r3, [r3, #28]
 80135c0:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1M Bits */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3M;
 80135c2:	89fb      	ldrh	r3, [r7, #14]
 80135c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80135c8:	81fb      	strh	r3, [r7, #14]

  /* Configure The Forced output Mode */
  tmpccmr2 |= TIM_ForcedAction;
 80135ca:	89fa      	ldrh	r2, [r7, #14]
 80135cc:	887b      	ldrh	r3, [r7, #2]
 80135ce:	4313      	orrs	r3, r2
 80135d0:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80135d2:	687b      	ldr	r3, [r7, #4]
 80135d4:	89fa      	ldrh	r2, [r7, #14]
 80135d6:	839a      	strh	r2, [r3, #28]
}
 80135d8:	3714      	adds	r7, #20
 80135da:	46bd      	mov	sp, r7
 80135dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135e0:	4770      	bx	lr
 80135e2:	bf00      	nop

080135e4 <TIM_ForcedOC4Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC4REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC4REF.
  * @retval None
  */
void TIM_ForcedOC4Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 80135e4:	b480      	push	{r7}
 80135e6:	b085      	sub	sp, #20
 80135e8:	af00      	add	r7, sp, #0
 80135ea:	6078      	str	r0, [r7, #4]
 80135ec:	460b      	mov	r3, r1
 80135ee:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 80135f0:	2300      	movs	r3, #0
 80135f2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr2 = TIMx->CCMR2;
 80135f4:	687b      	ldr	r3, [r7, #4]
 80135f6:	8b9b      	ldrh	r3, [r3, #28]
 80135f8:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2M Bits */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC4M;
 80135fa:	89fb      	ldrh	r3, [r7, #14]
 80135fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8013600:	81fb      	strh	r3, [r7, #14]

  /* Configure The Forced output Mode */
  tmpccmr2 |= (uint16_t)(TIM_ForcedAction << 8);
 8013602:	887b      	ldrh	r3, [r7, #2]
 8013604:	021b      	lsls	r3, r3, #8
 8013606:	b29a      	uxth	r2, r3
 8013608:	89fb      	ldrh	r3, [r7, #14]
 801360a:	4313      	orrs	r3, r2
 801360c:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 801360e:	687b      	ldr	r3, [r7, #4]
 8013610:	89fa      	ldrh	r2, [r7, #14]
 8013612:	839a      	strh	r2, [r3, #28]
}
 8013614:	3714      	adds	r7, #20
 8013616:	46bd      	mov	sp, r7
 8013618:	f85d 7b04 	ldr.w	r7, [sp], #4
 801361c:	4770      	bx	lr
 801361e:	bf00      	nop

08013620 <TIM_OC1PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8013620:	b480      	push	{r7}
 8013622:	b085      	sub	sp, #20
 8013624:	af00      	add	r7, sp, #0
 8013626:	6078      	str	r0, [r7, #4]
 8013628:	460b      	mov	r3, r1
 801362a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 801362c:	2300      	movs	r3, #0
 801362e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 8013630:	687b      	ldr	r3, [r7, #4]
 8013632:	8b1b      	ldrh	r3, [r3, #24]
 8013634:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC1PE);
 8013636:	89fb      	ldrh	r3, [r7, #14]
 8013638:	f023 0308 	bic.w	r3, r3, #8
 801363c:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 801363e:	89fa      	ldrh	r2, [r7, #14]
 8013640:	887b      	ldrh	r3, [r7, #2]
 8013642:	4313      	orrs	r3, r2
 8013644:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8013646:	687b      	ldr	r3, [r7, #4]
 8013648:	89fa      	ldrh	r2, [r7, #14]
 801364a:	831a      	strh	r2, [r3, #24]
}
 801364c:	3714      	adds	r7, #20
 801364e:	46bd      	mov	sp, r7
 8013650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013654:	4770      	bx	lr
 8013656:	bf00      	nop

08013658 <TIM_OC2PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC2PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8013658:	b480      	push	{r7}
 801365a:	b085      	sub	sp, #20
 801365c:	af00      	add	r7, sp, #0
 801365e:	6078      	str	r0, [r7, #4]
 8013660:	460b      	mov	r3, r1
 8013662:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8013664:	2300      	movs	r3, #0
 8013666:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 8013668:	687b      	ldr	r3, [r7, #4]
 801366a:	8b1b      	ldrh	r3, [r3, #24]
 801366c:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2PE);
 801366e:	89fb      	ldrh	r3, [r7, #14]
 8013670:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8013674:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
 8013676:	887b      	ldrh	r3, [r7, #2]
 8013678:	021b      	lsls	r3, r3, #8
 801367a:	b29a      	uxth	r2, r3
 801367c:	89fb      	ldrh	r3, [r7, #14]
 801367e:	4313      	orrs	r3, r2
 8013680:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8013682:	687b      	ldr	r3, [r7, #4]
 8013684:	89fa      	ldrh	r2, [r7, #14]
 8013686:	831a      	strh	r2, [r3, #24]
}
 8013688:	3714      	adds	r7, #20
 801368a:	46bd      	mov	sp, r7
 801368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013690:	4770      	bx	lr
 8013692:	bf00      	nop

08013694 <TIM_OC3PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8013694:	b480      	push	{r7}
 8013696:	b085      	sub	sp, #20
 8013698:	af00      	add	r7, sp, #0
 801369a:	6078      	str	r0, [r7, #4]
 801369c:	460b      	mov	r3, r1
 801369e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 80136a0:	2300      	movs	r3, #0
 80136a2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 80136a4:	687b      	ldr	r3, [r7, #4]
 80136a6:	8b9b      	ldrh	r3, [r3, #28]
 80136a8:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC3PE);
 80136aa:	89fb      	ldrh	r3, [r7, #14]
 80136ac:	f023 0308 	bic.w	r3, r3, #8
 80136b0:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 80136b2:	89fa      	ldrh	r2, [r7, #14]
 80136b4:	887b      	ldrh	r3, [r7, #2]
 80136b6:	4313      	orrs	r3, r2
 80136b8:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80136ba:	687b      	ldr	r3, [r7, #4]
 80136bc:	89fa      	ldrh	r2, [r7, #14]
 80136be:	839a      	strh	r2, [r3, #28]
}
 80136c0:	3714      	adds	r7, #20
 80136c2:	46bd      	mov	sp, r7
 80136c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136c8:	4770      	bx	lr
 80136ca:	bf00      	nop

080136cc <TIM_OC4PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 80136cc:	b480      	push	{r7}
 80136ce:	b085      	sub	sp, #20
 80136d0:	af00      	add	r7, sp, #0
 80136d2:	6078      	str	r0, [r7, #4]
 80136d4:	460b      	mov	r3, r1
 80136d6:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 80136d8:	2300      	movs	r3, #0
 80136da:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 80136dc:	687b      	ldr	r3, [r7, #4]
 80136de:	8b9b      	ldrh	r3, [r3, #28]
 80136e0:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4PE);
 80136e2:	89fb      	ldrh	r3, [r7, #14]
 80136e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80136e8:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
 80136ea:	887b      	ldrh	r3, [r7, #2]
 80136ec:	021b      	lsls	r3, r3, #8
 80136ee:	b29a      	uxth	r2, r3
 80136f0:	89fb      	ldrh	r3, [r7, #14]
 80136f2:	4313      	orrs	r3, r2
 80136f4:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80136f6:	687b      	ldr	r3, [r7, #4]
 80136f8:	89fa      	ldrh	r2, [r7, #14]
 80136fa:	839a      	strh	r2, [r3, #28]
}
 80136fc:	3714      	adds	r7, #20
 80136fe:	46bd      	mov	sp, r7
 8013700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013704:	4770      	bx	lr
 8013706:	bf00      	nop

08013708 <TIM_OC1FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC1FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 8013708:	b480      	push	{r7}
 801370a:	b085      	sub	sp, #20
 801370c:	af00      	add	r7, sp, #0
 801370e:	6078      	str	r0, [r7, #4]
 8013710:	460b      	mov	r3, r1
 8013712:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8013714:	2300      	movs	r3, #0
 8013716:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8013718:	687b      	ldr	r3, [r7, #4]
 801371a:	8b1b      	ldrh	r3, [r3, #24]
 801371c:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1FE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1FE;
 801371e:	89fb      	ldrh	r3, [r7, #14]
 8013720:	f023 0304 	bic.w	r3, r3, #4
 8013724:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= TIM_OCFast;
 8013726:	89fa      	ldrh	r2, [r7, #14]
 8013728:	887b      	ldrh	r3, [r7, #2]
 801372a:	4313      	orrs	r3, r2
 801372c:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 801372e:	687b      	ldr	r3, [r7, #4]
 8013730:	89fa      	ldrh	r2, [r7, #14]
 8013732:	831a      	strh	r2, [r3, #24]
}
 8013734:	3714      	adds	r7, #20
 8013736:	46bd      	mov	sp, r7
 8013738:	f85d 7b04 	ldr.w	r7, [sp], #4
 801373c:	4770      	bx	lr
 801373e:	bf00      	nop

08013740 <TIM_OC2FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC2FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 8013740:	b480      	push	{r7}
 8013742:	b085      	sub	sp, #20
 8013744:	af00      	add	r7, sp, #0
 8013746:	6078      	str	r0, [r7, #4]
 8013748:	460b      	mov	r3, r1
 801374a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 801374c:	2300      	movs	r3, #0
 801374e:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8013750:	687b      	ldr	r3, [r7, #4]
 8013752:	8b1b      	ldrh	r3, [r3, #24]
 8013754:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2FE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2FE);
 8013756:	89fb      	ldrh	r3, [r7, #14]
 8013758:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801375c:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCFast << 8);
 801375e:	887b      	ldrh	r3, [r7, #2]
 8013760:	021b      	lsls	r3, r3, #8
 8013762:	b29a      	uxth	r2, r3
 8013764:	89fb      	ldrh	r3, [r7, #14]
 8013766:	4313      	orrs	r3, r2
 8013768:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 801376a:	687b      	ldr	r3, [r7, #4]
 801376c:	89fa      	ldrh	r2, [r7, #14]
 801376e:	831a      	strh	r2, [r3, #24]
}
 8013770:	3714      	adds	r7, #20
 8013772:	46bd      	mov	sp, r7
 8013774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013778:	4770      	bx	lr
 801377a:	bf00      	nop

0801377c <TIM_OC3FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC3FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 801377c:	b480      	push	{r7}
 801377e:	b085      	sub	sp, #20
 8013780:	af00      	add	r7, sp, #0
 8013782:	6078      	str	r0, [r7, #4]
 8013784:	460b      	mov	r3, r1
 8013786:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8013788:	2300      	movs	r3, #0
 801378a:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 801378c:	687b      	ldr	r3, [r7, #4]
 801378e:	8b9b      	ldrh	r3, [r3, #28]
 8013790:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC3FE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3FE;
 8013792:	89fb      	ldrh	r3, [r7, #14]
 8013794:	f023 0304 	bic.w	r3, r3, #4
 8013798:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= TIM_OCFast;
 801379a:	89fa      	ldrh	r2, [r7, #14]
 801379c:	887b      	ldrh	r3, [r7, #2]
 801379e:	4313      	orrs	r3, r2
 80137a0:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 80137a2:	687b      	ldr	r3, [r7, #4]
 80137a4:	89fa      	ldrh	r2, [r7, #14]
 80137a6:	839a      	strh	r2, [r3, #28]
}
 80137a8:	3714      	adds	r7, #20
 80137aa:	46bd      	mov	sp, r7
 80137ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137b0:	4770      	bx	lr
 80137b2:	bf00      	nop

080137b4 <TIM_OC4FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC4FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 80137b4:	b480      	push	{r7}
 80137b6:	b085      	sub	sp, #20
 80137b8:	af00      	add	r7, sp, #0
 80137ba:	6078      	str	r0, [r7, #4]
 80137bc:	460b      	mov	r3, r1
 80137be:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 80137c0:	2300      	movs	r3, #0
 80137c2:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 80137c4:	687b      	ldr	r3, [r7, #4]
 80137c6:	8b9b      	ldrh	r3, [r3, #28]
 80137c8:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC4FE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4FE);
 80137ca:	89fb      	ldrh	r3, [r7, #14]
 80137cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80137d0:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCFast << 8);
 80137d2:	887b      	ldrh	r3, [r7, #2]
 80137d4:	021b      	lsls	r3, r3, #8
 80137d6:	b29a      	uxth	r2, r3
 80137d8:	89fb      	ldrh	r3, [r7, #14]
 80137da:	4313      	orrs	r3, r2
 80137dc:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 80137de:	687b      	ldr	r3, [r7, #4]
 80137e0:	89fa      	ldrh	r2, [r7, #14]
 80137e2:	839a      	strh	r2, [r3, #28]
}
 80137e4:	3714      	adds	r7, #20
 80137e6:	46bd      	mov	sp, r7
 80137e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137ec:	4770      	bx	lr
 80137ee:	bf00      	nop

080137f0 <TIM_ClearOC1Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC1Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 80137f0:	b480      	push	{r7}
 80137f2:	b085      	sub	sp, #20
 80137f4:	af00      	add	r7, sp, #0
 80137f6:	6078      	str	r0, [r7, #4]
 80137f8:	460b      	mov	r3, r1
 80137fa:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 80137fc:	2300      	movs	r3, #0
 80137fe:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 8013800:	687b      	ldr	r3, [r7, #4]
 8013802:	8b1b      	ldrh	r3, [r3, #24]
 8013804:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1CE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1CE;
 8013806:	89fb      	ldrh	r3, [r7, #14]
 8013808:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801380c:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= TIM_OCClear;
 801380e:	89fa      	ldrh	r2, [r7, #14]
 8013810:	887b      	ldrh	r3, [r7, #2]
 8013812:	4313      	orrs	r3, r2
 8013814:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8013816:	687b      	ldr	r3, [r7, #4]
 8013818:	89fa      	ldrh	r2, [r7, #14]
 801381a:	831a      	strh	r2, [r3, #24]
}
 801381c:	3714      	adds	r7, #20
 801381e:	46bd      	mov	sp, r7
 8013820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013824:	4770      	bx	lr
 8013826:	bf00      	nop

08013828 <TIM_ClearOC2Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC2Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 8013828:	b480      	push	{r7}
 801382a:	b085      	sub	sp, #20
 801382c:	af00      	add	r7, sp, #0
 801382e:	6078      	str	r0, [r7, #4]
 8013830:	460b      	mov	r3, r1
 8013832:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8013834:	2300      	movs	r3, #0
 8013836:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 8013838:	687b      	ldr	r3, [r7, #4]
 801383a:	8b1b      	ldrh	r3, [r3, #24]
 801383c:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2CE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC2CE;
 801383e:	89fb      	ldrh	r3, [r7, #14]
 8013840:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8013844:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCClear << 8);
 8013846:	887b      	ldrh	r3, [r7, #2]
 8013848:	021b      	lsls	r3, r3, #8
 801384a:	b29a      	uxth	r2, r3
 801384c:	89fb      	ldrh	r3, [r7, #14]
 801384e:	4313      	orrs	r3, r2
 8013850:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8013852:	687b      	ldr	r3, [r7, #4]
 8013854:	89fa      	ldrh	r2, [r7, #14]
 8013856:	831a      	strh	r2, [r3, #24]
}
 8013858:	3714      	adds	r7, #20
 801385a:	46bd      	mov	sp, r7
 801385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013860:	4770      	bx	lr
 8013862:	bf00      	nop

08013864 <TIM_ClearOC3Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC3Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 8013864:	b480      	push	{r7}
 8013866:	b085      	sub	sp, #20
 8013868:	af00      	add	r7, sp, #0
 801386a:	6078      	str	r0, [r7, #4]
 801386c:	460b      	mov	r3, r1
 801386e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8013870:	2300      	movs	r3, #0
 8013872:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
 8013874:	687b      	ldr	r3, [r7, #4]
 8013876:	8b9b      	ldrh	r3, [r3, #28]
 8013878:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC3CE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3CE;
 801387a:	89fb      	ldrh	r3, [r7, #14]
 801387c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013880:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= TIM_OCClear;
 8013882:	89fa      	ldrh	r2, [r7, #14]
 8013884:	887b      	ldrh	r3, [r7, #2]
 8013886:	4313      	orrs	r3, r2
 8013888:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 801388a:	687b      	ldr	r3, [r7, #4]
 801388c:	89fa      	ldrh	r2, [r7, #14]
 801388e:	839a      	strh	r2, [r3, #28]
}
 8013890:	3714      	adds	r7, #20
 8013892:	46bd      	mov	sp, r7
 8013894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013898:	4770      	bx	lr
 801389a:	bf00      	nop

0801389c <TIM_ClearOC4Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC4Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 801389c:	b480      	push	{r7}
 801389e:	b085      	sub	sp, #20
 80138a0:	af00      	add	r7, sp, #0
 80138a2:	6078      	str	r0, [r7, #4]
 80138a4:	460b      	mov	r3, r1
 80138a6:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 80138a8:	2300      	movs	r3, #0
 80138aa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
 80138ac:	687b      	ldr	r3, [r7, #4]
 80138ae:	8b9b      	ldrh	r3, [r3, #28]
 80138b0:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC4CE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC4CE;
 80138b2:	89fb      	ldrh	r3, [r7, #14]
 80138b4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80138b8:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCClear << 8);
 80138ba:	887b      	ldrh	r3, [r7, #2]
 80138bc:	021b      	lsls	r3, r3, #8
 80138be:	b29a      	uxth	r2, r3
 80138c0:	89fb      	ldrh	r3, [r7, #14]
 80138c2:	4313      	orrs	r3, r2
 80138c4:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80138c6:	687b      	ldr	r3, [r7, #4]
 80138c8:	89fa      	ldrh	r2, [r7, #14]
 80138ca:	839a      	strh	r2, [r3, #28]
}
 80138cc:	3714      	adds	r7, #20
 80138ce:	46bd      	mov	sp, r7
 80138d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138d4:	4770      	bx	lr
 80138d6:	bf00      	nop

080138d8 <TIM_OC1PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC1PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 80138d8:	b480      	push	{r7}
 80138da:	b085      	sub	sp, #20
 80138dc:	af00      	add	r7, sp, #0
 80138de:	6078      	str	r0, [r7, #4]
 80138e0:	460b      	mov	r3, r1
 80138e2:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 80138e4:	2300      	movs	r3, #0
 80138e6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 80138e8:	687b      	ldr	r3, [r7, #4]
 80138ea:	8c1b      	ldrh	r3, [r3, #32]
 80138ec:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC1P Bit */
  tmpccer &= (uint16_t)(~TIM_CCER_CC1P);
 80138ee:	89fb      	ldrh	r3, [r7, #14]
 80138f0:	f023 0302 	bic.w	r3, r3, #2
 80138f4:	81fb      	strh	r3, [r7, #14]
  tmpccer |= TIM_OCPolarity;
 80138f6:	89fa      	ldrh	r2, [r7, #14]
 80138f8:	887b      	ldrh	r3, [r7, #2]
 80138fa:	4313      	orrs	r3, r2
 80138fc:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 80138fe:	687b      	ldr	r3, [r7, #4]
 8013900:	89fa      	ldrh	r2, [r7, #14]
 8013902:	841a      	strh	r2, [r3, #32]
}
 8013904:	3714      	adds	r7, #20
 8013906:	46bd      	mov	sp, r7
 8013908:	f85d 7b04 	ldr.w	r7, [sp], #4
 801390c:	4770      	bx	lr
 801390e:	bf00      	nop

08013910 <TIM_OC1NPolarityConfig>:
  *            @arg TIM_OCNPolarity_High: Output Compare active high
  *            @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC1NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
 8013910:	b480      	push	{r7}
 8013912:	b085      	sub	sp, #20
 8013914:	af00      	add	r7, sp, #0
 8013916:	6078      	str	r0, [r7, #4]
 8013918:	460b      	mov	r3, r1
 801391a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 801391c:	2300      	movs	r3, #0
 801391e:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
   
  tmpccer = TIMx->CCER;
 8013920:	687b      	ldr	r3, [r7, #4]
 8013922:	8c1b      	ldrh	r3, [r3, #32]
 8013924:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC1NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 8013926:	89fb      	ldrh	r3, [r7, #14]
 8013928:	f023 0308 	bic.w	r3, r3, #8
 801392c:	81fb      	strh	r3, [r7, #14]
  tmpccer |= TIM_OCNPolarity;
 801392e:	89fa      	ldrh	r2, [r7, #14]
 8013930:	887b      	ldrh	r3, [r7, #2]
 8013932:	4313      	orrs	r3, r2
 8013934:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8013936:	687b      	ldr	r3, [r7, #4]
 8013938:	89fa      	ldrh	r2, [r7, #14]
 801393a:	841a      	strh	r2, [r3, #32]
}
 801393c:	3714      	adds	r7, #20
 801393e:	46bd      	mov	sp, r7
 8013940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013944:	4770      	bx	lr
 8013946:	bf00      	nop

08013948 <TIM_OC2PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC2PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 8013948:	b480      	push	{r7}
 801394a:	b085      	sub	sp, #20
 801394c:	af00      	add	r7, sp, #0
 801394e:	6078      	str	r0, [r7, #4]
 8013950:	460b      	mov	r3, r1
 8013952:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 8013954:	2300      	movs	r3, #0
 8013956:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 8013958:	687b      	ldr	r3, [r7, #4]
 801395a:	8c1b      	ldrh	r3, [r3, #32]
 801395c:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC2P Bit */
  tmpccer &= (uint16_t)(~TIM_CCER_CC2P);
 801395e:	89fb      	ldrh	r3, [r7, #14]
 8013960:	f023 0320 	bic.w	r3, r3, #32
 8013964:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 4);
 8013966:	887b      	ldrh	r3, [r7, #2]
 8013968:	011b      	lsls	r3, r3, #4
 801396a:	b29a      	uxth	r2, r3
 801396c:	89fb      	ldrh	r3, [r7, #14]
 801396e:	4313      	orrs	r3, r2
 8013970:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8013972:	687b      	ldr	r3, [r7, #4]
 8013974:	89fa      	ldrh	r2, [r7, #14]
 8013976:	841a      	strh	r2, [r3, #32]
}
 8013978:	3714      	adds	r7, #20
 801397a:	46bd      	mov	sp, r7
 801397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013980:	4770      	bx	lr
 8013982:	bf00      	nop

08013984 <TIM_OC2NPolarityConfig>:
  *            @arg TIM_OCNPolarity_High: Output Compare active high
  *            @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC2NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
 8013984:	b480      	push	{r7}
 8013986:	b085      	sub	sp, #20
 8013988:	af00      	add	r7, sp, #0
 801398a:	6078      	str	r0, [r7, #4]
 801398c:	460b      	mov	r3, r1
 801398e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 8013990:	2300      	movs	r3, #0
 8013992:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
  
  tmpccer = TIMx->CCER;
 8013994:	687b      	ldr	r3, [r7, #4]
 8013996:	8c1b      	ldrh	r3, [r3, #32]
 8013998:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC2NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 801399a:	89fb      	ldrh	r3, [r7, #14]
 801399c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80139a0:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 4);
 80139a2:	887b      	ldrh	r3, [r7, #2]
 80139a4:	011b      	lsls	r3, r3, #4
 80139a6:	b29a      	uxth	r2, r3
 80139a8:	89fb      	ldrh	r3, [r7, #14]
 80139aa:	4313      	orrs	r3, r2
 80139ac:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 80139ae:	687b      	ldr	r3, [r7, #4]
 80139b0:	89fa      	ldrh	r2, [r7, #14]
 80139b2:	841a      	strh	r2, [r3, #32]
}
 80139b4:	3714      	adds	r7, #20
 80139b6:	46bd      	mov	sp, r7
 80139b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139bc:	4770      	bx	lr
 80139be:	bf00      	nop

080139c0 <TIM_OC3PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC3PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 80139c0:	b480      	push	{r7}
 80139c2:	b085      	sub	sp, #20
 80139c4:	af00      	add	r7, sp, #0
 80139c6:	6078      	str	r0, [r7, #4]
 80139c8:	460b      	mov	r3, r1
 80139ca:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 80139cc:	2300      	movs	r3, #0
 80139ce:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 80139d0:	687b      	ldr	r3, [r7, #4]
 80139d2:	8c1b      	ldrh	r3, [r3, #32]
 80139d4:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC3P Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 80139d6:	89fb      	ldrh	r3, [r7, #14]
 80139d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80139dc:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 8);
 80139de:	887b      	ldrh	r3, [r7, #2]
 80139e0:	021b      	lsls	r3, r3, #8
 80139e2:	b29a      	uxth	r2, r3
 80139e4:	89fb      	ldrh	r3, [r7, #14]
 80139e6:	4313      	orrs	r3, r2
 80139e8:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 80139ea:	687b      	ldr	r3, [r7, #4]
 80139ec:	89fa      	ldrh	r2, [r7, #14]
 80139ee:	841a      	strh	r2, [r3, #32]
}
 80139f0:	3714      	adds	r7, #20
 80139f2:	46bd      	mov	sp, r7
 80139f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139f8:	4770      	bx	lr
 80139fa:	bf00      	nop

080139fc <TIM_OC3NPolarityConfig>:
  *            @arg TIM_OCNPolarity_High: Output Compare active high
  *            @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC3NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
 80139fc:	b480      	push	{r7}
 80139fe:	b085      	sub	sp, #20
 8013a00:	af00      	add	r7, sp, #0
 8013a02:	6078      	str	r0, [r7, #4]
 8013a04:	460b      	mov	r3, r1
 8013a06:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 8013a08:	2300      	movs	r3, #0
 8013a0a:	81fb      	strh	r3, [r7, #14]
 
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
    
  tmpccer = TIMx->CCER;
 8013a0c:	687b      	ldr	r3, [r7, #4]
 8013a0e:	8c1b      	ldrh	r3, [r3, #32]
 8013a10:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC3NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 8013a12:	89fb      	ldrh	r3, [r7, #14]
 8013a14:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8013a18:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 8);
 8013a1a:	887b      	ldrh	r3, [r7, #2]
 8013a1c:	021b      	lsls	r3, r3, #8
 8013a1e:	b29a      	uxth	r2, r3
 8013a20:	89fb      	ldrh	r3, [r7, #14]
 8013a22:	4313      	orrs	r3, r2
 8013a24:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8013a26:	687b      	ldr	r3, [r7, #4]
 8013a28:	89fa      	ldrh	r2, [r7, #14]
 8013a2a:	841a      	strh	r2, [r3, #32]
}
 8013a2c:	3714      	adds	r7, #20
 8013a2e:	46bd      	mov	sp, r7
 8013a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a34:	4770      	bx	lr
 8013a36:	bf00      	nop

08013a38 <TIM_OC4PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC4PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 8013a38:	b480      	push	{r7}
 8013a3a:	b085      	sub	sp, #20
 8013a3c:	af00      	add	r7, sp, #0
 8013a3e:	6078      	str	r0, [r7, #4]
 8013a40:	460b      	mov	r3, r1
 8013a42:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 8013a44:	2300      	movs	r3, #0
 8013a46:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 8013a48:	687b      	ldr	r3, [r7, #4]
 8013a4a:	8c1b      	ldrh	r3, [r3, #32]
 8013a4c:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC4P Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 8013a4e:	89fb      	ldrh	r3, [r7, #14]
 8013a50:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8013a54:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 12);
 8013a56:	887b      	ldrh	r3, [r7, #2]
 8013a58:	031b      	lsls	r3, r3, #12
 8013a5a:	b29a      	uxth	r2, r3
 8013a5c:	89fb      	ldrh	r3, [r7, #14]
 8013a5e:	4313      	orrs	r3, r2
 8013a60:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8013a62:	687b      	ldr	r3, [r7, #4]
 8013a64:	89fa      	ldrh	r2, [r7, #14]
 8013a66:	841a      	strh	r2, [r3, #32]
}
 8013a68:	3714      	adds	r7, #20
 8013a6a:	46bd      	mov	sp, r7
 8013a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a70:	4770      	bx	lr
 8013a72:	bf00      	nop

08013a74 <TIM_CCxCmd>:
  * @param  TIM_CCx: specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_Enable or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCx)
{
 8013a74:	b480      	push	{r7}
 8013a76:	b085      	sub	sp, #20
 8013a78:	af00      	add	r7, sp, #0
 8013a7a:	6078      	str	r0, [r7, #4]
 8013a7c:	4613      	mov	r3, r2
 8013a7e:	460a      	mov	r2, r1
 8013a80:	807a      	strh	r2, [r7, #2]
 8013a82:	803b      	strh	r3, [r7, #0]
  uint16_t tmp = 0;
 8013a84:	2300      	movs	r3, #0
 8013a86:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_SET << TIM_Channel;
 8013a88:	887b      	ldrh	r3, [r7, #2]
 8013a8a:	2201      	movs	r2, #1
 8013a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8013a90:	81fb      	strh	r3, [r7, #14]

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;
 8013a92:	687b      	ldr	r3, [r7, #4]
 8013a94:	8c1b      	ldrh	r3, [r3, #32]
 8013a96:	b29a      	uxth	r2, r3
 8013a98:	89fb      	ldrh	r3, [r7, #14]
 8013a9a:	43db      	mvns	r3, r3
 8013a9c:	b29b      	uxth	r3, r3
 8013a9e:	4013      	ands	r3, r2
 8013aa0:	b29a      	uxth	r2, r3
 8013aa2:	687b      	ldr	r3, [r7, #4]
 8013aa4:	841a      	strh	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCx << TIM_Channel);
 8013aa6:	687b      	ldr	r3, [r7, #4]
 8013aa8:	8c1b      	ldrh	r3, [r3, #32]
 8013aaa:	b29a      	uxth	r2, r3
 8013aac:	8839      	ldrh	r1, [r7, #0]
 8013aae:	887b      	ldrh	r3, [r7, #2]
 8013ab0:	fa01 f303 	lsl.w	r3, r1, r3
 8013ab4:	b29b      	uxth	r3, r3
 8013ab6:	4313      	orrs	r3, r2
 8013ab8:	b29a      	uxth	r2, r3
 8013aba:	687b      	ldr	r3, [r7, #4]
 8013abc:	841a      	strh	r2, [r3, #32]
}
 8013abe:	3714      	adds	r7, #20
 8013ac0:	46bd      	mov	sp, r7
 8013ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ac6:	4770      	bx	lr

08013ac8 <TIM_CCxNCmd>:
  * @param  TIM_CCxN: specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_Enable or TIM_CCxN_Disable. 
  * @retval None
  */
void TIM_CCxNCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCxN)
{
 8013ac8:	b480      	push	{r7}
 8013aca:	b085      	sub	sp, #20
 8013acc:	af00      	add	r7, sp, #0
 8013ace:	6078      	str	r0, [r7, #4]
 8013ad0:	4613      	mov	r3, r2
 8013ad2:	460a      	mov	r2, r1
 8013ad4:	807a      	strh	r2, [r7, #2]
 8013ad6:	803b      	strh	r3, [r7, #0]
  uint16_t tmp = 0;
 8013ad8:	2300      	movs	r3, #0
 8013ada:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  tmp = CCER_CCNE_SET << TIM_Channel;
 8013adc:	887b      	ldrh	r3, [r7, #2]
 8013ade:	2204      	movs	r2, #4
 8013ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8013ae4:	81fb      	strh	r3, [r7, #14]

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint16_t) ~tmp;
 8013ae6:	687b      	ldr	r3, [r7, #4]
 8013ae8:	8c1b      	ldrh	r3, [r3, #32]
 8013aea:	b29a      	uxth	r2, r3
 8013aec:	89fb      	ldrh	r3, [r7, #14]
 8013aee:	43db      	mvns	r3, r3
 8013af0:	b29b      	uxth	r3, r3
 8013af2:	4013      	ands	r3, r2
 8013af4:	b29a      	uxth	r2, r3
 8013af6:	687b      	ldr	r3, [r7, #4]
 8013af8:	841a      	strh	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCxN << TIM_Channel);
 8013afa:	687b      	ldr	r3, [r7, #4]
 8013afc:	8c1b      	ldrh	r3, [r3, #32]
 8013afe:	b29a      	uxth	r2, r3
 8013b00:	8839      	ldrh	r1, [r7, #0]
 8013b02:	887b      	ldrh	r3, [r7, #2]
 8013b04:	fa01 f303 	lsl.w	r3, r1, r3
 8013b08:	b29b      	uxth	r3, r3
 8013b0a:	4313      	orrs	r3, r2
 8013b0c:	b29a      	uxth	r2, r3
 8013b0e:	687b      	ldr	r3, [r7, #4]
 8013b10:	841a      	strh	r2, [r3, #32]
}
 8013b12:	3714      	adds	r7, #20
 8013b14:	46bd      	mov	sp, r7
 8013b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b1a:	4770      	bx	lr

08013b1c <TIM_ICInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8013b1c:	b580      	push	{r7, lr}
 8013b1e:	b082      	sub	sp, #8
 8013b20:	af00      	add	r7, sp, #0
 8013b22:	6078      	str	r0, [r7, #4]
 8013b24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8013b26:	683b      	ldr	r3, [r7, #0]
 8013b28:	881b      	ldrh	r3, [r3, #0]
 8013b2a:	2b00      	cmp	r3, #0
 8013b2c:	d10f      	bne.n	8013b4e <TIM_ICInit+0x32>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8013b2e:	683b      	ldr	r3, [r7, #0]
 8013b30:	8859      	ldrh	r1, [r3, #2]
 8013b32:	683b      	ldr	r3, [r7, #0]
 8013b34:	889a      	ldrh	r2, [r3, #4]
 8013b36:	683b      	ldr	r3, [r7, #0]
 8013b38:	891b      	ldrh	r3, [r3, #8]
 8013b3a:	6878      	ldr	r0, [r7, #4]
 8013b3c:	f000 fc92 	bl	8014464 <TI1_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8013b40:	683b      	ldr	r3, [r7, #0]
 8013b42:	88db      	ldrh	r3, [r3, #6]
 8013b44:	6878      	ldr	r0, [r7, #4]
 8013b46:	4619      	mov	r1, r3
 8013b48:	f000 f8e0 	bl	8013d0c <TIM_SetIC1Prescaler>
 8013b4c:	e036      	b.n	8013bbc <TIM_ICInit+0xa0>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
 8013b4e:	683b      	ldr	r3, [r7, #0]
 8013b50:	881b      	ldrh	r3, [r3, #0]
 8013b52:	2b04      	cmp	r3, #4
 8013b54:	d10f      	bne.n	8013b76 <TIM_ICInit+0x5a>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_LIST2_PERIPH(TIMx));
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8013b56:	683b      	ldr	r3, [r7, #0]
 8013b58:	8859      	ldrh	r1, [r3, #2]
 8013b5a:	683b      	ldr	r3, [r7, #0]
 8013b5c:	889a      	ldrh	r2, [r3, #4]
 8013b5e:	683b      	ldr	r3, [r7, #0]
 8013b60:	891b      	ldrh	r3, [r3, #8]
 8013b62:	6878      	ldr	r0, [r7, #4]
 8013b64:	f000 fcba 	bl	80144dc <TI2_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8013b68:	683b      	ldr	r3, [r7, #0]
 8013b6a:	88db      	ldrh	r3, [r3, #6]
 8013b6c:	6878      	ldr	r0, [r7, #4]
 8013b6e:	4619      	mov	r1, r3
 8013b70:	f000 f8e8 	bl	8013d44 <TIM_SetIC2Prescaler>
 8013b74:	e022      	b.n	8013bbc <TIM_ICInit+0xa0>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 8013b76:	683b      	ldr	r3, [r7, #0]
 8013b78:	881b      	ldrh	r3, [r3, #0]
 8013b7a:	2b08      	cmp	r3, #8
 8013b7c:	d10f      	bne.n	8013b9e <TIM_ICInit+0x82>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 8013b7e:	683b      	ldr	r3, [r7, #0]
 8013b80:	8859      	ldrh	r1, [r3, #2]
 8013b82:	683b      	ldr	r3, [r7, #0]
 8013b84:	889a      	ldrh	r2, [r3, #4]
 8013b86:	683b      	ldr	r3, [r7, #0]
 8013b88:	891b      	ldrh	r3, [r3, #8]
 8013b8a:	6878      	ldr	r0, [r7, #4]
 8013b8c:	f000 fcec 	bl	8014568 <TI3_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8013b90:	683b      	ldr	r3, [r7, #0]
 8013b92:	88db      	ldrh	r3, [r3, #6]
 8013b94:	6878      	ldr	r0, [r7, #4]
 8013b96:	4619      	mov	r1, r3
 8013b98:	f000 f8f2 	bl	8013d80 <TIM_SetIC3Prescaler>
 8013b9c:	e00e      	b.n	8013bbc <TIM_ICInit+0xa0>
  }
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8013b9e:	683b      	ldr	r3, [r7, #0]
 8013ba0:	8859      	ldrh	r1, [r3, #2]
 8013ba2:	683b      	ldr	r3, [r7, #0]
 8013ba4:	889a      	ldrh	r2, [r3, #4]
 8013ba6:	683b      	ldr	r3, [r7, #0]
 8013ba8:	891b      	ldrh	r3, [r3, #8]
 8013baa:	6878      	ldr	r0, [r7, #4]
 8013bac:	f000 fd1e 	bl	80145ec <TI4_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8013bb0:	683b      	ldr	r3, [r7, #0]
 8013bb2:	88db      	ldrh	r3, [r3, #6]
 8013bb4:	6878      	ldr	r0, [r7, #4]
 8013bb6:	4619      	mov	r1, r3
 8013bb8:	f000 f8fe 	bl	8013db8 <TIM_SetIC4Prescaler>
  }
}
 8013bbc:	3708      	adds	r7, #8
 8013bbe:	46bd      	mov	sp, r7
 8013bc0:	bd80      	pop	{r7, pc}
 8013bc2:	bf00      	nop

08013bc4 <TIM_ICStructInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8013bc4:	b480      	push	{r7}
 8013bc6:	b083      	sub	sp, #12
 8013bc8:	af00      	add	r7, sp, #0
 8013bca:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 8013bcc:	687b      	ldr	r3, [r7, #4]
 8013bce:	2200      	movs	r2, #0
 8013bd0:	801a      	strh	r2, [r3, #0]
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
 8013bd2:	687b      	ldr	r3, [r7, #4]
 8013bd4:	2200      	movs	r2, #0
 8013bd6:	805a      	strh	r2, [r3, #2]
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 8013bd8:	687b      	ldr	r3, [r7, #4]
 8013bda:	2201      	movs	r2, #1
 8013bdc:	809a      	strh	r2, [r3, #4]
  TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
 8013bde:	687b      	ldr	r3, [r7, #4]
 8013be0:	2200      	movs	r2, #0
 8013be2:	80da      	strh	r2, [r3, #6]
  TIM_ICInitStruct->TIM_ICFilter = 0x00;
 8013be4:	687b      	ldr	r3, [r7, #4]
 8013be6:	2200      	movs	r2, #0
 8013be8:	811a      	strh	r2, [r3, #8]
}
 8013bea:	370c      	adds	r7, #12
 8013bec:	46bd      	mov	sp, r7
 8013bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bf2:	4770      	bx	lr

08013bf4 <TIM_PWMIConfig>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8013bf4:	b580      	push	{r7, lr}
 8013bf6:	b084      	sub	sp, #16
 8013bf8:	af00      	add	r7, sp, #0
 8013bfa:	6078      	str	r0, [r7, #4]
 8013bfc:	6039      	str	r1, [r7, #0]
  uint16_t icoppositepolarity = TIM_ICPolarity_Rising;
 8013bfe:	2300      	movs	r3, #0
 8013c00:	81fb      	strh	r3, [r7, #14]
  uint16_t icoppositeselection = TIM_ICSelection_DirectTI;
 8013c02:	2301      	movs	r3, #1
 8013c04:	81bb      	strh	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
 8013c06:	683b      	ldr	r3, [r7, #0]
 8013c08:	885b      	ldrh	r3, [r3, #2]
 8013c0a:	2b00      	cmp	r3, #0
 8013c0c:	d102      	bne.n	8013c14 <TIM_PWMIConfig+0x20>
  {
    icoppositepolarity = TIM_ICPolarity_Falling;
 8013c0e:	2302      	movs	r3, #2
 8013c10:	81fb      	strh	r3, [r7, #14]
 8013c12:	e001      	b.n	8013c18 <TIM_PWMIConfig+0x24>
  }
  else
  {
    icoppositepolarity = TIM_ICPolarity_Rising;
 8013c14:	2300      	movs	r3, #0
 8013c16:	81fb      	strh	r3, [r7, #14]
  }
  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
 8013c18:	683b      	ldr	r3, [r7, #0]
 8013c1a:	889b      	ldrh	r3, [r3, #4]
 8013c1c:	2b01      	cmp	r3, #1
 8013c1e:	d102      	bne.n	8013c26 <TIM_PWMIConfig+0x32>
  {
    icoppositeselection = TIM_ICSelection_IndirectTI;
 8013c20:	2302      	movs	r3, #2
 8013c22:	81bb      	strh	r3, [r7, #12]
 8013c24:	e001      	b.n	8013c2a <TIM_PWMIConfig+0x36>
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
 8013c26:	2301      	movs	r3, #1
 8013c28:	81bb      	strh	r3, [r7, #12]
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8013c2a:	683b      	ldr	r3, [r7, #0]
 8013c2c:	881b      	ldrh	r3, [r3, #0]
 8013c2e:	2b00      	cmp	r3, #0
 8013c30:	d11c      	bne.n	8013c6c <TIM_PWMIConfig+0x78>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 8013c32:	683b      	ldr	r3, [r7, #0]
 8013c34:	8859      	ldrh	r1, [r3, #2]
 8013c36:	683b      	ldr	r3, [r7, #0]
 8013c38:	889a      	ldrh	r2, [r3, #4]
 8013c3a:	683b      	ldr	r3, [r7, #0]
 8013c3c:	891b      	ldrh	r3, [r3, #8]
 8013c3e:	6878      	ldr	r0, [r7, #4]
 8013c40:	f000 fc10 	bl	8014464 <TI1_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8013c44:	683b      	ldr	r3, [r7, #0]
 8013c46:	88db      	ldrh	r3, [r3, #6]
 8013c48:	6878      	ldr	r0, [r7, #4]
 8013c4a:	4619      	mov	r1, r3
 8013c4c:	f000 f85e 	bl	8013d0c <TIM_SetIC1Prescaler>
    /* TI2 Configuration */
    TI2_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 8013c50:	683b      	ldr	r3, [r7, #0]
 8013c52:	891b      	ldrh	r3, [r3, #8]
 8013c54:	89f9      	ldrh	r1, [r7, #14]
 8013c56:	89ba      	ldrh	r2, [r7, #12]
 8013c58:	6878      	ldr	r0, [r7, #4]
 8013c5a:	f000 fc3f 	bl	80144dc <TI2_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8013c5e:	683b      	ldr	r3, [r7, #0]
 8013c60:	88db      	ldrh	r3, [r3, #6]
 8013c62:	6878      	ldr	r0, [r7, #4]
 8013c64:	4619      	mov	r1, r3
 8013c66:	f000 f86d 	bl	8013d44 <TIM_SetIC2Prescaler>
 8013c6a:	e01b      	b.n	8013ca4 <TIM_PWMIConfig+0xb0>
  }
  else
  { 
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 8013c6c:	683b      	ldr	r3, [r7, #0]
 8013c6e:	8859      	ldrh	r1, [r3, #2]
 8013c70:	683b      	ldr	r3, [r7, #0]
 8013c72:	889a      	ldrh	r2, [r3, #4]
 8013c74:	683b      	ldr	r3, [r7, #0]
 8013c76:	891b      	ldrh	r3, [r3, #8]
 8013c78:	6878      	ldr	r0, [r7, #4]
 8013c7a:	f000 fc2f 	bl	80144dc <TI2_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8013c7e:	683b      	ldr	r3, [r7, #0]
 8013c80:	88db      	ldrh	r3, [r3, #6]
 8013c82:	6878      	ldr	r0, [r7, #4]
 8013c84:	4619      	mov	r1, r3
 8013c86:	f000 f85d 	bl	8013d44 <TIM_SetIC2Prescaler>
    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 8013c8a:	683b      	ldr	r3, [r7, #0]
 8013c8c:	891b      	ldrh	r3, [r3, #8]
 8013c8e:	89f9      	ldrh	r1, [r7, #14]
 8013c90:	89ba      	ldrh	r2, [r7, #12]
 8013c92:	6878      	ldr	r0, [r7, #4]
 8013c94:	f000 fbe6 	bl	8014464 <TI1_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8013c98:	683b      	ldr	r3, [r7, #0]
 8013c9a:	88db      	ldrh	r3, [r3, #6]
 8013c9c:	6878      	ldr	r0, [r7, #4]
 8013c9e:	4619      	mov	r1, r3
 8013ca0:	f000 f834 	bl	8013d0c <TIM_SetIC1Prescaler>
  }
}
 8013ca4:	3710      	adds	r7, #16
 8013ca6:	46bd      	mov	sp, r7
 8013ca8:	bd80      	pop	{r7, pc}
 8013caa:	bf00      	nop

08013cac <TIM_GetCapture1>:
  * @brief  Gets the TIMx Input Capture 1 value.
  * @param  TIMx: where x can be 1 to 14 except 6 and 7, to select the TIM peripheral.
  * @retval Capture Compare 1 Register value.
  */
uint32_t TIM_GetCapture1(TIM_TypeDef* TIMx)
{
 8013cac:	b480      	push	{r7}
 8013cae:	b083      	sub	sp, #12
 8013cb0:	af00      	add	r7, sp, #0
 8013cb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Get the Capture 1 Register value */
  return TIMx->CCR1;
 8013cb4:	687b      	ldr	r3, [r7, #4]
 8013cb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
 8013cb8:	4618      	mov	r0, r3
 8013cba:	370c      	adds	r7, #12
 8013cbc:	46bd      	mov	sp, r7
 8013cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cc2:	4770      	bx	lr

08013cc4 <TIM_GetCapture2>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9 or 12 to select the TIM 
  *         peripheral.
  * @retval Capture Compare 2 Register value.
  */
uint32_t TIM_GetCapture2(TIM_TypeDef* TIMx)
{
 8013cc4:	b480      	push	{r7}
 8013cc6:	b083      	sub	sp, #12
 8013cc8:	af00      	add	r7, sp, #0
 8013cca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Get the Capture 2 Register value */
  return TIMx->CCR2;
 8013ccc:	687b      	ldr	r3, [r7, #4]
 8013cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8013cd0:	4618      	mov	r0, r3
 8013cd2:	370c      	adds	r7, #12
 8013cd4:	46bd      	mov	sp, r7
 8013cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cda:	4770      	bx	lr

08013cdc <TIM_GetCapture3>:
  * @brief  Gets the TIMx Input Capture 3 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 3 Register value.
  */
uint32_t TIM_GetCapture3(TIM_TypeDef* TIMx)
{
 8013cdc:	b480      	push	{r7}
 8013cde:	b083      	sub	sp, #12
 8013ce0:	af00      	add	r7, sp, #0
 8013ce2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 

  /* Get the Capture 3 Register value */
  return TIMx->CCR3;
 8013ce4:	687b      	ldr	r3, [r7, #4]
 8013ce6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 8013ce8:	4618      	mov	r0, r3
 8013cea:	370c      	adds	r7, #12
 8013cec:	46bd      	mov	sp, r7
 8013cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cf2:	4770      	bx	lr

08013cf4 <TIM_GetCapture4>:
  * @brief  Gets the TIMx Input Capture 4 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 4 Register value.
  */
uint32_t TIM_GetCapture4(TIM_TypeDef* TIMx)
{
 8013cf4:	b480      	push	{r7}
 8013cf6:	b083      	sub	sp, #12
 8013cf8:	af00      	add	r7, sp, #0
 8013cfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Get the Capture 4 Register value */
  return TIMx->CCR4;
 8013cfc:	687b      	ldr	r3, [r7, #4]
 8013cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8013d00:	4618      	mov	r0, r3
 8013d02:	370c      	adds	r7, #12
 8013d04:	46bd      	mov	sp, r7
 8013d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d0a:	4770      	bx	lr

08013d0c <TIM_SetIC1Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC1Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 8013d0c:	b480      	push	{r7}
 8013d0e:	b083      	sub	sp, #12
 8013d10:	af00      	add	r7, sp, #0
 8013d12:	6078      	str	r0, [r7, #4]
 8013d14:	460b      	mov	r3, r1
 8013d16:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC1PSC;
 8013d18:	687b      	ldr	r3, [r7, #4]
 8013d1a:	8b1b      	ldrh	r3, [r3, #24]
 8013d1c:	b29b      	uxth	r3, r3
 8013d1e:	f023 030c 	bic.w	r3, r3, #12
 8013d22:	b29a      	uxth	r2, r3
 8013d24:	687b      	ldr	r3, [r7, #4]
 8013d26:	831a      	strh	r2, [r3, #24]

  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 8013d28:	687b      	ldr	r3, [r7, #4]
 8013d2a:	8b1b      	ldrh	r3, [r3, #24]
 8013d2c:	b29a      	uxth	r2, r3
 8013d2e:	887b      	ldrh	r3, [r7, #2]
 8013d30:	4313      	orrs	r3, r2
 8013d32:	b29a      	uxth	r2, r3
 8013d34:	687b      	ldr	r3, [r7, #4]
 8013d36:	831a      	strh	r2, [r3, #24]
}
 8013d38:	370c      	adds	r7, #12
 8013d3a:	46bd      	mov	sp, r7
 8013d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d40:	4770      	bx	lr
 8013d42:	bf00      	nop

08013d44 <TIM_SetIC2Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC2Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 8013d44:	b480      	push	{r7}
 8013d46:	b083      	sub	sp, #12
 8013d48:	af00      	add	r7, sp, #0
 8013d4a:	6078      	str	r0, [r7, #4]
 8013d4c:	460b      	mov	r3, r1
 8013d4e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC2PSC;
 8013d50:	687b      	ldr	r3, [r7, #4]
 8013d52:	8b1b      	ldrh	r3, [r3, #24]
 8013d54:	b29b      	uxth	r3, r3
 8013d56:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8013d5a:	b29a      	uxth	r2, r3
 8013d5c:	687b      	ldr	r3, [r7, #4]
 8013d5e:	831a      	strh	r2, [r3, #24]

  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 8013d60:	687b      	ldr	r3, [r7, #4]
 8013d62:	8b1b      	ldrh	r3, [r3, #24]
 8013d64:	b29a      	uxth	r2, r3
 8013d66:	887b      	ldrh	r3, [r7, #2]
 8013d68:	021b      	lsls	r3, r3, #8
 8013d6a:	b29b      	uxth	r3, r3
 8013d6c:	4313      	orrs	r3, r2
 8013d6e:	b29a      	uxth	r2, r3
 8013d70:	687b      	ldr	r3, [r7, #4]
 8013d72:	831a      	strh	r2, [r3, #24]
}
 8013d74:	370c      	adds	r7, #12
 8013d76:	46bd      	mov	sp, r7
 8013d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d7c:	4770      	bx	lr
 8013d7e:	bf00      	nop

08013d80 <TIM_SetIC3Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC3Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 8013d80:	b480      	push	{r7}
 8013d82:	b083      	sub	sp, #12
 8013d84:	af00      	add	r7, sp, #0
 8013d86:	6078      	str	r0, [r7, #4]
 8013d88:	460b      	mov	r3, r1
 8013d8a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC3PSC;
 8013d8c:	687b      	ldr	r3, [r7, #4]
 8013d8e:	8b9b      	ldrh	r3, [r3, #28]
 8013d90:	b29b      	uxth	r3, r3
 8013d92:	f023 030c 	bic.w	r3, r3, #12
 8013d96:	b29a      	uxth	r2, r3
 8013d98:	687b      	ldr	r3, [r7, #4]
 8013d9a:	839a      	strh	r2, [r3, #28]

  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
 8013d9c:	687b      	ldr	r3, [r7, #4]
 8013d9e:	8b9b      	ldrh	r3, [r3, #28]
 8013da0:	b29a      	uxth	r2, r3
 8013da2:	887b      	ldrh	r3, [r7, #2]
 8013da4:	4313      	orrs	r3, r2
 8013da6:	b29a      	uxth	r2, r3
 8013da8:	687b      	ldr	r3, [r7, #4]
 8013daa:	839a      	strh	r2, [r3, #28]
}
 8013dac:	370c      	adds	r7, #12
 8013dae:	46bd      	mov	sp, r7
 8013db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013db4:	4770      	bx	lr
 8013db6:	bf00      	nop

08013db8 <TIM_SetIC4Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC4Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{  
 8013db8:	b480      	push	{r7}
 8013dba:	b083      	sub	sp, #12
 8013dbc:	af00      	add	r7, sp, #0
 8013dbe:	6078      	str	r0, [r7, #4]
 8013dc0:	460b      	mov	r3, r1
 8013dc2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC4PSC;
 8013dc4:	687b      	ldr	r3, [r7, #4]
 8013dc6:	8b9b      	ldrh	r3, [r3, #28]
 8013dc8:	b29b      	uxth	r3, r3
 8013dca:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8013dce:	b29a      	uxth	r2, r3
 8013dd0:	687b      	ldr	r3, [r7, #4]
 8013dd2:	839a      	strh	r2, [r3, #28]

  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 8013dd4:	687b      	ldr	r3, [r7, #4]
 8013dd6:	8b9b      	ldrh	r3, [r3, #28]
 8013dd8:	b29a      	uxth	r2, r3
 8013dda:	887b      	ldrh	r3, [r7, #2]
 8013ddc:	021b      	lsls	r3, r3, #8
 8013dde:	b29b      	uxth	r3, r3
 8013de0:	4313      	orrs	r3, r2
 8013de2:	b29a      	uxth	r2, r3
 8013de4:	687b      	ldr	r3, [r7, #4]
 8013de6:	839a      	strh	r2, [r3, #28]
}
 8013de8:	370c      	adds	r7, #12
 8013dea:	46bd      	mov	sp, r7
 8013dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013df0:	4770      	bx	lr
 8013df2:	bf00      	nop

08013df4 <TIM_BDTRConfig>:
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure that
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval None
  */
void TIM_BDTRConfig(TIM_TypeDef* TIMx, TIM_BDTRInitTypeDef *TIM_BDTRInitStruct)
{
 8013df4:	b480      	push	{r7}
 8013df6:	b083      	sub	sp, #12
 8013df8:	af00      	add	r7, sp, #0
 8013dfa:	6078      	str	r0, [r7, #4]
 8013dfc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8013dfe:	683b      	ldr	r3, [r7, #0]
 8013e00:	881a      	ldrh	r2, [r3, #0]
 8013e02:	683b      	ldr	r3, [r7, #0]
 8013e04:	885b      	ldrh	r3, [r3, #2]
 8013e06:	4313      	orrs	r3, r2
 8013e08:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
 8013e0a:	683b      	ldr	r3, [r7, #0]
 8013e0c:	889b      	ldrh	r3, [r3, #4]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8013e0e:	4313      	orrs	r3, r2
 8013e10:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
 8013e12:	683b      	ldr	r3, [r7, #0]
 8013e14:	88db      	ldrh	r3, [r3, #6]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8013e16:	4313      	orrs	r3, r2
 8013e18:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
 8013e1a:	683b      	ldr	r3, [r7, #0]
 8013e1c:	891b      	ldrh	r3, [r3, #8]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8013e1e:	4313      	orrs	r3, r2
 8013e20:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
 8013e22:	683b      	ldr	r3, [r7, #0]
 8013e24:	895b      	ldrh	r3, [r3, #10]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8013e26:	4313      	orrs	r3, r2
 8013e28:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
             TIM_BDTRInitStruct->TIM_AutomaticOutput;
 8013e2a:	683b      	ldr	r3, [r7, #0]
 8013e2c:	899b      	ldrh	r3, [r3, #12]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8013e2e:	4313      	orrs	r3, r2
 8013e30:	b29a      	uxth	r2, r3
 8013e32:	687b      	ldr	r3, [r7, #4]
 8013e34:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
             TIM_BDTRInitStruct->TIM_AutomaticOutput;
}
 8013e38:	370c      	adds	r7, #12
 8013e3a:	46bd      	mov	sp, r7
 8013e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e40:	4770      	bx	lr
 8013e42:	bf00      	nop

08013e44 <TIM_BDTRStructInit>:
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure which
  *         will be initialized.
  * @retval None
  */
void TIM_BDTRStructInit(TIM_BDTRInitTypeDef* TIM_BDTRInitStruct)
{
 8013e44:	b480      	push	{r7}
 8013e46:	b083      	sub	sp, #12
 8013e48:	af00      	add	r7, sp, #0
 8013e4a:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_BDTRInitStruct->TIM_OSSRState = TIM_OSSRState_Disable;
 8013e4c:	687b      	ldr	r3, [r7, #4]
 8013e4e:	2200      	movs	r2, #0
 8013e50:	801a      	strh	r2, [r3, #0]
  TIM_BDTRInitStruct->TIM_OSSIState = TIM_OSSIState_Disable;
 8013e52:	687b      	ldr	r3, [r7, #4]
 8013e54:	2200      	movs	r2, #0
 8013e56:	805a      	strh	r2, [r3, #2]
  TIM_BDTRInitStruct->TIM_LOCKLevel = TIM_LOCKLevel_OFF;
 8013e58:	687b      	ldr	r3, [r7, #4]
 8013e5a:	2200      	movs	r2, #0
 8013e5c:	809a      	strh	r2, [r3, #4]
  TIM_BDTRInitStruct->TIM_DeadTime = 0x00;
 8013e5e:	687b      	ldr	r3, [r7, #4]
 8013e60:	2200      	movs	r2, #0
 8013e62:	80da      	strh	r2, [r3, #6]
  TIM_BDTRInitStruct->TIM_Break = TIM_Break_Disable;
 8013e64:	687b      	ldr	r3, [r7, #4]
 8013e66:	2200      	movs	r2, #0
 8013e68:	811a      	strh	r2, [r3, #8]
  TIM_BDTRInitStruct->TIM_BreakPolarity = TIM_BreakPolarity_Low;
 8013e6a:	687b      	ldr	r3, [r7, #4]
 8013e6c:	2200      	movs	r2, #0
 8013e6e:	815a      	strh	r2, [r3, #10]
  TIM_BDTRInitStruct->TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
 8013e70:	687b      	ldr	r3, [r7, #4]
 8013e72:	2200      	movs	r2, #0
 8013e74:	819a      	strh	r2, [r3, #12]
}
 8013e76:	370c      	adds	r7, #12
 8013e78:	46bd      	mov	sp, r7
 8013e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e7e:	4770      	bx	lr

08013e80 <TIM_CtrlPWMOutputs>:
  * @param  NewState: new state of the TIM peripheral Main Outputs.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CtrlPWMOutputs(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8013e80:	b480      	push	{r7}
 8013e82:	b083      	sub	sp, #12
 8013e84:	af00      	add	r7, sp, #0
 8013e86:	6078      	str	r0, [r7, #4]
 8013e88:	460b      	mov	r3, r1
 8013e8a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8013e8c:	78fb      	ldrb	r3, [r7, #3]
 8013e8e:	2b00      	cmp	r3, #0
 8013e90:	d00c      	beq.n	8013eac <TIM_CtrlPWMOutputs+0x2c>
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 8013e92:	687b      	ldr	r3, [r7, #4]
 8013e94:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8013e98:	b29b      	uxth	r3, r3
 8013e9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8013e9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8013ea2:	b29a      	uxth	r2, r3
 8013ea4:	687b      	ldr	r3, [r7, #4]
 8013ea6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 8013eaa:	e009      	b.n	8013ec0 <TIM_CtrlPWMOutputs+0x40>
  }
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)~TIM_BDTR_MOE;
 8013eac:	687b      	ldr	r3, [r7, #4]
 8013eae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8013eb2:	b29b      	uxth	r3, r3
 8013eb4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8013eb8:	b29a      	uxth	r2, r3
 8013eba:	687b      	ldr	r3, [r7, #4]
 8013ebc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }  
}
 8013ec0:	370c      	adds	r7, #12
 8013ec2:	46bd      	mov	sp, r7
 8013ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ec8:	4770      	bx	lr
 8013eca:	bf00      	nop

08013ecc <TIM_SelectCOM>:
  * @param  NewState: new state of the Commutation event.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectCOM(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8013ecc:	b480      	push	{r7}
 8013ece:	b083      	sub	sp, #12
 8013ed0:	af00      	add	r7, sp, #0
 8013ed2:	6078      	str	r0, [r7, #4]
 8013ed4:	460b      	mov	r3, r1
 8013ed6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8013ed8:	78fb      	ldrb	r3, [r7, #3]
 8013eda:	2b00      	cmp	r3, #0
 8013edc:	d008      	beq.n	8013ef0 <TIM_SelectCOM+0x24>
  {
    /* Set the COM Bit */
    TIMx->CR2 |= TIM_CR2_CCUS;
 8013ede:	687b      	ldr	r3, [r7, #4]
 8013ee0:	889b      	ldrh	r3, [r3, #4]
 8013ee2:	b29b      	uxth	r3, r3
 8013ee4:	f043 0304 	orr.w	r3, r3, #4
 8013ee8:	b29a      	uxth	r2, r3
 8013eea:	687b      	ldr	r3, [r7, #4]
 8013eec:	809a      	strh	r2, [r3, #4]
 8013eee:	e007      	b.n	8013f00 <TIM_SelectCOM+0x34>
  }
  else
  {
    /* Reset the COM Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCUS;
 8013ef0:	687b      	ldr	r3, [r7, #4]
 8013ef2:	889b      	ldrh	r3, [r3, #4]
 8013ef4:	b29b      	uxth	r3, r3
 8013ef6:	f023 0304 	bic.w	r3, r3, #4
 8013efa:	b29a      	uxth	r2, r3
 8013efc:	687b      	ldr	r3, [r7, #4]
 8013efe:	809a      	strh	r2, [r3, #4]
  }
}
 8013f00:	370c      	adds	r7, #12
 8013f02:	46bd      	mov	sp, r7
 8013f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f08:	4770      	bx	lr
 8013f0a:	bf00      	nop

08013f0c <TIM_CCPreloadControl>:
  * @param  NewState: new state of the Capture Compare Preload Control bit
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CCPreloadControl(TIM_TypeDef* TIMx, FunctionalState NewState)
{ 
 8013f0c:	b480      	push	{r7}
 8013f0e:	b083      	sub	sp, #12
 8013f10:	af00      	add	r7, sp, #0
 8013f12:	6078      	str	r0, [r7, #4]
 8013f14:	460b      	mov	r3, r1
 8013f16:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8013f18:	78fb      	ldrb	r3, [r7, #3]
 8013f1a:	2b00      	cmp	r3, #0
 8013f1c:	d008      	beq.n	8013f30 <TIM_CCPreloadControl+0x24>
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= TIM_CR2_CCPC;
 8013f1e:	687b      	ldr	r3, [r7, #4]
 8013f20:	889b      	ldrh	r3, [r3, #4]
 8013f22:	b29b      	uxth	r3, r3
 8013f24:	f043 0301 	orr.w	r3, r3, #1
 8013f28:	b29a      	uxth	r2, r3
 8013f2a:	687b      	ldr	r3, [r7, #4]
 8013f2c:	809a      	strh	r2, [r3, #4]
 8013f2e:	e007      	b.n	8013f40 <TIM_CCPreloadControl+0x34>
  }
  else
  {
    /* Reset the CCPC Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCPC;
 8013f30:	687b      	ldr	r3, [r7, #4]
 8013f32:	889b      	ldrh	r3, [r3, #4]
 8013f34:	b29b      	uxth	r3, r3
 8013f36:	f023 0301 	bic.w	r3, r3, #1
 8013f3a:	b29a      	uxth	r2, r3
 8013f3c:	687b      	ldr	r3, [r7, #4]
 8013f3e:	809a      	strh	r2, [r3, #4]
  }
}
 8013f40:	370c      	adds	r7, #12
 8013f42:	46bd      	mov	sp, r7
 8013f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f48:	4770      	bx	lr
 8013f4a:	bf00      	nop

08013f4c <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 8013f4c:	b480      	push	{r7}
 8013f4e:	b083      	sub	sp, #12
 8013f50:	af00      	add	r7, sp, #0
 8013f52:	6078      	str	r0, [r7, #4]
 8013f54:	4613      	mov	r3, r2
 8013f56:	460a      	mov	r2, r1
 8013f58:	807a      	strh	r2, [r7, #2]
 8013f5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8013f5c:	787b      	ldrb	r3, [r7, #1]
 8013f5e:	2b00      	cmp	r3, #0
 8013f60:	d008      	beq.n	8013f74 <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8013f62:	687b      	ldr	r3, [r7, #4]
 8013f64:	899b      	ldrh	r3, [r3, #12]
 8013f66:	b29a      	uxth	r2, r3
 8013f68:	887b      	ldrh	r3, [r7, #2]
 8013f6a:	4313      	orrs	r3, r2
 8013f6c:	b29a      	uxth	r2, r3
 8013f6e:	687b      	ldr	r3, [r7, #4]
 8013f70:	819a      	strh	r2, [r3, #12]
 8013f72:	e009      	b.n	8013f88 <TIM_ITConfig+0x3c>
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8013f74:	687b      	ldr	r3, [r7, #4]
 8013f76:	899b      	ldrh	r3, [r3, #12]
 8013f78:	b29a      	uxth	r2, r3
 8013f7a:	887b      	ldrh	r3, [r7, #2]
 8013f7c:	43db      	mvns	r3, r3
 8013f7e:	b29b      	uxth	r3, r3
 8013f80:	4013      	ands	r3, r2
 8013f82:	b29a      	uxth	r2, r3
 8013f84:	687b      	ldr	r3, [r7, #4]
 8013f86:	819a      	strh	r2, [r3, #12]
  }
}
 8013f88:	370c      	adds	r7, #12
 8013f8a:	46bd      	mov	sp, r7
 8013f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f90:	4770      	bx	lr
 8013f92:	bf00      	nop

08013f94 <TIM_GenerateEvent>:
  * @note   TIM_EventSource_COM and TIM_EventSource_Break are used only with TIM1 and TIM8.
  *        
  * @retval None
  */
void TIM_GenerateEvent(TIM_TypeDef* TIMx, uint16_t TIM_EventSource)
{ 
 8013f94:	b480      	push	{r7}
 8013f96:	b083      	sub	sp, #12
 8013f98:	af00      	add	r7, sp, #0
 8013f9a:	6078      	str	r0, [r7, #4]
 8013f9c:	460b      	mov	r3, r1
 8013f9e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_EVENT_SOURCE(TIM_EventSource));
 
  /* Set the event sources */
  TIMx->EGR = TIM_EventSource;
 8013fa0:	687b      	ldr	r3, [r7, #4]
 8013fa2:	887a      	ldrh	r2, [r7, #2]
 8013fa4:	829a      	strh	r2, [r3, #20]
}
 8013fa6:	370c      	adds	r7, #12
 8013fa8:	46bd      	mov	sp, r7
 8013faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fae:	4770      	bx	lr

08013fb0 <TIM_GetFlagStatus>:
  * @note   TIM_FLAG_COM and TIM_FLAG_Break are used only with TIM1 and TIM8.    
  *
  * @retval The new state of TIM_FLAG (SET or RESET).
  */
FlagStatus TIM_GetFlagStatus(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{ 
 8013fb0:	b480      	push	{r7}
 8013fb2:	b085      	sub	sp, #20
 8013fb4:	af00      	add	r7, sp, #0
 8013fb6:	6078      	str	r0, [r7, #4]
 8013fb8:	460b      	mov	r3, r1
 8013fba:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 8013fbc:	2300      	movs	r3, #0
 8013fbe:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_FLAG(TIM_FLAG));

  
  if ((TIMx->SR & TIM_FLAG) != (uint16_t)RESET)
 8013fc0:	687b      	ldr	r3, [r7, #4]
 8013fc2:	8a1b      	ldrh	r3, [r3, #16]
 8013fc4:	b29a      	uxth	r2, r3
 8013fc6:	887b      	ldrh	r3, [r7, #2]
 8013fc8:	4013      	ands	r3, r2
 8013fca:	b29b      	uxth	r3, r3
 8013fcc:	2b00      	cmp	r3, #0
 8013fce:	d002      	beq.n	8013fd6 <TIM_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 8013fd0:	2301      	movs	r3, #1
 8013fd2:	73fb      	strb	r3, [r7, #15]
 8013fd4:	e001      	b.n	8013fda <TIM_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 8013fd6:	2300      	movs	r3, #0
 8013fd8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8013fda:	7bfb      	ldrb	r3, [r7, #15]
}
 8013fdc:	4618      	mov	r0, r3
 8013fde:	3714      	adds	r7, #20
 8013fe0:	46bd      	mov	sp, r7
 8013fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fe6:	4770      	bx	lr

08013fe8 <TIM_ClearFlag>:
  * @note   TIM_FLAG_COM and TIM_FLAG_Break are used only with TIM1 and TIM8.
  *    
  * @retval None
  */
void TIM_ClearFlag(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{  
 8013fe8:	b480      	push	{r7}
 8013fea:	b083      	sub	sp, #12
 8013fec:	af00      	add	r7, sp, #0
 8013fee:	6078      	str	r0, [r7, #4]
 8013ff0:	460b      	mov	r3, r1
 8013ff2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
   
  /* Clear the flags */
  TIMx->SR = (uint16_t)~TIM_FLAG;
 8013ff4:	887b      	ldrh	r3, [r7, #2]
 8013ff6:	43db      	mvns	r3, r3
 8013ff8:	b29a      	uxth	r2, r3
 8013ffa:	687b      	ldr	r3, [r7, #4]
 8013ffc:	821a      	strh	r2, [r3, #16]
}
 8013ffe:	370c      	adds	r7, #12
 8014000:	46bd      	mov	sp, r7
 8014002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014006:	4770      	bx	lr

08014008 <TIM_GetITStatus>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *     
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8014008:	b480      	push	{r7}
 801400a:	b085      	sub	sp, #20
 801400c:	af00      	add	r7, sp, #0
 801400e:	6078      	str	r0, [r7, #4]
 8014010:	460b      	mov	r3, r1
 8014012:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 8014014:	2300      	movs	r3, #0
 8014016:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 8014018:	2300      	movs	r3, #0
 801401a:	81bb      	strh	r3, [r7, #12]
 801401c:	2300      	movs	r3, #0
 801401e:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 8014020:	687b      	ldr	r3, [r7, #4]
 8014022:	8a1b      	ldrh	r3, [r3, #16]
 8014024:	b29a      	uxth	r2, r3
 8014026:	887b      	ldrh	r3, [r7, #2]
 8014028:	4013      	ands	r3, r2
 801402a:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 801402c:	687b      	ldr	r3, [r7, #4]
 801402e:	899b      	ldrh	r3, [r3, #12]
 8014030:	b29a      	uxth	r2, r3
 8014032:	887b      	ldrh	r3, [r7, #2]
 8014034:	4013      	ands	r3, r2
 8014036:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8014038:	89bb      	ldrh	r3, [r7, #12]
 801403a:	2b00      	cmp	r3, #0
 801403c:	d005      	beq.n	801404a <TIM_GetITStatus+0x42>
 801403e:	897b      	ldrh	r3, [r7, #10]
 8014040:	2b00      	cmp	r3, #0
 8014042:	d002      	beq.n	801404a <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
 8014044:	2301      	movs	r3, #1
 8014046:	73fb      	strb	r3, [r7, #15]
 8014048:	e001      	b.n	801404e <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
 801404a:	2300      	movs	r3, #0
 801404c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 801404e:	7bfb      	ldrb	r3, [r7, #15]
}
 8014050:	4618      	mov	r0, r3
 8014052:	3714      	adds	r7, #20
 8014054:	46bd      	mov	sp, r7
 8014056:	f85d 7b04 	ldr.w	r7, [sp], #4
 801405a:	4770      	bx	lr

0801405c <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 801405c:	b480      	push	{r7}
 801405e:	b083      	sub	sp, #12
 8014060:	af00      	add	r7, sp, #0
 8014062:	6078      	str	r0, [r7, #4]
 8014064:	460b      	mov	r3, r1
 8014066:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8014068:	887b      	ldrh	r3, [r7, #2]
 801406a:	43db      	mvns	r3, r3
 801406c:	b29a      	uxth	r2, r3
 801406e:	687b      	ldr	r3, [r7, #4]
 8014070:	821a      	strh	r2, [r3, #16]
}
 8014072:	370c      	adds	r7, #12
 8014074:	46bd      	mov	sp, r7
 8014076:	f85d 7b04 	ldr.w	r7, [sp], #4
 801407a:	4770      	bx	lr

0801407c <TIM_DMAConfig>:
  * @param  TIM_DMABurstLength: DMA Burst length. This parameter can be one value
  *         between: TIM_DMABurstLength_1Transfer and TIM_DMABurstLength_18Transfers.
  * @retval None
  */
void TIM_DMAConfig(TIM_TypeDef* TIMx, uint16_t TIM_DMABase, uint16_t TIM_DMABurstLength)
{
 801407c:	b480      	push	{r7}
 801407e:	b083      	sub	sp, #12
 8014080:	af00      	add	r7, sp, #0
 8014082:	6078      	str	r0, [r7, #4]
 8014084:	4613      	mov	r3, r2
 8014086:	460a      	mov	r2, r1
 8014088:	807a      	strh	r2, [r7, #2]
 801408a:	803b      	strh	r3, [r7, #0]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_BASE(TIM_DMABase)); 
  assert_param(IS_TIM_DMA_LENGTH(TIM_DMABurstLength));

  /* Set the DMA Base and the DMA Burst Length */
  TIMx->DCR = TIM_DMABase | TIM_DMABurstLength;
 801408c:	887a      	ldrh	r2, [r7, #2]
 801408e:	883b      	ldrh	r3, [r7, #0]
 8014090:	4313      	orrs	r3, r2
 8014092:	b29a      	uxth	r2, r3
 8014094:	687b      	ldr	r3, [r7, #4]
 8014096:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
}
 801409a:	370c      	adds	r7, #12
 801409c:	46bd      	mov	sp, r7
 801409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140a2:	4770      	bx	lr

080140a4 <TIM_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_DMACmd(TIM_TypeDef* TIMx, uint16_t TIM_DMASource, FunctionalState NewState)
{ 
 80140a4:	b480      	push	{r7}
 80140a6:	b083      	sub	sp, #12
 80140a8:	af00      	add	r7, sp, #0
 80140aa:	6078      	str	r0, [r7, #4]
 80140ac:	4613      	mov	r3, r2
 80140ae:	460a      	mov	r2, r1
 80140b0:	807a      	strh	r2, [r7, #2]
 80140b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx)); 
  assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80140b4:	787b      	ldrb	r3, [r7, #1]
 80140b6:	2b00      	cmp	r3, #0
 80140b8:	d008      	beq.n	80140cc <TIM_DMACmd+0x28>
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 80140ba:	687b      	ldr	r3, [r7, #4]
 80140bc:	899b      	ldrh	r3, [r3, #12]
 80140be:	b29a      	uxth	r2, r3
 80140c0:	887b      	ldrh	r3, [r7, #2]
 80140c2:	4313      	orrs	r3, r2
 80140c4:	b29a      	uxth	r2, r3
 80140c6:	687b      	ldr	r3, [r7, #4]
 80140c8:	819a      	strh	r2, [r3, #12]
 80140ca:	e009      	b.n	80140e0 <TIM_DMACmd+0x3c>
  }
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
 80140cc:	687b      	ldr	r3, [r7, #4]
 80140ce:	899b      	ldrh	r3, [r3, #12]
 80140d0:	b29a      	uxth	r2, r3
 80140d2:	887b      	ldrh	r3, [r7, #2]
 80140d4:	43db      	mvns	r3, r3
 80140d6:	b29b      	uxth	r3, r3
 80140d8:	4013      	ands	r3, r2
 80140da:	b29a      	uxth	r2, r3
 80140dc:	687b      	ldr	r3, [r7, #4]
 80140de:	819a      	strh	r2, [r3, #12]
  }
}
 80140e0:	370c      	adds	r7, #12
 80140e2:	46bd      	mov	sp, r7
 80140e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140e8:	4770      	bx	lr
 80140ea:	bf00      	nop

080140ec <TIM_SelectCCDMA>:
  * @param  NewState: new state of the Capture Compare DMA source
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectCCDMA(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80140ec:	b480      	push	{r7}
 80140ee:	b083      	sub	sp, #12
 80140f0:	af00      	add	r7, sp, #0
 80140f2:	6078      	str	r0, [r7, #4]
 80140f4:	460b      	mov	r3, r1
 80140f6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80140f8:	78fb      	ldrb	r3, [r7, #3]
 80140fa:	2b00      	cmp	r3, #0
 80140fc:	d008      	beq.n	8014110 <TIM_SelectCCDMA+0x24>
  {
    /* Set the CCDS Bit */
    TIMx->CR2 |= TIM_CR2_CCDS;
 80140fe:	687b      	ldr	r3, [r7, #4]
 8014100:	889b      	ldrh	r3, [r3, #4]
 8014102:	b29b      	uxth	r3, r3
 8014104:	f043 0308 	orr.w	r3, r3, #8
 8014108:	b29a      	uxth	r2, r3
 801410a:	687b      	ldr	r3, [r7, #4]
 801410c:	809a      	strh	r2, [r3, #4]
 801410e:	e007      	b.n	8014120 <TIM_SelectCCDMA+0x34>
  }
  else
  {
    /* Reset the CCDS Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCDS;
 8014110:	687b      	ldr	r3, [r7, #4]
 8014112:	889b      	ldrh	r3, [r3, #4]
 8014114:	b29b      	uxth	r3, r3
 8014116:	f023 0308 	bic.w	r3, r3, #8
 801411a:	b29a      	uxth	r2, r3
 801411c:	687b      	ldr	r3, [r7, #4]
 801411e:	809a      	strh	r2, [r3, #4]
  }
}
 8014120:	370c      	adds	r7, #12
 8014122:	46bd      	mov	sp, r7
 8014124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014128:	4770      	bx	lr
 801412a:	bf00      	nop

0801412c <TIM_InternalClockConfig>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9 or 12 to select the TIM 
  *         peripheral.
  * @retval None
  */
void TIM_InternalClockConfig(TIM_TypeDef* TIMx)
{
 801412c:	b480      	push	{r7}
 801412e:	b083      	sub	sp, #12
 8014130:	af00      	add	r7, sp, #0
 8014132:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Disable slave mode to clock the prescaler directly with the internal clock */
  TIMx->SMCR &=  (uint16_t)~TIM_SMCR_SMS;
 8014134:	687b      	ldr	r3, [r7, #4]
 8014136:	891b      	ldrh	r3, [r3, #8]
 8014138:	b29b      	uxth	r3, r3
 801413a:	f023 0307 	bic.w	r3, r3, #7
 801413e:	b29a      	uxth	r2, r3
 8014140:	687b      	ldr	r3, [r7, #4]
 8014142:	811a      	strh	r2, [r3, #8]
}
 8014144:	370c      	adds	r7, #12
 8014146:	46bd      	mov	sp, r7
 8014148:	f85d 7b04 	ldr.w	r7, [sp], #4
 801414c:	4770      	bx	lr
 801414e:	bf00      	nop

08014150 <TIM_ITRxExternalClockConfig>:
  *            @arg TIM_TS_ITR2: Internal Trigger 2
  *            @arg TIM_TS_ITR3: Internal Trigger 3
  * @retval None
  */
void TIM_ITRxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
{
 8014150:	b580      	push	{r7, lr}
 8014152:	b082      	sub	sp, #8
 8014154:	af00      	add	r7, sp, #0
 8014156:	6078      	str	r0, [r7, #4]
 8014158:	460b      	mov	r3, r1
 801415a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_INTERNAL_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Select the Internal Trigger */
  TIM_SelectInputTrigger(TIMx, TIM_InputTriggerSource);
 801415c:	887b      	ldrh	r3, [r7, #2]
 801415e:	6878      	ldr	r0, [r7, #4]
 8014160:	4619      	mov	r1, r3
 8014162:	f000 f875 	bl	8014250 <TIM_SelectInputTrigger>

  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 8014166:	687b      	ldr	r3, [r7, #4]
 8014168:	891b      	ldrh	r3, [r3, #8]
 801416a:	b29b      	uxth	r3, r3
 801416c:	f043 0307 	orr.w	r3, r3, #7
 8014170:	b29a      	uxth	r2, r3
 8014172:	687b      	ldr	r3, [r7, #4]
 8014174:	811a      	strh	r2, [r3, #8]
}
 8014176:	3708      	adds	r7, #8
 8014178:	46bd      	mov	sp, r7
 801417a:	bd80      	pop	{r7, pc}

0801417c <TIM_TIxExternalClockConfig>:
  *          This parameter must be a value between 0x0 and 0xF.
  * @retval None
  */
void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
                                uint16_t TIM_ICPolarity, uint16_t ICFilter)
{
 801417c:	b580      	push	{r7, lr}
 801417e:	b084      	sub	sp, #16
 8014180:	af00      	add	r7, sp, #0
 8014182:	60f8      	str	r0, [r7, #12]
 8014184:	8179      	strh	r1, [r7, #10]
 8014186:	813a      	strh	r2, [r7, #8]
 8014188:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));

  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
 801418a:	897b      	ldrh	r3, [r7, #10]
 801418c:	2b60      	cmp	r3, #96	; 0x60
 801418e:	d107      	bne.n	80141a0 <TIM_TIxExternalClockConfig+0x24>
  {
    TI2_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 8014190:	893a      	ldrh	r2, [r7, #8]
 8014192:	88fb      	ldrh	r3, [r7, #6]
 8014194:	68f8      	ldr	r0, [r7, #12]
 8014196:	4611      	mov	r1, r2
 8014198:	2201      	movs	r2, #1
 801419a:	f000 f99f 	bl	80144dc <TI2_Config>
 801419e:	e006      	b.n	80141ae <TIM_TIxExternalClockConfig+0x32>
  }
  else
  {
    TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 80141a0:	893a      	ldrh	r2, [r7, #8]
 80141a2:	88fb      	ldrh	r3, [r7, #6]
 80141a4:	68f8      	ldr	r0, [r7, #12]
 80141a6:	4611      	mov	r1, r2
 80141a8:	2201      	movs	r2, #1
 80141aa:	f000 f95b 	bl	8014464 <TI1_Config>
  }
  /* Select the Trigger source */
  TIM_SelectInputTrigger(TIMx, TIM_TIxExternalCLKSource);
 80141ae:	897b      	ldrh	r3, [r7, #10]
 80141b0:	68f8      	ldr	r0, [r7, #12]
 80141b2:	4619      	mov	r1, r3
 80141b4:	f000 f84c 	bl	8014250 <TIM_SelectInputTrigger>
  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 80141b8:	68fb      	ldr	r3, [r7, #12]
 80141ba:	891b      	ldrh	r3, [r3, #8]
 80141bc:	b29b      	uxth	r3, r3
 80141be:	f043 0307 	orr.w	r3, r3, #7
 80141c2:	b29a      	uxth	r2, r3
 80141c4:	68fb      	ldr	r3, [r7, #12]
 80141c6:	811a      	strh	r2, [r3, #8]
}
 80141c8:	3710      	adds	r7, #16
 80141ca:	46bd      	mov	sp, r7
 80141cc:	bd80      	pop	{r7, pc}
 80141ce:	bf00      	nop

080141d0 <TIM_ETRClockMode1Config>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode1Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
                            uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 80141d0:	b580      	push	{r7, lr}
 80141d2:	b086      	sub	sp, #24
 80141d4:	af00      	add	r7, sp, #0
 80141d6:	60f8      	str	r0, [r7, #12]
 80141d8:	8179      	strh	r1, [r7, #10]
 80141da:	813a      	strh	r2, [r7, #8]
 80141dc:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
 80141de:	2300      	movs	r3, #0
 80141e0:	82fb      	strh	r3, [r7, #22]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 80141e2:	8979      	ldrh	r1, [r7, #10]
 80141e4:	893a      	ldrh	r2, [r7, #8]
 80141e6:	88fb      	ldrh	r3, [r7, #6]
 80141e8:	68f8      	ldr	r0, [r7, #12]
 80141ea:	f000 f8a1 	bl	8014330 <TIM_ETRConfig>
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80141ee:	68fb      	ldr	r3, [r7, #12]
 80141f0:	891b      	ldrh	r3, [r3, #8]
 80141f2:	82fb      	strh	r3, [r7, #22]

  /* Reset the SMS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 80141f4:	8afb      	ldrh	r3, [r7, #22]
 80141f6:	f023 0307 	bic.w	r3, r3, #7
 80141fa:	82fb      	strh	r3, [r7, #22]

  /* Select the External clock mode1 */
  tmpsmcr |= TIM_SlaveMode_External1;
 80141fc:	8afb      	ldrh	r3, [r7, #22]
 80141fe:	f043 0307 	orr.w	r3, r3, #7
 8014202:	82fb      	strh	r3, [r7, #22]

  /* Select the Trigger selection : ETRF */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 8014204:	8afb      	ldrh	r3, [r7, #22]
 8014206:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801420a:	82fb      	strh	r3, [r7, #22]
  tmpsmcr |= TIM_TS_ETRF;
 801420c:	8afb      	ldrh	r3, [r7, #22]
 801420e:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8014212:	82fb      	strh	r3, [r7, #22]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8014214:	68fb      	ldr	r3, [r7, #12]
 8014216:	8afa      	ldrh	r2, [r7, #22]
 8014218:	811a      	strh	r2, [r3, #8]
}
 801421a:	3718      	adds	r7, #24
 801421c:	46bd      	mov	sp, r7
 801421e:	bd80      	pop	{r7, pc}

08014220 <TIM_ETRClockMode2Config>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode2Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, 
                             uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 8014220:	b580      	push	{r7, lr}
 8014222:	b084      	sub	sp, #16
 8014224:	af00      	add	r7, sp, #0
 8014226:	60f8      	str	r0, [r7, #12]
 8014228:	8179      	strh	r1, [r7, #10]
 801422a:	813a      	strh	r2, [r7, #8]
 801422c:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 801422e:	8979      	ldrh	r1, [r7, #10]
 8014230:	893a      	ldrh	r2, [r7, #8]
 8014232:	88fb      	ldrh	r3, [r7, #6]
 8014234:	68f8      	ldr	r0, [r7, #12]
 8014236:	f000 f87b 	bl	8014330 <TIM_ETRConfig>

  /* Enable the External clock mode2 */
  TIMx->SMCR |= TIM_SMCR_ECE;
 801423a:	68fb      	ldr	r3, [r7, #12]
 801423c:	891b      	ldrh	r3, [r3, #8]
 801423e:	b29b      	uxth	r3, r3
 8014240:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8014244:	b29a      	uxth	r2, r3
 8014246:	68fb      	ldr	r3, [r7, #12]
 8014248:	811a      	strh	r2, [r3, #8]
}
 801424a:	3710      	adds	r7, #16
 801424c:	46bd      	mov	sp, r7
 801424e:	bd80      	pop	{r7, pc}

08014250 <TIM_SelectInputTrigger>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
void TIM_SelectInputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
{
 8014250:	b480      	push	{r7}
 8014252:	b085      	sub	sp, #20
 8014254:	af00      	add	r7, sp, #0
 8014256:	6078      	str	r0, [r7, #4]
 8014258:	460b      	mov	r3, r1
 801425a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpsmcr = 0;
 801425c:	2300      	movs	r3, #0
 801425e:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8014260:	687b      	ldr	r3, [r7, #4]
 8014262:	891b      	ldrh	r3, [r3, #8]
 8014264:	81fb      	strh	r3, [r7, #14]

  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 8014266:	89fb      	ldrh	r3, [r7, #14]
 8014268:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801426c:	81fb      	strh	r3, [r7, #14]

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 801426e:	89fa      	ldrh	r2, [r7, #14]
 8014270:	887b      	ldrh	r3, [r7, #2]
 8014272:	4313      	orrs	r3, r2
 8014274:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8014276:	687b      	ldr	r3, [r7, #4]
 8014278:	89fa      	ldrh	r2, [r7, #14]
 801427a:	811a      	strh	r2, [r3, #8]
}
 801427c:	3714      	adds	r7, #20
 801427e:	46bd      	mov	sp, r7
 8014280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014284:	4770      	bx	lr
 8014286:	bf00      	nop

08014288 <TIM_SelectOutputTrigger>:
  *            @arg TIM_TRGOSource_OC4Ref: OC4REF signal is used as the trigger output(TRGO)
  *
  * @retval None
  */
void TIM_SelectOutputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_TRGOSource)
{
 8014288:	b480      	push	{r7}
 801428a:	b083      	sub	sp, #12
 801428c:	af00      	add	r7, sp, #0
 801428e:	6078      	str	r0, [r7, #4]
 8014290:	460b      	mov	r3, r1
 8014292:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));

  /* Reset the MMS Bits */
  TIMx->CR2 &= (uint16_t)~TIM_CR2_MMS;
 8014294:	687b      	ldr	r3, [r7, #4]
 8014296:	889b      	ldrh	r3, [r3, #4]
 8014298:	b29b      	uxth	r3, r3
 801429a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801429e:	b29a      	uxth	r2, r3
 80142a0:	687b      	ldr	r3, [r7, #4]
 80142a2:	809a      	strh	r2, [r3, #4]
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
 80142a4:	687b      	ldr	r3, [r7, #4]
 80142a6:	889b      	ldrh	r3, [r3, #4]
 80142a8:	b29a      	uxth	r2, r3
 80142aa:	887b      	ldrh	r3, [r7, #2]
 80142ac:	4313      	orrs	r3, r2
 80142ae:	b29a      	uxth	r2, r3
 80142b0:	687b      	ldr	r3, [r7, #4]
 80142b2:	809a      	strh	r2, [r3, #4]
}
 80142b4:	370c      	adds	r7, #12
 80142b6:	46bd      	mov	sp, r7
 80142b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142bc:	4770      	bx	lr
 80142be:	bf00      	nop

080142c0 <TIM_SelectSlaveMode>:
  *            @arg TIM_SlaveMode_Trigger:   The counter starts at a rising edge of the trigger TRGI
  *            @arg TIM_SlaveMode_External1: Rising edges of the selected trigger (TRGI) clock the counter
  * @retval None
  */
void TIM_SelectSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_SlaveMode)
{
 80142c0:	b480      	push	{r7}
 80142c2:	b083      	sub	sp, #12
 80142c4:	af00      	add	r7, sp, #0
 80142c6:	6078      	str	r0, [r7, #4]
 80142c8:	460b      	mov	r3, r1
 80142ca:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_SLAVE_MODE(TIM_SlaveMode));

  /* Reset the SMS Bits */
  TIMx->SMCR &= (uint16_t)~TIM_SMCR_SMS;
 80142cc:	687b      	ldr	r3, [r7, #4]
 80142ce:	891b      	ldrh	r3, [r3, #8]
 80142d0:	b29b      	uxth	r3, r3
 80142d2:	f023 0307 	bic.w	r3, r3, #7
 80142d6:	b29a      	uxth	r2, r3
 80142d8:	687b      	ldr	r3, [r7, #4]
 80142da:	811a      	strh	r2, [r3, #8]

  /* Select the Slave Mode */
  TIMx->SMCR |= TIM_SlaveMode;
 80142dc:	687b      	ldr	r3, [r7, #4]
 80142de:	891b      	ldrh	r3, [r3, #8]
 80142e0:	b29a      	uxth	r2, r3
 80142e2:	887b      	ldrh	r3, [r7, #2]
 80142e4:	4313      	orrs	r3, r2
 80142e6:	b29a      	uxth	r2, r3
 80142e8:	687b      	ldr	r3, [r7, #4]
 80142ea:	811a      	strh	r2, [r3, #8]
}
 80142ec:	370c      	adds	r7, #12
 80142ee:	46bd      	mov	sp, r7
 80142f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142f4:	4770      	bx	lr
 80142f6:	bf00      	nop

080142f8 <TIM_SelectMasterSlaveMode>:
  *                                             and its slaves (through TRGO)
  *            @arg TIM_MasterSlaveMode_Disable: No action
  * @retval None
  */
void TIM_SelectMasterSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_MasterSlaveMode)
{
 80142f8:	b480      	push	{r7}
 80142fa:	b083      	sub	sp, #12
 80142fc:	af00      	add	r7, sp, #0
 80142fe:	6078      	str	r0, [r7, #4]
 8014300:	460b      	mov	r3, r1
 8014302:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_MSM_STATE(TIM_MasterSlaveMode));

  /* Reset the MSM Bit */
  TIMx->SMCR &= (uint16_t)~TIM_SMCR_MSM;
 8014304:	687b      	ldr	r3, [r7, #4]
 8014306:	891b      	ldrh	r3, [r3, #8]
 8014308:	b29b      	uxth	r3, r3
 801430a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801430e:	b29a      	uxth	r2, r3
 8014310:	687b      	ldr	r3, [r7, #4]
 8014312:	811a      	strh	r2, [r3, #8]
  
  /* Set or Reset the MSM Bit */
  TIMx->SMCR |= TIM_MasterSlaveMode;
 8014314:	687b      	ldr	r3, [r7, #4]
 8014316:	891b      	ldrh	r3, [r3, #8]
 8014318:	b29a      	uxth	r2, r3
 801431a:	887b      	ldrh	r3, [r7, #2]
 801431c:	4313      	orrs	r3, r2
 801431e:	b29a      	uxth	r2, r3
 8014320:	687b      	ldr	r3, [r7, #4]
 8014322:	811a      	strh	r2, [r3, #8]
}
 8014324:	370c      	adds	r7, #12
 8014326:	46bd      	mov	sp, r7
 8014328:	f85d 7b04 	ldr.w	r7, [sp], #4
 801432c:	4770      	bx	lr
 801432e:	bf00      	nop

08014330 <TIM_ETRConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRConfig(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
                   uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 8014330:	b480      	push	{r7}
 8014332:	b087      	sub	sp, #28
 8014334:	af00      	add	r7, sp, #0
 8014336:	60f8      	str	r0, [r7, #12]
 8014338:	8179      	strh	r1, [r7, #10]
 801433a:	813a      	strh	r2, [r7, #8]
 801433c:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
 801433e:	2300      	movs	r3, #0
 8014340:	82fb      	strh	r3, [r7, #22]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  tmpsmcr = TIMx->SMCR;
 8014342:	68fb      	ldr	r3, [r7, #12]
 8014344:	891b      	ldrh	r3, [r3, #8]
 8014346:	82fb      	strh	r3, [r7, #22]

  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_MASK;
 8014348:	8afb      	ldrh	r3, [r7, #22]
 801434a:	b2db      	uxtb	r3, r3
 801434c:	82fb      	strh	r3, [r7, #22]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
 801434e:	88fb      	ldrh	r3, [r7, #6]
 8014350:	021b      	lsls	r3, r3, #8
 8014352:	b29a      	uxth	r2, r3
 8014354:	893b      	ldrh	r3, [r7, #8]
 8014356:	4313      	orrs	r3, r2
 8014358:	b29a      	uxth	r2, r3
 801435a:	897b      	ldrh	r3, [r7, #10]
 801435c:	4313      	orrs	r3, r2
 801435e:	b29a      	uxth	r2, r3
 8014360:	8afb      	ldrh	r3, [r7, #22]
 8014362:	4313      	orrs	r3, r2
 8014364:	82fb      	strh	r3, [r7, #22]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8014366:	68fb      	ldr	r3, [r7, #12]
 8014368:	8afa      	ldrh	r2, [r7, #22]
 801436a:	811a      	strh	r2, [r3, #8]
}
 801436c:	371c      	adds	r7, #28
 801436e:	46bd      	mov	sp, r7
 8014370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014374:	4770      	bx	lr
 8014376:	bf00      	nop

08014378 <TIM_EncoderInterfaceConfig>:
  *            @arg TIM_ICPolarity_Rising: IC Rising edge.
  * @retval None
  */
void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint16_t TIM_EncoderMode,
                                uint16_t TIM_IC1Polarity, uint16_t TIM_IC2Polarity)
{
 8014378:	b480      	push	{r7}
 801437a:	b087      	sub	sp, #28
 801437c:	af00      	add	r7, sp, #0
 801437e:	60f8      	str	r0, [r7, #12]
 8014380:	8179      	strh	r1, [r7, #10]
 8014382:	813a      	strh	r2, [r7, #8]
 8014384:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
 8014386:	2300      	movs	r3, #0
 8014388:	82fb      	strh	r3, [r7, #22]
  uint16_t tmpccmr1 = 0;
 801438a:	2300      	movs	r3, #0
 801438c:	82bb      	strh	r3, [r7, #20]
  uint16_t tmpccer = 0;
 801438e:	2300      	movs	r3, #0
 8014390:	827b      	strh	r3, [r7, #18]
  assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8014392:	68fb      	ldr	r3, [r7, #12]
 8014394:	891b      	ldrh	r3, [r3, #8]
 8014396:	82fb      	strh	r3, [r7, #22]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8014398:	68fb      	ldr	r3, [r7, #12]
 801439a:	8b1b      	ldrh	r3, [r3, #24]
 801439c:	82bb      	strh	r3, [r7, #20]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801439e:	68fb      	ldr	r3, [r7, #12]
 80143a0:	8c1b      	ldrh	r3, [r3, #32]
 80143a2:	827b      	strh	r3, [r7, #18]

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 80143a4:	8afb      	ldrh	r3, [r7, #22]
 80143a6:	f023 0307 	bic.w	r3, r3, #7
 80143aa:	82fb      	strh	r3, [r7, #22]
  tmpsmcr |= TIM_EncoderMode;
 80143ac:	8afa      	ldrh	r2, [r7, #22]
 80143ae:	897b      	ldrh	r3, [r7, #10]
 80143b0:	4313      	orrs	r3, r2
 80143b2:	82fb      	strh	r3, [r7, #22]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 80143b4:	8abb      	ldrh	r3, [r7, #20]
 80143b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80143ba:	f023 0303 	bic.w	r3, r3, #3
 80143be:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 80143c0:	8abb      	ldrh	r3, [r7, #20]
 80143c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80143c6:	f043 0301 	orr.w	r3, r3, #1
 80143ca:	82bb      	strh	r3, [r7, #20]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
 80143cc:	8a7b      	ldrh	r3, [r7, #18]
 80143ce:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80143d2:	827b      	strh	r3, [r7, #18]
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 80143d4:	88fb      	ldrh	r3, [r7, #6]
 80143d6:	011b      	lsls	r3, r3, #4
 80143d8:	b29a      	uxth	r2, r3
 80143da:	893b      	ldrh	r3, [r7, #8]
 80143dc:	4313      	orrs	r3, r2
 80143de:	b29a      	uxth	r2, r3
 80143e0:	8a7b      	ldrh	r3, [r7, #18]
 80143e2:	4313      	orrs	r3, r2
 80143e4:	827b      	strh	r3, [r7, #18]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80143e6:	68fb      	ldr	r3, [r7, #12]
 80143e8:	8afa      	ldrh	r2, [r7, #22]
 80143ea:	811a      	strh	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 80143ec:	68fb      	ldr	r3, [r7, #12]
 80143ee:	8aba      	ldrh	r2, [r7, #20]
 80143f0:	831a      	strh	r2, [r3, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80143f2:	68fb      	ldr	r3, [r7, #12]
 80143f4:	8a7a      	ldrh	r2, [r7, #18]
 80143f6:	841a      	strh	r2, [r3, #32]
}
 80143f8:	371c      	adds	r7, #28
 80143fa:	46bd      	mov	sp, r7
 80143fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014400:	4770      	bx	lr
 8014402:	bf00      	nop

08014404 <TIM_SelectHallSensor>:
  * @param  NewState: new state of the TIMx Hall sensor interface.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectHallSensor(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8014404:	b480      	push	{r7}
 8014406:	b083      	sub	sp, #12
 8014408:	af00      	add	r7, sp, #0
 801440a:	6078      	str	r0, [r7, #4]
 801440c:	460b      	mov	r3, r1
 801440e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8014410:	78fb      	ldrb	r3, [r7, #3]
 8014412:	2b00      	cmp	r3, #0
 8014414:	d008      	beq.n	8014428 <TIM_SelectHallSensor+0x24>
  {
    /* Set the TI1S Bit */
    TIMx->CR2 |= TIM_CR2_TI1S;
 8014416:	687b      	ldr	r3, [r7, #4]
 8014418:	889b      	ldrh	r3, [r3, #4]
 801441a:	b29b      	uxth	r3, r3
 801441c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014420:	b29a      	uxth	r2, r3
 8014422:	687b      	ldr	r3, [r7, #4]
 8014424:	809a      	strh	r2, [r3, #4]
 8014426:	e007      	b.n	8014438 <TIM_SelectHallSensor+0x34>
  }
  else
  {
    /* Reset the TI1S Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_TI1S;
 8014428:	687b      	ldr	r3, [r7, #4]
 801442a:	889b      	ldrh	r3, [r3, #4]
 801442c:	b29b      	uxth	r3, r3
 801442e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8014432:	b29a      	uxth	r2, r3
 8014434:	687b      	ldr	r3, [r7, #4]
 8014436:	809a      	strh	r2, [r3, #4]
  }
}
 8014438:	370c      	adds	r7, #12
 801443a:	46bd      	mov	sp, r7
 801443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014440:	4770      	bx	lr
 8014442:	bf00      	nop

08014444 <TIM_RemapConfig>:
  *            @arg TIM11_HSE:      TIM11 CH4 input is connected to HSE_RTC clock
  *                                 (HSE divided by a programmable prescaler)  
  * @retval None
  */
void TIM_RemapConfig(TIM_TypeDef* TIMx, uint16_t TIM_Remap)
{
 8014444:	b480      	push	{r7}
 8014446:	b083      	sub	sp, #12
 8014448:	af00      	add	r7, sp, #0
 801444a:	6078      	str	r0, [r7, #4]
 801444c:	460b      	mov	r3, r1
 801444e:	807b      	strh	r3, [r7, #2]
 /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_REMAP(TIM_Remap));

  /* Set the Timer remapping configuration */
  TIMx->OR =  TIM_Remap;
 8014450:	687b      	ldr	r3, [r7, #4]
 8014452:	887a      	ldrh	r2, [r7, #2]
 8014454:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
}
 8014458:	370c      	adds	r7, #12
 801445a:	46bd      	mov	sp, r7
 801445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014460:	4770      	bx	lr
 8014462:	bf00      	nop

08014464 <TI1_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8014464:	b480      	push	{r7}
 8014466:	b087      	sub	sp, #28
 8014468:	af00      	add	r7, sp, #0
 801446a:	60f8      	str	r0, [r7, #12]
 801446c:	8179      	strh	r1, [r7, #10]
 801446e:	813a      	strh	r2, [r7, #8]
 8014470:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0;
 8014472:	2300      	movs	r3, #0
 8014474:	82fb      	strh	r3, [r7, #22]
 8014476:	2300      	movs	r3, #0
 8014478:	82bb      	strh	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 801447a:	68fb      	ldr	r3, [r7, #12]
 801447c:	8c1b      	ldrh	r3, [r3, #32]
 801447e:	b29b      	uxth	r3, r3
 8014480:	f023 0301 	bic.w	r3, r3, #1
 8014484:	b29a      	uxth	r2, r3
 8014486:	68fb      	ldr	r3, [r7, #12]
 8014488:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801448a:	68fb      	ldr	r3, [r7, #12]
 801448c:	8b1b      	ldrh	r3, [r3, #24]
 801448e:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 8014490:	68fb      	ldr	r3, [r7, #12]
 8014492:	8c1b      	ldrh	r3, [r3, #32]
 8014494:	82bb      	strh	r3, [r7, #20]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
 8014496:	8afb      	ldrh	r3, [r7, #22]
 8014498:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 801449c:	82fb      	strh	r3, [r7, #22]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 801449e:	88fb      	ldrh	r3, [r7, #6]
 80144a0:	011b      	lsls	r3, r3, #4
 80144a2:	b29a      	uxth	r2, r3
 80144a4:	893b      	ldrh	r3, [r7, #8]
 80144a6:	4313      	orrs	r3, r2
 80144a8:	b29a      	uxth	r2, r3
 80144aa:	8afb      	ldrh	r3, [r7, #22]
 80144ac:	4313      	orrs	r3, r2
 80144ae:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80144b0:	8abb      	ldrh	r3, [r7, #20]
 80144b2:	f023 030a 	bic.w	r3, r3, #10
 80144b6:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 80144b8:	897a      	ldrh	r2, [r7, #10]
 80144ba:	8abb      	ldrh	r3, [r7, #20]
 80144bc:	4313      	orrs	r3, r2
 80144be:	b29b      	uxth	r3, r3
 80144c0:	f043 0301 	orr.w	r3, r3, #1
 80144c4:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80144c6:	68fb      	ldr	r3, [r7, #12]
 80144c8:	8afa      	ldrh	r2, [r7, #22]
 80144ca:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80144cc:	68fb      	ldr	r3, [r7, #12]
 80144ce:	8aba      	ldrh	r2, [r7, #20]
 80144d0:	841a      	strh	r2, [r3, #32]
}
 80144d2:	371c      	adds	r7, #28
 80144d4:	46bd      	mov	sp, r7
 80144d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144da:	4770      	bx	lr

080144dc <TI2_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 80144dc:	b480      	push	{r7}
 80144de:	b087      	sub	sp, #28
 80144e0:	af00      	add	r7, sp, #0
 80144e2:	60f8      	str	r0, [r7, #12]
 80144e4:	8179      	strh	r1, [r7, #10]
 80144e6:	813a      	strh	r2, [r7, #8]
 80144e8:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
 80144ea:	2300      	movs	r3, #0
 80144ec:	82fb      	strh	r3, [r7, #22]
 80144ee:	2300      	movs	r3, #0
 80144f0:	82bb      	strh	r3, [r7, #20]
 80144f2:	2300      	movs	r3, #0
 80144f4:	827b      	strh	r3, [r7, #18]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 80144f6:	68fb      	ldr	r3, [r7, #12]
 80144f8:	8c1b      	ldrh	r3, [r3, #32]
 80144fa:	b29b      	uxth	r3, r3
 80144fc:	f023 0310 	bic.w	r3, r3, #16
 8014500:	b29a      	uxth	r2, r3
 8014502:	68fb      	ldr	r3, [r7, #12]
 8014504:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8014506:	68fb      	ldr	r3, [r7, #12]
 8014508:	8b1b      	ldrh	r3, [r3, #24]
 801450a:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 801450c:	68fb      	ldr	r3, [r7, #12]
 801450e:	8c1b      	ldrh	r3, [r3, #32]
 8014510:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 4);
 8014512:	897b      	ldrh	r3, [r7, #10]
 8014514:	011b      	lsls	r3, r3, #4
 8014516:	827b      	strh	r3, [r7, #18]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8014518:	8afb      	ldrh	r3, [r7, #22]
 801451a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801451e:	051b      	lsls	r3, r3, #20
 8014520:	0d1b      	lsrs	r3, r3, #20
 8014522:	82fb      	strh	r3, [r7, #22]
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 8014524:	88fb      	ldrh	r3, [r7, #6]
 8014526:	031b      	lsls	r3, r3, #12
 8014528:	b29a      	uxth	r2, r3
 801452a:	8afb      	ldrh	r3, [r7, #22]
 801452c:	4313      	orrs	r3, r2
 801452e:	82fb      	strh	r3, [r7, #22]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 8014530:	893b      	ldrh	r3, [r7, #8]
 8014532:	021b      	lsls	r3, r3, #8
 8014534:	b29a      	uxth	r2, r3
 8014536:	8afb      	ldrh	r3, [r7, #22]
 8014538:	4313      	orrs	r3, r2
 801453a:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801453c:	8abb      	ldrh	r3, [r7, #20]
 801453e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8014542:	82bb      	strh	r3, [r7, #20]
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8014544:	8a7a      	ldrh	r2, [r7, #18]
 8014546:	8abb      	ldrh	r3, [r7, #20]
 8014548:	4313      	orrs	r3, r2
 801454a:	b29b      	uxth	r3, r3
 801454c:	f043 0310 	orr.w	r3, r3, #16
 8014550:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8014552:	68fb      	ldr	r3, [r7, #12]
 8014554:	8afa      	ldrh	r2, [r7, #22]
 8014556:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8014558:	68fb      	ldr	r3, [r7, #12]
 801455a:	8aba      	ldrh	r2, [r7, #20]
 801455c:	841a      	strh	r2, [r3, #32]
}
 801455e:	371c      	adds	r7, #28
 8014560:	46bd      	mov	sp, r7
 8014562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014566:	4770      	bx	lr

08014568 <TI3_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8014568:	b480      	push	{r7}
 801456a:	b087      	sub	sp, #28
 801456c:	af00      	add	r7, sp, #0
 801456e:	60f8      	str	r0, [r7, #12]
 8014570:	8179      	strh	r1, [r7, #10]
 8014572:	813a      	strh	r2, [r7, #8]
 8014574:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 8014576:	2300      	movs	r3, #0
 8014578:	82fb      	strh	r3, [r7, #22]
 801457a:	2300      	movs	r3, #0
 801457c:	82bb      	strh	r3, [r7, #20]
 801457e:	2300      	movs	r3, #0
 8014580:	827b      	strh	r3, [r7, #18]

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 8014582:	68fb      	ldr	r3, [r7, #12]
 8014584:	8c1b      	ldrh	r3, [r3, #32]
 8014586:	b29b      	uxth	r3, r3
 8014588:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801458c:	b29a      	uxth	r2, r3
 801458e:	68fb      	ldr	r3, [r7, #12]
 8014590:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8014592:	68fb      	ldr	r3, [r7, #12]
 8014594:	8b9b      	ldrh	r3, [r3, #28]
 8014596:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 8014598:	68fb      	ldr	r3, [r7, #12]
 801459a:	8c1b      	ldrh	r3, [r3, #32]
 801459c:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 8);
 801459e:	897b      	ldrh	r3, [r7, #10]
 80145a0:	021b      	lsls	r3, r3, #8
 80145a2:	827b      	strh	r3, [r7, #18]

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
 80145a4:	8afb      	ldrh	r3, [r7, #22]
 80145a6:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 80145aa:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 80145ac:	88fb      	ldrh	r3, [r7, #6]
 80145ae:	011b      	lsls	r3, r3, #4
 80145b0:	b29a      	uxth	r2, r3
 80145b2:	893b      	ldrh	r3, [r7, #8]
 80145b4:	4313      	orrs	r3, r2
 80145b6:	b29a      	uxth	r2, r3
 80145b8:	8afb      	ldrh	r3, [r7, #22]
 80145ba:	4313      	orrs	r3, r2
 80145bc:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80145be:	8abb      	ldrh	r3, [r7, #20]
 80145c0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80145c4:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 80145c6:	8a7a      	ldrh	r2, [r7, #18]
 80145c8:	8abb      	ldrh	r3, [r7, #20]
 80145ca:	4313      	orrs	r3, r2
 80145cc:	b29b      	uxth	r3, r3
 80145ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80145d2:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80145d4:	68fb      	ldr	r3, [r7, #12]
 80145d6:	8afa      	ldrh	r2, [r7, #22]
 80145d8:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80145da:	68fb      	ldr	r3, [r7, #12]
 80145dc:	8aba      	ldrh	r2, [r7, #20]
 80145de:	841a      	strh	r2, [r3, #32]
}
 80145e0:	371c      	adds	r7, #28
 80145e2:	46bd      	mov	sp, r7
 80145e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145e8:	4770      	bx	lr
 80145ea:	bf00      	nop

080145ec <TI4_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI4_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 80145ec:	b480      	push	{r7}
 80145ee:	b087      	sub	sp, #28
 80145f0:	af00      	add	r7, sp, #0
 80145f2:	60f8      	str	r0, [r7, #12]
 80145f4:	8179      	strh	r1, [r7, #10]
 80145f6:	813a      	strh	r2, [r7, #8]
 80145f8:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 80145fa:	2300      	movs	r3, #0
 80145fc:	82fb      	strh	r3, [r7, #22]
 80145fe:	2300      	movs	r3, #0
 8014600:	82bb      	strh	r3, [r7, #20]
 8014602:	2300      	movs	r3, #0
 8014604:	827b      	strh	r3, [r7, #18]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 8014606:	68fb      	ldr	r3, [r7, #12]
 8014608:	8c1b      	ldrh	r3, [r3, #32]
 801460a:	b29b      	uxth	r3, r3
 801460c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014610:	b29a      	uxth	r2, r3
 8014612:	68fb      	ldr	r3, [r7, #12]
 8014614:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8014616:	68fb      	ldr	r3, [r7, #12]
 8014618:	8b9b      	ldrh	r3, [r3, #28]
 801461a:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 801461c:	68fb      	ldr	r3, [r7, #12]
 801461e:	8c1b      	ldrh	r3, [r3, #32]
 8014620:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 12);
 8014622:	897b      	ldrh	r3, [r7, #10]
 8014624:	031b      	lsls	r3, r3, #12
 8014626:	827b      	strh	r3, [r7, #18]

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8014628:	8afb      	ldrh	r3, [r7, #22]
 801462a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801462e:	051b      	lsls	r3, r3, #20
 8014630:	0d1b      	lsrs	r3, r3, #20
 8014632:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
 8014634:	893b      	ldrh	r3, [r7, #8]
 8014636:	021b      	lsls	r3, r3, #8
 8014638:	b29a      	uxth	r2, r3
 801463a:	8afb      	ldrh	r3, [r7, #22]
 801463c:	4313      	orrs	r3, r2
 801463e:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 8014640:	88fb      	ldrh	r3, [r7, #6]
 8014642:	031b      	lsls	r3, r3, #12
 8014644:	b29a      	uxth	r2, r3
 8014646:	8afb      	ldrh	r3, [r7, #22]
 8014648:	4313      	orrs	r3, r2
 801464a:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 801464c:	8abb      	ldrh	r3, [r7, #20]
 801464e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8014652:	045b      	lsls	r3, r3, #17
 8014654:	0c5b      	lsrs	r3, r3, #17
 8014656:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 8014658:	8a7a      	ldrh	r2, [r7, #18]
 801465a:	8abb      	ldrh	r3, [r7, #20]
 801465c:	4313      	orrs	r3, r2
 801465e:	b29b      	uxth	r3, r3
 8014660:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8014664:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8014666:	68fb      	ldr	r3, [r7, #12]
 8014668:	8afa      	ldrh	r2, [r7, #22]
 801466a:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 801466c:	68fb      	ldr	r3, [r7, #12]
 801466e:	8aba      	ldrh	r2, [r7, #20]
 8014670:	841a      	strh	r2, [r3, #32]
}
 8014672:	371c      	adds	r7, #28
 8014674:	46bd      	mov	sp, r7
 8014676:	f85d 7b04 	ldr.w	r7, [sp], #4
 801467a:	4770      	bx	lr

0801467c <USART_DeInit>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
 801467c:	b580      	push	{r7, lr}
 801467e:	b082      	sub	sp, #8
 8014680:	af00      	add	r7, sp, #0
 8014682:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
 8014684:	687a      	ldr	r2, [r7, #4]
 8014686:	4b3a      	ldr	r3, [pc, #232]	; (8014770 <USART_DeInit+0xf4>)
 8014688:	429a      	cmp	r2, r3
 801468a:	d108      	bne.n	801469e <USART_DeInit+0x22>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
 801468c:	2010      	movs	r0, #16
 801468e:	2101      	movs	r1, #1
 8014690:	f7fb fbd8 	bl	800fe44 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 8014694:	2010      	movs	r0, #16
 8014696:	2100      	movs	r1, #0
 8014698:	f7fb fbd4 	bl	800fe44 <RCC_APB2PeriphResetCmd>
 801469c:	e065      	b.n	801476a <USART_DeInit+0xee>
  }
  else if (USARTx == USART2)
 801469e:	687a      	ldr	r2, [r7, #4]
 80146a0:	4b34      	ldr	r3, [pc, #208]	; (8014774 <USART_DeInit+0xf8>)
 80146a2:	429a      	cmp	r2, r3
 80146a4:	d10a      	bne.n	80146bc <USART_DeInit+0x40>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 80146a6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80146aa:	2101      	movs	r1, #1
 80146ac:	f7fb fbac 	bl	800fe08 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 80146b0:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80146b4:	2100      	movs	r1, #0
 80146b6:	f7fb fba7 	bl	800fe08 <RCC_APB1PeriphResetCmd>
 80146ba:	e056      	b.n	801476a <USART_DeInit+0xee>
  }
  else if (USARTx == USART3)
 80146bc:	687a      	ldr	r2, [r7, #4]
 80146be:	4b2e      	ldr	r3, [pc, #184]	; (8014778 <USART_DeInit+0xfc>)
 80146c0:	429a      	cmp	r2, r3
 80146c2:	d10a      	bne.n	80146da <USART_DeInit+0x5e>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
 80146c4:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80146c8:	2101      	movs	r1, #1
 80146ca:	f7fb fb9d 	bl	800fe08 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 80146ce:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80146d2:	2100      	movs	r1, #0
 80146d4:	f7fb fb98 	bl	800fe08 <RCC_APB1PeriphResetCmd>
 80146d8:	e047      	b.n	801476a <USART_DeInit+0xee>
  }    
  else if (USARTx == UART4)
 80146da:	687a      	ldr	r2, [r7, #4]
 80146dc:	4b27      	ldr	r3, [pc, #156]	; (801477c <USART_DeInit+0x100>)
 80146de:	429a      	cmp	r2, r3
 80146e0:	d10a      	bne.n	80146f8 <USART_DeInit+0x7c>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
 80146e2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80146e6:	2101      	movs	r1, #1
 80146e8:	f7fb fb8e 	bl	800fe08 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 80146ec:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80146f0:	2100      	movs	r1, #0
 80146f2:	f7fb fb89 	bl	800fe08 <RCC_APB1PeriphResetCmd>
 80146f6:	e038      	b.n	801476a <USART_DeInit+0xee>
  }
  else if (USARTx == UART5)
 80146f8:	687a      	ldr	r2, [r7, #4]
 80146fa:	4b21      	ldr	r3, [pc, #132]	; (8014780 <USART_DeInit+0x104>)
 80146fc:	429a      	cmp	r2, r3
 80146fe:	d10a      	bne.n	8014716 <USART_DeInit+0x9a>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 8014700:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8014704:	2101      	movs	r1, #1
 8014706:	f7fb fb7f 	bl	800fe08 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 801470a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 801470e:	2100      	movs	r1, #0
 8014710:	f7fb fb7a 	bl	800fe08 <RCC_APB1PeriphResetCmd>
 8014714:	e029      	b.n	801476a <USART_DeInit+0xee>
  }  
  else if (USARTx == USART6)
 8014716:	687a      	ldr	r2, [r7, #4]
 8014718:	4b1a      	ldr	r3, [pc, #104]	; (8014784 <USART_DeInit+0x108>)
 801471a:	429a      	cmp	r2, r3
 801471c:	d108      	bne.n	8014730 <USART_DeInit+0xb4>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
 801471e:	2020      	movs	r0, #32
 8014720:	2101      	movs	r1, #1
 8014722:	f7fb fb8f 	bl	800fe44 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 8014726:	2020      	movs	r0, #32
 8014728:	2100      	movs	r1, #0
 801472a:	f7fb fb8b 	bl	800fe44 <RCC_APB2PeriphResetCmd>
 801472e:	e01c      	b.n	801476a <USART_DeInit+0xee>
  }
  else if (USARTx == UART7)
 8014730:	687a      	ldr	r2, [r7, #4]
 8014732:	4b15      	ldr	r3, [pc, #84]	; (8014788 <USART_DeInit+0x10c>)
 8014734:	429a      	cmp	r2, r3
 8014736:	d10a      	bne.n	801474e <USART_DeInit+0xd2>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, ENABLE);
 8014738:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 801473c:	2101      	movs	r1, #1
 801473e:	f7fb fb63 	bl	800fe08 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, DISABLE);
 8014742:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8014746:	2100      	movs	r1, #0
 8014748:	f7fb fb5e 	bl	800fe08 <RCC_APB1PeriphResetCmd>
 801474c:	e00d      	b.n	801476a <USART_DeInit+0xee>
  }     
  else
  {
    if (USARTx == UART8)
 801474e:	687a      	ldr	r2, [r7, #4]
 8014750:	4b0e      	ldr	r3, [pc, #56]	; (801478c <USART_DeInit+0x110>)
 8014752:	429a      	cmp	r2, r3
 8014754:	d109      	bne.n	801476a <USART_DeInit+0xee>
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
 8014756:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 801475a:	2101      	movs	r1, #1
 801475c:	f7fb fb54 	bl	800fe08 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
 8014760:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8014764:	2100      	movs	r1, #0
 8014766:	f7fb fb4f 	bl	800fe08 <RCC_APB1PeriphResetCmd>
    }
  }
}
 801476a:	3708      	adds	r7, #8
 801476c:	46bd      	mov	sp, r7
 801476e:	bd80      	pop	{r7, pc}
 8014770:	40011000 	.word	0x40011000
 8014774:	40004400 	.word	0x40004400
 8014778:	40004800 	.word	0x40004800
 801477c:	40004c00 	.word	0x40004c00
 8014780:	40005000 	.word	0x40005000
 8014784:	40011400 	.word	0x40011400
 8014788:	40007800 	.word	0x40007800
 801478c:	40007c00 	.word	0x40007c00

08014790 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8014790:	b580      	push	{r7, lr}
 8014792:	b08a      	sub	sp, #40	; 0x28
 8014794:	af00      	add	r7, sp, #0
 8014796:	6078      	str	r0, [r7, #4]
 8014798:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 801479a:	2300      	movs	r3, #0
 801479c:	627b      	str	r3, [r7, #36]	; 0x24
 801479e:	2300      	movs	r3, #0
 80147a0:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 80147a2:	2300      	movs	r3, #0
 80147a4:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 80147a6:	2300      	movs	r3, #0
 80147a8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80147aa:	687b      	ldr	r3, [r7, #4]
 80147ac:	8a1b      	ldrh	r3, [r3, #16]
 80147ae:	b29b      	uxth	r3, r3
 80147b0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80147b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147b4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80147b8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 80147ba:	683b      	ldr	r3, [r7, #0]
 80147bc:	88db      	ldrh	r3, [r3, #6]
 80147be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80147c0:	4313      	orrs	r3, r2
 80147c2:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 80147c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147c6:	b29a      	uxth	r2, r3
 80147c8:	687b      	ldr	r3, [r7, #4]
 80147ca:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 80147cc:	687b      	ldr	r3, [r7, #4]
 80147ce:	899b      	ldrh	r3, [r3, #12]
 80147d0:	b29b      	uxth	r3, r3
 80147d2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 80147d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147d6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80147da:	f023 030c 	bic.w	r3, r3, #12
 80147de:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80147e0:	683b      	ldr	r3, [r7, #0]
 80147e2:	889a      	ldrh	r2, [r3, #4]
 80147e4:	683b      	ldr	r3, [r7, #0]
 80147e6:	891b      	ldrh	r3, [r3, #8]
 80147e8:	4313      	orrs	r3, r2
 80147ea:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 80147ec:	683b      	ldr	r3, [r7, #0]
 80147ee:	895b      	ldrh	r3, [r3, #10]

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80147f0:	4313      	orrs	r3, r2
 80147f2:	b29b      	uxth	r3, r3
 80147f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80147f6:	4313      	orrs	r3, r2
 80147f8:	627b      	str	r3, [r7, #36]	; 0x24
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 80147fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147fc:	b29a      	uxth	r2, r3
 80147fe:	687b      	ldr	r3, [r7, #4]
 8014800:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8014802:	687b      	ldr	r3, [r7, #4]
 8014804:	8a9b      	ldrh	r3, [r3, #20]
 8014806:	b29b      	uxth	r3, r3
 8014808:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 801480a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801480c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8014810:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8014812:	683b      	ldr	r3, [r7, #0]
 8014814:	899b      	ldrh	r3, [r3, #12]
 8014816:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014818:	4313      	orrs	r3, r2
 801481a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 801481c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801481e:	b29a      	uxth	r2, r3
 8014820:	687b      	ldr	r3, [r7, #4]
 8014822:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8014824:	f107 0308 	add.w	r3, r7, #8
 8014828:	4618      	mov	r0, r3
 801482a:	f7fb f851 	bl	800f8d0 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 801482e:	687a      	ldr	r2, [r7, #4]
 8014830:	4b31      	ldr	r3, [pc, #196]	; (80148f8 <USART_Init+0x168>)
 8014832:	429a      	cmp	r2, r3
 8014834:	d003      	beq.n	801483e <USART_Init+0xae>
 8014836:	687a      	ldr	r2, [r7, #4]
 8014838:	4b30      	ldr	r3, [pc, #192]	; (80148fc <USART_Init+0x16c>)
 801483a:	429a      	cmp	r2, r3
 801483c:	d102      	bne.n	8014844 <USART_Init+0xb4>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 801483e:	697b      	ldr	r3, [r7, #20]
 8014840:	623b      	str	r3, [r7, #32]
 8014842:	e001      	b.n	8014848 <USART_Init+0xb8>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8014844:	693b      	ldr	r3, [r7, #16]
 8014846:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8014848:	687b      	ldr	r3, [r7, #4]
 801484a:	899b      	ldrh	r3, [r3, #12]
 801484c:	b29b      	uxth	r3, r3
 801484e:	b29b      	uxth	r3, r3
 8014850:	b21b      	sxth	r3, r3
 8014852:	2b00      	cmp	r3, #0
 8014854:	da0c      	bge.n	8014870 <USART_Init+0xe0>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8014856:	6a3a      	ldr	r2, [r7, #32]
 8014858:	4613      	mov	r3, r2
 801485a:	009b      	lsls	r3, r3, #2
 801485c:	4413      	add	r3, r2
 801485e:	009a      	lsls	r2, r3, #2
 8014860:	441a      	add	r2, r3
 8014862:	683b      	ldr	r3, [r7, #0]
 8014864:	681b      	ldr	r3, [r3, #0]
 8014866:	005b      	lsls	r3, r3, #1
 8014868:	fbb2 f3f3 	udiv	r3, r2, r3
 801486c:	61fb      	str	r3, [r7, #28]
 801486e:	e00b      	b.n	8014888 <USART_Init+0xf8>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8014870:	6a3a      	ldr	r2, [r7, #32]
 8014872:	4613      	mov	r3, r2
 8014874:	009b      	lsls	r3, r3, #2
 8014876:	4413      	add	r3, r2
 8014878:	009a      	lsls	r2, r3, #2
 801487a:	441a      	add	r2, r3
 801487c:	683b      	ldr	r3, [r7, #0]
 801487e:	681b      	ldr	r3, [r3, #0]
 8014880:	009b      	lsls	r3, r3, #2
 8014882:	fbb2 f3f3 	udiv	r3, r2, r3
 8014886:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 8014888:	69fa      	ldr	r2, [r7, #28]
 801488a:	4b1d      	ldr	r3, [pc, #116]	; (8014900 <USART_Init+0x170>)
 801488c:	fba3 1302 	umull	r1, r3, r3, r2
 8014890:	095b      	lsrs	r3, r3, #5
 8014892:	011b      	lsls	r3, r3, #4
 8014894:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8014896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014898:	091b      	lsrs	r3, r3, #4
 801489a:	2264      	movs	r2, #100	; 0x64
 801489c:	fb02 f303 	mul.w	r3, r2, r3
 80148a0:	69fa      	ldr	r2, [r7, #28]
 80148a2:	1ad3      	subs	r3, r2, r3
 80148a4:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80148a6:	687b      	ldr	r3, [r7, #4]
 80148a8:	899b      	ldrh	r3, [r3, #12]
 80148aa:	b29b      	uxth	r3, r3
 80148ac:	b29b      	uxth	r3, r3
 80148ae:	b21b      	sxth	r3, r3
 80148b0:	2b00      	cmp	r3, #0
 80148b2:	da0d      	bge.n	80148d0 <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 80148b4:	69bb      	ldr	r3, [r7, #24]
 80148b6:	00db      	lsls	r3, r3, #3
 80148b8:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80148bc:	4b10      	ldr	r3, [pc, #64]	; (8014900 <USART_Init+0x170>)
 80148be:	fba3 1302 	umull	r1, r3, r3, r2
 80148c2:	095b      	lsrs	r3, r3, #5
 80148c4:	f003 0307 	and.w	r3, r3, #7
 80148c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80148ca:	4313      	orrs	r3, r2
 80148cc:	627b      	str	r3, [r7, #36]	; 0x24
 80148ce:	e00c      	b.n	80148ea <USART_Init+0x15a>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 80148d0:	69bb      	ldr	r3, [r7, #24]
 80148d2:	011b      	lsls	r3, r3, #4
 80148d4:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80148d8:	4b09      	ldr	r3, [pc, #36]	; (8014900 <USART_Init+0x170>)
 80148da:	fba3 1302 	umull	r1, r3, r3, r2
 80148de:	095b      	lsrs	r3, r3, #5
 80148e0:	f003 030f 	and.w	r3, r3, #15
 80148e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80148e6:	4313      	orrs	r3, r2
 80148e8:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 80148ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148ec:	b29a      	uxth	r2, r3
 80148ee:	687b      	ldr	r3, [r7, #4]
 80148f0:	811a      	strh	r2, [r3, #8]
}
 80148f2:	3728      	adds	r7, #40	; 0x28
 80148f4:	46bd      	mov	sp, r7
 80148f6:	bd80      	pop	{r7, pc}
 80148f8:	40011000 	.word	0x40011000
 80148fc:	40011400 	.word	0x40011400
 8014900:	51eb851f 	.word	0x51eb851f

08014904 <USART_StructInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
 8014904:	b480      	push	{r7}
 8014906:	b083      	sub	sp, #12
 8014908:	af00      	add	r7, sp, #0
 801490a:	6078      	str	r0, [r7, #4]
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 801490c:	687b      	ldr	r3, [r7, #4]
 801490e:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8014912:	601a      	str	r2, [r3, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 8014914:	687b      	ldr	r3, [r7, #4]
 8014916:	2200      	movs	r2, #0
 8014918:	809a      	strh	r2, [r3, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
 801491a:	687b      	ldr	r3, [r7, #4]
 801491c:	2200      	movs	r2, #0
 801491e:	80da      	strh	r2, [r3, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
 8014920:	687b      	ldr	r3, [r7, #4]
 8014922:	2200      	movs	r2, #0
 8014924:	811a      	strh	r2, [r3, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8014926:	687b      	ldr	r3, [r7, #4]
 8014928:	220c      	movs	r2, #12
 801492a:	815a      	strh	r2, [r3, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 801492c:	687b      	ldr	r3, [r7, #4]
 801492e:	2200      	movs	r2, #0
 8014930:	819a      	strh	r2, [r3, #12]
}
 8014932:	370c      	adds	r7, #12
 8014934:	46bd      	mov	sp, r7
 8014936:	f85d 7b04 	ldr.w	r7, [sp], #4
 801493a:	4770      	bx	lr

0801493c <USART_ClockInit>:
  *         contains the configuration information for the specified  USART peripheral.
  * @note   The Smart Card and Synchronous modes are not available for UART4 and UART5.    
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 801493c:	b480      	push	{r7}
 801493e:	b085      	sub	sp, #20
 8014940:	af00      	add	r7, sp, #0
 8014942:	6078      	str	r0, [r7, #4]
 8014944:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00;
 8014946:	2300      	movs	r3, #0
 8014948:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 801494a:	687b      	ldr	r3, [r7, #4]
 801494c:	8a1b      	ldrh	r3, [r3, #16]
 801494e:	b29b      	uxth	r3, r3
 8014950:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 8014952:	68fb      	ldr	r3, [r7, #12]
 8014954:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8014958:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 801495a:	683b      	ldr	r3, [r7, #0]
 801495c:	881a      	ldrh	r2, [r3, #0]
 801495e:	683b      	ldr	r3, [r7, #0]
 8014960:	885b      	ldrh	r3, [r3, #2]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 8014962:	4313      	orrs	r3, r2
 8014964:	b29a      	uxth	r2, r3
 8014966:	683b      	ldr	r3, [r7, #0]
 8014968:	889b      	ldrh	r3, [r3, #4]
 801496a:	4313      	orrs	r3, r2
 801496c:	b29a      	uxth	r2, r3
 801496e:	683b      	ldr	r3, [r7, #0]
 8014970:	88db      	ldrh	r3, [r3, #6]
 8014972:	4313      	orrs	r3, r2
 8014974:	b29b      	uxth	r3, r3
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 8014976:	68fa      	ldr	r2, [r7, #12]
 8014978:	4313      	orrs	r3, r2
 801497a:	60fb      	str	r3, [r7, #12]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 801497c:	68fb      	ldr	r3, [r7, #12]
 801497e:	b29a      	uxth	r2, r3
 8014980:	687b      	ldr	r3, [r7, #4]
 8014982:	821a      	strh	r2, [r3, #16]
}
 8014984:	3714      	adds	r7, #20
 8014986:	46bd      	mov	sp, r7
 8014988:	f85d 7b04 	ldr.w	r7, [sp], #4
 801498c:	4770      	bx	lr
 801498e:	bf00      	nop

08014990 <USART_ClockStructInit>:
  * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 8014990:	b480      	push	{r7}
 8014992:	b083      	sub	sp, #12
 8014994:	af00      	add	r7, sp, #0
 8014996:	6078      	str	r0, [r7, #4]
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 8014998:	687b      	ldr	r3, [r7, #4]
 801499a:	2200      	movs	r2, #0
 801499c:	801a      	strh	r2, [r3, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 801499e:	687b      	ldr	r3, [r7, #4]
 80149a0:	2200      	movs	r2, #0
 80149a2:	805a      	strh	r2, [r3, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 80149a4:	687b      	ldr	r3, [r7, #4]
 80149a6:	2200      	movs	r2, #0
 80149a8:	809a      	strh	r2, [r3, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 80149aa:	687b      	ldr	r3, [r7, #4]
 80149ac:	2200      	movs	r2, #0
 80149ae:	80da      	strh	r2, [r3, #6]
}
 80149b0:	370c      	adds	r7, #12
 80149b2:	46bd      	mov	sp, r7
 80149b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149b8:	4770      	bx	lr
 80149ba:	bf00      	nop

080149bc <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80149bc:	b480      	push	{r7}
 80149be:	b083      	sub	sp, #12
 80149c0:	af00      	add	r7, sp, #0
 80149c2:	6078      	str	r0, [r7, #4]
 80149c4:	460b      	mov	r3, r1
 80149c6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80149c8:	78fb      	ldrb	r3, [r7, #3]
 80149ca:	2b00      	cmp	r3, #0
 80149cc:	d008      	beq.n	80149e0 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 80149ce:	687b      	ldr	r3, [r7, #4]
 80149d0:	899b      	ldrh	r3, [r3, #12]
 80149d2:	b29b      	uxth	r3, r3
 80149d4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80149d8:	b29a      	uxth	r2, r3
 80149da:	687b      	ldr	r3, [r7, #4]
 80149dc:	819a      	strh	r2, [r3, #12]
 80149de:	e007      	b.n	80149f0 <USART_Cmd+0x34>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 80149e0:	687b      	ldr	r3, [r7, #4]
 80149e2:	899b      	ldrh	r3, [r3, #12]
 80149e4:	b29b      	uxth	r3, r3
 80149e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80149ea:	b29a      	uxth	r2, r3
 80149ec:	687b      	ldr	r3, [r7, #4]
 80149ee:	819a      	strh	r2, [r3, #12]
  }
}
 80149f0:	370c      	adds	r7, #12
 80149f2:	46bd      	mov	sp, r7
 80149f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149f8:	4770      	bx	lr
 80149fa:	bf00      	nop

080149fc <USART_SetPrescaler>:
  * @param  USART_Prescaler: specifies the prescaler clock. 
  * @note   The function is used for IrDA mode with UART4 and UART5.   
  * @retval None
  */
void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
{ 
 80149fc:	b480      	push	{r7}
 80149fe:	b083      	sub	sp, #12
 8014a00:	af00      	add	r7, sp, #0
 8014a02:	6078      	str	r0, [r7, #4]
 8014a04:	460b      	mov	r3, r1
 8014a06:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART prescaler */
  USARTx->GTPR &= USART_GTPR_GT;
 8014a08:	687b      	ldr	r3, [r7, #4]
 8014a0a:	8b1b      	ldrh	r3, [r3, #24]
 8014a0c:	b29b      	uxth	r3, r3
 8014a0e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8014a12:	b29a      	uxth	r2, r3
 8014a14:	687b      	ldr	r3, [r7, #4]
 8014a16:	831a      	strh	r2, [r3, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
 8014a18:	687b      	ldr	r3, [r7, #4]
 8014a1a:	8b1b      	ldrh	r3, [r3, #24]
 8014a1c:	b29a      	uxth	r2, r3
 8014a1e:	78fb      	ldrb	r3, [r7, #3]
 8014a20:	b29b      	uxth	r3, r3
 8014a22:	4313      	orrs	r3, r2
 8014a24:	b29a      	uxth	r2, r3
 8014a26:	687b      	ldr	r3, [r7, #4]
 8014a28:	831a      	strh	r2, [r3, #24]
}
 8014a2a:	370c      	adds	r7, #12
 8014a2c:	46bd      	mov	sp, r7
 8014a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a32:	4770      	bx	lr

08014a34 <USART_OverSampling8Cmd>:
  * @param  NewState: new state of the USART 8x oversampling mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8014a34:	b480      	push	{r7}
 8014a36:	b083      	sub	sp, #12
 8014a38:	af00      	add	r7, sp, #0
 8014a3a:	6078      	str	r0, [r7, #4]
 8014a3c:	460b      	mov	r3, r1
 8014a3e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8014a40:	78fb      	ldrb	r3, [r7, #3]
 8014a42:	2b00      	cmp	r3, #0
 8014a44:	d00a      	beq.n	8014a5c <USART_OverSampling8Cmd+0x28>
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
 8014a46:	687b      	ldr	r3, [r7, #4]
 8014a48:	899b      	ldrh	r3, [r3, #12]
 8014a4a:	b29b      	uxth	r3, r3
 8014a4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8014a50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8014a54:	b29a      	uxth	r2, r3
 8014a56:	687b      	ldr	r3, [r7, #4]
 8014a58:	819a      	strh	r2, [r3, #12]
 8014a5a:	e007      	b.n	8014a6c <USART_OverSampling8Cmd+0x38>
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_OVER8);
 8014a5c:	687b      	ldr	r3, [r7, #4]
 8014a5e:	899b      	ldrh	r3, [r3, #12]
 8014a60:	b29b      	uxth	r3, r3
 8014a62:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8014a66:	b29a      	uxth	r2, r3
 8014a68:	687b      	ldr	r3, [r7, #4]
 8014a6a:	819a      	strh	r2, [r3, #12]
  }
}  
 8014a6c:	370c      	adds	r7, #12
 8014a6e:	46bd      	mov	sp, r7
 8014a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a74:	4770      	bx	lr
 8014a76:	bf00      	nop

08014a78 <USART_OneBitMethodCmd>:
  * @param  NewState: new state of the USART one bit sampling method.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8014a78:	b480      	push	{r7}
 8014a7a:	b083      	sub	sp, #12
 8014a7c:	af00      	add	r7, sp, #0
 8014a7e:	6078      	str	r0, [r7, #4]
 8014a80:	460b      	mov	r3, r1
 8014a82:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8014a84:	78fb      	ldrb	r3, [r7, #3]
 8014a86:	2b00      	cmp	r3, #0
 8014a88:	d008      	beq.n	8014a9c <USART_OneBitMethodCmd+0x24>
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
 8014a8a:	687b      	ldr	r3, [r7, #4]
 8014a8c:	8a9b      	ldrh	r3, [r3, #20]
 8014a8e:	b29b      	uxth	r3, r3
 8014a90:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8014a94:	b29a      	uxth	r2, r3
 8014a96:	687b      	ldr	r3, [r7, #4]
 8014a98:	829a      	strh	r2, [r3, #20]
 8014a9a:	e007      	b.n	8014aac <USART_OneBitMethodCmd+0x34>
  }
  else
  {
    /* Disable the one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_ONEBIT);
 8014a9c:	687b      	ldr	r3, [r7, #4]
 8014a9e:	8a9b      	ldrh	r3, [r3, #20]
 8014aa0:	b29b      	uxth	r3, r3
 8014aa2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8014aa6:	b29a      	uxth	r2, r3
 8014aa8:	687b      	ldr	r3, [r7, #4]
 8014aaa:	829a      	strh	r2, [r3, #20]
  }
}
 8014aac:	370c      	adds	r7, #12
 8014aae:	46bd      	mov	sp, r7
 8014ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ab4:	4770      	bx	lr
 8014ab6:	bf00      	nop

08014ab8 <USART_SendData>:
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8014ab8:	b480      	push	{r7}
 8014aba:	b083      	sub	sp, #12
 8014abc:	af00      	add	r7, sp, #0
 8014abe:	6078      	str	r0, [r7, #4]
 8014ac0:	460b      	mov	r3, r1
 8014ac2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8014ac4:	887b      	ldrh	r3, [r7, #2]
 8014ac6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014aca:	b29a      	uxth	r2, r3
 8014acc:	687b      	ldr	r3, [r7, #4]
 8014ace:	809a      	strh	r2, [r3, #4]
}
 8014ad0:	370c      	adds	r7, #12
 8014ad2:	46bd      	mov	sp, r7
 8014ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ad8:	4770      	bx	lr
 8014ada:	bf00      	nop

08014adc <USART_ReceiveData>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 8014adc:	b480      	push	{r7}
 8014ade:	b083      	sub	sp, #12
 8014ae0:	af00      	add	r7, sp, #0
 8014ae2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8014ae4:	687b      	ldr	r3, [r7, #4]
 8014ae6:	889b      	ldrh	r3, [r3, #4]
 8014ae8:	b29b      	uxth	r3, r3
 8014aea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014aee:	b29b      	uxth	r3, r3
}
 8014af0:	4618      	mov	r0, r3
 8014af2:	370c      	adds	r7, #12
 8014af4:	46bd      	mov	sp, r7
 8014af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014afa:	4770      	bx	lr

08014afc <USART_SetAddress>:
  *         UART peripheral.
  * @param  USART_Address: Indicates the address of the USART node.
  * @retval None
  */
void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
{
 8014afc:	b480      	push	{r7}
 8014afe:	b083      	sub	sp, #12
 8014b00:	af00      	add	r7, sp, #0
 8014b02:	6078      	str	r0, [r7, #4]
 8014b04:	460b      	mov	r3, r1
 8014b06:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address)); 
    
  /* Clear the USART address */
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_ADD);
 8014b08:	687b      	ldr	r3, [r7, #4]
 8014b0a:	8a1b      	ldrh	r3, [r3, #16]
 8014b0c:	b29b      	uxth	r3, r3
 8014b0e:	f023 030f 	bic.w	r3, r3, #15
 8014b12:	b29a      	uxth	r2, r3
 8014b14:	687b      	ldr	r3, [r7, #4]
 8014b16:	821a      	strh	r2, [r3, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
 8014b18:	687b      	ldr	r3, [r7, #4]
 8014b1a:	8a1b      	ldrh	r3, [r3, #16]
 8014b1c:	b29a      	uxth	r2, r3
 8014b1e:	78fb      	ldrb	r3, [r7, #3]
 8014b20:	b29b      	uxth	r3, r3
 8014b22:	4313      	orrs	r3, r2
 8014b24:	b29a      	uxth	r2, r3
 8014b26:	687b      	ldr	r3, [r7, #4]
 8014b28:	821a      	strh	r2, [r3, #16]
}
 8014b2a:	370c      	adds	r7, #12
 8014b2c:	46bd      	mov	sp, r7
 8014b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b32:	4770      	bx	lr

08014b34 <USART_ReceiverWakeUpCmd>:
  * @param  NewState: new state of the USART mute mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8014b34:	b480      	push	{r7}
 8014b36:	b083      	sub	sp, #12
 8014b38:	af00      	add	r7, sp, #0
 8014b3a:	6078      	str	r0, [r7, #4]
 8014b3c:	460b      	mov	r3, r1
 8014b3e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
 8014b40:	78fb      	ldrb	r3, [r7, #3]
 8014b42:	2b00      	cmp	r3, #0
 8014b44:	d008      	beq.n	8014b58 <USART_ReceiverWakeUpCmd+0x24>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_RWU;
 8014b46:	687b      	ldr	r3, [r7, #4]
 8014b48:	899b      	ldrh	r3, [r3, #12]
 8014b4a:	b29b      	uxth	r3, r3
 8014b4c:	f043 0302 	orr.w	r3, r3, #2
 8014b50:	b29a      	uxth	r2, r3
 8014b52:	687b      	ldr	r3, [r7, #4]
 8014b54:	819a      	strh	r2, [r3, #12]
 8014b56:	e007      	b.n	8014b68 <USART_ReceiverWakeUpCmd+0x34>
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_RWU);
 8014b58:	687b      	ldr	r3, [r7, #4]
 8014b5a:	899b      	ldrh	r3, [r3, #12]
 8014b5c:	b29b      	uxth	r3, r3
 8014b5e:	f023 0302 	bic.w	r3, r3, #2
 8014b62:	b29a      	uxth	r2, r3
 8014b64:	687b      	ldr	r3, [r7, #4]
 8014b66:	819a      	strh	r2, [r3, #12]
  }
}
 8014b68:	370c      	adds	r7, #12
 8014b6a:	46bd      	mov	sp, r7
 8014b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b70:	4770      	bx	lr
 8014b72:	bf00      	nop

08014b74 <USART_WakeUpConfig>:
  *            @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
  *            @arg USART_WakeUp_AddressMark: WakeUp by an address mark
  * @retval None
  */
void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
{
 8014b74:	b480      	push	{r7}
 8014b76:	b083      	sub	sp, #12
 8014b78:	af00      	add	r7, sp, #0
 8014b7a:	6078      	str	r0, [r7, #4]
 8014b7c:	460b      	mov	r3, r1
 8014b7e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));
  
  USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_WAKE);
 8014b80:	687b      	ldr	r3, [r7, #4]
 8014b82:	899b      	ldrh	r3, [r3, #12]
 8014b84:	b29b      	uxth	r3, r3
 8014b86:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8014b8a:	b29a      	uxth	r2, r3
 8014b8c:	687b      	ldr	r3, [r7, #4]
 8014b8e:	819a      	strh	r2, [r3, #12]
  USARTx->CR1 |= USART_WakeUp;
 8014b90:	687b      	ldr	r3, [r7, #4]
 8014b92:	899b      	ldrh	r3, [r3, #12]
 8014b94:	b29a      	uxth	r2, r3
 8014b96:	887b      	ldrh	r3, [r7, #2]
 8014b98:	4313      	orrs	r3, r2
 8014b9a:	b29a      	uxth	r2, r3
 8014b9c:	687b      	ldr	r3, [r7, #4]
 8014b9e:	819a      	strh	r2, [r3, #12]
}
 8014ba0:	370c      	adds	r7, #12
 8014ba2:	46bd      	mov	sp, r7
 8014ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ba8:	4770      	bx	lr
 8014baa:	bf00      	nop

08014bac <USART_LINBreakDetectLengthConfig>:
  *            @arg USART_LINBreakDetectLength_10b: 10-bit break detection
  *            @arg USART_LINBreakDetectLength_11b: 11-bit break detection
  * @retval None
  */
void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
{
 8014bac:	b480      	push	{r7}
 8014bae:	b083      	sub	sp, #12
 8014bb0:	af00      	add	r7, sp, #0
 8014bb2:	6078      	str	r0, [r7, #4]
 8014bb4:	460b      	mov	r3, r1
 8014bb6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
  
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LBDL);
 8014bb8:	687b      	ldr	r3, [r7, #4]
 8014bba:	8a1b      	ldrh	r3, [r3, #16]
 8014bbc:	b29b      	uxth	r3, r3
 8014bbe:	f023 0320 	bic.w	r3, r3, #32
 8014bc2:	b29a      	uxth	r2, r3
 8014bc4:	687b      	ldr	r3, [r7, #4]
 8014bc6:	821a      	strh	r2, [r3, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
 8014bc8:	687b      	ldr	r3, [r7, #4]
 8014bca:	8a1b      	ldrh	r3, [r3, #16]
 8014bcc:	b29a      	uxth	r2, r3
 8014bce:	887b      	ldrh	r3, [r7, #2]
 8014bd0:	4313      	orrs	r3, r2
 8014bd2:	b29a      	uxth	r2, r3
 8014bd4:	687b      	ldr	r3, [r7, #4]
 8014bd6:	821a      	strh	r2, [r3, #16]
}
 8014bd8:	370c      	adds	r7, #12
 8014bda:	46bd      	mov	sp, r7
 8014bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014be0:	4770      	bx	lr
 8014be2:	bf00      	nop

08014be4 <USART_LINCmd>:
  * @param  NewState: new state of the USART LIN mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8014be4:	b480      	push	{r7}
 8014be6:	b083      	sub	sp, #12
 8014be8:	af00      	add	r7, sp, #0
 8014bea:	6078      	str	r0, [r7, #4]
 8014bec:	460b      	mov	r3, r1
 8014bee:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8014bf0:	78fb      	ldrb	r3, [r7, #3]
 8014bf2:	2b00      	cmp	r3, #0
 8014bf4:	d008      	beq.n	8014c08 <USART_LINCmd+0x24>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
 8014bf6:	687b      	ldr	r3, [r7, #4]
 8014bf8:	8a1b      	ldrh	r3, [r3, #16]
 8014bfa:	b29b      	uxth	r3, r3
 8014bfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8014c00:	b29a      	uxth	r2, r3
 8014c02:	687b      	ldr	r3, [r7, #4]
 8014c04:	821a      	strh	r2, [r3, #16]
 8014c06:	e007      	b.n	8014c18 <USART_LINCmd+0x34>
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LINEN);
 8014c08:	687b      	ldr	r3, [r7, #4]
 8014c0a:	8a1b      	ldrh	r3, [r3, #16]
 8014c0c:	b29b      	uxth	r3, r3
 8014c0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8014c12:	b29a      	uxth	r2, r3
 8014c14:	687b      	ldr	r3, [r7, #4]
 8014c16:	821a      	strh	r2, [r3, #16]
  }
}
 8014c18:	370c      	adds	r7, #12
 8014c1a:	46bd      	mov	sp, r7
 8014c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c20:	4770      	bx	lr
 8014c22:	bf00      	nop

08014c24 <USART_SendBreak>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval None
  */
void USART_SendBreak(USART_TypeDef* USARTx)
{
 8014c24:	b480      	push	{r7}
 8014c26:	b083      	sub	sp, #12
 8014c28:	af00      	add	r7, sp, #0
 8014c2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Send break characters */
  USARTx->CR1 |= USART_CR1_SBK;
 8014c2c:	687b      	ldr	r3, [r7, #4]
 8014c2e:	899b      	ldrh	r3, [r3, #12]
 8014c30:	b29b      	uxth	r3, r3
 8014c32:	f043 0301 	orr.w	r3, r3, #1
 8014c36:	b29a      	uxth	r2, r3
 8014c38:	687b      	ldr	r3, [r7, #4]
 8014c3a:	819a      	strh	r2, [r3, #12]
}
 8014c3c:	370c      	adds	r7, #12
 8014c3e:	46bd      	mov	sp, r7
 8014c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c44:	4770      	bx	lr
 8014c46:	bf00      	nop

08014c48 <USART_HalfDuplexCmd>:
  * @param  NewState: new state of the USART Communication.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8014c48:	b480      	push	{r7}
 8014c4a:	b083      	sub	sp, #12
 8014c4c:	af00      	add	r7, sp, #0
 8014c4e:	6078      	str	r0, [r7, #4]
 8014c50:	460b      	mov	r3, r1
 8014c52:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8014c54:	78fb      	ldrb	r3, [r7, #3]
 8014c56:	2b00      	cmp	r3, #0
 8014c58:	d008      	beq.n	8014c6c <USART_HalfDuplexCmd+0x24>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
 8014c5a:	687b      	ldr	r3, [r7, #4]
 8014c5c:	8a9b      	ldrh	r3, [r3, #20]
 8014c5e:	b29b      	uxth	r3, r3
 8014c60:	f043 0308 	orr.w	r3, r3, #8
 8014c64:	b29a      	uxth	r2, r3
 8014c66:	687b      	ldr	r3, [r7, #4]
 8014c68:	829a      	strh	r2, [r3, #20]
 8014c6a:	e007      	b.n	8014c7c <USART_HalfDuplexCmd+0x34>
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_HDSEL);
 8014c6c:	687b      	ldr	r3, [r7, #4]
 8014c6e:	8a9b      	ldrh	r3, [r3, #20]
 8014c70:	b29b      	uxth	r3, r3
 8014c72:	f023 0308 	bic.w	r3, r3, #8
 8014c76:	b29a      	uxth	r2, r3
 8014c78:	687b      	ldr	r3, [r7, #4]
 8014c7a:	829a      	strh	r2, [r3, #20]
  }
}
 8014c7c:	370c      	adds	r7, #12
 8014c7e:	46bd      	mov	sp, r7
 8014c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c84:	4770      	bx	lr
 8014c86:	bf00      	nop

08014c88 <USART_SetGuardTime>:
  *         UART peripheral.
  * @param  USART_GuardTime: specifies the guard time.   
  * @retval None
  */
void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
{    
 8014c88:	b480      	push	{r7}
 8014c8a:	b083      	sub	sp, #12
 8014c8c:	af00      	add	r7, sp, #0
 8014c8e:	6078      	str	r0, [r7, #4]
 8014c90:	460b      	mov	r3, r1
 8014c92:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  
  /* Clear the USART Guard time */
  USARTx->GTPR &= USART_GTPR_PSC;
 8014c94:	687b      	ldr	r3, [r7, #4]
 8014c96:	8b1b      	ldrh	r3, [r3, #24]
 8014c98:	b29b      	uxth	r3, r3
 8014c9a:	b2db      	uxtb	r3, r3
 8014c9c:	b29a      	uxth	r2, r3
 8014c9e:	687b      	ldr	r3, [r7, #4]
 8014ca0:	831a      	strh	r2, [r3, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
 8014ca2:	687b      	ldr	r3, [r7, #4]
 8014ca4:	8b1b      	ldrh	r3, [r3, #24]
 8014ca6:	b29a      	uxth	r2, r3
 8014ca8:	78fb      	ldrb	r3, [r7, #3]
 8014caa:	b29b      	uxth	r3, r3
 8014cac:	021b      	lsls	r3, r3, #8
 8014cae:	b29b      	uxth	r3, r3
 8014cb0:	4313      	orrs	r3, r2
 8014cb2:	b29a      	uxth	r2, r3
 8014cb4:	687b      	ldr	r3, [r7, #4]
 8014cb6:	831a      	strh	r2, [r3, #24]
}
 8014cb8:	370c      	adds	r7, #12
 8014cba:	46bd      	mov	sp, r7
 8014cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cc0:	4770      	bx	lr
 8014cc2:	bf00      	nop

08014cc4 <USART_SmartCardCmd>:
  * @param  NewState: new state of the Smart Card mode.
  *          This parameter can be: ENABLE or DISABLE.      
  * @retval None
  */
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8014cc4:	b480      	push	{r7}
 8014cc6:	b083      	sub	sp, #12
 8014cc8:	af00      	add	r7, sp, #0
 8014cca:	6078      	str	r0, [r7, #4]
 8014ccc:	460b      	mov	r3, r1
 8014cce:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8014cd0:	78fb      	ldrb	r3, [r7, #3]
 8014cd2:	2b00      	cmp	r3, #0
 8014cd4:	d008      	beq.n	8014ce8 <USART_SmartCardCmd+0x24>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
 8014cd6:	687b      	ldr	r3, [r7, #4]
 8014cd8:	8a9b      	ldrh	r3, [r3, #20]
 8014cda:	b29b      	uxth	r3, r3
 8014cdc:	f043 0320 	orr.w	r3, r3, #32
 8014ce0:	b29a      	uxth	r2, r3
 8014ce2:	687b      	ldr	r3, [r7, #4]
 8014ce4:	829a      	strh	r2, [r3, #20]
 8014ce6:	e007      	b.n	8014cf8 <USART_SmartCardCmd+0x34>
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_SCEN);
 8014ce8:	687b      	ldr	r3, [r7, #4]
 8014cea:	8a9b      	ldrh	r3, [r3, #20]
 8014cec:	b29b      	uxth	r3, r3
 8014cee:	f023 0320 	bic.w	r3, r3, #32
 8014cf2:	b29a      	uxth	r2, r3
 8014cf4:	687b      	ldr	r3, [r7, #4]
 8014cf6:	829a      	strh	r2, [r3, #20]
  }
}
 8014cf8:	370c      	adds	r7, #12
 8014cfa:	46bd      	mov	sp, r7
 8014cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d00:	4770      	bx	lr
 8014d02:	bf00      	nop

08014d04 <USART_SmartCardNACKCmd>:
  * @param  NewState: new state of the NACK transmission.
  *          This parameter can be: ENABLE or DISABLE.  
  * @retval None
  */
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8014d04:	b480      	push	{r7}
 8014d06:	b083      	sub	sp, #12
 8014d08:	af00      	add	r7, sp, #0
 8014d0a:	6078      	str	r0, [r7, #4]
 8014d0c:	460b      	mov	r3, r1
 8014d0e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8014d10:	78fb      	ldrb	r3, [r7, #3]
 8014d12:	2b00      	cmp	r3, #0
 8014d14:	d008      	beq.n	8014d28 <USART_SmartCardNACKCmd+0x24>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
 8014d16:	687b      	ldr	r3, [r7, #4]
 8014d18:	8a9b      	ldrh	r3, [r3, #20]
 8014d1a:	b29b      	uxth	r3, r3
 8014d1c:	f043 0310 	orr.w	r3, r3, #16
 8014d20:	b29a      	uxth	r2, r3
 8014d22:	687b      	ldr	r3, [r7, #4]
 8014d24:	829a      	strh	r2, [r3, #20]
 8014d26:	e007      	b.n	8014d38 <USART_SmartCardNACKCmd+0x34>
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_NACK);
 8014d28:	687b      	ldr	r3, [r7, #4]
 8014d2a:	8a9b      	ldrh	r3, [r3, #20]
 8014d2c:	b29b      	uxth	r3, r3
 8014d2e:	f023 0310 	bic.w	r3, r3, #16
 8014d32:	b29a      	uxth	r2, r3
 8014d34:	687b      	ldr	r3, [r7, #4]
 8014d36:	829a      	strh	r2, [r3, #20]
  }
}
 8014d38:	370c      	adds	r7, #12
 8014d3a:	46bd      	mov	sp, r7
 8014d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d40:	4770      	bx	lr
 8014d42:	bf00      	nop

08014d44 <USART_IrDAConfig>:
  *            @arg USART_IrDAMode_LowPower
  *            @arg USART_IrDAMode_Normal
  * @retval None
  */
void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
{
 8014d44:	b480      	push	{r7}
 8014d46:	b083      	sub	sp, #12
 8014d48:	af00      	add	r7, sp, #0
 8014d4a:	6078      	str	r0, [r7, #4]
 8014d4c:	460b      	mov	r3, r1
 8014d4e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
    
  USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IRLP);
 8014d50:	687b      	ldr	r3, [r7, #4]
 8014d52:	8a9b      	ldrh	r3, [r3, #20]
 8014d54:	b29b      	uxth	r3, r3
 8014d56:	f023 0304 	bic.w	r3, r3, #4
 8014d5a:	b29a      	uxth	r2, r3
 8014d5c:	687b      	ldr	r3, [r7, #4]
 8014d5e:	829a      	strh	r2, [r3, #20]
  USARTx->CR3 |= USART_IrDAMode;
 8014d60:	687b      	ldr	r3, [r7, #4]
 8014d62:	8a9b      	ldrh	r3, [r3, #20]
 8014d64:	b29a      	uxth	r2, r3
 8014d66:	887b      	ldrh	r3, [r7, #2]
 8014d68:	4313      	orrs	r3, r2
 8014d6a:	b29a      	uxth	r2, r3
 8014d6c:	687b      	ldr	r3, [r7, #4]
 8014d6e:	829a      	strh	r2, [r3, #20]
}
 8014d70:	370c      	adds	r7, #12
 8014d72:	46bd      	mov	sp, r7
 8014d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d78:	4770      	bx	lr
 8014d7a:	bf00      	nop

08014d7c <USART_IrDACmd>:
  * @param  NewState: new state of the IrDA mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8014d7c:	b480      	push	{r7}
 8014d7e:	b083      	sub	sp, #12
 8014d80:	af00      	add	r7, sp, #0
 8014d82:	6078      	str	r0, [r7, #4]
 8014d84:	460b      	mov	r3, r1
 8014d86:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 8014d88:	78fb      	ldrb	r3, [r7, #3]
 8014d8a:	2b00      	cmp	r3, #0
 8014d8c:	d008      	beq.n	8014da0 <USART_IrDACmd+0x24>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
 8014d8e:	687b      	ldr	r3, [r7, #4]
 8014d90:	8a9b      	ldrh	r3, [r3, #20]
 8014d92:	b29b      	uxth	r3, r3
 8014d94:	f043 0302 	orr.w	r3, r3, #2
 8014d98:	b29a      	uxth	r2, r3
 8014d9a:	687b      	ldr	r3, [r7, #4]
 8014d9c:	829a      	strh	r2, [r3, #20]
 8014d9e:	e007      	b.n	8014db0 <USART_IrDACmd+0x34>
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IREN);
 8014da0:	687b      	ldr	r3, [r7, #4]
 8014da2:	8a9b      	ldrh	r3, [r3, #20]
 8014da4:	b29b      	uxth	r3, r3
 8014da6:	f023 0302 	bic.w	r3, r3, #2
 8014daa:	b29a      	uxth	r2, r3
 8014dac:	687b      	ldr	r3, [r7, #4]
 8014dae:	829a      	strh	r2, [r3, #20]
  }
}
 8014db0:	370c      	adds	r7, #12
 8014db2:	46bd      	mov	sp, r7
 8014db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014db8:	4770      	bx	lr
 8014dba:	bf00      	nop

08014dbc <USART_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *          This parameter can be: ENABLE or DISABLE.   
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
{
 8014dbc:	b480      	push	{r7}
 8014dbe:	b083      	sub	sp, #12
 8014dc0:	af00      	add	r7, sp, #0
 8014dc2:	6078      	str	r0, [r7, #4]
 8014dc4:	4613      	mov	r3, r2
 8014dc6:	460a      	mov	r2, r1
 8014dc8:	807a      	strh	r2, [r7, #2]
 8014dca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 8014dcc:	787b      	ldrb	r3, [r7, #1]
 8014dce:	2b00      	cmp	r3, #0
 8014dd0:	d008      	beq.n	8014de4 <USART_DMACmd+0x28>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 8014dd2:	687b      	ldr	r3, [r7, #4]
 8014dd4:	8a9b      	ldrh	r3, [r3, #20]
 8014dd6:	b29a      	uxth	r2, r3
 8014dd8:	887b      	ldrh	r3, [r7, #2]
 8014dda:	4313      	orrs	r3, r2
 8014ddc:	b29a      	uxth	r2, r3
 8014dde:	687b      	ldr	r3, [r7, #4]
 8014de0:	829a      	strh	r2, [r3, #20]
 8014de2:	e009      	b.n	8014df8 <USART_DMACmd+0x3c>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
 8014de4:	687b      	ldr	r3, [r7, #4]
 8014de6:	8a9b      	ldrh	r3, [r3, #20]
 8014de8:	b29a      	uxth	r2, r3
 8014dea:	887b      	ldrh	r3, [r7, #2]
 8014dec:	43db      	mvns	r3, r3
 8014dee:	b29b      	uxth	r3, r3
 8014df0:	4013      	ands	r3, r2
 8014df2:	b29a      	uxth	r2, r3
 8014df4:	687b      	ldr	r3, [r7, #4]
 8014df6:	829a      	strh	r2, [r3, #20]
  }
}
 8014df8:	370c      	adds	r7, #12
 8014dfa:	46bd      	mov	sp, r7
 8014dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e00:	4770      	bx	lr
 8014e02:	bf00      	nop

08014e04 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8014e04:	b480      	push	{r7}
 8014e06:	b087      	sub	sp, #28
 8014e08:	af00      	add	r7, sp, #0
 8014e0a:	6078      	str	r0, [r7, #4]
 8014e0c:	4613      	mov	r3, r2
 8014e0e:	460a      	mov	r2, r1
 8014e10:	807a      	strh	r2, [r7, #2]
 8014e12:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 8014e14:	2300      	movs	r3, #0
 8014e16:	613b      	str	r3, [r7, #16]
 8014e18:	2300      	movs	r3, #0
 8014e1a:	60fb      	str	r3, [r7, #12]
 8014e1c:	2300      	movs	r3, #0
 8014e1e:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 8014e20:	2300      	movs	r3, #0
 8014e22:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  usartxbase = (uint32_t)USARTx;
 8014e24:	687b      	ldr	r3, [r7, #4]
 8014e26:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8014e28:	887b      	ldrh	r3, [r7, #2]
 8014e2a:	b2db      	uxtb	r3, r3
 8014e2c:	095b      	lsrs	r3, r3, #5
 8014e2e:	b2db      	uxtb	r3, r3
 8014e30:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8014e32:	887b      	ldrh	r3, [r7, #2]
 8014e34:	f003 031f 	and.w	r3, r3, #31
 8014e38:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 8014e3a:	68fb      	ldr	r3, [r7, #12]
 8014e3c:	2201      	movs	r2, #1
 8014e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8014e42:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8014e44:	693b      	ldr	r3, [r7, #16]
 8014e46:	2b01      	cmp	r3, #1
 8014e48:	d103      	bne.n	8014e52 <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 8014e4a:	697b      	ldr	r3, [r7, #20]
 8014e4c:	330c      	adds	r3, #12
 8014e4e:	617b      	str	r3, [r7, #20]
 8014e50:	e009      	b.n	8014e66 <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8014e52:	693b      	ldr	r3, [r7, #16]
 8014e54:	2b02      	cmp	r3, #2
 8014e56:	d103      	bne.n	8014e60 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 8014e58:	697b      	ldr	r3, [r7, #20]
 8014e5a:	3310      	adds	r3, #16
 8014e5c:	617b      	str	r3, [r7, #20]
 8014e5e:	e002      	b.n	8014e66 <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8014e60:	697b      	ldr	r3, [r7, #20]
 8014e62:	3314      	adds	r3, #20
 8014e64:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 8014e66:	787b      	ldrb	r3, [r7, #1]
 8014e68:	2b00      	cmp	r3, #0
 8014e6a:	d006      	beq.n	8014e7a <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8014e6c:	697b      	ldr	r3, [r7, #20]
 8014e6e:	697a      	ldr	r2, [r7, #20]
 8014e70:	6811      	ldr	r1, [r2, #0]
 8014e72:	68ba      	ldr	r2, [r7, #8]
 8014e74:	430a      	orrs	r2, r1
 8014e76:	601a      	str	r2, [r3, #0]
 8014e78:	e006      	b.n	8014e88 <USART_ITConfig+0x84>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8014e7a:	697b      	ldr	r3, [r7, #20]
 8014e7c:	697a      	ldr	r2, [r7, #20]
 8014e7e:	6811      	ldr	r1, [r2, #0]
 8014e80:	68ba      	ldr	r2, [r7, #8]
 8014e82:	43d2      	mvns	r2, r2
 8014e84:	400a      	ands	r2, r1
 8014e86:	601a      	str	r2, [r3, #0]
  }
}
 8014e88:	371c      	adds	r7, #28
 8014e8a:	46bd      	mov	sp, r7
 8014e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e90:	4770      	bx	lr
 8014e92:	bf00      	nop

08014e94 <USART_GetFlagStatus>:
  *            @arg USART_FLAG_FE:   Framing Error flag
  *            @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8014e94:	b480      	push	{r7}
 8014e96:	b085      	sub	sp, #20
 8014e98:	af00      	add	r7, sp, #0
 8014e9a:	6078      	str	r0, [r7, #4]
 8014e9c:	460b      	mov	r3, r1
 8014e9e:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8014ea0:	2300      	movs	r3, #0
 8014ea2:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8014ea4:	687b      	ldr	r3, [r7, #4]
 8014ea6:	881b      	ldrh	r3, [r3, #0]
 8014ea8:	b29a      	uxth	r2, r3
 8014eaa:	887b      	ldrh	r3, [r7, #2]
 8014eac:	4013      	ands	r3, r2
 8014eae:	b29b      	uxth	r3, r3
 8014eb0:	2b00      	cmp	r3, #0
 8014eb2:	d002      	beq.n	8014eba <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 8014eb4:	2301      	movs	r3, #1
 8014eb6:	73fb      	strb	r3, [r7, #15]
 8014eb8:	e001      	b.n	8014ebe <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 8014eba:	2300      	movs	r3, #0
 8014ebc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8014ebe:	7bfb      	ldrb	r3, [r7, #15]
}
 8014ec0:	4618      	mov	r0, r3
 8014ec2:	3714      	adds	r7, #20
 8014ec4:	46bd      	mov	sp, r7
 8014ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014eca:	4770      	bx	lr

08014ecc <USART_ClearFlag>:
  *          (USART_SendData()).
  *   
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8014ecc:	b480      	push	{r7}
 8014ece:	b083      	sub	sp, #12
 8014ed0:	af00      	add	r7, sp, #0
 8014ed2:	6078      	str	r0, [r7, #4]
 8014ed4:	460b      	mov	r3, r1
 8014ed6:	807b      	strh	r3, [r7, #2]
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
       
  USARTx->SR = (uint16_t)~USART_FLAG;
 8014ed8:	887b      	ldrh	r3, [r7, #2]
 8014eda:	43db      	mvns	r3, r3
 8014edc:	b29a      	uxth	r2, r3
 8014ede:	687b      	ldr	r3, [r7, #4]
 8014ee0:	801a      	strh	r2, [r3, #0]
}
 8014ee2:	370c      	adds	r7, #12
 8014ee4:	46bd      	mov	sp, r7
 8014ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014eea:	4770      	bx	lr

08014eec <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8014eec:	b480      	push	{r7}
 8014eee:	b087      	sub	sp, #28
 8014ef0:	af00      	add	r7, sp, #0
 8014ef2:	6078      	str	r0, [r7, #4]
 8014ef4:	460b      	mov	r3, r1
 8014ef6:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 8014ef8:	2300      	movs	r3, #0
 8014efa:	60fb      	str	r3, [r7, #12]
 8014efc:	2300      	movs	r3, #0
 8014efe:	617b      	str	r3, [r7, #20]
 8014f00:	2300      	movs	r3, #0
 8014f02:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8014f04:	2300      	movs	r3, #0
 8014f06:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8014f08:	887b      	ldrh	r3, [r7, #2]
 8014f0a:	b2db      	uxtb	r3, r3
 8014f0c:	095b      	lsrs	r3, r3, #5
 8014f0e:	b2db      	uxtb	r3, r3
 8014f10:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8014f12:	887b      	ldrh	r3, [r7, #2]
 8014f14:	f003 031f 	and.w	r3, r3, #31
 8014f18:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8014f1a:	697b      	ldr	r3, [r7, #20]
 8014f1c:	2201      	movs	r2, #1
 8014f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8014f22:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8014f24:	68bb      	ldr	r3, [r7, #8]
 8014f26:	2b01      	cmp	r3, #1
 8014f28:	d106      	bne.n	8014f38 <USART_GetITStatus+0x4c>
  {
    itmask &= USARTx->CR1;
 8014f2a:	687b      	ldr	r3, [r7, #4]
 8014f2c:	899b      	ldrh	r3, [r3, #12]
 8014f2e:	b29b      	uxth	r3, r3
 8014f30:	697a      	ldr	r2, [r7, #20]
 8014f32:	4013      	ands	r3, r2
 8014f34:	617b      	str	r3, [r7, #20]
 8014f36:	e00f      	b.n	8014f58 <USART_GetITStatus+0x6c>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8014f38:	68bb      	ldr	r3, [r7, #8]
 8014f3a:	2b02      	cmp	r3, #2
 8014f3c:	d106      	bne.n	8014f4c <USART_GetITStatus+0x60>
  {
    itmask &= USARTx->CR2;
 8014f3e:	687b      	ldr	r3, [r7, #4]
 8014f40:	8a1b      	ldrh	r3, [r3, #16]
 8014f42:	b29b      	uxth	r3, r3
 8014f44:	697a      	ldr	r2, [r7, #20]
 8014f46:	4013      	ands	r3, r2
 8014f48:	617b      	str	r3, [r7, #20]
 8014f4a:	e005      	b.n	8014f58 <USART_GetITStatus+0x6c>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8014f4c:	687b      	ldr	r3, [r7, #4]
 8014f4e:	8a9b      	ldrh	r3, [r3, #20]
 8014f50:	b29b      	uxth	r3, r3
 8014f52:	697a      	ldr	r2, [r7, #20]
 8014f54:	4013      	ands	r3, r2
 8014f56:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 8014f58:	887b      	ldrh	r3, [r7, #2]
 8014f5a:	0a1b      	lsrs	r3, r3, #8
 8014f5c:	b29b      	uxth	r3, r3
 8014f5e:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8014f60:	68fb      	ldr	r3, [r7, #12]
 8014f62:	2201      	movs	r2, #1
 8014f64:	fa02 f303 	lsl.w	r3, r2, r3
 8014f68:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 8014f6a:	687b      	ldr	r3, [r7, #4]
 8014f6c:	881b      	ldrh	r3, [r3, #0]
 8014f6e:	b29b      	uxth	r3, r3
 8014f70:	68fa      	ldr	r2, [r7, #12]
 8014f72:	4013      	ands	r3, r2
 8014f74:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8014f76:	697b      	ldr	r3, [r7, #20]
 8014f78:	2b00      	cmp	r3, #0
 8014f7a:	d005      	beq.n	8014f88 <USART_GetITStatus+0x9c>
 8014f7c:	68fb      	ldr	r3, [r7, #12]
 8014f7e:	2b00      	cmp	r3, #0
 8014f80:	d002      	beq.n	8014f88 <USART_GetITStatus+0x9c>
  {
    bitstatus = SET;
 8014f82:	2301      	movs	r3, #1
 8014f84:	74fb      	strb	r3, [r7, #19]
 8014f86:	e001      	b.n	8014f8c <USART_GetITStatus+0xa0>
  }
  else
  {
    bitstatus = RESET;
 8014f88:	2300      	movs	r3, #0
 8014f8a:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8014f8c:	7cfb      	ldrb	r3, [r7, #19]
}
 8014f8e:	4618      	mov	r0, r3
 8014f90:	371c      	adds	r7, #28
 8014f92:	46bd      	mov	sp, r7
 8014f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f98:	4770      	bx	lr
 8014f9a:	bf00      	nop

08014f9c <USART_ClearITPendingBit>:
  *          (USART_SendData()).
  *  
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8014f9c:	b480      	push	{r7}
 8014f9e:	b085      	sub	sp, #20
 8014fa0:	af00      	add	r7, sp, #0
 8014fa2:	6078      	str	r0, [r7, #4]
 8014fa4:	460b      	mov	r3, r1
 8014fa6:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
 8014fa8:	2300      	movs	r3, #0
 8014faa:	81fb      	strh	r3, [r7, #14]
 8014fac:	2300      	movs	r3, #0
 8014fae:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
 8014fb0:	887b      	ldrh	r3, [r7, #2]
 8014fb2:	0a1b      	lsrs	r3, r3, #8
 8014fb4:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 8014fb6:	89fb      	ldrh	r3, [r7, #14]
 8014fb8:	2201      	movs	r2, #1
 8014fba:	fa02 f303 	lsl.w	r3, r2, r3
 8014fbe:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
 8014fc0:	89bb      	ldrh	r3, [r7, #12]
 8014fc2:	43db      	mvns	r3, r3
 8014fc4:	b29a      	uxth	r2, r3
 8014fc6:	687b      	ldr	r3, [r7, #4]
 8014fc8:	801a      	strh	r2, [r3, #0]
}
 8014fca:	3714      	adds	r7, #20
 8014fcc:	46bd      	mov	sp, r7
 8014fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fd2:	4770      	bx	lr

08014fd4 <WWDG_DeInit>:
  * @brief  Deinitializes the WWDG peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void WWDG_DeInit(void)
{
 8014fd4:	b580      	push	{r7, lr}
 8014fd6:	af00      	add	r7, sp, #0
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, ENABLE);
 8014fd8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8014fdc:	2101      	movs	r1, #1
 8014fde:	f7fa ff13 	bl	800fe08 <RCC_APB1PeriphResetCmd>
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, DISABLE);
 8014fe2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8014fe6:	2100      	movs	r1, #0
 8014fe8:	f7fa ff0e 	bl	800fe08 <RCC_APB1PeriphResetCmd>
}
 8014fec:	bd80      	pop	{r7, pc}
 8014fee:	bf00      	nop

08014ff0 <WWDG_SetPrescaler>:
  *     @arg WWDG_Prescaler_4: WWDG counter clock = (PCLK1/4096)/4
  *     @arg WWDG_Prescaler_8: WWDG counter clock = (PCLK1/4096)/8
  * @retval None
  */
void WWDG_SetPrescaler(uint32_t WWDG_Prescaler)
{
 8014ff0:	b480      	push	{r7}
 8014ff2:	b085      	sub	sp, #20
 8014ff4:	af00      	add	r7, sp, #0
 8014ff6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8014ff8:	2300      	movs	r3, #0
 8014ffa:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_WWDG_PRESCALER(WWDG_Prescaler));
  /* Clear WDGTB[1:0] bits */
  tmpreg = WWDG->CFR & CFR_WDGTB_MASK;
 8014ffc:	4b08      	ldr	r3, [pc, #32]	; (8015020 <WWDG_SetPrescaler+0x30>)
 8014ffe:	685b      	ldr	r3, [r3, #4]
 8015000:	f423 73c0 	bic.w	r3, r3, #384	; 0x180
 8015004:	60fb      	str	r3, [r7, #12]
  /* Set WDGTB[1:0] bits according to WWDG_Prescaler value */
  tmpreg |= WWDG_Prescaler;
 8015006:	68fa      	ldr	r2, [r7, #12]
 8015008:	687b      	ldr	r3, [r7, #4]
 801500a:	4313      	orrs	r3, r2
 801500c:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  WWDG->CFR = tmpreg;
 801500e:	4b04      	ldr	r3, [pc, #16]	; (8015020 <WWDG_SetPrescaler+0x30>)
 8015010:	68fa      	ldr	r2, [r7, #12]
 8015012:	605a      	str	r2, [r3, #4]
}
 8015014:	3714      	adds	r7, #20
 8015016:	46bd      	mov	sp, r7
 8015018:	f85d 7b04 	ldr.w	r7, [sp], #4
 801501c:	4770      	bx	lr
 801501e:	bf00      	nop
 8015020:	40002c00 	.word	0x40002c00

08015024 <WWDG_SetWindowValue>:
  * @param  WindowValue: specifies the window value to be compared to the downcounter.
  *   This parameter value must be lower than 0x80.
  * @retval None
  */
void WWDG_SetWindowValue(uint8_t WindowValue)
{
 8015024:	b480      	push	{r7}
 8015026:	b085      	sub	sp, #20
 8015028:	af00      	add	r7, sp, #0
 801502a:	4603      	mov	r3, r0
 801502c:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t tmpreg = 0;
 801502e:	2300      	movs	r3, #0
 8015030:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_WWDG_WINDOW_VALUE(WindowValue));
  /* Clear W[6:0] bits */

  tmpreg = WWDG->CFR & CFR_W_MASK;
 8015032:	4b09      	ldr	r3, [pc, #36]	; (8015058 <WWDG_SetWindowValue+0x34>)
 8015034:	685b      	ldr	r3, [r3, #4]
 8015036:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801503a:	60fb      	str	r3, [r7, #12]

  /* Set W[6:0] bits according to WindowValue value */
  tmpreg |= WindowValue & (uint32_t) BIT_MASK;
 801503c:	79fb      	ldrb	r3, [r7, #7]
 801503e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015042:	68fb      	ldr	r3, [r7, #12]
 8015044:	4313      	orrs	r3, r2
 8015046:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  WWDG->CFR = tmpreg;
 8015048:	4b03      	ldr	r3, [pc, #12]	; (8015058 <WWDG_SetWindowValue+0x34>)
 801504a:	68fa      	ldr	r2, [r7, #12]
 801504c:	605a      	str	r2, [r3, #4]
}
 801504e:	3714      	adds	r7, #20
 8015050:	46bd      	mov	sp, r7
 8015052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015056:	4770      	bx	lr
 8015058:	40002c00 	.word	0x40002c00

0801505c <WWDG_EnableIT>:
  * @note   Once enabled this interrupt cannot be disabled except by a system reset.
  * @param  None
  * @retval None
  */
void WWDG_EnableIT(void)
{
 801505c:	b480      	push	{r7}
 801505e:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) CFR_EWI_BB = (uint32_t)ENABLE;
 8015060:	4b03      	ldr	r3, [pc, #12]	; (8015070 <WWDG_EnableIT+0x14>)
 8015062:	2201      	movs	r2, #1
 8015064:	601a      	str	r2, [r3, #0]
}
 8015066:	46bd      	mov	sp, r7
 8015068:	f85d 7b04 	ldr.w	r7, [sp], #4
 801506c:	4770      	bx	lr
 801506e:	bf00      	nop
 8015070:	420580a4 	.word	0x420580a4

08015074 <WWDG_SetCounter>:
  *   This parameter must be a number between 0x40 and 0x7F (to prevent generating
  *   an immediate reset) 
  * @retval None
  */
void WWDG_SetCounter(uint8_t Counter)
{
 8015074:	b480      	push	{r7}
 8015076:	b083      	sub	sp, #12
 8015078:	af00      	add	r7, sp, #0
 801507a:	4603      	mov	r3, r0
 801507c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_WWDG_COUNTER(Counter));
  /* Write to T[6:0] bits to configure the counter value, no need to do
     a read-modify-write; writing a 0 to WDGA bit does nothing */
  WWDG->CR = Counter & BIT_MASK;
 801507e:	4b05      	ldr	r3, [pc, #20]	; (8015094 <WWDG_SetCounter+0x20>)
 8015080:	79fa      	ldrb	r2, [r7, #7]
 8015082:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8015086:	601a      	str	r2, [r3, #0]
}
 8015088:	370c      	adds	r7, #12
 801508a:	46bd      	mov	sp, r7
 801508c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015090:	4770      	bx	lr
 8015092:	bf00      	nop
 8015094:	40002c00 	.word	0x40002c00

08015098 <WWDG_Enable>:
  *   This parameter must be a number between 0x40 and 0x7F (to prevent generating
  *   an immediate reset)
  * @retval None
  */
void WWDG_Enable(uint8_t Counter)
{
 8015098:	b480      	push	{r7}
 801509a:	b083      	sub	sp, #12
 801509c:	af00      	add	r7, sp, #0
 801509e:	4603      	mov	r3, r0
 80150a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_WWDG_COUNTER(Counter));
  WWDG->CR = WWDG_CR_WDGA | Counter;
 80150a2:	4b05      	ldr	r3, [pc, #20]	; (80150b8 <WWDG_Enable+0x20>)
 80150a4:	79fa      	ldrb	r2, [r7, #7]
 80150a6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80150aa:	b2d2      	uxtb	r2, r2
 80150ac:	601a      	str	r2, [r3, #0]
}
 80150ae:	370c      	adds	r7, #12
 80150b0:	46bd      	mov	sp, r7
 80150b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150b6:	4770      	bx	lr
 80150b8:	40002c00 	.word	0x40002c00

080150bc <WWDG_GetFlagStatus>:
  * @brief  Checks whether the Early Wakeup interrupt flag is set or not.
  * @param  None
  * @retval The new state of the Early Wakeup interrupt flag (SET or RESET)
  */
FlagStatus WWDG_GetFlagStatus(void)
{
 80150bc:	b480      	push	{r7}
 80150be:	b083      	sub	sp, #12
 80150c0:	af00      	add	r7, sp, #0
  FlagStatus bitstatus = RESET;
 80150c2:	2300      	movs	r3, #0
 80150c4:	71fb      	strb	r3, [r7, #7]
    
  if ((WWDG->SR) != (uint32_t)RESET)
 80150c6:	4b08      	ldr	r3, [pc, #32]	; (80150e8 <WWDG_GetFlagStatus+0x2c>)
 80150c8:	689b      	ldr	r3, [r3, #8]
 80150ca:	2b00      	cmp	r3, #0
 80150cc:	d002      	beq.n	80150d4 <WWDG_GetFlagStatus+0x18>
  {
    bitstatus = SET;
 80150ce:	2301      	movs	r3, #1
 80150d0:	71fb      	strb	r3, [r7, #7]
 80150d2:	e001      	b.n	80150d8 <WWDG_GetFlagStatus+0x1c>
  }
  else
  {
    bitstatus = RESET;
 80150d4:	2300      	movs	r3, #0
 80150d6:	71fb      	strb	r3, [r7, #7]
  }
  return bitstatus;
 80150d8:	79fb      	ldrb	r3, [r7, #7]
}
 80150da:	4618      	mov	r0, r3
 80150dc:	370c      	adds	r7, #12
 80150de:	46bd      	mov	sp, r7
 80150e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150e4:	4770      	bx	lr
 80150e6:	bf00      	nop
 80150e8:	40002c00 	.word	0x40002c00

080150ec <WWDG_ClearFlag>:
  * @brief  Clears Early Wakeup interrupt flag.
  * @param  None
  * @retval None
  */
void WWDG_ClearFlag(void)
{
 80150ec:	b480      	push	{r7}
 80150ee:	af00      	add	r7, sp, #0
  WWDG->SR = (uint32_t)RESET;
 80150f0:	4b03      	ldr	r3, [pc, #12]	; (8015100 <WWDG_ClearFlag+0x14>)
 80150f2:	2200      	movs	r2, #0
 80150f4:	609a      	str	r2, [r3, #8]
}
 80150f6:	46bd      	mov	sp, r7
 80150f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150fc:	4770      	bx	lr
 80150fe:	bf00      	nop
 8015100:	40002c00 	.word	0x40002c00

08015104 <STM_EVAL_LEDInit>:
  *     @arg LED3
  *     @arg LED4
  * @retval None
  */
void STM_EVAL_LEDInit(Led_TypeDef Led)
{
 8015104:	b580      	push	{r7, lr}
 8015106:	b084      	sub	sp, #16
 8015108:	af00      	add	r7, sp, #0
 801510a:	4603      	mov	r3, r0
 801510c:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStructure;
  
  /* Enable the GPIO_LED Clock */
  RCC_AHB1PeriphClockCmd(GPIO_CLK[Led], ENABLE);
 801510e:	79fa      	ldrb	r2, [r7, #7]
 8015110:	4b10      	ldr	r3, [pc, #64]	; (8015154 <STM_EVAL_LEDInit+0x50>)
 8015112:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015116:	4618      	mov	r0, r3
 8015118:	2101      	movs	r1, #1
 801511a:	f7fa fd85 	bl	800fc28 <RCC_AHB1PeriphClockCmd>

  /* Configure the GPIO_LED pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_PIN[Led];
 801511e:	79fa      	ldrb	r2, [r7, #7]
 8015120:	4b0d      	ldr	r3, [pc, #52]	; (8015158 <STM_EVAL_LEDInit+0x54>)
 8015122:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8015126:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8015128:	2301      	movs	r3, #1
 801512a:	733b      	strb	r3, [r7, #12]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 801512c:	2300      	movs	r3, #0
 801512e:	73bb      	strb	r3, [r7, #14]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8015130:	2301      	movs	r3, #1
 8015132:	73fb      	strb	r3, [r7, #15]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8015134:	2302      	movs	r3, #2
 8015136:	737b      	strb	r3, [r7, #13]
  GPIO_Init(GPIO_PORT[Led], &GPIO_InitStructure);
 8015138:	79fa      	ldrb	r2, [r7, #7]
 801513a:	4b08      	ldr	r3, [pc, #32]	; (801515c <STM_EVAL_LEDInit+0x58>)
 801513c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8015140:	f107 0308 	add.w	r3, r7, #8
 8015144:	4610      	mov	r0, r2
 8015146:	4619      	mov	r1, r3
 8015148:	f7f7 fec6 	bl	800ced8 <GPIO_Init>
}
 801514c:	3710      	adds	r7, #16
 801514e:	46bd      	mov	sp, r7
 8015150:	bd80      	pop	{r7, pc}
 8015152:	bf00      	nop
 8015154:	0801a588 	.word	0x0801a588
 8015158:	0801a584 	.word	0x0801a584
 801515c:	20000088 	.word	0x20000088

08015160 <STM_EVAL_LEDOn>:
  *     @arg LED3
  *     @arg LED4 
  * @retval None
  */
void STM_EVAL_LEDOn(Led_TypeDef Led)
{
 8015160:	b480      	push	{r7}
 8015162:	b083      	sub	sp, #12
 8015164:	af00      	add	r7, sp, #0
 8015166:	4603      	mov	r3, r0
 8015168:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->BSRRL = GPIO_PIN[Led];
 801516a:	79fa      	ldrb	r2, [r7, #7]
 801516c:	4b06      	ldr	r3, [pc, #24]	; (8015188 <STM_EVAL_LEDOn+0x28>)
 801516e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015172:	79f9      	ldrb	r1, [r7, #7]
 8015174:	4a05      	ldr	r2, [pc, #20]	; (801518c <STM_EVAL_LEDOn+0x2c>)
 8015176:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 801517a:	831a      	strh	r2, [r3, #24]
}
 801517c:	370c      	adds	r7, #12
 801517e:	46bd      	mov	sp, r7
 8015180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015184:	4770      	bx	lr
 8015186:	bf00      	nop
 8015188:	20000088 	.word	0x20000088
 801518c:	0801a584 	.word	0x0801a584

08015190 <STM_EVAL_LEDOff>:
  *     @arg LED3
  *     @arg LED4
  * @retval None
  */
void STM_EVAL_LEDOff(Led_TypeDef Led)
{
 8015190:	b480      	push	{r7}
 8015192:	b083      	sub	sp, #12
 8015194:	af00      	add	r7, sp, #0
 8015196:	4603      	mov	r3, r0
 8015198:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->BSRRH = GPIO_PIN[Led];  
 801519a:	79fa      	ldrb	r2, [r7, #7]
 801519c:	4b06      	ldr	r3, [pc, #24]	; (80151b8 <STM_EVAL_LEDOff+0x28>)
 801519e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80151a2:	79f9      	ldrb	r1, [r7, #7]
 80151a4:	4a05      	ldr	r2, [pc, #20]	; (80151bc <STM_EVAL_LEDOff+0x2c>)
 80151a6:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 80151aa:	835a      	strh	r2, [r3, #26]
}
 80151ac:	370c      	adds	r7, #12
 80151ae:	46bd      	mov	sp, r7
 80151b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151b4:	4770      	bx	lr
 80151b6:	bf00      	nop
 80151b8:	20000088 	.word	0x20000088
 80151bc:	0801a584 	.word	0x0801a584

080151c0 <STM_EVAL_LEDToggle>:
  *     @arg LED3
  *     @arg LED4  
  * @retval None
  */
void STM_EVAL_LEDToggle(Led_TypeDef Led)
{
 80151c0:	b480      	push	{r7}
 80151c2:	b083      	sub	sp, #12
 80151c4:	af00      	add	r7, sp, #0
 80151c6:	4603      	mov	r3, r0
 80151c8:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->ODR ^= GPIO_PIN[Led];
 80151ca:	79fa      	ldrb	r2, [r7, #7]
 80151cc:	4b09      	ldr	r3, [pc, #36]	; (80151f4 <STM_EVAL_LEDToggle+0x34>)
 80151ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80151d2:	79f9      	ldrb	r1, [r7, #7]
 80151d4:	4a07      	ldr	r2, [pc, #28]	; (80151f4 <STM_EVAL_LEDToggle+0x34>)
 80151d6:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80151da:	6951      	ldr	r1, [r2, #20]
 80151dc:	79f8      	ldrb	r0, [r7, #7]
 80151de:	4a06      	ldr	r2, [pc, #24]	; (80151f8 <STM_EVAL_LEDToggle+0x38>)
 80151e0:	f832 2010 	ldrh.w	r2, [r2, r0, lsl #1]
 80151e4:	404a      	eors	r2, r1
 80151e6:	615a      	str	r2, [r3, #20]
}
 80151e8:	370c      	adds	r7, #12
 80151ea:	46bd      	mov	sp, r7
 80151ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151f0:	4770      	bx	lr
 80151f2:	bf00      	nop
 80151f4:	20000088 	.word	0x20000088
 80151f8:	0801a584 	.word	0x0801a584

080151fc <STM_EVAL_PBInit>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void STM_EVAL_PBInit(Button_TypeDef Button, ButtonMode_TypeDef Button_Mode)
{
 80151fc:	b580      	push	{r7, lr}
 80151fe:	b088      	sub	sp, #32
 8015200:	af00      	add	r7, sp, #0
 8015202:	4602      	mov	r2, r0
 8015204:	460b      	mov	r3, r1
 8015206:	71fa      	strb	r2, [r7, #7]
 8015208:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStructure;
  EXTI_InitTypeDef EXTI_InitStructure;
  NVIC_InitTypeDef NVIC_InitStructure;

  /* Enable the BUTTON Clock */
  RCC_AHB1PeriphClockCmd(BUTTON_CLK[Button], ENABLE);
 801520a:	2301      	movs	r3, #1
 801520c:	4618      	mov	r0, r3
 801520e:	2101      	movs	r1, #1
 8015210:	f7fa fd0a 	bl	800fc28 <RCC_AHB1PeriphClockCmd>
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 8015214:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8015218:	2101      	movs	r1, #1
 801521a:	f7fa fd7d 	bl	800fd18 <RCC_APB2PeriphClockCmd>

  /* Configure Button pin as input */
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 801521e:	2300      	movs	r3, #0
 8015220:	773b      	strb	r3, [r7, #28]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;
 8015222:	2302      	movs	r3, #2
 8015224:	77fb      	strb	r3, [r7, #31]
  GPIO_InitStructure.GPIO_Pin = BUTTON_PIN[Button];
 8015226:	2301      	movs	r3, #1
 8015228:	61bb      	str	r3, [r7, #24]
  GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStructure);
 801522a:	79fa      	ldrb	r2, [r7, #7]
 801522c:	4b17      	ldr	r3, [pc, #92]	; (801528c <STM_EVAL_PBInit+0x90>)
 801522e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8015232:	f107 0318 	add.w	r3, r7, #24
 8015236:	4610      	mov	r0, r2
 8015238:	4619      	mov	r1, r3
 801523a:	f7f7 fe4d 	bl	800ced8 <GPIO_Init>

  if (Button_Mode == BUTTON_MODE_EXTI)
 801523e:	79bb      	ldrb	r3, [r7, #6]
 8015240:	2b01      	cmp	r3, #1
 8015242:	d11f      	bne.n	8015284 <STM_EVAL_PBInit+0x88>
  {
    /* Connect Button EXTI Line to Button GPIO Pin */
    SYSCFG_EXTILineConfig(BUTTON_PORT_SOURCE[Button], BUTTON_PIN_SOURCE[Button]);
 8015244:	2200      	movs	r2, #0
 8015246:	2300      	movs	r3, #0
 8015248:	4610      	mov	r0, r2
 801524a:	4619      	mov	r1, r3
 801524c:	f7fd fbe0 	bl	8012a10 <SYSCFG_EXTILineConfig>

    /* Configure Button EXTI line */
    EXTI_InitStructure.EXTI_Line = BUTTON_EXTI_LINE[Button];
 8015250:	2301      	movs	r3, #1
 8015252:	613b      	str	r3, [r7, #16]
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 8015254:	2300      	movs	r3, #0
 8015256:	753b      	strb	r3, [r7, #20]
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;  
 8015258:	2308      	movs	r3, #8
 801525a:	757b      	strb	r3, [r7, #21]
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 801525c:	2301      	movs	r3, #1
 801525e:	75bb      	strb	r3, [r7, #22]
    EXTI_Init(&EXTI_InitStructure);
 8015260:	f107 0310 	add.w	r3, r7, #16
 8015264:	4618      	mov	r0, r3
 8015266:	f7f6 f87f 	bl	800b368 <EXTI_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    NVIC_InitStructure.NVIC_IRQChannel = BUTTON_IRQn[Button];
 801526a:	2306      	movs	r3, #6
 801526c:	733b      	strb	r3, [r7, #12]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
 801526e:	230f      	movs	r3, #15
 8015270:	737b      	strb	r3, [r7, #13]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
 8015272:	230f      	movs	r3, #15
 8015274:	73bb      	strb	r3, [r7, #14]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8015276:	2301      	movs	r3, #1
 8015278:	73fb      	strb	r3, [r7, #15]

    NVIC_Init(&NVIC_InitStructure); 
 801527a:	f107 030c 	add.w	r3, r7, #12
 801527e:	4618      	mov	r0, r3
 8015280:	f7ef ff84 	bl	800518c <NVIC_Init>
  }
}
 8015284:	3720      	adds	r7, #32
 8015286:	46bd      	mov	sp, r7
 8015288:	bd80      	pop	{r7, pc}
 801528a:	bf00      	nop
 801528c:	20000090 	.word	0x20000090

08015290 <STM_EVAL_PBGetState>:
  * @param  Button: Specifies the Button to be checked.
  *   This parameter should be: BUTTON_USER  
  * @retval The Button GPIO pin value.
  */
uint32_t STM_EVAL_PBGetState(Button_TypeDef Button)
{
 8015290:	b580      	push	{r7, lr}
 8015292:	b082      	sub	sp, #8
 8015294:	af00      	add	r7, sp, #0
 8015296:	4603      	mov	r3, r0
 8015298:	71fb      	strb	r3, [r7, #7]
  return GPIO_ReadInputDataBit(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 801529a:	79fa      	ldrb	r2, [r7, #7]
 801529c:	4b06      	ldr	r3, [pc, #24]	; (80152b8 <STM_EVAL_PBGetState+0x28>)
 801529e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80152a2:	2301      	movs	r3, #1
 80152a4:	4610      	mov	r0, r2
 80152a6:	4619      	mov	r1, r3
 80152a8:	f7f7 fee0 	bl	800d06c <GPIO_ReadInputDataBit>
 80152ac:	4603      	mov	r3, r0
}
 80152ae:	4618      	mov	r0, r3
 80152b0:	3708      	adds	r7, #8
 80152b2:	46bd      	mov	sp, r7
 80152b4:	bd80      	pop	{r7, pc}
 80152b6:	bf00      	nop
 80152b8:	20000090 	.word	0x20000090

080152bc <sEE_LowLevel_DeInit>:
  * @brief  DeInitializes peripherals used by the I2C EEPROM driver.
  * @param  None
  * @retval None
  */
void sEE_LowLevel_DeInit(void)
{
 80152bc:	b580      	push	{r7, lr}
 80152be:	b082      	sub	sp, #8
 80152c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStructure; 
   
  /* sEE_I2C Peripheral Disable */
  I2C_Cmd(sEE_I2C, DISABLE);
 80152c2:	4826      	ldr	r0, [pc, #152]	; (801535c <sEE_LowLevel_DeInit+0xa0>)
 80152c4:	2100      	movs	r1, #0
 80152c6:	f7f8 fdef 	bl	800dea8 <I2C_Cmd>
 
  /* sEE_I2C DeInit */
  I2C_DeInit(sEE_I2C);
 80152ca:	4824      	ldr	r0, [pc, #144]	; (801535c <sEE_LowLevel_DeInit+0xa0>)
 80152cc:	f7f8 fcd2 	bl	800dc74 <I2C_DeInit>

  /*!< sEE_I2C Periph clock disable */
  RCC_APB1PeriphClockCmd(sEE_I2C_CLK, DISABLE);
 80152d0:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80152d4:	2100      	movs	r1, #0
 80152d6:	f7fa fd01 	bl	800fcdc <RCC_APB1PeriphClockCmd>
    
  /*!< GPIO configuration */  
  /*!< Configure sEE_I2C pins: SCL */
  GPIO_InitStructure.GPIO_Pin = sEE_I2C_SCL_PIN;
 80152da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80152de:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 80152e0:	2300      	movs	r3, #0
 80152e2:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80152e4:	2300      	movs	r3, #0
 80152e6:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(sEE_I2C_SCL_GPIO_PORT, &GPIO_InitStructure);
 80152e8:	463b      	mov	r3, r7
 80152ea:	481d      	ldr	r0, [pc, #116]	; (8015360 <sEE_LowLevel_DeInit+0xa4>)
 80152ec:	4619      	mov	r1, r3
 80152ee:	f7f7 fdf3 	bl	800ced8 <GPIO_Init>

  /*!< Configure sEE_I2C pins: SDA */
  GPIO_InitStructure.GPIO_Pin = sEE_I2C_SDA_PIN;
 80152f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80152f6:	603b      	str	r3, [r7, #0]
  GPIO_Init(sEE_I2C_SDA_GPIO_PORT, &GPIO_InitStructure);
 80152f8:	463b      	mov	r3, r7
 80152fa:	481a      	ldr	r0, [pc, #104]	; (8015364 <sEE_LowLevel_DeInit+0xa8>)
 80152fc:	4619      	mov	r1, r3
 80152fe:	f7f7 fdeb 	bl	800ced8 <GPIO_Init>

  /* Configure and enable I2C DMA TX Stream interrupt */
  NVIC_InitStructure.NVIC_IRQChannel = sEE_I2C_DMA_TX_IRQn;
 8015302:	4b19      	ldr	r3, [pc, #100]	; (8015368 <sEE_LowLevel_DeInit+0xac>)
 8015304:	220f      	movs	r2, #15
 8015306:	701a      	strb	r2, [r3, #0]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = sEE_I2C_DMA_PREPRIO;
 8015308:	4b17      	ldr	r3, [pc, #92]	; (8015368 <sEE_LowLevel_DeInit+0xac>)
 801530a:	2200      	movs	r2, #0
 801530c:	705a      	strb	r2, [r3, #1]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = sEE_I2C_DMA_SUBPRIO;
 801530e:	4b16      	ldr	r3, [pc, #88]	; (8015368 <sEE_LowLevel_DeInit+0xac>)
 8015310:	2200      	movs	r2, #0
 8015312:	709a      	strb	r2, [r3, #2]
  NVIC_InitStructure.NVIC_IRQChannelCmd = DISABLE;
 8015314:	4b14      	ldr	r3, [pc, #80]	; (8015368 <sEE_LowLevel_DeInit+0xac>)
 8015316:	2200      	movs	r2, #0
 8015318:	70da      	strb	r2, [r3, #3]
  NVIC_Init(&NVIC_InitStructure);
 801531a:	4813      	ldr	r0, [pc, #76]	; (8015368 <sEE_LowLevel_DeInit+0xac>)
 801531c:	f7ef ff36 	bl	800518c <NVIC_Init>

  /* Configure and enable I2C DMA RX Stream interrupt */
  NVIC_InitStructure.NVIC_IRQChannel = sEE_I2C_DMA_RX_IRQn;
 8015320:	4b11      	ldr	r3, [pc, #68]	; (8015368 <sEE_LowLevel_DeInit+0xac>)
 8015322:	220d      	movs	r2, #13
 8015324:	701a      	strb	r2, [r3, #0]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = sEE_I2C_DMA_PREPRIO;
 8015326:	4b10      	ldr	r3, [pc, #64]	; (8015368 <sEE_LowLevel_DeInit+0xac>)
 8015328:	2200      	movs	r2, #0
 801532a:	705a      	strb	r2, [r3, #1]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = sEE_I2C_DMA_SUBPRIO;
 801532c:	4b0e      	ldr	r3, [pc, #56]	; (8015368 <sEE_LowLevel_DeInit+0xac>)
 801532e:	2200      	movs	r2, #0
 8015330:	709a      	strb	r2, [r3, #2]
  NVIC_Init(&NVIC_InitStructure);   
 8015332:	480d      	ldr	r0, [pc, #52]	; (8015368 <sEE_LowLevel_DeInit+0xac>)
 8015334:	f7ef ff2a 	bl	800518c <NVIC_Init>
  
  /* Disable and Deinitialize the DMA Streams */
  DMA_Cmd(sEE_I2C_DMA_STREAM_TX, DISABLE);
 8015338:	480c      	ldr	r0, [pc, #48]	; (801536c <sEE_LowLevel_DeInit+0xb0>)
 801533a:	2100      	movs	r1, #0
 801533c:	f7f5 fdd2 	bl	800aee4 <DMA_Cmd>
  DMA_Cmd(sEE_I2C_DMA_STREAM_RX, DISABLE);
 8015340:	480b      	ldr	r0, [pc, #44]	; (8015370 <sEE_LowLevel_DeInit+0xb4>)
 8015342:	2100      	movs	r1, #0
 8015344:	f7f5 fdce 	bl	800aee4 <DMA_Cmd>
  DMA_DeInit(sEE_I2C_DMA_STREAM_TX);
 8015348:	4808      	ldr	r0, [pc, #32]	; (801536c <sEE_LowLevel_DeInit+0xb0>)
 801534a:	f7f5 fc6d 	bl	800ac28 <DMA_DeInit>
  DMA_DeInit(sEE_I2C_DMA_STREAM_RX);
 801534e:	4808      	ldr	r0, [pc, #32]	; (8015370 <sEE_LowLevel_DeInit+0xb4>)
 8015350:	f7f5 fc6a 	bl	800ac28 <DMA_DeInit>
}
 8015354:	3708      	adds	r7, #8
 8015356:	46bd      	mov	sp, r7
 8015358:	bd80      	pop	{r7, pc}
 801535a:	bf00      	nop
 801535c:	40005c00 	.word	0x40005c00
 8015360:	40020000 	.word	0x40020000
 8015364:	40020800 	.word	0x40020800
 8015368:	20005344 	.word	0x20005344
 801536c:	40026070 	.word	0x40026070
 8015370:	40026040 	.word	0x40026040

08015374 <sEE_LowLevel_Init>:
  * @brief  Initializes peripherals used by the I2C EEPROM driver.
  * @param  None
  * @retval None
  */
void sEE_LowLevel_Init(void)
{
 8015374:	b580      	push	{r7, lr}
 8015376:	b082      	sub	sp, #8
 8015378:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStructure; 
   
  /*!< sEE_I2C Periph clock enable */
  RCC_APB1PeriphClockCmd(sEE_I2C_CLK, ENABLE);
 801537a:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 801537e:	2101      	movs	r1, #1
 8015380:	f7fa fcac 	bl	800fcdc <RCC_APB1PeriphClockCmd>
  
  /*!< sEE_I2C_SCL_GPIO_CLK and sEE_I2C_SDA_GPIO_CLK Periph clock enable */
  RCC_AHB1PeriphClockCmd(sEE_I2C_SCL_GPIO_CLK | sEE_I2C_SDA_GPIO_CLK, ENABLE);
 8015384:	2005      	movs	r0, #5
 8015386:	2101      	movs	r1, #1
 8015388:	f7fa fc4e 	bl	800fc28 <RCC_AHB1PeriphClockCmd>
  
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 801538c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8015390:	2101      	movs	r1, #1
 8015392:	f7fa fcc1 	bl	800fd18 <RCC_APB2PeriphClockCmd>
  
  /* Reset sEE_I2C IP */
  RCC_APB1PeriphResetCmd(sEE_I2C_CLK, ENABLE);  
 8015396:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 801539a:	2101      	movs	r1, #1
 801539c:	f7fa fd34 	bl	800fe08 <RCC_APB1PeriphResetCmd>
  /* Release reset signal of sEE_I2C IP */
  RCC_APB1PeriphResetCmd(sEE_I2C_CLK, DISABLE);
 80153a0:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80153a4:	2100      	movs	r1, #0
 80153a6:	f7fa fd2f 	bl	800fe08 <RCC_APB1PeriphResetCmd>
    
  /*!< GPIO configuration */  
  /*!< Configure sEE_I2C pins: SCL */   
  GPIO_InitStructure.GPIO_Pin = sEE_I2C_SCL_PIN;
 80153aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80153ae:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 80153b0:	2302      	movs	r3, #2
 80153b2:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80153b4:	2302      	movs	r3, #2
 80153b6:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 80153b8:	2301      	movs	r3, #1
 80153ba:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 80153bc:	2300      	movs	r3, #0
 80153be:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(sEE_I2C_SCL_GPIO_PORT, &GPIO_InitStructure);
 80153c0:	463b      	mov	r3, r7
 80153c2:	4849      	ldr	r0, [pc, #292]	; (80154e8 <sEE_LowLevel_Init+0x174>)
 80153c4:	4619      	mov	r1, r3
 80153c6:	f7f7 fd87 	bl	800ced8 <GPIO_Init>

  /*!< Configure sEE_I2C pins: SDA */
  GPIO_InitStructure.GPIO_Pin = sEE_I2C_SDA_PIN;
 80153ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80153ce:	603b      	str	r3, [r7, #0]
  GPIO_Init(sEE_I2C_SDA_GPIO_PORT, &GPIO_InitStructure);
 80153d0:	463b      	mov	r3, r7
 80153d2:	4846      	ldr	r0, [pc, #280]	; (80154ec <sEE_LowLevel_Init+0x178>)
 80153d4:	4619      	mov	r1, r3
 80153d6:	f7f7 fd7f 	bl	800ced8 <GPIO_Init>

  /* Connect PXx to I2C_SCL*/
  GPIO_PinAFConfig(sEE_I2C_SCL_GPIO_PORT, sEE_I2C_SCL_SOURCE, sEE_I2C_SCL_AF);
 80153da:	4843      	ldr	r0, [pc, #268]	; (80154e8 <sEE_LowLevel_Init+0x174>)
 80153dc:	2108      	movs	r1, #8
 80153de:	2204      	movs	r2, #4
 80153e0:	f7f7 fee8 	bl	800d1b4 <GPIO_PinAFConfig>

  /* Connect PXx to I2C_SDA*/
  GPIO_PinAFConfig(sEE_I2C_SDA_GPIO_PORT, sEE_I2C_SDA_SOURCE, sEE_I2C_SDA_AF);  
 80153e4:	4841      	ldr	r0, [pc, #260]	; (80154ec <sEE_LowLevel_Init+0x178>)
 80153e6:	2109      	movs	r1, #9
 80153e8:	2204      	movs	r2, #4
 80153ea:	f7f7 fee3 	bl	800d1b4 <GPIO_PinAFConfig>
  
  /* Configure and enable I2C DMA TX Channel interrupt */
  NVIC_InitStructure.NVIC_IRQChannel = sEE_I2C_DMA_TX_IRQn;
 80153ee:	4b40      	ldr	r3, [pc, #256]	; (80154f0 <sEE_LowLevel_Init+0x17c>)
 80153f0:	220f      	movs	r2, #15
 80153f2:	701a      	strb	r2, [r3, #0]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = sEE_I2C_DMA_PREPRIO;
 80153f4:	4b3e      	ldr	r3, [pc, #248]	; (80154f0 <sEE_LowLevel_Init+0x17c>)
 80153f6:	2200      	movs	r2, #0
 80153f8:	705a      	strb	r2, [r3, #1]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = sEE_I2C_DMA_SUBPRIO;
 80153fa:	4b3d      	ldr	r3, [pc, #244]	; (80154f0 <sEE_LowLevel_Init+0x17c>)
 80153fc:	2200      	movs	r2, #0
 80153fe:	709a      	strb	r2, [r3, #2]
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8015400:	4b3b      	ldr	r3, [pc, #236]	; (80154f0 <sEE_LowLevel_Init+0x17c>)
 8015402:	2201      	movs	r2, #1
 8015404:	70da      	strb	r2, [r3, #3]
  NVIC_Init(&NVIC_InitStructure);
 8015406:	483a      	ldr	r0, [pc, #232]	; (80154f0 <sEE_LowLevel_Init+0x17c>)
 8015408:	f7ef fec0 	bl	800518c <NVIC_Init>

  /* Configure and enable I2C DMA RX Channel interrupt */
  NVIC_InitStructure.NVIC_IRQChannel = sEE_I2C_DMA_RX_IRQn;
 801540c:	4b38      	ldr	r3, [pc, #224]	; (80154f0 <sEE_LowLevel_Init+0x17c>)
 801540e:	220d      	movs	r2, #13
 8015410:	701a      	strb	r2, [r3, #0]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = sEE_I2C_DMA_PREPRIO;
 8015412:	4b37      	ldr	r3, [pc, #220]	; (80154f0 <sEE_LowLevel_Init+0x17c>)
 8015414:	2200      	movs	r2, #0
 8015416:	705a      	strb	r2, [r3, #1]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = sEE_I2C_DMA_SUBPRIO;
 8015418:	4b35      	ldr	r3, [pc, #212]	; (80154f0 <sEE_LowLevel_Init+0x17c>)
 801541a:	2200      	movs	r2, #0
 801541c:	709a      	strb	r2, [r3, #2]
  NVIC_Init(&NVIC_InitStructure);  
 801541e:	4834      	ldr	r0, [pc, #208]	; (80154f0 <sEE_LowLevel_Init+0x17c>)
 8015420:	f7ef feb4 	bl	800518c <NVIC_Init>
  
  /*!< I2C DMA TX and RX channels configuration */
  /* Enable the DMA clock */
  RCC_AHB1PeriphClockCmd(sEE_I2C_DMA_CLK, ENABLE);
 8015424:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8015428:	2101      	movs	r1, #1
 801542a:	f7fa fbfd 	bl	800fc28 <RCC_AHB1PeriphClockCmd>
  
  /* Clear any pending flag on Rx Stream  */
  DMA_ClearFlag(sEE_I2C_DMA_STREAM_TX, sEE_TX_DMA_FLAG_FEIF | sEE_TX_DMA_FLAG_DMEIF | sEE_TX_DMA_FLAG_TEIF | \
 801542e:	4831      	ldr	r0, [pc, #196]	; (80154f4 <sEE_LowLevel_Init+0x180>)
 8015430:	4931      	ldr	r1, [pc, #196]	; (80154f8 <sEE_LowLevel_Init+0x184>)
 8015432:	f7f5 fe91 	bl	800b158 <DMA_ClearFlag>
                                       sEE_TX_DMA_FLAG_HTIF | sEE_TX_DMA_FLAG_TCIF);
  /* Disable the EE I2C Tx DMA stream */
  DMA_Cmd(sEE_I2C_DMA_STREAM_TX, DISABLE);
 8015436:	482f      	ldr	r0, [pc, #188]	; (80154f4 <sEE_LowLevel_Init+0x180>)
 8015438:	2100      	movs	r1, #0
 801543a:	f7f5 fd53 	bl	800aee4 <DMA_Cmd>
  /* Configure the DMA stream for the EE I2C peripheral TX direction */
  DMA_DeInit(sEE_I2C_DMA_STREAM_TX);
 801543e:	482d      	ldr	r0, [pc, #180]	; (80154f4 <sEE_LowLevel_Init+0x180>)
 8015440:	f7f5 fbf2 	bl	800ac28 <DMA_DeInit>
  sEEDMA_InitStructure.DMA_Channel = sEE_I2C_DMA_CHANNEL;
 8015444:	4b2d      	ldr	r3, [pc, #180]	; (80154fc <sEE_LowLevel_Init+0x188>)
 8015446:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 801544a:	601a      	str	r2, [r3, #0]
  sEEDMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)sEE_I2C_DR_Address;
 801544c:	4b2b      	ldr	r3, [pc, #172]	; (80154fc <sEE_LowLevel_Init+0x188>)
 801544e:	4a2c      	ldr	r2, [pc, #176]	; (8015500 <sEE_LowLevel_Init+0x18c>)
 8015450:	605a      	str	r2, [r3, #4]
  sEEDMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)0;    /* This parameter will be configured durig communication */;
 8015452:	4b2a      	ldr	r3, [pc, #168]	; (80154fc <sEE_LowLevel_Init+0x188>)
 8015454:	2200      	movs	r2, #0
 8015456:	609a      	str	r2, [r3, #8]
  sEEDMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral; /* This parameter will be configured durig communication */
 8015458:	4b28      	ldr	r3, [pc, #160]	; (80154fc <sEE_LowLevel_Init+0x188>)
 801545a:	2240      	movs	r2, #64	; 0x40
 801545c:	60da      	str	r2, [r3, #12]
  sEEDMA_InitStructure.DMA_BufferSize = 0xFFFF;              /* This parameter will be configured durig communication */
 801545e:	4b27      	ldr	r3, [pc, #156]	; (80154fc <sEE_LowLevel_Init+0x188>)
 8015460:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015464:	611a      	str	r2, [r3, #16]
  sEEDMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8015466:	4b25      	ldr	r3, [pc, #148]	; (80154fc <sEE_LowLevel_Init+0x188>)
 8015468:	2200      	movs	r2, #0
 801546a:	615a      	str	r2, [r3, #20]
  sEEDMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 801546c:	4b23      	ldr	r3, [pc, #140]	; (80154fc <sEE_LowLevel_Init+0x188>)
 801546e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8015472:	619a      	str	r2, [r3, #24]
  sEEDMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 8015474:	4b21      	ldr	r3, [pc, #132]	; (80154fc <sEE_LowLevel_Init+0x188>)
 8015476:	2200      	movs	r2, #0
 8015478:	61da      	str	r2, [r3, #28]
  sEEDMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 801547a:	4b20      	ldr	r3, [pc, #128]	; (80154fc <sEE_LowLevel_Init+0x188>)
 801547c:	2200      	movs	r2, #0
 801547e:	621a      	str	r2, [r3, #32]
  sEEDMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
 8015480:	4b1e      	ldr	r3, [pc, #120]	; (80154fc <sEE_LowLevel_Init+0x188>)
 8015482:	2200      	movs	r2, #0
 8015484:	625a      	str	r2, [r3, #36]	; 0x24
  sEEDMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
 8015486:	4b1d      	ldr	r3, [pc, #116]	; (80154fc <sEE_LowLevel_Init+0x188>)
 8015488:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 801548c:	629a      	str	r2, [r3, #40]	; 0x28
  sEEDMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Enable;
 801548e:	4b1b      	ldr	r3, [pc, #108]	; (80154fc <sEE_LowLevel_Init+0x188>)
 8015490:	2204      	movs	r2, #4
 8015492:	62da      	str	r2, [r3, #44]	; 0x2c
  sEEDMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_Full;
 8015494:	4b19      	ldr	r3, [pc, #100]	; (80154fc <sEE_LowLevel_Init+0x188>)
 8015496:	2203      	movs	r2, #3
 8015498:	631a      	str	r2, [r3, #48]	; 0x30
  sEEDMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
 801549a:	4b18      	ldr	r3, [pc, #96]	; (80154fc <sEE_LowLevel_Init+0x188>)
 801549c:	2200      	movs	r2, #0
 801549e:	635a      	str	r2, [r3, #52]	; 0x34
  sEEDMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 80154a0:	4b16      	ldr	r3, [pc, #88]	; (80154fc <sEE_LowLevel_Init+0x188>)
 80154a2:	2200      	movs	r2, #0
 80154a4:	639a      	str	r2, [r3, #56]	; 0x38
  DMA_Init(sEE_I2C_DMA_STREAM_TX, &sEEDMA_InitStructure);
 80154a6:	4813      	ldr	r0, [pc, #76]	; (80154f4 <sEE_LowLevel_Init+0x180>)
 80154a8:	4914      	ldr	r1, [pc, #80]	; (80154fc <sEE_LowLevel_Init+0x188>)
 80154aa:	f7f5 fc8f 	bl	800adcc <DMA_Init>

  /* Clear any pending flag on Rx Stream */
  DMA_ClearFlag(sEE_I2C_DMA_STREAM_RX, sEE_RX_DMA_FLAG_FEIF | sEE_RX_DMA_FLAG_DMEIF | sEE_RX_DMA_FLAG_TEIF | \
 80154ae:	4815      	ldr	r0, [pc, #84]	; (8015504 <sEE_LowLevel_Init+0x190>)
 80154b0:	4915      	ldr	r1, [pc, #84]	; (8015508 <sEE_LowLevel_Init+0x194>)
 80154b2:	f7f5 fe51 	bl	800b158 <DMA_ClearFlag>
                                       sEE_RX_DMA_FLAG_HTIF | sEE_RX_DMA_FLAG_TCIF);
  /* Disable the EE I2C DMA Rx stream */
  DMA_Cmd(sEE_I2C_DMA_STREAM_RX, DISABLE);
 80154b6:	4813      	ldr	r0, [pc, #76]	; (8015504 <sEE_LowLevel_Init+0x190>)
 80154b8:	2100      	movs	r1, #0
 80154ba:	f7f5 fd13 	bl	800aee4 <DMA_Cmd>
  /* Configure the DMA stream for the EE I2C peripheral RX direction */
  DMA_DeInit(sEE_I2C_DMA_STREAM_RX);
 80154be:	4811      	ldr	r0, [pc, #68]	; (8015504 <sEE_LowLevel_Init+0x190>)
 80154c0:	f7f5 fbb2 	bl	800ac28 <DMA_DeInit>
  DMA_Init(sEE_I2C_DMA_STREAM_RX, &sEEDMA_InitStructure);
 80154c4:	480f      	ldr	r0, [pc, #60]	; (8015504 <sEE_LowLevel_Init+0x190>)
 80154c6:	490d      	ldr	r1, [pc, #52]	; (80154fc <sEE_LowLevel_Init+0x188>)
 80154c8:	f7f5 fc80 	bl	800adcc <DMA_Init>
  
  /* Enable the DMA Channels Interrupts */
  DMA_ITConfig(sEE_I2C_DMA_STREAM_TX, DMA_IT_TC, ENABLE);
 80154cc:	4809      	ldr	r0, [pc, #36]	; (80154f4 <sEE_LowLevel_Init+0x180>)
 80154ce:	2110      	movs	r1, #16
 80154d0:	2201      	movs	r2, #1
 80154d2:	f7f5 fe6f 	bl	800b1b4 <DMA_ITConfig>
  DMA_ITConfig(sEE_I2C_DMA_STREAM_RX, DMA_IT_TC, ENABLE);      
 80154d6:	480b      	ldr	r0, [pc, #44]	; (8015504 <sEE_LowLevel_Init+0x190>)
 80154d8:	2110      	movs	r1, #16
 80154da:	2201      	movs	r2, #1
 80154dc:	f7f5 fe6a 	bl	800b1b4 <DMA_ITConfig>
}
 80154e0:	3708      	adds	r7, #8
 80154e2:	46bd      	mov	sp, r7
 80154e4:	bd80      	pop	{r7, pc}
 80154e6:	bf00      	nop
 80154e8:	40020000 	.word	0x40020000
 80154ec:	40020800 	.word	0x40020800
 80154f0:	20005344 	.word	0x20005344
 80154f4:	40026070 	.word	0x40026070
 80154f8:	2000003d 	.word	0x2000003d
 80154fc:	20005308 	.word	0x20005308
 8015500:	40005c10 	.word	0x40005c10
 8015504:	40026040 	.word	0x40026040
 8015508:	103d0000 	.word	0x103d0000

0801550c <sEE_LowLevel_DMAConfig>:
  * @brief  Initializes DMA channel used by the I2C EEPROM driver.
  * @param  None
  * @retval None
  */
void sEE_LowLevel_DMAConfig(uint32_t pBuffer, uint32_t BufferSize, uint32_t Direction)
{ 
 801550c:	b580      	push	{r7, lr}
 801550e:	b084      	sub	sp, #16
 8015510:	af00      	add	r7, sp, #0
 8015512:	60f8      	str	r0, [r7, #12]
 8015514:	60b9      	str	r1, [r7, #8]
 8015516:	607a      	str	r2, [r7, #4]
  /* Initialize the DMA with the new parameters */
  if (Direction == sEE_DIRECTION_TX)
 8015518:	687b      	ldr	r3, [r7, #4]
 801551a:	2b00      	cmp	r3, #0
 801551c:	d10d      	bne.n	801553a <sEE_LowLevel_DMAConfig+0x2e>
  {
    /* Configure the DMA Tx Stream with the buffer address and the buffer size */
    sEEDMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)pBuffer;
 801551e:	4b0f      	ldr	r3, [pc, #60]	; (801555c <sEE_LowLevel_DMAConfig+0x50>)
 8015520:	68fa      	ldr	r2, [r7, #12]
 8015522:	609a      	str	r2, [r3, #8]
    sEEDMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;    
 8015524:	4b0d      	ldr	r3, [pc, #52]	; (801555c <sEE_LowLevel_DMAConfig+0x50>)
 8015526:	2240      	movs	r2, #64	; 0x40
 8015528:	60da      	str	r2, [r3, #12]
    sEEDMA_InitStructure.DMA_BufferSize = (uint32_t)BufferSize;  
 801552a:	4b0c      	ldr	r3, [pc, #48]	; (801555c <sEE_LowLevel_DMAConfig+0x50>)
 801552c:	68ba      	ldr	r2, [r7, #8]
 801552e:	611a      	str	r2, [r3, #16]
    DMA_Init(sEE_I2C_DMA_STREAM_TX, &sEEDMA_InitStructure);  
 8015530:	480b      	ldr	r0, [pc, #44]	; (8015560 <sEE_LowLevel_DMAConfig+0x54>)
 8015532:	490a      	ldr	r1, [pc, #40]	; (801555c <sEE_LowLevel_DMAConfig+0x50>)
 8015534:	f7f5 fc4a 	bl	800adcc <DMA_Init>
 8015538:	e00c      	b.n	8015554 <sEE_LowLevel_DMAConfig+0x48>
  }
  else
  { 
    /* Configure the DMA Rx Stream with the buffer address and the buffer size */
    sEEDMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)pBuffer;
 801553a:	4b08      	ldr	r3, [pc, #32]	; (801555c <sEE_LowLevel_DMAConfig+0x50>)
 801553c:	68fa      	ldr	r2, [r7, #12]
 801553e:	609a      	str	r2, [r3, #8]
    sEEDMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
 8015540:	4b06      	ldr	r3, [pc, #24]	; (801555c <sEE_LowLevel_DMAConfig+0x50>)
 8015542:	2200      	movs	r2, #0
 8015544:	60da      	str	r2, [r3, #12]
    sEEDMA_InitStructure.DMA_BufferSize = (uint32_t)BufferSize;      
 8015546:	4b05      	ldr	r3, [pc, #20]	; (801555c <sEE_LowLevel_DMAConfig+0x50>)
 8015548:	68ba      	ldr	r2, [r7, #8]
 801554a:	611a      	str	r2, [r3, #16]
    DMA_Init(sEE_I2C_DMA_STREAM_RX, &sEEDMA_InitStructure);    
 801554c:	4805      	ldr	r0, [pc, #20]	; (8015564 <sEE_LowLevel_DMAConfig+0x58>)
 801554e:	4903      	ldr	r1, [pc, #12]	; (801555c <sEE_LowLevel_DMAConfig+0x50>)
 8015550:	f7f5 fc3c 	bl	800adcc <DMA_Init>
  }
}
 8015554:	3710      	adds	r7, #16
 8015556:	46bd      	mov	sp, r7
 8015558:	bd80      	pop	{r7, pc}
 801555a:	bf00      	nop
 801555c:	20005308 	.word	0x20005308
 8015560:	40026070 	.word	0x40026070
 8015564:	40026040 	.word	0x40026040

08015568 <LCD_DeInit>:
  * @brief  DeInitializes the LCD.
  * @param  None
  * @retval None
  */
void LCD_DeInit(void)
{ 
 8015568:	b580      	push	{r7, lr}
 801556a:	b082      	sub	sp, #8
 801556c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* LCD Display Off */
  LCD_DisplayOff();
 801556e:	f001 ff93 	bl	8017498 <LCD_DisplayOff>

  /* LCD_SPI disable */
  SPI_Cmd(LCD_SPI, DISABLE);
 8015572:	487f      	ldr	r0, [pc, #508]	; (8015770 <LCD_DeInit+0x208>)
 8015574:	2100      	movs	r1, #0
 8015576:	f7fc ffa5 	bl	80124c4 <SPI_Cmd>
  
  /* LCD_SPI DeInit */
  SPI_I2S_DeInit(LCD_SPI);
 801557a:	487d      	ldr	r0, [pc, #500]	; (8015770 <LCD_DeInit+0x208>)
 801557c:	f7fc fdda 	bl	8012134 <SPI_I2S_DeInit>
   
  /* Disable SPI clock  */
  RCC_APB2PeriphClockCmd(LCD_SPI_CLK, DISABLE);
 8015580:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8015584:	2100      	movs	r1, #0
 8015586:	f7fa fbc7 	bl	800fd18 <RCC_APB2PeriphClockCmd>
    
  /* Configure NCS in Output Push-Pull mode */
  GPIO_InitStructure.GPIO_Pin = LCD_NCS_PIN;
 801558a:	2304      	movs	r3, #4
 801558c:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 801558e:	2300      	movs	r3, #0
 8015590:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8015592:	2300      	movs	r3, #0
 8015594:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8015596:	463b      	mov	r3, r7
 8015598:	4876      	ldr	r0, [pc, #472]	; (8015774 <LCD_DeInit+0x20c>)
 801559a:	4619      	mov	r1, r3
 801559c:	f7f7 fc9c 	bl	800ced8 <GPIO_Init>
   
  /* Configure SPI pins: SCK, MISO and MOSI */
  GPIO_InitStructure.GPIO_Pin = LCD_SPI_SCK_PIN;
 80155a0:	2380      	movs	r3, #128	; 0x80
 80155a2:	603b      	str	r3, [r7, #0]
  GPIO_Init(LCD_SPI_SCK_GPIO_PORT, &GPIO_InitStructure);
 80155a4:	463b      	mov	r3, r7
 80155a6:	4874      	ldr	r0, [pc, #464]	; (8015778 <LCD_DeInit+0x210>)
 80155a8:	4619      	mov	r1, r3
 80155aa:	f7f7 fc95 	bl	800ced8 <GPIO_Init>

  GPIO_InitStructure.GPIO_Pin = LCD_SPI_MISO_PIN;
 80155ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80155b2:	603b      	str	r3, [r7, #0]
  GPIO_Init(LCD_SPI_MISO_GPIO_PORT, &GPIO_InitStructure);
 80155b4:	463b      	mov	r3, r7
 80155b6:	4870      	ldr	r0, [pc, #448]	; (8015778 <LCD_DeInit+0x210>)
 80155b8:	4619      	mov	r1, r3
 80155ba:	f7f7 fc8d 	bl	800ced8 <GPIO_Init>
  
  GPIO_InitStructure.GPIO_Pin = LCD_SPI_MOSI_PIN;
 80155be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80155c2:	603b      	str	r3, [r7, #0]
  GPIO_Init(LCD_SPI_MOSI_GPIO_PORT, &GPIO_InitStructure);
 80155c4:	463b      	mov	r3, r7
 80155c6:	486c      	ldr	r0, [pc, #432]	; (8015778 <LCD_DeInit+0x210>)
 80155c8:	4619      	mov	r1, r3
 80155ca:	f7f7 fc85 	bl	800ced8 <GPIO_Init>

  /* GPIOA configuration */
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_MCO);
 80155ce:	486b      	ldr	r0, [pc, #428]	; (801577c <LCD_DeInit+0x214>)
 80155d0:	2103      	movs	r1, #3
 80155d2:	2200      	movs	r2, #0
 80155d4:	f7f7 fdee 	bl	800d1b4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource4, GPIO_AF_MCO);
 80155d8:	4868      	ldr	r0, [pc, #416]	; (801577c <LCD_DeInit+0x214>)
 80155da:	2104      	movs	r1, #4
 80155dc:	2200      	movs	r2, #0
 80155de:	f7f7 fde9 	bl	800d1b4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource6, GPIO_AF_MCO);
 80155e2:	4866      	ldr	r0, [pc, #408]	; (801577c <LCD_DeInit+0x214>)
 80155e4:	2106      	movs	r1, #6
 80155e6:	2200      	movs	r2, #0
 80155e8:	f7f7 fde4 	bl	800d1b4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource11, GPIO_AF_MCO);
 80155ec:	4863      	ldr	r0, [pc, #396]	; (801577c <LCD_DeInit+0x214>)
 80155ee:	210b      	movs	r1, #11
 80155f0:	2200      	movs	r2, #0
 80155f2:	f7f7 fddf 	bl	800d1b4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource12, GPIO_AF_MCO);
 80155f6:	4861      	ldr	r0, [pc, #388]	; (801577c <LCD_DeInit+0x214>)
 80155f8:	210c      	movs	r1, #12
 80155fa:	2200      	movs	r2, #0
 80155fc:	f7f7 fdda 	bl	800d1b4 <GPIO_PinAFConfig>
  
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3 | GPIO_Pin_4 | GPIO_Pin_6 |
 8015600:	f641 0358 	movw	r3, #6232	; 0x1858
 8015604:	603b      	str	r3, [r7, #0]
                                GPIO_Pin_11 | GPIO_Pin_12;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8015606:	2302      	movs	r3, #2
 8015608:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 801560a:	2302      	movs	r3, #2
 801560c:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 801560e:	2300      	movs	r3, #0
 8015610:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8015612:	2300      	movs	r3, #0
 8015614:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(GPIOA, &GPIO_InitStructure);
 8015616:	463b      	mov	r3, r7
 8015618:	4858      	ldr	r0, [pc, #352]	; (801577c <LCD_DeInit+0x214>)
 801561a:	4619      	mov	r1, r3
 801561c:	f7f7 fc5c 	bl	800ced8 <GPIO_Init>

  /* GPIOB configuration */
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource0, GPIO_AF_MCO);
 8015620:	4857      	ldr	r0, [pc, #348]	; (8015780 <LCD_DeInit+0x218>)
 8015622:	2100      	movs	r1, #0
 8015624:	2200      	movs	r2, #0
 8015626:	f7f7 fdc5 	bl	800d1b4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource1, GPIO_AF_MCO);
 801562a:	4855      	ldr	r0, [pc, #340]	; (8015780 <LCD_DeInit+0x218>)
 801562c:	2101      	movs	r1, #1
 801562e:	2200      	movs	r2, #0
 8015630:	f7f7 fdc0 	bl	800d1b4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource8, GPIO_AF_MCO);
 8015634:	4852      	ldr	r0, [pc, #328]	; (8015780 <LCD_DeInit+0x218>)
 8015636:	2108      	movs	r1, #8
 8015638:	2200      	movs	r2, #0
 801563a:	f7f7 fdbb 	bl	800d1b4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_MCO);
 801563e:	4850      	ldr	r0, [pc, #320]	; (8015780 <LCD_DeInit+0x218>)
 8015640:	2109      	movs	r1, #9
 8015642:	2200      	movs	r2, #0
 8015644:	f7f7 fdb6 	bl	800d1b4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource10, GPIO_AF_MCO);
 8015648:	484d      	ldr	r0, [pc, #308]	; (8015780 <LCD_DeInit+0x218>)
 801564a:	210a      	movs	r1, #10
 801564c:	2200      	movs	r2, #0
 801564e:	f7f7 fdb1 	bl	800d1b4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource11, GPIO_AF_MCO);
 8015652:	484b      	ldr	r0, [pc, #300]	; (8015780 <LCD_DeInit+0x218>)
 8015654:	210b      	movs	r1, #11
 8015656:	2200      	movs	r2, #0
 8015658:	f7f7 fdac 	bl	800d1b4 <GPIO_PinAFConfig>
  
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0  | GPIO_Pin_1  | GPIO_Pin_8    |
 801565c:	f640 7303 	movw	r3, #3843	; 0xf03
 8015660:	603b      	str	r3, [r7, #0]
                                GPIO_Pin_9  |  GPIO_Pin_10 | GPIO_Pin_11;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8015662:	2302      	movs	r3, #2
 8015664:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8015666:	2302      	movs	r3, #2
 8015668:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 801566a:	2300      	movs	r3, #0
 801566c:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 801566e:	2300      	movs	r3, #0
 8015670:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 8015672:	463b      	mov	r3, r7
 8015674:	4842      	ldr	r0, [pc, #264]	; (8015780 <LCD_DeInit+0x218>)
 8015676:	4619      	mov	r1, r3
 8015678:	f7f7 fc2e 	bl	800ced8 <GPIO_Init>
  
  /* GPIOC configuration */
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource6, GPIO_AF_MCO);
 801567c:	483d      	ldr	r0, [pc, #244]	; (8015774 <LCD_DeInit+0x20c>)
 801567e:	2106      	movs	r1, #6
 8015680:	2200      	movs	r2, #0
 8015682:	f7f7 fd97 	bl	800d1b4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource7, GPIO_AF_MCO);
 8015686:	483b      	ldr	r0, [pc, #236]	; (8015774 <LCD_DeInit+0x20c>)
 8015688:	2107      	movs	r1, #7
 801568a:	2200      	movs	r2, #0
 801568c:	f7f7 fd92 	bl	800d1b4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource10, GPIO_AF_MCO);
 8015690:	4838      	ldr	r0, [pc, #224]	; (8015774 <LCD_DeInit+0x20c>)
 8015692:	210a      	movs	r1, #10
 8015694:	2200      	movs	r2, #0
 8015696:	f7f7 fd8d 	bl	800d1b4 <GPIO_PinAFConfig>
  
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6  | GPIO_Pin_7  | GPIO_Pin_10;
 801569a:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 801569e:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 80156a0:	2302      	movs	r3, #2
 80156a2:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80156a4:	2302      	movs	r3, #2
 80156a6:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80156a8:	2300      	movs	r3, #0
 80156aa:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 80156ac:	2300      	movs	r3, #0
 80156ae:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(GPIOC, &GPIO_InitStructure);
 80156b0:	463b      	mov	r3, r7
 80156b2:	4830      	ldr	r0, [pc, #192]	; (8015774 <LCD_DeInit+0x20c>)
 80156b4:	4619      	mov	r1, r3
 80156b6:	f7f7 fc0f 	bl	800ced8 <GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource3, GPIO_AF_MCO);
 80156ba:	4832      	ldr	r0, [pc, #200]	; (8015784 <LCD_DeInit+0x21c>)
 80156bc:	2103      	movs	r1, #3
 80156be:	2200      	movs	r2, #0
 80156c0:	f7f7 fd78 	bl	800d1b4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource6, GPIO_AF_MCO);
 80156c4:	482f      	ldr	r0, [pc, #188]	; (8015784 <LCD_DeInit+0x21c>)
 80156c6:	2106      	movs	r1, #6
 80156c8:	2200      	movs	r2, #0
 80156ca:	f7f7 fd73 	bl	800d1b4 <GPIO_PinAFConfig>
  
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3  | GPIO_Pin_6; 
 80156ce:	2348      	movs	r3, #72	; 0x48
 80156d0:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 80156d2:	2302      	movs	r3, #2
 80156d4:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80156d6:	2302      	movs	r3, #2
 80156d8:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80156da:	2300      	movs	r3, #0
 80156dc:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 80156de:	2300      	movs	r3, #0
 80156e0:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(GPIOD, &GPIO_InitStructure);  
 80156e2:	463b      	mov	r3, r7
 80156e4:	4827      	ldr	r0, [pc, #156]	; (8015784 <LCD_DeInit+0x21c>)
 80156e6:	4619      	mov	r1, r3
 80156e8:	f7f7 fbf6 	bl	800ced8 <GPIO_Init>

  /* GPIOF configuration */
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource10, GPIO_AF_MCO);
 80156ec:	4822      	ldr	r0, [pc, #136]	; (8015778 <LCD_DeInit+0x210>)
 80156ee:	210a      	movs	r1, #10
 80156f0:	2200      	movs	r2, #0
 80156f2:	f7f7 fd5f 	bl	800d1b4 <GPIO_PinAFConfig>
  
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10; 
 80156f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80156fa:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 80156fc:	2302      	movs	r3, #2
 80156fe:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8015700:	2302      	movs	r3, #2
 8015702:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8015704:	2300      	movs	r3, #0
 8015706:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8015708:	2300      	movs	r3, #0
 801570a:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(GPIOF, &GPIO_InitStructure);  
 801570c:	463b      	mov	r3, r7
 801570e:	481a      	ldr	r0, [pc, #104]	; (8015778 <LCD_DeInit+0x210>)
 8015710:	4619      	mov	r1, r3
 8015712:	f7f7 fbe1 	bl	800ced8 <GPIO_Init>

  /* GPIOG configuration */
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource6, GPIO_AF_MCO);
 8015716:	481c      	ldr	r0, [pc, #112]	; (8015788 <LCD_DeInit+0x220>)
 8015718:	2106      	movs	r1, #6
 801571a:	2200      	movs	r2, #0
 801571c:	f7f7 fd4a 	bl	800d1b4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource7, GPIO_AF_MCO);
 8015720:	4819      	ldr	r0, [pc, #100]	; (8015788 <LCD_DeInit+0x220>)
 8015722:	2107      	movs	r1, #7
 8015724:	2200      	movs	r2, #0
 8015726:	f7f7 fd45 	bl	800d1b4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource10, GPIO_AF_MCO);
 801572a:	4817      	ldr	r0, [pc, #92]	; (8015788 <LCD_DeInit+0x220>)
 801572c:	210a      	movs	r1, #10
 801572e:	2200      	movs	r2, #0
 8015730:	f7f7 fd40 	bl	800d1b4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource11, GPIO_AF_MCO);
 8015734:	4814      	ldr	r0, [pc, #80]	; (8015788 <LCD_DeInit+0x220>)
 8015736:	210b      	movs	r1, #11
 8015738:	2200      	movs	r2, #0
 801573a:	f7f7 fd3b 	bl	800d1b4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource12, GPIO_AF_MCO);
 801573e:	4812      	ldr	r0, [pc, #72]	; (8015788 <LCD_DeInit+0x220>)
 8015740:	210c      	movs	r1, #12
 8015742:	2200      	movs	r2, #0
 8015744:	f7f7 fd36 	bl	800d1b4 <GPIO_PinAFConfig>
  
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6  | GPIO_Pin_7  | GPIO_Pin_10    |
 8015748:	f44f 53e6 	mov.w	r3, #7360	; 0x1cc0
 801574c:	603b      	str	r3, [r7, #0]
                                GPIO_Pin_11 | GPIO_Pin_12;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 801574e:	2302      	movs	r3, #2
 8015750:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8015752:	2302      	movs	r3, #2
 8015754:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8015756:	2300      	movs	r3, #0
 8015758:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 801575a:	2300      	movs	r3, #0
 801575c:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(GPIOG, &GPIO_InitStructure);
 801575e:	463b      	mov	r3, r7
 8015760:	4809      	ldr	r0, [pc, #36]	; (8015788 <LCD_DeInit+0x220>)
 8015762:	4619      	mov	r1, r3
 8015764:	f7f7 fbb8 	bl	800ced8 <GPIO_Init>
}
 8015768:	3708      	adds	r7, #8
 801576a:	46bd      	mov	sp, r7
 801576c:	bd80      	pop	{r7, pc}
 801576e:	bf00      	nop
 8015770:	40015000 	.word	0x40015000
 8015774:	40020800 	.word	0x40020800
 8015778:	40021400 	.word	0x40021400
 801577c:	40020000 	.word	0x40020000
 8015780:	40020400 	.word	0x40020400
 8015784:	40020c00 	.word	0x40020c00
 8015788:	40021800 	.word	0x40021800

0801578c <LCD_Init>:
  * @brief  Initializes the LCD.
  * @param  None
  * @retval None
  */
void LCD_Init(void)
{ 
 801578c:	b580      	push	{r7, lr}
 801578e:	b090      	sub	sp, #64	; 0x40
 8015790:	af00      	add	r7, sp, #0
  LTDC_InitTypeDef       LTDC_InitStruct;
  
  /* Configure the LCD Control pins ------------------------------------------*/
  LCD_CtrlLinesConfig();
 8015792:	f001 fe87 	bl	80174a4 <LCD_CtrlLinesConfig>
  LCD_ChipSelect(DISABLE);
 8015796:	2000      	movs	r0, #0
 8015798:	f000 f8ac 	bl	80158f4 <LCD_ChipSelect>
  LCD_ChipSelect(ENABLE);
 801579c:	2001      	movs	r0, #1
 801579e:	f000 f8a9 	bl	80158f4 <LCD_ChipSelect>
  
  /* Configure the LCD_SPI interface -----------------------------------------*/
  LCD_SPIConfig(); 
 80157a2:	f001 febb 	bl	801751c <LCD_SPIConfig>
  
  /* Power on the LCD --------------------------------------------------------*/
  LCD_PowerOn();
 80157a6:	f001 fd29 	bl	80171fc <LCD_PowerOn>
  
  /* Enable the LTDC Clock */
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_LTDC, ENABLE);
 80157aa:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80157ae:	2101      	movs	r1, #1
 80157b0:	f7fa fab2 	bl	800fd18 <RCC_APB2PeriphClockCmd>
  
  /* Enable the DMA2D Clock */
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2D, ENABLE); 
 80157b4:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80157b8:	2101      	movs	r1, #1
 80157ba:	f7fa fa35 	bl	800fc28 <RCC_AHB1PeriphClockCmd>
  
  /* Configure the LCD Control pins */
  LCD_AF_GPIOConfig();  
 80157be:	f001 ff17 	bl	80175f0 <LCD_AF_GPIOConfig>
  
  /* Configure the FMC Parallel interface : SDRAM is used as Frame Buffer for LCD */
  SDRAM_Init();
 80157c2:	f002 f809 	bl	80177d8 <SDRAM_Init>
  
  /* LTDC Configuration *********************************************************/  
  /* Polarity configuration */
  /* Initialize the horizontal synchronization polarity as active low */
  LTDC_InitStruct.LTDC_HSPolarity = LTDC_HSPolarity_AL;     
 80157c6:	2300      	movs	r3, #0
 80157c8:	607b      	str	r3, [r7, #4]
  /* Initialize the vertical synchronization polarity as active low */  
  LTDC_InitStruct.LTDC_VSPolarity = LTDC_VSPolarity_AL;     
 80157ca:	2300      	movs	r3, #0
 80157cc:	60bb      	str	r3, [r7, #8]
  /* Initialize the data enable polarity as active low */
  LTDC_InitStruct.LTDC_DEPolarity = LTDC_DEPolarity_AL;     
 80157ce:	2300      	movs	r3, #0
 80157d0:	60fb      	str	r3, [r7, #12]
  /* Initialize the pixel clock polarity as input pixel clock */ 
  LTDC_InitStruct.LTDC_PCPolarity = LTDC_PCPolarity_IPC;
 80157d2:	2300      	movs	r3, #0
 80157d4:	613b      	str	r3, [r7, #16]
  
  /* Configure R,G,B component values for LCD background color */                   
  LTDC_InitStruct.LTDC_BackgroundRedValue = 0;            
 80157d6:	2300      	movs	r3, #0
 80157d8:	637b      	str	r3, [r7, #52]	; 0x34
  LTDC_InitStruct.LTDC_BackgroundGreenValue = 0;          
 80157da:	2300      	movs	r3, #0
 80157dc:	63bb      	str	r3, [r7, #56]	; 0x38
  LTDC_InitStruct.LTDC_BackgroundBlueValue = 0;  
 80157de:	2300      	movs	r3, #0
 80157e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* Enable Pixel Clock */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAI_N = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAI_R = 192/4 = 48 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / RCC_PLLSAIDivR = 48/8 = 6 Mhz */
  RCC_PLLSAIConfig(192, 7, 4);
 80157e2:	20c0      	movs	r0, #192	; 0xc0
 80157e4:	2107      	movs	r1, #7
 80157e6:	2204      	movs	r2, #4
 80157e8:	f7f9 ff7e 	bl	800f6e8 <RCC_PLLSAIConfig>
  RCC_LTDCCLKDivConfig(RCC_PLLSAIDivR_Div8);
 80157ec:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80157f0:	f7fa f9ee 	bl	800fbd0 <RCC_LTDCCLKDivConfig>
  
  /* Enable PLLSAI Clock */
  RCC_PLLSAICmd(ENABLE);
 80157f4:	2001      	movs	r0, #1
 80157f6:	f7f9 ff8f 	bl	800f718 <RCC_PLLSAICmd>
  /* Wait for PLLSAI activation */
  while(RCC_GetFlagStatus(RCC_FLAG_PLLSAIRDY) == RESET)
 80157fa:	bf00      	nop
 80157fc:	203d      	movs	r0, #61	; 0x3d
 80157fe:	f7fa fbf9 	bl	800fff4 <RCC_GetFlagStatus>
 8015802:	4603      	mov	r3, r0
 8015804:	2b00      	cmp	r3, #0
 8015806:	d0f9      	beq.n	80157fc <LCD_Init+0x70>
  {
  }
  
  /* Timing configuration */  
  /* Configure horizontal synchronization width */     
  LTDC_InitStruct.LTDC_HorizontalSync = 9;
 8015808:	2309      	movs	r3, #9
 801580a:	617b      	str	r3, [r7, #20]
  /* Configure vertical synchronization height */
  LTDC_InitStruct.LTDC_VerticalSync = 1;
 801580c:	2301      	movs	r3, #1
 801580e:	61bb      	str	r3, [r7, #24]
  /* Configure accumulated horizontal back porch */
  LTDC_InitStruct.LTDC_AccumulatedHBP = 29; 
 8015810:	231d      	movs	r3, #29
 8015812:	61fb      	str	r3, [r7, #28]
  /* Configure accumulated vertical back porch */
  LTDC_InitStruct.LTDC_AccumulatedVBP = 3;  
 8015814:	2303      	movs	r3, #3
 8015816:	623b      	str	r3, [r7, #32]
  /* Configure accumulated active width */  
  LTDC_InitStruct.LTDC_AccumulatedActiveW = 269;
 8015818:	f240 130d 	movw	r3, #269	; 0x10d
 801581c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure accumulated active height */
  LTDC_InitStruct.LTDC_AccumulatedActiveH = 323;
 801581e:	f240 1343 	movw	r3, #323	; 0x143
 8015822:	62bb      	str	r3, [r7, #40]	; 0x28
  /* Configure total width */
  LTDC_InitStruct.LTDC_TotalWidth = 279; 
 8015824:	f240 1317 	movw	r3, #279	; 0x117
 8015828:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure total height */
  LTDC_InitStruct.LTDC_TotalHeigh = 327;
 801582a:	f240 1347 	movw	r3, #327	; 0x147
 801582e:	633b      	str	r3, [r7, #48]	; 0x30
  
  LTDC_Init(&LTDC_InitStruct);
 8015830:	1d3b      	adds	r3, r7, #4
 8015832:	4618      	mov	r0, r3
 8015834:	f7f8 ff94 	bl	800e760 <LTDC_Init>
}  
 8015838:	3740      	adds	r7, #64	; 0x40
 801583a:	46bd      	mov	sp, r7
 801583c:	bd80      	pop	{r7, pc}
 801583e:	bf00      	nop

08015840 <LCD_LayerInit>:
  * @brief  Initializes the LCD Layers.
  * @param  None
  * @retval None
  */
void LCD_LayerInit(void)
{
 8015840:	b580      	push	{r7, lr}
 8015842:	b090      	sub	sp, #64	; 0x40
 8015844:	af00      	add	r7, sp, #0
  /* In this case all the active display area is used to display a picture then :
  Horizontal start = horizontal synchronization + Horizontal back porch = 30 
  Horizontal stop = Horizontal start + window width -1 = 30 + 240 -1
  Vertical start   = vertical synchronization + vertical back porch     = 4
  Vertical stop   = Vertical start + window height -1  = 4 + 320 -1      */      
  LTDC_Layer_InitStruct.LTDC_HorizontalStart = 30;
 8015846:	231e      	movs	r3, #30
 8015848:	603b      	str	r3, [r7, #0]
  LTDC_Layer_InitStruct.LTDC_HorizontalStop = (LCD_PIXEL_WIDTH + 30 - 1); 
 801584a:	f240 130d 	movw	r3, #269	; 0x10d
 801584e:	607b      	str	r3, [r7, #4]
  LTDC_Layer_InitStruct.LTDC_VerticalStart = 4;
 8015850:	2304      	movs	r3, #4
 8015852:	60bb      	str	r3, [r7, #8]
  LTDC_Layer_InitStruct.LTDC_VerticalStop = (LCD_PIXEL_HEIGHT + 4 - 1);
 8015854:	f240 1343 	movw	r3, #323	; 0x143
 8015858:	60fb      	str	r3, [r7, #12]
  
  /* Pixel Format configuration*/
  LTDC_Layer_InitStruct.LTDC_PixelFormat = LTDC_Pixelformat_RGB565;
 801585a:	2302      	movs	r3, #2
 801585c:	613b      	str	r3, [r7, #16]
  /* Alpha constant (255 totally opaque) */
  LTDC_Layer_InitStruct.LTDC_ConstantAlpha = 255; 
 801585e:	23ff      	movs	r3, #255	; 0xff
 8015860:	617b      	str	r3, [r7, #20]
  /* Default Color configuration (configure A,R,G,B component values) */          
  LTDC_Layer_InitStruct.LTDC_DefaultColorBlue = 0;        
 8015862:	2300      	movs	r3, #0
 8015864:	61bb      	str	r3, [r7, #24]
  LTDC_Layer_InitStruct.LTDC_DefaultColorGreen = 0;       
 8015866:	2300      	movs	r3, #0
 8015868:	61fb      	str	r3, [r7, #28]
  LTDC_Layer_InitStruct.LTDC_DefaultColorRed = 0;         
 801586a:	2300      	movs	r3, #0
 801586c:	623b      	str	r3, [r7, #32]
  LTDC_Layer_InitStruct.LTDC_DefaultColorAlpha = 0;
 801586e:	2300      	movs	r3, #0
 8015870:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure blending factors */       
  LTDC_Layer_InitStruct.LTDC_BlendingFactor_1 = LTDC_BlendingFactor1_CA;    
 8015872:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015876:	62bb      	str	r3, [r7, #40]	; 0x28
  LTDC_Layer_InitStruct.LTDC_BlendingFactor_2 = LTDC_BlendingFactor2_CA;
 8015878:	2305      	movs	r3, #5
 801587a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* the length of one line of pixels in bytes + 3 then :
  Line Lenth = Active high width x number of bytes per pixel + 3 
  Active high width         = LCD_PIXEL_WIDTH 
  number of bytes per pixel = 2    (pixel_format : RGB565) 
  */
  LTDC_Layer_InitStruct.LTDC_CFBLineLength = ((LCD_PIXEL_WIDTH * 2) + 3);
 801587c:	f240 13e3 	movw	r3, #483	; 0x1e3
 8015880:	637b      	str	r3, [r7, #52]	; 0x34
  /* the pitch is the increment from the start of one line of pixels to the 
  start of the next line in bytes, then :
  Pitch = Active high width x number of bytes per pixel */ 
  LTDC_Layer_InitStruct.LTDC_CFBPitch = (LCD_PIXEL_WIDTH * 2);
 8015882:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8015886:	63bb      	str	r3, [r7, #56]	; 0x38
  
  /* Configure the number of lines */  
  LTDC_Layer_InitStruct.LTDC_CFBLineNumber = LCD_PIXEL_HEIGHT;
 8015888:	f44f 73a0 	mov.w	r3, #320	; 0x140
 801588c:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* Start Address configuration : the LCD Frame buffer is defined on SDRAM */    
  LTDC_Layer_InitStruct.LTDC_CFBStartAdress = LCD_FRAME_BUFFER;
 801588e:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8015892:	633b      	str	r3, [r7, #48]	; 0x30
  
  /* Initialize LTDC layer 1 */
  LTDC_LayerInit(LTDC_Layer1, &LTDC_Layer_InitStruct);
 8015894:	463b      	mov	r3, r7
 8015896:	4813      	ldr	r0, [pc, #76]	; (80158e4 <LCD_LayerInit+0xa4>)
 8015898:	4619      	mov	r1, r3
 801589a:	f7f9 f8bf 	bl	800ea1c <LTDC_LayerInit>
  
  /* Configure Layer2 */
  /* Start Address configuration : the LCD Frame buffer is defined on SDRAM w/ Offset */     
  LTDC_Layer_InitStruct.LTDC_CFBStartAdress = LCD_FRAME_BUFFER + BUFFER_OFFSET;
 801589e:	4b12      	ldr	r3, [pc, #72]	; (80158e8 <LCD_LayerInit+0xa8>)
 80158a0:	633b      	str	r3, [r7, #48]	; 0x30
  
  /* Configure blending factors */       
  LTDC_Layer_InitStruct.LTDC_BlendingFactor_1 = LTDC_BlendingFactor1_PAxCA;    
 80158a2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80158a6:	62bb      	str	r3, [r7, #40]	; 0x28
  LTDC_Layer_InitStruct.LTDC_BlendingFactor_2 = LTDC_BlendingFactor2_PAxCA;
 80158a8:	2307      	movs	r3, #7
 80158aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Initialize LTDC layer 2 */
  LTDC_LayerInit(LTDC_Layer2, &LTDC_Layer_InitStruct);
 80158ac:	463b      	mov	r3, r7
 80158ae:	480f      	ldr	r0, [pc, #60]	; (80158ec <LCD_LayerInit+0xac>)
 80158b0:	4619      	mov	r1, r3
 80158b2:	f7f9 f8b3 	bl	800ea1c <LTDC_LayerInit>
  
  /* LTDC configuration reload */  
  LTDC_ReloadConfig(LTDC_IMReload);
 80158b6:	2001      	movs	r0, #1
 80158b8:	f7f9 f8a2 	bl	800ea00 <LTDC_ReloadConfig>
  
  /* Enable foreground & background Layers */
  LTDC_LayerCmd(LTDC_Layer1, ENABLE); 
 80158bc:	4809      	ldr	r0, [pc, #36]	; (80158e4 <LCD_LayerInit+0xa4>)
 80158be:	2101      	movs	r1, #1
 80158c0:	f7f9 f980 	bl	800ebc4 <LTDC_LayerCmd>
  LTDC_LayerCmd(LTDC_Layer2, ENABLE);
 80158c4:	4809      	ldr	r0, [pc, #36]	; (80158ec <LCD_LayerInit+0xac>)
 80158c6:	2101      	movs	r1, #1
 80158c8:	f7f9 f97c 	bl	800ebc4 <LTDC_LayerCmd>
  
  /* LTDC configuration reload */  
  LTDC_ReloadConfig(LTDC_IMReload);
 80158cc:	2001      	movs	r0, #1
 80158ce:	f7f9 f897 	bl	800ea00 <LTDC_ReloadConfig>
  
  /* Set default font */    
  LCD_SetFont(&LCD_DEFAULT_FONT); 
 80158d2:	4807      	ldr	r0, [pc, #28]	; (80158f0 <LCD_LayerInit+0xb0>)
 80158d4:	f000 f890 	bl	80159f8 <LCD_SetFont>
  
  /* dithering activation */
  LTDC_DitherCmd(ENABLE);
 80158d8:	2001      	movs	r0, #1
 80158da:	f7f9 f829 	bl	800e930 <LTDC_DitherCmd>
}
 80158de:	3740      	adds	r7, #64	; 0x40
 80158e0:	46bd      	mov	sp, r7
 80158e2:	bd80      	pop	{r7, pc}
 80158e4:	40016884 	.word	0x40016884
 80158e8:	d0050000 	.word	0xd0050000
 80158ec:	40016904 	.word	0x40016904
 80158f0:	20000094 	.word	0x20000094

080158f4 <LCD_ChipSelect>:
  * @brief  Controls LCD Chip Select (CS) pin
  * @param  NewState CS pin state
  * @retval None
  */
void LCD_ChipSelect(FunctionalState NewState)
{
 80158f4:	b580      	push	{r7, lr}
 80158f6:	b082      	sub	sp, #8
 80158f8:	af00      	add	r7, sp, #0
 80158fa:	4603      	mov	r3, r0
 80158fc:	71fb      	strb	r3, [r7, #7]
  if (NewState == DISABLE)
 80158fe:	79fb      	ldrb	r3, [r7, #7]
 8015900:	2b00      	cmp	r3, #0
 8015902:	d104      	bne.n	801590e <LCD_ChipSelect+0x1a>
  {
    GPIO_ResetBits(LCD_NCS_GPIO_PORT, LCD_NCS_PIN); /* CS pin low: LCD disabled */
 8015904:	4805      	ldr	r0, [pc, #20]	; (801591c <LCD_ChipSelect+0x28>)
 8015906:	2104      	movs	r1, #4
 8015908:	f7f7 fc0e 	bl	800d128 <GPIO_ResetBits>
 801590c:	e003      	b.n	8015916 <LCD_ChipSelect+0x22>
  }
  else
  {
    GPIO_SetBits(LCD_NCS_GPIO_PORT, LCD_NCS_PIN); /* CS pin high: LCD enabled */
 801590e:	4803      	ldr	r0, [pc, #12]	; (801591c <LCD_ChipSelect+0x28>)
 8015910:	2104      	movs	r1, #4
 8015912:	f7f7 fbfb 	bl	800d10c <GPIO_SetBits>
  }
}
 8015916:	3708      	adds	r7, #8
 8015918:	46bd      	mov	sp, r7
 801591a:	bd80      	pop	{r7, pc}
 801591c:	40020800 	.word	0x40020800

08015920 <LCD_SetLayer>:
  * @brief  Sets the LCD Layer.
  * @param  Layerx: specifies the Layer foreground or background.
  * @retval None
  */
void LCD_SetLayer(uint32_t Layerx)
{
 8015920:	b480      	push	{r7}
 8015922:	b083      	sub	sp, #12
 8015924:	af00      	add	r7, sp, #0
 8015926:	6078      	str	r0, [r7, #4]
  if (Layerx == LCD_BACKGROUND_LAYER)
 8015928:	687b      	ldr	r3, [r7, #4]
 801592a:	2b00      	cmp	r3, #0
 801592c:	d107      	bne.n	801593e <LCD_SetLayer+0x1e>
  {
    CurrentFrameBuffer = LCD_FRAME_BUFFER; 
 801592e:	4b09      	ldr	r3, [pc, #36]	; (8015954 <LCD_SetLayer+0x34>)
 8015930:	f04f 4250 	mov.w	r2, #3489660928	; 0xd0000000
 8015934:	601a      	str	r2, [r3, #0]
    CurrentLayer = LCD_BACKGROUND_LAYER;
 8015936:	4b08      	ldr	r3, [pc, #32]	; (8015958 <LCD_SetLayer+0x38>)
 8015938:	2200      	movs	r2, #0
 801593a:	601a      	str	r2, [r3, #0]
 801593c:	e005      	b.n	801594a <LCD_SetLayer+0x2a>
  }
  else
  {
    CurrentFrameBuffer = LCD_FRAME_BUFFER + BUFFER_OFFSET;
 801593e:	4b05      	ldr	r3, [pc, #20]	; (8015954 <LCD_SetLayer+0x34>)
 8015940:	4a06      	ldr	r2, [pc, #24]	; (801595c <LCD_SetLayer+0x3c>)
 8015942:	601a      	str	r2, [r3, #0]
    CurrentLayer = LCD_FOREGROUND_LAYER;
 8015944:	4b04      	ldr	r3, [pc, #16]	; (8015958 <LCD_SetLayer+0x38>)
 8015946:	2201      	movs	r2, #1
 8015948:	601a      	str	r2, [r3, #0]
  }
}  
 801594a:	370c      	adds	r7, #12
 801594c:	46bd      	mov	sp, r7
 801594e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015952:	4770      	bx	lr
 8015954:	200000b8 	.word	0x200000b8
 8015958:	20005350 	.word	0x20005350
 801595c:	d0050000 	.word	0xd0050000

08015960 <LCD_SetColors>:
  * @param  TextColor: specifies the Text Color.
  * @param  BackColor: specifies the Background Color.
  * @retval None
  */
void LCD_SetColors(uint16_t TextColor, uint16_t BackColor)
{
 8015960:	b480      	push	{r7}
 8015962:	b083      	sub	sp, #12
 8015964:	af00      	add	r7, sp, #0
 8015966:	4602      	mov	r2, r0
 8015968:	460b      	mov	r3, r1
 801596a:	80fa      	strh	r2, [r7, #6]
 801596c:	80bb      	strh	r3, [r7, #4]
  CurrentTextColor = TextColor; 
 801596e:	4b05      	ldr	r3, [pc, #20]	; (8015984 <LCD_SetColors+0x24>)
 8015970:	88fa      	ldrh	r2, [r7, #6]
 8015972:	801a      	strh	r2, [r3, #0]
  CurrentBackColor = BackColor;
 8015974:	4b04      	ldr	r3, [pc, #16]	; (8015988 <LCD_SetColors+0x28>)
 8015976:	88ba      	ldrh	r2, [r7, #4]
 8015978:	801a      	strh	r2, [r3, #0]
}
 801597a:	370c      	adds	r7, #12
 801597c:	46bd      	mov	sp, r7
 801597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015982:	4770      	bx	lr
 8015984:	2000534c 	.word	0x2000534c
 8015988:	200000b4 	.word	0x200000b4

0801598c <LCD_GetColors>:
  * @param  BackColor: pointer to the variable that will contain the Background 
            Color.
  * @retval None
  */
void LCD_GetColors(uint16_t *TextColor, uint16_t *BackColor)
{
 801598c:	b480      	push	{r7}
 801598e:	b083      	sub	sp, #12
 8015990:	af00      	add	r7, sp, #0
 8015992:	6078      	str	r0, [r7, #4]
 8015994:	6039      	str	r1, [r7, #0]
  *TextColor = CurrentTextColor;
 8015996:	4b06      	ldr	r3, [pc, #24]	; (80159b0 <LCD_GetColors+0x24>)
 8015998:	881a      	ldrh	r2, [r3, #0]
 801599a:	687b      	ldr	r3, [r7, #4]
 801599c:	801a      	strh	r2, [r3, #0]
  *BackColor = CurrentBackColor;
 801599e:	4b05      	ldr	r3, [pc, #20]	; (80159b4 <LCD_GetColors+0x28>)
 80159a0:	881a      	ldrh	r2, [r3, #0]
 80159a2:	683b      	ldr	r3, [r7, #0]
 80159a4:	801a      	strh	r2, [r3, #0]
}
 80159a6:	370c      	adds	r7, #12
 80159a8:	46bd      	mov	sp, r7
 80159aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159ae:	4770      	bx	lr
 80159b0:	2000534c 	.word	0x2000534c
 80159b4:	200000b4 	.word	0x200000b4

080159b8 <LCD_SetTextColor>:
  * @brief  Sets the Text color.
  * @param  Color: specifies the Text color code RGB(5-6-5).
  * @retval None
  */
void LCD_SetTextColor(uint16_t Color)
{
 80159b8:	b480      	push	{r7}
 80159ba:	b083      	sub	sp, #12
 80159bc:	af00      	add	r7, sp, #0
 80159be:	4603      	mov	r3, r0
 80159c0:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 80159c2:	4b04      	ldr	r3, [pc, #16]	; (80159d4 <LCD_SetTextColor+0x1c>)
 80159c4:	88fa      	ldrh	r2, [r7, #6]
 80159c6:	801a      	strh	r2, [r3, #0]
}
 80159c8:	370c      	adds	r7, #12
 80159ca:	46bd      	mov	sp, r7
 80159cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159d0:	4770      	bx	lr
 80159d2:	bf00      	nop
 80159d4:	2000534c 	.word	0x2000534c

080159d8 <LCD_SetBackColor>:
  * @brief  Sets the Background color.
  * @param  Color: specifies the Background color code RGB(5-6-5).
  * @retval None
  */
void LCD_SetBackColor(uint16_t Color)
{
 80159d8:	b480      	push	{r7}
 80159da:	b083      	sub	sp, #12
 80159dc:	af00      	add	r7, sp, #0
 80159de:	4603      	mov	r3, r0
 80159e0:	80fb      	strh	r3, [r7, #6]
  CurrentBackColor = Color;
 80159e2:	4b04      	ldr	r3, [pc, #16]	; (80159f4 <LCD_SetBackColor+0x1c>)
 80159e4:	88fa      	ldrh	r2, [r7, #6]
 80159e6:	801a      	strh	r2, [r3, #0]
}
 80159e8:	370c      	adds	r7, #12
 80159ea:	46bd      	mov	sp, r7
 80159ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159f0:	4770      	bx	lr
 80159f2:	bf00      	nop
 80159f4:	200000b4 	.word	0x200000b4

080159f8 <LCD_SetFont>:
  * @brief  Sets the Text Font.
  * @param  fonts: specifies the font to be used.
  * @retval None
  */
void LCD_SetFont(sFONT *fonts)
{
 80159f8:	b480      	push	{r7}
 80159fa:	b083      	sub	sp, #12
 80159fc:	af00      	add	r7, sp, #0
 80159fe:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 8015a00:	4b03      	ldr	r3, [pc, #12]	; (8015a10 <LCD_SetFont+0x18>)
 8015a02:	687a      	ldr	r2, [r7, #4]
 8015a04:	601a      	str	r2, [r3, #0]
}
 8015a06:	370c      	adds	r7, #12
 8015a08:	46bd      	mov	sp, r7
 8015a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a0e:	4770      	bx	lr
 8015a10:	20005348 	.word	0x20005348

08015a14 <LCD_SetTransparency>:
  * @param  transparency: specifies the transparency, 
  *         This parameter must range from 0x00 to 0xFF.
  * @retval None
  */
void LCD_SetTransparency(uint8_t transparency)
{
 8015a14:	b580      	push	{r7, lr}
 8015a16:	b082      	sub	sp, #8
 8015a18:	af00      	add	r7, sp, #0
 8015a1a:	4603      	mov	r3, r0
 8015a1c:	71fb      	strb	r3, [r7, #7]
  if (CurrentLayer == LCD_BACKGROUND_LAYER)
 8015a1e:	4b0a      	ldr	r3, [pc, #40]	; (8015a48 <LCD_SetTransparency+0x34>)
 8015a20:	681b      	ldr	r3, [r3, #0]
 8015a22:	2b00      	cmp	r3, #0
 8015a24:	d105      	bne.n	8015a32 <LCD_SetTransparency+0x1e>
  {
    LTDC_LayerAlpha(LTDC_Layer1, transparency);
 8015a26:	79fb      	ldrb	r3, [r7, #7]
 8015a28:	4808      	ldr	r0, [pc, #32]	; (8015a4c <LCD_SetTransparency+0x38>)
 8015a2a:	4619      	mov	r1, r3
 8015a2c:	f7f9 fa48 	bl	800eec0 <LTDC_LayerAlpha>
 8015a30:	e004      	b.n	8015a3c <LCD_SetTransparency+0x28>
  }
  else
  {     
    LTDC_LayerAlpha(LTDC_Layer2, transparency);
 8015a32:	79fb      	ldrb	r3, [r7, #7]
 8015a34:	4806      	ldr	r0, [pc, #24]	; (8015a50 <LCD_SetTransparency+0x3c>)
 8015a36:	4619      	mov	r1, r3
 8015a38:	f7f9 fa42 	bl	800eec0 <LTDC_LayerAlpha>
  }
  LTDC_ReloadConfig(LTDC_IMReload);
 8015a3c:	2001      	movs	r0, #1
 8015a3e:	f7f8 ffdf 	bl	800ea00 <LTDC_ReloadConfig>
}
 8015a42:	3708      	adds	r7, #8
 8015a44:	46bd      	mov	sp, r7
 8015a46:	bd80      	pop	{r7, pc}
 8015a48:	20005350 	.word	0x20005350
 8015a4c:	40016884 	.word	0x40016884
 8015a50:	40016904 	.word	0x40016904

08015a54 <LCD_GetFont>:
  * @brief  Gets the Text Font.
  * @param  None.
  * @retval the used font.
  */
sFONT *LCD_GetFont(void)
{
 8015a54:	b480      	push	{r7}
 8015a56:	af00      	add	r7, sp, #0
  return LCD_Currentfonts;
 8015a58:	4b03      	ldr	r3, [pc, #12]	; (8015a68 <LCD_GetFont+0x14>)
 8015a5a:	681b      	ldr	r3, [r3, #0]
}
 8015a5c:	4618      	mov	r0, r3
 8015a5e:	46bd      	mov	sp, r7
 8015a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a64:	4770      	bx	lr
 8015a66:	bf00      	nop
 8015a68:	20005348 	.word	0x20005348

08015a6c <LCD_ClearLine>:
  *                                      0..26 if LCD_Currentfonts is Font12x12 or Font8x12
  *                                      0..39 if LCD_Currentfonts is Font8x8
  * @retval None
  */
void LCD_ClearLine(uint16_t Line)
{
 8015a6c:	b580      	push	{r7, lr}
 8015a6e:	b084      	sub	sp, #16
 8015a70:	af00      	add	r7, sp, #0
 8015a72:	4603      	mov	r3, r0
 8015a74:	80fb      	strh	r3, [r7, #6]
  uint16_t refcolumn = 0;
 8015a76:	2300      	movs	r3, #0
 8015a78:	81fb      	strh	r3, [r7, #14]
  /* Send the string character by character on lCD */
  while ((refcolumn < LCD_PIXEL_WIDTH) && (((refcolumn + LCD_Currentfonts->Width)& 0xFFFF) >= LCD_Currentfonts->Width))
 8015a7a:	e00c      	b.n	8015a96 <LCD_ClearLine+0x2a>
  {
    /* Display one character on LCD */
    LCD_DisplayChar(Line, refcolumn, ' ');
 8015a7c:	88fa      	ldrh	r2, [r7, #6]
 8015a7e:	89fb      	ldrh	r3, [r7, #14]
 8015a80:	4610      	mov	r0, r2
 8015a82:	4619      	mov	r1, r3
 8015a84:	2220      	movs	r2, #32
 8015a86:	f000 f93d 	bl	8015d04 <LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += LCD_Currentfonts->Width;
 8015a8a:	4b0b      	ldr	r3, [pc, #44]	; (8015ab8 <LCD_ClearLine+0x4c>)
 8015a8c:	681b      	ldr	r3, [r3, #0]
 8015a8e:	889a      	ldrh	r2, [r3, #4]
 8015a90:	89fb      	ldrh	r3, [r7, #14]
 8015a92:	4413      	add	r3, r2
 8015a94:	81fb      	strh	r3, [r7, #14]
  */
void LCD_ClearLine(uint16_t Line)
{
  uint16_t refcolumn = 0;
  /* Send the string character by character on lCD */
  while ((refcolumn < LCD_PIXEL_WIDTH) && (((refcolumn + LCD_Currentfonts->Width)& 0xFFFF) >= LCD_Currentfonts->Width))
 8015a96:	89fb      	ldrh	r3, [r7, #14]
 8015a98:	2bef      	cmp	r3, #239	; 0xef
 8015a9a:	d80a      	bhi.n	8015ab2 <LCD_ClearLine+0x46>
 8015a9c:	89fa      	ldrh	r2, [r7, #14]
 8015a9e:	4b06      	ldr	r3, [pc, #24]	; (8015ab8 <LCD_ClearLine+0x4c>)
 8015aa0:	681b      	ldr	r3, [r3, #0]
 8015aa2:	889b      	ldrh	r3, [r3, #4]
 8015aa4:	4413      	add	r3, r2
 8015aa6:	b29a      	uxth	r2, r3
 8015aa8:	4b03      	ldr	r3, [pc, #12]	; (8015ab8 <LCD_ClearLine+0x4c>)
 8015aaa:	681b      	ldr	r3, [r3, #0]
 8015aac:	889b      	ldrh	r3, [r3, #4]
 8015aae:	429a      	cmp	r2, r3
 8015ab0:	dae4      	bge.n	8015a7c <LCD_ClearLine+0x10>
    /* Display one character on LCD */
    LCD_DisplayChar(Line, refcolumn, ' ');
    /* Decrement the column position by 16 */
    refcolumn += LCD_Currentfonts->Width;
  }
}
 8015ab2:	3710      	adds	r7, #16
 8015ab4:	46bd      	mov	sp, r7
 8015ab6:	bd80      	pop	{r7, pc}
 8015ab8:	20005348 	.word	0x20005348

08015abc <LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background.
  * @retval None
  */
void LCD_Clear(uint16_t Color)
{
 8015abc:	b480      	push	{r7}
 8015abe:	b085      	sub	sp, #20
 8015ac0:	af00      	add	r7, sp, #0
 8015ac2:	4603      	mov	r3, r0
 8015ac4:	80fb      	strh	r3, [r7, #6]
  uint32_t index = 0;
 8015ac6:	2300      	movs	r3, #0
 8015ac8:	60fb      	str	r3, [r7, #12]
  
  /* erase memory */
  for (index = 0x00; index < BUFFER_OFFSET; index++)
 8015aca:	2300      	movs	r3, #0
 8015acc:	60fb      	str	r3, [r7, #12]
 8015ace:	e009      	b.n	8015ae4 <LCD_Clear+0x28>
  {
    *(__IO uint16_t*)(CurrentFrameBuffer + (2*index)) = Color;
 8015ad0:	68fb      	ldr	r3, [r7, #12]
 8015ad2:	005a      	lsls	r2, r3, #1
 8015ad4:	4b08      	ldr	r3, [pc, #32]	; (8015af8 <LCD_Clear+0x3c>)
 8015ad6:	681b      	ldr	r3, [r3, #0]
 8015ad8:	4413      	add	r3, r2
 8015ada:	88fa      	ldrh	r2, [r7, #6]
 8015adc:	801a      	strh	r2, [r3, #0]
void LCD_Clear(uint16_t Color)
{
  uint32_t index = 0;
  
  /* erase memory */
  for (index = 0x00; index < BUFFER_OFFSET; index++)
 8015ade:	68fb      	ldr	r3, [r7, #12]
 8015ae0:	3301      	adds	r3, #1
 8015ae2:	60fb      	str	r3, [r7, #12]
 8015ae4:	68fb      	ldr	r3, [r7, #12]
 8015ae6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8015aea:	d3f1      	bcc.n	8015ad0 <LCD_Clear+0x14>
  {
    *(__IO uint16_t*)(CurrentFrameBuffer + (2*index)) = Color;
  } 
}
 8015aec:	3714      	adds	r7, #20
 8015aee:	46bd      	mov	sp, r7
 8015af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015af4:	4770      	bx	lr
 8015af6:	bf00      	nop
 8015af8:	200000b8 	.word	0x200000b8

08015afc <LCD_SetCursor>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position. 
  * @retval Display Address
  */
uint32_t LCD_SetCursor(uint16_t Xpos, uint16_t Ypos)
{  
 8015afc:	b480      	push	{r7}
 8015afe:	b083      	sub	sp, #12
 8015b00:	af00      	add	r7, sp, #0
 8015b02:	4602      	mov	r2, r0
 8015b04:	460b      	mov	r3, r1
 8015b06:	80fa      	strh	r2, [r7, #6]
 8015b08:	80bb      	strh	r3, [r7, #4]
  return CurrentFrameBuffer + 2*(Xpos + (LCD_PIXEL_WIDTH*Ypos));
 8015b0a:	88f9      	ldrh	r1, [r7, #6]
 8015b0c:	88ba      	ldrh	r2, [r7, #4]
 8015b0e:	4613      	mov	r3, r2
 8015b10:	011b      	lsls	r3, r3, #4
 8015b12:	1a9b      	subs	r3, r3, r2
 8015b14:	011b      	lsls	r3, r3, #4
 8015b16:	440b      	add	r3, r1
 8015b18:	005b      	lsls	r3, r3, #1
 8015b1a:	461a      	mov	r2, r3
 8015b1c:	4b04      	ldr	r3, [pc, #16]	; (8015b30 <LCD_SetCursor+0x34>)
 8015b1e:	681b      	ldr	r3, [r3, #0]
 8015b20:	4413      	add	r3, r2
}
 8015b22:	4618      	mov	r0, r3
 8015b24:	370c      	adds	r7, #12
 8015b26:	46bd      	mov	sp, r7
 8015b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b2c:	4770      	bx	lr
 8015b2e:	bf00      	nop
 8015b30:	200000b8 	.word	0x200000b8

08015b34 <LCD_SetColorKeying>:
  * @brief  Config and Sets the color Keying.
  * @param  RGBValue: Specifies the Color reference. 
  * @retval None
  */
void LCD_SetColorKeying(uint32_t RGBValue)
{  
 8015b34:	b580      	push	{r7, lr}
 8015b36:	b086      	sub	sp, #24
 8015b38:	af00      	add	r7, sp, #0
 8015b3a:	6078      	str	r0, [r7, #4]
  LTDC_ColorKeying_InitTypeDef   LTDC_colorkeying_InitStruct;
  
  /* configure the color Keying */
  LTDC_colorkeying_InitStruct.LTDC_ColorKeyBlue = 0x0000FF & RGBValue;
 8015b3c:	687b      	ldr	r3, [r7, #4]
 8015b3e:	b2db      	uxtb	r3, r3
 8015b40:	60fb      	str	r3, [r7, #12]
  LTDC_colorkeying_InitStruct.LTDC_ColorKeyGreen = (0x00FF00 & RGBValue) >> 8;
 8015b42:	687b      	ldr	r3, [r7, #4]
 8015b44:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8015b48:	0a1b      	lsrs	r3, r3, #8
 8015b4a:	613b      	str	r3, [r7, #16]
  LTDC_colorkeying_InitStruct.LTDC_ColorKeyRed = (0xFF0000 & RGBValue) >> 16;  
 8015b4c:	687b      	ldr	r3, [r7, #4]
 8015b4e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8015b52:	0c1b      	lsrs	r3, r3, #16
 8015b54:	617b      	str	r3, [r7, #20]

  if (CurrentLayer == LCD_BACKGROUND_LAYER)
 8015b56:	4b0e      	ldr	r3, [pc, #56]	; (8015b90 <LCD_SetColorKeying+0x5c>)
 8015b58:	681b      	ldr	r3, [r3, #0]
 8015b5a:	2b00      	cmp	r3, #0
 8015b5c:	d10a      	bne.n	8015b74 <LCD_SetColorKeying+0x40>
  {   
    /* Enable the color Keying for Layer1 */
    LTDC_ColorKeyingConfig(LTDC_Layer1, &LTDC_colorkeying_InitStruct, ENABLE);
 8015b5e:	f107 030c 	add.w	r3, r7, #12
 8015b62:	480c      	ldr	r0, [pc, #48]	; (8015b94 <LCD_SetColorKeying+0x60>)
 8015b64:	4619      	mov	r1, r3
 8015b66:	2201      	movs	r2, #1
 8015b68:	f7f9 f890 	bl	800ec8c <LTDC_ColorKeyingConfig>
    LTDC_ReloadConfig(LTDC_IMReload);
 8015b6c:	2001      	movs	r0, #1
 8015b6e:	f7f8 ff47 	bl	800ea00 <LTDC_ReloadConfig>
 8015b72:	e009      	b.n	8015b88 <LCD_SetColorKeying+0x54>
  }
  else
  {
    /* Enable the color Keying for Layer2 */
    LTDC_ColorKeyingConfig(LTDC_Layer2, &LTDC_colorkeying_InitStruct, ENABLE);
 8015b74:	f107 030c 	add.w	r3, r7, #12
 8015b78:	4807      	ldr	r0, [pc, #28]	; (8015b98 <LCD_SetColorKeying+0x64>)
 8015b7a:	4619      	mov	r1, r3
 8015b7c:	2201      	movs	r2, #1
 8015b7e:	f7f9 f885 	bl	800ec8c <LTDC_ColorKeyingConfig>
    LTDC_ReloadConfig(LTDC_IMReload);
 8015b82:	2001      	movs	r0, #1
 8015b84:	f7f8 ff3c 	bl	800ea00 <LTDC_ReloadConfig>
  }
}
 8015b88:	3718      	adds	r7, #24
 8015b8a:	46bd      	mov	sp, r7
 8015b8c:	bd80      	pop	{r7, pc}
 8015b8e:	bf00      	nop
 8015b90:	20005350 	.word	0x20005350
 8015b94:	40016884 	.word	0x40016884
 8015b98:	40016904 	.word	0x40016904

08015b9c <LCD_ReSetColorKeying>:
  * @brief  Disable the color Keying.
  * @param  RGBValue: Specifies the Color reference. 
  * @retval None
  */
void LCD_ReSetColorKeying(void)
{
 8015b9c:	b580      	push	{r7, lr}
 8015b9e:	b084      	sub	sp, #16
 8015ba0:	af00      	add	r7, sp, #0
  LTDC_ColorKeying_InitTypeDef   LTDC_colorkeying_InitStruct;
  
  if (CurrentLayer == LCD_BACKGROUND_LAYER)
 8015ba2:	4b0d      	ldr	r3, [pc, #52]	; (8015bd8 <LCD_ReSetColorKeying+0x3c>)
 8015ba4:	681b      	ldr	r3, [r3, #0]
 8015ba6:	2b00      	cmp	r3, #0
 8015ba8:	d109      	bne.n	8015bbe <LCD_ReSetColorKeying+0x22>
  {   
    /* Disable the color Keying for Layer1 */
    LTDC_ColorKeyingConfig(LTDC_Layer1, &LTDC_colorkeying_InitStruct, DISABLE);
 8015baa:	1d3b      	adds	r3, r7, #4
 8015bac:	480b      	ldr	r0, [pc, #44]	; (8015bdc <LCD_ReSetColorKeying+0x40>)
 8015bae:	4619      	mov	r1, r3
 8015bb0:	2200      	movs	r2, #0
 8015bb2:	f7f9 f86b 	bl	800ec8c <LTDC_ColorKeyingConfig>
    LTDC_ReloadConfig(LTDC_IMReload);
 8015bb6:	2001      	movs	r0, #1
 8015bb8:	f7f8 ff22 	bl	800ea00 <LTDC_ReloadConfig>
 8015bbc:	e008      	b.n	8015bd0 <LCD_ReSetColorKeying+0x34>
  }
  else
  {
    /* Disable the color Keying for Layer2 */
    LTDC_ColorKeyingConfig(LTDC_Layer2, &LTDC_colorkeying_InitStruct, DISABLE);
 8015bbe:	1d3b      	adds	r3, r7, #4
 8015bc0:	4807      	ldr	r0, [pc, #28]	; (8015be0 <LCD_ReSetColorKeying+0x44>)
 8015bc2:	4619      	mov	r1, r3
 8015bc4:	2200      	movs	r2, #0
 8015bc6:	f7f9 f861 	bl	800ec8c <LTDC_ColorKeyingConfig>
    LTDC_ReloadConfig(LTDC_IMReload);
 8015bca:	2001      	movs	r0, #1
 8015bcc:	f7f8 ff18 	bl	800ea00 <LTDC_ReloadConfig>
  }
} 
 8015bd0:	3710      	adds	r7, #16
 8015bd2:	46bd      	mov	sp, r7
 8015bd4:	bd80      	pop	{r7, pc}
 8015bd6:	bf00      	nop
 8015bd8:	20005350 	.word	0x20005350
 8015bdc:	40016884 	.word	0x40016884
 8015be0:	40016904 	.word	0x40016904

08015be4 <LCD_DrawChar>:
  * @param  Ypos: start column address.
  * @param  c: pointer to the character data.
  * @retval None
  */
void LCD_DrawChar(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 8015be4:	b480      	push	{r7}
 8015be6:	b087      	sub	sp, #28
 8015be8:	af00      	add	r7, sp, #0
 8015bea:	460b      	mov	r3, r1
 8015bec:	603a      	str	r2, [r7, #0]
 8015bee:	4602      	mov	r2, r0
 8015bf0:	80fa      	strh	r2, [r7, #6]
 8015bf2:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0, xpos =0;
 8015bf4:	2300      	movs	r3, #0
 8015bf6:	617b      	str	r3, [r7, #20]
 8015bf8:	2300      	movs	r3, #0
 8015bfa:	613b      	str	r3, [r7, #16]
 8015bfc:	2300      	movs	r3, #0
 8015bfe:	60bb      	str	r3, [r7, #8]
  uint32_t  Xaddress = 0;
 8015c00:	2300      	movs	r3, #0
 8015c02:	60fb      	str	r3, [r7, #12]
  
  xpos = Xpos*LCD_PIXEL_WIDTH*2;
 8015c04:	88fa      	ldrh	r2, [r7, #6]
 8015c06:	4613      	mov	r3, r2
 8015c08:	011b      	lsls	r3, r3, #4
 8015c0a:	1a9b      	subs	r3, r3, r2
 8015c0c:	015b      	lsls	r3, r3, #5
 8015c0e:	60bb      	str	r3, [r7, #8]
  Xaddress += Ypos;
 8015c10:	88bb      	ldrh	r3, [r7, #4]
 8015c12:	68fa      	ldr	r2, [r7, #12]
 8015c14:	4413      	add	r3, r2
 8015c16:	60fb      	str	r3, [r7, #12]
  
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8015c18:	2300      	movs	r3, #0
 8015c1a:	617b      	str	r3, [r7, #20]
 8015c1c:	e05c      	b.n	8015cd8 <LCD_DrawChar+0xf4>
  {
    
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8015c1e:	2300      	movs	r3, #0
 8015c20:	613b      	str	r3, [r7, #16]
 8015c22:	e048      	b.n	8015cb6 <LCD_DrawChar+0xd2>
    {
          
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) &&(LCD_Currentfonts->Width <= 12))||
 8015c24:	697b      	ldr	r3, [r7, #20]
 8015c26:	005b      	lsls	r3, r3, #1
 8015c28:	683a      	ldr	r2, [r7, #0]
 8015c2a:	4413      	add	r3, r2
 8015c2c:	881b      	ldrh	r3, [r3, #0]
 8015c2e:	461a      	mov	r2, r3
 8015c30:	4b2f      	ldr	r3, [pc, #188]	; (8015cf0 <LCD_DrawChar+0x10c>)
 8015c32:	681b      	ldr	r3, [r3, #0]
 8015c34:	8899      	ldrh	r1, [r3, #4]
 8015c36:	4b2f      	ldr	r3, [pc, #188]	; (8015cf4 <LCD_DrawChar+0x110>)
 8015c38:	fba3 0301 	umull	r0, r3, r3, r1
 8015c3c:	08db      	lsrs	r3, r3, #3
 8015c3e:	b29b      	uxth	r3, r3
 8015c40:	00db      	lsls	r3, r3, #3
 8015c42:	2180      	movs	r1, #128	; 0x80
 8015c44:	4099      	lsls	r1, r3
 8015c46:	693b      	ldr	r3, [r7, #16]
 8015c48:	fa41 f303 	asr.w	r3, r1, r3
 8015c4c:	4013      	ands	r3, r2
 8015c4e:	2b00      	cmp	r3, #0
 8015c50:	d104      	bne.n	8015c5c <LCD_DrawChar+0x78>
 8015c52:	4b27      	ldr	r3, [pc, #156]	; (8015cf0 <LCD_DrawChar+0x10c>)
 8015c54:	681b      	ldr	r3, [r3, #0]
 8015c56:	889b      	ldrh	r3, [r3, #4]
 8015c58:	2b0c      	cmp	r3, #12
 8015c5a:	d911      	bls.n	8015c80 <LCD_DrawChar+0x9c>
        (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 8015c5c:	697b      	ldr	r3, [r7, #20]
 8015c5e:	005b      	lsls	r3, r3, #1
 8015c60:	683a      	ldr	r2, [r7, #0]
 8015c62:	4413      	add	r3, r2
 8015c64:	881b      	ldrh	r3, [r3, #0]
 8015c66:	461a      	mov	r2, r3
 8015c68:	693b      	ldr	r3, [r7, #16]
 8015c6a:	fa42 f303 	asr.w	r3, r2, r3
 8015c6e:	f003 0301 	and.w	r3, r3, #1
  {
    
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
    {
          
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) &&(LCD_Currentfonts->Width <= 12))||
 8015c72:	2b00      	cmp	r3, #0
 8015c74:	d10f      	bne.n	8015c96 <LCD_DrawChar+0xb2>
        (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 8015c76:	4b1e      	ldr	r3, [pc, #120]	; (8015cf0 <LCD_DrawChar+0x10c>)
 8015c78:	681b      	ldr	r3, [r3, #0]
 8015c7a:	889b      	ldrh	r3, [r3, #4]
 8015c7c:	2b0c      	cmp	r3, #12
 8015c7e:	d90a      	bls.n	8015c96 <LCD_DrawChar+0xb2>
      {
          /* Write data value to all SDRAM memory */
         *(__IO uint16_t*) (CurrentFrameBuffer + (2*Xaddress) + xpos) = CurrentBackColor;
 8015c80:	68fb      	ldr	r3, [r7, #12]
 8015c82:	005a      	lsls	r2, r3, #1
 8015c84:	4b1c      	ldr	r3, [pc, #112]	; (8015cf8 <LCD_DrawChar+0x114>)
 8015c86:	681b      	ldr	r3, [r3, #0]
 8015c88:	441a      	add	r2, r3
 8015c8a:	68bb      	ldr	r3, [r7, #8]
 8015c8c:	4413      	add	r3, r2
 8015c8e:	4a1b      	ldr	r2, [pc, #108]	; (8015cfc <LCD_DrawChar+0x118>)
 8015c90:	8812      	ldrh	r2, [r2, #0]
 8015c92:	801a      	strh	r2, [r3, #0]
 8015c94:	e009      	b.n	8015caa <LCD_DrawChar+0xc6>
      }
      else
      {
          /* Write data value to all SDRAM memory */
         *(__IO uint16_t*) (CurrentFrameBuffer + (2*Xaddress) + xpos) = CurrentTextColor;         
 8015c96:	68fb      	ldr	r3, [r7, #12]
 8015c98:	005a      	lsls	r2, r3, #1
 8015c9a:	4b17      	ldr	r3, [pc, #92]	; (8015cf8 <LCD_DrawChar+0x114>)
 8015c9c:	681b      	ldr	r3, [r3, #0]
 8015c9e:	441a      	add	r2, r3
 8015ca0:	68bb      	ldr	r3, [r7, #8]
 8015ca2:	4413      	add	r3, r2
 8015ca4:	4a16      	ldr	r2, [pc, #88]	; (8015d00 <LCD_DrawChar+0x11c>)
 8015ca6:	8812      	ldrh	r2, [r2, #0]
 8015ca8:	801a      	strh	r2, [r3, #0]
      }
      Xaddress++;
 8015caa:	68fb      	ldr	r3, [r7, #12]
 8015cac:	3301      	adds	r3, #1
 8015cae:	60fb      	str	r3, [r7, #12]
  Xaddress += Ypos;
  
  for(index = 0; index < LCD_Currentfonts->Height; index++)
  {
    
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8015cb0:	693b      	ldr	r3, [r7, #16]
 8015cb2:	3301      	adds	r3, #1
 8015cb4:	613b      	str	r3, [r7, #16]
 8015cb6:	4b0e      	ldr	r3, [pc, #56]	; (8015cf0 <LCD_DrawChar+0x10c>)
 8015cb8:	681b      	ldr	r3, [r3, #0]
 8015cba:	889b      	ldrh	r3, [r3, #4]
 8015cbc:	461a      	mov	r2, r3
 8015cbe:	693b      	ldr	r3, [r7, #16]
 8015cc0:	429a      	cmp	r2, r3
 8015cc2:	d8af      	bhi.n	8015c24 <LCD_DrawChar+0x40>
          /* Write data value to all SDRAM memory */
         *(__IO uint16_t*) (CurrentFrameBuffer + (2*Xaddress) + xpos) = CurrentTextColor;         
      }
      Xaddress++;
    }
      Xaddress += (LCD_PIXEL_WIDTH - LCD_Currentfonts->Width);
 8015cc4:	4b0a      	ldr	r3, [pc, #40]	; (8015cf0 <LCD_DrawChar+0x10c>)
 8015cc6:	681b      	ldr	r3, [r3, #0]
 8015cc8:	889b      	ldrh	r3, [r3, #4]
 8015cca:	68fa      	ldr	r2, [r7, #12]
 8015ccc:	1ad3      	subs	r3, r2, r3
 8015cce:	33f0      	adds	r3, #240	; 0xf0
 8015cd0:	60fb      	str	r3, [r7, #12]
  uint32_t  Xaddress = 0;
  
  xpos = Xpos*LCD_PIXEL_WIDTH*2;
  Xaddress += Ypos;
  
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8015cd2:	697b      	ldr	r3, [r7, #20]
 8015cd4:	3301      	adds	r3, #1
 8015cd6:	617b      	str	r3, [r7, #20]
 8015cd8:	4b05      	ldr	r3, [pc, #20]	; (8015cf0 <LCD_DrawChar+0x10c>)
 8015cda:	681b      	ldr	r3, [r3, #0]
 8015cdc:	88db      	ldrh	r3, [r3, #6]
 8015cde:	461a      	mov	r2, r3
 8015ce0:	697b      	ldr	r3, [r7, #20]
 8015ce2:	429a      	cmp	r2, r3
 8015ce4:	d89b      	bhi.n	8015c1e <LCD_DrawChar+0x3a>
      }
      Xaddress++;
    }
      Xaddress += (LCD_PIXEL_WIDTH - LCD_Currentfonts->Width);
  }
}
 8015ce6:	371c      	adds	r7, #28
 8015ce8:	46bd      	mov	sp, r7
 8015cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cee:	4770      	bx	lr
 8015cf0:	20005348 	.word	0x20005348
 8015cf4:	aaaaaaab 	.word	0xaaaaaaab
 8015cf8:	200000b8 	.word	0x200000b8
 8015cfc:	200000b4 	.word	0x200000b4
 8015d00:	2000534c 	.word	0x2000534c

08015d04 <LCD_DisplayChar>:
  * @param  Column: start column address.
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E.
  * @retval None
  */
void LCD_DisplayChar(uint16_t Line, uint16_t Column, uint8_t Ascii)
{
 8015d04:	b580      	push	{r7, lr}
 8015d06:	b082      	sub	sp, #8
 8015d08:	af00      	add	r7, sp, #0
 8015d0a:	4613      	mov	r3, r2
 8015d0c:	4602      	mov	r2, r0
 8015d0e:	80fa      	strh	r2, [r7, #6]
 8015d10:	460a      	mov	r2, r1
 8015d12:	80ba      	strh	r2, [r7, #4]
 8015d14:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 8015d16:	78fb      	ldrb	r3, [r7, #3]
 8015d18:	3b20      	subs	r3, #32
 8015d1a:	70fb      	strb	r3, [r7, #3]

  LCD_DrawChar(Line, Column, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 8015d1c:	4b0a      	ldr	r3, [pc, #40]	; (8015d48 <LCD_DisplayChar+0x44>)
 8015d1e:	681b      	ldr	r3, [r3, #0]
 8015d20:	681a      	ldr	r2, [r3, #0]
 8015d22:	78fb      	ldrb	r3, [r7, #3]
 8015d24:	4908      	ldr	r1, [pc, #32]	; (8015d48 <LCD_DisplayChar+0x44>)
 8015d26:	6809      	ldr	r1, [r1, #0]
 8015d28:	88c9      	ldrh	r1, [r1, #6]
 8015d2a:	fb01 f303 	mul.w	r3, r1, r3
 8015d2e:	005b      	lsls	r3, r3, #1
 8015d30:	4413      	add	r3, r2
 8015d32:	88f9      	ldrh	r1, [r7, #6]
 8015d34:	88ba      	ldrh	r2, [r7, #4]
 8015d36:	4608      	mov	r0, r1
 8015d38:	4611      	mov	r1, r2
 8015d3a:	461a      	mov	r2, r3
 8015d3c:	f7ff ff52 	bl	8015be4 <LCD_DrawChar>
}
 8015d40:	3708      	adds	r7, #8
 8015d42:	46bd      	mov	sp, r7
 8015d44:	bd80      	pop	{r7, pc}
 8015d46:	bf00      	nop
 8015d48:	20005348 	.word	0x20005348

08015d4c <LCD_DisplayStringLine>:
  *     @arg Linex: where x can be 0..9
  * @param  *ptr: pointer to string to display on LCD.
  * @retval None
  */
void LCD_DisplayStringLine(uint16_t Line, uint8_t *ptr)
{  
 8015d4c:	b580      	push	{r7, lr}
 8015d4e:	b084      	sub	sp, #16
 8015d50:	af00      	add	r7, sp, #0
 8015d52:	4603      	mov	r3, r0
 8015d54:	6039      	str	r1, [r7, #0]
 8015d56:	80fb      	strh	r3, [r7, #6]
  uint16_t refcolumn = 0;
 8015d58:	2300      	movs	r3, #0
 8015d5a:	81fb      	strh	r3, [r7, #14]
  /* Send the string character by character on lCD */
  while ((refcolumn < LCD_PIXEL_WIDTH) && ((*ptr != 0) & (((refcolumn + LCD_Currentfonts->Width) & 0xFFFF) >= LCD_Currentfonts->Width)))
 8015d5c:	e011      	b.n	8015d82 <LCD_DisplayStringLine+0x36>
  {
    /* Display one character on LCD */
    LCD_DisplayChar(Line, refcolumn, *ptr);
 8015d5e:	683b      	ldr	r3, [r7, #0]
 8015d60:	781b      	ldrb	r3, [r3, #0]
 8015d62:	88f9      	ldrh	r1, [r7, #6]
 8015d64:	89fa      	ldrh	r2, [r7, #14]
 8015d66:	4608      	mov	r0, r1
 8015d68:	4611      	mov	r1, r2
 8015d6a:	461a      	mov	r2, r3
 8015d6c:	f7ff ffca 	bl	8015d04 <LCD_DisplayChar>
    /* Decrement the column position by width */
    refcolumn += LCD_Currentfonts->Width;
 8015d70:	4b13      	ldr	r3, [pc, #76]	; (8015dc0 <LCD_DisplayStringLine+0x74>)
 8015d72:	681b      	ldr	r3, [r3, #0]
 8015d74:	889a      	ldrh	r2, [r3, #4]
 8015d76:	89fb      	ldrh	r3, [r7, #14]
 8015d78:	4413      	add	r3, r2
 8015d7a:	81fb      	strh	r3, [r7, #14]
    /* Point on the next character */
    ptr++;
 8015d7c:	683b      	ldr	r3, [r7, #0]
 8015d7e:	3301      	adds	r3, #1
 8015d80:	603b      	str	r3, [r7, #0]
  */
void LCD_DisplayStringLine(uint16_t Line, uint8_t *ptr)
{  
  uint16_t refcolumn = 0;
  /* Send the string character by character on lCD */
  while ((refcolumn < LCD_PIXEL_WIDTH) && ((*ptr != 0) & (((refcolumn + LCD_Currentfonts->Width) & 0xFFFF) >= LCD_Currentfonts->Width)))
 8015d82:	89fb      	ldrh	r3, [r7, #14]
 8015d84:	2bef      	cmp	r3, #239	; 0xef
 8015d86:	d818      	bhi.n	8015dba <LCD_DisplayStringLine+0x6e>
 8015d88:	683b      	ldr	r3, [r7, #0]
 8015d8a:	781b      	ldrb	r3, [r3, #0]
 8015d8c:	2b00      	cmp	r3, #0
 8015d8e:	bf0c      	ite	eq
 8015d90:	2300      	moveq	r3, #0
 8015d92:	2301      	movne	r3, #1
 8015d94:	b2da      	uxtb	r2, r3
 8015d96:	89f9      	ldrh	r1, [r7, #14]
 8015d98:	4b09      	ldr	r3, [pc, #36]	; (8015dc0 <LCD_DisplayStringLine+0x74>)
 8015d9a:	681b      	ldr	r3, [r3, #0]
 8015d9c:	889b      	ldrh	r3, [r3, #4]
 8015d9e:	440b      	add	r3, r1
 8015da0:	b299      	uxth	r1, r3
 8015da2:	4b07      	ldr	r3, [pc, #28]	; (8015dc0 <LCD_DisplayStringLine+0x74>)
 8015da4:	681b      	ldr	r3, [r3, #0]
 8015da6:	889b      	ldrh	r3, [r3, #4]
 8015da8:	4299      	cmp	r1, r3
 8015daa:	bfb4      	ite	lt
 8015dac:	2300      	movlt	r3, #0
 8015dae:	2301      	movge	r3, #1
 8015db0:	b2db      	uxtb	r3, r3
 8015db2:	4013      	ands	r3, r2
 8015db4:	b2db      	uxtb	r3, r3
 8015db6:	2b00      	cmp	r3, #0
 8015db8:	d1d1      	bne.n	8015d5e <LCD_DisplayStringLine+0x12>
    /* Decrement the column position by width */
    refcolumn += LCD_Currentfonts->Width;
    /* Point on the next character */
    ptr++;
  }
}
 8015dba:	3710      	adds	r7, #16
 8015dbc:	46bd      	mov	sp, r7
 8015dbe:	bd80      	pop	{r7, pc}
 8015dc0:	20005348 	.word	0x20005348

08015dc4 <LCD_SetDisplayWindow>:
  * @param  Height: display window height, can be a value from 0 to 320.
  * @param  Width: display window width, can be a value from 0 to 240.
  * @retval None
  */
void LCD_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Height, uint16_t Width)
{
 8015dc4:	b580      	push	{r7, lr}
 8015dc6:	b082      	sub	sp, #8
 8015dc8:	af00      	add	r7, sp, #0
 8015dca:	80f8      	strh	r0, [r7, #6]
 8015dcc:	80b9      	strh	r1, [r7, #4]
 8015dce:	807a      	strh	r2, [r7, #2]
 8015dd0:	803b      	strh	r3, [r7, #0]

  if (CurrentLayer == LCD_BACKGROUND_LAYER)
 8015dd2:	4b18      	ldr	r3, [pc, #96]	; (8015e34 <LCD_SetDisplayWindow+0x70>)
 8015dd4:	681b      	ldr	r3, [r3, #0]
 8015dd6:	2b00      	cmp	r3, #0
 8015dd8:	d114      	bne.n	8015e04 <LCD_SetDisplayWindow+0x40>
  { 
    /* reconfigure the layer1 position */
    LTDC_LayerPosition(LTDC_Layer1, Xpos, Ypos);
 8015dda:	88fa      	ldrh	r2, [r7, #6]
 8015ddc:	88bb      	ldrh	r3, [r7, #4]
 8015dde:	4816      	ldr	r0, [pc, #88]	; (8015e38 <LCD_SetDisplayWindow+0x74>)
 8015de0:	4611      	mov	r1, r2
 8015de2:	461a      	mov	r2, r3
 8015de4:	f7f8 fffe 	bl	800ede4 <LTDC_LayerPosition>
    LTDC_ReloadConfig(LTDC_IMReload);
 8015de8:	2001      	movs	r0, #1
 8015dea:	f7f8 fe09 	bl	800ea00 <LTDC_ReloadConfig>
    
    /* reconfigure the layer1 size */
    LTDC_LayerSize(LTDC_Layer1, Width, Height);
 8015dee:	883a      	ldrh	r2, [r7, #0]
 8015df0:	887b      	ldrh	r3, [r7, #2]
 8015df2:	4811      	ldr	r0, [pc, #68]	; (8015e38 <LCD_SetDisplayWindow+0x74>)
 8015df4:	4611      	mov	r1, r2
 8015df6:	461a      	mov	r2, r3
 8015df8:	f7f9 f87e 	bl	800eef8 <LTDC_LayerSize>
    LTDC_ReloadConfig(LTDC_IMReload);
 8015dfc:	2001      	movs	r0, #1
 8015dfe:	f7f8 fdff 	bl	800ea00 <LTDC_ReloadConfig>
 8015e02:	e013      	b.n	8015e2c <LCD_SetDisplayWindow+0x68>
 }
 else
 {   
    /* reconfigure the layer2 position */
    LTDC_LayerPosition(LTDC_Layer2, Xpos, Ypos);
 8015e04:	88fa      	ldrh	r2, [r7, #6]
 8015e06:	88bb      	ldrh	r3, [r7, #4]
 8015e08:	480c      	ldr	r0, [pc, #48]	; (8015e3c <LCD_SetDisplayWindow+0x78>)
 8015e0a:	4611      	mov	r1, r2
 8015e0c:	461a      	mov	r2, r3
 8015e0e:	f7f8 ffe9 	bl	800ede4 <LTDC_LayerPosition>
    LTDC_ReloadConfig(LTDC_IMReload); 
 8015e12:	2001      	movs	r0, #1
 8015e14:	f7f8 fdf4 	bl	800ea00 <LTDC_ReloadConfig>
   
   /* reconfigure the layer2 size */
    LTDC_LayerSize(LTDC_Layer2, Width, Height);
 8015e18:	883a      	ldrh	r2, [r7, #0]
 8015e1a:	887b      	ldrh	r3, [r7, #2]
 8015e1c:	4807      	ldr	r0, [pc, #28]	; (8015e3c <LCD_SetDisplayWindow+0x78>)
 8015e1e:	4611      	mov	r1, r2
 8015e20:	461a      	mov	r2, r3
 8015e22:	f7f9 f869 	bl	800eef8 <LTDC_LayerSize>
    LTDC_ReloadConfig(LTDC_IMReload);
 8015e26:	2001      	movs	r0, #1
 8015e28:	f7f8 fdea 	bl	800ea00 <LTDC_ReloadConfig>
  }
}
 8015e2c:	3708      	adds	r7, #8
 8015e2e:	46bd      	mov	sp, r7
 8015e30:	bd80      	pop	{r7, pc}
 8015e32:	bf00      	nop
 8015e34:	20005350 	.word	0x20005350
 8015e38:	40016884 	.word	0x40016884
 8015e3c:	40016904 	.word	0x40016904

08015e40 <LCD_WindowModeDisable>:
  * @brief  Disables LCD Window mode.
  * @param  None
  * @retval None
  */
void LCD_WindowModeDisable(void)
{
 8015e40:	b580      	push	{r7, lr}
 8015e42:	af00      	add	r7, sp, #0
  LCD_SetDisplayWindow(0, 0, LCD_PIXEL_HEIGHT, LCD_PIXEL_WIDTH); 
 8015e44:	2000      	movs	r0, #0
 8015e46:	2100      	movs	r1, #0
 8015e48:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8015e4c:	23f0      	movs	r3, #240	; 0xf0
 8015e4e:	f7ff ffb9 	bl	8015dc4 <LCD_SetDisplayWindow>
}
 8015e52:	bd80      	pop	{r7, pc}

08015e54 <LCD_DrawLine>:
  * @param Direction: line direction.
  *   This parameter can be one of the following values: LCD_DIR_HORIZONTAL or LCD_DIR_VERTICAL.
  * @retval None
  */
void LCD_DrawLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length, uint8_t Direction)
{
 8015e54:	b580      	push	{r7, lr}
 8015e56:	b090      	sub	sp, #64	; 0x40
 8015e58:	af00      	add	r7, sp, #0
 8015e5a:	80f8      	strh	r0, [r7, #6]
 8015e5c:	80b9      	strh	r1, [r7, #4]
 8015e5e:	807a      	strh	r2, [r7, #2]
 8015e60:	707b      	strb	r3, [r7, #1]
  DMA2D_InitTypeDef      DMA2D_InitStruct;
  
  uint32_t  Xaddress = 0;
 8015e62:	2300      	movs	r3, #0
 8015e64:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t Red_Value = 0, Green_Value = 0, Blue_Value = 0;
 8015e66:	2300      	movs	r3, #0
 8015e68:	877b      	strh	r3, [r7, #58]	; 0x3a
 8015e6a:	2300      	movs	r3, #0
 8015e6c:	873b      	strh	r3, [r7, #56]	; 0x38
 8015e6e:	2300      	movs	r3, #0
 8015e70:	86fb      	strh	r3, [r7, #54]	; 0x36
  
  Xaddress = CurrentFrameBuffer + 2*(LCD_PIXEL_WIDTH*Ypos + Xpos);
 8015e72:	88ba      	ldrh	r2, [r7, #4]
 8015e74:	4613      	mov	r3, r2
 8015e76:	011b      	lsls	r3, r3, #4
 8015e78:	1a9b      	subs	r3, r3, r2
 8015e7a:	011b      	lsls	r3, r3, #4
 8015e7c:	461a      	mov	r2, r3
 8015e7e:	88fb      	ldrh	r3, [r7, #6]
 8015e80:	4413      	add	r3, r2
 8015e82:	005b      	lsls	r3, r3, #1
 8015e84:	461a      	mov	r2, r3
 8015e86:	4b23      	ldr	r3, [pc, #140]	; (8015f14 <LCD_DrawLine+0xc0>)
 8015e88:	681b      	ldr	r3, [r3, #0]
 8015e8a:	4413      	add	r3, r2
 8015e8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 
  Red_Value = (0xF800 & CurrentTextColor) >> 11;
 8015e8e:	4b22      	ldr	r3, [pc, #136]	; (8015f18 <LCD_DrawLine+0xc4>)
 8015e90:	881b      	ldrh	r3, [r3, #0]
 8015e92:	0adb      	lsrs	r3, r3, #11
 8015e94:	877b      	strh	r3, [r7, #58]	; 0x3a
  Blue_Value = 0x001F & CurrentTextColor;
 8015e96:	4b20      	ldr	r3, [pc, #128]	; (8015f18 <LCD_DrawLine+0xc4>)
 8015e98:	881b      	ldrh	r3, [r3, #0]
 8015e9a:	f003 031f 	and.w	r3, r3, #31
 8015e9e:	86fb      	strh	r3, [r7, #54]	; 0x36
  Green_Value = (0x07E0 & CurrentTextColor) >> 5;
 8015ea0:	4b1d      	ldr	r3, [pc, #116]	; (8015f18 <LCD_DrawLine+0xc4>)
 8015ea2:	881b      	ldrh	r3, [r3, #0]
 8015ea4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8015ea8:	b29b      	uxth	r3, r3
 8015eaa:	095b      	lsrs	r3, r3, #5
 8015eac:	873b      	strh	r3, [r7, #56]	; 0x38

  /* Configure DMA2D */    
  DMA2D_DeInit();  
 8015eae:	f7f4 fb7b 	bl	800a5a8 <DMA2D_DeInit>
  DMA2D_InitStruct.DMA2D_Mode = DMA2D_R2M;       
 8015eb2:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8015eb6:	60fb      	str	r3, [r7, #12]
  DMA2D_InitStruct.DMA2D_CMode = DMA2D_RGB565;      
 8015eb8:	2302      	movs	r3, #2
 8015eba:	613b      	str	r3, [r7, #16]
  DMA2D_InitStruct.DMA2D_OutputGreen = Green_Value;      
 8015ebc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8015ebe:	61bb      	str	r3, [r7, #24]
  DMA2D_InitStruct.DMA2D_OutputBlue = Blue_Value;     
 8015ec0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8015ec2:	617b      	str	r3, [r7, #20]
  DMA2D_InitStruct.DMA2D_OutputRed = Red_Value;                
 8015ec4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015ec6:	61fb      	str	r3, [r7, #28]
  DMA2D_InitStruct.DMA2D_OutputAlpha = 0x0F;                  
 8015ec8:	230f      	movs	r3, #15
 8015eca:	623b      	str	r3, [r7, #32]
  DMA2D_InitStruct.DMA2D_OutputMemoryAdd = Xaddress;                  
 8015ecc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015ece:	627b      	str	r3, [r7, #36]	; 0x24
  
  if(Direction == LCD_DIR_HORIZONTAL)
 8015ed0:	787b      	ldrb	r3, [r7, #1]
 8015ed2:	2b00      	cmp	r3, #0
 8015ed4:	d106      	bne.n	8015ee4 <LCD_DrawLine+0x90>
  {                                                      
    DMA2D_InitStruct.DMA2D_OutputOffset = 0;                
 8015ed6:	2300      	movs	r3, #0
 8015ed8:	62bb      	str	r3, [r7, #40]	; 0x28
    DMA2D_InitStruct.DMA2D_NumberOfLine = 1;            
 8015eda:	2301      	movs	r3, #1
 8015edc:	62fb      	str	r3, [r7, #44]	; 0x2c
    DMA2D_InitStruct.DMA2D_PixelPerLine = Length; 
 8015ede:	887b      	ldrh	r3, [r7, #2]
 8015ee0:	633b      	str	r3, [r7, #48]	; 0x30
 8015ee2:	e005      	b.n	8015ef0 <LCD_DrawLine+0x9c>
  }
  else
  {                                                            
    DMA2D_InitStruct.DMA2D_OutputOffset = LCD_PIXEL_WIDTH - 1;                
 8015ee4:	23ef      	movs	r3, #239	; 0xef
 8015ee6:	62bb      	str	r3, [r7, #40]	; 0x28
    DMA2D_InitStruct.DMA2D_NumberOfLine = Length;            
 8015ee8:	887b      	ldrh	r3, [r7, #2]
 8015eea:	62fb      	str	r3, [r7, #44]	; 0x2c
    DMA2D_InitStruct.DMA2D_PixelPerLine = 1;  
 8015eec:	2301      	movs	r3, #1
 8015eee:	633b      	str	r3, [r7, #48]	; 0x30
  }
  
  DMA2D_Init(&DMA2D_InitStruct);  
 8015ef0:	f107 030c 	add.w	r3, r7, #12
 8015ef4:	4618      	mov	r0, r3
 8015ef6:	f7f4 fb65 	bl	800a5c4 <DMA2D_Init>
  /* Start Transfer */ 
  DMA2D_StartTransfer();  
 8015efa:	f7f4 fc39 	bl	800a770 <DMA2D_StartTransfer>
  /* Wait for CTC Flag activation */
  while(DMA2D_GetFlagStatus(DMA2D_FLAG_TC) == RESET)
 8015efe:	bf00      	nop
 8015f00:	2002      	movs	r0, #2
 8015f02:	f7f4 fe2b 	bl	800ab5c <DMA2D_GetFlagStatus>
 8015f06:	4603      	mov	r3, r0
 8015f08:	2b00      	cmp	r3, #0
 8015f0a:	d0f9      	beq.n	8015f00 <LCD_DrawLine+0xac>
  {
  }
  
}
 8015f0c:	3740      	adds	r7, #64	; 0x40
 8015f0e:	46bd      	mov	sp, r7
 8015f10:	bd80      	pop	{r7, pc}
 8015f12:	bf00      	nop
 8015f14:	200000b8 	.word	0x200000b8
 8015f18:	2000534c 	.word	0x2000534c

08015f1c <LCD_DrawRect>:
  * @param  Height: display rectangle height, can be a value from 0 to 320.
  * @param  Width: display rectangle width, can be a value from 0 to 240.
  * @retval None
  */
void LCD_DrawRect(uint16_t Xpos, uint16_t Ypos, uint16_t Height, uint16_t Width)
{
 8015f1c:	b580      	push	{r7, lr}
 8015f1e:	b082      	sub	sp, #8
 8015f20:	af00      	add	r7, sp, #0
 8015f22:	80f8      	strh	r0, [r7, #6]
 8015f24:	80b9      	strh	r1, [r7, #4]
 8015f26:	807a      	strh	r2, [r7, #2]
 8015f28:	803b      	strh	r3, [r7, #0]
  /* draw horizontal lines */
  LCD_DrawLine(Xpos, Ypos, Width, LCD_DIR_HORIZONTAL);
 8015f2a:	88f9      	ldrh	r1, [r7, #6]
 8015f2c:	88ba      	ldrh	r2, [r7, #4]
 8015f2e:	883b      	ldrh	r3, [r7, #0]
 8015f30:	4608      	mov	r0, r1
 8015f32:	4611      	mov	r1, r2
 8015f34:	461a      	mov	r2, r3
 8015f36:	2300      	movs	r3, #0
 8015f38:	f7ff ff8c 	bl	8015e54 <LCD_DrawLine>
  LCD_DrawLine(Xpos, (Ypos+ Height), Width, LCD_DIR_HORIZONTAL);
 8015f3c:	88ba      	ldrh	r2, [r7, #4]
 8015f3e:	887b      	ldrh	r3, [r7, #2]
 8015f40:	4413      	add	r3, r2
 8015f42:	b29a      	uxth	r2, r3
 8015f44:	88f9      	ldrh	r1, [r7, #6]
 8015f46:	883b      	ldrh	r3, [r7, #0]
 8015f48:	4608      	mov	r0, r1
 8015f4a:	4611      	mov	r1, r2
 8015f4c:	461a      	mov	r2, r3
 8015f4e:	2300      	movs	r3, #0
 8015f50:	f7ff ff80 	bl	8015e54 <LCD_DrawLine>
  
  /* draw vertical lines */
  LCD_DrawLine(Xpos, Ypos, Height, LCD_DIR_VERTICAL);
 8015f54:	88f9      	ldrh	r1, [r7, #6]
 8015f56:	88ba      	ldrh	r2, [r7, #4]
 8015f58:	887b      	ldrh	r3, [r7, #2]
 8015f5a:	4608      	mov	r0, r1
 8015f5c:	4611      	mov	r1, r2
 8015f5e:	461a      	mov	r2, r3
 8015f60:	2301      	movs	r3, #1
 8015f62:	f7ff ff77 	bl	8015e54 <LCD_DrawLine>
  LCD_DrawLine((Xpos + Width), Ypos, Height, LCD_DIR_VERTICAL);
 8015f66:	88fa      	ldrh	r2, [r7, #6]
 8015f68:	883b      	ldrh	r3, [r7, #0]
 8015f6a:	4413      	add	r3, r2
 8015f6c:	b299      	uxth	r1, r3
 8015f6e:	88ba      	ldrh	r2, [r7, #4]
 8015f70:	887b      	ldrh	r3, [r7, #2]
 8015f72:	4608      	mov	r0, r1
 8015f74:	4611      	mov	r1, r2
 8015f76:	461a      	mov	r2, r3
 8015f78:	2301      	movs	r3, #1
 8015f7a:	f7ff ff6b 	bl	8015e54 <LCD_DrawLine>
}
 8015f7e:	3708      	adds	r7, #8
 8015f80:	46bd      	mov	sp, r7
 8015f82:	bd80      	pop	{r7, pc}

08015f84 <LCD_DrawCircle>:
  * @param  Ypos: specifies the Y position, can be a value from 0 to 320.
  * @param  Radius: radius of the circle.
  * @retval None
  */
void LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8015f84:	b480      	push	{r7}
 8015f86:	b087      	sub	sp, #28
 8015f88:	af00      	add	r7, sp, #0
 8015f8a:	4613      	mov	r3, r2
 8015f8c:	4602      	mov	r2, r0
 8015f8e:	80fa      	strh	r2, [r7, #6]
 8015f90:	460a      	mov	r2, r1
 8015f92:	80ba      	strh	r2, [r7, #4]
 8015f94:	807b      	strh	r3, [r7, #2]
    int x = -Radius, y = 0, err = 2-2*Radius, e2;
 8015f96:	887b      	ldrh	r3, [r7, #2]
 8015f98:	425b      	negs	r3, r3
 8015f9a:	617b      	str	r3, [r7, #20]
 8015f9c:	2300      	movs	r3, #0
 8015f9e:	613b      	str	r3, [r7, #16]
 8015fa0:	887a      	ldrh	r2, [r7, #2]
 8015fa2:	4613      	mov	r3, r2
 8015fa4:	07db      	lsls	r3, r3, #31
 8015fa6:	1a9b      	subs	r3, r3, r2
 8015fa8:	005b      	lsls	r3, r3, #1
 8015faa:	3302      	adds	r3, #2
 8015fac:	60fb      	str	r3, [r7, #12]
    do {
        *(__IO uint16_t*) (CurrentFrameBuffer + (2*((Xpos-x) + LCD_PIXEL_WIDTH*(Ypos+y)))) = CurrentTextColor; 
 8015fae:	88fa      	ldrh	r2, [r7, #6]
 8015fb0:	697b      	ldr	r3, [r7, #20]
 8015fb2:	1ad1      	subs	r1, r2, r3
 8015fb4:	88ba      	ldrh	r2, [r7, #4]
 8015fb6:	693b      	ldr	r3, [r7, #16]
 8015fb8:	441a      	add	r2, r3
 8015fba:	4613      	mov	r3, r2
 8015fbc:	011b      	lsls	r3, r3, #4
 8015fbe:	1a9b      	subs	r3, r3, r2
 8015fc0:	011b      	lsls	r3, r3, #4
 8015fc2:	440b      	add	r3, r1
 8015fc4:	005b      	lsls	r3, r3, #1
 8015fc6:	461a      	mov	r2, r3
 8015fc8:	4b36      	ldr	r3, [pc, #216]	; (80160a4 <LCD_DrawCircle+0x120>)
 8015fca:	681b      	ldr	r3, [r3, #0]
 8015fcc:	4413      	add	r3, r2
 8015fce:	4a36      	ldr	r2, [pc, #216]	; (80160a8 <LCD_DrawCircle+0x124>)
 8015fd0:	8812      	ldrh	r2, [r2, #0]
 8015fd2:	801a      	strh	r2, [r3, #0]
        *(__IO uint16_t*) (CurrentFrameBuffer + (2*((Xpos+x) + LCD_PIXEL_WIDTH*(Ypos+y)))) = CurrentTextColor;
 8015fd4:	88fa      	ldrh	r2, [r7, #6]
 8015fd6:	697b      	ldr	r3, [r7, #20]
 8015fd8:	18d1      	adds	r1, r2, r3
 8015fda:	88ba      	ldrh	r2, [r7, #4]
 8015fdc:	693b      	ldr	r3, [r7, #16]
 8015fde:	441a      	add	r2, r3
 8015fe0:	4613      	mov	r3, r2
 8015fe2:	011b      	lsls	r3, r3, #4
 8015fe4:	1a9b      	subs	r3, r3, r2
 8015fe6:	011b      	lsls	r3, r3, #4
 8015fe8:	440b      	add	r3, r1
 8015fea:	005b      	lsls	r3, r3, #1
 8015fec:	461a      	mov	r2, r3
 8015fee:	4b2d      	ldr	r3, [pc, #180]	; (80160a4 <LCD_DrawCircle+0x120>)
 8015ff0:	681b      	ldr	r3, [r3, #0]
 8015ff2:	4413      	add	r3, r2
 8015ff4:	4a2c      	ldr	r2, [pc, #176]	; (80160a8 <LCD_DrawCircle+0x124>)
 8015ff6:	8812      	ldrh	r2, [r2, #0]
 8015ff8:	801a      	strh	r2, [r3, #0]
        *(__IO uint16_t*) (CurrentFrameBuffer + (2*((Xpos+x) + LCD_PIXEL_WIDTH*(Ypos-y)))) = CurrentTextColor;
 8015ffa:	88fa      	ldrh	r2, [r7, #6]
 8015ffc:	697b      	ldr	r3, [r7, #20]
 8015ffe:	18d1      	adds	r1, r2, r3
 8016000:	88ba      	ldrh	r2, [r7, #4]
 8016002:	693b      	ldr	r3, [r7, #16]
 8016004:	1ad2      	subs	r2, r2, r3
 8016006:	4613      	mov	r3, r2
 8016008:	011b      	lsls	r3, r3, #4
 801600a:	1a9b      	subs	r3, r3, r2
 801600c:	011b      	lsls	r3, r3, #4
 801600e:	440b      	add	r3, r1
 8016010:	005b      	lsls	r3, r3, #1
 8016012:	461a      	mov	r2, r3
 8016014:	4b23      	ldr	r3, [pc, #140]	; (80160a4 <LCD_DrawCircle+0x120>)
 8016016:	681b      	ldr	r3, [r3, #0]
 8016018:	4413      	add	r3, r2
 801601a:	4a23      	ldr	r2, [pc, #140]	; (80160a8 <LCD_DrawCircle+0x124>)
 801601c:	8812      	ldrh	r2, [r2, #0]
 801601e:	801a      	strh	r2, [r3, #0]
        *(__IO uint16_t*) (CurrentFrameBuffer + (2*((Xpos-x) + LCD_PIXEL_WIDTH*(Ypos-y)))) = CurrentTextColor;
 8016020:	88fa      	ldrh	r2, [r7, #6]
 8016022:	697b      	ldr	r3, [r7, #20]
 8016024:	1ad1      	subs	r1, r2, r3
 8016026:	88ba      	ldrh	r2, [r7, #4]
 8016028:	693b      	ldr	r3, [r7, #16]
 801602a:	1ad2      	subs	r2, r2, r3
 801602c:	4613      	mov	r3, r2
 801602e:	011b      	lsls	r3, r3, #4
 8016030:	1a9b      	subs	r3, r3, r2
 8016032:	011b      	lsls	r3, r3, #4
 8016034:	440b      	add	r3, r1
 8016036:	005b      	lsls	r3, r3, #1
 8016038:	461a      	mov	r2, r3
 801603a:	4b1a      	ldr	r3, [pc, #104]	; (80160a4 <LCD_DrawCircle+0x120>)
 801603c:	681b      	ldr	r3, [r3, #0]
 801603e:	4413      	add	r3, r2
 8016040:	4a19      	ldr	r2, [pc, #100]	; (80160a8 <LCD_DrawCircle+0x124>)
 8016042:	8812      	ldrh	r2, [r2, #0]
 8016044:	801a      	strh	r2, [r3, #0]
      
        e2 = err;
 8016046:	68fb      	ldr	r3, [r7, #12]
 8016048:	60bb      	str	r3, [r7, #8]
        if (e2 <= y) {
 801604a:	68ba      	ldr	r2, [r7, #8]
 801604c:	693b      	ldr	r3, [r7, #16]
 801604e:	429a      	cmp	r2, r3
 8016050:	dc13      	bgt.n	801607a <LCD_DrawCircle+0xf6>
            err += ++y*2+1;
 8016052:	693b      	ldr	r3, [r7, #16]
 8016054:	3301      	adds	r3, #1
 8016056:	613b      	str	r3, [r7, #16]
 8016058:	693b      	ldr	r3, [r7, #16]
 801605a:	005b      	lsls	r3, r3, #1
 801605c:	3301      	adds	r3, #1
 801605e:	68fa      	ldr	r2, [r7, #12]
 8016060:	4413      	add	r3, r2
 8016062:	60fb      	str	r3, [r7, #12]
            if (-x == y && e2 <= x) e2 = 0;
 8016064:	697b      	ldr	r3, [r7, #20]
 8016066:	425a      	negs	r2, r3
 8016068:	693b      	ldr	r3, [r7, #16]
 801606a:	429a      	cmp	r2, r3
 801606c:	d105      	bne.n	801607a <LCD_DrawCircle+0xf6>
 801606e:	68ba      	ldr	r2, [r7, #8]
 8016070:	697b      	ldr	r3, [r7, #20]
 8016072:	429a      	cmp	r2, r3
 8016074:	dc01      	bgt.n	801607a <LCD_DrawCircle+0xf6>
 8016076:	2300      	movs	r3, #0
 8016078:	60bb      	str	r3, [r7, #8]
        }
        if (e2 > x) err += ++x*2+1;
 801607a:	68ba      	ldr	r2, [r7, #8]
 801607c:	697b      	ldr	r3, [r7, #20]
 801607e:	429a      	cmp	r2, r3
 8016080:	dd08      	ble.n	8016094 <LCD_DrawCircle+0x110>
 8016082:	697b      	ldr	r3, [r7, #20]
 8016084:	3301      	adds	r3, #1
 8016086:	617b      	str	r3, [r7, #20]
 8016088:	697b      	ldr	r3, [r7, #20]
 801608a:	005b      	lsls	r3, r3, #1
 801608c:	3301      	adds	r3, #1
 801608e:	68fa      	ldr	r2, [r7, #12]
 8016090:	4413      	add	r3, r2
 8016092:	60fb      	str	r3, [r7, #12]
    }
    while (x <= 0);
 8016094:	697b      	ldr	r3, [r7, #20]
 8016096:	2b00      	cmp	r3, #0
 8016098:	dd89      	ble.n	8015fae <LCD_DrawCircle+0x2a>
}
 801609a:	371c      	adds	r7, #28
 801609c:	46bd      	mov	sp, r7
 801609e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160a2:	4770      	bx	lr
 80160a4:	200000b8 	.word	0x200000b8
 80160a8:	2000534c 	.word	0x2000534c

080160ac <LCD_DrawFullEllipse>:
  * @param  Radius: minor radius of ellipse.
  * @param  Radius2: major radius of ellipse.  
  * @retval None
  */
void LCD_DrawFullEllipse(int Xpos, int Ypos, int Radius, int Radius2)
{
 80160ac:	b5b0      	push	{r4, r5, r7, lr}
 80160ae:	b08c      	sub	sp, #48	; 0x30
 80160b0:	af00      	add	r7, sp, #0
 80160b2:	60f8      	str	r0, [r7, #12]
 80160b4:	60b9      	str	r1, [r7, #8]
 80160b6:	607a      	str	r2, [r7, #4]
 80160b8:	603b      	str	r3, [r7, #0]
  int x = -Radius, y = 0, err = 2-2*Radius, e2;
 80160ba:	687b      	ldr	r3, [r7, #4]
 80160bc:	425b      	negs	r3, r3
 80160be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80160c0:	2300      	movs	r3, #0
 80160c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80160c4:	687a      	ldr	r2, [r7, #4]
 80160c6:	4613      	mov	r3, r2
 80160c8:	07db      	lsls	r3, r3, #31
 80160ca:	1a9b      	subs	r3, r3, r2
 80160cc:	005b      	lsls	r3, r3, #1
 80160ce:	3302      	adds	r3, #2
 80160d0:	627b      	str	r3, [r7, #36]	; 0x24
  float K = 0, rad1 = 0, rad2 = 0;
 80160d2:	f04f 0300 	mov.w	r3, #0
 80160d6:	61fb      	str	r3, [r7, #28]
 80160d8:	f04f 0300 	mov.w	r3, #0
 80160dc:	61bb      	str	r3, [r7, #24]
 80160de:	f04f 0300 	mov.w	r3, #0
 80160e2:	617b      	str	r3, [r7, #20]
  
  rad1 = Radius;
 80160e4:	6878      	ldr	r0, [r7, #4]
 80160e6:	f002 f855 	bl	8018194 <__aeabi_i2f>
 80160ea:	4603      	mov	r3, r0
 80160ec:	61bb      	str	r3, [r7, #24]
  rad2 = Radius2;
 80160ee:	6838      	ldr	r0, [r7, #0]
 80160f0:	f002 f850 	bl	8018194 <__aeabi_i2f>
 80160f4:	4603      	mov	r3, r0
 80160f6:	617b      	str	r3, [r7, #20]
  
  if (Radius > Radius2)
 80160f8:	687a      	ldr	r2, [r7, #4]
 80160fa:	683b      	ldr	r3, [r7, #0]
 80160fc:	429a      	cmp	r2, r3
 80160fe:	f340 8092 	ble.w	8016226 <LCD_DrawFullEllipse+0x17a>
  { 
    do 
    {
      K = (float)(rad1/rad2);
 8016102:	69b8      	ldr	r0, [r7, #24]
 8016104:	6979      	ldr	r1, [r7, #20]
 8016106:	f002 f94d 	bl	80183a4 <__aeabi_fdiv>
 801610a:	4603      	mov	r3, r0
 801610c:	61fb      	str	r3, [r7, #28]
      LCD_DrawLine((Xpos+x), (Ypos-(uint16_t)(y/K)), (2*(uint16_t)(y/K) + 1), LCD_DIR_VERTICAL);
 801610e:	68fb      	ldr	r3, [r7, #12]
 8016110:	b29a      	uxth	r2, r3
 8016112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016114:	b29b      	uxth	r3, r3
 8016116:	4413      	add	r3, r2
 8016118:	b29d      	uxth	r5, r3
 801611a:	68bb      	ldr	r3, [r7, #8]
 801611c:	b29c      	uxth	r4, r3
 801611e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016120:	f002 f838 	bl	8018194 <__aeabi_i2f>
 8016124:	4603      	mov	r3, r0
 8016126:	4618      	mov	r0, r3
 8016128:	69f9      	ldr	r1, [r7, #28]
 801612a:	f002 f93b 	bl	80183a4 <__aeabi_fdiv>
 801612e:	4603      	mov	r3, r0
 8016130:	4618      	mov	r0, r3
 8016132:	f002 f9d3 	bl	80184dc <__aeabi_f2uiz>
 8016136:	4603      	mov	r3, r0
 8016138:	b29b      	uxth	r3, r3
 801613a:	1ae3      	subs	r3, r4, r3
 801613c:	b29c      	uxth	r4, r3
 801613e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016140:	f002 f828 	bl	8018194 <__aeabi_i2f>
 8016144:	4603      	mov	r3, r0
 8016146:	4618      	mov	r0, r3
 8016148:	69f9      	ldr	r1, [r7, #28]
 801614a:	f002 f92b 	bl	80183a4 <__aeabi_fdiv>
 801614e:	4603      	mov	r3, r0
 8016150:	4618      	mov	r0, r3
 8016152:	f002 f9c3 	bl	80184dc <__aeabi_f2uiz>
 8016156:	4603      	mov	r3, r0
 8016158:	b29b      	uxth	r3, r3
 801615a:	005b      	lsls	r3, r3, #1
 801615c:	b29b      	uxth	r3, r3
 801615e:	3301      	adds	r3, #1
 8016160:	b29b      	uxth	r3, r3
 8016162:	4628      	mov	r0, r5
 8016164:	4621      	mov	r1, r4
 8016166:	461a      	mov	r2, r3
 8016168:	2301      	movs	r3, #1
 801616a:	f7ff fe73 	bl	8015e54 <LCD_DrawLine>
      LCD_DrawLine((Xpos-x), (Ypos-(uint16_t)(y/K)), (2*(uint16_t)(y/K) + 1), LCD_DIR_VERTICAL);
 801616e:	68fb      	ldr	r3, [r7, #12]
 8016170:	b29a      	uxth	r2, r3
 8016172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016174:	b29b      	uxth	r3, r3
 8016176:	1ad3      	subs	r3, r2, r3
 8016178:	b29d      	uxth	r5, r3
 801617a:	68bb      	ldr	r3, [r7, #8]
 801617c:	b29c      	uxth	r4, r3
 801617e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016180:	f002 f808 	bl	8018194 <__aeabi_i2f>
 8016184:	4603      	mov	r3, r0
 8016186:	4618      	mov	r0, r3
 8016188:	69f9      	ldr	r1, [r7, #28]
 801618a:	f002 f90b 	bl	80183a4 <__aeabi_fdiv>
 801618e:	4603      	mov	r3, r0
 8016190:	4618      	mov	r0, r3
 8016192:	f002 f9a3 	bl	80184dc <__aeabi_f2uiz>
 8016196:	4603      	mov	r3, r0
 8016198:	b29b      	uxth	r3, r3
 801619a:	1ae3      	subs	r3, r4, r3
 801619c:	b29c      	uxth	r4, r3
 801619e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80161a0:	f001 fff8 	bl	8018194 <__aeabi_i2f>
 80161a4:	4603      	mov	r3, r0
 80161a6:	4618      	mov	r0, r3
 80161a8:	69f9      	ldr	r1, [r7, #28]
 80161aa:	f002 f8fb 	bl	80183a4 <__aeabi_fdiv>
 80161ae:	4603      	mov	r3, r0
 80161b0:	4618      	mov	r0, r3
 80161b2:	f002 f993 	bl	80184dc <__aeabi_f2uiz>
 80161b6:	4603      	mov	r3, r0
 80161b8:	b29b      	uxth	r3, r3
 80161ba:	005b      	lsls	r3, r3, #1
 80161bc:	b29b      	uxth	r3, r3
 80161be:	3301      	adds	r3, #1
 80161c0:	b29b      	uxth	r3, r3
 80161c2:	4628      	mov	r0, r5
 80161c4:	4621      	mov	r1, r4
 80161c6:	461a      	mov	r2, r3
 80161c8:	2301      	movs	r3, #1
 80161ca:	f7ff fe43 	bl	8015e54 <LCD_DrawLine>
      
      e2 = err;
 80161ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80161d0:	623b      	str	r3, [r7, #32]
      if (e2 <= y) 
 80161d2:	6a3a      	ldr	r2, [r7, #32]
 80161d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161d6:	429a      	cmp	r2, r3
 80161d8:	dc13      	bgt.n	8016202 <LCD_DrawFullEllipse+0x156>
      {
        err += ++y*2+1;
 80161da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161dc:	3301      	adds	r3, #1
 80161de:	62bb      	str	r3, [r7, #40]	; 0x28
 80161e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161e2:	005b      	lsls	r3, r3, #1
 80161e4:	3301      	adds	r3, #1
 80161e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80161e8:	4413      	add	r3, r2
 80161ea:	627b      	str	r3, [r7, #36]	; 0x24
        if (-x == y && e2 <= x) e2 = 0;
 80161ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161ee:	425a      	negs	r2, r3
 80161f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161f2:	429a      	cmp	r2, r3
 80161f4:	d105      	bne.n	8016202 <LCD_DrawFullEllipse+0x156>
 80161f6:	6a3a      	ldr	r2, [r7, #32]
 80161f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161fa:	429a      	cmp	r2, r3
 80161fc:	dc01      	bgt.n	8016202 <LCD_DrawFullEllipse+0x156>
 80161fe:	2300      	movs	r3, #0
 8016200:	623b      	str	r3, [r7, #32]
      }
      if (e2 > x) err += ++x*2+1;
 8016202:	6a3a      	ldr	r2, [r7, #32]
 8016204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016206:	429a      	cmp	r2, r3
 8016208:	dd08      	ble.n	801621c <LCD_DrawFullEllipse+0x170>
 801620a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801620c:	3301      	adds	r3, #1
 801620e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016212:	005b      	lsls	r3, r3, #1
 8016214:	3301      	adds	r3, #1
 8016216:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016218:	4413      	add	r3, r2
 801621a:	627b      	str	r3, [r7, #36]	; 0x24
      
    }
    while (x <= 0);
 801621c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801621e:	2b00      	cmp	r3, #0
 8016220:	f77f af6f 	ble.w	8016102 <LCD_DrawFullEllipse+0x56>
 8016224:	e095      	b.n	8016352 <LCD_DrawFullEllipse+0x2a6>
  }
  else
  {
    y = -Radius2; 
 8016226:	683b      	ldr	r3, [r7, #0]
 8016228:	425b      	negs	r3, r3
 801622a:	62bb      	str	r3, [r7, #40]	; 0x28
    x = 0;
 801622c:	2300      	movs	r3, #0
 801622e:	62fb      	str	r3, [r7, #44]	; 0x2c
    do 
    { 
      K = (float)(rad2/rad1);       
 8016230:	6978      	ldr	r0, [r7, #20]
 8016232:	69b9      	ldr	r1, [r7, #24]
 8016234:	f002 f8b6 	bl	80183a4 <__aeabi_fdiv>
 8016238:	4603      	mov	r3, r0
 801623a:	61fb      	str	r3, [r7, #28]
      LCD_DrawLine((Xpos-(uint16_t)(x/K)), (Ypos+y), (2*(uint16_t)(x/K) + 1), LCD_DIR_HORIZONTAL);
 801623c:	68fb      	ldr	r3, [r7, #12]
 801623e:	b29c      	uxth	r4, r3
 8016240:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016242:	f001 ffa7 	bl	8018194 <__aeabi_i2f>
 8016246:	4603      	mov	r3, r0
 8016248:	4618      	mov	r0, r3
 801624a:	69f9      	ldr	r1, [r7, #28]
 801624c:	f002 f8aa 	bl	80183a4 <__aeabi_fdiv>
 8016250:	4603      	mov	r3, r0
 8016252:	4618      	mov	r0, r3
 8016254:	f002 f942 	bl	80184dc <__aeabi_f2uiz>
 8016258:	4603      	mov	r3, r0
 801625a:	b29b      	uxth	r3, r3
 801625c:	1ae3      	subs	r3, r4, r3
 801625e:	b29d      	uxth	r5, r3
 8016260:	68bb      	ldr	r3, [r7, #8]
 8016262:	b29a      	uxth	r2, r3
 8016264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016266:	b29b      	uxth	r3, r3
 8016268:	4413      	add	r3, r2
 801626a:	b29c      	uxth	r4, r3
 801626c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801626e:	f001 ff91 	bl	8018194 <__aeabi_i2f>
 8016272:	4603      	mov	r3, r0
 8016274:	4618      	mov	r0, r3
 8016276:	69f9      	ldr	r1, [r7, #28]
 8016278:	f002 f894 	bl	80183a4 <__aeabi_fdiv>
 801627c:	4603      	mov	r3, r0
 801627e:	4618      	mov	r0, r3
 8016280:	f002 f92c 	bl	80184dc <__aeabi_f2uiz>
 8016284:	4603      	mov	r3, r0
 8016286:	b29b      	uxth	r3, r3
 8016288:	005b      	lsls	r3, r3, #1
 801628a:	b29b      	uxth	r3, r3
 801628c:	3301      	adds	r3, #1
 801628e:	b29b      	uxth	r3, r3
 8016290:	4628      	mov	r0, r5
 8016292:	4621      	mov	r1, r4
 8016294:	461a      	mov	r2, r3
 8016296:	2300      	movs	r3, #0
 8016298:	f7ff fddc 	bl	8015e54 <LCD_DrawLine>
      LCD_DrawLine((Xpos-(uint16_t)(x/K)), (Ypos-y), (2*(uint16_t)(x/K) + 1), LCD_DIR_HORIZONTAL);
 801629c:	68fb      	ldr	r3, [r7, #12]
 801629e:	b29c      	uxth	r4, r3
 80162a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80162a2:	f001 ff77 	bl	8018194 <__aeabi_i2f>
 80162a6:	4603      	mov	r3, r0
 80162a8:	4618      	mov	r0, r3
 80162aa:	69f9      	ldr	r1, [r7, #28]
 80162ac:	f002 f87a 	bl	80183a4 <__aeabi_fdiv>
 80162b0:	4603      	mov	r3, r0
 80162b2:	4618      	mov	r0, r3
 80162b4:	f002 f912 	bl	80184dc <__aeabi_f2uiz>
 80162b8:	4603      	mov	r3, r0
 80162ba:	b29b      	uxth	r3, r3
 80162bc:	1ae3      	subs	r3, r4, r3
 80162be:	b29d      	uxth	r5, r3
 80162c0:	68bb      	ldr	r3, [r7, #8]
 80162c2:	b29a      	uxth	r2, r3
 80162c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80162c6:	b29b      	uxth	r3, r3
 80162c8:	1ad3      	subs	r3, r2, r3
 80162ca:	b29c      	uxth	r4, r3
 80162cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80162ce:	f001 ff61 	bl	8018194 <__aeabi_i2f>
 80162d2:	4603      	mov	r3, r0
 80162d4:	4618      	mov	r0, r3
 80162d6:	69f9      	ldr	r1, [r7, #28]
 80162d8:	f002 f864 	bl	80183a4 <__aeabi_fdiv>
 80162dc:	4603      	mov	r3, r0
 80162de:	4618      	mov	r0, r3
 80162e0:	f002 f8fc 	bl	80184dc <__aeabi_f2uiz>
 80162e4:	4603      	mov	r3, r0
 80162e6:	b29b      	uxth	r3, r3
 80162e8:	005b      	lsls	r3, r3, #1
 80162ea:	b29b      	uxth	r3, r3
 80162ec:	3301      	adds	r3, #1
 80162ee:	b29b      	uxth	r3, r3
 80162f0:	4628      	mov	r0, r5
 80162f2:	4621      	mov	r1, r4
 80162f4:	461a      	mov	r2, r3
 80162f6:	2300      	movs	r3, #0
 80162f8:	f7ff fdac 	bl	8015e54 <LCD_DrawLine>
      
      e2 = err;
 80162fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162fe:	623b      	str	r3, [r7, #32]
      if (e2 <= x) 
 8016300:	6a3a      	ldr	r2, [r7, #32]
 8016302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016304:	429a      	cmp	r2, r3
 8016306:	dc13      	bgt.n	8016330 <LCD_DrawFullEllipse+0x284>
      {
        err += ++x*2+1;
 8016308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801630a:	3301      	adds	r3, #1
 801630c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801630e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016310:	005b      	lsls	r3, r3, #1
 8016312:	3301      	adds	r3, #1
 8016314:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016316:	4413      	add	r3, r2
 8016318:	627b      	str	r3, [r7, #36]	; 0x24
        if (-y == x && e2 <= y) e2 = 0;
 801631a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801631c:	425a      	negs	r2, r3
 801631e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016320:	429a      	cmp	r2, r3
 8016322:	d105      	bne.n	8016330 <LCD_DrawFullEllipse+0x284>
 8016324:	6a3a      	ldr	r2, [r7, #32]
 8016326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016328:	429a      	cmp	r2, r3
 801632a:	dc01      	bgt.n	8016330 <LCD_DrawFullEllipse+0x284>
 801632c:	2300      	movs	r3, #0
 801632e:	623b      	str	r3, [r7, #32]
      }
      if (e2 > y) err += ++y*2+1;
 8016330:	6a3a      	ldr	r2, [r7, #32]
 8016332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016334:	429a      	cmp	r2, r3
 8016336:	dd08      	ble.n	801634a <LCD_DrawFullEllipse+0x29e>
 8016338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801633a:	3301      	adds	r3, #1
 801633c:	62bb      	str	r3, [r7, #40]	; 0x28
 801633e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016340:	005b      	lsls	r3, r3, #1
 8016342:	3301      	adds	r3, #1
 8016344:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016346:	4413      	add	r3, r2
 8016348:	627b      	str	r3, [r7, #36]	; 0x24
    }
    while (y <= 0);
 801634a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801634c:	2b00      	cmp	r3, #0
 801634e:	f77f af6f 	ble.w	8016230 <LCD_DrawFullEllipse+0x184>
  }
}
 8016352:	3730      	adds	r7, #48	; 0x30
 8016354:	46bd      	mov	sp, r7
 8016356:	bdb0      	pop	{r4, r5, r7, pc}

08016358 <LCD_DrawEllipse>:
  * @param  Radius: specifies Radius.
  * @param  Radius2: specifies Radius2.
  * @retval None
  */
void LCD_DrawEllipse(int Xpos, int Ypos, int Radius, int Radius2)
{
 8016358:	b590      	push	{r4, r7, lr}
 801635a:	b08d      	sub	sp, #52	; 0x34
 801635c:	af00      	add	r7, sp, #0
 801635e:	60f8      	str	r0, [r7, #12]
 8016360:	60b9      	str	r1, [r7, #8]
 8016362:	607a      	str	r2, [r7, #4]
 8016364:	603b      	str	r3, [r7, #0]
  int x = -Radius, y = 0, err = 2-2*Radius, e2;
 8016366:	687b      	ldr	r3, [r7, #4]
 8016368:	425b      	negs	r3, r3
 801636a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801636c:	2300      	movs	r3, #0
 801636e:	62bb      	str	r3, [r7, #40]	; 0x28
 8016370:	687a      	ldr	r2, [r7, #4]
 8016372:	4613      	mov	r3, r2
 8016374:	07db      	lsls	r3, r3, #31
 8016376:	1a9b      	subs	r3, r3, r2
 8016378:	005b      	lsls	r3, r3, #1
 801637a:	3302      	adds	r3, #2
 801637c:	627b      	str	r3, [r7, #36]	; 0x24
  float K = 0, rad1 = 0, rad2 = 0;
 801637e:	f04f 0300 	mov.w	r3, #0
 8016382:	61fb      	str	r3, [r7, #28]
 8016384:	f04f 0300 	mov.w	r3, #0
 8016388:	61bb      	str	r3, [r7, #24]
 801638a:	f04f 0300 	mov.w	r3, #0
 801638e:	617b      	str	r3, [r7, #20]
   
  rad1 = Radius;
 8016390:	6878      	ldr	r0, [r7, #4]
 8016392:	f001 feff 	bl	8018194 <__aeabi_i2f>
 8016396:	4603      	mov	r3, r0
 8016398:	61bb      	str	r3, [r7, #24]
  rad2 = Radius2;
 801639a:	6838      	ldr	r0, [r7, #0]
 801639c:	f001 fefa 	bl	8018194 <__aeabi_i2f>
 80163a0:	4603      	mov	r3, r0
 80163a2:	617b      	str	r3, [r7, #20]
  
  if (Radius > Radius2)
 80163a4:	687a      	ldr	r2, [r7, #4]
 80163a6:	683b      	ldr	r3, [r7, #0]
 80163a8:	429a      	cmp	r2, r3
 80163aa:	f340 80b9 	ble.w	8016520 <LCD_DrawEllipse+0x1c8>
  { 
    do {
      K = (float)(rad1/rad2);
 80163ae:	69b8      	ldr	r0, [r7, #24]
 80163b0:	6979      	ldr	r1, [r7, #20]
 80163b2:	f001 fff7 	bl	80183a4 <__aeabi_fdiv>
 80163b6:	4603      	mov	r3, r0
 80163b8:	61fb      	str	r3, [r7, #28]
      *(__IO uint16_t*) (CurrentFrameBuffer + (2*((Xpos-x) + LCD_PIXEL_WIDTH*(Ypos+(uint16_t)(y/K))))) = CurrentTextColor; 
 80163ba:	68fa      	ldr	r2, [r7, #12]
 80163bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163be:	1ad4      	subs	r4, r2, r3
 80163c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80163c2:	f001 fee7 	bl	8018194 <__aeabi_i2f>
 80163c6:	4603      	mov	r3, r0
 80163c8:	4618      	mov	r0, r3
 80163ca:	69f9      	ldr	r1, [r7, #28]
 80163cc:	f001 ffea 	bl	80183a4 <__aeabi_fdiv>
 80163d0:	4603      	mov	r3, r0
 80163d2:	4618      	mov	r0, r3
 80163d4:	f002 f882 	bl	80184dc <__aeabi_f2uiz>
 80163d8:	4603      	mov	r3, r0
 80163da:	b29b      	uxth	r3, r3
 80163dc:	461a      	mov	r2, r3
 80163de:	68bb      	ldr	r3, [r7, #8]
 80163e0:	441a      	add	r2, r3
 80163e2:	4613      	mov	r3, r2
 80163e4:	011b      	lsls	r3, r3, #4
 80163e6:	1a9b      	subs	r3, r3, r2
 80163e8:	011b      	lsls	r3, r3, #4
 80163ea:	4423      	add	r3, r4
 80163ec:	005b      	lsls	r3, r3, #1
 80163ee:	461a      	mov	r2, r3
 80163f0:	4b49      	ldr	r3, [pc, #292]	; (8016518 <LCD_DrawEllipse+0x1c0>)
 80163f2:	681b      	ldr	r3, [r3, #0]
 80163f4:	4413      	add	r3, r2
 80163f6:	4a49      	ldr	r2, [pc, #292]	; (801651c <LCD_DrawEllipse+0x1c4>)
 80163f8:	8812      	ldrh	r2, [r2, #0]
 80163fa:	801a      	strh	r2, [r3, #0]
      *(__IO uint16_t*) (CurrentFrameBuffer + (2*((Xpos+x) + LCD_PIXEL_WIDTH*(Ypos+(uint16_t)(y/K))))) = CurrentTextColor;
 80163fc:	68fa      	ldr	r2, [r7, #12]
 80163fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016400:	18d4      	adds	r4, r2, r3
 8016402:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016404:	f001 fec6 	bl	8018194 <__aeabi_i2f>
 8016408:	4603      	mov	r3, r0
 801640a:	4618      	mov	r0, r3
 801640c:	69f9      	ldr	r1, [r7, #28]
 801640e:	f001 ffc9 	bl	80183a4 <__aeabi_fdiv>
 8016412:	4603      	mov	r3, r0
 8016414:	4618      	mov	r0, r3
 8016416:	f002 f861 	bl	80184dc <__aeabi_f2uiz>
 801641a:	4603      	mov	r3, r0
 801641c:	b29b      	uxth	r3, r3
 801641e:	461a      	mov	r2, r3
 8016420:	68bb      	ldr	r3, [r7, #8]
 8016422:	441a      	add	r2, r3
 8016424:	4613      	mov	r3, r2
 8016426:	011b      	lsls	r3, r3, #4
 8016428:	1a9b      	subs	r3, r3, r2
 801642a:	011b      	lsls	r3, r3, #4
 801642c:	4423      	add	r3, r4
 801642e:	005b      	lsls	r3, r3, #1
 8016430:	461a      	mov	r2, r3
 8016432:	4b39      	ldr	r3, [pc, #228]	; (8016518 <LCD_DrawEllipse+0x1c0>)
 8016434:	681b      	ldr	r3, [r3, #0]
 8016436:	4413      	add	r3, r2
 8016438:	4a38      	ldr	r2, [pc, #224]	; (801651c <LCD_DrawEllipse+0x1c4>)
 801643a:	8812      	ldrh	r2, [r2, #0]
 801643c:	801a      	strh	r2, [r3, #0]
      *(__IO uint16_t*) (CurrentFrameBuffer + (2*((Xpos+x) + LCD_PIXEL_WIDTH*(Ypos-(uint16_t)(y/K))))) = CurrentTextColor;
 801643e:	68fa      	ldr	r2, [r7, #12]
 8016440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016442:	18d4      	adds	r4, r2, r3
 8016444:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016446:	f001 fea5 	bl	8018194 <__aeabi_i2f>
 801644a:	4603      	mov	r3, r0
 801644c:	4618      	mov	r0, r3
 801644e:	69f9      	ldr	r1, [r7, #28]
 8016450:	f001 ffa8 	bl	80183a4 <__aeabi_fdiv>
 8016454:	4603      	mov	r3, r0
 8016456:	4618      	mov	r0, r3
 8016458:	f002 f840 	bl	80184dc <__aeabi_f2uiz>
 801645c:	4603      	mov	r3, r0
 801645e:	b29b      	uxth	r3, r3
 8016460:	68ba      	ldr	r2, [r7, #8]
 8016462:	1ad2      	subs	r2, r2, r3
 8016464:	4613      	mov	r3, r2
 8016466:	011b      	lsls	r3, r3, #4
 8016468:	1a9b      	subs	r3, r3, r2
 801646a:	011b      	lsls	r3, r3, #4
 801646c:	4423      	add	r3, r4
 801646e:	005b      	lsls	r3, r3, #1
 8016470:	461a      	mov	r2, r3
 8016472:	4b29      	ldr	r3, [pc, #164]	; (8016518 <LCD_DrawEllipse+0x1c0>)
 8016474:	681b      	ldr	r3, [r3, #0]
 8016476:	4413      	add	r3, r2
 8016478:	4a28      	ldr	r2, [pc, #160]	; (801651c <LCD_DrawEllipse+0x1c4>)
 801647a:	8812      	ldrh	r2, [r2, #0]
 801647c:	801a      	strh	r2, [r3, #0]
      *(__IO uint16_t*) (CurrentFrameBuffer + (2*((Xpos-x) + LCD_PIXEL_WIDTH*(Ypos-(uint16_t)(y/K))))) = CurrentTextColor;
 801647e:	68fa      	ldr	r2, [r7, #12]
 8016480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016482:	1ad4      	subs	r4, r2, r3
 8016484:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016486:	f001 fe85 	bl	8018194 <__aeabi_i2f>
 801648a:	4603      	mov	r3, r0
 801648c:	4618      	mov	r0, r3
 801648e:	69f9      	ldr	r1, [r7, #28]
 8016490:	f001 ff88 	bl	80183a4 <__aeabi_fdiv>
 8016494:	4603      	mov	r3, r0
 8016496:	4618      	mov	r0, r3
 8016498:	f002 f820 	bl	80184dc <__aeabi_f2uiz>
 801649c:	4603      	mov	r3, r0
 801649e:	b29b      	uxth	r3, r3
 80164a0:	68ba      	ldr	r2, [r7, #8]
 80164a2:	1ad2      	subs	r2, r2, r3
 80164a4:	4613      	mov	r3, r2
 80164a6:	011b      	lsls	r3, r3, #4
 80164a8:	1a9b      	subs	r3, r3, r2
 80164aa:	011b      	lsls	r3, r3, #4
 80164ac:	4423      	add	r3, r4
 80164ae:	005b      	lsls	r3, r3, #1
 80164b0:	461a      	mov	r2, r3
 80164b2:	4b19      	ldr	r3, [pc, #100]	; (8016518 <LCD_DrawEllipse+0x1c0>)
 80164b4:	681b      	ldr	r3, [r3, #0]
 80164b6:	4413      	add	r3, r2
 80164b8:	4a18      	ldr	r2, [pc, #96]	; (801651c <LCD_DrawEllipse+0x1c4>)
 80164ba:	8812      	ldrh	r2, [r2, #0]
 80164bc:	801a      	strh	r2, [r3, #0]
            
      e2 = err;
 80164be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164c0:	623b      	str	r3, [r7, #32]
      if (e2 <= y) {
 80164c2:	6a3a      	ldr	r2, [r7, #32]
 80164c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80164c6:	429a      	cmp	r2, r3
 80164c8:	dc13      	bgt.n	80164f2 <LCD_DrawEllipse+0x19a>
        err += ++y*2+1;
 80164ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80164cc:	3301      	adds	r3, #1
 80164ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80164d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80164d2:	005b      	lsls	r3, r3, #1
 80164d4:	3301      	adds	r3, #1
 80164d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80164d8:	4413      	add	r3, r2
 80164da:	627b      	str	r3, [r7, #36]	; 0x24
        if (-x == y && e2 <= x) e2 = 0;
 80164dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164de:	425a      	negs	r2, r3
 80164e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80164e2:	429a      	cmp	r2, r3
 80164e4:	d105      	bne.n	80164f2 <LCD_DrawEllipse+0x19a>
 80164e6:	6a3a      	ldr	r2, [r7, #32]
 80164e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164ea:	429a      	cmp	r2, r3
 80164ec:	dc01      	bgt.n	80164f2 <LCD_DrawEllipse+0x19a>
 80164ee:	2300      	movs	r3, #0
 80164f0:	623b      	str	r3, [r7, #32]
      }
      if (e2 > x) err += ++x*2+1;
 80164f2:	6a3a      	ldr	r2, [r7, #32]
 80164f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164f6:	429a      	cmp	r2, r3
 80164f8:	dd08      	ble.n	801650c <LCD_DrawEllipse+0x1b4>
 80164fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164fc:	3301      	adds	r3, #1
 80164fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016502:	005b      	lsls	r3, r3, #1
 8016504:	3301      	adds	r3, #1
 8016506:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016508:	4413      	add	r3, r2
 801650a:	627b      	str	r3, [r7, #36]	; 0x24
    }
    while (x <= 0);
 801650c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801650e:	2b00      	cmp	r3, #0
 8016510:	f77f af4d 	ble.w	80163ae <LCD_DrawEllipse+0x56>
 8016514:	e0bc      	b.n	8016690 <LCD_DrawEllipse+0x338>
 8016516:	bf00      	nop
 8016518:	200000b8 	.word	0x200000b8
 801651c:	2000534c 	.word	0x2000534c
  }
  else
  {
    y = -Radius2; 
 8016520:	683b      	ldr	r3, [r7, #0]
 8016522:	425b      	negs	r3, r3
 8016524:	62bb      	str	r3, [r7, #40]	; 0x28
    x = 0;
 8016526:	2300      	movs	r3, #0
 8016528:	62fb      	str	r3, [r7, #44]	; 0x2c
    do { 
      K = (float)(rad2/rad1);
 801652a:	6978      	ldr	r0, [r7, #20]
 801652c:	69b9      	ldr	r1, [r7, #24]
 801652e:	f001 ff39 	bl	80183a4 <__aeabi_fdiv>
 8016532:	4603      	mov	r3, r0
 8016534:	61fb      	str	r3, [r7, #28]
      *(__IO uint16_t*) (CurrentFrameBuffer + (2*((Xpos-(uint16_t)(x/K)) + LCD_PIXEL_WIDTH*(Ypos+y)))) = CurrentTextColor; 
 8016536:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016538:	f001 fe2c 	bl	8018194 <__aeabi_i2f>
 801653c:	4603      	mov	r3, r0
 801653e:	4618      	mov	r0, r3
 8016540:	69f9      	ldr	r1, [r7, #28]
 8016542:	f001 ff2f 	bl	80183a4 <__aeabi_fdiv>
 8016546:	4603      	mov	r3, r0
 8016548:	4618      	mov	r0, r3
 801654a:	f001 ffc7 	bl	80184dc <__aeabi_f2uiz>
 801654e:	4603      	mov	r3, r0
 8016550:	b29b      	uxth	r3, r3
 8016552:	68fa      	ldr	r2, [r7, #12]
 8016554:	1ad1      	subs	r1, r2, r3
 8016556:	68ba      	ldr	r2, [r7, #8]
 8016558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801655a:	441a      	add	r2, r3
 801655c:	4613      	mov	r3, r2
 801655e:	011b      	lsls	r3, r3, #4
 8016560:	1a9b      	subs	r3, r3, r2
 8016562:	011b      	lsls	r3, r3, #4
 8016564:	440b      	add	r3, r1
 8016566:	005b      	lsls	r3, r3, #1
 8016568:	461a      	mov	r2, r3
 801656a:	4b4b      	ldr	r3, [pc, #300]	; (8016698 <LCD_DrawEllipse+0x340>)
 801656c:	681b      	ldr	r3, [r3, #0]
 801656e:	4413      	add	r3, r2
 8016570:	4a4a      	ldr	r2, [pc, #296]	; (801669c <LCD_DrawEllipse+0x344>)
 8016572:	8812      	ldrh	r2, [r2, #0]
 8016574:	801a      	strh	r2, [r3, #0]
      *(__IO uint16_t*) (CurrentFrameBuffer + (2*((Xpos+(uint16_t)(x/K)) + LCD_PIXEL_WIDTH*(Ypos+y)))) = CurrentTextColor;
 8016576:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016578:	f001 fe0c 	bl	8018194 <__aeabi_i2f>
 801657c:	4603      	mov	r3, r0
 801657e:	4618      	mov	r0, r3
 8016580:	69f9      	ldr	r1, [r7, #28]
 8016582:	f001 ff0f 	bl	80183a4 <__aeabi_fdiv>
 8016586:	4603      	mov	r3, r0
 8016588:	4618      	mov	r0, r3
 801658a:	f001 ffa7 	bl	80184dc <__aeabi_f2uiz>
 801658e:	4603      	mov	r3, r0
 8016590:	b29b      	uxth	r3, r3
 8016592:	461a      	mov	r2, r3
 8016594:	68fb      	ldr	r3, [r7, #12]
 8016596:	18d1      	adds	r1, r2, r3
 8016598:	68ba      	ldr	r2, [r7, #8]
 801659a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801659c:	441a      	add	r2, r3
 801659e:	4613      	mov	r3, r2
 80165a0:	011b      	lsls	r3, r3, #4
 80165a2:	1a9b      	subs	r3, r3, r2
 80165a4:	011b      	lsls	r3, r3, #4
 80165a6:	440b      	add	r3, r1
 80165a8:	005b      	lsls	r3, r3, #1
 80165aa:	461a      	mov	r2, r3
 80165ac:	4b3a      	ldr	r3, [pc, #232]	; (8016698 <LCD_DrawEllipse+0x340>)
 80165ae:	681b      	ldr	r3, [r3, #0]
 80165b0:	4413      	add	r3, r2
 80165b2:	4a3a      	ldr	r2, [pc, #232]	; (801669c <LCD_DrawEllipse+0x344>)
 80165b4:	8812      	ldrh	r2, [r2, #0]
 80165b6:	801a      	strh	r2, [r3, #0]
      *(__IO uint16_t*) (CurrentFrameBuffer + (2*((Xpos+(uint16_t)(x/K)) + LCD_PIXEL_WIDTH*(Ypos-y)))) = CurrentTextColor;
 80165b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80165ba:	f001 fdeb 	bl	8018194 <__aeabi_i2f>
 80165be:	4603      	mov	r3, r0
 80165c0:	4618      	mov	r0, r3
 80165c2:	69f9      	ldr	r1, [r7, #28]
 80165c4:	f001 feee 	bl	80183a4 <__aeabi_fdiv>
 80165c8:	4603      	mov	r3, r0
 80165ca:	4618      	mov	r0, r3
 80165cc:	f001 ff86 	bl	80184dc <__aeabi_f2uiz>
 80165d0:	4603      	mov	r3, r0
 80165d2:	b29b      	uxth	r3, r3
 80165d4:	461a      	mov	r2, r3
 80165d6:	68fb      	ldr	r3, [r7, #12]
 80165d8:	18d1      	adds	r1, r2, r3
 80165da:	68ba      	ldr	r2, [r7, #8]
 80165dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80165de:	1ad2      	subs	r2, r2, r3
 80165e0:	4613      	mov	r3, r2
 80165e2:	011b      	lsls	r3, r3, #4
 80165e4:	1a9b      	subs	r3, r3, r2
 80165e6:	011b      	lsls	r3, r3, #4
 80165e8:	440b      	add	r3, r1
 80165ea:	005b      	lsls	r3, r3, #1
 80165ec:	461a      	mov	r2, r3
 80165ee:	4b2a      	ldr	r3, [pc, #168]	; (8016698 <LCD_DrawEllipse+0x340>)
 80165f0:	681b      	ldr	r3, [r3, #0]
 80165f2:	4413      	add	r3, r2
 80165f4:	4a29      	ldr	r2, [pc, #164]	; (801669c <LCD_DrawEllipse+0x344>)
 80165f6:	8812      	ldrh	r2, [r2, #0]
 80165f8:	801a      	strh	r2, [r3, #0]
      *(__IO uint16_t*) (CurrentFrameBuffer + (2*((Xpos-(uint16_t)(x/K)) + LCD_PIXEL_WIDTH*(Ypos-y)))) = CurrentTextColor;
 80165fa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80165fc:	f001 fdca 	bl	8018194 <__aeabi_i2f>
 8016600:	4603      	mov	r3, r0
 8016602:	4618      	mov	r0, r3
 8016604:	69f9      	ldr	r1, [r7, #28]
 8016606:	f001 fecd 	bl	80183a4 <__aeabi_fdiv>
 801660a:	4603      	mov	r3, r0
 801660c:	4618      	mov	r0, r3
 801660e:	f001 ff65 	bl	80184dc <__aeabi_f2uiz>
 8016612:	4603      	mov	r3, r0
 8016614:	b29b      	uxth	r3, r3
 8016616:	68fa      	ldr	r2, [r7, #12]
 8016618:	1ad1      	subs	r1, r2, r3
 801661a:	68ba      	ldr	r2, [r7, #8]
 801661c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801661e:	1ad2      	subs	r2, r2, r3
 8016620:	4613      	mov	r3, r2
 8016622:	011b      	lsls	r3, r3, #4
 8016624:	1a9b      	subs	r3, r3, r2
 8016626:	011b      	lsls	r3, r3, #4
 8016628:	440b      	add	r3, r1
 801662a:	005b      	lsls	r3, r3, #1
 801662c:	461a      	mov	r2, r3
 801662e:	4b1a      	ldr	r3, [pc, #104]	; (8016698 <LCD_DrawEllipse+0x340>)
 8016630:	681b      	ldr	r3, [r3, #0]
 8016632:	4413      	add	r3, r2
 8016634:	4a19      	ldr	r2, [pc, #100]	; (801669c <LCD_DrawEllipse+0x344>)
 8016636:	8812      	ldrh	r2, [r2, #0]
 8016638:	801a      	strh	r2, [r3, #0]
      
      e2 = err;
 801663a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801663c:	623b      	str	r3, [r7, #32]
      if (e2 <= x) {
 801663e:	6a3a      	ldr	r2, [r7, #32]
 8016640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016642:	429a      	cmp	r2, r3
 8016644:	dc13      	bgt.n	801666e <LCD_DrawEllipse+0x316>
        err += ++x*2+1;
 8016646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016648:	3301      	adds	r3, #1
 801664a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801664c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801664e:	005b      	lsls	r3, r3, #1
 8016650:	3301      	adds	r3, #1
 8016652:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016654:	4413      	add	r3, r2
 8016656:	627b      	str	r3, [r7, #36]	; 0x24
        if (-y == x && e2 <= y) e2 = 0;
 8016658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801665a:	425a      	negs	r2, r3
 801665c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801665e:	429a      	cmp	r2, r3
 8016660:	d105      	bne.n	801666e <LCD_DrawEllipse+0x316>
 8016662:	6a3a      	ldr	r2, [r7, #32]
 8016664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016666:	429a      	cmp	r2, r3
 8016668:	dc01      	bgt.n	801666e <LCD_DrawEllipse+0x316>
 801666a:	2300      	movs	r3, #0
 801666c:	623b      	str	r3, [r7, #32]
      }
      if (e2 > y) err += ++y*2+1;     
 801666e:	6a3a      	ldr	r2, [r7, #32]
 8016670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016672:	429a      	cmp	r2, r3
 8016674:	dd08      	ble.n	8016688 <LCD_DrawEllipse+0x330>
 8016676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016678:	3301      	adds	r3, #1
 801667a:	62bb      	str	r3, [r7, #40]	; 0x28
 801667c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801667e:	005b      	lsls	r3, r3, #1
 8016680:	3301      	adds	r3, #1
 8016682:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016684:	4413      	add	r3, r2
 8016686:	627b      	str	r3, [r7, #36]	; 0x24
    }
    while (y <= 0);
 8016688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801668a:	2b00      	cmp	r3, #0
 801668c:	f77f af4d 	ble.w	801652a <LCD_DrawEllipse+0x1d2>
  }
}
 8016690:	3734      	adds	r7, #52	; 0x34
 8016692:	46bd      	mov	sp, r7
 8016694:	bd90      	pop	{r4, r7, pc}
 8016696:	bf00      	nop
 8016698:	200000b8 	.word	0x200000b8
 801669c:	2000534c 	.word	0x2000534c

080166a0 <LCD_DrawMonoPict>:
  * @brief  Displays a mono-color picture.
  * @param  Pict: pointer to the picture array.
  * @retval None
  */
void LCD_DrawMonoPict(const uint32_t *Pict)
{
 80166a0:	b480      	push	{r7}
 80166a2:	b085      	sub	sp, #20
 80166a4:	af00      	add	r7, sp, #0
 80166a6:	6078      	str	r0, [r7, #4]
  uint32_t index = 0, counter = 0;
 80166a8:	2300      	movs	r3, #0
 80166aa:	60fb      	str	r3, [r7, #12]
 80166ac:	2300      	movs	r3, #0
 80166ae:	60bb      	str	r3, [r7, #8]
  
   
  for(index = 0; index < 2400; index++)
 80166b0:	2300      	movs	r3, #0
 80166b2:	60fb      	str	r3, [r7, #12]
 80166b4:	e022      	b.n	80166fc <LCD_DrawMonoPict+0x5c>
  {
    for(counter = 0; counter < 32; counter++)
 80166b6:	2300      	movs	r3, #0
 80166b8:	60bb      	str	r3, [r7, #8]
 80166ba:	e019      	b.n	80166f0 <LCD_DrawMonoPict+0x50>
    {
      if((Pict[index] & (1 << counter)) == 0x00)
 80166bc:	68fb      	ldr	r3, [r7, #12]
 80166be:	009b      	lsls	r3, r3, #2
 80166c0:	687a      	ldr	r2, [r7, #4]
 80166c2:	4413      	add	r3, r2
 80166c4:	681a      	ldr	r2, [r3, #0]
 80166c6:	68bb      	ldr	r3, [r7, #8]
 80166c8:	2101      	movs	r1, #1
 80166ca:	fa01 f303 	lsl.w	r3, r1, r3
 80166ce:	4013      	ands	r3, r2
 80166d0:	2b00      	cmp	r3, #0
 80166d2:	d105      	bne.n	80166e0 <LCD_DrawMonoPict+0x40>
      {
        *(__IO uint16_t*)(CurrentFrameBuffer) = CurrentBackColor;
 80166d4:	4b0e      	ldr	r3, [pc, #56]	; (8016710 <LCD_DrawMonoPict+0x70>)
 80166d6:	681b      	ldr	r3, [r3, #0]
 80166d8:	4a0e      	ldr	r2, [pc, #56]	; (8016714 <LCD_DrawMonoPict+0x74>)
 80166da:	8812      	ldrh	r2, [r2, #0]
 80166dc:	801a      	strh	r2, [r3, #0]
 80166de:	e004      	b.n	80166ea <LCD_DrawMonoPict+0x4a>
      }
      else
      {
        *(__IO uint16_t*)(CurrentFrameBuffer) = CurrentTextColor;
 80166e0:	4b0b      	ldr	r3, [pc, #44]	; (8016710 <LCD_DrawMonoPict+0x70>)
 80166e2:	681b      	ldr	r3, [r3, #0]
 80166e4:	4a0c      	ldr	r2, [pc, #48]	; (8016718 <LCD_DrawMonoPict+0x78>)
 80166e6:	8812      	ldrh	r2, [r2, #0]
 80166e8:	801a      	strh	r2, [r3, #0]
  uint32_t index = 0, counter = 0;
  
   
  for(index = 0; index < 2400; index++)
  {
    for(counter = 0; counter < 32; counter++)
 80166ea:	68bb      	ldr	r3, [r7, #8]
 80166ec:	3301      	adds	r3, #1
 80166ee:	60bb      	str	r3, [r7, #8]
 80166f0:	68bb      	ldr	r3, [r7, #8]
 80166f2:	2b1f      	cmp	r3, #31
 80166f4:	d9e2      	bls.n	80166bc <LCD_DrawMonoPict+0x1c>
void LCD_DrawMonoPict(const uint32_t *Pict)
{
  uint32_t index = 0, counter = 0;
  
   
  for(index = 0; index < 2400; index++)
 80166f6:	68fb      	ldr	r3, [r7, #12]
 80166f8:	3301      	adds	r3, #1
 80166fa:	60fb      	str	r3, [r7, #12]
 80166fc:	68fb      	ldr	r3, [r7, #12]
 80166fe:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
 8016702:	d3d8      	bcc.n	80166b6 <LCD_DrawMonoPict+0x16>
      {
        *(__IO uint16_t*)(CurrentFrameBuffer) = CurrentTextColor;
      }
    }
  }
}
 8016704:	3714      	adds	r7, #20
 8016706:	46bd      	mov	sp, r7
 8016708:	f85d 7b04 	ldr.w	r7, [sp], #4
 801670c:	4770      	bx	lr
 801670e:	bf00      	nop
 8016710:	200000b8 	.word	0x200000b8
 8016714:	200000b4 	.word	0x200000b4
 8016718:	2000534c 	.word	0x2000534c

0801671c <LCD_WriteBMP>:
  * @brief  Displays a bitmap picture loaded in the internal Flash.
  * @param  BmpAddress: Bmp picture address in the internal Flash.
  * @retval None
  */
void LCD_WriteBMP(uint32_t BmpAddress)
{
 801671c:	b580      	push	{r7, lr}
 801671e:	b08a      	sub	sp, #40	; 0x28
 8016720:	af00      	add	r7, sp, #0
 8016722:	6078      	str	r0, [r7, #4]
  uint32_t index = 0, size = 0, width = 0, height = 0, bit_pixel = 0;
 8016724:	2300      	movs	r3, #0
 8016726:	627b      	str	r3, [r7, #36]	; 0x24
 8016728:	2300      	movs	r3, #0
 801672a:	617b      	str	r3, [r7, #20]
 801672c:	2300      	movs	r3, #0
 801672e:	613b      	str	r3, [r7, #16]
 8016730:	2300      	movs	r3, #0
 8016732:	60fb      	str	r3, [r7, #12]
 8016734:	2300      	movs	r3, #0
 8016736:	60bb      	str	r3, [r7, #8]
  uint32_t Address;
  uint32_t currentline = 0, linenumber = 0;
 8016738:	2300      	movs	r3, #0
 801673a:	61fb      	str	r3, [r7, #28]
 801673c:	2300      	movs	r3, #0
 801673e:	61bb      	str	r3, [r7, #24]
 
  Address = CurrentFrameBuffer;
 8016740:	4b69      	ldr	r3, [pc, #420]	; (80168e8 <LCD_WriteBMP+0x1cc>)
 8016742:	681b      	ldr	r3, [r3, #0]
 8016744:	623b      	str	r3, [r7, #32]

  /* Read bitmap size */
  size = *(__IO uint16_t *) (BmpAddress + 2);
 8016746:	687b      	ldr	r3, [r7, #4]
 8016748:	3302      	adds	r3, #2
 801674a:	881b      	ldrh	r3, [r3, #0]
 801674c:	b29b      	uxth	r3, r3
 801674e:	617b      	str	r3, [r7, #20]
  size |= (*(__IO uint16_t *) (BmpAddress + 4)) << 16;
 8016750:	687b      	ldr	r3, [r7, #4]
 8016752:	3304      	adds	r3, #4
 8016754:	881b      	ldrh	r3, [r3, #0]
 8016756:	b29b      	uxth	r3, r3
 8016758:	041b      	lsls	r3, r3, #16
 801675a:	697a      	ldr	r2, [r7, #20]
 801675c:	4313      	orrs	r3, r2
 801675e:	617b      	str	r3, [r7, #20]
  
  /* Get bitmap data address offset */
  index = *(__IO uint16_t *) (BmpAddress + 10);
 8016760:	687b      	ldr	r3, [r7, #4]
 8016762:	330a      	adds	r3, #10
 8016764:	881b      	ldrh	r3, [r3, #0]
 8016766:	b29b      	uxth	r3, r3
 8016768:	627b      	str	r3, [r7, #36]	; 0x24
  index |= (*(__IO uint16_t *) (BmpAddress + 12)) << 16;
 801676a:	687b      	ldr	r3, [r7, #4]
 801676c:	330c      	adds	r3, #12
 801676e:	881b      	ldrh	r3, [r3, #0]
 8016770:	b29b      	uxth	r3, r3
 8016772:	041b      	lsls	r3, r3, #16
 8016774:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016776:	4313      	orrs	r3, r2
 8016778:	627b      	str	r3, [r7, #36]	; 0x24

  /* Read bitmap width */
  width = *(uint16_t *) (BmpAddress + 18);
 801677a:	687b      	ldr	r3, [r7, #4]
 801677c:	3312      	adds	r3, #18
 801677e:	881b      	ldrh	r3, [r3, #0]
 8016780:	613b      	str	r3, [r7, #16]
  width |= (*(uint16_t *) (BmpAddress + 20)) << 16;
 8016782:	687b      	ldr	r3, [r7, #4]
 8016784:	3314      	adds	r3, #20
 8016786:	881b      	ldrh	r3, [r3, #0]
 8016788:	041b      	lsls	r3, r3, #16
 801678a:	693a      	ldr	r2, [r7, #16]
 801678c:	4313      	orrs	r3, r2
 801678e:	613b      	str	r3, [r7, #16]

  /* Read bitmap height */
  height = *(uint16_t *) (BmpAddress + 22);
 8016790:	687b      	ldr	r3, [r7, #4]
 8016792:	3316      	adds	r3, #22
 8016794:	881b      	ldrh	r3, [r3, #0]
 8016796:	60fb      	str	r3, [r7, #12]
  height |= (*(uint16_t *) (BmpAddress + 24)) << 16;
 8016798:	687b      	ldr	r3, [r7, #4]
 801679a:	3318      	adds	r3, #24
 801679c:	881b      	ldrh	r3, [r3, #0]
 801679e:	041b      	lsls	r3, r3, #16
 80167a0:	68fa      	ldr	r2, [r7, #12]
 80167a2:	4313      	orrs	r3, r2
 80167a4:	60fb      	str	r3, [r7, #12]

  /* Read bit/pixel */
  bit_pixel = *(uint16_t *) (BmpAddress + 28);  
 80167a6:	687b      	ldr	r3, [r7, #4]
 80167a8:	331c      	adds	r3, #28
 80167aa:	881b      	ldrh	r3, [r3, #0]
 80167ac:	60bb      	str	r3, [r7, #8]
 
  if (CurrentLayer == LCD_BACKGROUND_LAYER)
 80167ae:	4b4f      	ldr	r3, [pc, #316]	; (80168ec <LCD_WriteBMP+0x1d0>)
 80167b0:	681b      	ldr	r3, [r3, #0]
 80167b2:	2b00      	cmp	r3, #0
 80167b4:	d127      	bne.n	8016806 <LCD_WriteBMP+0xea>
  {
    /* reconfigure layer size in accordance with the picture */
    LTDC_LayerSize(LTDC_Layer1, width, height);
 80167b6:	484e      	ldr	r0, [pc, #312]	; (80168f0 <LCD_WriteBMP+0x1d4>)
 80167b8:	6939      	ldr	r1, [r7, #16]
 80167ba:	68fa      	ldr	r2, [r7, #12]
 80167bc:	f7f8 fb9c 	bl	800eef8 <LTDC_LayerSize>
    LTDC_ReloadConfig(LTDC_VBReload);
 80167c0:	2002      	movs	r0, #2
 80167c2:	f7f8 f91d 	bl	800ea00 <LTDC_ReloadConfig>

    /* Reconfigure the Layer pixel format in accordance with the picture */    
    if ((bit_pixel/8) == 4)
 80167c6:	68bb      	ldr	r3, [r7, #8]
 80167c8:	3b20      	subs	r3, #32
 80167ca:	2b07      	cmp	r3, #7
 80167cc:	d807      	bhi.n	80167de <LCD_WriteBMP+0xc2>
    {
      LTDC_LayerPixelFormat(LTDC_Layer1, LTDC_Pixelformat_ARGB8888);
 80167ce:	4848      	ldr	r0, [pc, #288]	; (80168f0 <LCD_WriteBMP+0x1d4>)
 80167d0:	2100      	movs	r1, #0
 80167d2:	f7f8 fbf7 	bl	800efc4 <LTDC_LayerPixelFormat>
      LTDC_ReloadConfig(LTDC_VBReload);
 80167d6:	2002      	movs	r0, #2
 80167d8:	f7f8 f912 	bl	800ea00 <LTDC_ReloadConfig>
 80167dc:	e03a      	b.n	8016854 <LCD_WriteBMP+0x138>
    }
    else if ((bit_pixel/8) == 2)
 80167de:	68bb      	ldr	r3, [r7, #8]
 80167e0:	3b10      	subs	r3, #16
 80167e2:	2b07      	cmp	r3, #7
 80167e4:	d807      	bhi.n	80167f6 <LCD_WriteBMP+0xda>
    {
      LTDC_LayerPixelFormat(LTDC_Layer1, LTDC_Pixelformat_RGB565);
 80167e6:	4842      	ldr	r0, [pc, #264]	; (80168f0 <LCD_WriteBMP+0x1d4>)
 80167e8:	2102      	movs	r1, #2
 80167ea:	f7f8 fbeb 	bl	800efc4 <LTDC_LayerPixelFormat>
      LTDC_ReloadConfig(LTDC_VBReload);
 80167ee:	2002      	movs	r0, #2
 80167f0:	f7f8 f906 	bl	800ea00 <LTDC_ReloadConfig>
 80167f4:	e02e      	b.n	8016854 <LCD_WriteBMP+0x138>
    }
    else 
    {
      LTDC_LayerPixelFormat(LTDC_Layer1, LTDC_Pixelformat_RGB888);
 80167f6:	483e      	ldr	r0, [pc, #248]	; (80168f0 <LCD_WriteBMP+0x1d4>)
 80167f8:	2101      	movs	r1, #1
 80167fa:	f7f8 fbe3 	bl	800efc4 <LTDC_LayerPixelFormat>
      LTDC_ReloadConfig(LTDC_VBReload);
 80167fe:	2002      	movs	r0, #2
 8016800:	f7f8 f8fe 	bl	800ea00 <LTDC_ReloadConfig>
 8016804:	e026      	b.n	8016854 <LCD_WriteBMP+0x138>
    } 
  }
  else
  {
    /* reconfigure layer size in accordance with the picture */
    LTDC_LayerSize(LTDC_Layer2, width, height);
 8016806:	483b      	ldr	r0, [pc, #236]	; (80168f4 <LCD_WriteBMP+0x1d8>)
 8016808:	6939      	ldr	r1, [r7, #16]
 801680a:	68fa      	ldr	r2, [r7, #12]
 801680c:	f7f8 fb74 	bl	800eef8 <LTDC_LayerSize>
    LTDC_ReloadConfig(LTDC_VBReload); 
 8016810:	2002      	movs	r0, #2
 8016812:	f7f8 f8f5 	bl	800ea00 <LTDC_ReloadConfig>
    
    /* Reconfigure the Layer pixel format in accordance with the picture */
    if ((bit_pixel/8) == 4)
 8016816:	68bb      	ldr	r3, [r7, #8]
 8016818:	3b20      	subs	r3, #32
 801681a:	2b07      	cmp	r3, #7
 801681c:	d807      	bhi.n	801682e <LCD_WriteBMP+0x112>
    {
      LTDC_LayerPixelFormat(LTDC_Layer2, LTDC_Pixelformat_ARGB8888);
 801681e:	4835      	ldr	r0, [pc, #212]	; (80168f4 <LCD_WriteBMP+0x1d8>)
 8016820:	2100      	movs	r1, #0
 8016822:	f7f8 fbcf 	bl	800efc4 <LTDC_LayerPixelFormat>
      LTDC_ReloadConfig(LTDC_VBReload);
 8016826:	2002      	movs	r0, #2
 8016828:	f7f8 f8ea 	bl	800ea00 <LTDC_ReloadConfig>
 801682c:	e012      	b.n	8016854 <LCD_WriteBMP+0x138>
    }
    else if ((bit_pixel/8) == 2)
 801682e:	68bb      	ldr	r3, [r7, #8]
 8016830:	3b10      	subs	r3, #16
 8016832:	2b07      	cmp	r3, #7
 8016834:	d807      	bhi.n	8016846 <LCD_WriteBMP+0x12a>
    {
      LTDC_LayerPixelFormat(LTDC_Layer2, LTDC_Pixelformat_RGB565);
 8016836:	482f      	ldr	r0, [pc, #188]	; (80168f4 <LCD_WriteBMP+0x1d8>)
 8016838:	2102      	movs	r1, #2
 801683a:	f7f8 fbc3 	bl	800efc4 <LTDC_LayerPixelFormat>
      LTDC_ReloadConfig(LTDC_VBReload);
 801683e:	2002      	movs	r0, #2
 8016840:	f7f8 f8de 	bl	800ea00 <LTDC_ReloadConfig>
 8016844:	e006      	b.n	8016854 <LCD_WriteBMP+0x138>
    }
    else
    {
      LTDC_LayerPixelFormat(LTDC_Layer2, LTDC_Pixelformat_RGB888);
 8016846:	482b      	ldr	r0, [pc, #172]	; (80168f4 <LCD_WriteBMP+0x1d8>)
 8016848:	2101      	movs	r1, #1
 801684a:	f7f8 fbbb 	bl	800efc4 <LTDC_LayerPixelFormat>
      LTDC_ReloadConfig(LTDC_VBReload);  
 801684e:	2002      	movs	r0, #2
 8016850:	f7f8 f8d6 	bl	800ea00 <LTDC_ReloadConfig>
    }
  }
 
  /* compute the real size of the picture (without the header)) */  
  size = (size - index); 
 8016854:	697a      	ldr	r2, [r7, #20]
 8016856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016858:	1ad3      	subs	r3, r2, r3
 801685a:	617b      	str	r3, [r7, #20]

  /* bypass the bitmap header */
  BmpAddress += index;
 801685c:	687a      	ldr	r2, [r7, #4]
 801685e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016860:	4413      	add	r3, r2
 8016862:	607b      	str	r3, [r7, #4]

  /* start copie image from the bottom */
  Address += width*(height-1)*(bit_pixel/8);
 8016864:	68fb      	ldr	r3, [r7, #12]
 8016866:	3b01      	subs	r3, #1
 8016868:	693a      	ldr	r2, [r7, #16]
 801686a:	fb02 f303 	mul.w	r3, r2, r3
 801686e:	68ba      	ldr	r2, [r7, #8]
 8016870:	08d2      	lsrs	r2, r2, #3
 8016872:	fb02 f303 	mul.w	r3, r2, r3
 8016876:	6a3a      	ldr	r2, [r7, #32]
 8016878:	4413      	add	r3, r2
 801687a:	623b      	str	r3, [r7, #32]
  
  for(index = 0; index < size; index++)
 801687c:	2300      	movs	r3, #0
 801687e:	627b      	str	r3, [r7, #36]	; 0x24
 8016880:	e02a      	b.n	80168d8 <LCD_WriteBMP+0x1bc>
  {
    *(__IO uint8_t*) (Address) = *(__IO uint8_t *)BmpAddress;
 8016882:	6a3b      	ldr	r3, [r7, #32]
 8016884:	687a      	ldr	r2, [r7, #4]
 8016886:	7812      	ldrb	r2, [r2, #0]
 8016888:	b2d2      	uxtb	r2, r2
 801688a:	701a      	strb	r2, [r3, #0]
    
    /*jump on next byte */   
    BmpAddress++;
 801688c:	687b      	ldr	r3, [r7, #4]
 801688e:	3301      	adds	r3, #1
 8016890:	607b      	str	r3, [r7, #4]
    Address++;
 8016892:	6a3b      	ldr	r3, [r7, #32]
 8016894:	3301      	adds	r3, #1
 8016896:	623b      	str	r3, [r7, #32]
    currentline++;
 8016898:	69fb      	ldr	r3, [r7, #28]
 801689a:	3301      	adds	r3, #1
 801689c:	61fb      	str	r3, [r7, #28]
    
    if((currentline/(bit_pixel/8)) == width)
 801689e:	68bb      	ldr	r3, [r7, #8]
 80168a0:	08db      	lsrs	r3, r3, #3
 80168a2:	69fa      	ldr	r2, [r7, #28]
 80168a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80168a8:	693b      	ldr	r3, [r7, #16]
 80168aa:	429a      	cmp	r2, r3
 80168ac:	d111      	bne.n	80168d2 <LCD_WriteBMP+0x1b6>
    {
      if(linenumber < height)
 80168ae:	69ba      	ldr	r2, [r7, #24]
 80168b0:	68fb      	ldr	r3, [r7, #12]
 80168b2:	429a      	cmp	r2, r3
 80168b4:	d20d      	bcs.n	80168d2 <LCD_WriteBMP+0x1b6>
      {
        linenumber++;
 80168b6:	69bb      	ldr	r3, [r7, #24]
 80168b8:	3301      	adds	r3, #1
 80168ba:	61bb      	str	r3, [r7, #24]
        Address -=(2*width*(bit_pixel/8));
 80168bc:	68bb      	ldr	r3, [r7, #8]
 80168be:	08db      	lsrs	r3, r3, #3
 80168c0:	693a      	ldr	r2, [r7, #16]
 80168c2:	fb02 f303 	mul.w	r3, r2, r3
 80168c6:	005b      	lsls	r3, r3, #1
 80168c8:	6a3a      	ldr	r2, [r7, #32]
 80168ca:	1ad3      	subs	r3, r2, r3
 80168cc:	623b      	str	r3, [r7, #32]
        currentline = 0;
 80168ce:	2300      	movs	r3, #0
 80168d0:	61fb      	str	r3, [r7, #28]
  BmpAddress += index;

  /* start copie image from the bottom */
  Address += width*(height-1)*(bit_pixel/8);
  
  for(index = 0; index < size; index++)
 80168d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80168d4:	3301      	adds	r3, #1
 80168d6:	627b      	str	r3, [r7, #36]	; 0x24
 80168d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80168da:	697b      	ldr	r3, [r7, #20]
 80168dc:	429a      	cmp	r2, r3
 80168de:	d3d0      	bcc.n	8016882 <LCD_WriteBMP+0x166>
        Address -=(2*width*(bit_pixel/8));
        currentline = 0;
      }
    }
  }
}
 80168e0:	3728      	adds	r7, #40	; 0x28
 80168e2:	46bd      	mov	sp, r7
 80168e4:	bd80      	pop	{r7, pc}
 80168e6:	bf00      	nop
 80168e8:	200000b8 	.word	0x200000b8
 80168ec:	20005350 	.word	0x20005350
 80168f0:	40016884 	.word	0x40016884
 80168f4:	40016904 	.word	0x40016904

080168f8 <LCD_DrawFullRect>:
  * @param  Height: rectangle height.
  * @param  Width: rectangle width.
  * @retval None
  */
void LCD_DrawFullRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80168f8:	b580      	push	{r7, lr}
 80168fa:	b090      	sub	sp, #64	; 0x40
 80168fc:	af00      	add	r7, sp, #0
 80168fe:	80f8      	strh	r0, [r7, #6]
 8016900:	80b9      	strh	r1, [r7, #4]
 8016902:	807a      	strh	r2, [r7, #2]
 8016904:	803b      	strh	r3, [r7, #0]
  DMA2D_InitTypeDef      DMA2D_InitStruct;
  
  uint32_t  Xaddress = 0; 
 8016906:	2300      	movs	r3, #0
 8016908:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t Red_Value = 0, Green_Value = 0, Blue_Value = 0;
 801690a:	2300      	movs	r3, #0
 801690c:	877b      	strh	r3, [r7, #58]	; 0x3a
 801690e:	2300      	movs	r3, #0
 8016910:	873b      	strh	r3, [r7, #56]	; 0x38
 8016912:	2300      	movs	r3, #0
 8016914:	86fb      	strh	r3, [r7, #54]	; 0x36
 
  Red_Value = (0xF800 & CurrentTextColor) >> 11;
 8016916:	4b26      	ldr	r3, [pc, #152]	; (80169b0 <LCD_DrawFullRect+0xb8>)
 8016918:	881b      	ldrh	r3, [r3, #0]
 801691a:	0adb      	lsrs	r3, r3, #11
 801691c:	877b      	strh	r3, [r7, #58]	; 0x3a
  Blue_Value = 0x001F & CurrentTextColor;
 801691e:	4b24      	ldr	r3, [pc, #144]	; (80169b0 <LCD_DrawFullRect+0xb8>)
 8016920:	881b      	ldrh	r3, [r3, #0]
 8016922:	f003 031f 	and.w	r3, r3, #31
 8016926:	86fb      	strh	r3, [r7, #54]	; 0x36
  Green_Value = (0x07E0 & CurrentTextColor) >> 5;
 8016928:	4b21      	ldr	r3, [pc, #132]	; (80169b0 <LCD_DrawFullRect+0xb8>)
 801692a:	881b      	ldrh	r3, [r3, #0]
 801692c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8016930:	b29b      	uxth	r3, r3
 8016932:	095b      	lsrs	r3, r3, #5
 8016934:	873b      	strh	r3, [r7, #56]	; 0x38
  
  Xaddress = CurrentFrameBuffer + 2*(LCD_PIXEL_WIDTH*Ypos + Xpos);
 8016936:	88ba      	ldrh	r2, [r7, #4]
 8016938:	4613      	mov	r3, r2
 801693a:	011b      	lsls	r3, r3, #4
 801693c:	1a9b      	subs	r3, r3, r2
 801693e:	011b      	lsls	r3, r3, #4
 8016940:	461a      	mov	r2, r3
 8016942:	88fb      	ldrh	r3, [r7, #6]
 8016944:	4413      	add	r3, r2
 8016946:	005b      	lsls	r3, r3, #1
 8016948:	461a      	mov	r2, r3
 801694a:	4b1a      	ldr	r3, [pc, #104]	; (80169b4 <LCD_DrawFullRect+0xbc>)
 801694c:	681b      	ldr	r3, [r3, #0]
 801694e:	4413      	add	r3, r2
 8016950:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* configure DMA2D */
  DMA2D_DeInit();
 8016952:	f7f3 fe29 	bl	800a5a8 <DMA2D_DeInit>
  DMA2D_InitStruct.DMA2D_Mode = DMA2D_R2M;       
 8016956:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 801695a:	60fb      	str	r3, [r7, #12]
  DMA2D_InitStruct.DMA2D_CMode = DMA2D_RGB565;      
 801695c:	2302      	movs	r3, #2
 801695e:	613b      	str	r3, [r7, #16]
  DMA2D_InitStruct.DMA2D_OutputGreen = Green_Value;      
 8016960:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8016962:	61bb      	str	r3, [r7, #24]
  DMA2D_InitStruct.DMA2D_OutputBlue = Blue_Value;     
 8016964:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8016966:	617b      	str	r3, [r7, #20]
  DMA2D_InitStruct.DMA2D_OutputRed = Red_Value;                
 8016968:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801696a:	61fb      	str	r3, [r7, #28]
  DMA2D_InitStruct.DMA2D_OutputAlpha = 0x0F;                  
 801696c:	230f      	movs	r3, #15
 801696e:	623b      	str	r3, [r7, #32]
  DMA2D_InitStruct.DMA2D_OutputMemoryAdd = Xaddress;                
 8016970:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016972:	627b      	str	r3, [r7, #36]	; 0x24
  DMA2D_InitStruct.DMA2D_OutputOffset = (LCD_PIXEL_WIDTH - Width);                
 8016974:	887b      	ldrh	r3, [r7, #2]
 8016976:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 801697a:	62bb      	str	r3, [r7, #40]	; 0x28
  DMA2D_InitStruct.DMA2D_NumberOfLine = Height;            
 801697c:	883b      	ldrh	r3, [r7, #0]
 801697e:	62fb      	str	r3, [r7, #44]	; 0x2c
  DMA2D_InitStruct.DMA2D_PixelPerLine = Width;
 8016980:	887b      	ldrh	r3, [r7, #2]
 8016982:	633b      	str	r3, [r7, #48]	; 0x30
  DMA2D_Init(&DMA2D_InitStruct); 
 8016984:	f107 030c 	add.w	r3, r7, #12
 8016988:	4618      	mov	r0, r3
 801698a:	f7f3 fe1b 	bl	800a5c4 <DMA2D_Init>
  
  /* Start Transfer */ 
  DMA2D_StartTransfer();
 801698e:	f7f3 feef 	bl	800a770 <DMA2D_StartTransfer>
  
  /* Wait for CTC Flag activation */
  while(DMA2D_GetFlagStatus(DMA2D_FLAG_TC) == RESET)
 8016992:	bf00      	nop
 8016994:	2002      	movs	r0, #2
 8016996:	f7f4 f8e1 	bl	800ab5c <DMA2D_GetFlagStatus>
 801699a:	4603      	mov	r3, r0
 801699c:	2b00      	cmp	r3, #0
 801699e:	d0f9      	beq.n	8016994 <LCD_DrawFullRect+0x9c>
  {
  } 

  LCD_SetTextColor(CurrentTextColor);
 80169a0:	4b03      	ldr	r3, [pc, #12]	; (80169b0 <LCD_DrawFullRect+0xb8>)
 80169a2:	881b      	ldrh	r3, [r3, #0]
 80169a4:	4618      	mov	r0, r3
 80169a6:	f7ff f807 	bl	80159b8 <LCD_SetTextColor>
}
 80169aa:	3740      	adds	r7, #64	; 0x40
 80169ac:	46bd      	mov	sp, r7
 80169ae:	bd80      	pop	{r7, pc}
 80169b0:	2000534c 	.word	0x2000534c
 80169b4:	200000b8 	.word	0x200000b8

080169b8 <LCD_DrawFullCircle>:
  * @param  Ypos: specifies the Y position, can be a value from 0 to 320.
  * @param  Radius
  * @retval None
  */
void LCD_DrawFullCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 80169b8:	b580      	push	{r7, lr}
 80169ba:	b086      	sub	sp, #24
 80169bc:	af00      	add	r7, sp, #0
 80169be:	4613      	mov	r3, r2
 80169c0:	4602      	mov	r2, r0
 80169c2:	80fa      	strh	r2, [r7, #6]
 80169c4:	460a      	mov	r2, r1
 80169c6:	80ba      	strh	r2, [r7, #4]
 80169c8:	807b      	strh	r3, [r7, #2]
  int32_t  D;    /* Decision Variable */ 
  uint32_t  CurX;/* Current X Value */
  uint32_t  CurY;/* Current Y Value */ 
  
  D = 3 - (Radius << 1);
 80169ca:	887b      	ldrh	r3, [r7, #2]
 80169cc:	005b      	lsls	r3, r3, #1
 80169ce:	f1c3 0303 	rsb	r3, r3, #3
 80169d2:	617b      	str	r3, [r7, #20]
  
  CurX = 0;
 80169d4:	2300      	movs	r3, #0
 80169d6:	613b      	str	r3, [r7, #16]
  CurY = Radius;
 80169d8:	887b      	ldrh	r3, [r7, #2]
 80169da:	60fb      	str	r3, [r7, #12]
  
  while (CurX <= CurY)
 80169dc:	e06d      	b.n	8016aba <LCD_DrawFullCircle+0x102>
  {
    if(CurY > 0) 
 80169de:	68fb      	ldr	r3, [r7, #12]
 80169e0:	2b00      	cmp	r3, #0
 80169e2:	d027      	beq.n	8016a34 <LCD_DrawFullCircle+0x7c>
    {
      LCD_DrawLine(Xpos - CurX, Ypos - CurY, 2*CurY, LCD_DIR_VERTICAL);
 80169e4:	693b      	ldr	r3, [r7, #16]
 80169e6:	b29b      	uxth	r3, r3
 80169e8:	88fa      	ldrh	r2, [r7, #6]
 80169ea:	1ad3      	subs	r3, r2, r3
 80169ec:	b299      	uxth	r1, r3
 80169ee:	68fb      	ldr	r3, [r7, #12]
 80169f0:	b29b      	uxth	r3, r3
 80169f2:	88ba      	ldrh	r2, [r7, #4]
 80169f4:	1ad3      	subs	r3, r2, r3
 80169f6:	b29a      	uxth	r2, r3
 80169f8:	68fb      	ldr	r3, [r7, #12]
 80169fa:	b29b      	uxth	r3, r3
 80169fc:	005b      	lsls	r3, r3, #1
 80169fe:	b29b      	uxth	r3, r3
 8016a00:	4608      	mov	r0, r1
 8016a02:	4611      	mov	r1, r2
 8016a04:	461a      	mov	r2, r3
 8016a06:	2301      	movs	r3, #1
 8016a08:	f7ff fa24 	bl	8015e54 <LCD_DrawLine>
      LCD_DrawLine(Xpos + CurX, Ypos - CurY, 2*CurY, LCD_DIR_VERTICAL);
 8016a0c:	693b      	ldr	r3, [r7, #16]
 8016a0e:	b29a      	uxth	r2, r3
 8016a10:	88fb      	ldrh	r3, [r7, #6]
 8016a12:	4413      	add	r3, r2
 8016a14:	b299      	uxth	r1, r3
 8016a16:	68fb      	ldr	r3, [r7, #12]
 8016a18:	b29b      	uxth	r3, r3
 8016a1a:	88ba      	ldrh	r2, [r7, #4]
 8016a1c:	1ad3      	subs	r3, r2, r3
 8016a1e:	b29a      	uxth	r2, r3
 8016a20:	68fb      	ldr	r3, [r7, #12]
 8016a22:	b29b      	uxth	r3, r3
 8016a24:	005b      	lsls	r3, r3, #1
 8016a26:	b29b      	uxth	r3, r3
 8016a28:	4608      	mov	r0, r1
 8016a2a:	4611      	mov	r1, r2
 8016a2c:	461a      	mov	r2, r3
 8016a2e:	2301      	movs	r3, #1
 8016a30:	f7ff fa10 	bl	8015e54 <LCD_DrawLine>
    }
    
    if(CurX > 0) 
 8016a34:	693b      	ldr	r3, [r7, #16]
 8016a36:	2b00      	cmp	r3, #0
 8016a38:	d027      	beq.n	8016a8a <LCD_DrawFullCircle+0xd2>
    {
      LCD_DrawLine(Xpos - CurY, Ypos - CurX, 2*CurX, LCD_DIR_VERTICAL);
 8016a3a:	68fb      	ldr	r3, [r7, #12]
 8016a3c:	b29b      	uxth	r3, r3
 8016a3e:	88fa      	ldrh	r2, [r7, #6]
 8016a40:	1ad3      	subs	r3, r2, r3
 8016a42:	b299      	uxth	r1, r3
 8016a44:	693b      	ldr	r3, [r7, #16]
 8016a46:	b29b      	uxth	r3, r3
 8016a48:	88ba      	ldrh	r2, [r7, #4]
 8016a4a:	1ad3      	subs	r3, r2, r3
 8016a4c:	b29a      	uxth	r2, r3
 8016a4e:	693b      	ldr	r3, [r7, #16]
 8016a50:	b29b      	uxth	r3, r3
 8016a52:	005b      	lsls	r3, r3, #1
 8016a54:	b29b      	uxth	r3, r3
 8016a56:	4608      	mov	r0, r1
 8016a58:	4611      	mov	r1, r2
 8016a5a:	461a      	mov	r2, r3
 8016a5c:	2301      	movs	r3, #1
 8016a5e:	f7ff f9f9 	bl	8015e54 <LCD_DrawLine>
      LCD_DrawLine(Xpos + CurY, Ypos - CurX, 2*CurX, LCD_DIR_VERTICAL);
 8016a62:	68fb      	ldr	r3, [r7, #12]
 8016a64:	b29a      	uxth	r2, r3
 8016a66:	88fb      	ldrh	r3, [r7, #6]
 8016a68:	4413      	add	r3, r2
 8016a6a:	b299      	uxth	r1, r3
 8016a6c:	693b      	ldr	r3, [r7, #16]
 8016a6e:	b29b      	uxth	r3, r3
 8016a70:	88ba      	ldrh	r2, [r7, #4]
 8016a72:	1ad3      	subs	r3, r2, r3
 8016a74:	b29a      	uxth	r2, r3
 8016a76:	693b      	ldr	r3, [r7, #16]
 8016a78:	b29b      	uxth	r3, r3
 8016a7a:	005b      	lsls	r3, r3, #1
 8016a7c:	b29b      	uxth	r3, r3
 8016a7e:	4608      	mov	r0, r1
 8016a80:	4611      	mov	r1, r2
 8016a82:	461a      	mov	r2, r3
 8016a84:	2301      	movs	r3, #1
 8016a86:	f7ff f9e5 	bl	8015e54 <LCD_DrawLine>
    }
    if (D < 0)
 8016a8a:	697b      	ldr	r3, [r7, #20]
 8016a8c:	2b00      	cmp	r3, #0
 8016a8e:	da06      	bge.n	8016a9e <LCD_DrawFullCircle+0xe6>
    { 
      D += (CurX << 2) + 6;
 8016a90:	693b      	ldr	r3, [r7, #16]
 8016a92:	009a      	lsls	r2, r3, #2
 8016a94:	697b      	ldr	r3, [r7, #20]
 8016a96:	4413      	add	r3, r2
 8016a98:	3306      	adds	r3, #6
 8016a9a:	617b      	str	r3, [r7, #20]
 8016a9c:	e00a      	b.n	8016ab4 <LCD_DrawFullCircle+0xfc>
    }
    else
    {
      D += ((CurX - CurY) << 2) + 10;
 8016a9e:	693a      	ldr	r2, [r7, #16]
 8016aa0:	68fb      	ldr	r3, [r7, #12]
 8016aa2:	1ad3      	subs	r3, r2, r3
 8016aa4:	009a      	lsls	r2, r3, #2
 8016aa6:	697b      	ldr	r3, [r7, #20]
 8016aa8:	4413      	add	r3, r2
 8016aaa:	330a      	adds	r3, #10
 8016aac:	617b      	str	r3, [r7, #20]
      CurY--;
 8016aae:	68fb      	ldr	r3, [r7, #12]
 8016ab0:	3b01      	subs	r3, #1
 8016ab2:	60fb      	str	r3, [r7, #12]
    }
    CurX++;
 8016ab4:	693b      	ldr	r3, [r7, #16]
 8016ab6:	3301      	adds	r3, #1
 8016ab8:	613b      	str	r3, [r7, #16]
  D = 3 - (Radius << 1);
  
  CurX = 0;
  CurY = Radius;
  
  while (CurX <= CurY)
 8016aba:	693a      	ldr	r2, [r7, #16]
 8016abc:	68fb      	ldr	r3, [r7, #12]
 8016abe:	429a      	cmp	r2, r3
 8016ac0:	d98d      	bls.n	80169de <LCD_DrawFullCircle+0x26>
      CurY--;
    }
    CurX++;
  }
  
  LCD_DrawCircle(Xpos, Ypos, Radius);  
 8016ac2:	88f9      	ldrh	r1, [r7, #6]
 8016ac4:	88ba      	ldrh	r2, [r7, #4]
 8016ac6:	887b      	ldrh	r3, [r7, #2]
 8016ac8:	4608      	mov	r0, r1
 8016aca:	4611      	mov	r1, r2
 8016acc:	461a      	mov	r2, r3
 8016ace:	f7ff fa59 	bl	8015f84 <LCD_DrawCircle>
}
 8016ad2:	3718      	adds	r7, #24
 8016ad4:	46bd      	mov	sp, r7
 8016ad6:	bd80      	pop	{r7, pc}

08016ad8 <LCD_DrawUniLine>:
  * @param  x2: specifies the point 2 x position.
  * @param  y2: specifies the point 2 y position.
  * @retval None
  */
void LCD_DrawUniLine(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8016ad8:	b580      	push	{r7, lr}
 8016ada:	b08a      	sub	sp, #40	; 0x28
 8016adc:	af00      	add	r7, sp, #0
 8016ade:	80f8      	strh	r0, [r7, #6]
 8016ae0:	80b9      	strh	r1, [r7, #4]
 8016ae2:	807a      	strh	r2, [r7, #2]
 8016ae4:	803b      	strh	r3, [r7, #0]
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 8016ae6:	2300      	movs	r3, #0
 8016ae8:	823b      	strh	r3, [r7, #16]
 8016aea:	2300      	movs	r3, #0
 8016aec:	81fb      	strh	r3, [r7, #14]
 8016aee:	2300      	movs	r3, #0
 8016af0:	84fb      	strh	r3, [r7, #38]	; 0x26
 8016af2:	2300      	movs	r3, #0
 8016af4:	84bb      	strh	r3, [r7, #36]	; 0x24
 8016af6:	2300      	movs	r3, #0
 8016af8:	847b      	strh	r3, [r7, #34]	; 0x22
 8016afa:	2300      	movs	r3, #0
 8016afc:	843b      	strh	r3, [r7, #32]
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0, 
 8016afe:	2300      	movs	r3, #0
 8016b00:	83fb      	strh	r3, [r7, #30]
 8016b02:	2300      	movs	r3, #0
 8016b04:	83bb      	strh	r3, [r7, #28]
 8016b06:	2300      	movs	r3, #0
 8016b08:	837b      	strh	r3, [r7, #26]
 8016b0a:	2300      	movs	r3, #0
 8016b0c:	833b      	strh	r3, [r7, #24]
 8016b0e:	2300      	movs	r3, #0
 8016b10:	82fb      	strh	r3, [r7, #22]
 8016b12:	2300      	movs	r3, #0
 8016b14:	82bb      	strh	r3, [r7, #20]
  curpixel = 0;
 8016b16:	2300      	movs	r3, #0
 8016b18:	827b      	strh	r3, [r7, #18]
  
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 8016b1a:	887a      	ldrh	r2, [r7, #2]
 8016b1c:	88fb      	ldrh	r3, [r7, #6]
 8016b1e:	1ad3      	subs	r3, r2, r3
 8016b20:	2b00      	cmp	r3, #0
 8016b22:	bfb8      	it	lt
 8016b24:	425b      	neglt	r3, r3
 8016b26:	823b      	strh	r3, [r7, #16]
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 8016b28:	883a      	ldrh	r2, [r7, #0]
 8016b2a:	88bb      	ldrh	r3, [r7, #4]
 8016b2c:	1ad3      	subs	r3, r2, r3
 8016b2e:	2b00      	cmp	r3, #0
 8016b30:	bfb8      	it	lt
 8016b32:	425b      	neglt	r3, r3
 8016b34:	81fb      	strh	r3, [r7, #14]
  x = x1;                       /* Start x off at the first pixel */
 8016b36:	88fb      	ldrh	r3, [r7, #6]
 8016b38:	84fb      	strh	r3, [r7, #38]	; 0x26
  y = y1;                       /* Start y off at the first pixel */
 8016b3a:	88bb      	ldrh	r3, [r7, #4]
 8016b3c:	84bb      	strh	r3, [r7, #36]	; 0x24
  
  if (x2 >= x1)                 /* The x-values are increasing */
 8016b3e:	887a      	ldrh	r2, [r7, #2]
 8016b40:	88fb      	ldrh	r3, [r7, #6]
 8016b42:	429a      	cmp	r2, r3
 8016b44:	d304      	bcc.n	8016b50 <LCD_DrawUniLine+0x78>
  {
    xinc1 = 1;
 8016b46:	2301      	movs	r3, #1
 8016b48:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = 1;
 8016b4a:	2301      	movs	r3, #1
 8016b4c:	843b      	strh	r3, [r7, #32]
 8016b4e:	e005      	b.n	8016b5c <LCD_DrawUniLine+0x84>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 8016b50:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016b54:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = -1;
 8016b56:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016b5a:	843b      	strh	r3, [r7, #32]
  }
  
  if (y2 >= y1)                 /* The y-values are increasing */
 8016b5c:	883a      	ldrh	r2, [r7, #0]
 8016b5e:	88bb      	ldrh	r3, [r7, #4]
 8016b60:	429a      	cmp	r2, r3
 8016b62:	d304      	bcc.n	8016b6e <LCD_DrawUniLine+0x96>
  {
    yinc1 = 1;
 8016b64:	2301      	movs	r3, #1
 8016b66:	83fb      	strh	r3, [r7, #30]
    yinc2 = 1;
 8016b68:	2301      	movs	r3, #1
 8016b6a:	83bb      	strh	r3, [r7, #28]
 8016b6c:	e005      	b.n	8016b7a <LCD_DrawUniLine+0xa2>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 8016b6e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016b72:	83fb      	strh	r3, [r7, #30]
    yinc2 = -1;
 8016b74:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016b78:	83bb      	strh	r3, [r7, #28]
  }
  
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 8016b7a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8016b7e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8016b82:	429a      	cmp	r2, r3
 8016b84:	db10      	blt.n	8016ba8 <LCD_DrawUniLine+0xd0>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 8016b86:	2300      	movs	r3, #0
 8016b88:	847b      	strh	r3, [r7, #34]	; 0x22
    yinc2 = 0;                  /* Don't change the y for every iteration */
 8016b8a:	2300      	movs	r3, #0
 8016b8c:	83bb      	strh	r3, [r7, #28]
    den = deltax;
 8016b8e:	8a3b      	ldrh	r3, [r7, #16]
 8016b90:	837b      	strh	r3, [r7, #26]
    num = deltax / 2;
 8016b92:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8016b96:	0fda      	lsrs	r2, r3, #31
 8016b98:	4413      	add	r3, r2
 8016b9a:	105b      	asrs	r3, r3, #1
 8016b9c:	833b      	strh	r3, [r7, #24]
    numadd = deltay;
 8016b9e:	89fb      	ldrh	r3, [r7, #14]
 8016ba0:	82fb      	strh	r3, [r7, #22]
    numpixels = deltax;         /* There are more x-values than y-values */
 8016ba2:	8a3b      	ldrh	r3, [r7, #16]
 8016ba4:	82bb      	strh	r3, [r7, #20]
 8016ba6:	e00f      	b.n	8016bc8 <LCD_DrawUniLine+0xf0>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 8016ba8:	2300      	movs	r3, #0
 8016baa:	843b      	strh	r3, [r7, #32]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 8016bac:	2300      	movs	r3, #0
 8016bae:	83fb      	strh	r3, [r7, #30]
    den = deltay;
 8016bb0:	89fb      	ldrh	r3, [r7, #14]
 8016bb2:	837b      	strh	r3, [r7, #26]
    num = deltay / 2;
 8016bb4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8016bb8:	0fda      	lsrs	r2, r3, #31
 8016bba:	4413      	add	r3, r2
 8016bbc:	105b      	asrs	r3, r3, #1
 8016bbe:	833b      	strh	r3, [r7, #24]
    numadd = deltax;
 8016bc0:	8a3b      	ldrh	r3, [r7, #16]
 8016bc2:	82fb      	strh	r3, [r7, #22]
    numpixels = deltay;         /* There are more y-values than x-values */
 8016bc4:	89fb      	ldrh	r3, [r7, #14]
 8016bc6:	82bb      	strh	r3, [r7, #20]
  }
  
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8016bc8:	2300      	movs	r3, #0
 8016bca:	827b      	strh	r3, [r7, #18]
 8016bcc:	e02e      	b.n	8016c2c <LCD_DrawUniLine+0x154>
  {
    PutPixel(x, y);             /* Draw the current pixel */
 8016bce:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8016bd2:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8016bd6:	4610      	mov	r0, r2
 8016bd8:	4619      	mov	r1, r3
 8016bda:	f000 fdc5 	bl	8017768 <PutPixel>
    num += numadd;              /* Increase the numerator by the top of the fraction */
 8016bde:	8b3a      	ldrh	r2, [r7, #24]
 8016be0:	8afb      	ldrh	r3, [r7, #22]
 8016be2:	4413      	add	r3, r2
 8016be4:	b29b      	uxth	r3, r3
 8016be6:	833b      	strh	r3, [r7, #24]
    if (num >= den)             /* Check if numerator >= denominator */
 8016be8:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8016bec:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8016bf0:	429a      	cmp	r2, r3
 8016bf2:	db0e      	blt.n	8016c12 <LCD_DrawUniLine+0x13a>
    {
      num -= den;               /* Calculate the new numerator value */
 8016bf4:	8b3a      	ldrh	r2, [r7, #24]
 8016bf6:	8b7b      	ldrh	r3, [r7, #26]
 8016bf8:	1ad3      	subs	r3, r2, r3
 8016bfa:	b29b      	uxth	r3, r3
 8016bfc:	833b      	strh	r3, [r7, #24]
      x += xinc1;               /* Change the x as appropriate */
 8016bfe:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8016c00:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016c02:	4413      	add	r3, r2
 8016c04:	b29b      	uxth	r3, r3
 8016c06:	84fb      	strh	r3, [r7, #38]	; 0x26
      y += yinc1;               /* Change the y as appropriate */
 8016c08:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8016c0a:	8bfb      	ldrh	r3, [r7, #30]
 8016c0c:	4413      	add	r3, r2
 8016c0e:	b29b      	uxth	r3, r3
 8016c10:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    x += xinc2;                 /* Change the x as appropriate */
 8016c12:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8016c14:	8c3b      	ldrh	r3, [r7, #32]
 8016c16:	4413      	add	r3, r2
 8016c18:	b29b      	uxth	r3, r3
 8016c1a:	84fb      	strh	r3, [r7, #38]	; 0x26
    y += yinc2;                 /* Change the y as appropriate */
 8016c1c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8016c1e:	8bbb      	ldrh	r3, [r7, #28]
 8016c20:	4413      	add	r3, r2
 8016c22:	b29b      	uxth	r3, r3
 8016c24:	84bb      	strh	r3, [r7, #36]	; 0x24
    num = deltay / 2;
    numadd = deltax;
    numpixels = deltay;         /* There are more y-values than x-values */
  }
  
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8016c26:	8a7b      	ldrh	r3, [r7, #18]
 8016c28:	3301      	adds	r3, #1
 8016c2a:	827b      	strh	r3, [r7, #18]
 8016c2c:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8016c30:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8016c34:	429a      	cmp	r2, r3
 8016c36:	ddca      	ble.n	8016bce <LCD_DrawUniLine+0xf6>
      y += yinc1;               /* Change the y as appropriate */
    }
    x += xinc2;                 /* Change the x as appropriate */
    y += yinc2;                 /* Change the y as appropriate */
  }
}
 8016c38:	3728      	adds	r7, #40	; 0x28
 8016c3a:	46bd      	mov	sp, r7
 8016c3c:	bd80      	pop	{r7, pc}
 8016c3e:	bf00      	nop

08016c40 <LCD_Triangle>:
  * @brief  Displays an triangle.
  * @param  Points: pointer to the points array.
  * @retval None
  */
void LCD_Triangle(pPoint Points, uint16_t PointCount)
{
 8016c40:	b580      	push	{r7, lr}
 8016c42:	b084      	sub	sp, #16
 8016c44:	af00      	add	r7, sp, #0
 8016c46:	6078      	str	r0, [r7, #4]
 8016c48:	460b      	mov	r3, r1
 8016c4a:	807b      	strh	r3, [r7, #2]
  int16_t X = 0, Y = 0;
 8016c4c:	2300      	movs	r3, #0
 8016c4e:	81fb      	strh	r3, [r7, #14]
 8016c50:	2300      	movs	r3, #0
 8016c52:	81bb      	strh	r3, [r7, #12]
  pPoint First = Points;
 8016c54:	687b      	ldr	r3, [r7, #4]
 8016c56:	60bb      	str	r3, [r7, #8]

  if(PointCount != 3)
 8016c58:	887b      	ldrh	r3, [r7, #2]
 8016c5a:	2b03      	cmp	r3, #3
 8016c5c:	d000      	beq.n	8016c60 <LCD_Triangle+0x20>
  {
    return;
 8016c5e:	e027      	b.n	8016cb0 <LCD_Triangle+0x70>
  }

  while(--PointCount)
 8016c60:	e012      	b.n	8016c88 <LCD_Triangle+0x48>
  {
    X = Points->X;
 8016c62:	687b      	ldr	r3, [r7, #4]
 8016c64:	881b      	ldrh	r3, [r3, #0]
 8016c66:	81fb      	strh	r3, [r7, #14]
    Y = Points->Y;
 8016c68:	687b      	ldr	r3, [r7, #4]
 8016c6a:	885b      	ldrh	r3, [r3, #2]
 8016c6c:	81bb      	strh	r3, [r7, #12]
    Points++;
 8016c6e:	687b      	ldr	r3, [r7, #4]
 8016c70:	3304      	adds	r3, #4
 8016c72:	607b      	str	r3, [r7, #4]
    LCD_DrawUniLine(X, Y, Points->X, Points->Y);
 8016c74:	89f8      	ldrh	r0, [r7, #14]
 8016c76:	89b9      	ldrh	r1, [r7, #12]
 8016c78:	687b      	ldr	r3, [r7, #4]
 8016c7a:	881b      	ldrh	r3, [r3, #0]
 8016c7c:	b29a      	uxth	r2, r3
 8016c7e:	687b      	ldr	r3, [r7, #4]
 8016c80:	885b      	ldrh	r3, [r3, #2]
 8016c82:	b29b      	uxth	r3, r3
 8016c84:	f7ff ff28 	bl	8016ad8 <LCD_DrawUniLine>
  if(PointCount != 3)
  {
    return;
  }

  while(--PointCount)
 8016c88:	887b      	ldrh	r3, [r7, #2]
 8016c8a:	3b01      	subs	r3, #1
 8016c8c:	807b      	strh	r3, [r7, #2]
 8016c8e:	887b      	ldrh	r3, [r7, #2]
 8016c90:	2b00      	cmp	r3, #0
 8016c92:	d1e6      	bne.n	8016c62 <LCD_Triangle+0x22>
    X = Points->X;
    Y = Points->Y;
    Points++;
    LCD_DrawUniLine(X, Y, Points->X, Points->Y);
  }
  LCD_DrawUniLine(First->X, First->Y, Points->X, Points->Y);
 8016c94:	68bb      	ldr	r3, [r7, #8]
 8016c96:	881b      	ldrh	r3, [r3, #0]
 8016c98:	b298      	uxth	r0, r3
 8016c9a:	68bb      	ldr	r3, [r7, #8]
 8016c9c:	885b      	ldrh	r3, [r3, #2]
 8016c9e:	b299      	uxth	r1, r3
 8016ca0:	687b      	ldr	r3, [r7, #4]
 8016ca2:	881b      	ldrh	r3, [r3, #0]
 8016ca4:	b29a      	uxth	r2, r3
 8016ca6:	687b      	ldr	r3, [r7, #4]
 8016ca8:	885b      	ldrh	r3, [r3, #2]
 8016caa:	b29b      	uxth	r3, r3
 8016cac:	f7ff ff14 	bl	8016ad8 <LCD_DrawUniLine>
}
 8016cb0:	3710      	adds	r7, #16
 8016cb2:	46bd      	mov	sp, r7
 8016cb4:	bd80      	pop	{r7, pc}
 8016cb6:	bf00      	nop

08016cb8 <LCD_FillTriangle>:
  * @param  x1..3: x position of triangle point 1..3.
  * @param  y1..3: y position of triangle point 1..3.
  * @retval None
  */
void LCD_FillTriangle(uint16_t x1, uint16_t x2, uint16_t x3, uint16_t y1, uint16_t y2, uint16_t y3)
{ 
 8016cb8:	b580      	push	{r7, lr}
 8016cba:	b08a      	sub	sp, #40	; 0x28
 8016cbc:	af00      	add	r7, sp, #0
 8016cbe:	80f8      	strh	r0, [r7, #6]
 8016cc0:	80b9      	strh	r1, [r7, #4]
 8016cc2:	807a      	strh	r2, [r7, #2]
 8016cc4:	803b      	strh	r3, [r7, #0]
  
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 8016cc6:	2300      	movs	r3, #0
 8016cc8:	823b      	strh	r3, [r7, #16]
 8016cca:	2300      	movs	r3, #0
 8016ccc:	81fb      	strh	r3, [r7, #14]
 8016cce:	2300      	movs	r3, #0
 8016cd0:	84fb      	strh	r3, [r7, #38]	; 0x26
 8016cd2:	2300      	movs	r3, #0
 8016cd4:	84bb      	strh	r3, [r7, #36]	; 0x24
 8016cd6:	2300      	movs	r3, #0
 8016cd8:	847b      	strh	r3, [r7, #34]	; 0x22
 8016cda:	2300      	movs	r3, #0
 8016cdc:	843b      	strh	r3, [r7, #32]
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0, 
 8016cde:	2300      	movs	r3, #0
 8016ce0:	83fb      	strh	r3, [r7, #30]
 8016ce2:	2300      	movs	r3, #0
 8016ce4:	83bb      	strh	r3, [r7, #28]
 8016ce6:	2300      	movs	r3, #0
 8016ce8:	837b      	strh	r3, [r7, #26]
 8016cea:	2300      	movs	r3, #0
 8016cec:	833b      	strh	r3, [r7, #24]
 8016cee:	2300      	movs	r3, #0
 8016cf0:	82fb      	strh	r3, [r7, #22]
 8016cf2:	2300      	movs	r3, #0
 8016cf4:	82bb      	strh	r3, [r7, #20]
  curpixel = 0;
 8016cf6:	2300      	movs	r3, #0
 8016cf8:	827b      	strh	r3, [r7, #18]
  
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 8016cfa:	88ba      	ldrh	r2, [r7, #4]
 8016cfc:	88fb      	ldrh	r3, [r7, #6]
 8016cfe:	1ad3      	subs	r3, r2, r3
 8016d00:	2b00      	cmp	r3, #0
 8016d02:	bfb8      	it	lt
 8016d04:	425b      	neglt	r3, r3
 8016d06:	823b      	strh	r3, [r7, #16]
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 8016d08:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8016d0a:	883b      	ldrh	r3, [r7, #0]
 8016d0c:	1ad3      	subs	r3, r2, r3
 8016d0e:	2b00      	cmp	r3, #0
 8016d10:	bfb8      	it	lt
 8016d12:	425b      	neglt	r3, r3
 8016d14:	81fb      	strh	r3, [r7, #14]
  x = x1;                       /* Start x off at the first pixel */
 8016d16:	88fb      	ldrh	r3, [r7, #6]
 8016d18:	84fb      	strh	r3, [r7, #38]	; 0x26
  y = y1;                       /* Start y off at the first pixel */
 8016d1a:	883b      	ldrh	r3, [r7, #0]
 8016d1c:	84bb      	strh	r3, [r7, #36]	; 0x24
  
  if (x2 >= x1)                 /* The x-values are increasing */
 8016d1e:	88ba      	ldrh	r2, [r7, #4]
 8016d20:	88fb      	ldrh	r3, [r7, #6]
 8016d22:	429a      	cmp	r2, r3
 8016d24:	d304      	bcc.n	8016d30 <LCD_FillTriangle+0x78>
  {
    xinc1 = 1;
 8016d26:	2301      	movs	r3, #1
 8016d28:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = 1;
 8016d2a:	2301      	movs	r3, #1
 8016d2c:	843b      	strh	r3, [r7, #32]
 8016d2e:	e005      	b.n	8016d3c <LCD_FillTriangle+0x84>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 8016d30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016d34:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = -1;
 8016d36:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016d3a:	843b      	strh	r3, [r7, #32]
  }
  
  if (y2 >= y1)                 /* The y-values are increasing */
 8016d3c:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8016d3e:	883b      	ldrh	r3, [r7, #0]
 8016d40:	429a      	cmp	r2, r3
 8016d42:	d304      	bcc.n	8016d4e <LCD_FillTriangle+0x96>
  {
    yinc1 = 1;
 8016d44:	2301      	movs	r3, #1
 8016d46:	83fb      	strh	r3, [r7, #30]
    yinc2 = 1;
 8016d48:	2301      	movs	r3, #1
 8016d4a:	83bb      	strh	r3, [r7, #28]
 8016d4c:	e005      	b.n	8016d5a <LCD_FillTriangle+0xa2>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 8016d4e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016d52:	83fb      	strh	r3, [r7, #30]
    yinc2 = -1;
 8016d54:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016d58:	83bb      	strh	r3, [r7, #28]
  }
  
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 8016d5a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8016d5e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8016d62:	429a      	cmp	r2, r3
 8016d64:	db10      	blt.n	8016d88 <LCD_FillTriangle+0xd0>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 8016d66:	2300      	movs	r3, #0
 8016d68:	847b      	strh	r3, [r7, #34]	; 0x22
    yinc2 = 0;                  /* Don't change the y for every iteration */
 8016d6a:	2300      	movs	r3, #0
 8016d6c:	83bb      	strh	r3, [r7, #28]
    den = deltax;
 8016d6e:	8a3b      	ldrh	r3, [r7, #16]
 8016d70:	837b      	strh	r3, [r7, #26]
    num = deltax / 2;
 8016d72:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8016d76:	0fda      	lsrs	r2, r3, #31
 8016d78:	4413      	add	r3, r2
 8016d7a:	105b      	asrs	r3, r3, #1
 8016d7c:	833b      	strh	r3, [r7, #24]
    numadd = deltay;
 8016d7e:	89fb      	ldrh	r3, [r7, #14]
 8016d80:	82fb      	strh	r3, [r7, #22]
    numpixels = deltax;         /* There are more x-values than y-values */
 8016d82:	8a3b      	ldrh	r3, [r7, #16]
 8016d84:	82bb      	strh	r3, [r7, #20]
 8016d86:	e00f      	b.n	8016da8 <LCD_FillTriangle+0xf0>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 8016d88:	2300      	movs	r3, #0
 8016d8a:	843b      	strh	r3, [r7, #32]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 8016d8c:	2300      	movs	r3, #0
 8016d8e:	83fb      	strh	r3, [r7, #30]
    den = deltay;
 8016d90:	89fb      	ldrh	r3, [r7, #14]
 8016d92:	837b      	strh	r3, [r7, #26]
    num = deltay / 2;
 8016d94:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8016d98:	0fda      	lsrs	r2, r3, #31
 8016d9a:	4413      	add	r3, r2
 8016d9c:	105b      	asrs	r3, r3, #1
 8016d9e:	833b      	strh	r3, [r7, #24]
    numadd = deltax;
 8016da0:	8a3b      	ldrh	r3, [r7, #16]
 8016da2:	82fb      	strh	r3, [r7, #22]
    numpixels = deltay;         /* There are more y-values than x-values */
 8016da4:	89fb      	ldrh	r3, [r7, #14]
 8016da6:	82bb      	strh	r3, [r7, #20]
  }
  
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8016da8:	2300      	movs	r3, #0
 8016daa:	827b      	strh	r3, [r7, #18]
 8016dac:	e02c      	b.n	8016e08 <LCD_FillTriangle+0x150>
  {
    LCD_DrawUniLine(x, y, x3, y3);
 8016dae:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8016db0:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8016db2:	887a      	ldrh	r2, [r7, #2]
 8016db4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016db6:	f7ff fe8f 	bl	8016ad8 <LCD_DrawUniLine>
    
    num += numadd;              /* Increase the numerator by the top of the fraction */
 8016dba:	8b3a      	ldrh	r2, [r7, #24]
 8016dbc:	8afb      	ldrh	r3, [r7, #22]
 8016dbe:	4413      	add	r3, r2
 8016dc0:	b29b      	uxth	r3, r3
 8016dc2:	833b      	strh	r3, [r7, #24]
    if (num >= den)             /* Check if numerator >= denominator */
 8016dc4:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8016dc8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8016dcc:	429a      	cmp	r2, r3
 8016dce:	db0e      	blt.n	8016dee <LCD_FillTriangle+0x136>
    {
      num -= den;               /* Calculate the new numerator value */
 8016dd0:	8b3a      	ldrh	r2, [r7, #24]
 8016dd2:	8b7b      	ldrh	r3, [r7, #26]
 8016dd4:	1ad3      	subs	r3, r2, r3
 8016dd6:	b29b      	uxth	r3, r3
 8016dd8:	833b      	strh	r3, [r7, #24]
      x += xinc1;               /* Change the x as appropriate */
 8016dda:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8016ddc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016dde:	4413      	add	r3, r2
 8016de0:	b29b      	uxth	r3, r3
 8016de2:	84fb      	strh	r3, [r7, #38]	; 0x26
      y += yinc1;               /* Change the y as appropriate */
 8016de4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8016de6:	8bfb      	ldrh	r3, [r7, #30]
 8016de8:	4413      	add	r3, r2
 8016dea:	b29b      	uxth	r3, r3
 8016dec:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    x += xinc2;                 /* Change the x as appropriate */
 8016dee:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8016df0:	8c3b      	ldrh	r3, [r7, #32]
 8016df2:	4413      	add	r3, r2
 8016df4:	b29b      	uxth	r3, r3
 8016df6:	84fb      	strh	r3, [r7, #38]	; 0x26
    y += yinc2;                 /* Change the y as appropriate */
 8016df8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8016dfa:	8bbb      	ldrh	r3, [r7, #28]
 8016dfc:	4413      	add	r3, r2
 8016dfe:	b29b      	uxth	r3, r3
 8016e00:	84bb      	strh	r3, [r7, #36]	; 0x24
    num = deltay / 2;
    numadd = deltax;
    numpixels = deltay;         /* There are more y-values than x-values */
  }
  
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8016e02:	8a7b      	ldrh	r3, [r7, #18]
 8016e04:	3301      	adds	r3, #1
 8016e06:	827b      	strh	r3, [r7, #18]
 8016e08:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8016e0c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8016e10:	429a      	cmp	r2, r3
 8016e12:	ddcc      	ble.n	8016dae <LCD_FillTriangle+0xf6>
    x += xinc2;                 /* Change the x as appropriate */
    y += yinc2;                 /* Change the y as appropriate */
  }  
  
  
}
 8016e14:	3728      	adds	r7, #40	; 0x28
 8016e16:	46bd      	mov	sp, r7
 8016e18:	bd80      	pop	{r7, pc}
 8016e1a:	bf00      	nop

08016e1c <LCD_PolyLine>:
  * @param  Points: pointer to the points array.
  * @param  PointCount: Number of points.
  * @retval None
  */
void LCD_PolyLine(pPoint Points, uint16_t PointCount)
{
 8016e1c:	b580      	push	{r7, lr}
 8016e1e:	b084      	sub	sp, #16
 8016e20:	af00      	add	r7, sp, #0
 8016e22:	6078      	str	r0, [r7, #4]
 8016e24:	460b      	mov	r3, r1
 8016e26:	807b      	strh	r3, [r7, #2]
  int16_t X = 0, Y = 0;
 8016e28:	2300      	movs	r3, #0
 8016e2a:	81fb      	strh	r3, [r7, #14]
 8016e2c:	2300      	movs	r3, #0
 8016e2e:	81bb      	strh	r3, [r7, #12]

  if(PointCount < 2)
 8016e30:	887b      	ldrh	r3, [r7, #2]
 8016e32:	2b01      	cmp	r3, #1
 8016e34:	d800      	bhi.n	8016e38 <LCD_PolyLine+0x1c>
  {
    return;
 8016e36:	e019      	b.n	8016e6c <LCD_PolyLine+0x50>
  }

  while(--PointCount)
 8016e38:	e012      	b.n	8016e60 <LCD_PolyLine+0x44>
  {
    X = Points->X;
 8016e3a:	687b      	ldr	r3, [r7, #4]
 8016e3c:	881b      	ldrh	r3, [r3, #0]
 8016e3e:	81fb      	strh	r3, [r7, #14]
    Y = Points->Y;
 8016e40:	687b      	ldr	r3, [r7, #4]
 8016e42:	885b      	ldrh	r3, [r3, #2]
 8016e44:	81bb      	strh	r3, [r7, #12]
    Points++;
 8016e46:	687b      	ldr	r3, [r7, #4]
 8016e48:	3304      	adds	r3, #4
 8016e4a:	607b      	str	r3, [r7, #4]
    LCD_DrawUniLine(X, Y, Points->X, Points->Y);
 8016e4c:	89f8      	ldrh	r0, [r7, #14]
 8016e4e:	89b9      	ldrh	r1, [r7, #12]
 8016e50:	687b      	ldr	r3, [r7, #4]
 8016e52:	881b      	ldrh	r3, [r3, #0]
 8016e54:	b29a      	uxth	r2, r3
 8016e56:	687b      	ldr	r3, [r7, #4]
 8016e58:	885b      	ldrh	r3, [r3, #2]
 8016e5a:	b29b      	uxth	r3, r3
 8016e5c:	f7ff fe3c 	bl	8016ad8 <LCD_DrawUniLine>
  if(PointCount < 2)
  {
    return;
  }

  while(--PointCount)
 8016e60:	887b      	ldrh	r3, [r7, #2]
 8016e62:	3b01      	subs	r3, #1
 8016e64:	807b      	strh	r3, [r7, #2]
 8016e66:	887b      	ldrh	r3, [r7, #2]
 8016e68:	2b00      	cmp	r3, #0
 8016e6a:	d1e6      	bne.n	8016e3a <LCD_PolyLine+0x1e>
    X = Points->X;
    Y = Points->Y;
    Points++;
    LCD_DrawUniLine(X, Y, Points->X, Points->Y);
  }
}
 8016e6c:	3710      	adds	r7, #16
 8016e6e:	46bd      	mov	sp, r7
 8016e70:	bd80      	pop	{r7, pc}
 8016e72:	bf00      	nop

08016e74 <LCD_PolyLineRelativeClosed>:
  * @param  Closed: specifies if the draw is closed or not.
  *           1: closed, 0 : not closed.
  * @retval None
  */
static void LCD_PolyLineRelativeClosed(pPoint Points, uint16_t PointCount, uint16_t Closed)
{
 8016e74:	b590      	push	{r4, r7, lr}
 8016e76:	b085      	sub	sp, #20
 8016e78:	af00      	add	r7, sp, #0
 8016e7a:	6078      	str	r0, [r7, #4]
 8016e7c:	4613      	mov	r3, r2
 8016e7e:	460a      	mov	r2, r1
 8016e80:	807a      	strh	r2, [r7, #2]
 8016e82:	803b      	strh	r3, [r7, #0]
  int16_t X = 0, Y = 0;
 8016e84:	2300      	movs	r3, #0
 8016e86:	81fb      	strh	r3, [r7, #14]
 8016e88:	2300      	movs	r3, #0
 8016e8a:	81bb      	strh	r3, [r7, #12]
  pPoint First = Points;
 8016e8c:	687b      	ldr	r3, [r7, #4]
 8016e8e:	60bb      	str	r3, [r7, #8]

  if(PointCount < 2)
 8016e90:	887b      	ldrh	r3, [r7, #2]
 8016e92:	2b01      	cmp	r3, #1
 8016e94:	d800      	bhi.n	8016e98 <LCD_PolyLineRelativeClosed+0x24>
  {
    return;
 8016e96:	e03a      	b.n	8016f0e <LCD_PolyLineRelativeClosed+0x9a>
  }  
  X = Points->X;
 8016e98:	687b      	ldr	r3, [r7, #4]
 8016e9a:	881b      	ldrh	r3, [r3, #0]
 8016e9c:	81fb      	strh	r3, [r7, #14]
  Y = Points->Y;
 8016e9e:	687b      	ldr	r3, [r7, #4]
 8016ea0:	885b      	ldrh	r3, [r3, #2]
 8016ea2:	81bb      	strh	r3, [r7, #12]
  while(--PointCount)
 8016ea4:	e020      	b.n	8016ee8 <LCD_PolyLineRelativeClosed+0x74>
  {
    Points++;
 8016ea6:	687b      	ldr	r3, [r7, #4]
 8016ea8:	3304      	adds	r3, #4
 8016eaa:	607b      	str	r3, [r7, #4]
    LCD_DrawUniLine(X, Y, X + Points->X, Y + Points->Y);
 8016eac:	89f8      	ldrh	r0, [r7, #14]
 8016eae:	89b9      	ldrh	r1, [r7, #12]
 8016eb0:	687b      	ldr	r3, [r7, #4]
 8016eb2:	881b      	ldrh	r3, [r3, #0]
 8016eb4:	b29a      	uxth	r2, r3
 8016eb6:	89fb      	ldrh	r3, [r7, #14]
 8016eb8:	4413      	add	r3, r2
 8016eba:	b29a      	uxth	r2, r3
 8016ebc:	687b      	ldr	r3, [r7, #4]
 8016ebe:	885b      	ldrh	r3, [r3, #2]
 8016ec0:	b29c      	uxth	r4, r3
 8016ec2:	89bb      	ldrh	r3, [r7, #12]
 8016ec4:	4423      	add	r3, r4
 8016ec6:	b29b      	uxth	r3, r3
 8016ec8:	f7ff fe06 	bl	8016ad8 <LCD_DrawUniLine>
    X = X + Points->X;
 8016ecc:	687b      	ldr	r3, [r7, #4]
 8016ece:	881b      	ldrh	r3, [r3, #0]
 8016ed0:	b29a      	uxth	r2, r3
 8016ed2:	89fb      	ldrh	r3, [r7, #14]
 8016ed4:	4413      	add	r3, r2
 8016ed6:	b29b      	uxth	r3, r3
 8016ed8:	81fb      	strh	r3, [r7, #14]
    Y = Y + Points->Y;
 8016eda:	687b      	ldr	r3, [r7, #4]
 8016edc:	885b      	ldrh	r3, [r3, #2]
 8016ede:	b29a      	uxth	r2, r3
 8016ee0:	89bb      	ldrh	r3, [r7, #12]
 8016ee2:	4413      	add	r3, r2
 8016ee4:	b29b      	uxth	r3, r3
 8016ee6:	81bb      	strh	r3, [r7, #12]
  {
    return;
  }  
  X = Points->X;
  Y = Points->Y;
  while(--PointCount)
 8016ee8:	887b      	ldrh	r3, [r7, #2]
 8016eea:	3b01      	subs	r3, #1
 8016eec:	807b      	strh	r3, [r7, #2]
 8016eee:	887b      	ldrh	r3, [r7, #2]
 8016ef0:	2b00      	cmp	r3, #0
 8016ef2:	d1d8      	bne.n	8016ea6 <LCD_PolyLineRelativeClosed+0x32>
    Points++;
    LCD_DrawUniLine(X, Y, X + Points->X, Y + Points->Y);
    X = X + Points->X;
    Y = Y + Points->Y;
  }
  if(Closed)
 8016ef4:	883b      	ldrh	r3, [r7, #0]
 8016ef6:	2b00      	cmp	r3, #0
 8016ef8:	d009      	beq.n	8016f0e <LCD_PolyLineRelativeClosed+0x9a>
  {
    LCD_DrawUniLine(First->X, First->Y, X, Y);
 8016efa:	68bb      	ldr	r3, [r7, #8]
 8016efc:	881b      	ldrh	r3, [r3, #0]
 8016efe:	b298      	uxth	r0, r3
 8016f00:	68bb      	ldr	r3, [r7, #8]
 8016f02:	885b      	ldrh	r3, [r3, #2]
 8016f04:	b299      	uxth	r1, r3
 8016f06:	89fa      	ldrh	r2, [r7, #14]
 8016f08:	89bb      	ldrh	r3, [r7, #12]
 8016f0a:	f7ff fde5 	bl	8016ad8 <LCD_DrawUniLine>
  }  
}
 8016f0e:	3714      	adds	r7, #20
 8016f10:	46bd      	mov	sp, r7
 8016f12:	bd90      	pop	{r4, r7, pc}

08016f14 <LCD_ClosedPolyLine>:
  * @param  Points: pointer to the points array.
  * @param  PointCount: Number of points.
  * @retval None
  */
void LCD_ClosedPolyLine(pPoint Points, uint16_t PointCount)
{
 8016f14:	b590      	push	{r4, r7, lr}
 8016f16:	b083      	sub	sp, #12
 8016f18:	af00      	add	r7, sp, #0
 8016f1a:	6078      	str	r0, [r7, #4]
 8016f1c:	460b      	mov	r3, r1
 8016f1e:	807b      	strh	r3, [r7, #2]
  LCD_PolyLine(Points, PointCount);
 8016f20:	887b      	ldrh	r3, [r7, #2]
 8016f22:	6878      	ldr	r0, [r7, #4]
 8016f24:	4619      	mov	r1, r3
 8016f26:	f7ff ff79 	bl	8016e1c <LCD_PolyLine>
  LCD_DrawUniLine(Points->X, Points->Y, (Points+PointCount-1)->X, (Points+PointCount-1)->Y);
 8016f2a:	687b      	ldr	r3, [r7, #4]
 8016f2c:	881b      	ldrh	r3, [r3, #0]
 8016f2e:	b298      	uxth	r0, r3
 8016f30:	687b      	ldr	r3, [r7, #4]
 8016f32:	885b      	ldrh	r3, [r3, #2]
 8016f34:	b299      	uxth	r1, r3
 8016f36:	887b      	ldrh	r3, [r7, #2]
 8016f38:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8016f3c:	3b01      	subs	r3, #1
 8016f3e:	009b      	lsls	r3, r3, #2
 8016f40:	687a      	ldr	r2, [r7, #4]
 8016f42:	4413      	add	r3, r2
 8016f44:	881b      	ldrh	r3, [r3, #0]
 8016f46:	b29a      	uxth	r2, r3
 8016f48:	887b      	ldrh	r3, [r7, #2]
 8016f4a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8016f4e:	3b01      	subs	r3, #1
 8016f50:	009b      	lsls	r3, r3, #2
 8016f52:	687c      	ldr	r4, [r7, #4]
 8016f54:	4423      	add	r3, r4
 8016f56:	885b      	ldrh	r3, [r3, #2]
 8016f58:	b29b      	uxth	r3, r3
 8016f5a:	f7ff fdbd 	bl	8016ad8 <LCD_DrawUniLine>
}
 8016f5e:	370c      	adds	r7, #12
 8016f60:	46bd      	mov	sp, r7
 8016f62:	bd90      	pop	{r4, r7, pc}

08016f64 <LCD_PolyLineRelative>:
  * @param  Points: pointer to the points array.
  * @param  PointCount: Number of points.
  * @retval None
  */
void LCD_PolyLineRelative(pPoint Points, uint16_t PointCount)
{
 8016f64:	b580      	push	{r7, lr}
 8016f66:	b082      	sub	sp, #8
 8016f68:	af00      	add	r7, sp, #0
 8016f6a:	6078      	str	r0, [r7, #4]
 8016f6c:	460b      	mov	r3, r1
 8016f6e:	807b      	strh	r3, [r7, #2]
  LCD_PolyLineRelativeClosed(Points, PointCount, 0);
 8016f70:	887b      	ldrh	r3, [r7, #2]
 8016f72:	6878      	ldr	r0, [r7, #4]
 8016f74:	4619      	mov	r1, r3
 8016f76:	2200      	movs	r2, #0
 8016f78:	f7ff ff7c 	bl	8016e74 <LCD_PolyLineRelativeClosed>
}
 8016f7c:	3708      	adds	r7, #8
 8016f7e:	46bd      	mov	sp, r7
 8016f80:	bd80      	pop	{r7, pc}
 8016f82:	bf00      	nop

08016f84 <LCD_ClosedPolyLineRelative>:
  * @param  Points: pointer to the points array.
  * @param  PointCount: Number of points.
  * @retval None
  */
void LCD_ClosedPolyLineRelative(pPoint Points, uint16_t PointCount)
{
 8016f84:	b580      	push	{r7, lr}
 8016f86:	b082      	sub	sp, #8
 8016f88:	af00      	add	r7, sp, #0
 8016f8a:	6078      	str	r0, [r7, #4]
 8016f8c:	460b      	mov	r3, r1
 8016f8e:	807b      	strh	r3, [r7, #2]
  LCD_PolyLineRelativeClosed(Points, PointCount, 1);
 8016f90:	887b      	ldrh	r3, [r7, #2]
 8016f92:	6878      	ldr	r0, [r7, #4]
 8016f94:	4619      	mov	r1, r3
 8016f96:	2201      	movs	r2, #1
 8016f98:	f7ff ff6c 	bl	8016e74 <LCD_PolyLineRelativeClosed>
}
 8016f9c:	3708      	adds	r7, #8
 8016f9e:	46bd      	mov	sp, r7
 8016fa0:	bd80      	pop	{r7, pc}
 8016fa2:	bf00      	nop

08016fa4 <LCD_FillPolyLine>:
  * @param  Points: pointer to the points array.
  * @param  PointCount: Number of points.
  * @retval None
  */
void LCD_FillPolyLine(pPoint Points, uint16_t PointCount)
{
 8016fa4:	b5b0      	push	{r4, r5, r7, lr}
 8016fa6:	b08c      	sub	sp, #48	; 0x30
 8016fa8:	af02      	add	r7, sp, #8
 8016faa:	6078      	str	r0, [r7, #4]
 8016fac:	460b      	mov	r3, r1
 8016fae:	807b      	strh	r3, [r7, #2]
 
  int16_t X = 0, Y = 0, X2 = 0, Y2 = 0, X_center = 0, Y_center = 0, X_first = 0, Y_first = 0, pixelX = 0, pixelY = 0, counter = 0;
 8016fb0:	2300      	movs	r3, #0
 8016fb2:	833b      	strh	r3, [r7, #24]
 8016fb4:	2300      	movs	r3, #0
 8016fb6:	82fb      	strh	r3, [r7, #22]
 8016fb8:	2300      	movs	r3, #0
 8016fba:	84fb      	strh	r3, [r7, #38]	; 0x26
 8016fbc:	2300      	movs	r3, #0
 8016fbe:	84bb      	strh	r3, [r7, #36]	; 0x24
 8016fc0:	2300      	movs	r3, #0
 8016fc2:	82bb      	strh	r3, [r7, #20]
 8016fc4:	2300      	movs	r3, #0
 8016fc6:	827b      	strh	r3, [r7, #18]
 8016fc8:	2300      	movs	r3, #0
 8016fca:	823b      	strh	r3, [r7, #16]
 8016fcc:	2300      	movs	r3, #0
 8016fce:	81fb      	strh	r3, [r7, #14]
 8016fd0:	2300      	movs	r3, #0
 8016fd2:	81bb      	strh	r3, [r7, #12]
 8016fd4:	2300      	movs	r3, #0
 8016fd6:	817b      	strh	r3, [r7, #10]
 8016fd8:	2300      	movs	r3, #0
 8016fda:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t  IMAGE_LEFT = 0, IMAGE_RIGHT = 0, IMAGE_TOP = 0, IMAGE_BOTTOM = 0;  
 8016fdc:	2300      	movs	r3, #0
 8016fde:	843b      	strh	r3, [r7, #32]
 8016fe0:	2300      	movs	r3, #0
 8016fe2:	83fb      	strh	r3, [r7, #30]
 8016fe4:	2300      	movs	r3, #0
 8016fe6:	83bb      	strh	r3, [r7, #28]
 8016fe8:	2300      	movs	r3, #0
 8016fea:	837b      	strh	r3, [r7, #26]

  IMAGE_LEFT = IMAGE_RIGHT = Points->X;
 8016fec:	687b      	ldr	r3, [r7, #4]
 8016fee:	881b      	ldrh	r3, [r3, #0]
 8016ff0:	83fb      	strh	r3, [r7, #30]
 8016ff2:	8bfb      	ldrh	r3, [r7, #30]
 8016ff4:	843b      	strh	r3, [r7, #32]
  IMAGE_TOP= IMAGE_BOTTOM = Points->Y;
 8016ff6:	687b      	ldr	r3, [r7, #4]
 8016ff8:	885b      	ldrh	r3, [r3, #2]
 8016ffa:	837b      	strh	r3, [r7, #26]
 8016ffc:	8b7b      	ldrh	r3, [r7, #26]
 8016ffe:	83bb      	strh	r3, [r7, #28]

  for(counter = 1; counter < PointCount; counter++)
 8017000:	2301      	movs	r3, #1
 8017002:	847b      	strh	r3, [r7, #34]	; 0x22
 8017004:	e02c      	b.n	8017060 <LCD_FillPolyLine+0xbc>
  {
    pixelX = POLY_X(counter);
 8017006:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801700a:	009b      	lsls	r3, r3, #2
 801700c:	687a      	ldr	r2, [r7, #4]
 801700e:	4413      	add	r3, r2
 8017010:	885b      	ldrh	r3, [r3, #2]
 8017012:	81bb      	strh	r3, [r7, #12]
    if(pixelX < IMAGE_LEFT)
 8017014:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8017018:	8c3b      	ldrh	r3, [r7, #32]
 801701a:	429a      	cmp	r2, r3
 801701c:	da01      	bge.n	8017022 <LCD_FillPolyLine+0x7e>
    {
      IMAGE_LEFT = pixelX;
 801701e:	89bb      	ldrh	r3, [r7, #12]
 8017020:	843b      	strh	r3, [r7, #32]
    }
    if(pixelX > IMAGE_RIGHT)
 8017022:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8017026:	8bfb      	ldrh	r3, [r7, #30]
 8017028:	429a      	cmp	r2, r3
 801702a:	dd01      	ble.n	8017030 <LCD_FillPolyLine+0x8c>
    {
      IMAGE_RIGHT = pixelX;
 801702c:	89bb      	ldrh	r3, [r7, #12]
 801702e:	83fb      	strh	r3, [r7, #30]
    }
    
    pixelY = POLY_Y(counter);
 8017030:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8017034:	009b      	lsls	r3, r3, #2
 8017036:	687a      	ldr	r2, [r7, #4]
 8017038:	4413      	add	r3, r2
 801703a:	881b      	ldrh	r3, [r3, #0]
 801703c:	817b      	strh	r3, [r7, #10]
    if(pixelY < IMAGE_TOP)
 801703e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8017042:	8bbb      	ldrh	r3, [r7, #28]
 8017044:	429a      	cmp	r2, r3
 8017046:	da01      	bge.n	801704c <LCD_FillPolyLine+0xa8>
    { 
      IMAGE_TOP = pixelY;
 8017048:	897b      	ldrh	r3, [r7, #10]
 801704a:	83bb      	strh	r3, [r7, #28]
    }
    if(pixelY > IMAGE_BOTTOM)
 801704c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8017050:	8b7b      	ldrh	r3, [r7, #26]
 8017052:	429a      	cmp	r2, r3
 8017054:	dd01      	ble.n	801705a <LCD_FillPolyLine+0xb6>
    {
      IMAGE_BOTTOM = pixelY;
 8017056:	897b      	ldrh	r3, [r7, #10]
 8017058:	837b      	strh	r3, [r7, #26]
  uint16_t  IMAGE_LEFT = 0, IMAGE_RIGHT = 0, IMAGE_TOP = 0, IMAGE_BOTTOM = 0;  

  IMAGE_LEFT = IMAGE_RIGHT = Points->X;
  IMAGE_TOP= IMAGE_BOTTOM = Points->Y;

  for(counter = 1; counter < PointCount; counter++)
 801705a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801705c:	3301      	adds	r3, #1
 801705e:	847b      	strh	r3, [r7, #34]	; 0x22
 8017060:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8017064:	887b      	ldrh	r3, [r7, #2]
 8017066:	429a      	cmp	r2, r3
 8017068:	dbcd      	blt.n	8017006 <LCD_FillPolyLine+0x62>
    {
      IMAGE_BOTTOM = pixelY;
    }
  }  
  
  if(PointCount < 2)
 801706a:	887b      	ldrh	r3, [r7, #2]
 801706c:	2b01      	cmp	r3, #1
 801706e:	d800      	bhi.n	8017072 <LCD_FillPolyLine+0xce>
  {
    return;
 8017070:	e065      	b.n	801713e <LCD_FillPolyLine+0x19a>
  }
  
  X_center = (IMAGE_LEFT + IMAGE_RIGHT)/2;
 8017072:	8c3a      	ldrh	r2, [r7, #32]
 8017074:	8bfb      	ldrh	r3, [r7, #30]
 8017076:	4413      	add	r3, r2
 8017078:	0fda      	lsrs	r2, r3, #31
 801707a:	4413      	add	r3, r2
 801707c:	105b      	asrs	r3, r3, #1
 801707e:	82bb      	strh	r3, [r7, #20]
  Y_center = (IMAGE_BOTTOM + IMAGE_TOP)/2;
 8017080:	8b7a      	ldrh	r2, [r7, #26]
 8017082:	8bbb      	ldrh	r3, [r7, #28]
 8017084:	4413      	add	r3, r2
 8017086:	0fda      	lsrs	r2, r3, #31
 8017088:	4413      	add	r3, r2
 801708a:	105b      	asrs	r3, r3, #1
 801708c:	827b      	strh	r3, [r7, #18]
 
  X_first = Points->X;
 801708e:	687b      	ldr	r3, [r7, #4]
 8017090:	881b      	ldrh	r3, [r3, #0]
 8017092:	823b      	strh	r3, [r7, #16]
  Y_first = Points->Y;
 8017094:	687b      	ldr	r3, [r7, #4]
 8017096:	885b      	ldrh	r3, [r3, #2]
 8017098:	81fb      	strh	r3, [r7, #14]
  
  while(--PointCount)
 801709a:	e02c      	b.n	80170f6 <LCD_FillPolyLine+0x152>
  {
    X = Points->X;
 801709c:	687b      	ldr	r3, [r7, #4]
 801709e:	881b      	ldrh	r3, [r3, #0]
 80170a0:	833b      	strh	r3, [r7, #24]
    Y = Points->Y;
 80170a2:	687b      	ldr	r3, [r7, #4]
 80170a4:	885b      	ldrh	r3, [r3, #2]
 80170a6:	82fb      	strh	r3, [r7, #22]
    Points++;
 80170a8:	687b      	ldr	r3, [r7, #4]
 80170aa:	3304      	adds	r3, #4
 80170ac:	607b      	str	r3, [r7, #4]
    X2 = Points->X;
 80170ae:	687b      	ldr	r3, [r7, #4]
 80170b0:	881b      	ldrh	r3, [r3, #0]
 80170b2:	84fb      	strh	r3, [r7, #38]	; 0x26
    Y2 = Points->Y;    
 80170b4:	687b      	ldr	r3, [r7, #4]
 80170b6:	885b      	ldrh	r3, [r3, #2]
 80170b8:	84bb      	strh	r3, [r7, #36]	; 0x24
  
    LCD_FillTriangle(X, X2, X_center, Y, Y2, Y_center);
 80170ba:	8b38      	ldrh	r0, [r7, #24]
 80170bc:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 80170be:	8aba      	ldrh	r2, [r7, #20]
 80170c0:	8afb      	ldrh	r3, [r7, #22]
 80170c2:	8cbd      	ldrh	r5, [r7, #36]	; 0x24
 80170c4:	8a7c      	ldrh	r4, [r7, #18]
 80170c6:	9500      	str	r5, [sp, #0]
 80170c8:	9401      	str	r4, [sp, #4]
 80170ca:	f7ff fdf5 	bl	8016cb8 <LCD_FillTriangle>
    LCD_FillTriangle(X, X_center, X2, Y, Y_center, Y2);
 80170ce:	8b38      	ldrh	r0, [r7, #24]
 80170d0:	8ab9      	ldrh	r1, [r7, #20]
 80170d2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80170d4:	8afb      	ldrh	r3, [r7, #22]
 80170d6:	8a7d      	ldrh	r5, [r7, #18]
 80170d8:	8cbc      	ldrh	r4, [r7, #36]	; 0x24
 80170da:	9500      	str	r5, [sp, #0]
 80170dc:	9401      	str	r4, [sp, #4]
 80170de:	f7ff fdeb 	bl	8016cb8 <LCD_FillTriangle>
    LCD_FillTriangle(X_center, X2, X, Y_center, Y2, Y);   
 80170e2:	8ab8      	ldrh	r0, [r7, #20]
 80170e4:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 80170e6:	8b3a      	ldrh	r2, [r7, #24]
 80170e8:	8a7b      	ldrh	r3, [r7, #18]
 80170ea:	8cbd      	ldrh	r5, [r7, #36]	; 0x24
 80170ec:	8afc      	ldrh	r4, [r7, #22]
 80170ee:	9500      	str	r5, [sp, #0]
 80170f0:	9401      	str	r4, [sp, #4]
 80170f2:	f7ff fde1 	bl	8016cb8 <LCD_FillTriangle>
  Y_center = (IMAGE_BOTTOM + IMAGE_TOP)/2;
 
  X_first = Points->X;
  Y_first = Points->Y;
  
  while(--PointCount)
 80170f6:	887b      	ldrh	r3, [r7, #2]
 80170f8:	3b01      	subs	r3, #1
 80170fa:	807b      	strh	r3, [r7, #2]
 80170fc:	887b      	ldrh	r3, [r7, #2]
 80170fe:	2b00      	cmp	r3, #0
 8017100:	d1cc      	bne.n	801709c <LCD_FillPolyLine+0xf8>
    LCD_FillTriangle(X, X2, X_center, Y, Y2, Y_center);
    LCD_FillTriangle(X, X_center, X2, Y, Y_center, Y2);
    LCD_FillTriangle(X_center, X2, X, Y_center, Y2, Y);   
  }
  
  LCD_FillTriangle(X_first, X2, X_center, Y_first, Y2, Y_center);
 8017102:	8a38      	ldrh	r0, [r7, #16]
 8017104:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8017106:	8aba      	ldrh	r2, [r7, #20]
 8017108:	89fb      	ldrh	r3, [r7, #14]
 801710a:	8cbd      	ldrh	r5, [r7, #36]	; 0x24
 801710c:	8a7c      	ldrh	r4, [r7, #18]
 801710e:	9500      	str	r5, [sp, #0]
 8017110:	9401      	str	r4, [sp, #4]
 8017112:	f7ff fdd1 	bl	8016cb8 <LCD_FillTriangle>
  LCD_FillTriangle(X_first, X_center, X2, Y_first, Y_center, Y2);
 8017116:	8a38      	ldrh	r0, [r7, #16]
 8017118:	8ab9      	ldrh	r1, [r7, #20]
 801711a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801711c:	89fb      	ldrh	r3, [r7, #14]
 801711e:	8a7d      	ldrh	r5, [r7, #18]
 8017120:	8cbc      	ldrh	r4, [r7, #36]	; 0x24
 8017122:	9500      	str	r5, [sp, #0]
 8017124:	9401      	str	r4, [sp, #4]
 8017126:	f7ff fdc7 	bl	8016cb8 <LCD_FillTriangle>
  LCD_FillTriangle(X_center, X2, X_first, Y_center, Y2, Y_first); 
 801712a:	8ab8      	ldrh	r0, [r7, #20]
 801712c:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 801712e:	8a3a      	ldrh	r2, [r7, #16]
 8017130:	8a7b      	ldrh	r3, [r7, #18]
 8017132:	8cbd      	ldrh	r5, [r7, #36]	; 0x24
 8017134:	89fc      	ldrh	r4, [r7, #14]
 8017136:	9500      	str	r5, [sp, #0]
 8017138:	9401      	str	r4, [sp, #4]
 801713a:	f7ff fdbd 	bl	8016cb8 <LCD_FillTriangle>
}
 801713e:	3728      	adds	r7, #40	; 0x28
 8017140:	46bd      	mov	sp, r7
 8017142:	bdb0      	pop	{r4, r5, r7, pc}

08017144 <LCD_WriteCommand>:
  * @brief  Writes command to select the LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void LCD_WriteCommand(uint8_t LCD_Reg)
{
 8017144:	b580      	push	{r7, lr}
 8017146:	b082      	sub	sp, #8
 8017148:	af00      	add	r7, sp, #0
 801714a:	4603      	mov	r3, r0
 801714c:	71fb      	strb	r3, [r7, #7]
    /* Reset WRX to send command */
  LCD_CtrlLinesWrite(LCD_WRX_GPIO_PORT, LCD_WRX_PIN, Bit_RESET);
 801714e:	4812      	ldr	r0, [pc, #72]	; (8017198 <LCD_WriteCommand+0x54>)
 8017150:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8017154:	2200      	movs	r2, #0
 8017156:	f000 f9cf 	bl	80174f8 <LCD_CtrlLinesWrite>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_ChipSelect(DISABLE);
 801715a:	2000      	movs	r0, #0
 801715c:	f7fe fbca 	bl	80158f4 <LCD_ChipSelect>
  SPI_I2S_SendData(LCD_SPI, LCD_Reg);
 8017160:	79fb      	ldrb	r3, [r7, #7]
 8017162:	b29b      	uxth	r3, r3
 8017164:	480d      	ldr	r0, [pc, #52]	; (801719c <LCD_WriteCommand+0x58>)
 8017166:	4619      	mov	r1, r3
 8017168:	f7fb fae6 	bl	8012738 <SPI_I2S_SendData>
  
  /* Wait until a data is sent(not busy), before config /CS HIGH */
  
  while(SPI_I2S_GetFlagStatus(LCD_SPI, SPI_I2S_FLAG_TXE) == RESET) ;
 801716c:	bf00      	nop
 801716e:	480b      	ldr	r0, [pc, #44]	; (801719c <LCD_WriteCommand+0x58>)
 8017170:	2102      	movs	r1, #2
 8017172:	f7fb fb9d 	bl	80128b0 <SPI_I2S_GetFlagStatus>
 8017176:	4603      	mov	r3, r0
 8017178:	2b00      	cmp	r3, #0
 801717a:	d0f8      	beq.n	801716e <LCD_WriteCommand+0x2a>
  
  while(SPI_I2S_GetFlagStatus(LCD_SPI, SPI_I2S_FLAG_BSY) != RESET);
 801717c:	bf00      	nop
 801717e:	4807      	ldr	r0, [pc, #28]	; (801719c <LCD_WriteCommand+0x58>)
 8017180:	2180      	movs	r1, #128	; 0x80
 8017182:	f7fb fb95 	bl	80128b0 <SPI_I2S_GetFlagStatus>
 8017186:	4603      	mov	r3, r0
 8017188:	2b00      	cmp	r3, #0
 801718a:	d1f8      	bne.n	801717e <LCD_WriteCommand+0x3a>
  
  LCD_ChipSelect(ENABLE);
 801718c:	2001      	movs	r0, #1
 801718e:	f7fe fbb1 	bl	80158f4 <LCD_ChipSelect>
}
 8017192:	3708      	adds	r7, #8
 8017194:	46bd      	mov	sp, r7
 8017196:	bd80      	pop	{r7, pc}
 8017198:	40020c00 	.word	0x40020c00
 801719c:	40015000 	.word	0x40015000

080171a0 <LCD_WriteData>:
  *         This function must be used after LCD_WriteCommand() function
  * @param  value: data to write to the selected register.
  * @retval None
  */
void LCD_WriteData(uint8_t value)
{
 80171a0:	b580      	push	{r7, lr}
 80171a2:	b082      	sub	sp, #8
 80171a4:	af00      	add	r7, sp, #0
 80171a6:	4603      	mov	r3, r0
 80171a8:	71fb      	strb	r3, [r7, #7]
    /* Set WRX to send data */
  LCD_CtrlLinesWrite(LCD_WRX_GPIO_PORT, LCD_WRX_PIN, Bit_SET);
 80171aa:	4812      	ldr	r0, [pc, #72]	; (80171f4 <LCD_WriteData+0x54>)
 80171ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80171b0:	2201      	movs	r2, #1
 80171b2:	f000 f9a1 	bl	80174f8 <LCD_CtrlLinesWrite>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_ChipSelect(DISABLE);
 80171b6:	2000      	movs	r0, #0
 80171b8:	f7fe fb9c 	bl	80158f4 <LCD_ChipSelect>
  SPI_I2S_SendData(LCD_SPI, value);
 80171bc:	79fb      	ldrb	r3, [r7, #7]
 80171be:	b29b      	uxth	r3, r3
 80171c0:	480d      	ldr	r0, [pc, #52]	; (80171f8 <LCD_WriteData+0x58>)
 80171c2:	4619      	mov	r1, r3
 80171c4:	f7fb fab8 	bl	8012738 <SPI_I2S_SendData>
  
  /* Wait until a data is sent(not busy), before config /CS HIGH */
  
  while(SPI_I2S_GetFlagStatus(LCD_SPI, SPI_I2S_FLAG_TXE) == RESET) ;
 80171c8:	bf00      	nop
 80171ca:	480b      	ldr	r0, [pc, #44]	; (80171f8 <LCD_WriteData+0x58>)
 80171cc:	2102      	movs	r1, #2
 80171ce:	f7fb fb6f 	bl	80128b0 <SPI_I2S_GetFlagStatus>
 80171d2:	4603      	mov	r3, r0
 80171d4:	2b00      	cmp	r3, #0
 80171d6:	d0f8      	beq.n	80171ca <LCD_WriteData+0x2a>
  
  while(SPI_I2S_GetFlagStatus(LCD_SPI, SPI_I2S_FLAG_BSY) != RESET);
 80171d8:	bf00      	nop
 80171da:	4807      	ldr	r0, [pc, #28]	; (80171f8 <LCD_WriteData+0x58>)
 80171dc:	2180      	movs	r1, #128	; 0x80
 80171de:	f7fb fb67 	bl	80128b0 <SPI_I2S_GetFlagStatus>
 80171e2:	4603      	mov	r3, r0
 80171e4:	2b00      	cmp	r3, #0
 80171e6:	d1f8      	bne.n	80171da <LCD_WriteData+0x3a>
  
  LCD_ChipSelect(ENABLE);
 80171e8:	2001      	movs	r0, #1
 80171ea:	f7fe fb83 	bl	80158f4 <LCD_ChipSelect>
}
 80171ee:	3708      	adds	r7, #8
 80171f0:	46bd      	mov	sp, r7
 80171f2:	bd80      	pop	{r7, pc}
 80171f4:	40020c00 	.word	0x40020c00
 80171f8:	40015000 	.word	0x40015000

080171fc <LCD_PowerOn>:
  * @brief  Configure the LCD controller (Power On sequence as described in ILI9341 Datasheet)
  * @param  None
  * @retval None
  */
void LCD_PowerOn(void)
{
 80171fc:	b580      	push	{r7, lr}
 80171fe:	af00      	add	r7, sp, #0
  LCD_WriteCommand(0xCA);
 8017200:	20ca      	movs	r0, #202	; 0xca
 8017202:	f7ff ff9f 	bl	8017144 <LCD_WriteCommand>
  LCD_WriteData(0xC3);
 8017206:	20c3      	movs	r0, #195	; 0xc3
 8017208:	f7ff ffca 	bl	80171a0 <LCD_WriteData>
  LCD_WriteData(0x08);
 801720c:	2008      	movs	r0, #8
 801720e:	f7ff ffc7 	bl	80171a0 <LCD_WriteData>
  LCD_WriteData(0x50);
 8017212:	2050      	movs	r0, #80	; 0x50
 8017214:	f7ff ffc4 	bl	80171a0 <LCD_WriteData>
  LCD_WriteCommand(LCD_POWERB);
 8017218:	20cf      	movs	r0, #207	; 0xcf
 801721a:	f7ff ff93 	bl	8017144 <LCD_WriteCommand>
  LCD_WriteData(0x00);
 801721e:	2000      	movs	r0, #0
 8017220:	f7ff ffbe 	bl	80171a0 <LCD_WriteData>
  LCD_WriteData(0xC1);
 8017224:	20c1      	movs	r0, #193	; 0xc1
 8017226:	f7ff ffbb 	bl	80171a0 <LCD_WriteData>
  LCD_WriteData(0x30);
 801722a:	2030      	movs	r0, #48	; 0x30
 801722c:	f7ff ffb8 	bl	80171a0 <LCD_WriteData>
  LCD_WriteCommand(LCD_POWER_SEQ);
 8017230:	20ed      	movs	r0, #237	; 0xed
 8017232:	f7ff ff87 	bl	8017144 <LCD_WriteCommand>
  LCD_WriteData(0x64);
 8017236:	2064      	movs	r0, #100	; 0x64
 8017238:	f7ff ffb2 	bl	80171a0 <LCD_WriteData>
  LCD_WriteData(0x03);
 801723c:	2003      	movs	r0, #3
 801723e:	f7ff ffaf 	bl	80171a0 <LCD_WriteData>
  LCD_WriteData(0x12);
 8017242:	2012      	movs	r0, #18
 8017244:	f7ff ffac 	bl	80171a0 <LCD_WriteData>
  LCD_WriteData(0x81);
 8017248:	2081      	movs	r0, #129	; 0x81
 801724a:	f7ff ffa9 	bl	80171a0 <LCD_WriteData>
  LCD_WriteCommand(LCD_DTCA);
 801724e:	20e8      	movs	r0, #232	; 0xe8
 8017250:	f7ff ff78 	bl	8017144 <LCD_WriteCommand>
  LCD_WriteData(0x85);
 8017254:	2085      	movs	r0, #133	; 0x85
 8017256:	f7ff ffa3 	bl	80171a0 <LCD_WriteData>
  LCD_WriteData(0x00);
 801725a:	2000      	movs	r0, #0
 801725c:	f7ff ffa0 	bl	80171a0 <LCD_WriteData>
  LCD_WriteData(0x78);
 8017260:	2078      	movs	r0, #120	; 0x78
 8017262:	f7ff ff9d 	bl	80171a0 <LCD_WriteData>
  LCD_WriteCommand(LCD_POWERA);
 8017266:	20cb      	movs	r0, #203	; 0xcb
 8017268:	f7ff ff6c 	bl	8017144 <LCD_WriteCommand>
  LCD_WriteData(0x39);
 801726c:	2039      	movs	r0, #57	; 0x39
 801726e:	f7ff ff97 	bl	80171a0 <LCD_WriteData>
  LCD_WriteData(0x2C);
 8017272:	202c      	movs	r0, #44	; 0x2c
 8017274:	f7ff ff94 	bl	80171a0 <LCD_WriteData>
  LCD_WriteData(0x00);
 8017278:	2000      	movs	r0, #0
 801727a:	f7ff ff91 	bl	80171a0 <LCD_WriteData>
  LCD_WriteData(0x34);
 801727e:	2034      	movs	r0, #52	; 0x34
 8017280:	f7ff ff8e 	bl	80171a0 <LCD_WriteData>
  LCD_WriteData(0x02);
 8017284:	2002      	movs	r0, #2
 8017286:	f7ff ff8b 	bl	80171a0 <LCD_WriteData>
  LCD_WriteCommand(LCD_PRC);
 801728a:	20f7      	movs	r0, #247	; 0xf7
 801728c:	f7ff ff5a 	bl	8017144 <LCD_WriteCommand>
  LCD_WriteData(0x20);
 8017290:	2020      	movs	r0, #32
 8017292:	f7ff ff85 	bl	80171a0 <LCD_WriteData>
  LCD_WriteCommand(LCD_DTCB);
 8017296:	20ea      	movs	r0, #234	; 0xea
 8017298:	f7ff ff54 	bl	8017144 <LCD_WriteCommand>
  LCD_WriteData(0x00);
 801729c:	2000      	movs	r0, #0
 801729e:	f7ff ff7f 	bl	80171a0 <LCD_WriteData>
  LCD_WriteData(0x00);
 80172a2:	2000      	movs	r0, #0
 80172a4:	f7ff ff7c 	bl	80171a0 <LCD_WriteData>
  LCD_WriteCommand(LCD_FRC);
 80172a8:	20b1      	movs	r0, #177	; 0xb1
 80172aa:	f7ff ff4b 	bl	8017144 <LCD_WriteCommand>
  LCD_WriteData(0x00);
 80172ae:	2000      	movs	r0, #0
 80172b0:	f7ff ff76 	bl	80171a0 <LCD_WriteData>
  LCD_WriteData(0x1B);
 80172b4:	201b      	movs	r0, #27
 80172b6:	f7ff ff73 	bl	80171a0 <LCD_WriteData>
  LCD_WriteCommand(LCD_DFC);
 80172ba:	20b6      	movs	r0, #182	; 0xb6
 80172bc:	f7ff ff42 	bl	8017144 <LCD_WriteCommand>
  LCD_WriteData(0x0A);
 80172c0:	200a      	movs	r0, #10
 80172c2:	f7ff ff6d 	bl	80171a0 <LCD_WriteData>
  LCD_WriteData(0xA2);
 80172c6:	20a2      	movs	r0, #162	; 0xa2
 80172c8:	f7ff ff6a 	bl	80171a0 <LCD_WriteData>
  LCD_WriteCommand(LCD_POWER1);
 80172cc:	20c0      	movs	r0, #192	; 0xc0
 80172ce:	f7ff ff39 	bl	8017144 <LCD_WriteCommand>
  LCD_WriteData(0x10);
 80172d2:	2010      	movs	r0, #16
 80172d4:	f7ff ff64 	bl	80171a0 <LCD_WriteData>
  LCD_WriteCommand(LCD_POWER2);
 80172d8:	20c1      	movs	r0, #193	; 0xc1
 80172da:	f7ff ff33 	bl	8017144 <LCD_WriteCommand>
  LCD_WriteData(0x10);
 80172de:	2010      	movs	r0, #16
 80172e0:	f7ff ff5e 	bl	80171a0 <LCD_WriteData>
  LCD_WriteCommand(LCD_VCOM1);
 80172e4:	20c5      	movs	r0, #197	; 0xc5
 80172e6:	f7ff ff2d 	bl	8017144 <LCD_WriteCommand>
  LCD_WriteData(0x45);
 80172ea:	2045      	movs	r0, #69	; 0x45
 80172ec:	f7ff ff58 	bl	80171a0 <LCD_WriteData>
  LCD_WriteData(0x15);
 80172f0:	2015      	movs	r0, #21
 80172f2:	f7ff ff55 	bl	80171a0 <LCD_WriteData>
  LCD_WriteCommand(LCD_VCOM2);
 80172f6:	20c7      	movs	r0, #199	; 0xc7
 80172f8:	f7ff ff24 	bl	8017144 <LCD_WriteCommand>
  LCD_WriteData(0x90);
 80172fc:	2090      	movs	r0, #144	; 0x90
 80172fe:	f7ff ff4f 	bl	80171a0 <LCD_WriteData>
  LCD_WriteCommand(LCD_MAC);
 8017302:	2036      	movs	r0, #54	; 0x36
 8017304:	f7ff ff1e 	bl	8017144 <LCD_WriteCommand>
  LCD_WriteData(0xC8);
 8017308:	20c8      	movs	r0, #200	; 0xc8
 801730a:	f7ff ff49 	bl	80171a0 <LCD_WriteData>
  LCD_WriteCommand(LCD_3GAMMA_EN);
 801730e:	20f2      	movs	r0, #242	; 0xf2
 8017310:	f7ff ff18 	bl	8017144 <LCD_WriteCommand>
  LCD_WriteData(0x00);
 8017314:	2000      	movs	r0, #0
 8017316:	f7ff ff43 	bl	80171a0 <LCD_WriteData>
  LCD_WriteCommand(LCD_RGB_INTERFACE);
 801731a:	20b0      	movs	r0, #176	; 0xb0
 801731c:	f7ff ff12 	bl	8017144 <LCD_WriteCommand>
  LCD_WriteData(0xC2);
 8017320:	20c2      	movs	r0, #194	; 0xc2
 8017322:	f7ff ff3d 	bl	80171a0 <LCD_WriteData>
  LCD_WriteCommand(LCD_DFC);
 8017326:	20b6      	movs	r0, #182	; 0xb6
 8017328:	f7ff ff0c 	bl	8017144 <LCD_WriteCommand>
  LCD_WriteData(0x0A);
 801732c:	200a      	movs	r0, #10
 801732e:	f7ff ff37 	bl	80171a0 <LCD_WriteData>
  LCD_WriteData(0xA7);
 8017332:	20a7      	movs	r0, #167	; 0xa7
 8017334:	f7ff ff34 	bl	80171a0 <LCD_WriteData>
  LCD_WriteData(0x27);
 8017338:	2027      	movs	r0, #39	; 0x27
 801733a:	f7ff ff31 	bl	80171a0 <LCD_WriteData>
  LCD_WriteData(0x04);
 801733e:	2004      	movs	r0, #4
 8017340:	f7ff ff2e 	bl	80171a0 <LCD_WriteData>

  /* colomn address set */
  LCD_WriteCommand(LCD_COLUMN_ADDR);
 8017344:	202a      	movs	r0, #42	; 0x2a
 8017346:	f7ff fefd 	bl	8017144 <LCD_WriteCommand>
  LCD_WriteData(0x00);
 801734a:	2000      	movs	r0, #0
 801734c:	f7ff ff28 	bl	80171a0 <LCD_WriteData>
  LCD_WriteData(0x00);
 8017350:	2000      	movs	r0, #0
 8017352:	f7ff ff25 	bl	80171a0 <LCD_WriteData>
  LCD_WriteData(0x00);
 8017356:	2000      	movs	r0, #0
 8017358:	f7ff ff22 	bl	80171a0 <LCD_WriteData>
  LCD_WriteData(0xEF);
 801735c:	20ef      	movs	r0, #239	; 0xef
 801735e:	f7ff ff1f 	bl	80171a0 <LCD_WriteData>
  /* Page Address Set */
  LCD_WriteCommand(LCD_PAGE_ADDR);
 8017362:	202b      	movs	r0, #43	; 0x2b
 8017364:	f7ff feee 	bl	8017144 <LCD_WriteCommand>
  LCD_WriteData(0x00);
 8017368:	2000      	movs	r0, #0
 801736a:	f7ff ff19 	bl	80171a0 <LCD_WriteData>
  LCD_WriteData(0x00);
 801736e:	2000      	movs	r0, #0
 8017370:	f7ff ff16 	bl	80171a0 <LCD_WriteData>
  LCD_WriteData(0x01);
 8017374:	2001      	movs	r0, #1
 8017376:	f7ff ff13 	bl	80171a0 <LCD_WriteData>
  LCD_WriteData(0x3F);
 801737a:	203f      	movs	r0, #63	; 0x3f
 801737c:	f7ff ff10 	bl	80171a0 <LCD_WriteData>
  LCD_WriteCommand(LCD_INTERFACE);
 8017380:	20f6      	movs	r0, #246	; 0xf6
 8017382:	f7ff fedf 	bl	8017144 <LCD_WriteCommand>
  LCD_WriteData(0x01);
 8017386:	2001      	movs	r0, #1
 8017388:	f7ff ff0a 	bl	80171a0 <LCD_WriteData>
  LCD_WriteData(0x00);
 801738c:	2000      	movs	r0, #0
 801738e:	f7ff ff07 	bl	80171a0 <LCD_WriteData>
  LCD_WriteData(0x06);
 8017392:	2006      	movs	r0, #6
 8017394:	f7ff ff04 	bl	80171a0 <LCD_WriteData>
  
  LCD_WriteCommand(LCD_GRAM);
 8017398:	202c      	movs	r0, #44	; 0x2c
 801739a:	f7ff fed3 	bl	8017144 <LCD_WriteCommand>
  delay(200);
 801739e:	20c8      	movs	r0, #200	; 0xc8
 80173a0:	f000 fa06 	bl	80177b0 <delay>
  
  LCD_WriteCommand(LCD_GAMMA);
 80173a4:	2026      	movs	r0, #38	; 0x26
 80173a6:	f7ff fecd 	bl	8017144 <LCD_WriteCommand>
  LCD_WriteData(0x01);
 80173aa:	2001      	movs	r0, #1
 80173ac:	f7ff fef8 	bl	80171a0 <LCD_WriteData>
  
  LCD_WriteCommand(LCD_PGAMMA);
 80173b0:	20e0      	movs	r0, #224	; 0xe0
 80173b2:	f7ff fec7 	bl	8017144 <LCD_WriteCommand>
  LCD_WriteData(0x0F);
 80173b6:	200f      	movs	r0, #15
 80173b8:	f7ff fef2 	bl	80171a0 <LCD_WriteData>
  LCD_WriteData(0x29);
 80173bc:	2029      	movs	r0, #41	; 0x29
 80173be:	f7ff feef 	bl	80171a0 <LCD_WriteData>
  LCD_WriteData(0x24);
 80173c2:	2024      	movs	r0, #36	; 0x24
 80173c4:	f7ff feec 	bl	80171a0 <LCD_WriteData>
  LCD_WriteData(0x0C);
 80173c8:	200c      	movs	r0, #12
 80173ca:	f7ff fee9 	bl	80171a0 <LCD_WriteData>
  LCD_WriteData(0x0E);
 80173ce:	200e      	movs	r0, #14
 80173d0:	f7ff fee6 	bl	80171a0 <LCD_WriteData>
  LCD_WriteData(0x09);
 80173d4:	2009      	movs	r0, #9
 80173d6:	f7ff fee3 	bl	80171a0 <LCD_WriteData>
  LCD_WriteData(0x4E);
 80173da:	204e      	movs	r0, #78	; 0x4e
 80173dc:	f7ff fee0 	bl	80171a0 <LCD_WriteData>
  LCD_WriteData(0x78);
 80173e0:	2078      	movs	r0, #120	; 0x78
 80173e2:	f7ff fedd 	bl	80171a0 <LCD_WriteData>
  LCD_WriteData(0x3C);
 80173e6:	203c      	movs	r0, #60	; 0x3c
 80173e8:	f7ff feda 	bl	80171a0 <LCD_WriteData>
  LCD_WriteData(0x09);
 80173ec:	2009      	movs	r0, #9
 80173ee:	f7ff fed7 	bl	80171a0 <LCD_WriteData>
  LCD_WriteData(0x13);
 80173f2:	2013      	movs	r0, #19
 80173f4:	f7ff fed4 	bl	80171a0 <LCD_WriteData>
  LCD_WriteData(0x05);
 80173f8:	2005      	movs	r0, #5
 80173fa:	f7ff fed1 	bl	80171a0 <LCD_WriteData>
  LCD_WriteData(0x17);
 80173fe:	2017      	movs	r0, #23
 8017400:	f7ff fece 	bl	80171a0 <LCD_WriteData>
  LCD_WriteData(0x11);
 8017404:	2011      	movs	r0, #17
 8017406:	f7ff fecb 	bl	80171a0 <LCD_WriteData>
  LCD_WriteData(0x00);
 801740a:	2000      	movs	r0, #0
 801740c:	f7ff fec8 	bl	80171a0 <LCD_WriteData>
  LCD_WriteCommand(LCD_NGAMMA);
 8017410:	20e1      	movs	r0, #225	; 0xe1
 8017412:	f7ff fe97 	bl	8017144 <LCD_WriteCommand>
  LCD_WriteData(0x00);
 8017416:	2000      	movs	r0, #0
 8017418:	f7ff fec2 	bl	80171a0 <LCD_WriteData>
  LCD_WriteData(0x16);
 801741c:	2016      	movs	r0, #22
 801741e:	f7ff febf 	bl	80171a0 <LCD_WriteData>
  LCD_WriteData(0x1B);
 8017422:	201b      	movs	r0, #27
 8017424:	f7ff febc 	bl	80171a0 <LCD_WriteData>
  LCD_WriteData(0x04);
 8017428:	2004      	movs	r0, #4
 801742a:	f7ff feb9 	bl	80171a0 <LCD_WriteData>
  LCD_WriteData(0x11);
 801742e:	2011      	movs	r0, #17
 8017430:	f7ff feb6 	bl	80171a0 <LCD_WriteData>
  LCD_WriteData(0x07);
 8017434:	2007      	movs	r0, #7
 8017436:	f7ff feb3 	bl	80171a0 <LCD_WriteData>
  LCD_WriteData(0x31);
 801743a:	2031      	movs	r0, #49	; 0x31
 801743c:	f7ff feb0 	bl	80171a0 <LCD_WriteData>
  LCD_WriteData(0x33);
 8017440:	2033      	movs	r0, #51	; 0x33
 8017442:	f7ff fead 	bl	80171a0 <LCD_WriteData>
  LCD_WriteData(0x42);
 8017446:	2042      	movs	r0, #66	; 0x42
 8017448:	f7ff feaa 	bl	80171a0 <LCD_WriteData>
  LCD_WriteData(0x05);
 801744c:	2005      	movs	r0, #5
 801744e:	f7ff fea7 	bl	80171a0 <LCD_WriteData>
  LCD_WriteData(0x0C);
 8017452:	200c      	movs	r0, #12
 8017454:	f7ff fea4 	bl	80171a0 <LCD_WriteData>
  LCD_WriteData(0x0A);
 8017458:	200a      	movs	r0, #10
 801745a:	f7ff fea1 	bl	80171a0 <LCD_WriteData>
  LCD_WriteData(0x28);
 801745e:	2028      	movs	r0, #40	; 0x28
 8017460:	f7ff fe9e 	bl	80171a0 <LCD_WriteData>
  LCD_WriteData(0x2F);
 8017464:	202f      	movs	r0, #47	; 0x2f
 8017466:	f7ff fe9b 	bl	80171a0 <LCD_WriteData>
  LCD_WriteData(0x0F);
 801746a:	200f      	movs	r0, #15
 801746c:	f7ff fe98 	bl	80171a0 <LCD_WriteData>
  
  LCD_WriteCommand(LCD_SLEEP_OUT);
 8017470:	2011      	movs	r0, #17
 8017472:	f7ff fe67 	bl	8017144 <LCD_WriteCommand>
  delay(200);
 8017476:	20c8      	movs	r0, #200	; 0xc8
 8017478:	f000 f99a 	bl	80177b0 <delay>
  LCD_WriteCommand(LCD_DISPLAY_ON);
 801747c:	2029      	movs	r0, #41	; 0x29
 801747e:	f7ff fe61 	bl	8017144 <LCD_WriteCommand>
  /* GRAM start writing */
  LCD_WriteCommand(LCD_GRAM);
 8017482:	202c      	movs	r0, #44	; 0x2c
 8017484:	f7ff fe5e 	bl	8017144 <LCD_WriteCommand>
 }
 8017488:	bd80      	pop	{r7, pc}
 801748a:	bf00      	nop

0801748c <LCD_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void LCD_DisplayOn(void)
{
 801748c:	b580      	push	{r7, lr}
 801748e:	af00      	add	r7, sp, #0
  LCD_WriteCommand(LCD_DISPLAY_ON);
 8017490:	2029      	movs	r0, #41	; 0x29
 8017492:	f7ff fe57 	bl	8017144 <LCD_WriteCommand>
}
 8017496:	bd80      	pop	{r7, pc}

08017498 <LCD_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void LCD_DisplayOff(void)
{
 8017498:	b580      	push	{r7, lr}
 801749a:	af00      	add	r7, sp, #0
    /* Display Off */
    LCD_WriteCommand(LCD_DISPLAY_OFF);
 801749c:	2028      	movs	r0, #40	; 0x28
 801749e:	f7ff fe51 	bl	8017144 <LCD_WriteCommand>
}
 80174a2:	bd80      	pop	{r7, pc}

080174a4 <LCD_CtrlLinesConfig>:
  *         when VDDIO is lower than required LCD supply.
  * @param  None
  * @retval None
  */
void LCD_CtrlLinesConfig(void)
{
 80174a4:	b580      	push	{r7, lr}
 80174a6:	b082      	sub	sp, #8
 80174a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable GPIOs clock*/
  RCC_AHB1PeriphClockCmd(LCD_NCS_GPIO_CLK | LCD_WRX_GPIO_CLK, ENABLE);
 80174aa:	200c      	movs	r0, #12
 80174ac:	2101      	movs	r1, #1
 80174ae:	f7f8 fbbb 	bl	800fc28 <RCC_AHB1PeriphClockCmd>

  /* Configure NCS in Output Push-Pull mode */
  GPIO_InitStructure.GPIO_Pin = LCD_NCS_PIN;
 80174b2:	2304      	movs	r3, #4
 80174b4:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80174b6:	2302      	movs	r3, #2
 80174b8:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 80174ba:	2301      	movs	r3, #1
 80174bc:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80174be:	2300      	movs	r3, #0
 80174c0:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80174c2:	2300      	movs	r3, #0
 80174c4:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 80174c6:	463b      	mov	r3, r7
 80174c8:	4809      	ldr	r0, [pc, #36]	; (80174f0 <LCD_CtrlLinesConfig+0x4c>)
 80174ca:	4619      	mov	r1, r3
 80174cc:	f7f5 fd04 	bl	800ced8 <GPIO_Init>
  
  /* Configure WRX in Output Push-Pull mode */
  GPIO_InitStructure.GPIO_Pin = LCD_WRX_PIN;
 80174d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80174d4:	603b      	str	r3, [r7, #0]
  GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 80174d6:	463b      	mov	r3, r7
 80174d8:	4806      	ldr	r0, [pc, #24]	; (80174f4 <LCD_CtrlLinesConfig+0x50>)
 80174da:	4619      	mov	r1, r3
 80174dc:	f7f5 fcfc 	bl	800ced8 <GPIO_Init>

  /* Set chip select pin high */
  LCD_CtrlLinesWrite(LCD_NCS_GPIO_PORT, LCD_NCS_PIN, Bit_SET);
 80174e0:	4803      	ldr	r0, [pc, #12]	; (80174f0 <LCD_CtrlLinesConfig+0x4c>)
 80174e2:	2104      	movs	r1, #4
 80174e4:	2201      	movs	r2, #1
 80174e6:	f000 f807 	bl	80174f8 <LCD_CtrlLinesWrite>
}
 80174ea:	3708      	adds	r7, #8
 80174ec:	46bd      	mov	sp, r7
 80174ee:	bd80      	pop	{r7, pc}
 80174f0:	40020800 	.word	0x40020800
 80174f4:	40020c00 	.word	0x40020c00

080174f8 <LCD_CtrlLinesWrite>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void LCD_CtrlLinesWrite(GPIO_TypeDef* GPIOx, uint16_t CtrlPins, BitAction BitVal)
{
 80174f8:	b580      	push	{r7, lr}
 80174fa:	b082      	sub	sp, #8
 80174fc:	af00      	add	r7, sp, #0
 80174fe:	6078      	str	r0, [r7, #4]
 8017500:	4613      	mov	r3, r2
 8017502:	460a      	mov	r2, r1
 8017504:	807a      	strh	r2, [r7, #2]
 8017506:	707b      	strb	r3, [r7, #1]
  /* Set or Reset the control line */
  GPIO_WriteBit(GPIOx, (uint16_t)CtrlPins, (BitAction)BitVal);
 8017508:	887a      	ldrh	r2, [r7, #2]
 801750a:	787b      	ldrb	r3, [r7, #1]
 801750c:	6878      	ldr	r0, [r7, #4]
 801750e:	4611      	mov	r1, r2
 8017510:	461a      	mov	r2, r3
 8017512:	f7f5 fe17 	bl	800d144 <GPIO_WriteBit>
}
 8017516:	3708      	adds	r7, #8
 8017518:	46bd      	mov	sp, r7
 801751a:	bd80      	pop	{r7, pc}

0801751c <LCD_SPIConfig>:
  * @brief  Configures the LCD_SPI interface.
  * @param  None
  * @retval None
  */
void LCD_SPIConfig(void)
{
 801751c:	b580      	push	{r7, lr}
 801751e:	b088      	sub	sp, #32
 8017520:	af00      	add	r7, sp, #0
  SPI_InitTypeDef    SPI_InitStructure;
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable LCD_SPI_SCK_GPIO_CLK, LCD_SPI_MISO_GPIO_CLK and LCD_SPI_MOSI_GPIO_CLK clock */
  RCC_AHB1PeriphClockCmd(LCD_SPI_SCK_GPIO_CLK | LCD_SPI_MISO_GPIO_CLK | LCD_SPI_MOSI_GPIO_CLK, ENABLE);
 8017522:	2020      	movs	r0, #32
 8017524:	2101      	movs	r1, #1
 8017526:	f7f8 fb7f 	bl	800fc28 <RCC_AHB1PeriphClockCmd>

  /* Enable LCD_SPI and SYSCFG clock  */
  RCC_APB2PeriphClockCmd(LCD_SPI_CLK, ENABLE);
 801752a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 801752e:	2101      	movs	r1, #1
 8017530:	f7f8 fbf2 	bl	800fd18 <RCC_APB2PeriphClockCmd>
  
  /* Configure LCD_SPI SCK pin */
  GPIO_InitStructure.GPIO_Pin = LCD_SPI_SCK_PIN;
 8017534:	2380      	movs	r3, #128	; 0x80
 8017536:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_25MHz;
 8017538:	2301      	movs	r3, #1
 801753a:	727b      	strb	r3, [r7, #9]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 801753c:	2302      	movs	r3, #2
 801753e:	723b      	strb	r3, [r7, #8]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8017540:	2300      	movs	r3, #0
 8017542:	72bb      	strb	r3, [r7, #10]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;
 8017544:	2302      	movs	r3, #2
 8017546:	72fb      	strb	r3, [r7, #11]
  GPIO_Init(LCD_SPI_SCK_GPIO_PORT, &GPIO_InitStructure);
 8017548:	1d3b      	adds	r3, r7, #4
 801754a:	4827      	ldr	r0, [pc, #156]	; (80175e8 <LCD_SPIConfig+0xcc>)
 801754c:	4619      	mov	r1, r3
 801754e:	f7f5 fcc3 	bl	800ced8 <GPIO_Init>

  /* Configure LCD_SPI MISO pin */
  GPIO_InitStructure.GPIO_Pin = LCD_SPI_MISO_PIN;
 8017552:	f44f 7380 	mov.w	r3, #256	; 0x100
 8017556:	607b      	str	r3, [r7, #4]
  GPIO_Init(LCD_SPI_MISO_GPIO_PORT, &GPIO_InitStructure);
 8017558:	1d3b      	adds	r3, r7, #4
 801755a:	4823      	ldr	r0, [pc, #140]	; (80175e8 <LCD_SPIConfig+0xcc>)
 801755c:	4619      	mov	r1, r3
 801755e:	f7f5 fcbb 	bl	800ced8 <GPIO_Init>

  /* Configure LCD_SPI MOSI pin */
  GPIO_InitStructure.GPIO_Pin = LCD_SPI_MOSI_PIN;
 8017562:	f44f 7300 	mov.w	r3, #512	; 0x200
 8017566:	607b      	str	r3, [r7, #4]
  GPIO_Init(LCD_SPI_MOSI_GPIO_PORT, &GPIO_InitStructure);
 8017568:	1d3b      	adds	r3, r7, #4
 801756a:	481f      	ldr	r0, [pc, #124]	; (80175e8 <LCD_SPIConfig+0xcc>)
 801756c:	4619      	mov	r1, r3
 801756e:	f7f5 fcb3 	bl	800ced8 <GPIO_Init>

  /* Connect SPI SCK */
  GPIO_PinAFConfig(LCD_SPI_SCK_GPIO_PORT, LCD_SPI_SCK_SOURCE, LCD_SPI_SCK_AF);
 8017572:	481d      	ldr	r0, [pc, #116]	; (80175e8 <LCD_SPIConfig+0xcc>)
 8017574:	2107      	movs	r1, #7
 8017576:	2205      	movs	r2, #5
 8017578:	f7f5 fe1c 	bl	800d1b4 <GPIO_PinAFConfig>

  /* Connect SPI MISO */
  GPIO_PinAFConfig(LCD_SPI_MISO_GPIO_PORT, LCD_SPI_MISO_SOURCE, LCD_SPI_MISO_AF);
 801757c:	481a      	ldr	r0, [pc, #104]	; (80175e8 <LCD_SPIConfig+0xcc>)
 801757e:	2108      	movs	r1, #8
 8017580:	2205      	movs	r2, #5
 8017582:	f7f5 fe17 	bl	800d1b4 <GPIO_PinAFConfig>

  /* Connect SPI MOSI */
  GPIO_PinAFConfig(LCD_SPI_MOSI_GPIO_PORT, LCD_SPI_MOSI_SOURCE, LCD_SPI_MOSI_AF);
 8017586:	4818      	ldr	r0, [pc, #96]	; (80175e8 <LCD_SPIConfig+0xcc>)
 8017588:	2109      	movs	r1, #9
 801758a:	2205      	movs	r2, #5
 801758c:	f7f5 fe12 	bl	800d1b4 <GPIO_PinAFConfig>
  
  SPI_I2S_DeInit(LCD_SPI);
 8017590:	4816      	ldr	r0, [pc, #88]	; (80175ec <LCD_SPIConfig+0xd0>)
 8017592:	f7fa fdcf 	bl	8012134 <SPI_I2S_DeInit>

  /* SPI configuration -------------------------------------------------------*/
  /* If the SPI peripheral is already enabled, don't reconfigure it */
  if ((LCD_SPI->CR1 & SPI_CR1_SPE) == 0)
 8017596:	4b15      	ldr	r3, [pc, #84]	; (80175ec <LCD_SPIConfig+0xd0>)
 8017598:	881b      	ldrh	r3, [r3, #0]
 801759a:	b29b      	uxth	r3, r3
 801759c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80175a0:	2b00      	cmp	r3, #0
 80175a2:	d11d      	bne.n	80175e0 <LCD_SPIConfig+0xc4>
  {    
    SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 80175a4:	2300      	movs	r3, #0
 80175a6:	81bb      	strh	r3, [r7, #12]
    SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
 80175a8:	f44f 7382 	mov.w	r3, #260	; 0x104
 80175ac:	81fb      	strh	r3, [r7, #14]
    SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
 80175ae:	2300      	movs	r3, #0
 80175b0:	823b      	strh	r3, [r7, #16]
    SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;
 80175b2:	2300      	movs	r3, #0
 80175b4:	827b      	strh	r3, [r7, #18]
    SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;
 80175b6:	2300      	movs	r3, #0
 80175b8:	82bb      	strh	r3, [r7, #20]
    SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
 80175ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80175be:	82fb      	strh	r3, [r7, #22]
       to verify these constraints:
          - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
          - l3gd20 SPI interface max baudrate is 10MHz for write/read
          - PCLK2 frequency is set to 90 MHz 
       */
    SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_16;
 80175c0:	2318      	movs	r3, #24
 80175c2:	833b      	strh	r3, [r7, #24]
    SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
 80175c4:	2300      	movs	r3, #0
 80175c6:	837b      	strh	r3, [r7, #26]
    SPI_InitStructure.SPI_CRCPolynomial = 7;
 80175c8:	2307      	movs	r3, #7
 80175ca:	83bb      	strh	r3, [r7, #28]
    SPI_Init(LCD_SPI, &SPI_InitStructure);
 80175cc:	f107 030c 	add.w	r3, r7, #12
 80175d0:	4806      	ldr	r0, [pc, #24]	; (80175ec <LCD_SPIConfig+0xd0>)
 80175d2:	4619      	mov	r1, r3
 80175d4:	f7fa fe1a 	bl	801220c <SPI_Init>

    /* Enable L3GD20_SPI  */
    SPI_Cmd(LCD_SPI, ENABLE);
 80175d8:	4804      	ldr	r0, [pc, #16]	; (80175ec <LCD_SPIConfig+0xd0>)
 80175da:	2101      	movs	r1, #1
 80175dc:	f7fa ff72 	bl	80124c4 <SPI_Cmd>
  }
}
 80175e0:	3720      	adds	r7, #32
 80175e2:	46bd      	mov	sp, r7
 80175e4:	bd80      	pop	{r7, pc}
 80175e6:	bf00      	nop
 80175e8:	40021400 	.word	0x40021400
 80175ec:	40015000 	.word	0x40015000

080175f0 <LCD_AF_GPIOConfig>:
  * @brief  GPIO config for LTDC.
  * @param  None
  * @retval None
  */
static void LCD_AF_GPIOConfig(void)
{
 80175f0:	b580      	push	{r7, lr}
 80175f2:	b082      	sub	sp, #8
 80175f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /* Enable GPIOA, GPIOB, GPIOC, GPIOD, GPIOF, GPIOG AHB Clocks */
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA | RCC_AHB1Periph_GPIOB | \
 80175f6:	206f      	movs	r0, #111	; 0x6f
 80175f8:	2101      	movs	r1, #1
 80175fa:	f7f8 fb15 	bl	800fc28 <RCC_AHB1PeriphClockCmd>
           -----------------------------------------------------

*/

 /* GPIOA configuration */
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_LTDC);
 80175fe:	4854      	ldr	r0, [pc, #336]	; (8017750 <LCD_AF_GPIOConfig+0x160>)
 8017600:	2103      	movs	r1, #3
 8017602:	220e      	movs	r2, #14
 8017604:	f7f5 fdd6 	bl	800d1b4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource4, GPIO_AF_LTDC);
 8017608:	4851      	ldr	r0, [pc, #324]	; (8017750 <LCD_AF_GPIOConfig+0x160>)
 801760a:	2104      	movs	r1, #4
 801760c:	220e      	movs	r2, #14
 801760e:	f7f5 fdd1 	bl	800d1b4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource6, GPIO_AF_LTDC);
 8017612:	484f      	ldr	r0, [pc, #316]	; (8017750 <LCD_AF_GPIOConfig+0x160>)
 8017614:	2106      	movs	r1, #6
 8017616:	220e      	movs	r2, #14
 8017618:	f7f5 fdcc 	bl	800d1b4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource11, GPIO_AF_LTDC);
 801761c:	484c      	ldr	r0, [pc, #304]	; (8017750 <LCD_AF_GPIOConfig+0x160>)
 801761e:	210b      	movs	r1, #11
 8017620:	220e      	movs	r2, #14
 8017622:	f7f5 fdc7 	bl	800d1b4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource12, GPIO_AF_LTDC);
 8017626:	484a      	ldr	r0, [pc, #296]	; (8017750 <LCD_AF_GPIOConfig+0x160>)
 8017628:	210c      	movs	r1, #12
 801762a:	220e      	movs	r2, #14
 801762c:	f7f5 fdc2 	bl	800d1b4 <GPIO_PinAFConfig>

  GPIO_InitStruct.GPIO_Pin = GPIO_Pin_3 | GPIO_Pin_4 | GPIO_Pin_6 | \
 8017630:	f641 0358 	movw	r3, #6232	; 0x1858
 8017634:	603b      	str	r3, [r7, #0]
                             GPIO_Pin_11 | GPIO_Pin_12;
                             
  GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;
 8017636:	2302      	movs	r3, #2
 8017638:	717b      	strb	r3, [r7, #5]
  GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 801763a:	2302      	movs	r3, #2
 801763c:	713b      	strb	r3, [r7, #4]
  GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 801763e:	2300      	movs	r3, #0
 8017640:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8017642:	2300      	movs	r3, #0
 8017644:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(GPIOA, &GPIO_InitStruct);
 8017646:	463b      	mov	r3, r7
 8017648:	4841      	ldr	r0, [pc, #260]	; (8017750 <LCD_AF_GPIOConfig+0x160>)
 801764a:	4619      	mov	r1, r3
 801764c:	f7f5 fc44 	bl	800ced8 <GPIO_Init>
  
 /* GPIOB configuration */  
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource0, 0x09);
 8017650:	4840      	ldr	r0, [pc, #256]	; (8017754 <LCD_AF_GPIOConfig+0x164>)
 8017652:	2100      	movs	r1, #0
 8017654:	2209      	movs	r2, #9
 8017656:	f7f5 fdad 	bl	800d1b4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource1, 0x09);
 801765a:	483e      	ldr	r0, [pc, #248]	; (8017754 <LCD_AF_GPIOConfig+0x164>)
 801765c:	2101      	movs	r1, #1
 801765e:	2209      	movs	r2, #9
 8017660:	f7f5 fda8 	bl	800d1b4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource8, GPIO_AF_LTDC);
 8017664:	483b      	ldr	r0, [pc, #236]	; (8017754 <LCD_AF_GPIOConfig+0x164>)
 8017666:	2108      	movs	r1, #8
 8017668:	220e      	movs	r2, #14
 801766a:	f7f5 fda3 	bl	800d1b4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_LTDC);
 801766e:	4839      	ldr	r0, [pc, #228]	; (8017754 <LCD_AF_GPIOConfig+0x164>)
 8017670:	2109      	movs	r1, #9
 8017672:	220e      	movs	r2, #14
 8017674:	f7f5 fd9e 	bl	800d1b4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource10, GPIO_AF_LTDC);
 8017678:	4836      	ldr	r0, [pc, #216]	; (8017754 <LCD_AF_GPIOConfig+0x164>)
 801767a:	210a      	movs	r1, #10
 801767c:	220e      	movs	r2, #14
 801767e:	f7f5 fd99 	bl	800d1b4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource11, GPIO_AF_LTDC);
 8017682:	4834      	ldr	r0, [pc, #208]	; (8017754 <LCD_AF_GPIOConfig+0x164>)
 8017684:	210b      	movs	r1, #11
 8017686:	220e      	movs	r2, #14
 8017688:	f7f5 fd94 	bl	800d1b4 <GPIO_PinAFConfig>

  GPIO_InitStruct.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_8 | \
 801768c:	f640 7303 	movw	r3, #3843	; 0xf03
 8017690:	603b      	str	r3, [r7, #0]
                             GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_11;
  
  GPIO_Init(GPIOB, &GPIO_InitStruct);
 8017692:	463b      	mov	r3, r7
 8017694:	482f      	ldr	r0, [pc, #188]	; (8017754 <LCD_AF_GPIOConfig+0x164>)
 8017696:	4619      	mov	r1, r3
 8017698:	f7f5 fc1e 	bl	800ced8 <GPIO_Init>

 /* GPIOC configuration */
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource6, GPIO_AF_LTDC);
 801769c:	482e      	ldr	r0, [pc, #184]	; (8017758 <LCD_AF_GPIOConfig+0x168>)
 801769e:	2106      	movs	r1, #6
 80176a0:	220e      	movs	r2, #14
 80176a2:	f7f5 fd87 	bl	800d1b4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource7, GPIO_AF_LTDC);
 80176a6:	482c      	ldr	r0, [pc, #176]	; (8017758 <LCD_AF_GPIOConfig+0x168>)
 80176a8:	2107      	movs	r1, #7
 80176aa:	220e      	movs	r2, #14
 80176ac:	f7f5 fd82 	bl	800d1b4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource10, GPIO_AF_LTDC);
 80176b0:	4829      	ldr	r0, [pc, #164]	; (8017758 <LCD_AF_GPIOConfig+0x168>)
 80176b2:	210a      	movs	r1, #10
 80176b4:	220e      	movs	r2, #14
 80176b6:	f7f5 fd7d 	bl	800d1b4 <GPIO_PinAFConfig>
  
  GPIO_InitStruct.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7 | GPIO_Pin_10;
 80176ba:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80176be:	603b      	str	r3, [r7, #0]
                             
  GPIO_Init(GPIOC, &GPIO_InitStruct);
 80176c0:	463b      	mov	r3, r7
 80176c2:	4825      	ldr	r0, [pc, #148]	; (8017758 <LCD_AF_GPIOConfig+0x168>)
 80176c4:	4619      	mov	r1, r3
 80176c6:	f7f5 fc07 	bl	800ced8 <GPIO_Init>

 /* GPIOD configuration */
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource3, GPIO_AF_LTDC);
 80176ca:	4824      	ldr	r0, [pc, #144]	; (801775c <LCD_AF_GPIOConfig+0x16c>)
 80176cc:	2103      	movs	r1, #3
 80176ce:	220e      	movs	r2, #14
 80176d0:	f7f5 fd70 	bl	800d1b4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource6, GPIO_AF_LTDC);
 80176d4:	4821      	ldr	r0, [pc, #132]	; (801775c <LCD_AF_GPIOConfig+0x16c>)
 80176d6:	2106      	movs	r1, #6
 80176d8:	220e      	movs	r2, #14
 80176da:	f7f5 fd6b 	bl	800d1b4 <GPIO_PinAFConfig>
  
  GPIO_InitStruct.GPIO_Pin = GPIO_Pin_3 | GPIO_Pin_6;
 80176de:	2348      	movs	r3, #72	; 0x48
 80176e0:	603b      	str	r3, [r7, #0]
                             
  GPIO_Init(GPIOD, &GPIO_InitStruct);
 80176e2:	463b      	mov	r3, r7
 80176e4:	481d      	ldr	r0, [pc, #116]	; (801775c <LCD_AF_GPIOConfig+0x16c>)
 80176e6:	4619      	mov	r1, r3
 80176e8:	f7f5 fbf6 	bl	800ced8 <GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource10, GPIO_AF_LTDC);
 80176ec:	481c      	ldr	r0, [pc, #112]	; (8017760 <LCD_AF_GPIOConfig+0x170>)
 80176ee:	210a      	movs	r1, #10
 80176f0:	220e      	movs	r2, #14
 80176f2:	f7f5 fd5f 	bl	800d1b4 <GPIO_PinAFConfig>
  
  GPIO_InitStruct.GPIO_Pin = GPIO_Pin_10;
 80176f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80176fa:	603b      	str	r3, [r7, #0]
                             
  GPIO_Init(GPIOF, &GPIO_InitStruct);     
 80176fc:	463b      	mov	r3, r7
 80176fe:	4818      	ldr	r0, [pc, #96]	; (8017760 <LCD_AF_GPIOConfig+0x170>)
 8017700:	4619      	mov	r1, r3
 8017702:	f7f5 fbe9 	bl	800ced8 <GPIO_Init>

 /* GPIOG configuration */  
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource6, GPIO_AF_LTDC);
 8017706:	4817      	ldr	r0, [pc, #92]	; (8017764 <LCD_AF_GPIOConfig+0x174>)
 8017708:	2106      	movs	r1, #6
 801770a:	220e      	movs	r2, #14
 801770c:	f7f5 fd52 	bl	800d1b4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource7, GPIO_AF_LTDC);
 8017710:	4814      	ldr	r0, [pc, #80]	; (8017764 <LCD_AF_GPIOConfig+0x174>)
 8017712:	2107      	movs	r1, #7
 8017714:	220e      	movs	r2, #14
 8017716:	f7f5 fd4d 	bl	800d1b4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource10, 0x09);
 801771a:	4812      	ldr	r0, [pc, #72]	; (8017764 <LCD_AF_GPIOConfig+0x174>)
 801771c:	210a      	movs	r1, #10
 801771e:	2209      	movs	r2, #9
 8017720:	f7f5 fd48 	bl	800d1b4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource11, GPIO_AF_LTDC);
 8017724:	480f      	ldr	r0, [pc, #60]	; (8017764 <LCD_AF_GPIOConfig+0x174>)
 8017726:	210b      	movs	r1, #11
 8017728:	220e      	movs	r2, #14
 801772a:	f7f5 fd43 	bl	800d1b4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource12, 0x09);
 801772e:	480d      	ldr	r0, [pc, #52]	; (8017764 <LCD_AF_GPIOConfig+0x174>)
 8017730:	210c      	movs	r1, #12
 8017732:	2209      	movs	r2, #9
 8017734:	f7f5 fd3e 	bl	800d1b4 <GPIO_PinAFConfig>

  GPIO_InitStruct.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7 | GPIO_Pin_10 | \
 8017738:	f44f 53e6 	mov.w	r3, #7360	; 0x1cc0
 801773c:	603b      	str	r3, [r7, #0]
                             GPIO_Pin_11 | GPIO_Pin_12;
  
  GPIO_Init(GPIOG, &GPIO_InitStruct);
 801773e:	463b      	mov	r3, r7
 8017740:	4808      	ldr	r0, [pc, #32]	; (8017764 <LCD_AF_GPIOConfig+0x174>)
 8017742:	4619      	mov	r1, r3
 8017744:	f7f5 fbc8 	bl	800ced8 <GPIO_Init>
 
}
 8017748:	3708      	adds	r7, #8
 801774a:	46bd      	mov	sp, r7
 801774c:	bd80      	pop	{r7, pc}
 801774e:	bf00      	nop
 8017750:	40020000 	.word	0x40020000
 8017754:	40020400 	.word	0x40020400
 8017758:	40020800 	.word	0x40020800
 801775c:	40020c00 	.word	0x40020c00
 8017760:	40021400 	.word	0x40021400
 8017764:	40021800 	.word	0x40021800

08017768 <PutPixel>:
  * @param  x: pixel x.
  * @param  y: pixel y.  
  * @retval None
  */
static void PutPixel(int16_t x, int16_t y)
{ 
 8017768:	b580      	push	{r7, lr}
 801776a:	b082      	sub	sp, #8
 801776c:	af00      	add	r7, sp, #0
 801776e:	4602      	mov	r2, r0
 8017770:	460b      	mov	r3, r1
 8017772:	80fa      	strh	r2, [r7, #6]
 8017774:	80bb      	strh	r3, [r7, #4]
  if(x < 0 || x > 239 || y < 0 || y > 319)
 8017776:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801777a:	2b00      	cmp	r3, #0
 801777c:	db0c      	blt.n	8017798 <PutPixel+0x30>
 801777e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8017782:	2bef      	cmp	r3, #239	; 0xef
 8017784:	dc08      	bgt.n	8017798 <PutPixel+0x30>
 8017786:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801778a:	2b00      	cmp	r3, #0
 801778c:	db04      	blt.n	8017798 <PutPixel+0x30>
 801778e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8017792:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8017796:	db00      	blt.n	801779a <PutPixel+0x32>
  {
    return;  
 8017798:	e007      	b.n	80177aa <PutPixel+0x42>
  }
  LCD_DrawLine(x, y, 1, LCD_DIR_HORIZONTAL);
 801779a:	88fa      	ldrh	r2, [r7, #6]
 801779c:	88bb      	ldrh	r3, [r7, #4]
 801779e:	4610      	mov	r0, r2
 80177a0:	4619      	mov	r1, r3
 80177a2:	2201      	movs	r2, #1
 80177a4:	2300      	movs	r3, #0
 80177a6:	f7fe fb55 	bl	8015e54 <LCD_DrawLine>
}
 80177aa:	3708      	adds	r7, #8
 80177ac:	46bd      	mov	sp, r7
 80177ae:	bd80      	pop	{r7, pc}

080177b0 <delay>:
  * @brief  Inserts a delay time.
  * @param  nCount: specifies the delay time length.
  * @retval None
  */
static void delay(__IO uint32_t nCount)
{
 80177b0:	b480      	push	{r7}
 80177b2:	b085      	sub	sp, #20
 80177b4:	af00      	add	r7, sp, #0
 80177b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t index = 0; 
 80177b8:	2300      	movs	r3, #0
 80177ba:	60fb      	str	r3, [r7, #12]
  for(index = nCount; index != 0; index--)
 80177bc:	687b      	ldr	r3, [r7, #4]
 80177be:	60fb      	str	r3, [r7, #12]
 80177c0:	e002      	b.n	80177c8 <delay+0x18>
 80177c2:	68fb      	ldr	r3, [r7, #12]
 80177c4:	3b01      	subs	r3, #1
 80177c6:	60fb      	str	r3, [r7, #12]
 80177c8:	68fb      	ldr	r3, [r7, #12]
 80177ca:	2b00      	cmp	r3, #0
 80177cc:	d1f9      	bne.n	80177c2 <delay+0x12>
  {
  }
}
 80177ce:	3714      	adds	r7, #20
 80177d0:	46bd      	mov	sp, r7
 80177d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177d6:	4770      	bx	lr

080177d8 <SDRAM_Init>:
  *         on the SDRAM.
  * @param  None
  * @retval None
  */
void SDRAM_Init(void)
{
 80177d8:	b580      	push	{r7, lr}
 80177da:	b092      	sub	sp, #72	; 0x48
 80177dc:	af00      	add	r7, sp, #0
  FMC_SDRAMInitTypeDef  FMC_SDRAMInitStructure;
  FMC_SDRAMTimingInitTypeDef  FMC_SDRAMTimingInitStructure; 
  
  /* GPIO configuration for FMC SDRAM bank */
  SDRAM_GPIOConfig();
 80177de:	f000 f835 	bl	801784c <SDRAM_GPIOConfig>
  
  /* Enable FMC clock */
  RCC_AHB3PeriphClockCmd(RCC_AHB3Periph_FMC, ENABLE);
 80177e2:	2001      	movs	r0, #1
 80177e4:	2101      	movs	r1, #1
 80177e6:	f7f8 fa5b 	bl	800fca0 <RCC_AHB3PeriphClockCmd>
 
/* FMC Configuration ---------------------------------------------------------*/
/* FMC SDRAM Bank configuration */   
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  FMC_SDRAMTimingInitStructure.FMC_LoadToActiveDelay    = 2;      
 80177ea:	2302      	movs	r3, #2
 80177ec:	603b      	str	r3, [r7, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  FMC_SDRAMTimingInitStructure.FMC_ExitSelfRefreshDelay = 7;
 80177ee:	2307      	movs	r3, #7
 80177f0:	607b      	str	r3, [r7, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  FMC_SDRAMTimingInitStructure.FMC_SelfRefreshTime      = 4;
 80177f2:	2304      	movs	r3, #4
 80177f4:	60bb      	str	r3, [r7, #8]
  /* TRC:  min=70 (7x11.11ns) */        
  FMC_SDRAMTimingInitStructure.FMC_RowCycleDelay        = 7;         
 80177f6:	2307      	movs	r3, #7
 80177f8:	60fb      	str	r3, [r7, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  FMC_SDRAMTimingInitStructure.FMC_WriteRecoveryTime    = 2;      
 80177fa:	2302      	movs	r3, #2
 80177fc:	613b      	str	r3, [r7, #16]
  /* TRP:  20ns => 2x11.11ns */
  FMC_SDRAMTimingInitStructure.FMC_RPDelay              = 2;                
 80177fe:	2302      	movs	r3, #2
 8017800:	617b      	str	r3, [r7, #20]
  /* TRCD: 20ns => 2x11.11ns */
  FMC_SDRAMTimingInitStructure.FMC_RCDDelay             = 2;
 8017802:	2302      	movs	r3, #2
 8017804:	61bb      	str	r3, [r7, #24]

/* FMC SDRAM control configuration */
  FMC_SDRAMInitStructure.FMC_Bank = FMC_Bank2_SDRAM;
 8017806:	2301      	movs	r3, #1
 8017808:	61fb      	str	r3, [r7, #28]
  /* Row addressing: [7:0] */
  FMC_SDRAMInitStructure.FMC_ColumnBitsNumber = FMC_ColumnBits_Number_8b;
 801780a:	2300      	movs	r3, #0
 801780c:	623b      	str	r3, [r7, #32]
  /* Column addressing: [11:0] */
  FMC_SDRAMInitStructure.FMC_RowBitsNumber = FMC_RowBits_Number_12b;
 801780e:	2304      	movs	r3, #4
 8017810:	627b      	str	r3, [r7, #36]	; 0x24
  FMC_SDRAMInitStructure.FMC_SDMemoryDataWidth = SDRAM_MEMORY_WIDTH;
 8017812:	2310      	movs	r3, #16
 8017814:	62bb      	str	r3, [r7, #40]	; 0x28
  FMC_SDRAMInitStructure.FMC_InternalBankNumber = FMC_InternalBank_Number_4;
 8017816:	2340      	movs	r3, #64	; 0x40
 8017818:	62fb      	str	r3, [r7, #44]	; 0x2c
  FMC_SDRAMInitStructure.FMC_CASLatency = SDRAM_CAS_LATENCY; 
 801781a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 801781e:	633b      	str	r3, [r7, #48]	; 0x30
  FMC_SDRAMInitStructure.FMC_WriteProtection = FMC_Write_Protection_Disable;
 8017820:	2300      	movs	r3, #0
 8017822:	637b      	str	r3, [r7, #52]	; 0x34
  FMC_SDRAMInitStructure.FMC_SDClockPeriod = SDCLOCK_PERIOD;  
 8017824:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8017828:	63bb      	str	r3, [r7, #56]	; 0x38
  FMC_SDRAMInitStructure.FMC_ReadBurst = SDRAM_READBURST;
 801782a:	2300      	movs	r3, #0
 801782c:	63fb      	str	r3, [r7, #60]	; 0x3c
  FMC_SDRAMInitStructure.FMC_ReadPipeDelay = FMC_ReadPipe_Delay_1;
 801782e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8017832:	643b      	str	r3, [r7, #64]	; 0x40
  FMC_SDRAMInitStructure.FMC_SDRAMTimingStruct = &FMC_SDRAMTimingInitStructure;
 8017834:	463b      	mov	r3, r7
 8017836:	647b      	str	r3, [r7, #68]	; 0x44
  
  /* FMC SDRAM bank initialization */
  FMC_SDRAMInit(&FMC_SDRAMInitStructure); 
 8017838:	f107 031c 	add.w	r3, r7, #28
 801783c:	4618      	mov	r0, r3
 801783e:	f7f4 ffa5 	bl	800c78c <FMC_SDRAMInit>
  
  /* FMC SDRAM device initialization sequence */
  SDRAM_InitSequence(); 
 8017842:	f000 f90d 	bl	8017a60 <SDRAM_InitSequence>
  
}
 8017846:	3748      	adds	r7, #72	; 0x48
 8017848:	46bd      	mov	sp, r7
 801784a:	bd80      	pop	{r7, pc}

0801784c <SDRAM_GPIOConfig>:
  * @brief  Configures all SDRAM memory I/Os pins. 
  * @param  None. 
  * @retval None.
  */
void SDRAM_GPIOConfig(void)
{
 801784c:	b580      	push	{r7, lr}
 801784e:	b082      	sub	sp, #8
 8017850:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable GPIOs clock */
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB | RCC_AHB1Periph_GPIOC | RCC_AHB1Periph_GPIOD |
 8017852:	207e      	movs	r0, #126	; 0x7e
 8017854:	2101      	movs	r1, #1
 8017856:	f7f8 f9e7 	bl	800fc28 <RCC_AHB1PeriphClockCmd>
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF;
 801785a:	2302      	movs	r3, #2
 801785c:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 801785e:	2302      	movs	r3, #2
 8017860:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8017862:	2300      	movs	r3, #0
 8017864:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8017866:	2300      	movs	r3, #0
 8017868:	71fb      	strb	r3, [r7, #7]

  /* GPIOB configuration */
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource5 , GPIO_AF_FMC);
 801786a:	4877      	ldr	r0, [pc, #476]	; (8017a48 <SDRAM_GPIOConfig+0x1fc>)
 801786c:	2105      	movs	r1, #5
 801786e:	220c      	movs	r2, #12
 8017870:	f7f5 fca0 	bl	800d1b4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource6 , GPIO_AF_FMC);
 8017874:	4874      	ldr	r0, [pc, #464]	; (8017a48 <SDRAM_GPIOConfig+0x1fc>)
 8017876:	2106      	movs	r1, #6
 8017878:	220c      	movs	r2, #12
 801787a:	f7f5 fc9b 	bl	800d1b4 <GPIO_PinAFConfig>
  
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5  | GPIO_Pin_6;      
 801787e:	2360      	movs	r3, #96	; 0x60
 8017880:	603b      	str	r3, [r7, #0]

  GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8017882:	463b      	mov	r3, r7
 8017884:	4870      	ldr	r0, [pc, #448]	; (8017a48 <SDRAM_GPIOConfig+0x1fc>)
 8017886:	4619      	mov	r1, r3
 8017888:	f7f5 fb26 	bl	800ced8 <GPIO_Init>

  /* GPIOC configuration */
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource0 , GPIO_AF_FMC);
 801788c:	486f      	ldr	r0, [pc, #444]	; (8017a4c <SDRAM_GPIOConfig+0x200>)
 801788e:	2100      	movs	r1, #0
 8017890:	220c      	movs	r2, #12
 8017892:	f7f5 fc8f 	bl	800d1b4 <GPIO_PinAFConfig>
  
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;      
 8017896:	2301      	movs	r3, #1
 8017898:	603b      	str	r3, [r7, #0]

  GPIO_Init(GPIOC, &GPIO_InitStructure);  
 801789a:	463b      	mov	r3, r7
 801789c:	486b      	ldr	r0, [pc, #428]	; (8017a4c <SDRAM_GPIOConfig+0x200>)
 801789e:	4619      	mov	r1, r3
 80178a0:	f7f5 fb1a 	bl	800ced8 <GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource0, GPIO_AF_FMC);
 80178a4:	486a      	ldr	r0, [pc, #424]	; (8017a50 <SDRAM_GPIOConfig+0x204>)
 80178a6:	2100      	movs	r1, #0
 80178a8:	220c      	movs	r2, #12
 80178aa:	f7f5 fc83 	bl	800d1b4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource1, GPIO_AF_FMC);
 80178ae:	4868      	ldr	r0, [pc, #416]	; (8017a50 <SDRAM_GPIOConfig+0x204>)
 80178b0:	2101      	movs	r1, #1
 80178b2:	220c      	movs	r2, #12
 80178b4:	f7f5 fc7e 	bl	800d1b4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource8, GPIO_AF_FMC);
 80178b8:	4865      	ldr	r0, [pc, #404]	; (8017a50 <SDRAM_GPIOConfig+0x204>)
 80178ba:	2108      	movs	r1, #8
 80178bc:	220c      	movs	r2, #12
 80178be:	f7f5 fc79 	bl	800d1b4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource9, GPIO_AF_FMC);
 80178c2:	4863      	ldr	r0, [pc, #396]	; (8017a50 <SDRAM_GPIOConfig+0x204>)
 80178c4:	2109      	movs	r1, #9
 80178c6:	220c      	movs	r2, #12
 80178c8:	f7f5 fc74 	bl	800d1b4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource10, GPIO_AF_FMC);
 80178cc:	4860      	ldr	r0, [pc, #384]	; (8017a50 <SDRAM_GPIOConfig+0x204>)
 80178ce:	210a      	movs	r1, #10
 80178d0:	220c      	movs	r2, #12
 80178d2:	f7f5 fc6f 	bl	800d1b4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource14, GPIO_AF_FMC);
 80178d6:	485e      	ldr	r0, [pc, #376]	; (8017a50 <SDRAM_GPIOConfig+0x204>)
 80178d8:	210e      	movs	r1, #14
 80178da:	220c      	movs	r2, #12
 80178dc:	f7f5 fc6a 	bl	800d1b4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource15, GPIO_AF_FMC);
 80178e0:	485b      	ldr	r0, [pc, #364]	; (8017a50 <SDRAM_GPIOConfig+0x204>)
 80178e2:	210f      	movs	r1, #15
 80178e4:	220c      	movs	r2, #12
 80178e6:	f7f5 fc65 	bl	800d1b4 <GPIO_PinAFConfig>

  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1  | GPIO_Pin_8 |
 80178ea:	f24c 7303 	movw	r3, #50947	; 0xc703
 80178ee:	603b      	str	r3, [r7, #0]
                                GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_14 |
                                GPIO_Pin_15;

  GPIO_Init(GPIOD, &GPIO_InitStructure);
 80178f0:	463b      	mov	r3, r7
 80178f2:	4857      	ldr	r0, [pc, #348]	; (8017a50 <SDRAM_GPIOConfig+0x204>)
 80178f4:	4619      	mov	r1, r3
 80178f6:	f7f5 faef 	bl	800ced8 <GPIO_Init>

  /* GPIOE configuration */
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource0 , GPIO_AF_FMC);
 80178fa:	4856      	ldr	r0, [pc, #344]	; (8017a54 <SDRAM_GPIOConfig+0x208>)
 80178fc:	2100      	movs	r1, #0
 80178fe:	220c      	movs	r2, #12
 8017900:	f7f5 fc58 	bl	800d1b4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource1 , GPIO_AF_FMC);
 8017904:	4853      	ldr	r0, [pc, #332]	; (8017a54 <SDRAM_GPIOConfig+0x208>)
 8017906:	2101      	movs	r1, #1
 8017908:	220c      	movs	r2, #12
 801790a:	f7f5 fc53 	bl	800d1b4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource7 , GPIO_AF_FMC);
 801790e:	4851      	ldr	r0, [pc, #324]	; (8017a54 <SDRAM_GPIOConfig+0x208>)
 8017910:	2107      	movs	r1, #7
 8017912:	220c      	movs	r2, #12
 8017914:	f7f5 fc4e 	bl	800d1b4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource8 , GPIO_AF_FMC);
 8017918:	484e      	ldr	r0, [pc, #312]	; (8017a54 <SDRAM_GPIOConfig+0x208>)
 801791a:	2108      	movs	r1, #8
 801791c:	220c      	movs	r2, #12
 801791e:	f7f5 fc49 	bl	800d1b4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource9 , GPIO_AF_FMC);
 8017922:	484c      	ldr	r0, [pc, #304]	; (8017a54 <SDRAM_GPIOConfig+0x208>)
 8017924:	2109      	movs	r1, #9
 8017926:	220c      	movs	r2, #12
 8017928:	f7f5 fc44 	bl	800d1b4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource10 , GPIO_AF_FMC);
 801792c:	4849      	ldr	r0, [pc, #292]	; (8017a54 <SDRAM_GPIOConfig+0x208>)
 801792e:	210a      	movs	r1, #10
 8017930:	220c      	movs	r2, #12
 8017932:	f7f5 fc3f 	bl	800d1b4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource11 , GPIO_AF_FMC);
 8017936:	4847      	ldr	r0, [pc, #284]	; (8017a54 <SDRAM_GPIOConfig+0x208>)
 8017938:	210b      	movs	r1, #11
 801793a:	220c      	movs	r2, #12
 801793c:	f7f5 fc3a 	bl	800d1b4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource12 , GPIO_AF_FMC);
 8017940:	4844      	ldr	r0, [pc, #272]	; (8017a54 <SDRAM_GPIOConfig+0x208>)
 8017942:	210c      	movs	r1, #12
 8017944:	220c      	movs	r2, #12
 8017946:	f7f5 fc35 	bl	800d1b4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource13 , GPIO_AF_FMC);
 801794a:	4842      	ldr	r0, [pc, #264]	; (8017a54 <SDRAM_GPIOConfig+0x208>)
 801794c:	210d      	movs	r1, #13
 801794e:	220c      	movs	r2, #12
 8017950:	f7f5 fc30 	bl	800d1b4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource14 , GPIO_AF_FMC);
 8017954:	483f      	ldr	r0, [pc, #252]	; (8017a54 <SDRAM_GPIOConfig+0x208>)
 8017956:	210e      	movs	r1, #14
 8017958:	220c      	movs	r2, #12
 801795a:	f7f5 fc2b 	bl	800d1b4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource15 , GPIO_AF_FMC);
 801795e:	483d      	ldr	r0, [pc, #244]	; (8017a54 <SDRAM_GPIOConfig+0x208>)
 8017960:	210f      	movs	r1, #15
 8017962:	220c      	movs	r2, #12
 8017964:	f7f5 fc26 	bl	800d1b4 <GPIO_PinAFConfig>

  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0  | GPIO_Pin_1  | GPIO_Pin_7 |
 8017968:	f64f 7383 	movw	r3, #65411	; 0xff83
 801796c:	603b      	str	r3, [r7, #0]
                                GPIO_Pin_8  | GPIO_Pin_9  | GPIO_Pin_10 |
                                GPIO_Pin_11 | GPIO_Pin_12 | GPIO_Pin_13 |
                                GPIO_Pin_14 | GPIO_Pin_15;

  GPIO_Init(GPIOE, &GPIO_InitStructure);
 801796e:	463b      	mov	r3, r7
 8017970:	4838      	ldr	r0, [pc, #224]	; (8017a54 <SDRAM_GPIOConfig+0x208>)
 8017972:	4619      	mov	r1, r3
 8017974:	f7f5 fab0 	bl	800ced8 <GPIO_Init>

  /* GPIOF configuration */
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource0 , GPIO_AF_FMC);
 8017978:	4837      	ldr	r0, [pc, #220]	; (8017a58 <SDRAM_GPIOConfig+0x20c>)
 801797a:	2100      	movs	r1, #0
 801797c:	220c      	movs	r2, #12
 801797e:	f7f5 fc19 	bl	800d1b4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource1 , GPIO_AF_FMC);
 8017982:	4835      	ldr	r0, [pc, #212]	; (8017a58 <SDRAM_GPIOConfig+0x20c>)
 8017984:	2101      	movs	r1, #1
 8017986:	220c      	movs	r2, #12
 8017988:	f7f5 fc14 	bl	800d1b4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource2 , GPIO_AF_FMC);
 801798c:	4832      	ldr	r0, [pc, #200]	; (8017a58 <SDRAM_GPIOConfig+0x20c>)
 801798e:	2102      	movs	r1, #2
 8017990:	220c      	movs	r2, #12
 8017992:	f7f5 fc0f 	bl	800d1b4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource3 , GPIO_AF_FMC);
 8017996:	4830      	ldr	r0, [pc, #192]	; (8017a58 <SDRAM_GPIOConfig+0x20c>)
 8017998:	2103      	movs	r1, #3
 801799a:	220c      	movs	r2, #12
 801799c:	f7f5 fc0a 	bl	800d1b4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource4 , GPIO_AF_FMC);
 80179a0:	482d      	ldr	r0, [pc, #180]	; (8017a58 <SDRAM_GPIOConfig+0x20c>)
 80179a2:	2104      	movs	r1, #4
 80179a4:	220c      	movs	r2, #12
 80179a6:	f7f5 fc05 	bl	800d1b4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource5 , GPIO_AF_FMC);
 80179aa:	482b      	ldr	r0, [pc, #172]	; (8017a58 <SDRAM_GPIOConfig+0x20c>)
 80179ac:	2105      	movs	r1, #5
 80179ae:	220c      	movs	r2, #12
 80179b0:	f7f5 fc00 	bl	800d1b4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource11 , GPIO_AF_FMC);
 80179b4:	4828      	ldr	r0, [pc, #160]	; (8017a58 <SDRAM_GPIOConfig+0x20c>)
 80179b6:	210b      	movs	r1, #11
 80179b8:	220c      	movs	r2, #12
 80179ba:	f7f5 fbfb 	bl	800d1b4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource12 , GPIO_AF_FMC);
 80179be:	4826      	ldr	r0, [pc, #152]	; (8017a58 <SDRAM_GPIOConfig+0x20c>)
 80179c0:	210c      	movs	r1, #12
 80179c2:	220c      	movs	r2, #12
 80179c4:	f7f5 fbf6 	bl	800d1b4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource13 , GPIO_AF_FMC);
 80179c8:	4823      	ldr	r0, [pc, #140]	; (8017a58 <SDRAM_GPIOConfig+0x20c>)
 80179ca:	210d      	movs	r1, #13
 80179cc:	220c      	movs	r2, #12
 80179ce:	f7f5 fbf1 	bl	800d1b4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource14 , GPIO_AF_FMC);
 80179d2:	4821      	ldr	r0, [pc, #132]	; (8017a58 <SDRAM_GPIOConfig+0x20c>)
 80179d4:	210e      	movs	r1, #14
 80179d6:	220c      	movs	r2, #12
 80179d8:	f7f5 fbec 	bl	800d1b4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource15 , GPIO_AF_FMC);
 80179dc:	481e      	ldr	r0, [pc, #120]	; (8017a58 <SDRAM_GPIOConfig+0x20c>)
 80179de:	210f      	movs	r1, #15
 80179e0:	220c      	movs	r2, #12
 80179e2:	f7f5 fbe7 	bl	800d1b4 <GPIO_PinAFConfig>

  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0  | GPIO_Pin_1 | GPIO_Pin_2 | 
 80179e6:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80179ea:	603b      	str	r3, [r7, #0]
                                GPIO_Pin_3  | GPIO_Pin_4 | GPIO_Pin_5 |
                                GPIO_Pin_11 | GPIO_Pin_12 | GPIO_Pin_13 |
                                GPIO_Pin_14 | GPIO_Pin_15;      

  GPIO_Init(GPIOF, &GPIO_InitStructure);
 80179ec:	463b      	mov	r3, r7
 80179ee:	481a      	ldr	r0, [pc, #104]	; (8017a58 <SDRAM_GPIOConfig+0x20c>)
 80179f0:	4619      	mov	r1, r3
 80179f2:	f7f5 fa71 	bl	800ced8 <GPIO_Init>

  /* GPIOG configuration */
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource0 , GPIO_AF_FMC);
 80179f6:	4819      	ldr	r0, [pc, #100]	; (8017a5c <SDRAM_GPIOConfig+0x210>)
 80179f8:	2100      	movs	r1, #0
 80179fa:	220c      	movs	r2, #12
 80179fc:	f7f5 fbda 	bl	800d1b4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource1 , GPIO_AF_FMC);
 8017a00:	4816      	ldr	r0, [pc, #88]	; (8017a5c <SDRAM_GPIOConfig+0x210>)
 8017a02:	2101      	movs	r1, #1
 8017a04:	220c      	movs	r2, #12
 8017a06:	f7f5 fbd5 	bl	800d1b4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource4 , GPIO_AF_FMC);
 8017a0a:	4814      	ldr	r0, [pc, #80]	; (8017a5c <SDRAM_GPIOConfig+0x210>)
 8017a0c:	2104      	movs	r1, #4
 8017a0e:	220c      	movs	r2, #12
 8017a10:	f7f5 fbd0 	bl	800d1b4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource5 , GPIO_AF_FMC);
 8017a14:	4811      	ldr	r0, [pc, #68]	; (8017a5c <SDRAM_GPIOConfig+0x210>)
 8017a16:	2105      	movs	r1, #5
 8017a18:	220c      	movs	r2, #12
 8017a1a:	f7f5 fbcb 	bl	800d1b4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource8 , GPIO_AF_FMC);
 8017a1e:	480f      	ldr	r0, [pc, #60]	; (8017a5c <SDRAM_GPIOConfig+0x210>)
 8017a20:	2108      	movs	r1, #8
 8017a22:	220c      	movs	r2, #12
 8017a24:	f7f5 fbc6 	bl	800d1b4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource15 , GPIO_AF_FMC);
 8017a28:	480c      	ldr	r0, [pc, #48]	; (8017a5c <SDRAM_GPIOConfig+0x210>)
 8017a2a:	210f      	movs	r1, #15
 8017a2c:	220c      	movs	r2, #12
 8017a2e:	f7f5 fbc1 	bl	800d1b4 <GPIO_PinAFConfig>
  

  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_4 |
 8017a32:	f248 1333 	movw	r3, #33075	; 0x8133
 8017a36:	603b      	str	r3, [r7, #0]
                                GPIO_Pin_5 | GPIO_Pin_8 | GPIO_Pin_15;

  GPIO_Init(GPIOG, &GPIO_InitStructure);    
 8017a38:	463b      	mov	r3, r7
 8017a3a:	4808      	ldr	r0, [pc, #32]	; (8017a5c <SDRAM_GPIOConfig+0x210>)
 8017a3c:	4619      	mov	r1, r3
 8017a3e:	f7f5 fa4b 	bl	800ced8 <GPIO_Init>
}
 8017a42:	3708      	adds	r7, #8
 8017a44:	46bd      	mov	sp, r7
 8017a46:	bd80      	pop	{r7, pc}
 8017a48:	40020400 	.word	0x40020400
 8017a4c:	40020800 	.word	0x40020800
 8017a50:	40020c00 	.word	0x40020c00
 8017a54:	40021000 	.word	0x40021000
 8017a58:	40021400 	.word	0x40021400
 8017a5c:	40021800 	.word	0x40021800

08017a60 <SDRAM_InitSequence>:
  * @brief  Executes the SDRAM memory initialization sequence. 
  * @param  None. 
  * @retval None.
  */
void SDRAM_InitSequence(void)
{
 8017a60:	b580      	push	{r7, lr}
 8017a62:	b086      	sub	sp, #24
 8017a64:	af00      	add	r7, sp, #0
  FMC_SDRAMCommandTypeDef FMC_SDRAMCommandStructure;
  uint32_t tmpr = 0;
 8017a66:	2300      	movs	r3, #0
 8017a68:	617b      	str	r3, [r7, #20]
  
/* Step 3 --------------------------------------------------------------------*/
  /* Configure a clock configuration enable command */
  FMC_SDRAMCommandStructure.FMC_CommandMode = FMC_Command_Mode_CLK_Enabled;
 8017a6a:	2301      	movs	r3, #1
 8017a6c:	607b      	str	r3, [r7, #4]
  FMC_SDRAMCommandStructure.FMC_CommandTarget = FMC_Command_Target_bank2;
 8017a6e:	2308      	movs	r3, #8
 8017a70:	60bb      	str	r3, [r7, #8]
  FMC_SDRAMCommandStructure.FMC_AutoRefreshNumber = 1;
 8017a72:	2301      	movs	r3, #1
 8017a74:	60fb      	str	r3, [r7, #12]
  FMC_SDRAMCommandStructure.FMC_ModeRegisterDefinition = 0;
 8017a76:	2300      	movs	r3, #0
 8017a78:	613b      	str	r3, [r7, #16]
  /* Wait until the SDRAM controller is ready */ 
  while(FMC_GetFlagStatus(FMC_Bank2_SDRAM, FMC_FLAG_Busy) != RESET)
 8017a7a:	bf00      	nop
 8017a7c:	2001      	movs	r0, #1
 8017a7e:	2120      	movs	r1, #32
 8017a80:	f7f5 f866 	bl	800cb50 <FMC_GetFlagStatus>
 8017a84:	4603      	mov	r3, r0
 8017a86:	2b00      	cmp	r3, #0
 8017a88:	d1f8      	bne.n	8017a7c <SDRAM_InitSequence+0x1c>
  {
  }
  /* Send the command */
  FMC_SDRAMCmdConfig(&FMC_SDRAMCommandStructure);  
 8017a8a:	1d3b      	adds	r3, r7, #4
 8017a8c:	4618      	mov	r0, r3
 8017a8e:	f7f4 ff6f 	bl	800c970 <FMC_SDRAMCmdConfig>
  
/* Step 4 --------------------------------------------------------------------*/
  /* Insert 100 ms delay */
  __Delay(10);
 8017a92:	200a      	movs	r0, #10
 8017a94:	f000 f8aa 	bl	8017bec <delay>
    
/* Step 5 --------------------------------------------------------------------*/
  /* Configure a PALL (precharge all) command */ 
  FMC_SDRAMCommandStructure.FMC_CommandMode = FMC_Command_Mode_PALL;
 8017a98:	2302      	movs	r3, #2
 8017a9a:	607b      	str	r3, [r7, #4]
  FMC_SDRAMCommandStructure.FMC_CommandTarget = FMC_Command_Target_bank2;
 8017a9c:	2308      	movs	r3, #8
 8017a9e:	60bb      	str	r3, [r7, #8]
  FMC_SDRAMCommandStructure.FMC_AutoRefreshNumber = 1;
 8017aa0:	2301      	movs	r3, #1
 8017aa2:	60fb      	str	r3, [r7, #12]
  FMC_SDRAMCommandStructure.FMC_ModeRegisterDefinition = 0;
 8017aa4:	2300      	movs	r3, #0
 8017aa6:	613b      	str	r3, [r7, #16]
  /* Wait until the SDRAM controller is ready */ 
  while(FMC_GetFlagStatus(FMC_Bank2_SDRAM, FMC_FLAG_Busy) != RESET)
 8017aa8:	bf00      	nop
 8017aaa:	2001      	movs	r0, #1
 8017aac:	2120      	movs	r1, #32
 8017aae:	f7f5 f84f 	bl	800cb50 <FMC_GetFlagStatus>
 8017ab2:	4603      	mov	r3, r0
 8017ab4:	2b00      	cmp	r3, #0
 8017ab6:	d1f8      	bne.n	8017aaa <SDRAM_InitSequence+0x4a>
  {
  }
  /* Send the command */
  FMC_SDRAMCmdConfig(&FMC_SDRAMCommandStructure);
 8017ab8:	1d3b      	adds	r3, r7, #4
 8017aba:	4618      	mov	r0, r3
 8017abc:	f7f4 ff58 	bl	800c970 <FMC_SDRAMCmdConfig>
  
/* Step 6 --------------------------------------------------------------------*/
  /* Configure a Auto-Refresh command */ 
  FMC_SDRAMCommandStructure.FMC_CommandMode = FMC_Command_Mode_AutoRefresh;
 8017ac0:	2303      	movs	r3, #3
 8017ac2:	607b      	str	r3, [r7, #4]
  FMC_SDRAMCommandStructure.FMC_CommandTarget = FMC_Command_Target_bank2;
 8017ac4:	2308      	movs	r3, #8
 8017ac6:	60bb      	str	r3, [r7, #8]
  FMC_SDRAMCommandStructure.FMC_AutoRefreshNumber = 4;
 8017ac8:	2304      	movs	r3, #4
 8017aca:	60fb      	str	r3, [r7, #12]
  FMC_SDRAMCommandStructure.FMC_ModeRegisterDefinition = 0;
 8017acc:	2300      	movs	r3, #0
 8017ace:	613b      	str	r3, [r7, #16]
  /* Wait until the SDRAM controller is ready */ 
  while(FMC_GetFlagStatus(FMC_Bank2_SDRAM, FMC_FLAG_Busy) != RESET)
 8017ad0:	bf00      	nop
 8017ad2:	2001      	movs	r0, #1
 8017ad4:	2120      	movs	r1, #32
 8017ad6:	f7f5 f83b 	bl	800cb50 <FMC_GetFlagStatus>
 8017ada:	4603      	mov	r3, r0
 8017adc:	2b00      	cmp	r3, #0
 8017ade:	d1f8      	bne.n	8017ad2 <SDRAM_InitSequence+0x72>
  {
  }
  /* Send the  first command */
  FMC_SDRAMCmdConfig(&FMC_SDRAMCommandStructure);
 8017ae0:	1d3b      	adds	r3, r7, #4
 8017ae2:	4618      	mov	r0, r3
 8017ae4:	f7f4 ff44 	bl	800c970 <FMC_SDRAMCmdConfig>
  
  /* Wait until the SDRAM controller is ready */ 
  while(FMC_GetFlagStatus(FMC_Bank2_SDRAM, FMC_FLAG_Busy) != RESET)
 8017ae8:	bf00      	nop
 8017aea:	2001      	movs	r0, #1
 8017aec:	2120      	movs	r1, #32
 8017aee:	f7f5 f82f 	bl	800cb50 <FMC_GetFlagStatus>
 8017af2:	4603      	mov	r3, r0
 8017af4:	2b00      	cmp	r3, #0
 8017af6:	d1f8      	bne.n	8017aea <SDRAM_InitSequence+0x8a>
  {
  }
  /* Send the second command */
  FMC_SDRAMCmdConfig(&FMC_SDRAMCommandStructure);
 8017af8:	1d3b      	adds	r3, r7, #4
 8017afa:	4618      	mov	r0, r3
 8017afc:	f7f4 ff38 	bl	800c970 <FMC_SDRAMCmdConfig>
  
/* Step 7 --------------------------------------------------------------------*/
  /* Program the external memory mode register */
  tmpr = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_2          |
 8017b00:	f240 2331 	movw	r3, #561	; 0x231
 8017b04:	617b      	str	r3, [r7, #20]
                   SDRAM_MODEREG_CAS_LATENCY_3           |
                   SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                   SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  /* Configure a load Mode register command*/ 
  FMC_SDRAMCommandStructure.FMC_CommandMode = FMC_Command_Mode_LoadMode;
 8017b06:	2304      	movs	r3, #4
 8017b08:	607b      	str	r3, [r7, #4]
  FMC_SDRAMCommandStructure.FMC_CommandTarget = FMC_Command_Target_bank2;
 8017b0a:	2308      	movs	r3, #8
 8017b0c:	60bb      	str	r3, [r7, #8]
  FMC_SDRAMCommandStructure.FMC_AutoRefreshNumber = 1;
 8017b0e:	2301      	movs	r3, #1
 8017b10:	60fb      	str	r3, [r7, #12]
  FMC_SDRAMCommandStructure.FMC_ModeRegisterDefinition = tmpr;
 8017b12:	697b      	ldr	r3, [r7, #20]
 8017b14:	613b      	str	r3, [r7, #16]
  /* Wait until the SDRAM controller is ready */ 
  while(FMC_GetFlagStatus(FMC_Bank2_SDRAM, FMC_FLAG_Busy) != RESET)
 8017b16:	bf00      	nop
 8017b18:	2001      	movs	r0, #1
 8017b1a:	2120      	movs	r1, #32
 8017b1c:	f7f5 f818 	bl	800cb50 <FMC_GetFlagStatus>
 8017b20:	4603      	mov	r3, r0
 8017b22:	2b00      	cmp	r3, #0
 8017b24:	d1f8      	bne.n	8017b18 <SDRAM_InitSequence+0xb8>
  {
  }
  /* Send the command */
  FMC_SDRAMCmdConfig(&FMC_SDRAMCommandStructure);
 8017b26:	1d3b      	adds	r3, r7, #4
 8017b28:	4618      	mov	r0, r3
 8017b2a:	f7f4 ff21 	bl	800c970 <FMC_SDRAMCmdConfig>
/* Step 8 --------------------------------------------------------------------*/

  /* Set the refresh rate counter */
  /* (15.62 us x Freq) - 20 */
  /* Set the device refresh counter */
  FMC_SetRefreshCount(1386);
 8017b2e:	f240 506a 	movw	r0, #1386	; 0x56a
 8017b32:	f7f4 ff5b 	bl	800c9ec <FMC_SetRefreshCount>
  /* Wait until the SDRAM controller is ready */ 
  while(FMC_GetFlagStatus(FMC_Bank2_SDRAM, FMC_FLAG_Busy) != RESET)
 8017b36:	bf00      	nop
 8017b38:	2001      	movs	r0, #1
 8017b3a:	2120      	movs	r1, #32
 8017b3c:	f7f5 f808 	bl	800cb50 <FMC_GetFlagStatus>
 8017b40:	4603      	mov	r3, r0
 8017b42:	2b00      	cmp	r3, #0
 8017b44:	d1f8      	bne.n	8017b38 <SDRAM_InitSequence+0xd8>
  {
  }
}
 8017b46:	3718      	adds	r7, #24
 8017b48:	46bd      	mov	sp, r7
 8017b4a:	bd80      	pop	{r7, pc}

08017b4c <SDRAM_WriteBuffer>:
  *         written.
  * @param  uwBufferSize: number of words to write. 
  * @retval None.
  */
void SDRAM_WriteBuffer(uint32_t* pBuffer, uint32_t uwWriteAddress, uint32_t uwBufferSize)
{
 8017b4c:	b580      	push	{r7, lr}
 8017b4e:	b086      	sub	sp, #24
 8017b50:	af00      	add	r7, sp, #0
 8017b52:	60f8      	str	r0, [r7, #12]
 8017b54:	60b9      	str	r1, [r7, #8]
 8017b56:	607a      	str	r2, [r7, #4]
  __IO uint32_t write_pointer = (uint32_t)uwWriteAddress;
 8017b58:	68bb      	ldr	r3, [r7, #8]
 8017b5a:	617b      	str	r3, [r7, #20]

  /* Disable write protection */
  FMC_SDRAMWriteProtectionConfig(FMC_Bank2_SDRAM, DISABLE);
 8017b5c:	2001      	movs	r0, #1
 8017b5e:	2100      	movs	r1, #0
 8017b60:	f7f4 ff68 	bl	800ca34 <FMC_SDRAMWriteProtectionConfig>
  
  /* Wait until the SDRAM controller is ready */ 
  while(FMC_GetFlagStatus(FMC_Bank2_SDRAM, FMC_FLAG_Busy) != RESET)
 8017b64:	bf00      	nop
 8017b66:	2001      	movs	r0, #1
 8017b68:	2120      	movs	r1, #32
 8017b6a:	f7f4 fff1 	bl	800cb50 <FMC_GetFlagStatus>
 8017b6e:	4603      	mov	r3, r0
 8017b70:	2b00      	cmp	r3, #0
 8017b72:	d1f8      	bne.n	8017b66 <SDRAM_WriteBuffer+0x1a>
  {
  }

  /* While there is data to write */
  for (; uwBufferSize != 0; uwBufferSize--) 
 8017b74:	e00e      	b.n	8017b94 <SDRAM_WriteBuffer+0x48>
  {
    /* Transfer data to the memory */
    *(uint32_t *) (SDRAM_BANK_ADDR + write_pointer) = *pBuffer++;
 8017b76:	697b      	ldr	r3, [r7, #20]
 8017b78:	f103 4350 	add.w	r3, r3, #3489660928	; 0xd0000000
 8017b7c:	461a      	mov	r2, r3
 8017b7e:	68fb      	ldr	r3, [r7, #12]
 8017b80:	1d19      	adds	r1, r3, #4
 8017b82:	60f9      	str	r1, [r7, #12]
 8017b84:	681b      	ldr	r3, [r3, #0]
 8017b86:	6013      	str	r3, [r2, #0]

    /* Increment the address*/
    write_pointer += 4;
 8017b88:	697b      	ldr	r3, [r7, #20]
 8017b8a:	3304      	adds	r3, #4
 8017b8c:	617b      	str	r3, [r7, #20]
  while(FMC_GetFlagStatus(FMC_Bank2_SDRAM, FMC_FLAG_Busy) != RESET)
  {
  }

  /* While there is data to write */
  for (; uwBufferSize != 0; uwBufferSize--) 
 8017b8e:	687b      	ldr	r3, [r7, #4]
 8017b90:	3b01      	subs	r3, #1
 8017b92:	607b      	str	r3, [r7, #4]
 8017b94:	687b      	ldr	r3, [r7, #4]
 8017b96:	2b00      	cmp	r3, #0
 8017b98:	d1ed      	bne.n	8017b76 <SDRAM_WriteBuffer+0x2a>

    /* Increment the address*/
    write_pointer += 4;
  }
    
}
 8017b9a:	3718      	adds	r7, #24
 8017b9c:	46bd      	mov	sp, r7
 8017b9e:	bd80      	pop	{r7, pc}

08017ba0 <SDRAM_ReadBuffer>:
  *         read.
  * @param  uwBufferSize: number of words to write. 
  * @retval None.
  */
void SDRAM_ReadBuffer(uint32_t* pBuffer, uint32_t uwReadAddress, uint32_t uwBufferSize)
{
 8017ba0:	b580      	push	{r7, lr}
 8017ba2:	b086      	sub	sp, #24
 8017ba4:	af00      	add	r7, sp, #0
 8017ba6:	60f8      	str	r0, [r7, #12]
 8017ba8:	60b9      	str	r1, [r7, #8]
 8017baa:	607a      	str	r2, [r7, #4]
  __IO uint32_t write_pointer = (uint32_t)uwReadAddress;
 8017bac:	68bb      	ldr	r3, [r7, #8]
 8017bae:	617b      	str	r3, [r7, #20]
  
   
  /* Wait until the SDRAM controller is ready */ 
  while(FMC_GetFlagStatus(FMC_Bank2_SDRAM, FMC_FLAG_Busy) != RESET)
 8017bb0:	bf00      	nop
 8017bb2:	2001      	movs	r0, #1
 8017bb4:	2120      	movs	r1, #32
 8017bb6:	f7f4 ffcb 	bl	800cb50 <FMC_GetFlagStatus>
 8017bba:	4603      	mov	r3, r0
 8017bbc:	2b00      	cmp	r3, #0
 8017bbe:	d1f8      	bne.n	8017bb2 <SDRAM_ReadBuffer+0x12>
  {
  }
  
  /* Read data */
  for(; uwBufferSize != 0x00; uwBufferSize--)
 8017bc0:	e00d      	b.n	8017bde <SDRAM_ReadBuffer+0x3e>
  {
   *pBuffer++ = *(__IO uint32_t *)(SDRAM_BANK_ADDR + write_pointer );
 8017bc2:	68fb      	ldr	r3, [r7, #12]
 8017bc4:	1d1a      	adds	r2, r3, #4
 8017bc6:	60fa      	str	r2, [r7, #12]
 8017bc8:	697a      	ldr	r2, [r7, #20]
 8017bca:	f102 4250 	add.w	r2, r2, #3489660928	; 0xd0000000
 8017bce:	6812      	ldr	r2, [r2, #0]
 8017bd0:	601a      	str	r2, [r3, #0]
    
   /* Increment the address*/
    write_pointer += 4;
 8017bd2:	697b      	ldr	r3, [r7, #20]
 8017bd4:	3304      	adds	r3, #4
 8017bd6:	617b      	str	r3, [r7, #20]
  while(FMC_GetFlagStatus(FMC_Bank2_SDRAM, FMC_FLAG_Busy) != RESET)
  {
  }
  
  /* Read data */
  for(; uwBufferSize != 0x00; uwBufferSize--)
 8017bd8:	687b      	ldr	r3, [r7, #4]
 8017bda:	3b01      	subs	r3, #1
 8017bdc:	607b      	str	r3, [r7, #4]
 8017bde:	687b      	ldr	r3, [r7, #4]
 8017be0:	2b00      	cmp	r3, #0
 8017be2:	d1ee      	bne.n	8017bc2 <SDRAM_ReadBuffer+0x22>
   *pBuffer++ = *(__IO uint32_t *)(SDRAM_BANK_ADDR + write_pointer );
    
   /* Increment the address*/
    write_pointer += 4;
  } 
}
 8017be4:	3718      	adds	r7, #24
 8017be6:	46bd      	mov	sp, r7
 8017be8:	bd80      	pop	{r7, pc}
 8017bea:	bf00      	nop

08017bec <delay>:
  * @brief  Inserts a delay time.
  * @param  nCount: specifies the delay time length.
  * @retval None
  */
static void delay(__IO uint32_t nCount)
{
 8017bec:	b480      	push	{r7}
 8017bee:	b085      	sub	sp, #20
 8017bf0:	af00      	add	r7, sp, #0
 8017bf2:	6078      	str	r0, [r7, #4]
  __IO uint32_t index = 0; 
 8017bf4:	2300      	movs	r3, #0
 8017bf6:	60fb      	str	r3, [r7, #12]
  for(index = (100000 * nCount); index != 0; index--)
 8017bf8:	687b      	ldr	r3, [r7, #4]
 8017bfa:	4a08      	ldr	r2, [pc, #32]	; (8017c1c <delay+0x30>)
 8017bfc:	fb02 f303 	mul.w	r3, r2, r3
 8017c00:	60fb      	str	r3, [r7, #12]
 8017c02:	e002      	b.n	8017c0a <delay+0x1e>
 8017c04:	68fb      	ldr	r3, [r7, #12]
 8017c06:	3b01      	subs	r3, #1
 8017c08:	60fb      	str	r3, [r7, #12]
 8017c0a:	68fb      	ldr	r3, [r7, #12]
 8017c0c:	2b00      	cmp	r3, #0
 8017c0e:	d1f9      	bne.n	8017c04 <delay+0x18>
  {
  }
}
 8017c10:	3714      	adds	r7, #20
 8017c12:	46bd      	mov	sp, r7
 8017c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c18:	4770      	bx	lr
 8017c1a:	bf00      	nop
 8017c1c:	000186a0 	.word	0x000186a0

08017c20 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8017c20:	b580      	push	{r7, lr}
 8017c22:	af00      	add	r7, sp, #0
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8017c24:	4b11      	ldr	r3, [pc, #68]	; (8017c6c <SystemInit+0x4c>)
 8017c26:	4a11      	ldr	r2, [pc, #68]	; (8017c6c <SystemInit+0x4c>)
 8017c28:	6812      	ldr	r2, [r2, #0]
 8017c2a:	f042 0201 	orr.w	r2, r2, #1
 8017c2e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8017c30:	4b0e      	ldr	r3, [pc, #56]	; (8017c6c <SystemInit+0x4c>)
 8017c32:	2200      	movs	r2, #0
 8017c34:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8017c36:	4a0d      	ldr	r2, [pc, #52]	; (8017c6c <SystemInit+0x4c>)
 8017c38:	4b0c      	ldr	r3, [pc, #48]	; (8017c6c <SystemInit+0x4c>)
 8017c3a:	681b      	ldr	r3, [r3, #0]
 8017c3c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8017c40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8017c44:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8017c46:	4b09      	ldr	r3, [pc, #36]	; (8017c6c <SystemInit+0x4c>)
 8017c48:	4a09      	ldr	r2, [pc, #36]	; (8017c70 <SystemInit+0x50>)
 8017c4a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8017c4c:	4b07      	ldr	r3, [pc, #28]	; (8017c6c <SystemInit+0x4c>)
 8017c4e:	4a07      	ldr	r2, [pc, #28]	; (8017c6c <SystemInit+0x4c>)
 8017c50:	6812      	ldr	r2, [r2, #0]
 8017c52:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8017c56:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8017c58:	4b04      	ldr	r3, [pc, #16]	; (8017c6c <SystemInit+0x4c>)
 8017c5a:	2200      	movs	r2, #0
 8017c5c:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSDRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8017c5e:	f000 f887 	bl	8017d70 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8017c62:	4b04      	ldr	r3, [pc, #16]	; (8017c74 <SystemInit+0x54>)
 8017c64:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8017c68:	609a      	str	r2, [r3, #8]
#endif
}
 8017c6a:	bd80      	pop	{r7, pc}
 8017c6c:	40023800 	.word	0x40023800
 8017c70:	24003010 	.word	0x24003010
 8017c74:	e000ed00 	.word	0xe000ed00

08017c78 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8017c78:	b480      	push	{r7}
 8017c7a:	b087      	sub	sp, #28
 8017c7c:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8017c7e:	2300      	movs	r3, #0
 8017c80:	613b      	str	r3, [r7, #16]
 8017c82:	2300      	movs	r3, #0
 8017c84:	617b      	str	r3, [r7, #20]
 8017c86:	2302      	movs	r3, #2
 8017c88:	60fb      	str	r3, [r7, #12]
 8017c8a:	2300      	movs	r3, #0
 8017c8c:	60bb      	str	r3, [r7, #8]
 8017c8e:	2302      	movs	r3, #2
 8017c90:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8017c92:	4b32      	ldr	r3, [pc, #200]	; (8017d5c <SystemCoreClockUpdate+0xe4>)
 8017c94:	689b      	ldr	r3, [r3, #8]
 8017c96:	f003 030c 	and.w	r3, r3, #12
 8017c9a:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8017c9c:	693b      	ldr	r3, [r7, #16]
 8017c9e:	2b04      	cmp	r3, #4
 8017ca0:	d007      	beq.n	8017cb2 <SystemCoreClockUpdate+0x3a>
 8017ca2:	2b08      	cmp	r3, #8
 8017ca4:	d009      	beq.n	8017cba <SystemCoreClockUpdate+0x42>
 8017ca6:	2b00      	cmp	r3, #0
 8017ca8:	d13f      	bne.n	8017d2a <SystemCoreClockUpdate+0xb2>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8017caa:	4b2d      	ldr	r3, [pc, #180]	; (8017d60 <SystemCoreClockUpdate+0xe8>)
 8017cac:	4a2d      	ldr	r2, [pc, #180]	; (8017d64 <SystemCoreClockUpdate+0xec>)
 8017cae:	601a      	str	r2, [r3, #0]
      break;
 8017cb0:	e03f      	b.n	8017d32 <SystemCoreClockUpdate+0xba>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8017cb2:	4b2b      	ldr	r3, [pc, #172]	; (8017d60 <SystemCoreClockUpdate+0xe8>)
 8017cb4:	4a2c      	ldr	r2, [pc, #176]	; (8017d68 <SystemCoreClockUpdate+0xf0>)
 8017cb6:	601a      	str	r2, [r3, #0]
      break;
 8017cb8:	e03b      	b.n	8017d32 <SystemCoreClockUpdate+0xba>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8017cba:	4b28      	ldr	r3, [pc, #160]	; (8017d5c <SystemCoreClockUpdate+0xe4>)
 8017cbc:	685b      	ldr	r3, [r3, #4]
 8017cbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8017cc2:	0d9b      	lsrs	r3, r3, #22
 8017cc4:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8017cc6:	4b25      	ldr	r3, [pc, #148]	; (8017d5c <SystemCoreClockUpdate+0xe4>)
 8017cc8:	685b      	ldr	r3, [r3, #4]
 8017cca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017cce:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8017cd0:	68bb      	ldr	r3, [r7, #8]
 8017cd2:	2b00      	cmp	r3, #0
 8017cd4:	d00d      	beq.n	8017cf2 <SystemCoreClockUpdate+0x7a>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8017cd6:	4a24      	ldr	r2, [pc, #144]	; (8017d68 <SystemCoreClockUpdate+0xf0>)
 8017cd8:	687b      	ldr	r3, [r7, #4]
 8017cda:	fbb2 f2f3 	udiv	r2, r2, r3
 8017cde:	4b1f      	ldr	r3, [pc, #124]	; (8017d5c <SystemCoreClockUpdate+0xe4>)
 8017ce0:	6859      	ldr	r1, [r3, #4]
 8017ce2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8017ce6:	400b      	ands	r3, r1
 8017ce8:	099b      	lsrs	r3, r3, #6
 8017cea:	fb03 f302 	mul.w	r3, r3, r2
 8017cee:	617b      	str	r3, [r7, #20]
 8017cf0:	e00c      	b.n	8017d0c <SystemCoreClockUpdate+0x94>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8017cf2:	4a1c      	ldr	r2, [pc, #112]	; (8017d64 <SystemCoreClockUpdate+0xec>)
 8017cf4:	687b      	ldr	r3, [r7, #4]
 8017cf6:	fbb2 f2f3 	udiv	r2, r2, r3
 8017cfa:	4b18      	ldr	r3, [pc, #96]	; (8017d5c <SystemCoreClockUpdate+0xe4>)
 8017cfc:	6859      	ldr	r1, [r3, #4]
 8017cfe:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8017d02:	400b      	ands	r3, r1
 8017d04:	099b      	lsrs	r3, r3, #6
 8017d06:	fb03 f302 	mul.w	r3, r3, r2
 8017d0a:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8017d0c:	4b13      	ldr	r3, [pc, #76]	; (8017d5c <SystemCoreClockUpdate+0xe4>)
 8017d0e:	685b      	ldr	r3, [r3, #4]
 8017d10:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8017d14:	0c1b      	lsrs	r3, r3, #16
 8017d16:	3301      	adds	r3, #1
 8017d18:	005b      	lsls	r3, r3, #1
 8017d1a:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8017d1c:	697a      	ldr	r2, [r7, #20]
 8017d1e:	68fb      	ldr	r3, [r7, #12]
 8017d20:	fbb2 f2f3 	udiv	r2, r2, r3
 8017d24:	4b0e      	ldr	r3, [pc, #56]	; (8017d60 <SystemCoreClockUpdate+0xe8>)
 8017d26:	601a      	str	r2, [r3, #0]
      break;
 8017d28:	e003      	b.n	8017d32 <SystemCoreClockUpdate+0xba>
    default:
      SystemCoreClock = HSI_VALUE;
 8017d2a:	4b0d      	ldr	r3, [pc, #52]	; (8017d60 <SystemCoreClockUpdate+0xe8>)
 8017d2c:	4a0d      	ldr	r2, [pc, #52]	; (8017d64 <SystemCoreClockUpdate+0xec>)
 8017d2e:	601a      	str	r2, [r3, #0]
      break;
 8017d30:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8017d32:	4b0a      	ldr	r3, [pc, #40]	; (8017d5c <SystemCoreClockUpdate+0xe4>)
 8017d34:	689b      	ldr	r3, [r3, #8]
 8017d36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017d3a:	091b      	lsrs	r3, r3, #4
 8017d3c:	4a0b      	ldr	r2, [pc, #44]	; (8017d6c <SystemCoreClockUpdate+0xf4>)
 8017d3e:	5cd3      	ldrb	r3, [r2, r3]
 8017d40:	b2db      	uxtb	r3, r3
 8017d42:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8017d44:	4b06      	ldr	r3, [pc, #24]	; (8017d60 <SystemCoreClockUpdate+0xe8>)
 8017d46:	681a      	ldr	r2, [r3, #0]
 8017d48:	693b      	ldr	r3, [r7, #16]
 8017d4a:	40da      	lsrs	r2, r3
 8017d4c:	4b04      	ldr	r3, [pc, #16]	; (8017d60 <SystemCoreClockUpdate+0xe8>)
 8017d4e:	601a      	str	r2, [r3, #0]
}
 8017d50:	371c      	adds	r7, #28
 8017d52:	46bd      	mov	sp, r7
 8017d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d58:	4770      	bx	lr
 8017d5a:	bf00      	nop
 8017d5c:	40023800 	.word	0x40023800
 8017d60:	200000bc 	.word	0x200000bc
 8017d64:	00f42400 	.word	0x00f42400
 8017d68:	007a1200 	.word	0x007a1200
 8017d6c:	200000c0 	.word	0x200000c0

08017d70 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8017d70:	b480      	push	{r7}
 8017d72:	b083      	sub	sp, #12
 8017d74:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8017d76:	2300      	movs	r3, #0
 8017d78:	607b      	str	r3, [r7, #4]
 8017d7a:	2300      	movs	r3, #0
 8017d7c:	603b      	str	r3, [r7, #0]
                   (RCC_PLLCFGR_PLLSRC_HSI) | (PLL_Q << 24);

#else /* PLL_SOURCE_HSE_BYPASS or PLL_SOURCE_HSE */

  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8017d7e:	4b42      	ldr	r3, [pc, #264]	; (8017e88 <SetSysClock+0x118>)
 8017d80:	4a41      	ldr	r2, [pc, #260]	; (8017e88 <SetSysClock+0x118>)
 8017d82:	6812      	ldr	r2, [r2, #0]
 8017d84:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8017d88:	601a      	str	r2, [r3, #0]
  RCC->CR |= ((uint32_t)RCC_CR_HSEBYP);
#endif   /* PLL_SOURCE_HSE_BYPASS */
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8017d8a:	4b3f      	ldr	r3, [pc, #252]	; (8017e88 <SetSysClock+0x118>)
 8017d8c:	681b      	ldr	r3, [r3, #0]
 8017d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8017d92:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8017d94:	687b      	ldr	r3, [r7, #4]
 8017d96:	3301      	adds	r3, #1
 8017d98:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8017d9a:	683b      	ldr	r3, [r7, #0]
 8017d9c:	2b00      	cmp	r3, #0
 8017d9e:	d103      	bne.n	8017da8 <SetSysClock+0x38>
 8017da0:	687b      	ldr	r3, [r7, #4]
 8017da2:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8017da6:	d1f0      	bne.n	8017d8a <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8017da8:	4b37      	ldr	r3, [pc, #220]	; (8017e88 <SetSysClock+0x118>)
 8017daa:	681b      	ldr	r3, [r3, #0]
 8017dac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8017db0:	2b00      	cmp	r3, #0
 8017db2:	d002      	beq.n	8017dba <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8017db4:	2301      	movs	r3, #1
 8017db6:	603b      	str	r3, [r7, #0]
 8017db8:	e001      	b.n	8017dbe <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8017dba:	2300      	movs	r3, #0
 8017dbc:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8017dbe:	683b      	ldr	r3, [r7, #0]
 8017dc0:	2b01      	cmp	r3, #1
 8017dc2:	d102      	bne.n	8017dca <SetSysClock+0x5a>
  {
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8017dc4:	4b30      	ldr	r3, [pc, #192]	; (8017e88 <SetSysClock+0x118>)
 8017dc6:	4a31      	ldr	r2, [pc, #196]	; (8017e8c <SetSysClock+0x11c>)
 8017dc8:	605a      	str	r2, [r3, #4]
         configuration. User can add here some code to deal with this error */
  }
#endif /*PLL_SOURCE_HSI*/
  
      /* Select regulator voltage output Scale 1 mode, System frequency up to 180 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8017dca:	4b2f      	ldr	r3, [pc, #188]	; (8017e88 <SetSysClock+0x118>)
 8017dcc:	4a2e      	ldr	r2, [pc, #184]	; (8017e88 <SetSysClock+0x118>)
 8017dce:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8017dd0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8017dd4:	641a      	str	r2, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8017dd6:	4b2e      	ldr	r3, [pc, #184]	; (8017e90 <SetSysClock+0x120>)
 8017dd8:	4a2d      	ldr	r2, [pc, #180]	; (8017e90 <SetSysClock+0x120>)
 8017dda:	6812      	ldr	r2, [r2, #0]
 8017ddc:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8017de0:	601a      	str	r2, [r3, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8017de2:	4b29      	ldr	r3, [pc, #164]	; (8017e88 <SetSysClock+0x118>)
 8017de4:	4a28      	ldr	r2, [pc, #160]	; (8017e88 <SetSysClock+0x118>)
 8017de6:	6892      	ldr	r2, [r2, #8]
 8017de8:	609a      	str	r2, [r3, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8017dea:	4b27      	ldr	r3, [pc, #156]	; (8017e88 <SetSysClock+0x118>)
 8017dec:	4a26      	ldr	r2, [pc, #152]	; (8017e88 <SetSysClock+0x118>)
 8017dee:	6892      	ldr	r2, [r2, #8]
 8017df0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8017df4:	609a      	str	r2, [r3, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8017df6:	4b24      	ldr	r3, [pc, #144]	; (8017e88 <SetSysClock+0x118>)
 8017df8:	4a23      	ldr	r2, [pc, #140]	; (8017e88 <SetSysClock+0x118>)
 8017dfa:	6892      	ldr	r2, [r2, #8]
 8017dfc:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 8017e00:	609a      	str	r2, [r3, #8]

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8017e02:	4b21      	ldr	r3, [pc, #132]	; (8017e88 <SetSysClock+0x118>)
 8017e04:	4a20      	ldr	r2, [pc, #128]	; (8017e88 <SetSysClock+0x118>)
 8017e06:	6812      	ldr	r2, [r2, #0]
 8017e08:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8017e0c:	601a      	str	r2, [r3, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8017e0e:	bf00      	nop
 8017e10:	4b1d      	ldr	r3, [pc, #116]	; (8017e88 <SetSysClock+0x118>)
 8017e12:	681b      	ldr	r3, [r3, #0]
 8017e14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8017e18:	2b00      	cmp	r3, #0
 8017e1a:	d0f9      	beq.n	8017e10 <SetSysClock+0xa0>
    {
    }

    /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
    PWR->CR |= PWR_CR_ODEN;
 8017e1c:	4b1c      	ldr	r3, [pc, #112]	; (8017e90 <SetSysClock+0x120>)
 8017e1e:	4a1c      	ldr	r2, [pc, #112]	; (8017e90 <SetSysClock+0x120>)
 8017e20:	6812      	ldr	r2, [r2, #0]
 8017e22:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8017e26:	601a      	str	r2, [r3, #0]
    while((PWR->CSR & PWR_CSR_ODRDY) == 0)
 8017e28:	bf00      	nop
 8017e2a:	4b19      	ldr	r3, [pc, #100]	; (8017e90 <SetSysClock+0x120>)
 8017e2c:	685b      	ldr	r3, [r3, #4]
 8017e2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8017e32:	2b00      	cmp	r3, #0
 8017e34:	d0f9      	beq.n	8017e2a <SetSysClock+0xba>
    {
    }
    PWR->CR |= PWR_CR_ODSWEN;
 8017e36:	4b16      	ldr	r3, [pc, #88]	; (8017e90 <SetSysClock+0x120>)
 8017e38:	4a15      	ldr	r2, [pc, #84]	; (8017e90 <SetSysClock+0x120>)
 8017e3a:	6812      	ldr	r2, [r2, #0]
 8017e3c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8017e40:	601a      	str	r2, [r3, #0]
    while((PWR->CSR & PWR_CSR_ODSWRDY) == 0)
 8017e42:	bf00      	nop
 8017e44:	4b12      	ldr	r3, [pc, #72]	; (8017e90 <SetSysClock+0x120>)
 8017e46:	685b      	ldr	r3, [r3, #4]
 8017e48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8017e4c:	2b00      	cmp	r3, #0
 8017e4e:	d0f9      	beq.n	8017e44 <SetSysClock+0xd4>
    {
    } 
     
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8017e50:	4b10      	ldr	r3, [pc, #64]	; (8017e94 <SetSysClock+0x124>)
 8017e52:	f240 7205 	movw	r2, #1797	; 0x705
 8017e56:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8017e58:	4b0b      	ldr	r3, [pc, #44]	; (8017e88 <SetSysClock+0x118>)
 8017e5a:	4a0b      	ldr	r2, [pc, #44]	; (8017e88 <SetSysClock+0x118>)
 8017e5c:	6892      	ldr	r2, [r2, #8]
 8017e5e:	f022 0203 	bic.w	r2, r2, #3
 8017e62:	609a      	str	r2, [r3, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8017e64:	4b08      	ldr	r3, [pc, #32]	; (8017e88 <SetSysClock+0x118>)
 8017e66:	4a08      	ldr	r2, [pc, #32]	; (8017e88 <SetSysClock+0x118>)
 8017e68:	6892      	ldr	r2, [r2, #8]
 8017e6a:	f042 0202 	orr.w	r2, r2, #2
 8017e6e:	609a      	str	r2, [r3, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8017e70:	bf00      	nop
 8017e72:	4b05      	ldr	r3, [pc, #20]	; (8017e88 <SetSysClock+0x118>)
 8017e74:	689b      	ldr	r3, [r3, #8]
 8017e76:	f003 030c 	and.w	r3, r3, #12
 8017e7a:	2b08      	cmp	r3, #8
 8017e7c:	d1f9      	bne.n	8017e72 <SetSysClock+0x102>
    {
    }
}
 8017e7e:	370c      	adds	r7, #12
 8017e80:	46bd      	mov	sp, r7
 8017e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e86:	4770      	bx	lr
 8017e88:	40023800 	.word	0x40023800
 8017e8c:	07405a08 	.word	0x07405a08
 8017e90:	40007000 	.word	0x40007000
 8017e94:	40023c00 	.word	0x40023c00

08017e98 <SysTick_Handler>:
	.type	USART2_IRQHandler, %function
	.global USART2_IRQHandler
SysTick_Handler:
USART2_IRQHandler:
	/* disable global interupt */
	cpsid i
 8017e98:	b672      	cpsid	i

	mrs r0, psp
 8017e9a:	f3ef 8009 	mrs	r0, PSP
	stmdb r0!, {r7}
 8017e9e:	f840 7d04 	str.w	r7, [r0, #-4]!

	/* Get ISR number */
	mrs r7, ipsr
 8017ea2:	f3ef 8705 	mrs	r7, IPSR
	neg r7, r7
 8017ea6:	f1c7 0700 	rsb	r7, r7, #0

	/* save user state */
	stmdb r0!, {r4, r5, r6, r7, r8, r9, r10, r11, lr}
 8017eaa:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	/* load kernel state */
	pop {r4, r5, r6, r7, r8, r9, r10, r11, ip, lr}
 8017eae:	e8bd 5ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
	msr psr_nzcvq, ip
 8017eb2:	f38c 8803 	msr	PSR, ip

	bx lr
 8017eb6:	4770      	bx	lr

08017eb8 <SVC_Handler>:

	.type	SVC_Handler, %function
	.global SVC_Handler
SVC_Handler:
	/* save user state */
	mrs r0, psp
 8017eb8:	f3ef 8009 	mrs	r0, PSP
	stmdb r0!, {r7}
 8017ebc:	f840 7d04 	str.w	r7, [r0, #-4]!
	stmdb r0!, {r4, r5, r6, r7, r8, r9, r10, r11, lr}
 8017ec0:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	/* load kernel state */
	pop {r4, r5, r6, r7, r8, r9, r10, r11, ip, lr}
 8017ec4:	e8bd 5ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
	msr psr_nzcvq, ip
 8017ec8:	f38c 8803 	msr	PSR, ip
	
	bx lr
 8017ecc:	4770      	bx	lr

08017ece <activate>:

	.global activate
activate:
	/* save kernel state */
	mrs ip, psr
 8017ece:	f3ef 8c03 	mrs	ip, PSR
	push {r4, r5, r6, r7, r8, r9, r10, r11, ip, lr}
 8017ed2:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
	
	/* load user state */
	ldmia r0!, {r4, r5, r6, r7, r8, r9, r10, r11, lr}
 8017ed6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	ldmia r0!, {r7}
 8017eda:	c880      	ldmia	r0!, {r7}
	
	/* switch to process stack pointer */
	msr psp, r0
 8017edc:	f380 8809 	msr	PSP, r0
	mov r0, #3
 8017ee0:	f04f 0003 	mov.w	r0, #3
	msr control, r0
 8017ee4:	f380 8814 	msr	CONTROL, r0

	/* enable global interupt */
	cpsie i
 8017ee8:	b662      	cpsie	i
	bx lr
 8017eea:	4770      	bx	lr
 8017eec:	0000      	movs	r0, r0
	...

08017ef0 <memcpy>:
    .syntax unified
    .align 4

.global memcpy
memcpy:
	push    {r0}
 8017ef0:	b401      	push	{r0}
	cmp     r2, #4
 8017ef2:	2a04      	cmp	r2, #4
	it      lo
 8017ef4:	bf38      	it	cc
	lslslo  r2, r2, #30         /* Adjust r2 for less_than_4_bytes */
 8017ef6:	ea5f 7282 	movscc.w	r2, r2, lsl #30
	blo     less_than_4_bytes
 8017efa:	f0c0 8031 	bcc.w	8017f60 <less_than_4_bytes>
	
	ands    r3, r1, #3
 8017efe:	f011 0303 	ands.w	r3, r1, #3
	beq     aligned
 8017f02:	f000 800e 	beq.w	8017f22 <aligned>
	
	negs    r3, r3              /* Next aligned offset = (4 - src & 3) & 3 */
 8017f06:	425b      	negs	r3, r3
	lsls    r3, r3, #31
 8017f08:	07db      	lsls	r3, r3, #31
	ittt    cs
 8017f0a:	bf22      	ittt	cs
	ldrhcs  r3, [r1], #2		/* Load if 2 bytes unaligned */
 8017f0c:	f831 3b02 	ldrhcs.w	r3, [r1], #2
	subcs   r2, r2, #2
 8017f10:	3a02      	subcs	r2, #2
	strhcs  r3, [r0], #2		/* Save if 2 bytes unaligned */
 8017f12:	f820 3b02 	strhcs.w	r3, [r0], #2
	ittt    mi
 8017f16:	bf42      	ittt	mi
	ldrbmi  r3, [r1] ,#1		/* Load if 1 byte unaligned */
 8017f18:	f811 3b01 	ldrbmi.w	r3, [r1], #1
	submi   r2, r2, #1
 8017f1c:	3a01      	submi	r2, #1
	strbmi  r3, [r0] ,#1		/* Save if 1 byte unaligned */
 8017f1e:	f800 3b01 	strbmi.w	r3, [r0], #1

08017f22 <aligned>:

aligned:
	push    {r4 - r10}
 8017f22:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
	subs 	r2, #32		 
 8017f26:	3a20      	subs	r2, #32
	blo     less_than_32_bytes
 8017f28:	f0c0 8007 	bcc.w	8017f3a <less_than_32_bytes>

08017f2c <L>:
L:
	ldmia 	r1!, {r3 - r10}
 8017f2c:	e8b1 07f8 	ldmia.w	r1!, {r3, r4, r5, r6, r7, r8, r9, sl}
	subs 	r2, #32		 
 8017f30:	3a20      	subs	r2, #32
	stmia	r0!, {r3 - r10}
 8017f32:	e8a0 07f8 	stmia.w	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}
	bhs 	L
 8017f36:	f4bf aff9 	bcs.w	8017f2c <L>

08017f3a <less_than_32_bytes>:
					
less_than_32_bytes:
	lsls    r2, r2, #28
 8017f3a:	0712      	lsls	r2, r2, #28
	it      cs
 8017f3c:	bf28      	it	cs
	ldmiacs	r1!, {r3 - r6}		/* Load if 16 bytes remained */
 8017f3e:	c978      	ldmiacs	r1!, {r3, r4, r5, r6}
	it      mi
 8017f40:	bf48      	it	mi
	ldmiami r1!, {r7 - r8}		/* Load if 8 bytes remained */
 8017f42:	e8b1 0180 	ldmiami.w	r1!, {r7, r8}
	it      cs
 8017f46:	bf28      	it	cs
	stmiacs	r0!, {r3 - r6}
 8017f48:	c078      	stmiacs	r0!, {r3, r4, r5, r6}
	it      mi
 8017f4a:	bf48      	it	mi
	stmiami r0!, {r7 - r8}
 8017f4c:	e8a0 0180 	stmiami.w	r0!, {r7, r8}
	
	lsls    r2, r2, #2
 8017f50:	0092      	lsls	r2, r2, #2
	itt     cs
 8017f52:	bf24      	itt	cs
	ldrcs   r3, [r1], #4		/* Load if 4 bytes remained */
 8017f54:	f851 3b04 	ldrcs.w	r3, [r1], #4
	strcs   r3, [r0], #4
 8017f58:	f840 3b04 	strcs.w	r3, [r0], #4
	
	pop     {r4 - r10}
 8017f5c:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}

08017f60 <less_than_4_bytes>:
	
less_than_4_bytes:
	it      ne
 8017f60:	bf18      	it	ne
	ldrne   r3, [r1]    		/* Load if ether 2 bytes or 1 byte remained */
 8017f62:	680b      	ldrne	r3, [r1, #0]
	lsls    r2, r2, #1
 8017f64:	0052      	lsls	r2, r2, #1
	itt     cs
 8017f66:	bf24      	itt	cs
	strhcs  r3, [r0],#2			/* Save if 2 bytes remained */
 8017f68:	f820 3b02 	strhcs.w	r3, [r0], #2
	lsrcs   r3, r3, 16
 8017f6c:	0c1b      	lsrcs	r3, r3, #16
	it      mi
 8017f6e:	bf48      	it	mi
	strbmi  r3, [r0],#1			/* Save if 1 byte remained */
 8017f70:	f800 3b01 	strbmi.w	r3, [r0], #1
	
	pop     {r0}				
 8017f74:	bc01      	pop	{r0}
	bx      lr				
 8017f76:	4770      	bx	lr
 8017f78:	f3af 8000 	nop.w
 8017f7c:	f3af 8000 	nop.w

08017f80 <fork>:
	.fpu softvfp
	.thumb

.global fork
fork:
	push {r7}
 8017f80:	b480      	push	{r7}
	mov r7, #0x1
 8017f82:	f04f 0701 	mov.w	r7, #1
	svc 0
 8017f86:	df00      	svc	0
	nop
 8017f88:	bf00      	nop
	pop {r7}
 8017f8a:	bc80      	pop	{r7}
	bx lr
 8017f8c:	4770      	bx	lr

08017f8e <getpid>:
.global getpid
getpid:
	push {r7}
 8017f8e:	b480      	push	{r7}
	mov r7, #0x2
 8017f90:	f04f 0702 	mov.w	r7, #2
	svc 0
 8017f94:	df00      	svc	0
	nop
 8017f96:	bf00      	nop
	pop {r7}
 8017f98:	bc80      	pop	{r7}
	bx lr
 8017f9a:	4770      	bx	lr

08017f9c <write>:
.global write
write:
	push {r7}
 8017f9c:	b480      	push	{r7}
	mov r7, #0x3
 8017f9e:	f04f 0703 	mov.w	r7, #3
	svc 0
 8017fa2:	df00      	svc	0
	nop
 8017fa4:	bf00      	nop
	pop {r7}
 8017fa6:	bc80      	pop	{r7}
	bx lr
 8017fa8:	4770      	bx	lr

08017faa <read>:
.global read
read:
	push {r7}
 8017faa:	b480      	push	{r7}
	mov r7, #0x4
 8017fac:	f04f 0704 	mov.w	r7, #4
	svc 0
 8017fb0:	df00      	svc	0
	nop
 8017fb2:	bf00      	nop
	pop {r7}
 8017fb4:	bc80      	pop	{r7}
	bx lr
 8017fb6:	4770      	bx	lr

08017fb8 <interrupt_wait>:
.global interrupt_wait
interrupt_wait:
	push {r7}
 8017fb8:	b480      	push	{r7}
	mov r7, #0x5
 8017fba:	f04f 0705 	mov.w	r7, #5
	svc 0
 8017fbe:	df00      	svc	0
	nop
 8017fc0:	bf00      	nop
	pop {r7}
 8017fc2:	bc80      	pop	{r7}
	bx lr
 8017fc4:	4770      	bx	lr

08017fc6 <getpriority>:
.global getpriority
getpriority:
	push {r7}
 8017fc6:	b480      	push	{r7}
	mov r7, #0x6
 8017fc8:	f04f 0706 	mov.w	r7, #6
	svc 0
 8017fcc:	df00      	svc	0
	nop
 8017fce:	bf00      	nop
	pop {r7}
 8017fd0:	bc80      	pop	{r7}
	bx lr
 8017fd2:	4770      	bx	lr

08017fd4 <setpriority>:
.global setpriority
setpriority:
	push {r7}
 8017fd4:	b480      	push	{r7}
	mov r7, #0x7
 8017fd6:	f04f 0707 	mov.w	r7, #7
	svc 0
 8017fda:	df00      	svc	0
	nop
 8017fdc:	bf00      	nop
	pop {r7}
 8017fde:	bc80      	pop	{r7}
	bx lr
 8017fe0:	4770      	bx	lr

08017fe2 <mknod>:
.global mknod
mknod:
	push {r7}
 8017fe2:	b480      	push	{r7}
	mov r7, #0x8
 8017fe4:	f04f 0708 	mov.w	r7, #8
	svc 0
 8017fe8:	df00      	svc	0
	nop
 8017fea:	bf00      	nop
	pop {r7}
 8017fec:	bc80      	pop	{r7}
	bx lr
 8017fee:	4770      	bx	lr

08017ff0 <sleep>:
.global sleep
sleep:
	push {r7}
 8017ff0:	b480      	push	{r7}
	mov r7, #0x9
 8017ff2:	f04f 0709 	mov.w	r7, #9
	svc 0
 8017ff6:	df00      	svc	0
	nop
 8017ff8:	bf00      	nop
	pop {r7}
 8017ffa:	bc80      	pop	{r7}
	bx lr
 8017ffc:	4770      	bx	lr

08017ffe <lseek>:
.global lseek
lseek:
	push {r7}
 8017ffe:	b480      	push	{r7}
	mov r7, #0xa
 8018000:	f04f 070a 	mov.w	r7, #10
	svc 0
 8018004:	df00      	svc	0
	nop
 8018006:	bf00      	nop
	pop {r7}
 8018008:	bc80      	pop	{r7}
	bx lr
 801800a:	4770      	bx	lr
 801800c:	0801d0b0 	.word	0x0801d0b0
 8018010:	20000000 	.word	0x20000000
 8018014:	200000d4 	.word	0x200000d4
 8018018:	200000d4 	.word	0x200000d4
 801801c:	20005354 	.word	0x20005354

08018020 <__aeabi_frsub>:
 8018020:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8018024:	e002      	b.n	801802c <__addsf3>
 8018026:	bf00      	nop

08018028 <__aeabi_fsub>:
 8018028:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0801802c <__addsf3>:
 801802c:	0042      	lsls	r2, r0, #1
 801802e:	bf1f      	itttt	ne
 8018030:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8018034:	ea92 0f03 	teqne	r2, r3
 8018038:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 801803c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8018040:	d06a      	beq.n	8018118 <__addsf3+0xec>
 8018042:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8018046:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 801804a:	bfc1      	itttt	gt
 801804c:	18d2      	addgt	r2, r2, r3
 801804e:	4041      	eorgt	r1, r0
 8018050:	4048      	eorgt	r0, r1
 8018052:	4041      	eorgt	r1, r0
 8018054:	bfb8      	it	lt
 8018056:	425b      	neglt	r3, r3
 8018058:	2b19      	cmp	r3, #25
 801805a:	bf88      	it	hi
 801805c:	4770      	bxhi	lr
 801805e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8018062:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8018066:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 801806a:	bf18      	it	ne
 801806c:	4240      	negne	r0, r0
 801806e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8018072:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8018076:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 801807a:	bf18      	it	ne
 801807c:	4249      	negne	r1, r1
 801807e:	ea92 0f03 	teq	r2, r3
 8018082:	d03f      	beq.n	8018104 <__addsf3+0xd8>
 8018084:	f1a2 0201 	sub.w	r2, r2, #1
 8018088:	fa41 fc03 	asr.w	ip, r1, r3
 801808c:	eb10 000c 	adds.w	r0, r0, ip
 8018090:	f1c3 0320 	rsb	r3, r3, #32
 8018094:	fa01 f103 	lsl.w	r1, r1, r3
 8018098:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 801809c:	d502      	bpl.n	80180a4 <__addsf3+0x78>
 801809e:	4249      	negs	r1, r1
 80180a0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80180a4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80180a8:	d313      	bcc.n	80180d2 <__addsf3+0xa6>
 80180aa:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80180ae:	d306      	bcc.n	80180be <__addsf3+0x92>
 80180b0:	0840      	lsrs	r0, r0, #1
 80180b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80180b6:	f102 0201 	add.w	r2, r2, #1
 80180ba:	2afe      	cmp	r2, #254	; 0xfe
 80180bc:	d251      	bcs.n	8018162 <__addsf3+0x136>
 80180be:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80180c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80180c6:	bf08      	it	eq
 80180c8:	f020 0001 	biceq.w	r0, r0, #1
 80180cc:	ea40 0003 	orr.w	r0, r0, r3
 80180d0:	4770      	bx	lr
 80180d2:	0049      	lsls	r1, r1, #1
 80180d4:	eb40 0000 	adc.w	r0, r0, r0
 80180d8:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80180dc:	f1a2 0201 	sub.w	r2, r2, #1
 80180e0:	d1ed      	bne.n	80180be <__addsf3+0x92>
 80180e2:	fab0 fc80 	clz	ip, r0
 80180e6:	f1ac 0c08 	sub.w	ip, ip, #8
 80180ea:	ebb2 020c 	subs.w	r2, r2, ip
 80180ee:	fa00 f00c 	lsl.w	r0, r0, ip
 80180f2:	bfaa      	itet	ge
 80180f4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80180f8:	4252      	neglt	r2, r2
 80180fa:	4318      	orrge	r0, r3
 80180fc:	bfbc      	itt	lt
 80180fe:	40d0      	lsrlt	r0, r2
 8018100:	4318      	orrlt	r0, r3
 8018102:	4770      	bx	lr
 8018104:	f092 0f00 	teq	r2, #0
 8018108:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 801810c:	bf06      	itte	eq
 801810e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8018112:	3201      	addeq	r2, #1
 8018114:	3b01      	subne	r3, #1
 8018116:	e7b5      	b.n	8018084 <__addsf3+0x58>
 8018118:	ea4f 0341 	mov.w	r3, r1, lsl #1
 801811c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8018120:	bf18      	it	ne
 8018122:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8018126:	d021      	beq.n	801816c <__addsf3+0x140>
 8018128:	ea92 0f03 	teq	r2, r3
 801812c:	d004      	beq.n	8018138 <__addsf3+0x10c>
 801812e:	f092 0f00 	teq	r2, #0
 8018132:	bf08      	it	eq
 8018134:	4608      	moveq	r0, r1
 8018136:	4770      	bx	lr
 8018138:	ea90 0f01 	teq	r0, r1
 801813c:	bf1c      	itt	ne
 801813e:	2000      	movne	r0, #0
 8018140:	4770      	bxne	lr
 8018142:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8018146:	d104      	bne.n	8018152 <__addsf3+0x126>
 8018148:	0040      	lsls	r0, r0, #1
 801814a:	bf28      	it	cs
 801814c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8018150:	4770      	bx	lr
 8018152:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8018156:	bf3c      	itt	cc
 8018158:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 801815c:	4770      	bxcc	lr
 801815e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8018162:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8018166:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 801816a:	4770      	bx	lr
 801816c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8018170:	bf16      	itet	ne
 8018172:	4608      	movne	r0, r1
 8018174:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8018178:	4601      	movne	r1, r0
 801817a:	0242      	lsls	r2, r0, #9
 801817c:	bf06      	itte	eq
 801817e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8018182:	ea90 0f01 	teqeq	r0, r1
 8018186:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 801818a:	4770      	bx	lr

0801818c <__aeabi_ui2f>:
 801818c:	f04f 0300 	mov.w	r3, #0
 8018190:	e004      	b.n	801819c <__aeabi_i2f+0x8>
 8018192:	bf00      	nop

08018194 <__aeabi_i2f>:
 8018194:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8018198:	bf48      	it	mi
 801819a:	4240      	negmi	r0, r0
 801819c:	ea5f 0c00 	movs.w	ip, r0
 80181a0:	bf08      	it	eq
 80181a2:	4770      	bxeq	lr
 80181a4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80181a8:	4601      	mov	r1, r0
 80181aa:	f04f 0000 	mov.w	r0, #0
 80181ae:	e01c      	b.n	80181ea <__aeabi_l2f+0x2a>

080181b0 <__aeabi_ul2f>:
 80181b0:	ea50 0201 	orrs.w	r2, r0, r1
 80181b4:	bf08      	it	eq
 80181b6:	4770      	bxeq	lr
 80181b8:	f04f 0300 	mov.w	r3, #0
 80181bc:	e00a      	b.n	80181d4 <__aeabi_l2f+0x14>
 80181be:	bf00      	nop

080181c0 <__aeabi_l2f>:
 80181c0:	ea50 0201 	orrs.w	r2, r0, r1
 80181c4:	bf08      	it	eq
 80181c6:	4770      	bxeq	lr
 80181c8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80181cc:	d502      	bpl.n	80181d4 <__aeabi_l2f+0x14>
 80181ce:	4240      	negs	r0, r0
 80181d0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80181d4:	ea5f 0c01 	movs.w	ip, r1
 80181d8:	bf02      	ittt	eq
 80181da:	4684      	moveq	ip, r0
 80181dc:	4601      	moveq	r1, r0
 80181de:	2000      	moveq	r0, #0
 80181e0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80181e4:	bf08      	it	eq
 80181e6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80181ea:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80181ee:	fabc f28c 	clz	r2, ip
 80181f2:	3a08      	subs	r2, #8
 80181f4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80181f8:	db10      	blt.n	801821c <__aeabi_l2f+0x5c>
 80181fa:	fa01 fc02 	lsl.w	ip, r1, r2
 80181fe:	4463      	add	r3, ip
 8018200:	fa00 fc02 	lsl.w	ip, r0, r2
 8018204:	f1c2 0220 	rsb	r2, r2, #32
 8018208:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 801820c:	fa20 f202 	lsr.w	r2, r0, r2
 8018210:	eb43 0002 	adc.w	r0, r3, r2
 8018214:	bf08      	it	eq
 8018216:	f020 0001 	biceq.w	r0, r0, #1
 801821a:	4770      	bx	lr
 801821c:	f102 0220 	add.w	r2, r2, #32
 8018220:	fa01 fc02 	lsl.w	ip, r1, r2
 8018224:	f1c2 0220 	rsb	r2, r2, #32
 8018228:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 801822c:	fa21 f202 	lsr.w	r2, r1, r2
 8018230:	eb43 0002 	adc.w	r0, r3, r2
 8018234:	bf08      	it	eq
 8018236:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 801823a:	4770      	bx	lr

0801823c <__aeabi_fmul>:
 801823c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8018240:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8018244:	bf1e      	ittt	ne
 8018246:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 801824a:	ea92 0f0c 	teqne	r2, ip
 801824e:	ea93 0f0c 	teqne	r3, ip
 8018252:	d06f      	beq.n	8018334 <__aeabi_fmul+0xf8>
 8018254:	441a      	add	r2, r3
 8018256:	ea80 0c01 	eor.w	ip, r0, r1
 801825a:	0240      	lsls	r0, r0, #9
 801825c:	bf18      	it	ne
 801825e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8018262:	d01e      	beq.n	80182a2 <__aeabi_fmul+0x66>
 8018264:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8018268:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 801826c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8018270:	fba0 3101 	umull	r3, r1, r0, r1
 8018274:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8018278:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 801827c:	bf3e      	ittt	cc
 801827e:	0049      	lslcc	r1, r1, #1
 8018280:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8018284:	005b      	lslcc	r3, r3, #1
 8018286:	ea40 0001 	orr.w	r0, r0, r1
 801828a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 801828e:	2afd      	cmp	r2, #253	; 0xfd
 8018290:	d81d      	bhi.n	80182ce <__aeabi_fmul+0x92>
 8018292:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8018296:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 801829a:	bf08      	it	eq
 801829c:	f020 0001 	biceq.w	r0, r0, #1
 80182a0:	4770      	bx	lr
 80182a2:	f090 0f00 	teq	r0, #0
 80182a6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80182aa:	bf08      	it	eq
 80182ac:	0249      	lsleq	r1, r1, #9
 80182ae:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80182b2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80182b6:	3a7f      	subs	r2, #127	; 0x7f
 80182b8:	bfc2      	ittt	gt
 80182ba:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80182be:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80182c2:	4770      	bxgt	lr
 80182c4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80182c8:	f04f 0300 	mov.w	r3, #0
 80182cc:	3a01      	subs	r2, #1
 80182ce:	dc5d      	bgt.n	801838c <__aeabi_fmul+0x150>
 80182d0:	f112 0f19 	cmn.w	r2, #25
 80182d4:	bfdc      	itt	le
 80182d6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80182da:	4770      	bxle	lr
 80182dc:	f1c2 0200 	rsb	r2, r2, #0
 80182e0:	0041      	lsls	r1, r0, #1
 80182e2:	fa21 f102 	lsr.w	r1, r1, r2
 80182e6:	f1c2 0220 	rsb	r2, r2, #32
 80182ea:	fa00 fc02 	lsl.w	ip, r0, r2
 80182ee:	ea5f 0031 	movs.w	r0, r1, rrx
 80182f2:	f140 0000 	adc.w	r0, r0, #0
 80182f6:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80182fa:	bf08      	it	eq
 80182fc:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8018300:	4770      	bx	lr
 8018302:	f092 0f00 	teq	r2, #0
 8018306:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 801830a:	bf02      	ittt	eq
 801830c:	0040      	lsleq	r0, r0, #1
 801830e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8018312:	3a01      	subeq	r2, #1
 8018314:	d0f9      	beq.n	801830a <__aeabi_fmul+0xce>
 8018316:	ea40 000c 	orr.w	r0, r0, ip
 801831a:	f093 0f00 	teq	r3, #0
 801831e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8018322:	bf02      	ittt	eq
 8018324:	0049      	lsleq	r1, r1, #1
 8018326:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 801832a:	3b01      	subeq	r3, #1
 801832c:	d0f9      	beq.n	8018322 <__aeabi_fmul+0xe6>
 801832e:	ea41 010c 	orr.w	r1, r1, ip
 8018332:	e78f      	b.n	8018254 <__aeabi_fmul+0x18>
 8018334:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8018338:	ea92 0f0c 	teq	r2, ip
 801833c:	bf18      	it	ne
 801833e:	ea93 0f0c 	teqne	r3, ip
 8018342:	d00a      	beq.n	801835a <__aeabi_fmul+0x11e>
 8018344:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8018348:	bf18      	it	ne
 801834a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 801834e:	d1d8      	bne.n	8018302 <__aeabi_fmul+0xc6>
 8018350:	ea80 0001 	eor.w	r0, r0, r1
 8018354:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8018358:	4770      	bx	lr
 801835a:	f090 0f00 	teq	r0, #0
 801835e:	bf17      	itett	ne
 8018360:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8018364:	4608      	moveq	r0, r1
 8018366:	f091 0f00 	teqne	r1, #0
 801836a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 801836e:	d014      	beq.n	801839a <__aeabi_fmul+0x15e>
 8018370:	ea92 0f0c 	teq	r2, ip
 8018374:	d101      	bne.n	801837a <__aeabi_fmul+0x13e>
 8018376:	0242      	lsls	r2, r0, #9
 8018378:	d10f      	bne.n	801839a <__aeabi_fmul+0x15e>
 801837a:	ea93 0f0c 	teq	r3, ip
 801837e:	d103      	bne.n	8018388 <__aeabi_fmul+0x14c>
 8018380:	024b      	lsls	r3, r1, #9
 8018382:	bf18      	it	ne
 8018384:	4608      	movne	r0, r1
 8018386:	d108      	bne.n	801839a <__aeabi_fmul+0x15e>
 8018388:	ea80 0001 	eor.w	r0, r0, r1
 801838c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8018390:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8018394:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8018398:	4770      	bx	lr
 801839a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 801839e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80183a2:	4770      	bx	lr

080183a4 <__aeabi_fdiv>:
 80183a4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80183a8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80183ac:	bf1e      	ittt	ne
 80183ae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80183b2:	ea92 0f0c 	teqne	r2, ip
 80183b6:	ea93 0f0c 	teqne	r3, ip
 80183ba:	d069      	beq.n	8018490 <__aeabi_fdiv+0xec>
 80183bc:	eba2 0203 	sub.w	r2, r2, r3
 80183c0:	ea80 0c01 	eor.w	ip, r0, r1
 80183c4:	0249      	lsls	r1, r1, #9
 80183c6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80183ca:	d037      	beq.n	801843c <__aeabi_fdiv+0x98>
 80183cc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80183d0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80183d4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80183d8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80183dc:	428b      	cmp	r3, r1
 80183de:	bf38      	it	cc
 80183e0:	005b      	lslcc	r3, r3, #1
 80183e2:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80183e6:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80183ea:	428b      	cmp	r3, r1
 80183ec:	bf24      	itt	cs
 80183ee:	1a5b      	subcs	r3, r3, r1
 80183f0:	ea40 000c 	orrcs.w	r0, r0, ip
 80183f4:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80183f8:	bf24      	itt	cs
 80183fa:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80183fe:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8018402:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8018406:	bf24      	itt	cs
 8018408:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 801840c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8018410:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8018414:	bf24      	itt	cs
 8018416:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 801841a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 801841e:	011b      	lsls	r3, r3, #4
 8018420:	bf18      	it	ne
 8018422:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8018426:	d1e0      	bne.n	80183ea <__aeabi_fdiv+0x46>
 8018428:	2afd      	cmp	r2, #253	; 0xfd
 801842a:	f63f af50 	bhi.w	80182ce <__aeabi_fmul+0x92>
 801842e:	428b      	cmp	r3, r1
 8018430:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8018434:	bf08      	it	eq
 8018436:	f020 0001 	biceq.w	r0, r0, #1
 801843a:	4770      	bx	lr
 801843c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8018440:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8018444:	327f      	adds	r2, #127	; 0x7f
 8018446:	bfc2      	ittt	gt
 8018448:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 801844c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8018450:	4770      	bxgt	lr
 8018452:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8018456:	f04f 0300 	mov.w	r3, #0
 801845a:	3a01      	subs	r2, #1
 801845c:	e737      	b.n	80182ce <__aeabi_fmul+0x92>
 801845e:	f092 0f00 	teq	r2, #0
 8018462:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8018466:	bf02      	ittt	eq
 8018468:	0040      	lsleq	r0, r0, #1
 801846a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 801846e:	3a01      	subeq	r2, #1
 8018470:	d0f9      	beq.n	8018466 <__aeabi_fdiv+0xc2>
 8018472:	ea40 000c 	orr.w	r0, r0, ip
 8018476:	f093 0f00 	teq	r3, #0
 801847a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 801847e:	bf02      	ittt	eq
 8018480:	0049      	lsleq	r1, r1, #1
 8018482:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8018486:	3b01      	subeq	r3, #1
 8018488:	d0f9      	beq.n	801847e <__aeabi_fdiv+0xda>
 801848a:	ea41 010c 	orr.w	r1, r1, ip
 801848e:	e795      	b.n	80183bc <__aeabi_fdiv+0x18>
 8018490:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8018494:	ea92 0f0c 	teq	r2, ip
 8018498:	d108      	bne.n	80184ac <__aeabi_fdiv+0x108>
 801849a:	0242      	lsls	r2, r0, #9
 801849c:	f47f af7d 	bne.w	801839a <__aeabi_fmul+0x15e>
 80184a0:	ea93 0f0c 	teq	r3, ip
 80184a4:	f47f af70 	bne.w	8018388 <__aeabi_fmul+0x14c>
 80184a8:	4608      	mov	r0, r1
 80184aa:	e776      	b.n	801839a <__aeabi_fmul+0x15e>
 80184ac:	ea93 0f0c 	teq	r3, ip
 80184b0:	d104      	bne.n	80184bc <__aeabi_fdiv+0x118>
 80184b2:	024b      	lsls	r3, r1, #9
 80184b4:	f43f af4c 	beq.w	8018350 <__aeabi_fmul+0x114>
 80184b8:	4608      	mov	r0, r1
 80184ba:	e76e      	b.n	801839a <__aeabi_fmul+0x15e>
 80184bc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80184c0:	bf18      	it	ne
 80184c2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80184c6:	d1ca      	bne.n	801845e <__aeabi_fdiv+0xba>
 80184c8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80184cc:	f47f af5c 	bne.w	8018388 <__aeabi_fmul+0x14c>
 80184d0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80184d4:	f47f af3c 	bne.w	8018350 <__aeabi_fmul+0x114>
 80184d8:	e75f      	b.n	801839a <__aeabi_fmul+0x15e>
 80184da:	bf00      	nop

080184dc <__aeabi_f2uiz>:
 80184dc:	0042      	lsls	r2, r0, #1
 80184de:	d20e      	bcs.n	80184fe <__aeabi_f2uiz+0x22>
 80184e0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80184e4:	d30b      	bcc.n	80184fe <__aeabi_f2uiz+0x22>
 80184e6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80184ea:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80184ee:	d409      	bmi.n	8018504 <__aeabi_f2uiz+0x28>
 80184f0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80184f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80184f8:	fa23 f002 	lsr.w	r0, r3, r2
 80184fc:	4770      	bx	lr
 80184fe:	f04f 0000 	mov.w	r0, #0
 8018502:	4770      	bx	lr
 8018504:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8018508:	d101      	bne.n	801850e <__aeabi_f2uiz+0x32>
 801850a:	0242      	lsls	r2, r0, #9
 801850c:	d102      	bne.n	8018514 <__aeabi_f2uiz+0x38>
 801850e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018512:	4770      	bx	lr
 8018514:	f04f 0000 	mov.w	r0, #0
 8018518:	4770      	bx	lr
 801851a:	bf00      	nop

0801851c <Reset_Handler>:
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 801851c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 801851e:	f000 b804 	b.w	801852a <LoopCopyDataInit>

08018522 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8018522:	4b0c      	ldr	r3, [pc, #48]	; (8018554 <LoopFillZerobss+0x12>)
  ldr  r3, [r3, r1]
 8018524:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8018526:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8018528:	3104      	adds	r1, #4

0801852a <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 801852a:	480b      	ldr	r0, [pc, #44]	; (8018558 <LoopFillZerobss+0x16>)
  ldr  r3, =_edata
 801852c:	4b0b      	ldr	r3, [pc, #44]	; (801855c <LoopFillZerobss+0x1a>)
  adds  r2, r0, r1
 801852e:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8018530:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8018532:	f4ff aff6 	bcc.w	8018522 <CopyDataInit>
  ldr  r2, =_sbss
 8018536:	4a0a      	ldr	r2, [pc, #40]	; (8018560 <LoopFillZerobss+0x1e>)
  b  LoopFillZerobss
 8018538:	f000 b803 	b.w	8018542 <LoopFillZerobss>

0801853c <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 801853c:	2300      	movs	r3, #0
  str  r3, [r2], #4
 801853e:	f842 3b04 	str.w	r3, [r2], #4

08018542 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8018542:	4b08      	ldr	r3, [pc, #32]	; (8018564 <LoopFillZerobss+0x22>)
  cmp  r2, r3
 8018544:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8018546:	f4ff aff9 	bcc.w	801853c <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 801854a:	f7ff fb69 	bl	8017c20 <SystemInit>
/* Call the application's entry point.*/
  bl  main
 801854e:	f7ea f85f 	bl	8002610 <main>
  bx  lr    
 8018552:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 8018554:	0801d0b0 	.word	0x0801d0b0
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8018558:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 801855c:	200000d4 	.word	0x200000d4
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8018560:	200000d4 	.word	0x200000d4
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8018564:	20005354 	.word	0x20005354

08018568 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8018568:	f7ff bffe 	b.w	8018568 <ADC_IRQHandler>

0801856c <memset>:
 801856c:	b4f0      	push	{r4, r5, r6, r7}
 801856e:	0784      	lsls	r4, r0, #30
 8018570:	d043      	beq.n	80185fa <memset+0x8e>
 8018572:	1e54      	subs	r4, r2, #1
 8018574:	2a00      	cmp	r2, #0
 8018576:	d03e      	beq.n	80185f6 <memset+0x8a>
 8018578:	b2cd      	uxtb	r5, r1
 801857a:	4603      	mov	r3, r0
 801857c:	e003      	b.n	8018586 <memset+0x1a>
 801857e:	1e62      	subs	r2, r4, #1
 8018580:	2c00      	cmp	r4, #0
 8018582:	d038      	beq.n	80185f6 <memset+0x8a>
 8018584:	4614      	mov	r4, r2
 8018586:	f803 5b01 	strb.w	r5, [r3], #1
 801858a:	079a      	lsls	r2, r3, #30
 801858c:	d1f7      	bne.n	801857e <memset+0x12>
 801858e:	2c03      	cmp	r4, #3
 8018590:	d92a      	bls.n	80185e8 <memset+0x7c>
 8018592:	b2cd      	uxtb	r5, r1
 8018594:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8018598:	2c0f      	cmp	r4, #15
 801859a:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 801859e:	d915      	bls.n	80185cc <memset+0x60>
 80185a0:	f1a4 0710 	sub.w	r7, r4, #16
 80185a4:	093f      	lsrs	r7, r7, #4
 80185a6:	f103 0610 	add.w	r6, r3, #16
 80185aa:	eb06 1607 	add.w	r6, r6, r7, lsl #4
 80185ae:	461a      	mov	r2, r3
 80185b0:	6015      	str	r5, [r2, #0]
 80185b2:	6055      	str	r5, [r2, #4]
 80185b4:	6095      	str	r5, [r2, #8]
 80185b6:	60d5      	str	r5, [r2, #12]
 80185b8:	3210      	adds	r2, #16
 80185ba:	42b2      	cmp	r2, r6
 80185bc:	d1f8      	bne.n	80185b0 <memset+0x44>
 80185be:	f004 040f 	and.w	r4, r4, #15
 80185c2:	3701      	adds	r7, #1
 80185c4:	2c03      	cmp	r4, #3
 80185c6:	eb03 1307 	add.w	r3, r3, r7, lsl #4
 80185ca:	d90d      	bls.n	80185e8 <memset+0x7c>
 80185cc:	461e      	mov	r6, r3
 80185ce:	4622      	mov	r2, r4
 80185d0:	3a04      	subs	r2, #4
 80185d2:	2a03      	cmp	r2, #3
 80185d4:	f846 5b04 	str.w	r5, [r6], #4
 80185d8:	d8fa      	bhi.n	80185d0 <memset+0x64>
 80185da:	1f22      	subs	r2, r4, #4
 80185dc:	f022 0203 	bic.w	r2, r2, #3
 80185e0:	3204      	adds	r2, #4
 80185e2:	4413      	add	r3, r2
 80185e4:	f004 0403 	and.w	r4, r4, #3
 80185e8:	b12c      	cbz	r4, 80185f6 <memset+0x8a>
 80185ea:	b2c9      	uxtb	r1, r1
 80185ec:	441c      	add	r4, r3
 80185ee:	f803 1b01 	strb.w	r1, [r3], #1
 80185f2:	42a3      	cmp	r3, r4
 80185f4:	d1fb      	bne.n	80185ee <memset+0x82>
 80185f6:	bcf0      	pop	{r4, r5, r6, r7}
 80185f8:	4770      	bx	lr
 80185fa:	4614      	mov	r4, r2
 80185fc:	4603      	mov	r3, r0
 80185fe:	e7c6      	b.n	801858e <memset+0x22>

08018600 <strcat>:
 8018600:	0783      	lsls	r3, r0, #30
 8018602:	b570      	push	{r4, r5, r6, lr}
 8018604:	4606      	mov	r6, r0
 8018606:	d11f      	bne.n	8018648 <strcat+0x48>
 8018608:	6803      	ldr	r3, [r0, #0]
 801860a:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 801860e:	ea22 0303 	bic.w	r3, r2, r3
 8018612:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 8018616:	bf08      	it	eq
 8018618:	1d03      	addeq	r3, r0, #4
 801861a:	d115      	bne.n	8018648 <strcat+0x48>
 801861c:	4618      	mov	r0, r3
 801861e:	f853 4b04 	ldr.w	r4, [r3], #4
 8018622:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
 8018626:	ea25 0404 	bic.w	r4, r5, r4
 801862a:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
 801862e:	d0f5      	beq.n	801861c <strcat+0x1c>
 8018630:	7803      	ldrb	r3, [r0, #0]
 8018632:	b12b      	cbz	r3, 8018640 <strcat+0x40>
 8018634:	1c43      	adds	r3, r0, #1
 8018636:	4618      	mov	r0, r3
 8018638:	3301      	adds	r3, #1
 801863a:	7804      	ldrb	r4, [r0, #0]
 801863c:	2c00      	cmp	r4, #0
 801863e:	d1fa      	bne.n	8018636 <strcat+0x36>
 8018640:	f000 f804 	bl	801864c <strcpy>
 8018644:	4630      	mov	r0, r6
 8018646:	bd70      	pop	{r4, r5, r6, pc}
 8018648:	4630      	mov	r0, r6
 801864a:	e7f1      	b.n	8018630 <strcat+0x30>

0801864c <strcpy>:
 801864c:	ea80 0201 	eor.w	r2, r0, r1
 8018650:	4684      	mov	ip, r0
 8018652:	f012 0f03 	tst.w	r2, #3
 8018656:	d14f      	bne.n	80186f8 <strcpy+0xac>
 8018658:	f011 0f03 	tst.w	r1, #3
 801865c:	d132      	bne.n	80186c4 <strcpy+0x78>
 801865e:	f84d 4d04 	str.w	r4, [sp, #-4]!
 8018662:	f011 0f04 	tst.w	r1, #4
 8018666:	f851 3b04 	ldr.w	r3, [r1], #4
 801866a:	d00b      	beq.n	8018684 <strcpy+0x38>
 801866c:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 8018670:	439a      	bics	r2, r3
 8018672:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 8018676:	bf04      	itt	eq
 8018678:	f84c 3b04 	streq.w	r3, [ip], #4
 801867c:	f851 3b04 	ldreq.w	r3, [r1], #4
 8018680:	d116      	bne.n	80186b0 <strcpy+0x64>
 8018682:	bf00      	nop
 8018684:	f851 4b04 	ldr.w	r4, [r1], #4
 8018688:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 801868c:	439a      	bics	r2, r3
 801868e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 8018692:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
 8018696:	d10b      	bne.n	80186b0 <strcpy+0x64>
 8018698:	f84c 3b04 	str.w	r3, [ip], #4
 801869c:	43a2      	bics	r2, r4
 801869e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 80186a2:	bf04      	itt	eq
 80186a4:	f851 3b04 	ldreq.w	r3, [r1], #4
 80186a8:	f84c 4b04 	streq.w	r4, [ip], #4
 80186ac:	d0ea      	beq.n	8018684 <strcpy+0x38>
 80186ae:	4623      	mov	r3, r4
 80186b0:	f80c 3b01 	strb.w	r3, [ip], #1
 80186b4:	f013 0fff 	tst.w	r3, #255	; 0xff
 80186b8:	ea4f 2333 	mov.w	r3, r3, ror #8
 80186bc:	d1f8      	bne.n	80186b0 <strcpy+0x64>
 80186be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80186c2:	4770      	bx	lr
 80186c4:	f011 0f01 	tst.w	r1, #1
 80186c8:	d006      	beq.n	80186d8 <strcpy+0x8c>
 80186ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80186ce:	f80c 2b01 	strb.w	r2, [ip], #1
 80186d2:	2a00      	cmp	r2, #0
 80186d4:	bf08      	it	eq
 80186d6:	4770      	bxeq	lr
 80186d8:	f011 0f02 	tst.w	r1, #2
 80186dc:	d0bf      	beq.n	801865e <strcpy+0x12>
 80186de:	f831 2b02 	ldrh.w	r2, [r1], #2
 80186e2:	f012 0fff 	tst.w	r2, #255	; 0xff
 80186e6:	bf16      	itet	ne
 80186e8:	f82c 2b02 	strhne.w	r2, [ip], #2
 80186ec:	f88c 2000 	strbeq.w	r2, [ip]
 80186f0:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
 80186f4:	d1b3      	bne.n	801865e <strcpy+0x12>
 80186f6:	4770      	bx	lr
 80186f8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80186fc:	f80c 2b01 	strb.w	r2, [ip], #1
 8018700:	2a00      	cmp	r2, #0
 8018702:	d1f9      	bne.n	80186f8 <strcpy+0xac>
 8018704:	4770      	bx	lr
 8018706:	bf00      	nop

08018708 <cmd_data>:
 8018708:	6365 6f68 0000 0000 0000 0000 0000 0000     echo............
 8018718:	0000 0000 1f5d 0800 6853 776f 7720 726f     ....]...Show wor
 8018728:	7364 7920 756f 6920 706e 7475 002e 0000     ds you input....
	...
 8018b20:	7865 6f70 7472 0000 0000 0000 0000 0000     export..........
 8018b30:	0000 0000 1bbd 0800 7845 6f70 7472 6520     ........Export e
 8018b40:	766e 7269 6e6f 656d 746e 7620 7261 6169     nvironment varia
 8018b50:	6c62 7365 002e 0000 0000 0000 0000 0000     bles............
	...
 8018f38:	6568 706c 0000 0000 0000 0000 0000 0000     help............
 8018f48:	0000 0000 1e6d 0800 694c 7473 6120 6c6c     ....m...List all
 8018f58:	6320 6d6f 616d 646e 2073 6f79 2075 6163      commands you ca
 8018f68:	206e 7375 2e65 0000 0000 0000 0000 0000     n use...........
	...
 8019350:	6968 7473 726f 0079 0000 0000 0000 0000     history.........
 8019360:	0000 0000 213d 0800 6853 776f 6c20 7461     ....=!..Show lat
 8019370:	7365 2074 6f63 6d6d 6e61 7364 6520 746e     est commands ent
 8019380:	7265 6465 002e 0000 0000 0000 0000 0000     ered............
	...
 8019768:	616d 006e 0000 0000 0000 0000 0000 0000     man.............
 8019778:	0000 0000 202d 0800 614d 756e 6c61 7020     ....- ..Manual p
 8019788:	6761 7265 002e 0000 0000 0000 0000 0000     ager............
	...
 8019b80:	7370 0000 0000 0000 0000 0000 0000 0000     ps..............
 8019b90:	0000 0000 1c91 0800 694c 7473 6120 6c6c     ........List all
 8019ba0:	7420 6568 7020 6f72 6563 7373 7365 002e      the processes..
	...
 8019f98:	7878 0064 0000 0000 0000 0000 0000 0000     xxd.............
 8019fa8:	0000 0000 229d 0800 614d 656b 6120 6820     ....."..Make a h
 8019fb8:	7865 7564 706d 002e 0000 0000 0000 0000     exdump..........
	...
 801a3b0:	642f 7665 742f 7974 2f30 756f 0074 0000     /dev/tty0/out...
 801a3c0:	642f 7665 742f 7974 2f30 6e69 0000 0000     /dev/tty0/in....
 801a3d0:	6548 6c6c 2c6f 5720 726f 646c 0a21 0000     Hello, World!...
 801a3e0:	742f 706d 6d2f 7571 7565 2f65 756f 0074     /tmp/mqueue/out.
 801a3f0:	6548 6c6c 206f 0a31 0000 0000 6548 6c6c     Hello 1.....Hell
 801a400:	206f 0a32 0000 0000 6f47 3a74 0000 0000     o 2.....Got:....
 801a410:	2008 0008 6873 6e65 7767 6e65 7340 6568     . ..shengwen@she
 801a420:	676e 6577 2d6e 5453 334d 3a32 247e 0020     ngwen-STM32:~$ .
 801a430:	203a 6f63 6d6d 6e61 2064 6f6e 2074 6f66     : command not fo
 801a440:	6e75 0064 4950 2044 5453 5441 5355 5020     und.PID STATUS P
 801a450:	4952 524f 5449 0059 3130 3332 3534 3736     RIORITY.01234567
 801a460:	3938 4241 4443 4645 0000 0000 203a 0000     89ABCDEF....: ..
 801a470:	6854 7369 7320 7379 6574 206d 6168 2073     This system has 
 801a480:	6f63 6d6d 6e61 7364 6120 2073 6f66 6c6c     commands as foll
 801a490:	776f 0d0a 0000 0000 6e2d 0000 0020 0000     ow......-n.. ...
 801a4a0:	414e 454d 203a 0000 4544 4353 4952 5450     NAME: ..DESCRIPT
 801a4b0:	4f49 3a4e 0020 0000 3130 3332 3534 3736     ION: ...01234567
 801a4c0:	3938 6261 6463 6665 0000 0000 7878 3a64     89abcdef....xxd:
 801a4d0:	0020 0000 203a 6f4e 7320 6375 2068 6966      ...: No such fi
 801a4e0:	656c 6f20 2072 6964 6572 7463 726f 0d79     le or directory.
 801a4f0:	000a 0000 003a 0000 2020 0000 0a0d 0000     ....:...  ......
 801a500:	642f 7665 722f 6d6f 0030 0000 002f 0000     /dev/rom0.../...
 801a510:	6f72 666d 0073 0000 732f 7379 702f 7461     romfs.../sys/pat
 801a520:	7368 7265 6576 0072 642f 7665 722f 6d6f     hserver./dev/rom
 801a530:	0030 0000 6f72 666d 0073 0000 797a 7778     0...romfs...zyxw
 801a540:	7576 7374 7172 6f70 6d6e 6b6c 696a 6768     vutsrqponmlkjihg
 801a550:	6566 6364 6162 3839 3637 3435 3233 3031     fedcba9876543210
 801a560:	3231 3433 3635 3837 6139 6362 6564 6766     123456789abcdefg
 801a570:	6968 6b6a 6d6c 6f6e 7170 7372 7574 7776     hijklmnopqrstuvw
 801a580:	7978 007a                                   xyz.

0801a584 <GPIO_PIN>:
 801a584:	2000 4000                                   . .@

0801a588 <GPIO_CLK>:
 801a588:	0040 0000 0040 0000                         @...@...

0801a590 <BUTTON_PIN>:
 801a590:	0001 0000                                   ....

0801a594 <BUTTON_CLK>:
 801a594:	0001 0000                                   ....

0801a598 <BUTTON_EXTI_LINE>:
 801a598:	0001 0000                                   ....

0801a59c <BUTTON_PORT_SOURCE>:
 801a59c:	0000 0000                                   ....

0801a5a0 <BUTTON_PIN_SOURCE>:
 801a5a0:	0000 0000                                   ....

0801a5a4 <BUTTON_IRQn>:
 801a5a4:	0006 0000                                   ....

0801a5a8 <ASCII16x24_Table>:
	...
 801a5d8:	0000 0180 0180 0180 0180 0180 0180 0180     ................
 801a5e8:	0180 0180 0180 0180 0180 0180 0000 0000     ................
 801a5f8:	0180 0180 0000 0000 0000 0000 0000 0000     ................
 801a608:	0000 0000 00cc 00cc 00cc 00cc 00cc 00cc     ................
	...
 801a644:	0c60 0c60 0c60 0630 0630 1ffe 1ffe 0630     `.`.`.0.0.....0.
 801a654:	0738 0318 1ffe 1ffe 0318 0318 018c 018c     8...............
 801a664:	018c 0000 0000 0080 03e0 0ff8 0e9c 1c8c     ................
 801a674:	188c 008c 0098 01f8 07e0 0e80 1c80 188c     ................
 801a684:	188c 189c 0cb8 0ff0 03e0 0080 0080 0000     ................
	...
 801a69c:	0000 180e 0c1b 0c11 0611 0611 0311 0311     ................
 801a6ac:	019b 018e 38c0 6cc0 4460 4460 4430 4430     .....8.l`D`D0D0D
 801a6bc:	4418 6c18 380c 0000 0000 0000 0000 01e0     .D.l.8..........
 801a6cc:	03f0 0738 0618 0618 0330 01f0 00f0 00f8     ..8.....0.......
 801a6dc:	319c 330e 1e06 1c06 1c06 3f06 73fc 21f0     .1.3.......?.s.!
	...
 801a6fc:	000c 000c 000c 000c 000c 000c 0000 0000     ................
	...
 801a728:	0000 0200 0300 0180 00c0 00c0 0060 0060     ............`.`.
 801a738:	0030 0030 0030 0030 0030 0030 0030 0030     0.0.0.0.0.0.0.0.
 801a748:	0060 0060 00c0 00c0 0180 0300 0200 0000     `.`.............
 801a758:	0000 0020 0060 00c0 0180 0180 0300 0300     .. .`...........
 801a768:	0600 0600 0600 0600 0600 0600 0600 0600     ................
 801a778:	0300 0300 0180 0180 00c0 0060 0020 0000     ..........`. ...
	...
 801a794:	00c0 00c0 06d8 07f8 01e0 0330 0738 0000     ..........0.8...
	...
 801a7c4:	0180 0180 0180 0180 0180 3ffc 3ffc 0180     ...........?.?..
 801a7d4:	0180 0180 0180 0180 0000 0000 0000 0000     ................
	...
 801a808:	0000 0180 0180 0100 0100 0080 0000 0000     ................
	...
 801a830:	07e0 07e0 0000 0000 0000 0000 0000 0000     ................
	...
 801a868:	0000 00c0 00c0 0000 0000 0000 0000 0000     ................
 801a878:	0000 0c00 0c00 0600 0600 0600 0300 0300     ................
 801a888:	0300 0380 0180 0180 0180 00c0 00c0 00c0     ................
 801a898:	0060 0060 0000 0000 0000 0000 0000 0000     `.`.............
 801a8a8:	0000 03e0 07f0 0e38 0c18 180c 180c 180c     ......8.........
 801a8b8:	180c 180c 180c 180c 180c 180c 0c18 0e38     ..............8.
 801a8c8:	07f0 03e0 0000 0000 0000 0000 0000 0000     ................
 801a8d8:	0000 0100 0180 01c0 01f0 0198 0188 0180     ................
 801a8e8:	0180 0180 0180 0180 0180 0180 0180 0180     ................
 801a8f8:	0180 0180 0000 0000 0000 0000 0000 0000     ................
 801a908:	0000 03e0 0ff8 0c18 180c 180c 1800 1800     ................
 801a918:	0c00 0600 0300 0180 00c0 0060 0030 0018     ..........`.0...
 801a928:	1ffc 1ffc 0000 0000 0000 0000 0000 0000     ................
 801a938:	0000 01e0 07f8 0e18 0c0c 0c0c 0c00 0600     ................
 801a948:	03c0 07c0 0c00 1800 1800 180c 180c 0c18     ................
 801a958:	07f8 03e0 0000 0000 0000 0000 0000 0000     ................
 801a968:	0000 0c00 0e00 0f00 0f00 0d80 0cc0 0c60     ..............`.
 801a978:	0c60 0c30 0c18 0c0c 3ffc 3ffc 0c00 0c00     `.0......?.?....
 801a988:	0c00 0c00 0000 0000 0000 0000 0000 0000     ................
 801a998:	0000 0ff8 0ff8 0018 0018 000c 03ec 07fc     ................
 801a9a8:	0e1c 1c00 1800 1800 1800 180c 0c1c 0e18     ................
 801a9b8:	07f8 03e0 0000 0000 0000 0000 0000 0000     ................
 801a9c8:	0000 07c0 0ff0 1c38 1818 0018 000c 03cc     ......8.........
 801a9d8:	0fec 0e3c 1c1c 180c 180c 180c 1c18 0e38     ..<...........8.
 801a9e8:	07f0 03e0 0000 0000 0000 0000 0000 0000     ................
 801a9f8:	0000 1ffc 1ffc 0c00 0600 0600 0300 0380     ................
 801aa08:	0180 01c0 00c0 00e0 0060 0060 0070 0030     ........`.`.p.0.
 801aa18:	0030 0030 0000 0000 0000 0000 0000 0000     0.0.............
 801aa28:	0000 03e0 07f0 0e38 0c18 0c18 0c18 0638     ......8.......8.
 801aa38:	07f0 07f0 0c18 180c 180c 180c 180c 0c38     ..............8.
 801aa48:	0ff8 03e0 0000 0000 0000 0000 0000 0000     ................
 801aa58:	0000 03e0 07f0 0e38 0c1c 180c 180c 180c     ......8.........
 801aa68:	1c1c 1e38 1bf8 19e0 1800 0c00 0c00 0e1c     ..8.............
 801aa78:	07f8 01f0 0000 0000 0000 0000 0000 0000     ................
	...
 801aa94:	0180 0180 0000 0000 0000 0000 0000 0000     ................
 801aaa4:	0000 0000 0180 0180 0000 0000 0000 0000     ................
	...
 801aac4:	0180 0180 0000 0000 0000 0000 0000 0000     ................
 801aad4:	0000 0000 0180 0180 0100 0100 0080 0000     ................
	...
 801aaf8:	1000 1c00 0f80 03e0 00f8 0018 00f8 03e0     ................
 801ab08:	0f80 1c00 1000 0000 0000 0000 0000 0000     ................
	...
 801ab28:	1ff8 0000 0000 0000 1ff8 0000 0000 0000     ................
	...
 801ab58:	0008 0038 01f0 07c0 1f00 1800 1f00 07c0     ..8.............
 801ab68:	01f0 0038 0008 0000 0000 0000 0000 0000     ..8.............
 801ab78:	0000 03e0 0ff8 0c18 180c 180c 1800 0c00     ................
 801ab88:	0600 0300 0180 00c0 00c0 00c0 0000 0000     ................
 801ab98:	00c0 00c0 0000 0000 0000 0000 0000 0000     ................
 801aba8:	0000 0000 07e0 1818 2004 29c2 4a22 4411     ......... .)"J.D
 801abb8:	4409 4409 4409 2209 1311 0ce2 4002 2004     .D.D.D.".....@. 
 801abc8:	1818 07e0 0000 0000 0000 0000 0000 0000     ................
 801abd8:	0000 0380 0380 06c0 06c0 06c0 0c60 0c60     ............`.`.
 801abe8:	1830 1830 1830 3ff8 3ff8 701c 600c 600c     0.0.0..?.?.p.`.`
 801abf8:	c006 c006 0000 0000 0000 0000 0000 0000     ................
 801ac08:	0000 03fc 0ffc 0c0c 180c 180c 180c 0c0c     ................
 801ac18:	07fc 0ffc 180c 300c 300c 300c 300c 180c     .......0.0.0.0..
 801ac28:	1ffc 07fc 0000 0000 0000 0000 0000 0000     ................
 801ac38:	0000 07c0 1ff0 3838 301c 700c 6006 0006     ......88.0.p.`..
 801ac48:	0006 0006 0006 0006 0006 6006 700c 301c     ...........`.p.0
 801ac58:	1ff0 07e0 0000 0000 0000 0000 0000 0000     ................
 801ac68:	0000 03fe 0ffe 0e06 1806 1806 3006 3006     .............0.0
 801ac78:	3006 3006 3006 3006 3006 1806 1806 0e06     .0.0.0.0.0......
 801ac88:	0ffe 03fe 0000 0000 0000 0000 0000 0000     ................
 801ac98:	0000 3ffc 3ffc 000c 000c 000c 000c 000c     ...?.?..........
 801aca8:	1ffc 1ffc 000c 000c 000c 000c 000c 000c     ................
 801acb8:	3ffc 3ffc 0000 0000 0000 0000 0000 0000     .?.?............
 801acc8:	0000 3ff8 3ff8 0018 0018 0018 0018 0018     ...?.?..........
 801acd8:	1ff8 1ff8 0018 0018 0018 0018 0018 0018     ................
 801ace8:	0018 0018 0000 0000 0000 0000 0000 0000     ................
 801acf8:	0000 0fe0 3ff8 783c 600e e006 c007 0003     .....?<x.`......
 801ad08:	0003 fe03 fe03 c003 c007 c006 c00e f03c     ..............<.
 801ad18:	3ff8 0fe0 0000 0000 0000 0000 0000 0000     .?..............
 801ad28:	0000 300c 300c 300c 300c 300c 300c 300c     ...0.0.0.0.0.0.0
 801ad38:	3ffc 3ffc 300c 300c 300c 300c 300c 300c     .?.?.0.0.0.0.0.0
 801ad48:	300c 300c 0000 0000 0000 0000 0000 0000     .0.0............
 801ad58:	0000 0180 0180 0180 0180 0180 0180 0180     ................
 801ad68:	0180 0180 0180 0180 0180 0180 0180 0180     ................
 801ad78:	0180 0180 0000 0000 0000 0000 0000 0000     ................
 801ad88:	0000 0600 0600 0600 0600 0600 0600 0600     ................
 801ad98:	0600 0600 0600 0600 0600 0618 0618 0738     ..............8.
 801ada8:	03f0 01e0 0000 0000 0000 0000 0000 0000     ................
 801adb8:	0000 3006 1806 0c06 0606 0306 0186 00c6     ...0............
 801adc8:	0066 0076 00de 018e 0306 0606 0c06 1806     f.v.............
 801add8:	3006 6006 0000 0000 0000 0000 0000 0000     .0.`............
 801ade8:	0000 0018 0018 0018 0018 0018 0018 0018     ................
 801adf8:	0018 0018 0018 0018 0018 0018 0018 0018     ................
 801ae08:	1ff8 1ff8 0000 0000 0000 0000 0000 0000     ................
 801ae18:	0000 e00e f01e f01e f01e d836 d836 d836     ..........6.6.6.
 801ae28:	d836 cc66 cc66 cc66 c6c6 c6c6 c6c6 c6c6     6.f.f.f.........
 801ae38:	c386 c386 0000 0000 0000 0000 0000 0000     ................
 801ae48:	0000 300c 301c 303c 303c 306c 306c 30cc     ...0.0<0<0l0l0.0
 801ae58:	30cc 318c 330c 330c 360c 360c 3c0c 3c0c     .0.1.3.3.6.6.<.<
 801ae68:	380c 300c 0000 0000 0000 0000 0000 0000     .8.0............
 801ae78:	0000 07e0 1ff8 381c 700e 6006 c003 c003     .......8.p.`....
 801ae88:	c003 c003 c003 c003 c003 6006 700e 381c     ...........`.p.8
 801ae98:	1ff8 07e0 0000 0000 0000 0000 0000 0000     ................
 801aea8:	0000 0ffc 1ffc 380c 300c 300c 300c 300c     .......8.0.0.0.0
 801aeb8:	180c 1ffc 07fc 000c 000c 000c 000c 000c     ................
 801aec8:	000c 000c 0000 0000 0000 0000 0000 0000     ................
 801aed8:	0000 07e0 1ff8 381c 700e 6006 e003 c003     .......8.p.`....
 801aee8:	c003 c003 c003 c003 e007 6306 3f0e 3c1c     ...........c.?.<
 801aef8:	3ff8 f7e0 c000 0000 0000 0000 0000 0000     .?..............
 801af08:	0000 0ffe 1ffe 3806 3006 3006 3006 3806     .......8.0.0.0.8
 801af18:	1ffe 07fe 0306 0606 0c06 1806 1806 3006     ...............0
 801af28:	3006 6006 0000 0000 0000 0000 0000 0000     .0.`............
 801af38:	0000 03e0 0ff8 0c1c 180c 180c 000c 001c     ................
 801af48:	03f8 0fe0 1e00 3800 3006 3006 300e 1c1c     .......8.0.0.0..
 801af58:	0ff8 07e0 0000 0000 0000 0000 0000 0000     ................
 801af68:	0000 7ffe 7ffe 0180 0180 0180 0180 0180     ................
 801af78:	0180 0180 0180 0180 0180 0180 0180 0180     ................
 801af88:	0180 0180 0000 0000 0000 0000 0000 0000     ................
 801af98:	0000 300c 300c 300c 300c 300c 300c 300c     ...0.0.0.0.0.0.0
 801afa8:	300c 300c 300c 300c 300c 300c 300c 1818     .0.0.0.0.0.0.0..
 801afb8:	1ff8 07e0 0000 0000 0000 0000 0000 0000     ................
 801afc8:	0000 6003 3006 3006 3006 180c 180c 180c     ...`.0.0.0......
 801afd8:	0c18 0c18 0e38 0630 0630 0770 0360 0360     ....8.0.0.p.`.`.
 801afe8:	01c0 01c0 0000 0000 0000 0000 0000 0000     ................
 801aff8:	0000 6003 61c3 61c3 61c3 3366 3366 3366     ...`.a.a.af3f3f3
 801b008:	3366 3366 3366 1b6c 1b6c 1b6c 1a2c 1e3c     f3f3f3l.l.l.,.<.
 801b018:	0e38 0e38 0000 0000 0000 0000 0000 0000     8.8.............
 801b028:	0000 e00f 700c 3018 1830 0c70 0e60 07c0     .....p.00.p.`...
 801b038:	0380 0380 03c0 06e0 0c70 1c30 1818 300c     ........p.0....0
 801b048:	600e e007 0000 0000 0000 0000 0000 0000     .`..............
 801b058:	0000 c003 6006 300c 381c 1838 0c30 0660     .....`.0.88.0.`.
 801b068:	07e0 03c0 0180 0180 0180 0180 0180 0180     ................
 801b078:	0180 0180 0000 0000 0000 0000 0000 0000     ................
 801b088:	0000 7ffc 7ffc 6000 3000 1800 0c00 0600     .......`.0......
 801b098:	0300 0180 00c0 0060 0030 0018 000c 0006     ......`.0.......
 801b0a8:	7ffe 7ffe 0000 0000 0000 0000 0000 0000     ................
 801b0b8:	0000 03e0 03e0 0060 0060 0060 0060 0060     ......`.`.`.`.`.
 801b0c8:	0060 0060 0060 0060 0060 0060 0060 0060     `.`.`.`.`.`.`.`.
 801b0d8:	0060 0060 0060 0060 0060 03e0 03e0 0000     `.`.`.`.`.......
 801b0e8:	0000 0030 0030 0060 0060 0060 00c0 00c0     ..0.0.`.`.`.....
 801b0f8:	00c0 01c0 0180 0180 0180 0300 0300 0300     ................
 801b108:	0600 0600 0000 0000 0000 0000 0000 0000     ................
 801b118:	0000 03e0 03e0 0300 0300 0300 0300 0300     ................
 801b128:	0300 0300 0300 0300 0300 0300 0300 0300     ................
 801b138:	0300 0300 0300 0300 0300 03e0 03e0 0000     ................
 801b148:	0000 0000 01c0 01c0 0360 0360 0360 0630     ........`.`.`.0.
 801b158:	0630 0c18 0c18 0000 0000 0000 0000 0000     0...............
	...
 801b198:	0000 ffff ffff 0000 0000 0000 0000 0000     ................
 801b1a8:	0000 000c 000c 000c 000c 000c 000c 0000     ................
	...
 801b1e4:	03f0 07f8 0c1c 0c0c 0f00 0ff0 0cf8 0c0c     ................
 801b1f4:	0c0c 0f1c 0ff8 18f0 0000 0000 0000 0000     ................
 801b204:	0000 0000 0000 0018 0018 0018 0018 0018     ................
 801b214:	03d8 0ff8 0c38 1818 1818 1818 1818 1818     ....8...........
 801b224:	1818 0c38 0ff8 03d8 0000 0000 0000 0000     ..8.............
	...
 801b244:	03c0 07f0 0e30 0c18 0018 0018 0018 0018     ....0...........
 801b254:	0c18 0e30 07f0 03c0 0000 0000 0000 0000     ..0.............
 801b264:	0000 0000 0000 1800 1800 1800 1800 1800     ................
 801b274:	1bc0 1ff0 1c30 1818 1818 1818 1818 1818     ....0...........
 801b284:	1818 1c30 1ff0 1bc0 0000 0000 0000 0000     ..0.............
	...
 801b2a4:	03c0 0ff0 0c30 1818 1ff8 1ff8 0018 0018     ....0...........
 801b2b4:	1838 1c30 0ff0 07c0 0000 0000 0000 0000     8.0.............
 801b2c4:	0000 0000 0000 0f80 0fc0 00c0 00c0 00c0     ................
 801b2d4:	07f0 07f0 00c0 00c0 00c0 00c0 00c0 00c0     ................
 801b2e4:	00c0 00c0 00c0 00c0 0000 0000 0000 0000     ................
	...
 801b304:	0de0 0ff8 0e18 0c0c 0c0c 0c0c 0c0c 0c0c     ................
 801b314:	0c0c 0e18 0ff8 0de0 0c00 0c0c 061c 07f8     ................
 801b324:	01f0 0000 0000 0018 0018 0018 0018 0018     ................
 801b334:	07d8 0ff8 1c38 1818 1818 1818 1818 1818     ....8...........
 801b344:	1818 1818 1818 1818 0000 0000 0000 0000     ................
 801b354:	0000 0000 0000 00c0 00c0 0000 0000 0000     ................
 801b364:	00c0 00c0 00c0 00c0 00c0 00c0 00c0 00c0     ................
 801b374:	00c0 00c0 00c0 00c0 0000 0000 0000 0000     ................
 801b384:	0000 0000 0000 00c0 00c0 0000 0000 0000     ................
 801b394:	00c0 00c0 00c0 00c0 00c0 00c0 00c0 00c0     ................
 801b3a4:	00c0 00c0 00c0 00c0 00c0 00c0 00c0 00f8     ................
 801b3b4:	0078 0000 0000 000c 000c 000c 000c 000c     x...............
 801b3c4:	0c0c 060c 030c 018c 00cc 006c 00fc 019c     ..........l.....
 801b3d4:	038c 030c 060c 0c0c 0000 0000 0000 0000     ................
 801b3e4:	0000 0000 0000 00c0 00c0 00c0 00c0 00c0     ................
 801b3f4:	00c0 00c0 00c0 00c0 00c0 00c0 00c0 00c0     ................
 801b404:	00c0 00c0 00c0 00c0 0000 0000 0000 0000     ................
	...
 801b424:	3c7c 7eff e3c7 c183 c183 c183 c183 c183     |<.~............
 801b434:	c183 c183 c183 c183 0000 0000 0000 0000     ................
	...
 801b454:	0798 0ff8 1c38 1818 1818 1818 1818 1818     ....8...........
 801b464:	1818 1818 1818 1818 0000 0000 0000 0000     ................
	...
 801b484:	03c0 0ff0 0c30 1818 1818 1818 1818 1818     ....0...........
 801b494:	1818 0c30 0ff0 03c0 0000 0000 0000 0000     ..0.............
	...
 801b4b4:	03d8 0ff8 0c38 1818 1818 1818 1818 1818     ....8...........
 801b4c4:	1818 0c38 0ff8 03d8 0018 0018 0018 0018     ..8.............
 801b4d4:	0018 0000 0000 0000 0000 0000 0000 0000     ................
 801b4e4:	1bc0 1ff0 1c30 1818 1818 1818 1818 1818     ....0...........
 801b4f4:	1818 1c30 1ff0 1bc0 1800 1800 1800 1800     ..0.............
 801b504:	1800 0000 0000 0000 0000 0000 0000 0000     ................
 801b514:	07b0 03f0 0070 0030 0030 0030 0030 0030     ....p.0.0.0.0.0.
 801b524:	0030 0030 0030 0030 0000 0000 0000 0000     0.0.0.0.........
	...
 801b544:	03e0 03f0 0e38 0c18 0038 03f0 07c0 0c00     ....8...8.......
 801b554:	0c18 0e38 07f0 03e0 0000 0000 0000 0000     ..8.............
	...
 801b56c:	0080 00c0 00c0 00c0 07f0 07f0 00c0 00c0     ................
 801b57c:	00c0 00c0 00c0 00c0 00c0 00c0 07c0 0780     ................
	...
 801b5a4:	1818 1818 1818 1818 1818 1818 1818 1818     ................
 801b5b4:	1818 1c38 1ff0 19e0 0000 0000 0000 0000     ..8.............
	...
 801b5d4:	180c 0c18 0c18 0c18 0630 0630 0630 0360     ........0.0.0.`.
 801b5e4:	0360 0360 01c0 01c0 0000 0000 0000 0000     `.`.............
	...
 801b604:	41c1 41c1 61c3 6363 6363 6363 3636 3636     .A.A.acccccc6666
 801b614:	3636 1c1c 1c1c 1c1c 0000 0000 0000 0000     66..............
	...
 801b634:	381c 1c38 0c30 0660 0360 0360 0360 0360     .88.0.`.`.`.`.`.
 801b644:	0660 0c30 1c38 381c 0000 0000 0000 0000     `.0.8..8........
	...
 801b664:	3018 1830 1830 1870 0c60 0c60 0ce0 06c0     .00.0.p.`.`.....
 801b674:	06c0 0380 0380 0380 0180 0180 01c0 00f0     ................
 801b684:	0070 0000 0000 0000 0000 0000 0000 0000     p...............
 801b694:	1ffc 1ffc 0c00 0600 0300 0180 00c0 0060     ..............`.
 801b6a4:	0030 0018 1ffc 1ffc 0000 0000 0000 0000     0...............
 801b6b4:	0000 0000 0000 0300 0180 00c0 00c0 00c0     ................
 801b6c4:	00c0 00c0 00c0 0060 0060 0030 0060 0040     ......`.`.0.`.@.
 801b6d4:	00c0 00c0 00c0 00c0 00c0 00c0 0180 0300     ................
 801b6e4:	0000 0000 0000 0180 0180 0180 0180 0180     ................
 801b6f4:	0180 0180 0180 0180 0180 0180 0180 0180     ................
 801b704:	0180 0180 0180 0180 0180 0180 0180 0180     ................
 801b714:	0180 0000 0000 0060 00c0 01c0 0180 0180     ......`.........
 801b724:	0180 0180 0180 0300 0300 0600 0300 0100     ................
 801b734:	0180 0180 0180 0180 0180 0180 00c0 0060     ..............`.
	...
 801b758:	10f0 1ff8 0f08 0000 0000 0000 0000 0000     ................
	...

0801b778 <ASCII12x12_Table>:
	...
 801b790:	0000 2000 2000 2000 2000 2000 2000 2000     ... . . . . . . 
 801b7a0:	0000 2000 0000 0000 0000 5000 5000 5000     ... .......P.P.P
	...
 801b7c0:	0000 0900 0900 1200 7f00 1200 7f00 1200     ................
 801b7d0:	2400 2400 0000 0000 1000 3800 5400 5000     .$.$.......8.T.P
 801b7e0:	5000 3800 1400 5400 5400 3800 1000 0000     .P.8...T.T.8....
 801b7f0:	0000 3080 4900 4900 4a00 32c0 0520 0920     ...0.I.I.J.2 . .
 801b800:	0920 10c0 0000 0000 0000 0c00 1200 1200      ...............
 801b810:	1400 1800 2500 2300 2300 1d80 0000 0000     .....%.#.#......
 801b820:	0000 4000 4000 4000 0000 0000 0000 0000     ...@.@.@........
	...
 801b838:	0000 0800 1000 1000 2000 2000 2000 2000     ......... . . . 
 801b848:	2000 2000 1000 1000 0000 4000 2000 2000     . . .......@. . 
 801b858:	1000 1000 1000 1000 1000 1000 2000 2000     ............. . 
 801b868:	0000 2000 7000 2000 5000 0000 0000 0000     ... .p. .P......
	...
 801b884:	0000 0800 0800 7f00 0800 0800 0000 0000     ................
	...
 801b8a8:	0000 2000 2000 4000 0000 0000 0000 0000     ... . .@........
 801b8b8:	0000 0000 7000 0000 0000 0000 0000 0000     .....p..........
	...
 801b8d8:	0000 2000 0000 0000 0000 1000 1000 1000     ... ............
 801b8e8:	2000 2000 2000 2000 4000 4000 0000 0000     . . . . .@.@....
 801b8f8:	0000 1000 2800 4400 4400 4400 4400 4400     .....(.D.D.D.D.D
 801b908:	2800 1000 0000 0000 0000 1000 3000 5000     .(...........0.P
 801b918:	1000 1000 1000 1000 1000 1000 0000 0000     ................
 801b928:	0000 3000 4800 4400 0400 0800 1000 2000     ...0.H.D....... 
 801b938:	4000 7c00 0000 0000 0000 3000 4800 0400     .@.|.......0.H..
 801b948:	0800 1000 0800 4400 4800 3000 0000 0000     .......D.H.0....
 801b958:	0000 0800 1800 1800 2800 2800 4800 7c00     .........(.(.H.|
 801b968:	0800 0800 0000 0000 0000 3c00 2000 4000     ...........<. .@
 801b978:	7000 4800 0400 4400 4800 3000 0000 0000     .p.H...D.H.0....
 801b988:	0000 1800 2400 4000 5000 6800 4400 4400     .....$.@.P.h.D.D
 801b998:	2800 1000 0000 0000 0000 7c00 0400 0800     .(.........|....
 801b9a8:	1000 1000 1000 2000 2000 2000 0000 0000     ....... . . ....
 801b9b8:	0000 1000 2800 4400 2800 1000 2800 4400     .....(.D.(...(.D
 801b9c8:	2800 1000 0000 0000 0000 1000 2800 4400     .(...........(.D
 801b9d8:	4400 2c00 1400 0400 4800 3000 0000 0000     .D.,.....H.0....
 801b9e8:	0000 0000 0000 2000 0000 0000 0000 0000     ....... ........
 801b9f8:	0000 2000 0000 0000 0000 0000 0000 2000     ... ........... 
	...
 801ba10:	0000 2000 2000 4000 0000 0000 0400 0800     ... . .@........
 801ba20:	3000 4000 3000 0800 0400 0000 0000 0000     .0.@.0..........
 801ba30:	0000 0000 0000 7c00 0000 0000 7c00 0000     .......|.....|..
	...
 801ba4c:	4000 2000 1800 0400 1800 2000 4000 0000     .@. ....... .@..
 801ba5c:	0000 0000 0000 3800 6400 4400 0400 0800     .......8.d.D....
 801ba6c:	1000 1000 0000 1000 0000 0000 0000 0f80     ................
 801ba7c:	1040 2ea0 51a0 5120 5120 5120 5320 4dc0     @....Q Q Q Q S.M
 801ba8c:	2020 1040 0000 0800 1400 1400 1400 2200       @............"
 801ba9c:	3e00 2200 4100 4100 0000 0000 0000 3c00     .>.".A.A.......<
 801baac:	2200 2200 2200 3c00 2200 2200 2200 3c00     .".".".<.".".".<
 801babc:	0000 0000 0000 0e00 1100 2100 2000 2000     ...........!. . 
 801bacc:	2000 2100 1100 0e00 0000 0000 0000 3c00     . .!...........<
 801badc:	2200 2100 2100 2100 2100 2100 2200 3c00     .".!.!.!.!.!.".<
 801baec:	0000 0000 0000 3e00 2000 2000 2000 3e00     .......>. . . .>
 801bafc:	2000 2000 2000 3e00 0000 0000 0000 3e00     . . . .>.......>
 801bb0c:	2000 2000 2000 3c00 2000 2000 2000 2000     . . . .<. . . . 
 801bb1c:	0000 0000 0000 0e00 1100 2100 2000 2700     ...........!. .'
 801bb2c:	2100 2100 1100 0e00 0000 0000 0000 2100     .!.!...........!
 801bb3c:	2100 2100 2100 3f00 2100 2100 2100 2100     .!.!.!.?.!.!.!.!
 801bb4c:	0000 0000 0000 2000 2000 2000 2000 2000     ....... . . . . 
 801bb5c:	2000 2000 2000 2000 0000 0000 0000 0800     . . . . ........
 801bb6c:	0800 0800 0800 0800 0800 4800 4800 3000     ...........H.H.0
 801bb7c:	0000 0000 0000 2200 2400 2800 2800 3800     .......".$.(.(.8
 801bb8c:	2800 2400 2400 2200 0000 0000 0000 2000     .(.$.$."....... 
 801bb9c:	2000 2000 2000 2000 2000 2000 2000 3e00     . . . . . . . .>
 801bbac:	0000 0000 0000 2080 3180 3180 3180 2a80     ....... .1.1.1.*
 801bbbc:	2a80 2a80 2a80 2480 0000 0000 0000 2100     .*.*.*.$.......!
 801bbcc:	3100 3100 2900 2900 2500 2300 2300 2100     .1.1.).).%.#.#.!
 801bbdc:	0000 0000 0000 0c00 1200 2100 2100 2100     ...........!.!.!
 801bbec:	2100 2100 1200 0c00 0000 0000 0000 3c00     .!.!...........<
 801bbfc:	2200 2200 2200 3c00 2000 2000 2000 2000     .".".".<. . . . 
 801bc0c:	0000 0000 0000 0c00 1200 2100 2100 2100     ...........!.!.!
 801bc1c:	2100 2100 1600 0d00 0100 0000 0000 3e00     .!.!...........>
 801bc2c:	2100 2100 2100 3e00 2400 2200 2100 2080     .!.!.!.>.$.".!. 
 801bc3c:	0000 0000 0000 1c00 2200 2200 2000 1c00     .........".". ..
 801bc4c:	0200 2200 2200 1c00 0000 0000 0000 3e00     ...".".........>
 801bc5c:	0800 0800 0800 0800 0800 0800 0800 0800     ................
 801bc6c:	0000 0000 0000 2100 2100 2100 2100 2100     .......!.!.!.!.!
 801bc7c:	2100 2100 1200 0c00 0000 0000 0000 4100     .!.!...........A
 801bc8c:	4100 2200 2200 2200 1400 1400 1400 0800     .A."."."........
 801bc9c:	0000 0000 0000 4440 4a40 2a40 2a80 2a80     ......@D@J@*.*.*
 801bcac:	2a80 2a80 2a80 1100 0000 0000 0000 4100     .*.*.*.........A
 801bcbc:	2200 1400 1400 0800 1400 1400 2200 4100     ."...........".A
 801bccc:	0000 0000 0000 4100 2200 2200 1400 0800     .......A."."....
 801bcdc:	0800 0800 0800 0800 0000 0000 0000 7e00     ...............~
 801bcec:	0200 0400 0800 1000 1000 2000 4000 7e00     ........... .@.~
 801bcfc:	0000 0000 0000 3000 2000 2000 2000 2000     .......0. . . . 
 801bd0c:	2000 2000 2000 2000 2000 2000 0000 4000     . . . . . . ...@
 801bd1c:	4000 2000 2000 2000 2000 2000 1000 1000     .@. . . . . ....
 801bd2c:	0000 0000 0000 6000 2000 2000 2000 2000     .......`. . . . 
 801bd3c:	2000 2000 2000 2000 2000 2000 0000 1000     . . . . . . ....
 801bd4c:	2800 2800 2800 4400 0000 0000 0000 0000     .(.(.(.D........
	...
 801bd74:	0000 7e00 4000 2000 0000 0000 0000 0000     ...~.@. ........
	...
 801bd94:	0000 3800 4400 0400 3c00 4400 4400 3c00     ...8.D...<.D.D.<
 801bda4:	0000 0000 0000 4000 4000 5800 6400 4400     .......@.@.X.d.D
 801bdb4:	4400 4400 6400 5800 0000 0000 0000 0000     .D.D.d.X........
 801bdc4:	0000 3000 4800 4000 4000 4000 4800 3000     ...0.H.@.@.@.H.0
 801bdd4:	0000 0000 0000 0400 0400 3400 4c00 4400     ...........4.L.D
 801bde4:	4400 4400 4c00 3400 0000 0000 0000 0000     .D.D.L.4........
 801bdf4:	0000 3800 4400 4400 7c00 4000 4400 3800     ...8.D.D.|.@.D.8
 801be04:	0000 0000 0000 6000 4000 e000 4000 4000     .......`.@...@.@
 801be14:	4000 4000 4000 4000 0000 0000 0000 0000     .@.@.@.@........
 801be24:	0000 3400 4c00 4400 4400 4400 4c00 3400     ...4.L.D.D.D.L.4
 801be34:	0400 4400 0000 4000 4000 5800 6400 4400     ...D...@.@.X.d.D
 801be44:	4400 4400 4400 4400 0000 0000 0000 4000     .D.D.D.D.......@
 801be54:	0000 4000 4000 4000 4000 4000 4000 4000     ...@.@.@.@.@.@.@
 801be64:	0000 0000 0000 4000 0000 4000 4000 4000     .......@...@.@.@
 801be74:	4000 4000 4000 4000 4000 4000 0000 4000     .@.@.@.@.@.@...@
 801be84:	4000 4800 5000 6000 5000 5000 4800 4800     .@.H.P.`.P.P.H.H
 801be94:	0000 0000 0000 4000 4000 4000 4000 4000     .......@.@.@.@.@
 801bea4:	4000 4000 4000 4000 0000 0000 0000 0000     .@.@.@.@........
 801beb4:	0000 5200 6d00 4900 4900 4900 4900 4900     ...R.m.I.I.I.I.I
	...
 801becc:	0000 5800 6400 4400 4400 4400 4400 4400     ...X.d.D.D.D.D.D
	...
 801bee4:	0000 3800 4400 4400 4400 4400 4400 3800     ...8.D.D.D.D.D.8
	...
 801befc:	0000 5800 6400 4400 4400 4400 6400 5800     ...X.d.D.D.D.d.X
 801bf0c:	4000 4000 0000 0000 0000 3400 4c00 4400     .@.@.......4.L.D
 801bf1c:	4400 4400 4c00 3400 0400 0400 0000 0000     .D.D.L.4........
 801bf2c:	0000 5000 6000 4000 4000 4000 4000 4000     ...P.`.@.@.@.@.@
	...
 801bf44:	0000 3000 4800 4000 3000 0800 4800 3000     ...0.H.@.0...H.0
 801bf54:	0000 0000 0000 4000 4000 e000 4000 4000     .......@.@...@.@
 801bf64:	4000 4000 4000 6000 0000 0000 0000 0000     .@.@.@.`........
 801bf74:	0000 4400 4400 4400 4400 4400 4c00 3400     ...D.D.D.D.D.L.4
	...
 801bf8c:	0000 4400 4400 2800 2800 2800 2800 1000     ...D.D.(.(.(.(..
	...
 801bfa4:	0000 4900 4900 5500 5500 5500 5500 2200     ...I.I.U.U.U.U."
	...
 801bfbc:	0000 4400 2800 2800 1000 2800 2800 4400     ...D.(.(...(.(.D
	...
 801bfd4:	0000 4400 4400 2800 2800 2800 1000 1000     ...D.D.(.(.(....
 801bfe4:	1000 1000 0000 0000 0000 7800 0800 1000     ...........x....
 801bff4:	2000 2000 4000 7800 0000 0000 0000 1000     . . .@.x........
 801c004:	2000 2000 2000 2000 4000 2000 2000 2000     . . . . .@. . . 
 801c014:	2000 2000 0000 2000 2000 2000 2000 2000     . . ... . . . . 
 801c024:	2000 2000 2000 2000 2000 2000 0000 4000     . . . . . . ...@
 801c034:	2000 2000 2000 2000 1000 2000 2000 2000     . . . . ... . . 
 801c044:	2000 2000 0000 0000 0000 0000 7400 5800     . . .........t.X
	...
 801c064:	7000 5000 5000 5000 5000 5000 5000 7000     .p.P.P.P.P.P.P.p
 801c074:	0000 0000                                   ....

0801c078 <ASCII8x12_Table>:
	...
 801c094:	0000 0010 0010 0010 0010 0010 0010 0000     ................
 801c0a4:	0010 0000 0000 0000 0000 0028 0028 0028     ..........(.(.(.
	...
 801c0c4:	0000 0014 0014 003e 0014 0028 007c 0028     ......>...(.|.(.
 801c0d4:	0028 0000 0000 0000 0010 0038 0054 0050     (.........8.T.P.
 801c0e4:	0038 0014 0014 0054 0038 0010 0000 0000     8.....T.8.......
 801c0f4:	0000 0044 00a8 00a8 0050 0014 001a 002a     ..D.....P.....*.
 801c104:	0024 0000 0000 0000 0000 0020 0050 0050     $......... .P.P.
 801c114:	0020 00e8 0098 0098 0060 0000 0000 0000      .......`.......
 801c124:	0000 0080 0080 0080 0000 0000 0000 0000     ................
	...
 801c13c:	0000 0040 0080 0080 0080 0080 0080 0080     ..@.............
 801c14c:	0080 0080 0000 0000 0000 0080 0040 0040     ............@.@.
 801c15c:	0040 0040 0040 0040 0040 0040 0000 0000     @.@.@.@.@.@.....
 801c16c:	0000 0040 00e0 0040 00a0 0000 0000 0000     ..@...@.........
	...
 801c188:	0000 0020 0020 00f8 0020 0020 0000 0000     .. . ... . .....
	...
 801c1ac:	0040 0040 0000 0000 0000 0000 0000 0000     @.@.............
 801c1bc:	0000 0000 00c0 0000 0000 0000 0000 0000     ................
	...
 801c1dc:	0040 0000 0000 0000 0000 0020 0020 0020     @......... . . .
 801c1ec:	0040 0040 0080 0080 0080 0000 0000 0000     @.@.............
 801c1fc:	0000 0060 0090 0090 0090 0090 0090 0090     ..`.............
 801c20c:	0060 0000 0000 0000 0000 0020 0060 00a0     `......... .`...
 801c21c:	0020 0020 0020 0020 0020 0000 0000 0000      . . . . .......
 801c22c:	0000 0060 0090 0010 0010 0020 0040 0080     ..`....... .@...
 801c23c:	00f0 0000 0000 0000 0000 0060 0090 0010     ..........`.....
 801c24c:	0060 0010 0010 0090 0060 0000 0000 0000     `.......`.......
 801c25c:	0000 0010 0030 0050 0050 0090 00f8 0010     ....0.P.P.......
 801c26c:	0010 0000 0000 0000 0000 0070 0040 0080     ..........p.@...
 801c27c:	00e0 0010 0010 0090 0060 0000 0000 0000     ........`.......
 801c28c:	0000 0060 0090 0080 00a0 00d0 0090 0090     ..`.............
 801c29c:	0060 0000 0000 0000 0000 00f0 0010 0020     `............. .
 801c2ac:	0020 0020 0040 0040 0040 0000 0000 0000      . .@.@.@.......
 801c2bc:	0000 0060 0090 0090 0060 0090 0090 0090     ..`.....`.......
 801c2cc:	0060 0000 0000 0000 0000 0060 0090 0090     `.........`.....
 801c2dc:	00b0 0050 0010 0090 0060 0000 0000 0000     ..P.....`.......
 801c2ec:	0000 0000 0000 0040 0000 0000 0000 0000     ......@.........
 801c2fc:	0040 0000 0000 0000 0000 0000 0000 0040     @.............@.
	...
 801c314:	0040 0040 0000 0000 0000 0000 0000 0010     @.@.............
 801c324:	0060 0080 0060 0010 0000 0000 0000 0000     `...`...........
	...
 801c33c:	00f0 0000 00f0 0000 0000 0000 0000 0000     ................
 801c34c:	0000 0000 0000 0080 0060 0010 0060 0080     ........`...`...
	...
 801c364:	0000 0060 0090 0010 0020 0040 0040 0000     ..`..... .@.@...
 801c374:	0040 0000 0000 0000 0000 001c 0022 005b     @...........".[.
 801c384:	00a5 00a5 00a5 00a5 009e 0041 0000 0000     ..........A.....
 801c394:	0000 0020 0050 0050 0050 0050 0070 0088     .. .P.P.P.P.p...
 801c3a4:	0088 0000 0000 0000 0000 00f0 0088 0088     ................
 801c3b4:	00f0 0088 0088 0088 00f0 0000 0000 0000     ................
 801c3c4:	0000 0038 0044 0084 0080 0080 0084 0044     ..8.D.........D.
 801c3d4:	0038 0000 0000 0000 0000 00e0 0090 0088     8...............
 801c3e4:	0088 0088 0088 0090 00e0 0000 0000 0000     ................
 801c3f4:	0000 00f8 0080 0080 00f8 0080 0080 0080     ................
 801c404:	00f8 0000 0000 0000 0000 0078 0040 0040     ..........x.@.@.
 801c414:	0070 0040 0040 0040 0040 0000 0000 0000     p.@.@.@.@.......
 801c424:	0000 0038 0044 0084 0080 009c 0084 0044     ..8.D.........D.
 801c434:	0038 0000 0000 0000 0000 0088 0088 0088     8...............
 801c444:	00f8 0088 0088 0088 0088 0000 0000 0000     ................
 801c454:	0000 0080 0080 0080 0080 0080 0080 0080     ................
 801c464:	0080 0000 0000 0000 0000 0010 0010 0010     ................
 801c474:	0010 0010 0090 0090 0060 0000 0000 0000     ........`.......
 801c484:	0000 0088 0090 00a0 00e0 00a0 0090 0090     ................
 801c494:	0088 0000 0000 0000 0000 0080 0080 0080     ................
 801c4a4:	0080 0080 0080 0080 00f0 0000 0000 0000     ................
 801c4b4:	0000 0082 00c6 00c6 00aa 00aa 00aa 00aa     ................
 801c4c4:	0092 0000 0000 0000 0000 0084 00c4 00a4     ................
 801c4d4:	00a4 0094 0094 008c 0084 0000 0000 0000     ................
 801c4e4:	0000 0030 0048 0084 0084 0084 0084 0048     ..0.H.........H.
 801c4f4:	0030 0000 0000 0000 0000 00f0 0088 0088     0...............
 801c504:	0088 00f0 0080 0080 0080 0000 0000 0000     ................
 801c514:	0000 0030 0048 0084 0084 0084 0084 0058     ..0.H.........X.
 801c524:	0034 0004 0000 0000 0000 0078 0044 0044     4.........x.D.D.
 801c534:	0078 0050 0048 0044 0042 0000 0000 0000     x.P.H.D.B.......
 801c544:	0000 0070 0088 0080 0070 0008 0088 0088     ..p.....p.......
 801c554:	0070 0000 0000 0000 0000 00f8 0020 0020     p........... . .
 801c564:	0020 0020 0020 0020 0020 0000 0000 0000      . . . . .......
 801c574:	0000 0084 0084 0084 0084 0084 0084 0048     ..............H.
 801c584:	0030 0000 0000 0000 0000 0088 0088 0050     0.............P.
 801c594:	0050 0050 0050 0050 0020 0000 0000 0000     P.P.P.P. .......
 801c5a4:	0000 0092 00aa 00aa 00aa 00aa 00aa 00aa     ................
 801c5b4:	0044 0000 0000 0000 0000 0084 0048 0048     D...........H.H.
 801c5c4:	0030 0030 0048 0048 0084 0000 0000 0000     0.0.H.H.........
 801c5d4:	0000 0088 0050 0050 0020 0020 0020 0020     ....P.P. . . . .
 801c5e4:	0020 0000 0000 0000 0000 00f8 0008 0010      ...............
 801c5f4:	0020 0020 0040 0080 00f8 0000 0000 0000      . .@...........
 801c604:	0000 00c0 0080 0080 0080 0080 0080 0080     ................
 801c614:	0080 0080 0000 0000 0000 0080 0080 0040     ..............@.
 801c624:	0040 0040 0040 0020 0020 0000 0000 0000     @.@.@. . .......
 801c634:	0000 00c0 0040 0040 0040 0040 0040 0040     ....@.@.@.@.@.@.
 801c644:	0040 0040 0000 0000 0000 0040 00a0 00a0     @.@.......@.....
 801c654:	00a0 0000 0000 0000 0000 0000 0000 0000     ................
	...
 801c674:	0000 00f8 0000 0000 0000 0080 0040 0000     ............@...
	...
 801c698:	0000 00e0 0010 0070 0090 0090 0070 0000     ......p.....p...
 801c6a8:	0000 0000 0000 0080 0080 00a0 00d0 0090     ................
 801c6b8:	0090 00d0 00a0 0000 0000 0000 0000 0000     ................
 801c6c8:	0000 0060 0090 0080 0080 0090 0060 0000     ..`.........`...
 801c6d8:	0000 0000 0000 0010 0010 0050 00b0 0090     ..........P.....
 801c6e8:	0090 00b0 0050 0000 0000 0000 0000 0000     ....P...........
 801c6f8:	0000 0060 0090 00f0 0080 0090 0060 0000     ..`.........`...
 801c708:	0000 0000 0000 00c0 0080 00c0 0080 0080     ................
 801c718:	0080 0080 0080 0000 0000 0000 0000 0000     ................
 801c728:	0000 0050 00b0 0090 0090 00b0 0050 0010     ..P.........P...
 801c738:	0000 0000 0000 0080 0080 00a0 00d0 0090     ................
 801c748:	0090 0090 0090 0000 0000 0000 0000 0080     ................
 801c758:	0000 0080 0080 0080 0080 0080 0080 0000     ................
 801c768:	0000 0000 0000 0080 0000 0080 0080 0080     ................
 801c778:	0080 0080 0080 0080 0000 0000 0000 0080     ................
 801c788:	0080 0090 00a0 00c0 00a0 0090 0090 0000     ................
 801c798:	0000 0000 0000 0080 0080 0080 0080 0080     ................
 801c7a8:	0080 0080 0080 0000 0000 0000 0000 0000     ................
 801c7b8:	0000 00a6 00da 0092 0092 0092 0092 0000     ................
	...
 801c7d0:	0000 00a0 00d0 0090 0090 0090 0090 0000     ................
	...
 801c7e8:	0000 0060 0090 0090 0090 0090 0060 0000     ..`.........`...
	...
 801c800:	0000 00a0 00d0 0090 0090 00d0 00a0 0080     ................
	...
 801c818:	0000 0050 00b0 0090 0090 00b0 0050 0010     ..P.........P...
	...
 801c830:	0000 00a0 00c0 0080 0080 0080 0080 0000     ................
	...
 801c848:	0000 00e0 0090 0040 0020 0090 0060 0000     ......@. ...`...
 801c858:	0000 0000 0000 0080 0080 00c0 0080 0080     ................
 801c868:	0080 0080 00c0 0000 0000 0000 0000 0000     ................
 801c878:	0000 0090 0090 0090 0090 00b0 0050 0000     ............P...
	...
 801c890:	0000 0088 0088 0050 0050 0050 0020 0000     ......P.P.P. ...
	...
 801c8a8:	0000 0092 00aa 00aa 00aa 00aa 0044 0000     ............D...
	...
 801c8c0:	0000 0088 0050 0020 0020 0050 0088 0000     ....P. . .P.....
	...
 801c8d8:	0000 0088 0050 0050 0050 0020 0020 0020     ....P.P.P. . . .
	...
 801c8f0:	0000 00f0 0010 0020 0040 0080 00f0 0000     ...... .@.......
 801c900:	0000 0000 0000 00c0 0080 0080 0080 0000     ................
 801c910:	0080 0080 0080 0080 0000 0000 0000 0080     ................
 801c920:	0080 0080 0080 0080 0080 0080 0080 0080     ................
 801c930:	0000 0000 0000 00c0 0040 0040 0040 0020     ........@.@.@. .
 801c940:	0040 0040 0040 0040 0000 0000 0000 0000     @.@.@.@.........
 801c950:	0000 0000 00e8 00b0 0000 0000 0000 0000     ................
	...
 801c968:	00e0 00a0 00a0 00a0 00a0 00a0 00e0 0000     ................

0801c978 <ASCII8x8_Table>:
	...
 801c988:	0040 0040 0040 0040 0040 0040 0000 0040     @.@.@.@.@.@...@.
 801c998:	00a0 00a0 00a0 0000 0000 0000 0000 0000     ................
 801c9a8:	0000 0024 0024 00fe 0048 00fc 0048 0048     ..$.$...H...H.H.
 801c9b8:	0038 0054 0050 0038 0014 0014 0054 0038     8.T.P.8.....T.8.
 801c9c8:	0044 00a8 00a8 0050 0014 001a 002a 0024     D.....P.....*.$.
 801c9d8:	0010 0028 0028 0010 0074 004c 004c 0030     ..(.(...t.L.L.0.
 801c9e8:	0010 0010 0010 0000 0000 0000 0000 0000     ................
 801c9f8:	0008 0010 0010 0010 0010 0010 0010 0008     ................
 801ca08:	0010 0008 0008 0008 0008 0008 0008 0010     ................
 801ca18:	0000 0000 0024 0018 003c 0018 0024 0000     ....$...<...$...
 801ca28:	0000 0000 0010 0010 007c 0010 0010 0000     ........|.......
	...
 801ca40:	0000 0008 0008 0010 0000 0000 0000 0000     ................
 801ca50:	003c 0000 0000 0000 0000 0000 0000 0000     <...............
 801ca60:	0000 0000 0018 0018 0008 0008 0008 0010     ................
 801ca70:	0010 0020 0020 0020 0018 0024 0024 0024     .. . . ...$.$.$.
 801ca80:	0024 0024 0024 0018 0008 0018 0028 0008     $.$.$.......(...
 801ca90:	0008 0008 0008 0008 0038 0044 0000 0004     ........8.D.....
 801caa0:	0008 0010 0020 007c 0018 0024 0004 0018     .... .|...$.....
 801cab0:	0004 0004 0024 0018 0004 000c 0014 0024     ....$.........$.
 801cac0:	0044 007e 0004 0004 003c 0020 0020 0038     D.~.....<. . .8.
 801cad0:	0004 0004 0024 0018 0018 0024 0020 0038     ....$.....$. .8.
 801cae0:	0024 0024 0024 0018 003c 0004 0008 0008     $.$.$...<.......
 801caf0:	0008 0010 0010 0010 0018 0024 0024 0018     ..........$.$...
 801cb00:	0024 0024 0024 0018 0018 0024 0024 0024     $.$.$.....$.$.$.
 801cb10:	001c 0004 0024 0018 0000 0000 0010 0000     ....$...........
 801cb20:	0000 0010 0000 0000 0000 0000 0008 0000     ................
 801cb30:	0000 0008 0010 0000 0000 0000 0004 0018     ................
 801cb40:	0020 0018 0004 0000 0000 0000 0000 003c      .............<.
 801cb50:	0000 003c 0000 0000 0000 0000 0020 0018     ..<......... ...
 801cb60:	0004 0018 0020 0000 0018 0024 0004 0008     .... .....$.....
 801cb70:	0010 0010 0000 0010 003c 0042 0099 00a5     ........<.B.....
 801cb80:	00a5 009d 0042 0038 0038 0044 0044 0044     ....B.8.8.D.D.D.
 801cb90:	007c 0044 0044 0044 0078 0044 0044 0078     |.D.D.D.x.D.D.x.
 801cba0:	0044 0044 0044 0078 001c 0022 0042 0040     D.D.D.x...".B.@.
 801cbb0:	0040 0042 0022 001c 0070 0048 0044 0044     @.B."...p.H.D.D.
 801cbc0:	0044 0044 0048 0070 007c 0040 0040 007c     D.D.H.p.|.@.@.|.
 801cbd0:	0040 0040 0040 007c 003c 0020 0020 0038     @.@.@.|.<. . .8.
 801cbe0:	0020 0020 0020 0020 001c 0022 0042 0040      . . . ...".B.@.
 801cbf0:	004e 0042 0022 001c 0044 0044 0044 007c     N.B."...D.D.D.|.
 801cc00:	0044 0044 0044 0044 0010 0010 0010 0010     D.D.D.D.........
 801cc10:	0010 0010 0010 0010 0004 0004 0004 0004     ................
 801cc20:	0004 0024 0024 0018 0044 0048 0050 0070     ..$.$...D.H.P.p.
 801cc30:	0050 0048 0048 0044 0020 0020 0020 0020     P.H.H.D. . . . .
 801cc40:	0020 0020 0020 003c 0082 00c6 00c6 00aa      . . .<.........
 801cc50:	00aa 00aa 00aa 0092 0042 0062 0052 0052     ........B.b.R.R.
 801cc60:	004a 004a 0046 0042 0018 0024 0042 0042     J.J.F.B...$.B.B.
 801cc70:	0042 0042 0024 0018 0078 0044 0044 0044     B.B.$...x.D.D.D.
 801cc80:	0078 0040 0040 0040 0018 0024 0042 0042     x.@.@.@...$.B.B.
 801cc90:	0042 0042 002c 001a 0078 0044 0044 0078     B.B.,...x.D.D.x.
 801cca0:	0050 0048 0044 0042 0038 0044 0040 0038     P.H.D.B.8.D.@.8.
 801ccb0:	0004 0044 0044 0038 007c 0010 0010 0010     ..D.D.8.|.......
 801ccc0:	0010 0010 0010 0010 0042 0042 0042 0042     ........B.B.B.B.
 801ccd0:	0042 0042 0024 0018 0044 0044 0028 0028     B.B.$...D.D.(.(.
 801cce0:	0028 0028 0028 0010 0092 00aa 00aa 00aa     (.(.(...........
 801ccf0:	00aa 00aa 00aa 0044 0042 0024 0024 0018     ......D.B.$.$...
 801cd00:	0018 0024 0024 0042 0044 0028 0028 0010     ..$.$.B.D.(.(...
 801cd10:	0010 0010 0010 0010 007c 0004 0008 0010     ........|.......
 801cd20:	0010 0020 0040 007c 001c 0010 0010 0010     .. .@.|.........
 801cd30:	0010 0010 0010 001c 0010 0010 0008 0008     ................
 801cd40:	0008 0008 0004 0004 001c 0004 0004 0004     ................
 801cd50:	0004 0004 0004 001c 0010 0028 0044 0000     ..........(.D...
	...
 801cd78:	0020 0010 0010 0000 0000 0000 0000 0000      ...............
 801cd88:	0000 0000 0018 0004 001c 0024 0024 001c     ..........$.$...
 801cd98:	0020 0020 0028 0034 0024 0024 0034 0028      . .(.4.$.$.4.(.
 801cda8:	0000 0000 0018 0024 0020 0020 0024 0018     ......$. . .$...
 801cdb8:	0004 0004 0014 002c 0024 0024 002c 0014     ......,.$.$.,...
 801cdc8:	0000 0000 0018 0024 003c 0020 0024 0018     ......$.<. .$...
 801cdd8:	0000 0018 0010 0010 0018 0010 0010 0010     ................
 801cde8:	0000 0018 0024 0024 0018 0004 0024 0018     ....$.$.....$...
 801cdf8:	0020 0020 0028 0034 0024 0024 0024 0024      . .(.4.$.$.$.$.
 801ce08:	0010 0000 0010 0010 0010 0010 0010 0010     ................
 801ce18:	0008 0000 0008 0008 0008 0008 0028 0010     ............(...
 801ce28:	0020 0020 0024 0028 0030 0028 0024 0024      . .$.(.0.(.$.$.
 801ce38:	0010 0010 0010 0010 0010 0010 0010 0010     ................
 801ce48:	0000 0000 00a6 00da 0092 0092 0092 0092     ................
 801ce58:	0000 0000 0028 0034 0024 0024 0024 0024     ....(.4.$.$.$.$.
 801ce68:	0000 0000 0018 0024 0024 0024 0024 0018     ......$.$.$.$...
 801ce78:	0000 0028 0034 0024 0038 0020 0020 0020     ..(.4.$.8. . . .
 801ce88:	0000 0014 002c 0024 001c 0004 0004 0004     ....,.$.........
 801ce98:	0000 0000 002c 0030 0020 0020 0020 0020     ....,.0. . . . .
 801cea8:	0000 0000 0018 0024 0010 0008 0024 0018     ......$.....$...
 801ceb8:	0000 0010 0038 0010 0010 0010 0010 0018     ....8...........
 801cec8:	0000 0000 0024 0024 0024 0024 002c 0014     ....$.$.$.$.,...
 801ced8:	0000 0000 0044 0044 0028 0028 0028 0010     ....D.D.(.(.(...
 801cee8:	0000 0000 0092 00aa 00aa 00aa 00aa 0044     ..............D.
 801cef8:	0000 0000 0044 0028 0010 0010 0028 0044     ....D.(.....(.D.
 801cf08:	0000 0028 0028 0028 0010 0010 0010 0010     ..(.(.(.........
 801cf18:	0000 0000 003c 0004 0008 0010 0020 003c     ....<....... .<.
 801cf28:	0000 0008 0010 0010 0020 0010 0010 0008     ........ .......
 801cf38:	0010 0010 0010 0010 0010 0010 0010 0010     ................
 801cf48:	0000 0010 0008 0008 0004 0008 0008 0010     ................
 801cf58:	0000 0000 0000 0060 0092 000c 0000 0000     ......`.........
 801cf68:	00ff 00ff 00ff 00ff 00ff 00ff 00ff 00ff     ................

0801cf78 <_ctype_>:
 801cf78:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 801cf88:	2020 2020 2020 2020 2020 2020 2020 2020                     
 801cf98:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 801cfa8:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 801cfb8:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 801cfc8:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 801cfd8:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 801cfe8:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 801cff8:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

0801d07c <_sromdev>:
	...
 801d088:	00000001 	.word	0x00000001
	...
